00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D30                            Art_Text_end:		even
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            
00000D30                            loc_B10:				; XREF: Vectors
00000D30 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D34 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D38 6700                       		beq.s	loc_B88
00000D3A 3039 00C0 0004             		move.w	($C00004).l,d0
00000D40 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D52 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D58 6700                       		beq.s	loc_B42
00000D5A 303C 0700                  		move.w	#$700,d0
00000D5E                            
00000D5E                            loc_B3E:
00000D5E 51C8 FFFE                  		dbf	d0,loc_B3E
00000D62                            
00000D62                            loc_B42:
00000D62 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D66 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D6C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D72 0240 003E                  		andi.w	#$3E,d0
00000D76 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D7E                            
00000D7E                            loc_B5E:				; XREF: loc_B88
00000D7E 4EB9 0000 0000             		jsr	sub_71B4C
00000D84                            
00000D84                            loc_B64:				; XREF: loc_D50
00000D84 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D88 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D8C 4E73                       		rte	
00000D8E                            ; ===========================================================================
00000D8E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D92 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D96 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D9E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DA6 0000                       		dc.w loc_E72-off_B6E
00000DA8                            ; ===========================================================================
00000DA8                            
00000DA8                            loc_B88:				; XREF: loc_B10; off_B6E
00000DA8 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DAE 6700                       		beq.s	loc_B9A
00000DB0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DB6 6600 FFC6                  		bne.w	loc_B5E
00000DBA                            
00000DBA                            loc_B9A:
00000DBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC4 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD0 6700                       		beq.s	loc_BBA
00000DD2 303C 0700                  		move.w	#$700,d0
00000DD6                            
00000DD6                            loc_BB6:
00000DD6 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDA                            
00000DDA                            loc_BBA:
00000DDA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DE8                            
00000DE8                            loc_BC8:
00000DE8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF0 66F6                       		bne.s	loc_BC8
00000DF2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DF6 6600                       		bne.s	loc_BFE
00000DF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DFE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E04 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0A 3ABC 977F                  		move.w	#$977F,(a5)
00000E0E 3ABC C000                  		move.w	#$C000,(a5)
00000E12 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E1C 6000                       		bra.s	loc_C22
00000E1E                            ; ===========================================================================
00000E1E                            
00000E1E                            loc_BFE:				; XREF: loc_BC8
00000E1E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E24 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E30 3ABC 977F                  		move.w	#$977F,(a5)
00000E34 3ABC C000                  		move.w	#$C000,(a5)
00000E38 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E3E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E42                            
00000E42                            loc_C22:				; XREF: loc_BC8
00000E42 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E46 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E4E 6000 FF2E                  		bra.w	loc_B5E
00000E52                            ; ===========================================================================
00000E52                            
00000E52                            loc_C32:				; XREF: off_B6E
00000E52 6100 0000                  		bsr.w	sub_106E
00000E56                            
00000E56                            loc_C36:				; XREF: off_B6E
00000E56 4A78 F614                  		tst.w	($FFFFF614).w
00000E5A 6700 0000                  		beq.w	locret_C42
00000E5E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E62                            
00000E62                            locret_C42:
00000E62 4E75                       		rts	
00000E64                            ; ===========================================================================
00000E64                            
00000E64                            loc_C44:				; XREF: off_B6E
00000E64 6100 0000                  		bsr.w	sub_106E
00000E68 6100 0000                  		bsr.w	sub_6886
00000E6C 6100 0000                  		bsr.w	sub_1642
00000E70 4A78 F614                  		tst.w	($FFFFF614).w
00000E74 6700 0000                  		beq.w	locret_C5C
00000E78 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E7C                            
00000E7C                            locret_C5C:
00000E7C 4E75                       		rts	
00000E7E                            ; ===========================================================================
00000E7E                            
00000E7E                            loc_C5E:				; XREF: off_B6E
00000E7E 6100 0000                  		bsr.w	sub_106E
00000E82 4E75                       		rts	
00000E84                            ; ===========================================================================
00000E84                            
00000E84                            loc_C64:				; XREF: off_B6E
00000E84 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E8E                            
00000E8E                            loc_C6E:				; XREF: off_B6E
00000E8E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E96                            
00000E96                            loc_C76:
00000E96 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E9E 66F6                       		bne.s	loc_C76		; if not, branch
00000EA0 6100 0000                  		bsr.w	ReadJoypads
00000EA4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EA8 6600                       		bne.s	loc_CB0
00000EAA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EB6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EBC 3ABC 977F                  		move.w	#$977F,(a5)
00000EC0 3ABC C000                  		move.w	#$C000,(a5)
00000EC4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ECE 6000                       		bra.s	loc_CD4
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            loc_CB0:				; XREF: loc_C76
00000ED0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EDC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE2 3ABC 977F                  		move.w	#$977F,(a5)
00000EE6 3ABC C000                  		move.w	#$C000,(a5)
00000EEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF4                            
00000EF4                            loc_CD4:				; XREF: loc_C76
00000EF4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EFE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F04 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0A 3ABC 977F                  		move.w	#$977F,(a5)
00000F0E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F12 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F1C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F22 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F28 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F2E 3ABC 977F                  		move.w	#$977F,(a5)
00000F32 3ABC 7800                  		move.w	#$7800,(a5)
00000F36 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F3C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F40 4A38 F767                  		tst.b	($FFFFF767).w
00000F44 6700                       		beq.s	loc_D50
00000F46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F4C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F52 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F58 3ABC 977F                  		move.w	#$977F,(a5)
00000F5C 3ABC 7000                  		move.w	#$7000,(a5)
00000F60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F70                            
00000F70                            loc_D50:
00000F70 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F78 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F7E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F84 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F90 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F96 6400                       		bcc.s	Demo_Time
00000F98 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F9E 588F                       		addq.l	#4,sp
00000FA0 6000 FDE2                  		bra.w	loc_B64
00000FA4                            
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            ; Subroutine to	run a demo for an amount of time
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            
00000FA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA4                            
00000FA4                            
00000FA4                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FA8 4EB9 0000 0000             		jsr	AniArt_Load
00000FAE 4EB9 0000 0000             		jsr	HudUpdate
00000FB4 6100 0000                  		bsr.w	sub_165E
00000FB8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FBC 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC4                            
00000FC4                            Demo_TimeEnd:
00000FC4 4E75                       		rts	
00000FC6                            ; End of function Demo_Time
00000FC6                            
00000FC6                            ; ===========================================================================
00000FC6                            
00000FC6                            loc_DA6:				; XREF: off_B6E
00000FC6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FCE                            
00000FCE                            loc_DAE:
00000FCE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FD6 66F6                       		bne.s	loc_DAE		; if not, branch
00000FD8 6100 0000                  		bsr.w	ReadJoypads
00000FDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FE8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FEE 3ABC 977F                  		move.w	#$977F,(a5)
00000FF2 3ABC C000                  		move.w	#$C000,(a5)
00000FF6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001000 4BF9 00C0 0004             		lea	($C00004).l,a5
00001006 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000100C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001012 3ABC 977F                  		move.w	#$977F,(a5)
00001016 3ABC 7800                  		move.w	#$7800,(a5)
0000101A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001020 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001024 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001030 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001036 3ABC 977F                  		move.w	#$977F,(a5)
0000103A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000103E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001044 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001048 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001050 6100 0000                  		bsr.w	PalCycle_SS
00001054 4A38 F767                  		tst.b	($FFFFF767).w
00001058 6700                       		beq.s	loc_E64
0000105A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001060 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001066 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000106C 3ABC 977F                  		move.w	#$977F,(a5)
00001070 3ABC 7000                  		move.w	#$7000,(a5)
00001074 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000107E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001084                            
00001084                            loc_E64:
00001084 4A78 F614                  		tst.w	($FFFFF614).w
00001088 6700 0000                  		beq.w	locret_E70
0000108C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001090                            
00001090                            locret_E70:
00001090 4E75                       		rts	
00001092                            ; ===========================================================================
00001092                            
00001092                            loc_E72:				; XREF: off_B6E
00001092 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109A                            
0000109A                            loc_E7A:
0000109A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A2 66F6                       		bne.s	loc_E7A		; if not, branch
000010A4 6100 0000                  		bsr.w	ReadJoypads
000010A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000010AC 6600                       		bne.s	loc_EB4
000010AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C0 3ABC 977F                  		move.w	#$977F,(a5)
000010C4 3ABC C000                  		move.w	#$C000,(a5)
000010C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D2 6000                       		bra.s	loc_ED8
000010D4                            ; ===========================================================================
000010D4                            
000010D4                            loc_EB4:				; XREF: loc_E7A
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC C000                  		move.w	#$C000,(a5)
000010EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8                            
000010F8                            loc_ED8:				; XREF: loc_E7A
000010F8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001102 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001108 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110E                            
0000110E                            loc_EEE:
0000110E 3ABC 977F                  		move.w	#$977F,(a5)
00001112 3ABC 7C00                  		move.w	#$7C00,(a5)
00001116 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000111C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001120 4BF9 00C0 0004             		lea	($C00004).l,a5
00001126 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000112C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001132 3ABC 977F                  		move.w	#$977F,(a5)
00001136 3ABC 7800                  		move.w	#$7800,(a5)
0000113A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001140 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001144 4A38 F767                  		tst.b	($FFFFF767).w
00001148 6700                       		beq.s	loc_F54
0000114A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001150 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001156 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000115C 3ABC 977F                  		move.w	#$977F,(a5)
00001160 3ABC 7000                  		move.w	#$7000,(a5)
00001164 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000116E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001174                            
00001174                            loc_F54:
00001174 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000117C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001182 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00001188 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
0000118E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001194 6100 0000                  		bsr.w	LoadTilesAsYouMove
00001198 4EB9 0000 0000             		jsr	AniArt_Load
0000119E 4EB9 0000 0000             		jsr	HudUpdate
000011A4 6100 0000                  		bsr.w	sub_1642
000011A8 4E75                       		rts	
000011AA                            ; ===========================================================================
000011AA                            
000011AA                            loc_F8A:				; XREF: off_B6E
000011AA 6100 0000                  		bsr.w	sub_106E
000011AE 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B2 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011B8 4E75                       		rts	
000011BA                            ; ===========================================================================
000011BA                            
000011BA                            loc_F9A:				; XREF: off_B6E
000011BA 6100 0000                  		bsr.w	sub_106E
000011BE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C2 6000 0000                  		bra.w	sub_1642
000011C6                            ; ===========================================================================
000011C6                            
000011C6                            loc_FA6:				; XREF: off_B6E
000011C6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011CE                            
000011CE                            loc_FAE:
000011CE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011D6 66F6                       		bne.s	loc_FAE		; if not, branch
000011D8 6100 0000                  		bsr.w	ReadJoypads
000011DC 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E2 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011E8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011EE 3ABC 977F                  		move.w	#$977F,(a5)
000011F2 3ABC C000                  		move.w	#$C000,(a5)
000011F6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011FC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001200 4BF9 00C0 0004             		lea	($C00004).l,a5
00001206 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000120C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001212 3ABC 977F                  		move.w	#$977F,(a5)
00001216 3ABC 7800                  		move.w	#$7800,(a5)
0000121A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001220 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001224 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001230 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001236 3ABC 977F                  		move.w	#$977F,(a5)
0000123A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000123E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001244 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001248 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001250 4A38 F767                  		tst.b	($FFFFF767).w
00001254 6700                       		beq.s	loc_1060
00001256 4BF9 00C0 0004             		lea	($C00004).l,a5
0000125C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001262 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001268 3ABC 977F                  		move.w	#$977F,(a5)
0000126C 3ABC 7000                  		move.w	#$7000,(a5)
00001270 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001276 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001280                            
00001280                            loc_1060:
00001280 4A78 F614                  		tst.w	($FFFFF614).w
00001284 6700 0000                  		beq.w	locret_106C
00001288 5378 F614                  		subq.w	#1,($FFFFF614).w
0000128C                            
0000128C                            locret_106C:
0000128C 4E75                       		rts	
0000128E                            
0000128E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000128E                            
0000128E                            
0000128E                            sub_106E:				; XREF: loc_C32; et al
0000128E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001296                            
00001296                            loc_1076:
00001296 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000129E 66F6                       		bne.s	loc_1076	; if not, branch
000012A0 6100 0000                  		bsr.w	ReadJoypads
000012A4 4A38 F64E                  		tst.b	($FFFFF64E).w
000012A8 6600                       		bne.s	loc_10B0
000012AA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012B6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012BC 3ABC 977F                  		move.w	#$977F,(a5)
000012C0 3ABC C000                  		move.w	#$C000,(a5)
000012C4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012CE 6000                       		bra.s	loc_10D4
000012D0                            ; ===========================================================================
000012D0                            
000012D0                            loc_10B0:				; XREF: sub_106E
000012D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012D6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012DC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E2 3ABC 977F                  		move.w	#$977F,(a5)
000012E6 3ABC C000                  		move.w	#$C000,(a5)
000012EA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F4                            
000012F4                            loc_10D4:				; XREF: sub_106E
000012F4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FA 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001300 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001306 3ABC 977F                  		move.w	#$977F,(a5)
0000130A 3ABC 7800                  		move.w	#$7800,(a5)
0000130E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001314 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001318 4BF9 00C0 0004             		lea	($C00004).l,a5
0000131E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001324 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132A 3ABC 977F                  		move.w	#$977F,(a5)
0000132E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001332 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001338 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000133C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001344 4E75                       		rts	
00001346                            ; End of function sub_106E
00001346                            
00001346                            ; ---------------------------------------------------------------------------
00001346                            ; Subroutine to	move pallets from the RAM to CRAM
00001346                            ; ---------------------------------------------------------------------------
00001346                            
00001346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001346                            
00001346                            
00001346                            PalToCRAM:
00001346 46FC 2700                  		move	#$2700,sr
0000134A 4A78 F644                  		tst.w	($FFFFF644).w
0000134E 6700                       		beq.s	locret_119C
00001350 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001356 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135A 43F9 00C0 0000             		lea	($C00000).l,a1
00001360 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001364 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000136C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000136E 2298                       		move.l	(a0)+,(a1)
00001370 2298                       		move.l	(a0)+,(a1)
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B2 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013B6 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BA 6600                       		bne.s	loc_119E
000013BC                            
000013BC                            locret_119C:
000013BC 4E73                       		rte	
000013BE                            ; ===========================================================================
000013BE                            
000013BE                            loc_119E:				; XREF: PalToCRAM
000013BE 4238 F64F                  		clr.b	($FFFFF64F).w
000013C2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013C6 6100 FBDC                  		bsr.w	Demo_Time
000013CA 4EB9 0000 0000             		jsr	sub_71B4C
000013D0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D4 4E73                       		rte	
000013D6                            ; End of function PalToCRAM
000013D6                            
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            ; Subroutine to	initialise joypads
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            
000013D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D6                            
000013D6                            
000013D6                            JoypadInit:				; XREF: GameClrRAM
000013D6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013DE                            
000013DE                            Joypad_WaitZ80:
000013DE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013E6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013E8 7040                       		moveq	#$40,d0
000013EA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013F6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000013FC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001404 4E75                       		rts	
00001406                            ; End of function JoypadInit
00001406                            
00001406                            ; ---------------------------------------------------------------------------
00001406                            ; Subroutine to	read joypad input, and send it to the RAM
00001406                            ; ---------------------------------------------------------------------------
00001406                            
00001406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001406                            
00001406                            
00001406                            ReadJoypads:
00001406 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140A 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001410 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001412 5449                       		addq.w	#2,a1		; do the second	joypad
00001414                            
00001414                            Joypad_Read:
00001414 12BC 0000                  		move.b	#0,(a1)
00001418 4E71                       		nop	
0000141A 4E71                       		nop	
0000141C 1011                       		move.b	(a1),d0
0000141E E508                       		lsl.b	#2,d0
00001420 0200 00C0                  		andi.b	#$C0,d0
00001424 12BC 0040                  		move.b	#$40,(a1)
00001428 4E71                       		nop	
0000142A 4E71                       		nop	
0000142C 1211                       		move.b	(a1),d1
0000142E 0201 003F                  		andi.b	#$3F,d1
00001432 8001                       		or.b	d1,d0
00001434 4600                       		not.b	d0
00001436 1210                       		move.b	(a0),d1
00001438 B101                       		eor.b	d0,d1
0000143A 10C0                       		move.b	d0,(a0)+
0000143C C200                       		and.b	d0,d1
0000143E 10C1                       		move.b	d1,(a0)+
00001440 4E75                       		rts	
00001442                            ; End of function ReadJoypads
00001442                            
00001442                            
00001442                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001442                            
00001442                            
00001442                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001442 41F9 00C0 0004             		lea	($C00004).l,a0
00001448 43F9 00C0 0000             		lea	($C00000).l,a1
0000144E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001454 7E12                       		moveq	#$12,d7
00001456                            
00001456                            VDP_Loop:
00001456 309A                       		move.w	(a2)+,(a0)
00001458 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000145C                            
0000145C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001462 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001466 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000146C 7000                       		moveq	#0,d0
0000146E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001478 3E3C 003F                  		move.w	#$3F,d7
0000147C                            
0000147C                            VDP_ClrCRAM:
0000147C 3280                       		move.w	d0,(a1)
0000147E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001482                            
00001482 42B8 F616                  		clr.l	($FFFFF616).w
00001486 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148A 2F01                       		move.l	d1,-(sp)
0000148C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001492 3ABC 8F01                  		move.w	#$8F01,(a5)
00001496 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000149C 3ABC 9780                  		move.w	#$9780,(a5)
000014A0 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014A6 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014AE                            
000014AE                            loc_128E:
000014AE 3215                       		move.w	(a5),d1
000014B0 0801 0001                  		btst	#1,d1
000014B4 66F8                       		bne.s	loc_128E
000014B6                            
000014B6 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BA 221F                       		move.l	(sp)+,d1
000014BC 4E75                       		rts	
000014BE                            ; End of function VDPSetupGame
000014BE                            
000014BE                            ; ===========================================================================
000014BE 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014C6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014CE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014D6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014DE 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E4                            
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            ; Subroutine to	clear the screen
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            
000014E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E4                            
000014E4                            
000014E4                            ClearScreen:
000014E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EA 3ABC 8F01                  		move.w	#$8F01,(a5)
000014EE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F4 3ABC 9780                  		move.w	#$9780,(a5)
000014F8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000014FE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001506                            
00001506                            loc_12E6:
00001506 3215                       		move.w	(a5),d1
00001508 0801 0001                  		btst	#1,d1
0000150C 66F8                       		bne.s	loc_12E6
0000150E                            
0000150E 3ABC 8F02                  		move.w	#$8F02,(a5)
00001512 4BF9 00C0 0004             		lea	($C00004).l,a5
00001518 3ABC 8F01                  		move.w	#$8F01,(a5)
0000151C 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001522 3ABC 9780                  		move.w	#$9780,(a5)
00001526 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000152C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001534                            
00001534                            loc_1314:
00001534 3215                       		move.w	(a5),d1
00001536 0801 0001                  		btst	#1,d1
0000153A 66F8                       		bne.s	loc_1314
0000153C                            
0000153C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001540 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001548 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001550 43F8 F800                  		lea	($FFFFF800).w,a1
00001554 7000                       		moveq	#0,d0
00001556 323C 00A0                  		move.w	#$A0,d1
0000155A                            
0000155A                            loc_133A:
0000155A 22C0                       		move.l	d0,(a1)+
0000155C 51C9 FFFC                  		dbf	d1,loc_133A
00001560                            
00001560 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001564 7000                       		moveq	#0,d0
00001566 323C 0100                  		move.w	#$100,d1
0000156A                            
0000156A                            loc_134A:
0000156A 22C0                       		move.l	d0,(a1)+
0000156C 51C9 FFFC                  		dbf	d1,loc_134A
00001570 4E75                       		rts	
00001572                            ; End of function ClearScreen
00001572                            
00001572                            ; ---------------------------------------------------------------------------
00001572                            ; Subroutine to	load the sound driver
00001572                            ; ---------------------------------------------------------------------------
00001572                            
00001572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001572                            
00001572                            
00001572                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001572 4E71                       		nop	
00001574 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000157C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001584 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158A 43F9 00A0 0000             		lea	($A00000).l,a1
00001590 6100 0000                  		bsr.w	KosDec		; decompress
00001594 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000159C 4E71                       		nop	
0000159E 4E71                       		nop	
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015AC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B4 4E75                       		rts	
000015B6                            ; End of function SoundDriverLoad
000015B6                            
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            ; Subroutine to	play a sound or	music track
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            
000015B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B6                            
000015B6                            
000015B6                            PlaySound:
000015B6 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BA 4E75                       		rts	
000015BC                            ; End of function PlaySound
000015BC                            
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            ; Subroutine to	play a special sound/music (E0-E4)
000015BC                            ;
000015BC                            ; E0 - Fade out
000015BC                            ; E1 - Sega
000015BC                            ; E2 - Speed up
000015BC                            ; E3 - Normal speed
000015BC                            ; E4 - Stop
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            
000015BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BC                            
000015BC                            
000015BC                            PlaySound_Special:
000015BC 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C0 4E75                       		rts	
000015C2                            ; End of function PlaySound_Special
000015C2                            
000015C2                            ; ===========================================================================
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            ; Unused sound/music subroutine
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            
000015C2                            PlaySound_Unk:
000015C2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015C6 4E75                       		rts	
000015C8                            
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            ; Subroutine to	pause the game
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            
000015C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C8                            
000015C8                            
000015C8                            PauseGame:				; XREF: Level_MainLoop; et al
000015C8 4E71                       		nop	
000015CA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015CE 6700                       		beq.s	Unpause		; if not, branch
000015D0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D4 6600                       		bne.s	loc_13BE	; if yes, branch
000015D6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015DC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015DE                            
000015DE                            loc_13BE:
000015DE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EA                            
000015EA                            loc_13CA:
000015EA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F0 6100 0000                  		bsr.w	DelayProgram
000015F4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015F8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001600 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001602 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001608 4E71                       		nop	
0000160A 6000                       		bra.s	loc_1404
0000160C                            ; ===========================================================================
0000160C                            
0000160C                            Pause_ChkBC:				; XREF: PauseGame
0000160C 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001612 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001614 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000161C                            
0000161C                            Pause_ChkStart:				; XREF: PauseGame
0000161C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001622 67C6                       		beq.s	loc_13CA	; if not, branch
00001624                            
00001624                            loc_1404:				; XREF: PauseGame
00001624 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162A                            
0000162A                            Unpause:				; XREF: PauseGame
0000162A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001630                            
00001630                            Pause_DoNothing:			; XREF: PauseGame
00001630 4E75                       		rts	
00001632                            ; ===========================================================================
00001632                            
00001632                            Pause_SlowMo:				; XREF: PauseGame
00001632 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001638 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000163E 4E75                       		rts	
00001640                            ; End of function PauseGame
00001640                            
00001640                            ; ---------------------------------------------------------------------------
00001640                            ; Subroutine to	display	patterns via the VDP
00001640                            ; ---------------------------------------------------------------------------
00001640                            
00001640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001640                            
00001640                            
00001640                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001640 4DF9 00C0 0000             		lea	($C00000).l,a6
00001646 283C 0080 0000             		move.l	#$800000,d4
0000164C                            
0000164C                            loc_142C:
0000164C 2D40 0004                  		move.l	d0,4(a6)
00001650 3601                       		move.w	d1,d3
00001652                            
00001652                            loc_1432:
00001652 3C99                       		move.w	(a1)+,(a6)
00001654 51CB FFFC                  		dbf	d3,loc_1432
00001658 D084                       		add.l	d4,d0
0000165A 51CA FFF0                  		dbf	d2,loc_142C
0000165E 4E75                       		rts	
00001660                            ; End of function ShowVDPGraphics
00001660                            
00001660                            ; ---------------------------------------------------------------------------
00001660                            ; Nemesis decompression	algorithm
00001660                            ; ---------------------------------------------------------------------------
00001660                            
00001660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001660                            
00001660                            
00001660                            NemDec:
00001660 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001664 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166A 49F9 00C0 0000             		lea	($C00000).l,a4
00001670 6000                       		bra.s	loc_145C
00001672                            ; ===========================================================================
00001672 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001676 47F9 0000 0000             		lea	(loc_1518).l,a3
0000167C                            
0000167C                            loc_145C:				; XREF: NemDec
0000167C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001680 3418                       		move.w	(a0)+,d2
00001682 E34A                       		lsl.w	#1,d2
00001684 6400                       		bcc.s	loc_146A
00001686 D6FC 000A                  		adda.w	#$A,a3
0000168A                            
0000168A                            loc_146A:
0000168A E54A                       		lsl.w	#2,d2
0000168C 3A42                       		movea.w	d2,a5
0000168E 7608                       		moveq	#8,d3
00001690 7400                       		moveq	#0,d2
00001692 7800                       		moveq	#0,d4
00001694 6100 0000                  		bsr.w	NemDec4
00001698 1A18                       		move.b	(a0)+,d5
0000169A E145                       		asl.w	#8,d5
0000169C 1A18                       		move.b	(a0)+,d5
0000169E 3C3C 0010                  		move.w	#$10,d6
000016A2 6100                       		bsr.s	NemDec2
000016A4 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016A8 4E75                       		rts	
000016AA                            ; End of function NemDec
000016AA                            
000016AA                            
000016AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AA                            
000016AA                            
000016AA                            NemDec2:				; XREF: NemDec
000016AA 3E06                       		move.w	d6,d7
000016AC 5147                       		subq.w	#8,d7
000016AE 3205                       		move.w	d5,d1
000016B0 EE69                       		lsr.w	d7,d1
000016B2 0C01 00FC                  		cmpi.b	#-4,d1
000016B6 6400                       		bcc.s	loc_14D6
000016B8 0241 00FF                  		andi.w	#$FF,d1
000016BC D241                       		add.w	d1,d1
000016BE 1031 1000                  		move.b	(a1,d1.w),d0
000016C2 4880                       		ext.w	d0
000016C4 9C40                       		sub.w	d0,d6
000016C6 0C46 0009                  		cmpi.w	#9,d6
000016CA 6400                       		bcc.s	loc_14B2
000016CC 5046                       		addq.w	#8,d6
000016CE E145                       		asl.w	#8,d5
000016D0 1A18                       		move.b	(a0)+,d5
000016D2                            
000016D2                            loc_14B2:
000016D2 1231 1001                  		move.b	1(a1,d1.w),d1
000016D6 3001                       		move.w	d1,d0
000016D8 0241 000F                  		andi.w	#$F,d1
000016DC 0240 00F0                  		andi.w	#$F0,d0
000016E0                            
000016E0                            loc_14C0:				; XREF: NemDec3
000016E0 E848                       		lsr.w	#4,d0
000016E2                            
000016E2                            loc_14C2:				; XREF: NemDec3
000016E2 E98C                       		lsl.l	#4,d4
000016E4 8801                       		or.b	d1,d4
000016E6 5343                       		subq.w	#1,d3
000016E8 6600                       		bne.s	loc_14D0
000016EA 4ED3                       		jmp	(a3)
000016EC                            ; End of function NemDec2
000016EC                            
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            NemDec3:				; XREF: loc_1502
000016EC 7800                       		moveq	#0,d4
000016EE 7608                       		moveq	#8,d3
000016F0                            
000016F0                            loc_14D0:				; XREF: NemDec2
000016F0 51C8 FFF0                  		dbf	d0,loc_14C2
000016F4 60B4                       		bra.s	NemDec2
000016F6                            ; ===========================================================================
000016F6                            
000016F6                            loc_14D6:				; XREF: NemDec2
000016F6 5D46                       		subq.w	#6,d6
000016F8 0C46 0009                  		cmpi.w	#9,d6
000016FC 6400                       		bcc.s	loc_14E4
000016FE 5046                       		addq.w	#8,d6
00001700 E145                       		asl.w	#8,d5
00001702 1A18                       		move.b	(a0)+,d5
00001704                            
00001704                            loc_14E4:				; XREF: NemDec3
00001704 5F46                       		subq.w	#7,d6
00001706 3205                       		move.w	d5,d1
00001708 EC69                       		lsr.w	d6,d1
0000170A 3001                       		move.w	d1,d0
0000170C 0241 000F                  		andi.w	#$F,d1
00001710 0240 0070                  		andi.w	#$70,d0
00001714 0C46 0009                  		cmpi.w	#9,d6
00001718 64C6                       		bcc.s	loc_14C0
0000171A 5046                       		addq.w	#8,d6
0000171C E145                       		asl.w	#8,d5
0000171E 1A18                       		move.b	(a0)+,d5
00001720 60BE                       		bra.s	loc_14C0
00001722                            ; End of function NemDec3
00001722                            
00001722                            ; ===========================================================================
00001722                            
00001722                            loc_1502:				; XREF: NemDec
00001722 2884                       		move.l	d4,(a4)
00001724 534D                       		subq.w	#1,a5
00001726 380D                       		move.w	a5,d4
00001728 66C2                       		bne.s	NemDec3
0000172A 4E75                       		rts	
0000172C                            ; ===========================================================================
0000172C B982                       		eor.l	d4,d2
0000172E 2882                       		move.l	d2,(a4)
00001730 534D                       		subq.w	#1,a5
00001732 380D                       		move.w	a5,d4
00001734 66B6                       		bne.s	NemDec3
00001736 4E75                       		rts	
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1518:				; XREF: NemDec
00001738 28C4                       		move.l	d4,(a4)+
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66AC                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 28C2                       		move.l	d2,(a4)+
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66A0                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            
0000174E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000174E                            
0000174E                            
0000174E                            NemDec4:				; XREF: NemDec
0000174E 1018                       		move.b	(a0)+,d0
00001750                            
00001750                            loc_1530:
00001750 0C00 00FF                  		cmpi.b	#-1,d0
00001754 6600                       		bne.s	loc_1538
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758                            
00001758                            loc_1538:				; XREF: NemDec4
00001758 3E00                       		move.w	d0,d7
0000175A                            
0000175A                            loc_153A:
0000175A 1018                       		move.b	(a0)+,d0
0000175C 0C00 0080                  		cmpi.b	#$80,d0
00001760 64EE                       		bcc.s	loc_1530
00001762 1200                       		move.b	d0,d1
00001764 0247 000F                  		andi.w	#$F,d7
00001768 0241 0070                  		andi.w	#$70,d1
0000176C 8E41                       		or.w	d1,d7
0000176E 0240 000F                  		andi.w	#$F,d0
00001772 1200                       		move.b	d0,d1
00001774 E149                       		lsl.w	#8,d1
00001776 8E41                       		or.w	d1,d7
00001778 7208                       		moveq	#8,d1
0000177A 9240                       		sub.w	d0,d1
0000177C 6600                       		bne.s	loc_1568
0000177E 1018                       		move.b	(a0)+,d0
00001780 D040                       		add.w	d0,d0
00001782 3387 0000                  		move.w	d7,(a1,d0.w)
00001786 60D2                       		bra.s	loc_153A
00001788                            ; ===========================================================================
00001788                            
00001788                            loc_1568:				; XREF: NemDec4
00001788 1018                       		move.b	(a0)+,d0
0000178A E368                       		lsl.w	d1,d0
0000178C D040                       		add.w	d0,d0
0000178E 7A01                       		moveq	#1,d5
00001790 E36D                       		lsl.w	d1,d5
00001792 5345                       		subq.w	#1,d5
00001794                            
00001794                            loc_1574:
00001794 3387 0000                  		move.w	d7,(a1,d0.w)
00001798 5440                       		addq.w	#2,d0
0000179A 51CD FFF8                  		dbf	d5,loc_1574
0000179E 60BA                       		bra.s	loc_153A
000017A0                            ; End of function NemDec4
000017A0                            
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            ; Subroutine to	load pattern load cues
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            
000017A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A0                            
000017A0                            
000017A0                            LoadPLC:
000017A0 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AA D040                       		add.w	d0,d0
000017AC 3031 0000                  		move.w	(a1,d0.w),d0
000017B0 43F1 0000                  		lea	(a1,d0.w),a1
000017B4 45F8 F680                  		lea	($FFFFF680).w,a2
000017B8                            
000017B8                            loc_1598:
000017B8 4A92                       		tst.l	(a2)
000017BA 6700                       		beq.s	loc_15A0
000017BC 5C4A                       		addq.w	#6,a2
000017BE 60F8                       		bra.s	loc_1598
000017C0                            ; ===========================================================================
000017C0                            
000017C0                            loc_15A0:				; XREF: LoadPLC
000017C0 3019                       		move.w	(a1)+,d0
000017C2 6B00                       		bmi.s	loc_15AC
000017C4                            
000017C4                            loc_15A4:
000017C4 24D9                       		move.l	(a1)+,(a2)+
000017C6 34D9                       		move.w	(a1)+,(a2)+
000017C8 51C8 FFFA                  		dbf	d0,loc_15A4
000017CC                            
000017CC                            loc_15AC:
000017CC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D0 4E75                       		rts	
000017D2                            ; End of function LoadPLC
000017D2                            
000017D2                            
000017D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D2                            
000017D2                            
000017D2                            LoadPLC2:
000017D2 48E7 0060                  		movem.l	a1-a2,-(sp)
000017D6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017DC D040                       		add.w	d0,d0
000017DE 3031 0000                  		move.w	(a1,d0.w),d0
000017E2 43F1 0000                  		lea	(a1,d0.w),a1
000017E6 6100                       		bsr.s	ClearPLC
000017E8 45F8 F680                  		lea	($FFFFF680).w,a2
000017EC 3019                       		move.w	(a1)+,d0
000017EE 6B00                       		bmi.s	loc_15D8
000017F0                            
000017F0                            loc_15D0:
000017F0 24D9                       		move.l	(a1)+,(a2)+
000017F2 34D9                       		move.w	(a1)+,(a2)+
000017F4 51C8 FFFA                  		dbf	d0,loc_15D0
000017F8                            
000017F8                            loc_15D8:
000017F8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017FC 4E75                       		rts	
000017FE                            ; End of function LoadPLC2
000017FE                            
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            ; Subroutine to	clear the pattern load cues
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            
000017FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FE                            
000017FE                            
000017FE                            ClearPLC:				; XREF: LoadPLC2
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 701F                       		moveq	#$1F,d0
00001804                            
00001804                            ClearPLC_Loop:
00001804 429A                       		clr.l	(a2)+
00001806 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180A 4E75                       		rts	
0000180C                            ; End of function ClearPLC
0000180C                            
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            ; Subroutine to	use graphics listed in a pattern load cue
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            
0000180C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000180C                            
0000180C                            
0000180C                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000180C 4AB8 F680                  		tst.l	($FFFFF680).w
00001810 6700                       		beq.s	locret_1640
00001812 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001816 6600                       		bne.s	locret_1640
00001818 2078 F680                  		movea.l	($FFFFF680).w,a0
0000181C 47F9 0000 1722             		lea	(loc_1502).l,a3
00001822 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001826 3418                       		move.w	(a0)+,d2
00001828 6A00                       		bpl.s	loc_160E
0000182A D6FC 000A                  		adda.w	#$A,a3
0000182E                            
0000182E                            loc_160E:
0000182E 0242 7FFF                  		andi.w	#$7FFF,d2
00001832 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001836 6100 FF16                  		bsr.w	NemDec4
0000183A 1A18                       		move.b	(a0)+,d5
0000183C E145                       		asl.w	#8,d5
0000183E 1A18                       		move.b	(a0)+,d5
00001840 7C10                       		moveq	#$10,d6
00001842 7000                       		moveq	#0,d0
00001844 21C8 F680                  		move.l	a0,($FFFFF680).w
00001848 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000184C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001850 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001854 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001858 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000185C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001860                            
00001860                            locret_1640:
00001860 4E75                       		rts	
00001862                            ; End of function RunPLC_RAM
00001862                            
00001862                            
00001862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001862                            
00001862                            
00001862                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001862 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001866 6700 0000                  		beq.w	locret_16DA
0000186A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001870 7000                       		moveq	#0,d0
00001872 3038 F684                  		move.w	($FFFFF684).w,d0
00001876 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000187C 6000                       		bra.s	loc_1676
0000187E                            ; End of function sub_1642
0000187E                            
0000187E                            
0000187E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000187E                            
0000187E                            
0000187E                            sub_165E:				; XREF: Demo_Time
0000187E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001882 6700                       		beq.s	locret_16DA
00001884 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188A 7000                       		moveq	#0,d0
0000188C 3038 F684                  		move.w	($FFFFF684).w,d0
00001890 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001896                            
00001896                            loc_1676:				; XREF: sub_1642
00001896 49F9 00C0 0004             		lea	($C00004).l,a4
0000189C E588                       		lsl.l	#2,d0
0000189E E448                       		lsr.w	#2,d0
000018A0 0040 4000                  		ori.w	#$4000,d0
000018A4 4840                       		swap	d0
000018A6 2880                       		move.l	d0,(a4)
000018A8 594C                       		subq.w	#4,a4
000018AA 2078 F680                  		movea.l	($FFFFF680).w,a0
000018AE 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B2 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018B6 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BA 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018BE 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CA                            
000018CA                            loc_16AA:				; XREF: sub_165E
000018CA 3A7C 0008                  		movea.w	#8,a5
000018CE 6100 FE1C                  		bsr.w	NemDec3
000018D2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018D6 6700                       		beq.s	loc_16DC
000018D8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018DC 66EC                       		bne.s	loc_16AA
000018DE 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018EE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FA                            
000018FA                            locret_16DA:				; XREF: sub_1642
000018FA 4E75                       		rts	
000018FC                            ; ===========================================================================
000018FC                            
000018FC                            loc_16DC:				; XREF: sub_165E
000018FC 41F8 F680                  		lea	($FFFFF680).w,a0
00001900 7015                       		moveq	#$15,d0
00001902                            
00001902                            loc_16E2:				; XREF: sub_165E
00001902 20E8 0006                  		move.l	6(a0),(a0)+
00001906 51C8 FFFA                  		dbf	d0,loc_16E2
0000190A 4E75                       		rts	
0000190C                            ; End of function sub_165E
0000190C                            
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            ; Subroutine to	execute	the pattern load cue
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            
0000190C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000190C                            
0000190C                            
0000190C                            RunPLC_ROM:
0000190C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001912 D040                       		add.w	d0,d0
00001914 3031 0000                  		move.w	(a1,d0.w),d0
00001918 43F1 0000                  		lea	(a1,d0.w),a1
0000191C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000191E                            
0000191E                            RunPLC_Loop:
0000191E 2059                       		movea.l	(a1)+,a0	; get art pointer
00001920 7000                       		moveq	#0,d0
00001922 3019                       		move.w	(a1)+,d0	; get VRAM address
00001924 E588                       		lsl.l	#2,d0		; divide address by $20
00001926 E448                       		lsr.w	#2,d0
00001928 0040 4000                  		ori.w	#$4000,d0
0000192C 4840                       		swap	d0
0000192E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001934 6100 FD2A                  		bsr.w	NemDec		; decompress
00001938 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000193C 4E75                       		rts	
0000193E                            ; End of function RunPLC_ROM
0000193E                            
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            ; Enigma decompression algorithm
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            
0000193E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193E                            
0000193E                            
0000193E                            EniDec:
0000193E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001942 3640                       		movea.w	d0,a3
00001944 1018                       		move.b	(a0)+,d0
00001946 4880                       		ext.w	d0
00001948 3A40                       		movea.w	d0,a5
0000194A 1818                       		move.b	(a0)+,d4
0000194C E70C                       		lsl.b	#3,d4
0000194E 3458                       		movea.w	(a0)+,a2
00001950 D4CB                       		adda.w	a3,a2
00001952 3858                       		movea.w	(a0)+,a4
00001954 D8CB                       		adda.w	a3,a4
00001956 1A18                       		move.b	(a0)+,d5
00001958 E145                       		asl.w	#8,d5
0000195A 1A18                       		move.b	(a0)+,d5
0000195C 7C10                       		moveq	#$10,d6
0000195E                            
0000195E                            loc_173E:				; XREF: loc_1768
0000195E 7007                       		moveq	#7,d0
00001960 3E06                       		move.w	d6,d7
00001962 9E40                       		sub.w	d0,d7
00001964 3205                       		move.w	d5,d1
00001966 EE69                       		lsr.w	d7,d1
00001968 0241 007F                  		andi.w	#$7F,d1
0000196C 3401                       		move.w	d1,d2
0000196E 0C41 0040                  		cmpi.w	#$40,d1
00001972 6400                       		bcc.s	loc_1758
00001974 7006                       		moveq	#6,d0
00001976 E24A                       		lsr.w	#1,d2
00001978                            
00001978                            loc_1758:
00001978 6100 0000                  		bsr.w	sub_188C
0000197C 0242 000F                  		andi.w	#$F,d2
00001980 E849                       		lsr.w	#4,d1
00001982 D241                       		add.w	d1,d1
00001984 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001988                            ; End of function EniDec
00001988                            
00001988                            ; ===========================================================================
00001988                            
00001988                            loc_1768:				; XREF: loc_17B4
00001988 32CA                       		move.w	a2,(a1)+
0000198A 524A                       		addq.w	#1,a2
0000198C 51CA FFFA                  		dbf	d2,loc_1768
00001990 60CC                       		bra.s	loc_173E
00001992                            ; ===========================================================================
00001992                            
00001992                            loc_1772:				; XREF: loc_17B4
00001992 32CC                       		move.w	a4,(a1)+
00001994 51CA FFFC                  		dbf	d2,loc_1772
00001998 60C4                       		bra.s	loc_173E
0000199A                            ; ===========================================================================
0000199A                            
0000199A                            loc_177A:				; XREF: loc_17B4
0000199A 6100 0000                  		bsr.w	loc_17DC
0000199E                            
0000199E                            loc_177E:
0000199E 32C1                       		move.w	d1,(a1)+
000019A0 51CA FFFC                  		dbf	d2,loc_177E
000019A4 60B8                       		bra.s	loc_173E
000019A6                            ; ===========================================================================
000019A6                            
000019A6                            loc_1786:				; XREF: loc_17B4
000019A6 6100 0000                  		bsr.w	loc_17DC
000019AA                            
000019AA                            loc_178A:
000019AA 32C1                       		move.w	d1,(a1)+
000019AC 5241                       		addq.w	#1,d1
000019AE 51CA FFFA                  		dbf	d2,loc_178A
000019B2 60AA                       		bra.s	loc_173E
000019B4                            ; ===========================================================================
000019B4                            
000019B4                            loc_1794:				; XREF: loc_17B4
000019B4 6100 0000                  		bsr.w	loc_17DC
000019B8                            
000019B8                            loc_1798:
000019B8 32C1                       		move.w	d1,(a1)+
000019BA 5341                       		subq.w	#1,d1
000019BC 51CA FFFA                  		dbf	d2,loc_1798
000019C0 609C                       		bra.s	loc_173E
000019C2                            ; ===========================================================================
000019C2                            
000019C2                            loc_17A2:				; XREF: loc_17B4
000019C2 0C42 000F                  		cmpi.w	#$F,d2
000019C6 6700                       		beq.s	loc_17C4
000019C8                            
000019C8                            loc_17A8:
000019C8 6100 0000                  		bsr.w	loc_17DC
000019CC 32C1                       		move.w	d1,(a1)+
000019CE 51CA FFF8                  		dbf	d2,loc_17A8
000019D2 608A                       		bra.s	loc_173E
000019D4                            ; ===========================================================================
000019D4                            
000019D4                            loc_17B4:				; XREF: EniDec
000019D4 60B2                       		bra.s	loc_1768
000019D6                            ; ===========================================================================
000019D6 60B0                       		bra.s	loc_1768
000019D8                            ; ===========================================================================
000019D8 60B8                       		bra.s	loc_1772
000019DA                            ; ===========================================================================
000019DA 60B6                       		bra.s	loc_1772
000019DC                            ; ===========================================================================
000019DC 60BC                       		bra.s	loc_177A
000019DE                            ; ===========================================================================
000019DE 60C6                       		bra.s	loc_1786
000019E0                            ; ===========================================================================
000019E0 60D2                       		bra.s	loc_1794
000019E2                            ; ===========================================================================
000019E2 60DE                       		bra.s	loc_17A2
000019E4                            ; ===========================================================================
000019E4                            
000019E4                            loc_17C4:				; XREF: loc_17A2
000019E4 5348                       		subq.w	#1,a0
000019E6 0C46 0010                  		cmpi.w	#$10,d6
000019EA 6600                       		bne.s	loc_17CE
000019EC 5348                       		subq.w	#1,a0
000019EE                            
000019EE                            loc_17CE:
000019EE 3008                       		move.w	a0,d0
000019F0 E248                       		lsr.w	#1,d0
000019F2 6400                       		bcc.s	loc_17D6
000019F4 5248                       		addq.w	#1,a0
000019F6                            
000019F6                            loc_17D6:
000019F6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FA 4E75                       		rts	
000019FC                            ; ===========================================================================
000019FC                            
000019FC                            loc_17DC:				; XREF: loc_17A2
000019FC 360B                       		move.w	a3,d3
000019FE 1204                       		move.b	d4,d1
00001A00 D201                       		add.b	d1,d1
00001A02 6400                       		bcc.s	loc_17EE
00001A04 5346                       		subq.w	#1,d6
00001A06 0D05                       		btst	d6,d5
00001A08 6700                       		beq.s	loc_17EE
00001A0A 0043 8000                  		ori.w	#-$8000,d3
00001A0E                            
00001A0E                            loc_17EE:
00001A0E D201                       		add.b	d1,d1
00001A10 6400                       		bcc.s	loc_17FC
00001A12 5346                       		subq.w	#1,d6
00001A14 0D05                       		btst	d6,d5
00001A16 6700                       		beq.s	loc_17FC
00001A18 0643 4000                  		addi.w	#$4000,d3
00001A1C                            
00001A1C                            loc_17FC:
00001A1C D201                       		add.b	d1,d1
00001A1E 6400                       		bcc.s	loc_180A
00001A20 5346                       		subq.w	#1,d6
00001A22 0D05                       		btst	d6,d5
00001A24 6700                       		beq.s	loc_180A
00001A26 0643 2000                  		addi.w	#$2000,d3
00001A2A                            
00001A2A                            loc_180A:
00001A2A D201                       		add.b	d1,d1
00001A2C 6400                       		bcc.s	loc_1818
00001A2E 5346                       		subq.w	#1,d6
00001A30 0D05                       		btst	d6,d5
00001A32 6700                       		beq.s	loc_1818
00001A34 0043 1000                  		ori.w	#$1000,d3
00001A38                            
00001A38                            loc_1818:
00001A38 D201                       		add.b	d1,d1
00001A3A 6400                       		bcc.s	loc_1826
00001A3C 5346                       		subq.w	#1,d6
00001A3E 0D05                       		btst	d6,d5
00001A40 6700                       		beq.s	loc_1826
00001A42 0043 0800                  		ori.w	#$800,d3
00001A46                            
00001A46                            loc_1826:
00001A46 3205                       		move.w	d5,d1
00001A48 3E06                       		move.w	d6,d7
00001A4A 9E4D                       		sub.w	a5,d7
00001A4C 6400                       		bcc.s	loc_1856
00001A4E 3C07                       		move.w	d7,d6
00001A50 0646 0010                  		addi.w	#$10,d6
00001A54 4447                       		neg.w	d7
00001A56 EF69                       		lsl.w	d7,d1
00001A58 1A10                       		move.b	(a0),d5
00001A5A EF3D                       		rol.b	d7,d5
00001A5C DE47                       		add.w	d7,d7
00001A5E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A62 D245                       		add.w	d5,d1
00001A64                            
00001A64                            loc_1844:				; XREF: loc_1868
00001A64 300D                       		move.w	a5,d0
00001A66 D040                       		add.w	d0,d0
00001A68 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A6C D243                       		add.w	d3,d1
00001A6E 1A18                       		move.b	(a0)+,d5
00001A70 E14D                       		lsl.w	#8,d5
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 4E75                       		rts	
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            loc_1856:				; XREF: loc_1826
00001A76 6700                       		beq.s	loc_1868
00001A78 EE69                       		lsr.w	d7,d1
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 300D                       		move.w	a5,d0
00001A86 6000                       		bra.s	sub_188C
00001A88                            ; ===========================================================================
00001A88                            
00001A88                            loc_1868:				; XREF: loc_1856
00001A88 7C10                       		moveq	#$10,d6
00001A8A                            
00001A8A                            loc_186A:
00001A8A 60D8                       		bra.s	loc_1844
00001A8C                            ; ===========================================================================
00001A8C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA2 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AAC                            
00001AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AAC                            
00001AAC                            
00001AAC                            sub_188C:				; XREF: EniDec
00001AAC 9C40                       		sub.w	d0,d6
00001AAE 0C46 0009                  		cmpi.w	#9,d6
00001AB2 6400                       		bcc.s	locret_189A
00001AB4 5046                       		addq.w	#8,d6
00001AB6 E145                       		asl.w	#8,d5
00001AB8 1A18                       		move.b	(a0)+,d5
00001ABA                            
00001ABA                            locret_189A:
00001ABA 4E75                       		rts	
00001ABC                            ; End of function sub_188C
00001ABC                            
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            ; Kosinski decompression algorithm
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            
00001ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ABC                            
00001ABC                            
00001ABC                            KosDec:
00001ABC                            
00001ABC =FFFFFFFE                  var_2		= -2
00001ABC =FFFFFFFF                  var_1		= -1
00001ABC                            
00001ABC 558F                       		subq.l	#2,sp
00001ABE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC2 1E98                       		move.b	(a0)+,(sp)
00001AC4 3A17                       		move.w	(sp),d5
00001AC6 780F                       		moveq	#$F,d4
00001AC8                            
00001AC8                            loc_18A8:
00001AC8 E24D                       		lsr.w	#1,d5
00001ACA 40C6                       		move	sr,d6
00001ACC 51CC 0000                  		dbf	d4,loc_18BA
00001AD0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD4 1E98                       		move.b	(a0)+,(sp)
00001AD6 3A17                       		move.w	(sp),d5
00001AD8 780F                       		moveq	#$F,d4
00001ADA                            
00001ADA                            loc_18BA:
00001ADA 44C6                       		move	d6,ccr
00001ADC 6400                       		bcc.s	loc_18C2
00001ADE 12D8                       		move.b	(a0)+,(a1)+
00001AE0 60E6                       		bra.s	loc_18A8
00001AE2                            ; ===========================================================================
00001AE2                            
00001AE2                            loc_18C2:				; XREF: KosDec
00001AE2 7600                       		moveq	#0,d3
00001AE4 E24D                       		lsr.w	#1,d5
00001AE6 40C6                       		move	sr,d6
00001AE8 51CC 0000                  		dbf	d4,loc_18D6
00001AEC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF0 1E98                       		move.b	(a0)+,(sp)
00001AF2 3A17                       		move.w	(sp),d5
00001AF4 780F                       		moveq	#$F,d4
00001AF6                            
00001AF6                            loc_18D6:
00001AF6 44C6                       		move	d6,ccr
00001AF8 6500                       		bcs.s	loc_1906
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 51CC 0000                  		dbf	d4,loc_18EA
00001B00 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B04 1E98                       		move.b	(a0)+,(sp)
00001B06 3A17                       		move.w	(sp),d5
00001B08 780F                       		moveq	#$F,d4
00001B0A                            
00001B0A                            loc_18EA:
00001B0A E353                       		roxl.w	#1,d3
00001B0C E24D                       		lsr.w	#1,d5
00001B0E 51CC 0000                  		dbf	d4,loc_18FC
00001B12 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B16 1E98                       		move.b	(a0)+,(sp)
00001B18 3A17                       		move.w	(sp),d5
00001B1A 780F                       		moveq	#$F,d4
00001B1C                            
00001B1C                            loc_18FC:
00001B1C E353                       		roxl.w	#1,d3
00001B1E 5243                       		addq.w	#1,d3
00001B20 74FF                       		moveq	#-1,d2
00001B22 1418                       		move.b	(a0)+,d2
00001B24 6000                       		bra.s	loc_191C
00001B26                            ; ===========================================================================
00001B26                            
00001B26                            loc_1906:				; XREF: loc_18C2
00001B26 1018                       		move.b	(a0)+,d0
00001B28 1218                       		move.b	(a0)+,d1
00001B2A 74FF                       		moveq	#-1,d2
00001B2C 1401                       		move.b	d1,d2
00001B2E EB4A                       		lsl.w	#5,d2
00001B30 1400                       		move.b	d0,d2
00001B32 0241 0007                  		andi.w	#7,d1
00001B36 6700                       		beq.s	loc_1928
00001B38 1601                       		move.b	d1,d3
00001B3A 5243                       		addq.w	#1,d3
00001B3C                            
00001B3C                            loc_191C:
00001B3C 1031 2000                  		move.b	(a1,d2.w),d0
00001B40 12C0                       		move.b	d0,(a1)+
00001B42 51CB FFF8                  		dbf	d3,loc_191C
00001B46 6080                       		bra.s	loc_18A8
00001B48                            ; ===========================================================================
00001B48                            
00001B48                            loc_1928:				; XREF: loc_1906
00001B48 1218                       		move.b	(a0)+,d1
00001B4A 6700                       		beq.s	loc_1938
00001B4C 0C01 0001                  		cmpi.b	#1,d1
00001B50 6700 FF76                  		beq.w	loc_18A8
00001B54 1601                       		move.b	d1,d3
00001B56 60E4                       		bra.s	loc_191C
00001B58                            ; ===========================================================================
00001B58                            
00001B58                            loc_1938:				; XREF: loc_1928
00001B58 548F                       		addq.l	#2,sp
00001B5A 4E75                       		rts	
00001B5C                            ; End of function KosDec
00001B5C                            
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            ; Pallet cycling routine loading subroutine
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            
00001B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B5C                            
00001B5C                            
00001B5C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B5C 7400                       		moveq	#0,d2
00001B5E 7000                       		moveq	#0,d0
00001B60 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B64 D040                       		add.w	d0,d0		; multiply by 2
00001B66 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B6E                            ; End of function PalCycle_Load
00001B6E                            
00001B6E                            ; ===========================================================================
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E                            ; Pallet cycling routines
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B70 0000                       		dc.w PalCycle_LZ-PalCycle
00001B72 0000                       		dc.w PalCycle_MZ-PalCycle
00001B74 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B76 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B7C                            
00001B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B7C                            
00001B7C                            
00001B7C                            PalCycle_Title:				; XREF: TitleScreen
00001B7C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B82 6000                       		bra.s	loc_196A
00001B84                            ; ===========================================================================
00001B84                            
00001B84                            PalCycle_GHZ:				; XREF: PalCycle
00001B84 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8A                            
00001B8A                            loc_196A:				; XREF: PalCycle_Title
00001B8A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B8E 6A00                       		bpl.s	locret_1990
00001B90 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B96 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9A 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B9E 0240 0003                  		andi.w	#3,d0
00001BA2 E748                       		lsl.w	#3,d0
00001BA4 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BA8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BAC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB0                            
00001BB0                            locret_1990:
00001BB0 4E75                       		rts	
00001BB2                            ; End of function PalCycle_Title
00001BB2                            
00001BB2                            
00001BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB2                            
00001BB2                            
00001BB2                            PalCycle_LZ:				; XREF: PalCycle
00001BB2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BB6 6A00                       		bpl.s	loc_19D8
00001BB8 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BBE 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BC6 0240 0003                  		andi.w	#3,d0
00001BCA E748                       		lsl.w	#3,d0
00001BCC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BD8 6600                       		bne.s	loc_19C0
00001BDA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE0                            
00001BE0                            loc_19C0:
00001BE0 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BE8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BEC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF8                            
00001BF8                            loc_19D8:
00001BF8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001BFC 0240 0007                  		andi.w	#7,d0
00001C00 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C04 6700                       		beq.s	locret_1A3A
00001C06 7201                       		moveq	#1,d1
00001C08 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C0C 6700                       		beq.s	loc_19F0
00001C0E 4441                       		neg.w	d1
00001C10                            
00001C10                            loc_19F0:
00001C10 3038 F650                  		move.w	($FFFFF650).w,d0
00001C14 0240 0003                  		andi.w	#3,d0
00001C18 D041                       		add.w	d1,d0
00001C1A 0C40 0003                  		cmpi.w	#3,d0
00001C1E 6500                       		bcs.s	loc_1A0A
00001C20 3200                       		move.w	d0,d1
00001C22 7000                       		moveq	#0,d0
00001C24 4A41                       		tst.w	d1
00001C26 6A00                       		bpl.s	loc_1A0A
00001C28 7002                       		moveq	#2,d0
00001C2A                            
00001C2A                            loc_1A0A:
00001C2A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C2E D040                       		add.w	d0,d0
00001C30 3200                       		move.w	d0,d1
00001C32 D040                       		add.w	d0,d0
00001C34 D041                       		add.w	d1,d0
00001C36 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C3C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C40 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C44 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C48 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C4E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C52 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C56 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5A                            
00001C5A                            locret_1A3A:
00001C5A 4E75                       		rts	
00001C5C                            ; End of function PalCycle_LZ
00001C5C                            
00001C5C                            ; ===========================================================================
00001C5C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C64                            ; ===========================================================================
00001C64                            
00001C64                            PalCycle_MZ:				; XREF: PalCycle
00001C64 4E75                       		rts	
00001C66                            
00001C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C66                            
00001C66                            
00001C66                            PalCycle_SLZ:				; XREF: PalCycle
00001C66 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C6A 6A00                       		bpl.s	locret_1A80
00001C6C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001C72 3038 F632                  		move.w	($FFFFF632).w,d0
00001C76 5240                       		addq.w	#1,d0
00001C78 0C40 0006                  		cmpi.w	#6,d0
00001C7C 6500                       		bcs.s	loc_1A60
00001C7E 7000                       		moveq	#0,d0
00001C80                            
00001C80                            loc_1A60:
00001C80 31C0 F632                  		move.w	d0,($FFFFF632).w
00001C84 3200                       		move.w	d0,d1
00001C86 D241                       		add.w	d1,d1
00001C88 D041                       		add.w	d1,d0
00001C8A D040                       		add.w	d0,d0
00001C8C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001C92 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001C96 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001C9A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001CA0                            
00001CA0                            locret_1A80:
00001CA0 4E75                       		rts	
00001CA2                            ; End of function PalCycle_SLZ
00001CA2                            
00001CA2                            
00001CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CA2                            
00001CA2                            
00001CA2                            PalCycle_SYZ:				; XREF: PalCycle
00001CA2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CA6 6A00                       		bpl.s	locret_1AC6
00001CA8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001CAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001CB2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001CB6 0240 0003                  		andi.w	#3,d0
00001CBA E548                       		lsl.w	#2,d0
00001CBC 3200                       		move.w	d0,d1
00001CBE D040                       		add.w	d0,d0
00001CC0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CC6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CCA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CCE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CD2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CD8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CDC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CE0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CE6                            
00001CE6                            locret_1AC6:
00001CE6 4E75                       		rts	
00001CE8                            ; End of function PalCycle_SYZ
00001CE8                            
00001CE8                            
00001CE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CE8                            
00001CE8                            
00001CE8                            PalCycle_SBZ:				; XREF: PalCycle
00001CE8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CEE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CF2 6700                       		beq.s	loc_1ADA
00001CF4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CFA                            
00001CFA                            loc_1ADA:
00001CFA 43F8 F650                  		lea	($FFFFF650).w,a1
00001CFE 321A                       		move.w	(a2)+,d1
00001D00                            
00001D00                            loc_1AE0:
00001D00 5311                       		subq.b	#1,(a1)
00001D02 6B00                       		bmi.s	loc_1AEA
00001D04 5489                       		addq.l	#2,a1
00001D06 5C8A                       		addq.l	#6,a2
00001D08 6000                       		bra.s	loc_1B06
00001D0A                            ; ===========================================================================
00001D0A                            
00001D0A                            loc_1AEA:				; XREF: PalCycle_SBZ
00001D0A 12DA                       		move.b	(a2)+,(a1)+
00001D0C 1011                       		move.b	(a1),d0
00001D0E 5200                       		addq.b	#1,d0
00001D10 B01A                       		cmp.b	(a2)+,d0
00001D12 6500                       		bcs.s	loc_1AF6
00001D14 7000                       		moveq	#0,d0
00001D16                            
00001D16                            loc_1AF6:
00001D16 12C0                       		move.b	d0,(a1)+
00001D18 0240 000F                  		andi.w	#$F,d0
00001D1C D040                       		add.w	d0,d0
00001D1E 305A                       		movea.w	(a2)+,a0
00001D20 365A                       		movea.w	(a2)+,a3
00001D22 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D26                            
00001D26                            loc_1B06:				; XREF: PalCycle_SBZ
00001D26 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D2A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D2E 6A00                       		bpl.s	locret_1B64
00001D30 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D36 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D3C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D40 6700                       		beq.s	loc_1B2E
00001D42 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D48 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D4E                            
00001D4E                            loc_1B2E:
00001D4E 72FF                       		moveq	#-1,d1
00001D50 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D54 6700                       		beq.s	loc_1B38
00001D56 4441                       		neg.w	d1
00001D58                            
00001D58                            loc_1B38:
00001D58 3038 F632                  		move.w	($FFFFF632).w,d0
00001D5C 0240 0003                  		andi.w	#3,d0
00001D60 D041                       		add.w	d1,d0
00001D62 0C40 0003                  		cmpi.w	#3,d0
00001D66 6500                       		bcs.s	loc_1B52
00001D68 3200                       		move.w	d0,d1
00001D6A 7000                       		moveq	#0,d0
00001D6C 4A41                       		tst.w	d1
00001D6E 6A00                       		bpl.s	loc_1B52
00001D70 7002                       		moveq	#2,d0
00001D72                            
00001D72                            loc_1B52:
00001D72 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D76 D040                       		add.w	d0,d0
00001D78 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D7C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D80 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D84                            
00001D84                            locret_1B64:
00001D84 4E75                       		rts	
00001D86                            ; End of function PalCycle_SBZ
00001D86                            
00001D86                            ; ===========================================================================
00001D86                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001DA6                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DC6                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DE6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DF8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001E0A                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E72                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E96                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001EB6                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EC6                            
00001EC6                            Pal_SBZCycList:
00001EC6                            	include "_inc\SBZ pallet script 1.asm"
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6                            ; Scrap Brain Zone 1 pallet cycling script
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6 0008                       	dc.w 8			; number of entries - 1
00001EC8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001ECA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001ECC FB50                       	dc.w $FB50		; RAM address
00001ECE 0D08                       	dc.b $D, 8
00001ED0 0000                       	dc.w Pal_SBZCyc2
00001ED2 FB52                       	dc.w $FB52
00001ED4 0E08                       	dc.b $E, 8
00001ED6 0000                       	dc.w Pal_SBZCyc3
00001ED8 FB6E                       	dc.w $FB6E
00001EDA 0B08                       	dc.b $B, 8
00001EDC 0000                       	dc.w Pal_SBZCyc5
00001EDE FB70                       	dc.w $FB70
00001EE0 0708                       	dc.b 7,	8
00001EE2 0000                       	dc.w Pal_SBZCyc6
00001EE4 FB72                       	dc.w $FB72
00001EE6 1C10                       	dc.b $1C, $10
00001EE8 0000                       	dc.w Pal_SBZCyc7
00001EEA FB7E                       	dc.w $FB7E
00001EEC 0303                       	dc.b 3,	3
00001EEE 0000                       	dc.w Pal_SBZCyc8
00001EF0 FB78                       	dc.w $FB78
00001EF2 0303                       	dc.b 3,	3
00001EF4 0000                       	dc.w Pal_SBZCyc8+2
00001EF6 FB7A                       	dc.w $FB7A
00001EF8 0303                       	dc.b 3,	3
00001EFA 0000                       	dc.w Pal_SBZCyc8+4
00001EFC FB7C                       	dc.w $FB7C
00001EFE                            	even
00001EFE                            	even
00001EFE                            
00001EFE                            Pal_SBZCycList2:
00001EFE                            	include "_inc\SBZ pallet script 2.asm"
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE                            ; Scrap Brain Zone 2 pallet cycling script
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE 0006                       	dc.w 6
00001F00 0708                       	dc.b 7,	8
00001F02 0000                       	dc.w Pal_SBZCyc1
00001F04 FB50                       	dc.w $FB50
00001F06 0D08                       	dc.b $D, 8
00001F08 0000                       	dc.w Pal_SBZCyc2
00001F0A FB52                       	dc.w $FB52
00001F0C 0908                       	dc.b 9,	8
00001F0E 0000                       	dc.w Pal_SBZCyc9
00001F10 FB70                       	dc.w $FB70
00001F12 0708                       	dc.b 7,	8
00001F14 0000                       	dc.w Pal_SBZCyc6
00001F16 FB72                       	dc.w $FB72
00001F18 0303                       	dc.b 3,	3
00001F1A 0000                       	dc.w Pal_SBZCyc8
00001F1C FB78                       	dc.w $FB78
00001F1E 0303                       	dc.b 3,	3
00001F20 0000                       	dc.w Pal_SBZCyc8+2
00001F22 FB7A                       	dc.w $FB7A
00001F24 0303                       	dc.b 3,	3
00001F26 0000                       	dc.w Pal_SBZCyc8+4
00001F28 FB7C                       	dc.w $FB7C
00001F2A                            	even
00001F2A                            	even
00001F2A                            
00001F2A                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F3A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F4A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F5A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F66                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F76                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F86                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001FA6                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001FB0                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001FC0                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            ; Subroutine to	fade out and fade in
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            
00001FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCC                            
00001FCC                            
00001FCC                            Pal_FadeTo:
00001FCC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FD2                            
00001FD2                            Pal_FadeTo2:
00001FD2 7000                       		moveq	#0,d0
00001FD4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE 7200                       		moveq	#0,d1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            Pal_ToBlack:
00001FE4 30C1                       		move.w	d1,(a0)+
00001FE6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FEA                            
00001FEA 383C 0015                  		move.w	#$15,d4
00001FEE                            
00001FEE                            loc_1DCE:
00001FEE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FF4 6100 0000                  		bsr.w	DelayProgram
00001FF8 6100                       		bsr.s	Pal_FadeIn
00001FFA 6100 F810                  		bsr.w	RunPLC_RAM
00001FFE 51CC FFEE                  		dbf	d4,loc_1DCE
00002002 4E75                       		rts	
00002004                            ; End of function Pal_FadeTo
00002004                            
00002004                            ; ---------------------------------------------------------------------------
00002004                            ; Pallet fade-in subroutine
00002004                            ; ---------------------------------------------------------------------------
00002004                            
00002004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002004                            
00002004                            
00002004                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002004 7000                       		moveq	#0,d0
00002006 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000200A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000200E 1038 F626                  		move.b	($FFFFF626).w,d0
00002012 D0C0                       		adda.w	d0,a0
00002014 D2C0                       		adda.w	d0,a1
00002016 1038 F627                  		move.b	($FFFFF627).w,d0
0000201A                            
0000201A                            loc_1DFA:
0000201A 6100                       		bsr.s	Pal_AddColor
0000201C 51C8 FFFC                  		dbf	d0,loc_1DFA
00002020 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002026 6600                       		bne.s	locret_1E24
00002028 7000                       		moveq	#0,d0
0000202A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000202E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002032 1038 F626                  		move.b	($FFFFF626).w,d0
00002036 D0C0                       		adda.w	d0,a0
00002038 D2C0                       		adda.w	d0,a1
0000203A 1038 F627                  		move.b	($FFFFF627).w,d0
0000203E                            
0000203E                            loc_1E1E:
0000203E 6100                       		bsr.s	Pal_AddColor
00002040 51C8 FFFC                  		dbf	d0,loc_1E1E
00002044                            
00002044                            locret_1E24:
00002044 4E75                       		rts	
00002046                            ; End of function Pal_FadeIn
00002046                            
00002046                            
00002046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002046                            
00002046                            
00002046                            Pal_AddColor:				; XREF: Pal_FadeIn
00002046 3419                       		move.w	(a1)+,d2
00002048 3610                       		move.w	(a0),d3
0000204A B642                       		cmp.w	d2,d3
0000204C 6700                       		beq.s	loc_1E4E
0000204E 3203                       		move.w	d3,d1
00002050 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002054 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002056 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002058 30C1                       		move.w	d1,(a0)+	; update pallet
0000205A 4E75                       		rts	
0000205C                            ; ===========================================================================
0000205C                            
0000205C                            Pal_AddGreen:				; XREF: Pal_AddColor
0000205C 3203                       		move.w	d3,d1
0000205E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002062 B242                       		cmp.w	d2,d1
00002064 6200                       		bhi.s	Pal_AddRed
00002066 30C1                       		move.w	d1,(a0)+	; update pallet
00002068 4E75                       		rts	
0000206A                            ; ===========================================================================
0000206A                            
0000206A                            Pal_AddRed:				; XREF: Pal_AddGreen
0000206A 5458                       		addq.w	#2,(a0)+	; increase red value
0000206C 4E75                       		rts	
0000206E                            ; ===========================================================================
0000206E                            
0000206E                            loc_1E4E:				; XREF: Pal_AddColor
0000206E 5448                       		addq.w	#2,a0
00002070 4E75                       		rts	
00002072                            ; End of function Pal_AddColor
00002072                            
00002072                            
00002072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002072                            
00002072                            
00002072                            Pal_FadeFrom:
00002072 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002078 383C 0015                  		move.w	#$15,d4
0000207C                            
0000207C                            loc_1E5C:
0000207C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002082 6100 0000                  		bsr.w	DelayProgram
00002086 6100                       		bsr.s	Pal_FadeOut
00002088 6100 F782                  		bsr.w	RunPLC_RAM
0000208C 51CC FFEE                  		dbf	d4,loc_1E5C
00002090 4E75                       		rts	
00002092                            ; End of function Pal_FadeFrom
00002092                            
00002092                            ; ---------------------------------------------------------------------------
00002092                            ; Pallet fade-out subroutine
00002092                            ; ---------------------------------------------------------------------------
00002092                            
00002092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002092                            
00002092                            
00002092                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002092 7000                       		moveq	#0,d0
00002094 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002098 1038 F626                  		move.b	($FFFFF626).w,d0
0000209C D0C0                       		adda.w	d0,a0
0000209E 1038 F627                  		move.b	($FFFFF627).w,d0
000020A2                            
000020A2                            loc_1E82:
000020A2 6100                       		bsr.s	Pal_DecColor
000020A4 51C8 FFFC                  		dbf	d0,loc_1E82
000020A8                            
000020A8 7000                       		moveq	#0,d0
000020AA 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020AE 1038 F626                  		move.b	($FFFFF626).w,d0
000020B2 D0C0                       		adda.w	d0,a0
000020B4 1038 F627                  		move.b	($FFFFF627).w,d0
000020B8                            
000020B8                            loc_1E98:
000020B8 6100                       		bsr.s	Pal_DecColor
000020BA 51C8 FFFC                  		dbf	d0,loc_1E98
000020BE 4E75                       		rts	
000020C0                            ; End of function Pal_FadeOut
000020C0                            
000020C0                            
000020C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020C0                            
000020C0                            
000020C0                            Pal_DecColor:				; XREF: Pal_FadeOut
000020C0 3410                       		move.w	(a0),d2
000020C2 6700                       		beq.s	loc_1ECC
000020C4 3202                       		move.w	d2,d1
000020C6 0241 000E                  		andi.w	#$E,d1
000020CA 6700                       		beq.s	Pal_DecGreen
000020CC 5558                       		subq.w	#2,(a0)+	; decrease red value
000020CE 4E75                       		rts	
000020D0                            ; ===========================================================================
000020D0                            
000020D0                            Pal_DecGreen:				; XREF: Pal_DecColor
000020D0 3202                       		move.w	d2,d1
000020D2 0241 00E0                  		andi.w	#$E0,d1
000020D6 6700                       		beq.s	Pal_DecBlue
000020D8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020DC 4E75                       		rts	
000020DE                            ; ===========================================================================
000020DE                            
000020DE                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020DE 3202                       		move.w	d2,d1
000020E0 0241 0E00                  		andi.w	#$E00,d1
000020E4 6700                       		beq.s	loc_1ECC
000020E6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020EA 4E75                       		rts	
000020EC                            ; ===========================================================================
000020EC                            
000020EC                            loc_1ECC:				; XREF: Pal_DecColor
000020EC 5448                       		addq.w	#2,a0
000020EE 4E75                       		rts	
000020F0                            ; End of function Pal_DecColor
000020F0                            
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            ; Subroutine to	fill the pallet	with white (special stage)
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            
000020F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F0                            
000020F0                            
000020F0                            Pal_MakeWhite:				; XREF: SpecialStage
000020F0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020F6 7000                       		moveq	#0,d0
000020F8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FC 1038 F626                  		move.b	($FFFFF626).w,d0
00002100 D0C0                       		adda.w	d0,a0
00002102 323C 0EEE                  		move.w	#$EEE,d1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            PalWhite_Loop:
0000210A 30C1                       		move.w	d1,(a0)+
0000210C 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002110 383C 0015                  		move.w	#$15,d4
00002114                            
00002114                            loc_1EF4:
00002114 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000211A 6100 0000                  		bsr.w	DelayProgram
0000211E 6100                       		bsr.s	Pal_WhiteToBlack
00002120 6100 F6EA                  		bsr.w	RunPLC_RAM
00002124 51CC FFEE                  		dbf	d4,loc_1EF4
00002128 4E75                       		rts	
0000212A                            ; End of function Pal_MakeWhite
0000212A                            
0000212A                            
0000212A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212A                            
0000212A                            
0000212A                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000212A 7000                       		moveq	#0,d0
0000212C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002130 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002134 1038 F626                  		move.b	($FFFFF626).w,d0
00002138 D0C0                       		adda.w	d0,a0
0000213A D2C0                       		adda.w	d0,a1
0000213C 1038 F627                  		move.b	($FFFFF627).w,d0
00002140                            
00002140                            loc_1F20:
00002140 6100                       		bsr.s	Pal_DecColor2
00002142 51C8 FFFC                  		dbf	d0,loc_1F20
00002146                            
00002146 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000214C 6600                       		bne.s	locret_1F4A
0000214E 7000                       		moveq	#0,d0
00002150 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002154 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002158 1038 F626                  		move.b	($FFFFF626).w,d0
0000215C D0C0                       		adda.w	d0,a0
0000215E D2C0                       		adda.w	d0,a1
00002160 1038 F627                  		move.b	($FFFFF627).w,d0
00002164                            
00002164                            loc_1F44:
00002164 6100                       		bsr.s	Pal_DecColor2
00002166 51C8 FFFC                  		dbf	d0,loc_1F44
0000216A                            
0000216A                            locret_1F4A:
0000216A 4E75                       		rts	
0000216C                            ; End of function Pal_WhiteToBlack
0000216C                            
0000216C                            
0000216C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000216C                            
0000216C                            
0000216C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000216C 3419                       		move.w	(a1)+,d2
0000216E 3610                       		move.w	(a0),d3
00002170 B642                       		cmp.w	d2,d3
00002172 6700                       		beq.s	loc_1F78
00002174 3203                       		move.w	d3,d1
00002176 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000217A 6500                       		bcs.s	loc_1F64
0000217C B242                       		cmp.w	d2,d1
0000217E 6500                       		bcs.s	loc_1F64
00002180 30C1                       		move.w	d1,(a0)+
00002182 4E75                       		rts	
00002184                            ; ===========================================================================
00002184                            
00002184                            loc_1F64:				; XREF: Pal_DecColor2
00002184 3203                       		move.w	d3,d1
00002186 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000218A 6500                       		bcs.s	loc_1F74
0000218C B242                       		cmp.w	d2,d1
0000218E 6500                       		bcs.s	loc_1F74
00002190 30C1                       		move.w	d1,(a0)+
00002192 4E75                       		rts	
00002194                            ; ===========================================================================
00002194                            
00002194                            loc_1F74:				; XREF: loc_1F64
00002194 5558                       		subq.w	#2,(a0)+	; decrease red value
00002196 4E75                       		rts	
00002198                            ; ===========================================================================
00002198                            
00002198                            loc_1F78:				; XREF: Pal_DecColor2
00002198 5448                       		addq.w	#2,a0
0000219A 4E75                       		rts	
0000219C                            ; End of function Pal_DecColor2
0000219C                            
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            ; Subroutine to	make a white flash when	you enter a special stage
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            
0000219C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000219C                            
0000219C                            
0000219C                            Pal_MakeFlash:				; XREF: SpecialStage
0000219C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000021A2 383C 0015                  		move.w	#$15,d4
000021A6                            
000021A6                            loc_1F86:
000021A6 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000021AC 6100 0000                  		bsr.w	DelayProgram
000021B0 6100                       		bsr.s	Pal_ToWhite
000021B2 6100 F658                  		bsr.w	RunPLC_RAM
000021B6 51CC FFEE                  		dbf	d4,loc_1F86
000021BA 4E75                       		rts	
000021BC                            ; End of function Pal_MakeFlash
000021BC                            
000021BC                            
000021BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021BC                            
000021BC                            
000021BC                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000021BC 7000                       		moveq	#0,d0
000021BE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021C2 1038 F626                  		move.b	($FFFFF626).w,d0
000021C6 D0C0                       		adda.w	d0,a0
000021C8 1038 F627                  		move.b	($FFFFF627).w,d0
000021CC                            
000021CC                            loc_1FAC:
000021CC 6100                       		bsr.s	Pal_AddColor2
000021CE 51C8 FFFC                  		dbf	d0,loc_1FAC
000021D2 7000                       		moveq	#0,d0
000021D4 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021D8 1038 F626                  		move.b	($FFFFF626).w,d0
000021DC D0C0                       		adda.w	d0,a0
000021DE 1038 F627                  		move.b	($FFFFF627).w,d0
000021E2                            
000021E2                            loc_1FC2:
000021E2 6100                       		bsr.s	Pal_AddColor2
000021E4 51C8 FFFC                  		dbf	d0,loc_1FC2
000021E8 4E75                       		rts	
000021EA                            ; End of function Pal_ToWhite
000021EA                            
000021EA                            
000021EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021EA                            
000021EA                            
000021EA                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021EA 3410                       		move.w	(a0),d2
000021EC 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021F0 6700                       		beq.s	loc_2006
000021F2 3202                       		move.w	d2,d1
000021F4 0241 000E                  		andi.w	#$E,d1
000021F8 0C41 000E                  		cmpi.w	#$E,d1
000021FC 6700                       		beq.s	loc_1FE2
000021FE 5458                       		addq.w	#2,(a0)+	; increase red value
00002200 4E75                       		rts	
00002202                            ; ===========================================================================
00002202                            
00002202                            loc_1FE2:				; XREF: Pal_AddColor2
00002202 3202                       		move.w	d2,d1
00002204 0241 00E0                  		andi.w	#$E0,d1
00002208 0C41 00E0                  		cmpi.w	#$E0,d1
0000220C 6700                       		beq.s	loc_1FF4
0000220E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002212 4E75                       		rts	
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_1FF4:				; XREF: loc_1FE2
00002214 3202                       		move.w	d2,d1
00002216 0241 0E00                  		andi.w	#$E00,d1
0000221A 0C41 0E00                  		cmpi.w	#$E00,d1
0000221E 6700                       		beq.s	loc_2006
00002220 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002224 4E75                       		rts	
00002226                            ; ===========================================================================
00002226                            
00002226                            loc_2006:				; XREF: Pal_AddColor2
00002226 5448                       		addq.w	#2,a0
00002228 4E75                       		rts	
0000222A                            ; End of function Pal_AddColor2
0000222A                            
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            ; Pallet cycling routine - Sega	logo
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            
0000222A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000222A                            
0000222A                            
0000222A                            PalCycle_Sega:				; XREF: SegaScreen
0000222A 4A38 F635                  		tst.b	($FFFFF635).w
0000222E 6600                       		bne.s	loc_206A
00002230 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002234 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000223A 7205                       		moveq	#5,d1
0000223C 3038 F632                  		move.w	($FFFFF632).w,d0
00002240                            
00002240                            loc_2020:
00002240 6A00                       		bpl.s	loc_202A
00002242 5448                       		addq.w	#2,a0
00002244 5341                       		subq.w	#1,d1
00002246 5440                       		addq.w	#2,d0
00002248 60F6                       		bra.s	loc_2020
0000224A                            ; ===========================================================================
0000224A                            
0000224A                            loc_202A:				; XREF: PalCycle_Sega
0000224A 3400                       		move.w	d0,d2
0000224C 0242 001E                  		andi.w	#$1E,d2
00002250 6600                       		bne.s	loc_2034
00002252 5440                       		addq.w	#2,d0
00002254                            
00002254                            loc_2034:
00002254 0C40 0060                  		cmpi.w	#$60,d0
00002258 6400                       		bcc.s	loc_203E
0000225A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000225E                            
0000225E                            loc_203E:
0000225E 5440                       		addq.w	#2,d0
00002260 51C9 FFE8                  		dbf	d1,loc_202A
00002264 3038 F632                  		move.w	($FFFFF632).w,d0
00002268 5440                       		addq.w	#2,d0
0000226A 3400                       		move.w	d0,d2
0000226C 0242 001E                  		andi.w	#$1E,d2
00002270 6600                       		bne.s	loc_2054
00002272 5440                       		addq.w	#2,d0
00002274                            
00002274                            loc_2054:
00002274 0C40 0064                  		cmpi.w	#$64,d0
00002278 6D00                       		blt.s	loc_2062
0000227A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002280 70F4                       		moveq	#-$C,d0
00002282                            
00002282                            loc_2062:
00002282 31C0 F632                  		move.w	d0,($FFFFF632).w
00002286 7001                       		moveq	#1,d0
00002288 4E75                       		rts	
0000228A                            ; ===========================================================================
0000228A                            
0000228A                            loc_206A:				; XREF: loc_202A
0000228A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000228E 6A00                       		bpl.s	loc_20BC
00002290 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002296 3038 F632                  		move.w	($FFFFF632).w,d0
0000229A 0640 000C                  		addi.w	#$C,d0
0000229E 0C40 0030                  		cmpi.w	#$30,d0
000022A2 6500                       		bcs.s	loc_2088
000022A4 7000                       		moveq	#0,d0
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            loc_2088:				; XREF: loc_206A
000022A8 31C0 F632                  		move.w	d0,($FFFFF632).w
000022AC 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000022B2 41F0 0000                  		lea	(a0,d0.w),a0
000022B6 43F8 FB04                  		lea	($FFFFFB04).w,a1
000022BA 22D8                       		move.l	(a0)+,(a1)+
000022BC 22D8                       		move.l	(a0)+,(a1)+
000022BE 3298                       		move.w	(a0)+,(a1)
000022C0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022C4 7000                       		moveq	#0,d0
000022C6 722C                       		moveq	#$2C,d1
000022C8                            
000022C8                            loc_20A8:
000022C8 3400                       		move.w	d0,d2
000022CA 0242 001E                  		andi.w	#$1E,d2
000022CE 6600                       		bne.s	loc_20B2
000022D0 5440                       		addq.w	#2,d0
000022D2                            
000022D2                            loc_20B2:
000022D2 3390 0000                  		move.w	(a0),(a1,d0.w)
000022D6 5440                       		addq.w	#2,d0
000022D8 51C9 FFEE                  		dbf	d1,loc_20A8
000022DC                            
000022DC                            loc_20BC:
000022DC 7001                       		moveq	#1,d0
000022DE 4E75                       		rts	
000022E0                            ; End of function PalCycle_Sega
000022E0                            
000022E0                            ; ===========================================================================
000022E0                            
000022E0                            Pal_Sega1:	incbin	pallet\sega1.bin
000022EC                            Pal_Sega2:	incbin	pallet\sega2.bin
0000231C                            
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            ; Subroutines to load pallets
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            
0000231C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231C                            
0000231C                            
0000231C                            PalLoad1:
0000231C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002322 E748                       		lsl.w	#3,d0
00002324 D2C0                       		adda.w	d0,a1
00002326 2459                       		movea.l	(a1)+,a2
00002328 3659                       		movea.w	(a1)+,a3
0000232A D6FC 0080                  		adda.w	#$80,a3
0000232E 3E19                       		move.w	(a1)+,d7
00002330                            
00002330                            loc_2110:
00002330 26DA                       		move.l	(a2)+,(a3)+
00002332 51CF FFFC                  		dbf	d7,loc_2110
00002336 4E75                       		rts	
00002338                            ; End of function PalLoad1
00002338                            
00002338                            
00002338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002338                            
00002338                            
00002338                            PalLoad2:
00002338 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233E E748                       		lsl.w	#3,d0
00002340 D2C0                       		adda.w	d0,a1
00002342 2459                       		movea.l	(a1)+,a2
00002344 3659                       		movea.w	(a1)+,a3
00002346 3E19                       		move.w	(a1)+,d7
00002348                            
00002348                            loc_2128:
00002348 26DA                       		move.l	(a2)+,(a3)+
0000234A 51CF FFFC                  		dbf	d7,loc_2128
0000234E 4E75                       		rts	
00002350                            ; End of function PalLoad2
00002350                            
00002350                            ; ---------------------------------------------------------------------------
00002350                            ; Underwater pallet loading subroutine
00002350                            ; ---------------------------------------------------------------------------
00002350                            
00002350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002350                            
00002350                            
00002350                            PalLoad3_Water:
00002350 43F9 0000 0000             		lea	(PalPointers).l,a1
00002356 E748                       		lsl.w	#3,d0
00002358 D2C0                       		adda.w	d0,a1
0000235A 2459                       		movea.l	(a1)+,a2
0000235C 3659                       		movea.w	(a1)+,a3
0000235E 96FC 0080                  		suba.w	#$80,a3
00002362 3E19                       		move.w	(a1)+,d7
00002364                            
00002364                            loc_2144:
00002364 26DA                       		move.l	(a2)+,(a3)+
00002366 51CF FFFC                  		dbf	d7,loc_2144
0000236A 4E75                       		rts	
0000236C                            ; End of function PalLoad3_Water
0000236C                            
0000236C                            
0000236C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000236C                            
0000236C                            
0000236C                            PalLoad4_Water:
0000236C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002372 E748                       		lsl.w	#3,d0
00002374 D2C0                       		adda.w	d0,a1
00002376 2459                       		movea.l	(a1)+,a2
00002378 3659                       		movea.w	(a1)+,a3
0000237A 96FC 0100                  		suba.w	#$100,a3
0000237E 3E19                       		move.w	(a1)+,d7
00002380                            
00002380                            loc_2160:
00002380 26DA                       		move.l	(a2)+,(a3)+
00002382 51CF FFFC                  		dbf	d7,loc_2160
00002386 4E75                       		rts	
00002388                            ; End of function PalLoad4_Water
00002388                            
00002388                            ; ===========================================================================
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388                            PalPointers:
00002388                            	include "_inc\Pallet pointers.asm"
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000238C FB00                       	dc.w $FB00		; RAM address
0000238E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002390 0000 0000                  	dc.l Pal_Title
00002394 FB00                       	dc.w $FB00
00002396 001F                       	dc.w $1F
00002398 0000 0000                  	dc.l Pal_LevelSel
0000239C FB00                       	dc.w $FB00
0000239E 001F                       	dc.w $1F
000023A0 0000 0000                  	dc.l Pal_Sonic
000023A4 FB00                       	dc.w $FB00
000023A6 0007                       	dc.w 7
000023A8 0000 0000                  	dc.l Pal_GHZ
000023AC FB20                       	dc.w $FB20
000023AE 0017                       	dc.w $17
000023B0 0000 0000                  	dc.l Pal_LZ
000023B4 FB20                       	dc.w $FB20
000023B6 0017                       	dc.w $17
000023B8 0000 0000                  	dc.l Pal_MZ
000023BC FB20                       	dc.w $FB20
000023BE 0017                       	dc.w $17
000023C0 0000 0000                  	dc.l Pal_SLZ
000023C4 FB20                       	dc.w $FB20
000023C6 0017                       	dc.w $17
000023C8 0000 0000                  	dc.l Pal_SYZ
000023CC FB20                       	dc.w $FB20
000023CE 0017                       	dc.w $17
000023D0 0000 0000                  	dc.l Pal_SBZ1
000023D4 FB20                       	dc.w $FB20
000023D6 0017                       	dc.w $17
000023D8 0000 0000                  	dc.l Pal_Special
000023DC FB00                       	dc.w $FB00
000023DE 001F                       	dc.w $1F
000023E0 0000 0000                  	dc.l Pal_LZWater
000023E4 FB00                       	dc.w $FB00
000023E6 001F                       	dc.w $1F
000023E8 0000 0000                  	dc.l Pal_SBZ3
000023EC FB20                       	dc.w $FB20
000023EE 0017                       	dc.w $17
000023F0 0000 0000                  	dc.l Pal_SBZ3Water
000023F4 FB00                       	dc.w $FB00
000023F6 001F                       	dc.w $1F
000023F8 0000 0000                  	dc.l Pal_SBZ2
000023FC FB20                       	dc.w $FB20
000023FE 0017                       	dc.w $17
00002400 0000 0000                  	dc.l Pal_LZSonWater
00002404 FB00                       	dc.w $FB00
00002406 0007                       	dc.w 7
00002408 0000 0000                  	dc.l Pal_SBZ3SonWat
0000240C FB00                       	dc.w $FB00
0000240E 0007                       	dc.w 7
00002410 0000 0000                  	dc.l Pal_SpeResult
00002414 FB00                       	dc.w $FB00
00002416 001F                       	dc.w $1F
00002418 0000 0000                  	dc.l Pal_SpeContinue
0000241C FB00                       	dc.w $FB00
0000241E 000F                       	dc.w $F
00002420 0000 0000                  	dc.l Pal_Ending
00002424 FB00                       	dc.w $FB00
00002426 001F                       	dc.w $1F
00002426 001F                       	dc.w $1F
00002428                            
00002428                            ; ---------------------------------------------------------------------------
00002428                            ; Pallet data
00002428                            ; ---------------------------------------------------------------------------
00002428                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024A8                            Pal_Title:	incbin	pallet\title.bin
00002528                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025A8                            Pal_Sonic:	incbin	pallet\sonic.bin
000025C8                            Pal_GHZ:	incbin	pallet\ghz.bin
00002628                            Pal_LZ:		incbin	pallet\lz.bin
00002688                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002708                            Pal_MZ:		incbin	pallet\mz.bin
00002768                            Pal_SLZ:	incbin	pallet\slz.bin
000027C8                            Pal_SYZ:	incbin	pallet\syz.bin
00002828                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002888                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028E8                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002968                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029C8                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A48                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A68                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A88                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B08                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B48                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BC8                            
00002BC8                            ; ---------------------------------------------------------------------------
00002BC8                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002BC8                            ; ---------------------------------------------------------------------------
00002BC8                            
00002BC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BC8                            
00002BC8                            
00002BC8                            DelayProgram:				; XREF: PauseGame
00002BC8 46FC 2300                  		move	#$2300,sr
00002BCC                            
00002BCC                            loc_29AC:
00002BCC 4A38 F62A                  		tst.b	($FFFFF62A).w
00002BD0 66FA                       		bne.s	loc_29AC
00002BD2 4E75                       		rts	
00002BD4                            ; End of function DelayProgram
00002BD4                            
00002BD4                            ; ---------------------------------------------------------------------------
00002BD4                            ; Subroutine to	generate a pseudo-random number	in d0
00002BD4                            ; ---------------------------------------------------------------------------
00002BD4                            
00002BD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BD4                            
00002BD4                            
00002BD4                            RandomNumber:
00002BD4 2238 F636                  		move.l	($FFFFF636).w,d1
00002BD8 6600                       		bne.s	loc_29C0
00002BDA 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002BE0                            
00002BE0                            loc_29C0:
00002BE0 2001                       		move.l	d1,d0
00002BE2 E581                       		asl.l	#2,d1
00002BE4 D280                       		add.l	d0,d1
00002BE6 E781                       		asl.l	#3,d1
00002BE8 D280                       		add.l	d0,d1
00002BEA 3001                       		move.w	d1,d0
00002BEC 4841                       		swap	d1
00002BEE D041                       		add.w	d1,d0
00002BF0 3200                       		move.w	d0,d1
00002BF2 4841                       		swap	d1
00002BF4 21C1 F636                  		move.l	d1,($FFFFF636).w
00002BF8 4E75                       		rts	
00002BFA                            ; End of function RandomNumber
00002BFA                            
00002BFA                            
00002BFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BFA                            
00002BFA                            
00002BFA                            CalcSine:				; XREF: SS_BGAnimate; et al
00002BFA 0240 00FF                  		andi.w	#$FF,d0
00002BFE D040                       		add.w	d0,d0
00002C00 0640 0080                  		addi.w	#$80,d0
00002C04 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C08 0440 0080                  		subi.w	#$80,d0
00002C0C 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C10 4E75                       		rts	
00002C12                            ; End of function CalcSine
00002C12                            
00002C12                            ; ===========================================================================
00002C12                            
00002C12                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002E92                            
00002E92                            ; ===========================================================================
00002E92 48E7 6000                  		movem.l	d1-d2,-(sp)
00002E96 3200                       		move.w	d0,d1
00002E98 4841                       		swap	d1
00002E9A 7000                       		moveq	#0,d0
00002E9C 3200                       		move.w	d0,d1
00002E9E 7407                       		moveq	#7,d2
00002EA0                            
00002EA0                            loc_2C80:
00002EA0 E599                       		rol.l	#2,d1
00002EA2 D040                       		add.w	d0,d0
00002EA4 5240                       		addq.w	#1,d0
00002EA6 9240                       		sub.w	d0,d1
00002EA8 6400                       		bcc.s	loc_2C9A
00002EAA D240                       		add.w	d0,d1
00002EAC 5340                       		subq.w	#1,d0
00002EAE 51CA FFF0                  		dbf	d2,loc_2C80
00002EB2 E248                       		lsr.w	#1,d0
00002EB4 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EB8 4E75                       		rts	
00002EBA                            ; ===========================================================================
00002EBA                            
00002EBA                            loc_2C9A:
00002EBA 5240                       		addq.w	#1,d0
00002EBC 51CA FFE2                  		dbf	d2,loc_2C80
00002EC0 E248                       		lsr.w	#1,d0
00002EC2 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EC6 4E75                       		rts	
00002EC8                            
00002EC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002EC8                            
00002EC8                            
00002EC8                            CalcAngle:
00002EC8 48E7 1800                  		movem.l	d3-d4,-(sp)
00002ECC 7600                       		moveq	#0,d3
00002ECE 7800                       		moveq	#0,d4
00002ED0 3601                       		move.w	d1,d3
00002ED2 3802                       		move.w	d2,d4
00002ED4 8843                       		or.w	d3,d4
00002ED6 6700                       		beq.s	loc_2D04
00002ED8 3802                       		move.w	d2,d4
00002EDA 4A43                       		tst.w	d3
00002EDC 6A00 0000                  		bpl.w	loc_2CC2
00002EE0 4443                       		neg.w	d3
00002EE2                            
00002EE2                            loc_2CC2:
00002EE2 4A44                       		tst.w	d4
00002EE4 6A00 0000                  		bpl.w	loc_2CCA
00002EE8 4444                       		neg.w	d4
00002EEA                            
00002EEA                            loc_2CCA:
00002EEA B843                       		cmp.w	d3,d4
00002EEC 6400 0000                  		bcc.w	loc_2CDC
00002EF0 E18C                       		lsl.l	#8,d4
00002EF2 88C3                       		divu.w	d3,d4
00002EF4 7000                       		moveq	#0,d0
00002EF6 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002EFA 6000                       		bra.s	loc_2CE6
00002EFC                            ; ===========================================================================
00002EFC                            
00002EFC                            loc_2CDC:				; XREF: CalcAngle
00002EFC E18B                       		lsl.l	#8,d3
00002EFE 86C4                       		divu.w	d4,d3
00002F00 7040                       		moveq	#$40,d0
00002F02 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F06                            
00002F06                            loc_2CE6:
00002F06 4A41                       		tst.w	d1
00002F08 6A00 0000                  		bpl.w	loc_2CF2
00002F0C 4440                       		neg.w	d0
00002F0E 0640 0080                  		addi.w	#$80,d0
00002F12                            
00002F12                            loc_2CF2:
00002F12 4A42                       		tst.w	d2
00002F14 6A00 0000                  		bpl.w	loc_2CFE
00002F18 4440                       		neg.w	d0
00002F1A 0640 0100                  		addi.w	#$100,d0
00002F1E                            
00002F1E                            loc_2CFE:
00002F1E 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F22 4E75                       		rts	
00002F24                            ; ===========================================================================
00002F24                            
00002F24                            loc_2D04:				; XREF: CalcAngle
00002F24 303C 0040                  		move.w	#$40,d0
00002F28 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F2C 4E75                       		rts	
00002F2E                            ; End of function CalcAngle
00002F2E                            
00002F2E                            ; ===========================================================================
00002F2E                            
00002F2E                            Angle_Data:	incbin	misc\angles.bin
00003030                            
00003030                            ; ===========================================================================
00003030                            
00003030                            ; ---------------------------------------------------------------------------
00003030                            ; Sega screen
00003030                            ; ---------------------------------------------------------------------------
00003030                            
00003030                            SegaScreen:				; XREF: GameModeArray
00003030 103C 00E4                  		move.b	#$E4,d0
00003034 6100 E586                  		bsr.w	PlaySound_Special ; stop music
00003038 6100 E7C4                  		bsr.w	ClearPLC
0000303C 6100 F034                  		bsr.w	Pal_FadeFrom
00003040 4DF9 00C0 0004             		lea	($C00004).l,a6
00003046 3CBC 8004                  		move.w	#$8004,(a6)
0000304A 3CBC 8230                  		move.w	#$8230,(a6)
0000304E 3CBC 8407                  		move.w	#$8407,(a6)
00003052 3CBC 8700                  		move.w	#$8700,(a6)
00003056 3CBC 8B00                  		move.w	#$8B00,(a6)
0000305A 4238 F64E                  		clr.b	($FFFFF64E).w
0000305E 46FC 2700                  		move	#$2700,sr
00003062 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003066 0200 00BF                  		andi.b	#$BF,d0
0000306A 33C0 00C0 0004             		move.w	d0,($C00004).l
00003070 6100 E472                  		bsr.w	ClearScreen
00003074 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000307E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003084 6100 E5DA                  		bsr.w	NemDec
00003088 43F9 00FF 0000             		lea	($FF0000).l,a1
0000308E 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003094 303C 0000                  		move.w	#0,d0
00003098 6100 E8A4                  		bsr.w	EniDec
0000309C 43F9 00FF 0000             		lea	($FF0000).l,a1
000030A2 203C 6510 0003             		move.l	#$65100003,d0
000030A8 7217                       		moveq	#$17,d1
000030AA 7407                       		moveq	#7,d2
000030AC 6100 E592                  		bsr.w	ShowVDPGraphics
000030B0 43F9 00FF 0180             		lea	($FF0180).l,a1
000030B6 203C 4000 0003             		move.l	#$40000003,d0
000030BC 7227                       		moveq	#$27,d1
000030BE 741B                       		moveq	#$1B,d2
000030C0 6100 E57E                  		bsr.w	ShowVDPGraphics
000030C4 7000                       		moveq	#0,d0
000030C6 6100 F270                  		bsr.w	PalLoad2	; load Sega logo pallet
000030CA 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000030D0 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000030D6 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000030DC 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000030E2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000030E6 0000 0040                  		ori.b	#$40,d0
000030EA 33C0 00C0 0004             		move.w	d0,($C00004).l
000030F0                            
000030F0                            Sega_WaitPallet:
000030F0 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000030F6 6100 FAD0                  		bsr.w	DelayProgram
000030FA 6100 F12E                  		bsr.w	PalCycle_Sega
000030FE 66F0                       		bne.s	Sega_WaitPallet
00003100                            
00003100 103C 00E1                  		move.b	#$E1,d0
00003104 6100 E4B6                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003108 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
0000310E 6100 FAB8                  		bsr.w	DelayProgram
00003112 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003118                            
00003118                            Sega_WaitEnd:
00003118 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000311E 6100 FAA8                  		bsr.w	DelayProgram
00003122 4A78 F614                  		tst.w	($FFFFF614).w
00003126 6700                       		beq.s	Sega_GotoTitle
00003128 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000312E 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003130                            
00003130                            Sega_GotoTitle:
00003130 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003136 4E75                       		rts	
00003138                            ; ===========================================================================
00003138                            
00003138                            ; ---------------------------------------------------------------------------
00003138                            ; Title	screen
00003138                            ; ---------------------------------------------------------------------------
00003138                            
00003138                            TitleScreen:				; XREF: GameModeArray
00003138 103C 00E4                  		move.b	#$E4,d0
0000313C 6100 E47E                  		bsr.w	PlaySound_Special ; stop music
00003140 6100 E6BC                  		bsr.w	ClearPLC
00003144 6100 EF2C                  		bsr.w	Pal_FadeFrom
00003148 46FC 2700                  		move	#$2700,sr
0000314C 6100 E424                  		bsr.w	SoundDriverLoad
00003150 4DF9 00C0 0004             		lea	($C00004).l,a6
00003156 3CBC 8004                  		move.w	#$8004,(a6)
0000315A 3CBC 8230                  		move.w	#$8230,(a6)
0000315E 3CBC 8407                  		move.w	#$8407,(a6)
00003162 3CBC 9001                  		move.w	#$9001,(a6)
00003166 3CBC 9200                  		move.w	#$9200,(a6)
0000316A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000316E 3CBC 8720                  		move.w	#$8720,(a6)
00003172 4238 F64E                  		clr.b	($FFFFF64E).w
00003176 6100 E36C                  		bsr.w	ClearScreen
0000317A 43F8 D000                  		lea	($FFFFD000).w,a1
0000317E 7000                       		moveq	#0,d0
00003180 323C 07FF                  		move.w	#$7FF,d1
00003184                            
00003184                            Title_ClrObjRam:
00003184 22C0                       		move.l	d0,(a1)+
00003186 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
0000318A                            
0000318A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003194 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000319A 6100 E4C4                  		bsr.w	NemDec
0000319E 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000031A8 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000031AE 6100 E4B0                  		bsr.w	NemDec
000031B2 43F9 00FF 0000             		lea	($FF0000).l,a1
000031B8 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000031BE 303C 0000                  		move.w	#0,d0
000031C2 6100 E77A                  		bsr.w	EniDec
000031C6 43F9 00FF 0000             		lea	($FF0000).l,a1
000031CC 203C 4000 0003             		move.l	#$40000003,d0
000031D2 7227                       		moveq	#$27,d1
000031D4 741B                       		moveq	#$1B,d2
000031D6 6100 E468                  		bsr.w	ShowVDPGraphics
000031DA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000031DE 7000                       		moveq	#0,d0
000031E0 323C 001F                  		move.w	#$1F,d1
000031E4                            
000031E4                            Title_ClrPallet:
000031E4 22C0                       		move.l	d0,(a1)+
000031E6 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000031EA                            
000031EA 7003                       		moveq	#3,d0		; load Sonic's pallet
000031EC 6100 F12E                  		bsr.w	PalLoad1
000031F0 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000031F6 4EB9 0000 0000             		jsr	ObjectsLoad
000031FC 4EB9 0000 0000             		jsr	BuildSprites
00003202 6100 EDC8                  		bsr.w	Pal_FadeTo
00003206 46FC 2700                  		move	#$2700,sr
0000320A 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003214 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000321A 6100 E444                  		bsr.w	NemDec
0000321E 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003228 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000322E 6100 E430                  		bsr.w	NemDec
00003232 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
0000323C 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003242 6100 E41C                  		bsr.w	NemDec
00003246 4DF9 00C0 0000             		lea	($C00000).l,a6
0000324C 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003254 4BF9 0000 05F0             		lea	(Art_Text).l,a5
0000325A 323C 0BB3                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
0000325E                            
0000325E                            Title_LoadText:
0000325E 2C9D                       		move.l	(a5)+,(a6)
00003260 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003264                            
00003264 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000326A 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003270 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003276 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000327C 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003282 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003288 6100 0000                  		bsr.w	LevelSizeLoad
0000328C 6100 0000                  		bsr.w	DeformBgLayer
00003290 43F8 B000                  		lea	($FFFFB000).w,a1
00003294 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
0000329A 303C 0000                  		move.w	#0,d0
0000329E 6100 E69E                  		bsr.w	EniDec
000032A2 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
000032A8 43F9 00FF 0000             		lea	($FF0000).l,a1
000032AE 6100 E80C                  		bsr.w	KosDec
000032B2 6100 0000                  		bsr.w	LevelLayoutLoad
000032B6 6100 EDBA                  		bsr.w	Pal_FadeFrom
000032BA 46FC 2700                  		move	#$2700,sr
000032BE 6100 E224                  		bsr.w	ClearScreen
000032C2 4BF9 00C0 0004             		lea	($C00004).l,a5
000032C8 4DF9 00C0 0000             		lea	($C00000).l,a6
000032CE 47F8 F708                  		lea	($FFFFF708).w,a3
000032D2 49F8 A440                  		lea	($FFFFA440).w,a4
000032D6 343C 6000                  		move.w	#$6000,d2
000032DA 6100 0000                  		bsr.w	LoadTilesFromStart2
000032DE 43F9 00FF 0000             		lea	($FF0000).l,a1
000032E4 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000032EA 303C 0000                  		move.w	#0,d0
000032EE 6100 E64E                  		bsr.w	EniDec
000032F2 43F9 00FF 0000             		lea	($FF0000).l,a1
000032F8 203C 4206 0003             		move.l	#$42060003,d0
000032FE 7221                       		moveq	#$21,d1
00003300 7415                       		moveq	#$15,d2
00003302 6100 E33C                  		bsr.w	ShowVDPGraphics
00003306 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003310 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003316 6100 E348                  		bsr.w	NemDec
0000331A 7001                       		moveq	#1,d0		; load title screen pallet
0000331C 6100 EFFE                  		bsr.w	PalLoad1
00003320 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003324 6100 E296                  		bsr.w	PlaySound_Special
00003328 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
0000332E 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003334 43F8 D080                  		lea	($FFFFD080).w,a1
00003338 7000                       		moveq	#0,d0
0000333A 323C 0007                  		move.w	#7,d1
0000333E                            
0000333E                            Title_ClrObjRam2:
0000333E 22C0                       		move.l	d0,(a1)+
00003340 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003344                            
00003344 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000334A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003350 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003356 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000335C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003362 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003368 4EB9 0000 0000             		jsr	ObjectsLoad
0000336E 6100 0000                  		bsr.w	DeformBgLayer
00003372 4EB9 0000 0000             		jsr	BuildSprites
00003378 7000                       		moveq	#0,d0
0000337A 6100 E456                  		bsr.w	LoadPLC2
0000337E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003384 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000338A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000338E 0000 0040                  		ori.b	#$40,d0
00003392 33C0 00C0 0004             		move.w	d0,($C00004).l
00003398 6100 EC32                  		bsr.w	Pal_FadeTo
0000339C                            
0000339C                            loc_317C:
0000339C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000033A2 6100 F824                  		bsr.w	DelayProgram
000033A6 4EB9 0000 0000             		jsr	ObjectsLoad
000033AC 6100 0000                  		bsr.w	DeformBgLayer
000033B0 4EB9 0000 0000             		jsr	BuildSprites
000033B6 6100 E7C4                  		bsr.w	PalCycle_Title
000033BA 6100 E450                  		bsr.w	RunPLC_RAM
000033BE 3038 D008                  		move.w	($FFFFD008).w,d0
000033C2 5440                       		addq.w	#2,d0
000033C4 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000033C8 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000033CC 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000033CE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000033D4 4E75                       		rts	
000033D6                            ; ===========================================================================
000033D6                            
000033D6                            Title_ChkRegion:
000033D6 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000033DA 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000033DC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000033E2 6000                       		bra.s	Title_EnterCheat
000033E4                            ; ===========================================================================
000033E4                            
000033E4                            Title_RegionJ:				; XREF: Title_ChkRegion
000033E4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000033EA                            
000033EA                            Title_EnterCheat:			; XREF: Title_ChkRegion
000033EA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000033EE D0C0                       		adda.w	d0,a0
000033F0 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000033F4 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000033F8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000033FA 6600                       		bne.s	loc_3210	; if not, branch
000033FC 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003400 4A00                       		tst.b	d0
00003402 6600                       		bne.s	Title_CountC
00003404 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003408 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
0000340C E249                       		lsr.w	#1,d1
0000340E 0241 0003                  		andi.w	#3,d1
00003412 6700                       		beq.s	Title_PlayRing
00003414 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003418 6A00                       		bpl.s	Title_PlayRing
0000341A 7201                       		moveq	#1,d1
0000341C 1181 1001                  		move.b	d1,1(a0,d1.w)
00003420                            
00003420                            Title_PlayRing:
00003420 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003426 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000342A 6100 E190                  		bsr.w	PlaySound_Special
0000342E 6000                       		bra.s	Title_CountC
00003430                            ; ===========================================================================
00003430                            
00003430                            loc_3210:				; XREF: Title_EnterCheat
00003430 4A00                       		tst.b	d0
00003432 6700                       		beq.s	Title_CountC
00003434 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
0000343A 6700                       		beq.s	Title_CountC
0000343C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003442                            
00003442                            Title_CountC:
00003442 1038 F605                  		move.b	($FFFFF605).w,d0
00003446 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000344A 6700                       		beq.s	loc_3230	; if not, branch
0000344C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003450                            
00003450                            loc_3230:
00003450 4A78 F614                  		tst.w	($FFFFF614).w
00003454 6700 0000                  		beq.w	Demo
00003458 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
0000345E 6700 FF3C                  		beq.w	loc_317C	; if not, branch
00003462                            
00003462                            Title_ChkLevSel:
00003462 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003466 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000346A 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003470 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003474 7002                       		moveq	#2,d0
00003476 6100 EEC0                  		bsr.w	PalLoad2	; load level select pallet
0000347A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000347E 7000                       		moveq	#0,d0
00003480 323C 00DF                  		move.w	#$DF,d1
00003484                            
00003484                            Title_ClrScroll:
00003484 22C0                       		move.l	d0,(a1)+
00003486 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000348A                            
0000348A 21C0 F616                  		move.l	d0,($FFFFF616).w
0000348E 46FC 2700                  		move	#$2700,sr
00003492 4DF9 00C0 0000             		lea	($C00000).l,a6
00003498 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000034A2 323C 03FF                  		move.w	#$3FF,d1
000034A6                            
000034A6                            Title_ClrVram:
000034A6 2C80                       		move.l	d0,(a6)
000034A8 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
000034AC                            
000034AC 6100 0000                  		bsr.w	LevSelTextLoad
000034B0                            		
000034B0                            		; sound test fix
000034B0 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000034B4 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000034BA 363C E65F                  		move.w	#$E680-$21,d3
000034BE 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000034C2 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000034C6                            
000034C6                            ; ---------------------------------------------------------------------------
000034C6                            ; Level	Select
000034C6                            ; ---------------------------------------------------------------------------
000034C6                            
000034C6                            LevelSelect:
000034C6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000034CC 6100 F6FA                  		bsr.w	DelayProgram
000034D0 6100 0000                  		bsr.w	LevSelControls
000034D4 6100 E336                  		bsr.w	RunPLC_RAM
000034D8 4AB8 F680                  		tst.l	($FFFFF680).w
000034DC 66E8                       		bne.s	LevelSelect
000034DE 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000034E4 67E0                       		beq.s	LevelSelect	; if not, branch
000034E6 3038 FF82                  		move.w	($FFFFFF82).w,d0
000034EA 0C40 0015                  		cmpi.w	#$15,d0		; have you selected item $15 (free wifi)?
000034EE 6600                       		bne.s	@dontboom	; if not, dont blow this place up
000034F0 303C 00E4                  		move.w	#$E4,d0
000034F4 6100 E0C6                  		bsr.w	PlaySound_Special
000034F8 4EF8 03B8                  		jmp		CheckSumError; BOOM
000034FC                            	@dontboom:
000034FC 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00003500 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003502                            		
00003502 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003506 0640 0080                  		addi.w	#$80,d0
0000350A                            		
0000350A 6100 E0B0                  		bsr.w	PlaySound_Special
0000350E 60B6                       		bra.s	LevelSelect
00003510                            ; ===========================================================================
00003510                            
00003510                            LevSel_Ending:				; XREF: LevelSelect
00003510 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003516 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
0000351C 4E75                       		rts	
0000351E                            ; ===========================================================================
0000351E                            
0000351E                            LevSel_Credits:				; XREF: LevelSelect
0000351E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003524 103C 0091                  		move.b	#$91,d0
00003528 6100 E092                  		bsr.w	PlaySound_Special ; play credits music
0000352C 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003532 4E75                       		rts	
00003534                            ; ===========================================================================
00003534                            
00003534                            LevSel_Level_SS:			; XREF: LevelSelect
00003534 D040                       		add.w	d0,d0
00003536 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
0000353A 6B00 FF8A                  		bmi.w	LevelSelect
0000353E 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003542 6600                       		bne.s	LevSel_Level	; if not, branch
00003544 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000354A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000354E 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003554 7000                       		moveq	#0,d0
00003556 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000355A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000355E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003562 4E75                       		rts	
00003564                            ; ===========================================================================
00003564                            
00003564                            LevSel_Level:				; XREF: LevSel_Level_SS
00003564 0240 3FFF                  		andi.w	#$3FFF,d0
00003568 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000356C                            
0000356C                            PlayLevel:				; XREF: ROM:00003246j ...
0000356C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003572 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003578 7000                       		moveq	#0,d0
0000357A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000357E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003582 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003586 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000358A 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000358E 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003592 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003596 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
0000359A 103C 00E0                  		move.b	#$E0,d0
0000359E 6100 E01C                  		bsr.w	PlaySound_Special ; fade out music
000035A2 4E75                       		rts	
000035A4                            ; ===========================================================================
000035A4                            ; ---------------------------------------------------------------------------
000035A4                            ; Level	select - level pointers
000035A4                            ; ---------------------------------------------------------------------------
000035A4                            LSelectPointers:
000035A4                            		incbin	misc\ls_point.bin
000035CE                            		even
000035CE                            ; ---------------------------------------------------------------------------
000035CE                            ; Level	select codes
000035CE                            ; ---------------------------------------------------------------------------
000035CE                            LevelSelectCode_J:
000035CE                            		incbin	misc\ls_jcode.bin
000035D4                            		even
000035D4                            
000035D4                            LevelSelectCode_US:
000035D4                            		incbin	misc\ls_ucode.bin
000035DA                            		even
000035DA                            ; ===========================================================================
000035DA                            
000035DA                            ; ---------------------------------------------------------------------------
000035DA                            ; Demo mode
000035DA                            ; ---------------------------------------------------------------------------
000035DA                            
000035DA                            Demo:					; XREF: TitleScreen
000035DA 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000035E0                            
000035E0                            loc_33B6:				; XREF: loc_33E4
000035E0 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000035E6 6100 F5E0                  		bsr.w	DelayProgram
000035EA 6100 0000                  		bsr.w	DeformBgLayer
000035EE 6100 E56C                  		bsr.w	PalCycle_Load
000035F2 6100 E218                  		bsr.w	RunPLC_RAM
000035F6 3038 D008                  		move.w	($FFFFD008).w,d0
000035FA 5440                       		addq.w	#2,d0
000035FC 31C0 D008                  		move.w	d0,($FFFFD008).w
00003600 0C40 1C00                  		cmpi.w	#$1C00,d0
00003604 6500                       		bcs.s	loc_33E4
00003606 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
0000360C 4E75                       		rts	
0000360E                            ; ===========================================================================
0000360E                            
0000360E                            loc_33E4:				; XREF: Demo
0000360E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003614 6600 FE4C                  		bne.w	Title_ChkLevSel	; if yes, branch
00003618 4A78 F614                  		tst.w	($FFFFF614).w
0000361C 6600 FFC2                  		bne.w	loc_33B6
00003620 103C 00E0                  		move.b	#$E0,d0
00003624 6100 DF96                  		bsr.w	PlaySound_Special ; fade out music
00003628 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
0000362C 0240 0007                  		andi.w	#7,d0
00003630 D040                       		add.w	d0,d0
00003632 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003636 31C0 FE10                  		move.w	d0,($FFFFFE10).w
0000363A 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
0000363E 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003644 6500                       		bcs.s	loc_3422	; if yes, branch
00003646 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
0000364C                            
0000364C                            loc_3422:
0000364C 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003652 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003658 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
0000365C 6600                       		bne.s	Demo_Level	; if not, branch
0000365E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003664 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003668 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
0000366C                            
0000366C                            Demo_Level:
0000366C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003672 7000                       		moveq	#0,d0
00003674 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003678 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000367C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003680 4E75                       		rts	
00003682                            ; ===========================================================================
00003682                            ; ---------------------------------------------------------------------------
00003682                            ; Levels used in demos
00003682                            ; ---------------------------------------------------------------------------
00003682                            Demo_Levels:	incbin	misc\dm_ord1.bin
0000368A                            		even
0000368A                            
0000368A                            ; ---------------------------------------------------------------------------
0000368A                            ; Subroutine to	change what you're selecting in the level select
0000368A                            ; ---------------------------------------------------------------------------
0000368A                            
0000368A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000368A                            
0000368A                            
0000368A                            LevSelControls:				; XREF: LevelSelect
0000368A 1238 F605                  		move.b	($FFFFF605).w,d1
0000368E 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003692 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003694 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003698 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
0000369A                            
0000369A                            LevSel_UpDown:
0000369A 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000036A0 1238 F604                  		move.b	($FFFFF604).w,d1
000036A4 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000036A8 6700                       		beq.s	LevSel_SndTest	; if not, branch
000036AA 3038 FF82                  		move.w	($FFFFFF82).w,d0
000036AE 0801 0000                  		btst	#0,d1		; is up	pressed?
000036B2 6700                       		beq.s	LevSel_Down	; if not, branch
000036B4 5340                       		subq.w	#1,d0		; move up 1 selection
000036B6 6400                       		bcc.s	LevSel_Down
000036B8 7016                       		moveq	#$16,d0		; if selection moves below 0, jump to selection	$15
000036BA                            
000036BA                            LevSel_Down:
000036BA 0801 0001                  		btst	#1,d1		; is down pressed?
000036BE 6700                       		beq.s	LevSel_Refresh	; if not, branch
000036C0 5240                       		addq.w	#1,d0		; move down 1 selection
000036C2 0C40 0017                  		cmpi.w	#$17,d0
000036C6 6500                       		bcs.s	LevSel_Refresh
000036C8 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
000036CA                            ; ===========================================================================
000036CA                            LevSel_Refresh:
000036CA 3C00                       		move.w	d0,d6
000036CC 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000036D0 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000036D4 363C C65F                  		move.w	#$C680-$21,d3
000036D8 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
000036DC 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000036E0 4E75                       		rts	
000036E2                            		
000036E2                            LevSel_SndTest:				; XREF: LevSelControls
000036E2 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
000036E8 6600                       		bne.s	LevSel_NoMove	; if not, branch
000036EA 1238 F605                  		move.b	($FFFFF605).w,d1
000036EE 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
000036F2 6700                       		beq.s	LevSel_NoMove	; if not, branch
000036F4 3038 FF84                  		move.w	($FFFFFF84).w,d0
000036F8 0801 0002                  		btst	#2,d1		; is left pressed?
000036FC 6700                       		beq.s	LevSel_Right	; if not, branch
000036FE 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00003700 6400                       		bcc.s	LevSel_Right
00003702 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00003704                            
00003704                            LevSel_Right:
00003704 0801 0003                  		btst	#3,d1		; is right pressed?
00003708 6700                       		beq.s	LevSel_Refresh2	; if not, branch
0000370A 5240                       		addq.w	#1,d0		; add 1	to sound test
0000370C 0C40 0050                  		cmpi.w	#$50,d0
00003710 6500                       		bcs.s	LevSel_Refresh2
00003712 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00003714                            
00003714                            LevSel_Refresh2:
00003714 363C C65F                  		move.w	#$C680-$21,d3
00003718 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
0000371C 6000 0000                  		bra.w	LevSelSndTest	; refresh text
00003720                            
00003720                            LevSel_NoMove:
00003720 4E75                       		rts	
00003722                            ; End of function LevSelControls
00003722                            
00003722                            ; ---------------------------------------------------------------------------
00003722                            ; Subroutine to load level select text
00003722                            ; ---------------------------------------------------------------------------
00003722                            
00003722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003722 =62040003                  lsscrpos = $62040003
00003722 =00240000                  lsoff = $240000
00003722 =663E0003                  lsstpos = $663E0003
00003722                            LevSelTextLoad_loop:
00003722 2D44 0004                  		move.l	d4,4(a6)
00003726 6100 0000                  		bsr.w	LevSel_ChgLine
0000372A 0684 0080 0000             		addi.l	#$800000,d4
00003730 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
00003734 4E75                       		rts
00003736                            LevSelTextLoad:				; XREF: TitleScreen
00003736 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000373C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003742 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003746 283C 6204 0003             		move.l	#lsscrpos,d4	; screen position (text)
0000374C                            		
0000374C 323C 000B                  		move.w	#11,d1		; number of lines of text (first row)
00003750 61D0                       		bsr.s	LevSelTextLoad_loop
00003752                            		
00003752                            		
00003752 283C 6228 0003             		move.l	#lsscrpos+lsoff,d4
00003758 323C 000C                  		move.w	#12,d1		; number of lines of text (second row)
0000375C 61C4                       		bsr.s	LevSelTextLoad_loop
0000375E 363C C65F                  		move.w	#$C680-$21,d3
00003762                            		
00003762                            LevSelHighlightCode:
00003762 4DF9 00C0 0000             		lea	($C00000).l,a6
00003768 7000                       		moveq	#0,d0
0000376A 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000376E 3200                       		move.w	d0,d1
00003770 283C 6204 0003             		move.l	#lsscrpos,d4
00003776                            		
00003776 0C40 000C                  		cmpi.w	#12,d0
0000377A 6D00                       		blt.s	@notsecond
0000377C                            		
0000377C 0440 000C                  		sub.w	#12,d0
00003780 0684 0024 0000             		addi.l	#lsoff,d4
00003786                            	@notsecond:
00003786 EF48                       		lsl.w	#7,d0
00003788 4840                       		swap	d0
0000378A D880                       		add.l	d0,d4
0000378C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003792 E749                       		lsl.w	#3,d1
00003794 D241                       		add.w	d1,d1
00003796 D2C1                       		adda.w	d1,a1
00003798 2D44 0004                  		move.l	d4,4(a6)
0000379C 6100 0000                  		bsr.w	LevSel_ChgLine
000037A0 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000037A6 6700                       		beq.s	LevSelSndTest
000037A8 4E75                       		rts
000037AA                            
000037AA                            LevSelSndTest:
000037AA 0643 0030                  		add.w	#$30,d3
000037AE 23FC 663E 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
000037B8 3038 FF84                  		move.w	($FFFFFF84).w,d0
000037BC 0640 0080                  		addi.w	#$80,d0
000037C0 1400                       		move.b	d0,d2
000037C2 E808                       		lsr.b	#4,d0
000037C4 6100 0000                  		bsr.w	LevSel_ChgSnd
000037C8 1002                       		move.b	d2,d0
000037CA 6100 0000                  		bsr.w	LevSel_ChgSnd
000037CE 4E75                       		rts	
000037D0                            ; End of function LevSelTextLoad
000037D0                            
000037D0                            
000037D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037D0                            
000037D0                            
000037D0                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
000037D0 0240 000F                  		andi.w	#$F,d0
000037D4 0C00 000A                  		cmpi.b	#$A,d0
000037D8 6500                       		bcs.s	loc_3580
000037DA 5E00                       		addi.b	#7,d0
000037DC                            
000037DC                            loc_3580:
000037DC D043                       		add.w	d3,d0
000037DE 3C80                       		move.w	d0,(a6)
000037E0 4E75                       		rts	
000037E2                            ; End of function LevSel_ChgSnd
000037E2                            
000037E2                            
000037E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037E2                            
000037E2                            
000037E2                            LevSel_ChgLine:				; XREF: LevSelTextLoad
000037E2 740F                       		moveq	#$10-1,d2		; number of characters per line
000037E4                            
000037E4                            @loop:
000037E4 7000                       		moveq	#0,d0
000037E6 1019                       		move.b	(a1)+,d0
000037E8 0C00 0020                  		cmpi.b	#$20,d0
000037EC 6E00                       		bgt.s	@draw
000037EE 3CBC 0000                  		move.w	#0,(a6)
000037F2 51CA FFF0                  		dbf	d2,@loop
000037F6 4E75                       		rts	
000037F8                            ; ===========================================================================
000037F8                            
000037F8                            @draw:				; XREF: LevSel_ChgLine
000037F8 D043                       		add.w	d3,d0
000037FA 3C80                       		move.w	d0,(a6)
000037FC 51CA FFE6                  		dbf	d2,@loop
00003800 4E75                       		rts	
00003802                            ; End of function LevSel_ChgLine
00003802                            
00003802                            ; ===========================================================================
00003802                            ; ---------------------------------------------------------------------------
00003802                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003802                            ; ---------------------------------------------------------------------------
00003802                            LevelMenuText:	
00003802 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003812 2020 2020 2020 2020 2020+          dc.b    "               2"
00003822 2020 2020 2020 2020 2020+          dc.b    "               3"
00003832 494F 4C42 494B 4520 4649+          dc.b    "IOLBIKE FILE   1"
00003842 2045 4747 5350 4C20 2020+          dc.b    " EGGSPL        2"
00003852 2020 2020 2020 2020 2020+          dc.b    "               3"
00003862 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003872 2020 2020 2020 2020 2020+          dc.b    "               2"
00003882 2020 2020 2020 2020 2020+          dc.b    "               3"
00003892 444F 4E54 2047 4554 2052+          dc.b    "DONT GET RID   1"
000038A2 204F 4620 5448 4953 2121+          dc.b    " OF THIS!!     2"
000038B2 2020 2020 2020 2020 2020+          dc.b    "               3"
000038C2 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
000038D2 2042 4152 4E45 5920 2020+          dc.b    " BARNEY        2"
000038E2 2020 2020 2020 2020 2020+          dc.b    "               3"
000038F2 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003902 2020 2020 2020 2020 2020+          dc.b    "               2"
00003912 2020 2020 2020 2020 2020+          dc.b    "               3"
00003922 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003932 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003942 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST      "
00003952 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003962 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003972 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003982                                    even
00003982                            ; ---------------------------------------------------------------------------
00003982                            ; Music	playlist
00003982                            ; ---------------------------------------------------------------------------
00003982                            MusicList1:	incbin	misc\muslist1.bin
0000398A                            		even
0000398A                            MusicList2:	incbin	misc\muslist2.bin
00003990                            		even
00003990                            MusicList3:	incbin	misc\muslist3.bin
00003996                            		even
00003996                            MusicList4:	incbin	misc\muslist4.bin
0000399C                            		even
0000399C                            ; ===========================================================================
0000399C                            
0000399C                            ; ---------------------------------------------------------------------------
0000399C                            ; Level
0000399C                            ; ---------------------------------------------------------------------------
0000399C                            
0000399C                            Level:					; XREF: GameModeArray
0000399C 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
000039A2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000039A6 6B00                       		bmi.s	loc_37B6
000039A8 103C 00E0                  		move.b	#$E0,d0
000039AC 6100 DC0E                  		bsr.w	PlaySound_Special ; fade out music
000039B0                            
000039B0                            loc_37B6:
000039B0 6100 DE4C                  		bsr.w	ClearPLC
000039B4 6100 E6BC                  		bsr.w	Pal_FadeFrom
000039B8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000039BC 6B00                       		bmi.s	Level_ClrRam
000039BE 46FC 2700                  		move	#$2700,sr
000039C2 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000039CC 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000039D2 6100 DC8C                  		bsr.w	NemDec
000039D6 46FC 2300                  		move	#$2300,sr
000039DA 7000                       		moveq	#0,d0
000039DC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000039E0 E948                       		lsl.w	#4,d0
000039E2 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000039E8 45F2 0000                  		lea	(a2,d0.w),a2
000039EC 7000                       		moveq	#0,d0
000039EE 1012                       		move.b	(a2),d0
000039F0 6700                       		beq.s	loc_37FC
000039F2 6100 DDAC                  		bsr.w	LoadPLC		; load level patterns
000039F6                            
000039F6                            loc_37FC:
000039F6 7001                       		moveq	#1,d0
000039F8 6100 DDA6                  		bsr.w	LoadPLC		; load standard	patterns
000039FC                            
000039FC                            Level_ClrRam:
000039FC 43F8 D000                  		lea	($FFFFD000).w,a1
00003A00 7000                       		moveq	#0,d0
00003A02 323C 07FF                  		move.w	#$7FF,d1
00003A06                            
00003A06                            Level_ClrObjRam:
00003A06 22C0                       		move.l	d0,(a1)+
00003A08 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003A0C                            
00003A0C 43F8 F628                  		lea	($FFFFF628).w,a1
00003A10 7000                       		moveq	#0,d0
00003A12 323C 0015                  		move.w	#$15,d1
00003A16                            
00003A16                            Level_ClrVars:
00003A16 22C0                       		move.l	d0,(a1)+
00003A18 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003A1C                            
00003A1C 43F8 F700                  		lea	($FFFFF700).w,a1
00003A20 7000                       		moveq	#0,d0
00003A22 323C 003F                  		move.w	#$3F,d1
00003A26                            
00003A26                            Level_ClrVars2:
00003A26 22C0                       		move.l	d0,(a1)+
00003A28 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003A2C                            
00003A2C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003A30 7000                       		moveq	#0,d0
00003A32 323C 0047                  		move.w	#$47,d1
00003A36                            
00003A36                            Level_ClrVars3:
00003A36 22C0                       		move.l	d0,(a1)+
00003A38 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003A3C                            
00003A3C 46FC 2700                  		move	#$2700,sr
00003A40 6100 DAA2                  		bsr.w	ClearScreen
00003A44 4DF9 00C0 0004             		lea	($C00004).l,a6
00003A4A 3CBC 8B03                  		move.w	#$8B03,(a6)
00003A4E 3CBC 8230                  		move.w	#$8230,(a6)
00003A52 3CBC 8407                  		move.w	#$8407,(a6)
00003A56 3CBC 857C                  		move.w	#$857C,(a6)
00003A5A 3CBC 9001                  		move.w	#$9001,(a6)
00003A5E 3CBC 8004                  		move.w	#$8004,(a6)
00003A62 3CBC 8720                  		move.w	#$8720,(a6)
00003A66 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003A6C 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003A70 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003A76 6600                       		bne.s	Level_LoadPal	; if not, branch
00003A78 3CBC 8014                  		move.w	#$8014,(a6)
00003A7C 7000                       		moveq	#0,d0
00003A7E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003A82 D040                       		add.w	d0,d0
00003A84 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003A8A 3031 0000                  		move.w	(a1,d0.w),d0
00003A8E 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003A92 31C0 F648                  		move.w	d0,($FFFFF648).w
00003A96 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003A9A 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003A9E 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003AA2 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003AA8                            
00003AA8                            Level_LoadPal:
00003AA8 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003AAE 46FC 2300                  		move	#$2300,sr
00003AB2 7003                       		moveq	#3,d0
00003AB4 6100 E882                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003AB8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003ABE 6600                       		bne.s	Level_GetBgm	; if not, branch
00003AC0 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
00003AC2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003AC8 6600                       		bne.s	Level_WaterPal	; if not, branch
00003ACA 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00003ACC                            
00003ACC                            Level_WaterPal:
00003ACC 6100 E882                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003AD0 4A38 FE30                  		tst.b	($FFFFFE30).w
00003AD4 6700                       		beq.s	Level_GetBgm
00003AD6 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003ADC                            
00003ADC                            ; NineKode begins here - How to play different songs on different acts
00003ADC                             
00003ADC                            Level_GetBgm:
00003ADC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AE0 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003AE4 7000                       		moveq	#0,d0
00003AE6 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003AEA                             
00003AEA 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003AF0 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003AF2 43F9 0000 3982             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003AF8 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003AFA                             
00003AFA                            Level_GetBgm2:
00003AFA 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003B00 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003B02 43F9 0000 398A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003B08 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003B0A                             
00003B0A                            Level_GetBgm3:
00003B0A 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003B10 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003B12 43F9 0000 3990             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003B18 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003B1A                             
00003B1A                            Level_GetBgm4:
00003B1A 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003B20 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003B22 43F9 0000 3996             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003B28                             
00003B28                            Level_PlayBgm:
00003B28 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003B2C 6100 DA88                  		bsr.w	PlaySound	; play music
00003B30 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003B36                             
00003B36                            ; NineKode ends here
00003B36                            
00003B36                            Level_TtlCard:
00003B36 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003B3C 6100 F08A                  		bsr.w	DelayProgram
00003B40 4EB9 0000 0000             		jsr	ObjectsLoad
00003B46 4EB9 0000 0000             		jsr	BuildSprites
00003B4C 6100 DCBE                  		bsr.w	RunPLC_RAM
00003B50 3038 D108                  		move.w	($FFFFD108).w,d0
00003B54 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003B58 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003B5A 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003B5E 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003B60 4EB9 0000 0000             		jsr	Hud_Base
00003B66                            
00003B66                            loc_3946:
00003B66 7003                       		moveq	#3,d0
00003B68 6100 E7B2                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003B6C 6100 0000                  		bsr.w	LevelSizeLoad
00003B70 6100 0000                  		bsr.w	DeformBgLayer
00003B74 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003B7A 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003B7E 6100 0000                  		bsr.w	LoadTilesFromStart
00003B82 4EB9 0000 0000             		jsr	FloorLog_Unk
00003B88 6100 0000                  		bsr.w	ColIndexLoad
00003B8C 6100 0000                  		bsr.w	LZWaterEffects
00003B90 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003B96 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B9A 6B00                       		bmi.s	Level_ChkDebug
00003B9C 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003BA2                            
00003BA2                            Level_ChkDebug:
00003BA2 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003BA6 6700                       		beq.s	Level_ChkWater	; if not, branch
00003BA8 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003BAE 6700                       		beq.s	Level_ChkWater	; if not, branch
00003BB0 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003BB6                            
00003BB6                            Level_ChkWater:
00003BB6 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003BBC 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003BC2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BC8 6600                       		bne.s	Level_LoadObj	; if not, branch
00003BCA 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003BD0 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003BD6 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003BDC 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003BE2                            
00003BE2                            Level_LoadObj:
00003BE2 4EB9 0000 0000             		jsr	ObjPosLoad
00003BE8 4EB9 0000 0000             		jsr	ObjectsLoad
00003BEE 4EB9 0000 0000             		jsr	BuildSprites
00003BF4 7000                       		moveq	#0,d0
00003BF6 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003BFA 6600                       		bne.s	loc_39E8	; if yes, branch
00003BFC 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003C00 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003C04 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003C08                            
00003C08                            loc_39E8:
00003C08 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003C0C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003C10 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003C14 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003C18                            		; move.b	d0,($FFFFFE2F).w
00003C18 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003C1E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003C22 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003C26 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003C2A 6100 0000                  		bsr.w	OscillateNumInit
00003C2E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003C34 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003C3A 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003C40 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003C46 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003C4C 7000                       		moveq	#0,d0
00003C4E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C52 E548                       		lsl.w	#2,d0
00003C54 2271 0000                  		movea.l	(a1,d0.w),a1
00003C58 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003C5C 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003C5E 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003C64 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003C68 5340                       		subq.w	#1,d0
00003C6A E548                       		lsl.w	#2,d0
00003C6C 2271 0000                  		movea.l	(a1,d0.w),a1
00003C70                            
00003C70                            Level_Demo:
00003C70 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003C76 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003C7A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003C80 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C84 6A00                       		bpl.s	Level_ChkWaterPal
00003C86 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003C8C 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003C92 6600                       		bne.s	Level_ChkWaterPal
00003C94 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003C9A                            
00003C9A                            Level_ChkWaterPal:
00003C9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003CA0 6600                       		bne.s	Level_Delay	; if not, branch
00003CA2 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003CA4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003CAA 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003CAC 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003CAE                            
00003CAE                            Level_WaterPal2:
00003CAE 6100 E6BC                  		bsr.w	PalLoad4_Water
00003CB2                            
00003CB2                            Level_Delay:
00003CB2 323C 0003                  		move.w	#3,d1
00003CB6                            
00003CB6                            Level_DelayLoop:
00003CB6 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003CBC 6100 EF0A                  		bsr.w	DelayProgram
00003CC0 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003CC4                            
00003CC4 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003CCA 6100 E306                  		bsr.w	Pal_FadeTo2
00003CCE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003CD2 6B00                       		bmi.s	Level_ClrCardArt
00003CD4 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003CD8 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003CDC 5838 D124                  		addq.b	#4,($FFFFD124).w
00003CE0 5838 D164                  		addq.b	#4,($FFFFD164).w
00003CE4 6000                       		bra.s	Level_StartGame
00003CE6                            ; ===========================================================================
00003CE6                            
00003CE6                            Level_ClrCardArt:
00003CE6 7002                       		moveq	#2,d0
00003CE8 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
00003CEE 7000                       		moveq	#0,d0
00003CF0 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003CF4 0640 0015                  		addi.w	#$15,d0
00003CF8 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003CFE                            
00003CFE                            Level_StartGame:
00003CFE 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003D04                            
00003D04                            ; ---------------------------------------------------------------------------
00003D04                            ; Main level loop (when	all title card and loading sequences are finished)
00003D04                            ; ---------------------------------------------------------------------------
00003D04                            
00003D04                            Level_MainLoop:
00003D04 6100 D8C2                  		bsr.w	PauseGame
00003D08 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003D0E 6100 EEB8                  		bsr.w	DelayProgram
00003D12 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003D16 6100 0000                  		bsr.w	MoveSonicInDemo
00003D1A 6100 0000                  		bsr.w	LZWaterEffects
00003D1E 4EB9 0000 0000             		jsr	ObjectsLoad
00003D24 4A78 FE08                  		tst.w	($FFFFFE08).w
00003D28 6600                       		bne.s	loc_3B10
00003D2A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003D30 6400                       		bcc.s	loc_3B14
00003D32                            
00003D32                            loc_3B10:
00003D32 6100 0000                  		bsr.w	DeformBgLayer
00003D36                            
00003D36                            loc_3B14:
00003D36 4EB9 0000 0000             		jsr	BuildSprites
00003D3C 4EB9 0000 0000             		jsr	ObjPosLoad
00003D42 6100 DE18                  		bsr.w	PalCycle_Load
00003D46 6100 DAC4                  		bsr.w	RunPLC_RAM
00003D4A 6100 0000                  		bsr.w	OscillateNumDo
00003D4E 6100 0000                  		bsr.w	ChangeRingFrame
00003D52 6100 0000                  		bsr.w	SignpostArtLoad
00003D56 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003D5C 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003D5E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003D62 6600 FC38                  		bne.w	Level		; if yes, branch
00003D66 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003D6C 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003D70 4E75                       		rts	
00003D72                            ; ===========================================================================
00003D72                            
00003D72                            Level_ChkDemo:				; XREF: Level_MainLoop
00003D72 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003D76 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003D78 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003D7C 6700                       		beq.s	Level_EndDemo	; if not, branch
00003D7E 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003D84 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003D88 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003D8E 4E75                       		rts	
00003D90                            ; ===========================================================================
00003D90                            
00003D90                            Level_EndDemo:				; XREF: Level_ChkDemo
00003D90 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003D96 6600                       		bne.s	loc_3B88	; if not, branch
00003D98 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003D9E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003DA2 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003DA4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003DAA                            
00003DAA                            loc_3B88:
00003DAA 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003DB0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003DB6 4278 F794                  		clr.w	($FFFFF794).w
00003DBA                            
00003DBA                            loc_3B98:
00003DBA 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003DC0 6100 EE06                  		bsr.w	DelayProgram
00003DC4 6100 0000                  		bsr.w	MoveSonicInDemo
00003DC8 4EB9 0000 0000             		jsr	ObjectsLoad
00003DCE 4EB9 0000 0000             		jsr	BuildSprites
00003DD4 4EB9 0000 0000             		jsr	ObjPosLoad
00003DDA 5378 F794                  		subq.w	#1,($FFFFF794).w
00003DDE 6A00                       		bpl.s	loc_3BC8
00003DE0 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003DE6 6100 E2AA                  		bsr.w	Pal_FadeOut
00003DEA                            
00003DEA                            loc_3BC8:
00003DEA 4A78 F614                  		tst.w	($FFFFF614).w
00003DEE 66CA                       		bne.s	loc_3B98
00003DF0 4E75                       		rts	
00003DF2                            ; ===========================================================================
00003DF2                            ; ---------------------------------------------------------------------------
00003DF2                            ; Subroutine to	do special water effects in Labyrinth Zone
00003DF2                            ; ---------------------------------------------------------------------------
00003DF2                            
00003DF2                            LZWaterEffects:				; XREF: Level
00003DF2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003DF8 6600                       		bne.s	locret_3C28	; if not, branch
00003DFA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003E00 6400                       		bcc.s	LZMoveWater
00003E02 6100 0000                  		bsr.w	LZWindTunnels
00003E06 6100 0000                  		bsr.w	LZWaterSlides
00003E0A 6100 0000                  		bsr.w	LZDynamicWater
00003E0E                            
00003E0E                            LZMoveWater:
00003E0E 4238 F64E                  		clr.b	($FFFFF64E).w
00003E12 7000                       		moveq	#0,d0
00003E14 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003E18 E248                       		lsr.w	#1,d0
00003E1A D078 F648                  		add.w	($FFFFF648).w,d0
00003E1E 31C0 F646                  		move.w	d0,($FFFFF646).w
00003E22 3038 F646                  		move.w	($FFFFF646).w,d0
00003E26 9078 F704                  		sub.w	($FFFFF704).w,d0
00003E2A 6400                       		bcc.s	loc_3C1A
00003E2C 4A40                       		tst.w	d0
00003E2E 6A00                       		bpl.s	loc_3C1A
00003E30 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003E36 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003E3C                            
00003E3C                            loc_3C1A:
00003E3C 0C40 00DF                  		cmpi.w	#$DF,d0
00003E40 6500                       		bcs.s	loc_3C24
00003E42 303C 00DF                  		move.w	#$DF,d0
00003E46                            
00003E46                            loc_3C24:
00003E46 11C0 F625                  		move.b	d0,($FFFFF625).w
00003E4A                            
00003E4A                            locret_3C28:
00003E4A 4E75                       		rts	
00003E4C                            ; ===========================================================================
00003E4C                            ; ---------------------------------------------------------------------------
00003E4C                            ; Labyrinth default water heights
00003E4C                            ; ---------------------------------------------------------------------------
00003E4C                            WaterHeight:	incbin	misc\lz_heigh.bin
00003E54                            		even
00003E54                            ; ===========================================================================
00003E54                            
00003E54                            ; ---------------------------------------------------------------------------
00003E54                            ; Labyrinth dynamic water routines
00003E54                            ; ---------------------------------------------------------------------------
00003E54                            
00003E54                            LZDynamicWater:				; XREF: LZWaterEffects
00003E54 7000                       		moveq	#0,d0
00003E56 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003E5A D040                       		add.w	d0,d0
00003E5C 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003E60 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003E64 7200                       		moveq	#0,d1
00003E66 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003E6A 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003E6E 9078 F648                  		sub.w	($FFFFF648).w,d0
00003E72 6700                       		beq.s	locret_3C5A
00003E74 6400                       		bcc.s	loc_3C56
00003E76 4441                       		neg.w	d1
00003E78                            
00003E78                            loc_3C56:
00003E78 D378 F648                  		add.w	d1,($FFFFF648).w
00003E7C                            
00003E7C                            locret_3C5A:
00003E7C 4E75                       		rts	
00003E7E                            ; ===========================================================================
00003E7E 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003E80 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003E82 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003E84 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003E86                            ; ===========================================================================
00003E86                            
00003E86                            DynWater_LZ1:				; XREF: DynWater_Index
00003E86 3038 F700                  		move.w	($FFFFF700).w,d0
00003E8A 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003E8E 6600                       		bne.s	loc_3CD0
00003E90 323C 00B8                  		move.w	#$B8,d1
00003E94 0C40 0600                  		cmpi.w	#$600,d0
00003E98 6500                       		bcs.s	loc_3CB4
00003E9A 323C 0108                  		move.w	#$108,d1
00003E9E 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003EA4 6500                       		bcs.s	loc_3CBA
00003EA6 0C40 0C00                  		cmpi.w	#$C00,d0
00003EAA 6500                       		bcs.s	loc_3CB4
00003EAC 323C 0318                  		move.w	#$318,d1
00003EB0 0C40 1080                  		cmpi.w	#$1080,d0
00003EB4 6500                       		bcs.s	loc_3CB4
00003EB6 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003EBC 323C 05C8                  		move.w	#$5C8,d1
00003EC0 0C40 1380                  		cmpi.w	#$1380,d0
00003EC4 6500                       		bcs.s	loc_3CB4
00003EC6 323C 03A8                  		move.w	#$3A8,d1
00003ECA B278 F648                  		cmp.w	($FFFFF648).w,d1
00003ECE 6600                       		bne.s	loc_3CB4
00003ED0 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003ED6                            
00003ED6                            loc_3CB4:
00003ED6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003EDA 4E75                       		rts	
00003EDC                            ; ===========================================================================
00003EDC                            
00003EDC                            loc_3CBA:				; XREF: DynWater_LZ1
00003EDC 0C40 0C80                  		cmpi.w	#$C80,d0
00003EE0 65F4                       		bcs.s	loc_3CB4
00003EE2 323C 00E8                  		move.w	#$E8,d1
00003EE6 0C40 1500                  		cmpi.w	#$1500,d0
00003EEA 65EA                       		bcs.s	loc_3CB4
00003EEC 323C 0108                  		move.w	#$108,d1
00003EF0 60E4                       		bra.s	loc_3CB4
00003EF2                            ; ===========================================================================
00003EF2                            
00003EF2                            loc_3CD0:				; XREF: DynWater_LZ1
00003EF2 5302                       		subq.b	#1,d2
00003EF4 6600                       		bne.s	locret_3CF4
00003EF6 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003EFC 6400                       		bcc.s	locret_3CF4
00003EFE 323C 03A8                  		move.w	#$3A8,d1
00003F02 0C40 1300                  		cmpi.w	#$1300,d0
00003F06 6500                       		bcs.s	loc_3CF0
00003F08 323C 0108                  		move.w	#$108,d1
00003F0C 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003F12                            
00003F12                            loc_3CF0:
00003F12 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F16                            
00003F16                            locret_3CF4:
00003F16 4E75                       		rts	
00003F18                            ; ===========================================================================
00003F18                            
00003F18                            DynWater_LZ2:				; XREF: DynWater_Index
00003F18 3038 F700                  		move.w	($FFFFF700).w,d0
00003F1C 323C 0328                  		move.w	#$328,d1
00003F20 0C40 0500                  		cmpi.w	#$500,d0
00003F24 6500                       		bcs.s	loc_3D12
00003F26 323C 03C8                  		move.w	#$3C8,d1
00003F2A 0C40 0B00                  		cmpi.w	#$B00,d0
00003F2E 6500                       		bcs.s	loc_3D12
00003F30 323C 0428                  		move.w	#$428,d1
00003F34                            
00003F34                            loc_3D12:
00003F34 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F38 4E75                       		rts	
00003F3A                            ; ===========================================================================
00003F3A                            
00003F3A                            DynWater_LZ3:				; XREF: DynWater_Index
00003F3A 3038 F700                  		move.w	($FFFFF700).w,d0
00003F3E 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003F42 6600                       		bne.s	loc_3D5E
00003F44 323C 0900                  		move.w	#$900,d1
00003F48 0C40 0600                  		cmpi.w	#$600,d0
00003F4C 6500                       		bcs.s	loc_3D54
00003F4E 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003F54 6500                       		bcs.s	loc_3D54
00003F56 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003F5C 6400                       		bcc.s	loc_3D54
00003F5E 323C 04C8                  		move.w	#$4C8,d1
00003F62 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003F68 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003F6E 303C 00B7                  		move.w	#$B7,d0
00003F72 6100 D648                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003F76                            
00003F76                            loc_3D54:
00003F76 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F7A 31C1 F648                  		move.w	d1,($FFFFF648).w
00003F7E 4E75                       		rts	
00003F80                            ; ===========================================================================
00003F80                            
00003F80                            loc_3D5E:				; XREF: DynWater_LZ3
00003F80 5302                       		subq.b	#1,d2
00003F82 6600                       		bne.s	loc_3DA8
00003F84 323C 04C8                  		move.w	#$4C8,d1
00003F88 0C40 0770                  		cmpi.w	#$770,d0
00003F8C 6500                       		bcs.s	loc_3DA2
00003F8E 323C 0308                  		move.w	#$308,d1
00003F92 0C40 1400                  		cmpi.w	#$1400,d0
00003F96 6500                       		bcs.s	loc_3DA2
00003F98 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003F9E 6700                       		beq.s	loc_3D8E
00003FA0 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003FA6 6400                       		bcc.s	loc_3D8E
00003FA8 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003FAE 6400                       		bcc.s	loc_3DA2
00003FB0                            
00003FB0                            loc_3D8E:
00003FB0 323C 0508                  		move.w	#$508,d1
00003FB4 31C1 F648                  		move.w	d1,($FFFFF648).w
00003FB8 0C40 1770                  		cmpi.w	#$1770,d0
00003FBC 6500                       		bcs.s	loc_3DA2
00003FBE 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003FC4                            
00003FC4                            loc_3DA2:
00003FC4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003FC8 4E75                       		rts	
00003FCA                            ; ===========================================================================
00003FCA                            
00003FCA                            loc_3DA8:
00003FCA 5302                       		subq.b	#1,d2
00003FCC 6600                       		bne.s	loc_3DD2
00003FCE 323C 0508                  		move.w	#$508,d1
00003FD2 0C40 1860                  		cmpi.w	#$1860,d0
00003FD6 6500                       		bcs.s	loc_3DCC
00003FD8 323C 0188                  		move.w	#$188,d1
00003FDC 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003FE0 6400                       		bcc.s	loc_3DC6
00003FE2 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003FE6 6600                       		bne.s	loc_3DCC
00003FE8                            
00003FE8                            loc_3DC6:
00003FE8 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003FEE                            
00003FEE                            loc_3DCC:
00003FEE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003FF2 4E75                       		rts	
00003FF4                            ; ===========================================================================
00003FF4                            
00003FF4                            loc_3DD2:
00003FF4 5302                       		subq.b	#1,d2
00003FF6 6600                       		bne.s	loc_3E0E
00003FF8 323C 0188                  		move.w	#$188,d1
00003FFC 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004000 6500                       		bcs.s	loc_3E04
00004002 323C 0900                  		move.w	#$900,d1
00004006 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000400A 6500                       		bcs.s	loc_3E04
0000400C 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004012 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004018 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000401E 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004024 4E75                       		rts	
00004026                            ; ===========================================================================
00004026                            
00004026                            loc_3E04:
00004026 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000402A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000402E 4E75                       		rts	
00004030                            ; ===========================================================================
00004030                            
00004030                            loc_3E0E:
00004030 0C40 1E00                  		cmpi.w	#$1E00,d0
00004034 6500                       		bcs.s	locret_3E1A
00004036 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000403C                            
0000403C                            locret_3E1A:
0000403C 4E75                       		rts	
0000403E                            ; ===========================================================================
0000403E                            
0000403E                            DynWater_SBZ3:				; XREF: DynWater_Index
0000403E 323C 0228                  		move.w	#$228,d1
00004042 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004048 6500                       		bcs.s	loc_3E2C
0000404A 323C 04C8                  		move.w	#$4C8,d1
0000404E                            
0000404E                            loc_3E2C:
0000404E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004052 4E75                       		rts
00004054                            
00004054                            ; ---------------------------------------------------------------------------
00004054                            ; Labyrinth Zone "wind tunnels"	subroutine
00004054                            ; ---------------------------------------------------------------------------
00004054                            
00004054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004054                            
00004054                            
00004054                            LZWindTunnels:				; XREF: LZWaterEffects
00004054 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004058 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
0000405C 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004062 7000                       		moveq	#0,d0
00004064 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004068 E748                       		lsl.w	#3,d0
0000406A D4C0                       		adda.w	d0,a2
0000406C 7200                       		moveq	#0,d1
0000406E 4A38 FE11                  		tst.b	($FFFFFE11).w
00004072 6600                       		bne.s	loc_3E56
00004074 7201                       		moveq	#1,d1
00004076 514A                       		subq.w	#8,a2
00004078                            
00004078                            loc_3E56:
00004078 43F8 D000                  		lea	($FFFFD000).w,a1
0000407C                            
0000407C                            LZWind_Loop:
0000407C 3029 0008                  		move.w	8(a1),d0
00004080 B052                       		cmp.w	(a2),d0
00004082 6500 0000                  		bcs.w	loc_3EF4
00004086 B06A 0004                  		cmp.w	4(a2),d0
0000408A 6400 0000                  		bcc.w	loc_3EF4
0000408E 3429 000C                  		move.w	$C(a1),d2
00004092 B46A 0002                  		cmp.w	2(a2),d2
00004096 6500                       		bcs.s	loc_3EF4
00004098 B46A 0006                  		cmp.w	6(a2),d2
0000409C 6400                       		bcc.s	loc_3EF4
0000409E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000040A2 0200 003F                  		andi.b	#$3F,d0
000040A6 6600                       		bne.s	loc_3E90
000040A8 303C 00D0                  		move.w	#$D0,d0
000040AC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rushing water sound
000040B2                            
000040B2                            loc_3E90:
000040B2 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000040B6 6600 0000                  		bne.w	locret_3F0A
000040BA 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000040C0 6400                       		bcc.s	loc_3F06
000040C2 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000040C8 0440 0080                  		subi.w	#$80,d0
000040CC B052                       		cmp.w	(a2),d0
000040CE 6400                       		bcc.s	LZWind_Move
000040D0 7002                       		moveq	#2,d0
000040D2 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
000040D8 6600                       		bne.s	loc_3EBA
000040DA 4440                       		neg.w	d0
000040DC                            
000040DC                            loc_3EBA:
000040DC D169 000C                  		add.w	d0,$C(a1)
000040E0                            
000040E0                            LZWind_Move:
000040E0 5869 0008                  		addq.w	#4,8(a1)
000040E4 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
000040EA 337C 0000 0012             		move.w	#0,$12(a1)
000040F0 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
000040F6 08E9 0001 0022             		bset	#1,$22(a1)
000040FC 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004102 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004104 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004108                            
00004108                            LZWind_MoveDown:
00004108 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000410E 6700                       		beq.s	locret_3EF2	; if not, branch
00004110 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004114                            
00004114                            locret_3EF2:
00004114 4E75                       		rts	
00004116                            ; ===========================================================================
00004116                            
00004116                            loc_3EF4:				; XREF: LZWindTunnels
00004116 504A                       		addq.w	#8,a2
00004118 51C9 FF62                  		dbf	d1,LZWind_Loop
0000411C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004120 6700                       		beq.s	locret_3F0A
00004122 137C 0000 001C             		move.b	#0,$1C(a1)
00004128                            
00004128                            loc_3F06:
00004128 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000412C                            
0000412C                            locret_3F0A:
0000412C 4E75                       		rts	
0000412E                            ; End of function LZWindTunnels
0000412E                            
0000412E                            ; ===========================================================================
0000412E 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004136 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004148 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004156                            					; XREF: LZWindTunnels
00004156                            		even
00004156                            
00004156                            ; ---------------------------------------------------------------------------
00004156                            ; Labyrinth Zone water slide subroutine
00004156                            ; ---------------------------------------------------------------------------
00004156                            
00004156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004156                            
00004156                            
00004156                            LZWaterSlides:				; XREF: LZWaterEffects
00004156 43F8 D000                  		lea	($FFFFD000).w,a1
0000415A 0829 0001 0022             		btst	#1,$22(a1)
00004160 6600                       		bne.s	loc_3F6A
00004162 3029 000C                  		move.w	$C(a1),d0
00004166 E248                       		lsr.w	#1,d0
00004168 0240 0380                  		andi.w	#$380,d0
0000416C 1229 0008                  		move.b	8(a1),d1
00004170 0241 007F                  		andi.w	#$7F,d1
00004174 D041                       		add.w	d1,d0
00004176 45F8 A400                  		lea	($FFFFA400).w,a2
0000417A 1032 0000                  		move.b	(a2,d0.w),d0
0000417E 45FA 0000                  		lea	byte_3FCF(pc),a2
00004182 7206                       		moveq	#6,d1
00004184                            
00004184                            loc_3F62:
00004184 B022                       		cmp.b	-(a2),d0
00004186 57C9 FFFC                  		dbeq	d1,loc_3F62
0000418A 6700                       		beq.s	LZSlide_Move
0000418C                            
0000418C                            loc_3F6A:
0000418C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004190 6700                       		beq.s	locret_3F7A
00004192 337C 0005 003E             		move.w	#5,$3E(a1)
00004198 4238 F7CA                  		clr.b	($FFFFF7CA).w
0000419C                            
0000419C                            locret_3F7A:
0000419C 4E75                       		rts	
0000419E                            ; ===========================================================================
0000419E                            
0000419E                            LZSlide_Move:				; XREF: LZWaterSlides
0000419E 0C41 0003                  		cmpi.w	#3,d1
000041A2 6400                       		bcc.s	loc_3F84
000041A4 4E71                       		nop	
000041A6                            
000041A6                            loc_3F84:
000041A6 08A9 0000 0022             		bclr	#0,$22(a1)
000041AC 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000041B0 1340 0014                  		move.b	d0,$14(a1)
000041B4 6A00                       		bpl.s	loc_3F9A
000041B6 08E9 0000 0022             		bset	#0,$22(a1)
000041BC                            
000041BC                            loc_3F9A:
000041BC 4229 0015                  		clr.b	$15(a1)
000041C0 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000041C6 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000041CC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000041D0 0200 001F                  		andi.b	#$1F,d0
000041D4 6600                       		bne.s	locret_3FBE
000041D6 303C 00D0                  		move.w	#$D0,d0
000041DA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play water sound
000041E0                            
000041E0                            locret_3FBE:
000041E0 4E75                       		rts	
000041E2                            ; End of function LZWaterSlides
000041E2                            
000041E2                            ; ===========================================================================
000041E2 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
000041F1 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
000041F2                            		even
000041F2                            
000041F2                            ; ---------------------------------------------------------------------------
000041F2                            ; Subroutine to	move Sonic in demo mode
000041F2                            ; ---------------------------------------------------------------------------
000041F2                            
000041F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041F2                            
000041F2                            
000041F2                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
000041F2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000041F6 6600                       		bne.s	MoveDemo_On	; if yes, branch
000041F8 4E75                       		rts	
000041FA                            ; ===========================================================================
000041FA                            
000041FA                            ; This is an unused subroutine for recording a demo
000041FA                            
000041FA                            MoveDemo_Record:
000041FA 43F9 0008 0000             		lea	($80000).l,a1
00004200 3038 F790                  		move.w	($FFFFF790).w,d0
00004204 D2C0                       		adda.w	d0,a1
00004206 1038 F604                  		move.b	($FFFFF604).w,d0
0000420A B011                       		cmp.b	(a1),d0
0000420C 6600                       		bne.s	loc_3FFA
0000420E 5229 0001                  		addq.b	#1,1(a1)
00004212 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004218 6700                       		beq.s	loc_3FFA
0000421A 4E75                       		rts	
0000421C                            ; ===========================================================================
0000421C                            
0000421C                            loc_3FFA:				; XREF: MoveDemo_Record
0000421C 1340 0002                  		move.b	d0,2(a1)
00004220 137C 0000 0003             		move.b	#0,3(a1)
00004226 5478 F790                  		addq.w	#2,($FFFFF790).w
0000422A 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004230 4E75                       		rts	
00004232                            ; ===========================================================================
00004232                            
00004232                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004232 4A38 F604                  		tst.b	($FFFFF604).w
00004236 6A00                       		bpl.s	loc_4022
00004238 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000423C 6B00                       		bmi.s	loc_4022
0000423E 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004244                            
00004244                            loc_4022:
00004244 43F9 0000 0000             		lea	(Demo_Index).l,a1
0000424A 7000                       		moveq	#0,d0
0000424C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004250 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004256 6600                       		bne.s	loc_4038
00004258 7006                       		moveq	#6,d0
0000425A                            
0000425A                            loc_4038:
0000425A E548                       		lsl.w	#2,d0
0000425C 2271 0000                  		movea.l	(a1,d0.w),a1
00004260 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004264 6A00                       		bpl.s	loc_4056
00004266 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000426C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004270 5340                       		subq.w	#1,d0
00004272 E548                       		lsl.w	#2,d0
00004274 2271 0000                  		movea.l	(a1,d0.w),a1
00004278                            
00004278                            loc_4056:
00004278 3038 F790                  		move.w	($FFFFF790).w,d0
0000427C D2C0                       		adda.w	d0,a1
0000427E 1011                       		move.b	(a1),d0
00004280 41F8 F604                  		lea	($FFFFF604).w,a0
00004284 1200                       		move.b	d0,d1
00004286 1410                       		move.b	(a0),d2
00004288 B500                       		eor.b	d2,d0
0000428A 10C1                       		move.b	d1,(a0)+
0000428C C001                       		and.b	d1,d0
0000428E 10C0                       		move.b	d0,(a0)+
00004290 5338 F792                  		subq.b	#1,($FFFFF792).w
00004294 6400                       		bcc.s	locret_407E
00004296 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000429C 5478 F790                  		addq.w	#2,($FFFFF790).w
000042A0                            
000042A0                            locret_407E:
000042A0 4E75                       		rts	
000042A2                            ; End of function MoveSonicInDemo
000042A2                            
000042A2                            ; ===========================================================================
000042A2                            ; ---------------------------------------------------------------------------
000042A2                            ; Demo sequence	pointers
000042A2                            ; ---------------------------------------------------------------------------
000042A2                            Demo_Index:
000042A2                            	include "_inc\Demo pointers for intro.asm"
000042A2                            ; ---------------------------------------------------------------------------
000042A2                            ; Demo sequence	pointers
000042A2                            ; ---------------------------------------------------------------------------
000042A2 0000 0000                  	dc.l Demo_GHZ
000042A6 0000 0000                  	dc.l Demo_GHZ
000042AA 0000 0000                  	dc.l Demo_MZ
000042AE 0000 0000                  	dc.l Demo_MZ
000042B2 0000 0000                  	dc.l Demo_SYZ
000042B6 0000 0000                  	dc.l Demo_SYZ
000042BA 0000 0000                  	dc.l Demo_SS
000042BE 0000 0000                  	dc.l Demo_SS
000042BE 0000 0000                  	dc.l Demo_SS
000042C2                            
000042C2                            Demo_EndIndex:
000042C2                            	include "_inc\Demo pointers for ending.asm"
000042C2                            ; ---------------------------------------------------------------------------
000042C2                            ; Demo (ending) sequence pointers
000042C2                            ; ---------------------------------------------------------------------------
000042C2 0000 0000                  	dc.l Demo_EndGHZ1
000042C6 0000 0000                  	dc.l Demo_EndMZ
000042CA 0000 0000                  	dc.l Demo_EndSYZ
000042CE 0000 0000                  	dc.l Demo_EndLZ
000042D2 0000 0000                  	dc.l Demo_EndSLZ
000042D6 0000 0000                  	dc.l Demo_EndSBZ1
000042DA 0000 0000                  	dc.l Demo_EndSBZ2
000042DE 0000 0000                  	dc.l Demo_EndGHZ2
000042DE 0000 0000                  	dc.l Demo_EndGHZ2
000042E2                            
000042E2 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000042F2 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004302 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004312                            		even
00004312                            
00004312                            ; ---------------------------------------------------------------------------
00004312                            ; Collision index loading subroutine
00004312                            ; ---------------------------------------------------------------------------
00004312                            
00004312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004312                            
00004312                            
00004312                            ColIndexLoad:				; XREF: Level
00004312 7000                       		moveq	#0,d0
00004314 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004318 E548                       		lsl.w	#2,d0
0000431A 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004320 4E75                       		rts	
00004322                            ; End of function ColIndexLoad
00004322                            
00004322                            ; ===========================================================================
00004322                            ; ---------------------------------------------------------------------------
00004322                            ; Collision index pointers
00004322                            ; ---------------------------------------------------------------------------
00004322                            ColPointers:
00004322                            	include "_inc\Collision index pointers.asm"
00004322                            ; ---------------------------------------------------------------------------
00004322                            ; Collision index pointers
00004322                            ; ---------------------------------------------------------------------------
00004322 0000 0000                  	dc.l Col_GHZ
00004326 0000 0000                  	dc.l Col_LZ
0000432A 0000 0000                  	dc.l Col_MZ
0000432E 0000 0000                  	dc.l Col_SLZ
00004332 0000 0000                  	dc.l Col_SYZ
00004336 0000 0000                  	dc.l Col_SBZ
00004336 0000 0000                  	dc.l Col_SBZ
0000433A                            
0000433A                            ; ---------------------------------------------------------------------------
0000433A                            ; Oscillating number subroutine
0000433A                            ; ---------------------------------------------------------------------------
0000433A                            
0000433A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000433A                            
0000433A                            
0000433A                            OscillateNumInit:			; XREF: Level
0000433A 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000433E 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004344 7220                       		moveq	#$20,d1
00004346                            
00004346                            Osc_Loop:
00004346 32DA                       		move.w	(a2)+,(a1)+
00004348 51C9 FFFC                  		dbf	d1,Osc_Loop
0000434C 4E75                       		rts	
0000434E                            ; End of function OscillateNumInit
0000434E                            
0000434E                            ; ===========================================================================
0000434E 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004352 0000 0080                  		dc.w 0,	$80
00004356 0000 0080                  		dc.w 0,	$80
0000435A 0000 0080                  		dc.w 0,	$80
0000435E 0000 0080                  		dc.w 0,	$80
00004362 0000 0080                  		dc.w 0,	$80
00004366 0000 0080                  		dc.w 0,	$80
0000436A 0000 0080                  		dc.w 0,	$80
0000436E 0000 0080                  		dc.w 0,	$80
00004372 0000 50F0                  		dc.w 0,	$50F0
00004376 011E 2080                  		dc.w $11E, $2080
0000437A 00B4 3080                  		dc.w $B4, $3080
0000437E 010E 5080                  		dc.w $10E, $5080
00004382 01C2 7080                  		dc.w $1C2, $7080
00004386 0276 0080                  		dc.w $276, $80
0000438A 0000 0080                  		dc.w 0,	$80
0000438E 0000                       		dc.w 0
00004390                            		even
00004390                            
00004390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004390                            
00004390                            
00004390                            OscillateNumDo:				; XREF: Level
00004390 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004396 6400                       		bcc.s	locret_41C4
00004398 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000439C 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000043A2 3619                       		move.w	(a1)+,d3
000043A4 720F                       		moveq	#$F,d1
000043A6                            
000043A6                            loc_4184:
000043A6 341A                       		move.w	(a2)+,d2
000043A8 381A                       		move.w	(a2)+,d4
000043AA 0303                       		btst	d1,d3
000043AC 6600                       		bne.s	loc_41A4
000043AE 3029 0002                  		move.w	2(a1),d0
000043B2 D042                       		add.w	d2,d0
000043B4 3340 0002                  		move.w	d0,2(a1)
000043B8 D151                       		add.w	d0,0(a1)
000043BA B811                       		cmp.b	0(a1),d4
000043BC 6200                       		bhi.s	loc_41BA
000043BE 03C3                       		bset	d1,d3
000043C0 6000                       		bra.s	loc_41BA
000043C2                            ; ===========================================================================
000043C2                            
000043C2                            loc_41A4:				; XREF: OscillateNumDo
000043C2 3029 0002                  		move.w	2(a1),d0
000043C6 9042                       		sub.w	d2,d0
000043C8 3340 0002                  		move.w	d0,2(a1)
000043CC D151                       		add.w	d0,0(a1)
000043CE B811                       		cmp.b	0(a1),d4
000043D0 6300                       		bls.s	loc_41BA
000043D2 0383                       		bclr	d1,d3
000043D4                            
000043D4                            loc_41BA:
000043D4 5849                       		addq.w	#4,a1
000043D6 51C9 FFCE                  		dbf	d1,loc_4184
000043DA 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000043DE                            
000043DE                            locret_41C4:
000043DE 4E75                       		rts	
000043E0                            ; End of function OscillateNumDo
000043E0                            
000043E0                            ; ===========================================================================
000043E0 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000043E4 0002 0018                  		dc.w 2,	$18
000043E8 0002 0020                  		dc.w 2,	$20
000043EC 0002 0030                  		dc.w 2,	$30
000043F0 0004 0020                  		dc.w 4,	$20
000043F4 0008 0008                  		dc.w 8,	8
000043F8 0008 0040                  		dc.w 8,	$40
000043FC 0004 0040                  		dc.w 4,	$40
00004400 0002 0050                  		dc.w 2,	$50
00004404 0002 0050                  		dc.w 2,	$50
00004408 0002 0020                  		dc.w 2,	$20
0000440C 0003 0030                  		dc.w 3,	$30
00004410 0005 0050                  		dc.w 5,	$50
00004414 0007 0070                  		dc.w 7,	$70
00004418 0002 0010                  		dc.w 2,	$10
0000441C 0002 0010                  		dc.w 2,	$10
00004420                            		even
00004420                            
00004420                            ; ---------------------------------------------------------------------------
00004420                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004420                            ; ---------------------------------------------------------------------------
00004420                            
00004420                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004420                            
00004420                            
00004420                            ChangeRingFrame:			; XREF: Level
00004420 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004424 6A00                       		bpl.s	loc_421C
00004426 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000442C 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004430 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004436                            
00004436                            loc_421C:
00004436 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000443A 6A00                       		bpl.s	loc_4232
0000443C 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004442 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004446 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000444C                            
0000444C                            loc_4232:
0000444C 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004450 6A00                       		bpl.s	loc_4250
00004452 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004458 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000445C 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004462 6500                       		bcs.s	loc_4250
00004464 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000446A                            
0000446A                            loc_4250:
0000446A 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000446E 6700                       		beq.s	locret_4272
00004470 7000                       		moveq	#0,d0
00004472 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004476 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
0000447A 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000447E EF58                       		rol.w	#7,d0
00004480 0240 0003                  		andi.w	#3,d0
00004484 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004488 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000448C                            
0000448C                            locret_4272:
0000448C 4E75                       		rts	
0000448E                            ; End of function ChangeRingFrame
0000448E                            
0000448E                            ; ---------------------------------------------------------------------------
0000448E                            ; End-of-act signpost pattern loading subroutine
0000448E                            ; ---------------------------------------------------------------------------
0000448E                            
0000448E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000448E                            
0000448E                            
0000448E                            SignpostArtLoad:			; XREF: Level
0000448E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004492 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004496 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
0000449C 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000449E 3038 F700                  		move.w	($FFFFF700).w,d0
000044A2 3238 F72A                  		move.w	($FFFFF72A).w,d1
000044A6 0441 0100                  		subi.w	#$100,d1
000044AA B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000044AC 6D00                       		blt.s	Signpost_Exit	; if not, branch
000044AE 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000044B2 6700                       		beq.s	Signpost_Exit
000044B4 B278 F728                  		cmp.w	($FFFFF728).w,d1
000044B8 6700                       		beq.s	Signpost_Exit
000044BA 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000044BE 7012                       		moveq	#$12,d0
000044C0 6000 D310                  		bra.w	LoadPLC2	; load signpost	patterns
000044C4                            ; ===========================================================================
000044C4                            
000044C4                            Signpost_Exit:
000044C4 4E75                       		rts	
000044C6                            ; End of function SignpostArtLoad
000044C6                            
000044C6                            ; ===========================================================================
000044C6                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004546                            Demo_MZ:	incbin	demodata\i_mz.bin
00004676                            Demo_SYZ:	incbin	demodata\i_syz.bin
000046F6                            Demo_SS:	incbin	demodata\i_ss.bin
000047F6                            ; ===========================================================================
000047F6                            
000047F6                            ; ---------------------------------------------------------------------------
000047F6                            ; Special Stage
000047F6                            ; ---------------------------------------------------------------------------
000047F6                            
000047F6                            SpecialStage:				; XREF: GameModeArray
000047F6 303C 00CA                  		move.w	#$CA,d0
000047FA 6100 CDC0                  		bsr.w	PlaySound_Special ; play special stage entry sound
000047FE 6100 D99C                  		bsr.w	Pal_MakeFlash
00004802 46FC 2700                  		move	#$2700,sr
00004806 4DF9 00C0 0004             		lea	($C00004).l,a6
0000480C 3CBC 8B03                  		move.w	#$8B03,(a6)
00004810 3CBC 8004                  		move.w	#$8004,(a6)
00004814 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
0000481A 3CBC 9011                  		move.w	#$9011,(a6)
0000481E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004822 0200 00BF                  		andi.b	#$BF,d0
00004826 33C0 00C0 0004             		move.w	d0,($C00004).l
0000482C 6100 CCB6                  		bsr.w	ClearScreen
00004830 46FC 2300                  		move	#$2300,sr
00004834 4BF9 00C0 0004             		lea	($C00004).l,a5
0000483A 3ABC 8F01                  		move.w	#$8F01,(a5)
0000483E 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004844 3ABC 9780                  		move.w	#$9780,(a5)
00004848 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000484E 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004856                            
00004856                            loc_463C:
00004856 3215                       		move.w	(a5),d1
00004858 0801 0001                  		btst	#1,d1
0000485C 66F8                       		bne.s	loc_463C
0000485E 3ABC 8F02                  		move.w	#$8F02,(a5)
00004862 6100 0000                  		bsr.w	SS_BGLoad
00004866 7014                       		moveq	#$14,d0
00004868 6100 D0A2                  		bsr.w	RunPLC_ROM	; load special stage patterns
0000486C 43F8 D000                  		lea	($FFFFD000).w,a1
00004870 7000                       		moveq	#0,d0
00004872 323C 07FF                  		move.w	#$7FF,d1
00004876                            
00004876                            SS_ClrObjRam:
00004876 22C0                       		move.l	d0,(a1)+
00004878 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000487C                            
0000487C 43F8 F700                  		lea	($FFFFF700).w,a1
00004880 7000                       		moveq	#0,d0
00004882 323C 003F                  		move.w	#$3F,d1
00004886                            
00004886                            SS_ClrRam:
00004886 22C0                       		move.l	d0,(a1)+
00004888 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
0000488C                            
0000488C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004890 7000                       		moveq	#0,d0
00004892 323C 0027                  		move.w	#$27,d1
00004896                            
00004896                            SS_ClrRam2:
00004896 22C0                       		move.l	d0,(a1)+
00004898 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000489C                            
0000489C 43F8 AA00                  		lea	($FFFFAA00).w,a1
000048A0 7000                       		moveq	#0,d0
000048A2 323C 007F                  		move.w	#$7F,d1
000048A6                            
000048A6                            SS_ClrNemRam:
000048A6 22C0                       		move.l	d0,(a1)+
000048A8 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000048AC                            
000048AC 4238 F64E                  		clr.b	($FFFFF64E).w
000048B0 4278 FE02                  		clr.w	($FFFFFE02).w
000048B4 700A                       		moveq	#$A,d0
000048B6 6100 DA64                  		bsr.w	PalLoad1	; load special stage pallet
000048BA 4EB9 0000 0000             		jsr	SS_Load
000048C0 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000048C8 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000048D0 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000048D6 6100 0000                  		bsr.w	PalCycle_SS
000048DA 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000048DE 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
000048E4 303C 0089                  		move.w	#$89,d0
000048E8 6100 CCCC                  		bsr.w	PlaySound	; play special stage BG	music
000048EC 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000048F2 43F9 0000 42A2             		lea	(Demo_Index).l,a1
000048F8 7006                       		moveq	#6,d0
000048FA E548                       		lsl.w	#2,d0
000048FC 2271 0000                  		movea.l	(a1,d0.w),a1
00004900 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004906 5338 F792                  		subq.b	#1,($FFFFF792).w
0000490A 4278 FE20                  		clr.w	($FFFFFE20).w
0000490E 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004912 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004918 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000491E 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004922 6700                       		beq.s	SS_NoDebug	; if not, branch
00004924 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000492A 6700                       		beq.s	SS_NoDebug	; if not, branch
0000492C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004932                            
00004932                            SS_NoDebug:
00004932 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004936 0000 0040                  		ori.b	#$40,d0
0000493A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004940 6100 D7AE                  		bsr.w	Pal_MakeWhite
00004944                            
00004944                            ; ---------------------------------------------------------------------------
00004944                            ; Main Special Stage loop
00004944                            ; ---------------------------------------------------------------------------
00004944                            
00004944                            SS_MainLoop:
00004944 6100 CC82                  		bsr.w	PauseGame
00004948 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
0000494E 6100 E278                  		bsr.w	DelayProgram
00004952 6100 F89E                  		bsr.w	MoveSonicInDemo
00004956 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000495C 4EB9 0000 0000             		jsr	ObjectsLoad
00004962 4EB9 0000 0000             		jsr	BuildSprites
00004968 4EB9 0000 0000             		jsr	SS_ShowLayout
0000496E 6100 0000                  		bsr.w	SS_BGAnimate
00004972 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004976 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004978 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000497C 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004980                            
00004980                            SS_ChkEnd:
00004980 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004986 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
0000498A                            
0000498A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000498E 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004992 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004998 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
0000499E 6500                       		bcs.s	SS_End		; if not, branch
000049A0 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
000049A4                            
000049A4                            SS_End:
000049A4 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
000049AA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000049B0 4278 F794                  		clr.w	($FFFFF794).w
000049B4                            
000049B4                            SS_EndLoop:
000049B4 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000049BA 6100 E20C                  		bsr.w	DelayProgram
000049BE 6100 F832                  		bsr.w	MoveSonicInDemo
000049C2 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000049C8 4EB9 0000 0000             		jsr	ObjectsLoad
000049CE 4EB9 0000 0000             		jsr	BuildSprites
000049D4 4EB9 0000 0000             		jsr	SS_ShowLayout
000049DA 6100 0000                  		bsr.w	SS_BGAnimate
000049DE 5378 F794                  		subq.w	#1,($FFFFF794).w
000049E2 6A00                       		bpl.s	loc_47D4
000049E4 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000049EA 6100 D7D0                  		bsr.w	Pal_ToWhite
000049EE                            
000049EE                            loc_47D4:
000049EE 4A78 F614                  		tst.w	($FFFFF614).w
000049F2 66C0                       		bne.s	SS_EndLoop
000049F4                            
000049F4 46FC 2700                  		move	#$2700,sr
000049F8 4DF9 00C0 0004             		lea	($C00004).l,a6
000049FE 3CBC 8230                  		move.w	#$8230,(a6)
00004A02 3CBC 8407                  		move.w	#$8407,(a6)
00004A06 3CBC 9001                  		move.w	#$9001,(a6)
00004A0A 6100 CAD8                  		bsr.w	ClearScreen
00004A0E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004A18 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004A1E 6100 CC40                  		bsr.w	NemDec
00004A22 4EB9 0000 0000             		jsr	Hud_Base
00004A28 46FC 2300                  		move	#$2300,sr
00004A2C 7011                       		moveq	#$11,d0
00004A2E 6100 D908                  		bsr.w	PalLoad2	; load results screen pallet
00004A32 7000                       		moveq	#0,d0
00004A34 6100 CD9C                  		bsr.w	LoadPLC2
00004A38 701B                       		moveq	#$1B,d0
00004A3A 6100 CD64                  		bsr.w	LoadPLC		; load results screen patterns
00004A3E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004A44 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004A4A 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004A4E C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004A52 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004A56 303C 008E                  		move.w	#$8E,d0
00004A5A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004A60 43F8 D000                  		lea	($FFFFD000).w,a1
00004A64 7000                       		moveq	#0,d0
00004A66 323C 07FF                  		move.w	#$7FF,d1
00004A6A                            
00004A6A                            SS_EndClrObjRam:
00004A6A 22C0                       		move.l	d0,(a1)+
00004A6C 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004A70                            
00004A70 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004A76                            
00004A76                            SS_NormalExit:
00004A76 6100 CB50                  		bsr.w	PauseGame
00004A7A 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004A80 6100 E146                  		bsr.w	DelayProgram
00004A84 4EB9 0000 0000             		jsr	ObjectsLoad
00004A8A 4EB9 0000 0000             		jsr	BuildSprites
00004A90 6100 CD7A                  		bsr.w	RunPLC_RAM
00004A94 4A78 FE02                  		tst.w	($FFFFFE02).w
00004A98 67DC                       		beq.s	SS_NormalExit
00004A9A 4AB8 F680                  		tst.l	($FFFFF680).w
00004A9E 66D6                       		bne.s	SS_NormalExit
00004AA0 303C 00CA                  		move.w	#$CA,d0
00004AA4 6100 CB16                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004AA8 6100 D6F2                  		bsr.w	Pal_MakeFlash
00004AAC 4E75                       		rts	
00004AAE                            ; ===========================================================================
00004AAE                            
00004AAE                            SS_ToSegaScreen:
00004AAE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004AB4 4E75                       		rts
00004AB6                            
00004AB6                            ; ---------------------------------------------------------------------------
00004AB6                            ; Special stage	background loading subroutine
00004AB6                            ; ---------------------------------------------------------------------------
00004AB6                            
00004AB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004AB6                            
00004AB6                            
00004AB6                            SS_BGLoad:				; XREF: SpecialStage
00004AB6 43F9 00FF 0000             		lea	($FF0000).l,a1
00004ABC 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004AC2 303C 4051                  		move.w	#$4051,d0
00004AC6 6100 CE76                  		bsr.w	EniDec
00004ACA 263C 5000 0001             		move.l	#$50000001,d3
00004AD0 45F9 00FF 0080             		lea	($FF0080).l,a2
00004AD6 7E06                       		moveq	#6,d7
00004AD8                            
00004AD8                            loc_48BE:
00004AD8 2003                       		move.l	d3,d0
00004ADA 7C03                       		moveq	#3,d6
00004ADC 7800                       		moveq	#0,d4
00004ADE 0C47 0003                  		cmpi.w	#3,d7
00004AE2 6400                       		bcc.s	loc_48CC
00004AE4 7801                       		moveq	#1,d4
00004AE6                            
00004AE6                            loc_48CC:
00004AE6 7A07                       		moveq	#7,d5
00004AE8                            
00004AE8                            loc_48CE:
00004AE8 224A                       		movea.l	a2,a1
00004AEA 0A04 0001                  		eori.b	#1,d4
00004AEE 6600                       		bne.s	loc_48E2
00004AF0 0C47 0006                  		cmpi.w	#6,d7
00004AF4 6600                       		bne.s	loc_48F2
00004AF6 43F9 00FF 0000             		lea	($FF0000).l,a1
00004AFC                            
00004AFC                            loc_48E2:
00004AFC 48E7 F800                  		movem.l	d0-d4,-(sp)
00004B00 7207                       		moveq	#7,d1
00004B02 7407                       		moveq	#7,d2
00004B04 6100 CB3A                  		bsr.w	ShowVDPGraphics
00004B08 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004B0C                            
00004B0C                            loc_48F2:
00004B0C 0680 0010 0000             		addi.l	#$100000,d0
00004B12 51CD FFD4                  		dbf	d5,loc_48CE
00004B16 0680 0380 0000             		addi.l	#$3800000,d0
00004B1C 0A04 0001                  		eori.b	#1,d4
00004B20 51CE FFC4                  		dbf	d6,loc_48CC
00004B24 0683 1000 0000             		addi.l	#$10000000,d3
00004B2A 6A00                       		bpl.s	loc_491C
00004B2C 4843                       		swap	d3
00004B2E 0683 0000 C000             		addi.l	#$C000,d3
00004B34 4843                       		swap	d3
00004B36                            
00004B36                            loc_491C:
00004B36 D4FC 0080                  		adda.w	#$80,a2
00004B3A 51CF FF9C                  		dbf	d7,loc_48BE
00004B3E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004B44 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004B4A 303C 4000                  		move.w	#$4000,d0
00004B4E 6100 CDEE                  		bsr.w	EniDec
00004B52 43F9 00FF 0000             		lea	($FF0000).l,a1
00004B58 203C 4000 0003             		move.l	#$40000003,d0
00004B5E 723F                       		moveq	#$3F,d1
00004B60 741F                       		moveq	#$1F,d2
00004B62 6100 CADC                  		bsr.w	ShowVDPGraphics
00004B66 43F9 00FF 0000             		lea	($FF0000).l,a1
00004B6C 203C 5000 0003             		move.l	#$50000003,d0
00004B72 723F                       		moveq	#$3F,d1
00004B74 743F                       		moveq	#$3F,d2
00004B76 6100 CAC8                  		bsr.w	ShowVDPGraphics
00004B7A 4E75                       		rts	
00004B7C                            ; End of function SS_BGLoad
00004B7C                            
00004B7C                            ; ---------------------------------------------------------------------------
00004B7C                            ; Pallet cycling routine - special stage
00004B7C                            ; ---------------------------------------------------------------------------
00004B7C                            
00004B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B7C                            
00004B7C                            
00004B7C                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004B7C 4A78 F63A                  		tst.w	($FFFFF63A).w
00004B80 6600                       		bne.s	locret_49E6
00004B82 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004B86 6A00                       		bpl.s	locret_49E6
00004B88 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B8E 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004B92 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004B96 0240 001F                  		andi.w	#$1F,d0
00004B9A E548                       		lsl.w	#2,d0
00004B9C 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004BA2 D0C0                       		adda.w	d0,a0
00004BA4 1018                       		move.b	(a0)+,d0
00004BA6 6A00                       		bpl.s	loc_4992
00004BA8 303C 01FF                  		move.w	#$1FF,d0
00004BAC                            
00004BAC                            loc_4992:
00004BAC 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004BB0 7000                       		moveq	#0,d0
00004BB2 1018                       		move.b	(a0)+,d0
00004BB4 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004BB8 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004BBE 43F1 0000                  		lea	(a1,d0.w),a1
00004BC2 303C 8200                  		move.w	#-$7E00,d0
00004BC6 1019                       		move.b	(a1)+,d0
00004BC8 3C80                       		move.w	d0,(a6)
00004BCA 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004BCE 303C 8400                  		move.w	#-$7C00,d0
00004BD2 1018                       		move.b	(a0)+,d0
00004BD4 3C80                       		move.w	d0,(a6)
00004BD6 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004BE0 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004BE8 7000                       		moveq	#0,d0
00004BEA 1018                       		move.b	(a0)+,d0
00004BEC 6B00                       		bmi.s	loc_49E8
00004BEE 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004BF4 D2C0                       		adda.w	d0,a1
00004BF6 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004BFA 24D9                       		move.l	(a1)+,(a2)+
00004BFC 24D9                       		move.l	(a1)+,(a2)+
00004BFE 24D9                       		move.l	(a1)+,(a2)+
00004C00                            
00004C00                            locret_49E6:
00004C00 4E75                       		rts	
00004C02                            ; ===========================================================================
00004C02                            
00004C02                            loc_49E8:				; XREF: PalCycle_SS
00004C02 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004C06 0C40 008A                  		cmpi.w	#$8A,d0
00004C0A 6500                       		bcs.s	loc_49F4
00004C0C 5241                       		addq.w	#1,d1
00004C0E                            
00004C0E                            loc_49F4:
00004C0E C2FC 002A                  		mulu.w	#$2A,d1
00004C12 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004C18 D2C1                       		adda.w	d1,a1
00004C1A 0240 007F                  		andi.w	#$7F,d0
00004C1E 0880 0000                  		bclr	#0,d0
00004C22 6700                       		beq.s	loc_4A18
00004C24 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004C28 24D1                       		move.l	(a1),(a2)+
00004C2A 24E9 0004                  		move.l	4(a1),(a2)+
00004C2E 24E9 0008                  		move.l	8(a1),(a2)+
00004C32                            
00004C32                            loc_4A18:
00004C32 D2FC 000C                  		adda.w	#$C,a1
00004C36 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004C3A 0C40 000A                  		cmpi.w	#$A,d0
00004C3E 6500                       		bcs.s	loc_4A2E
00004C40 0440 000A                  		subi.w	#$A,d0
00004C44 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004C48                            
00004C48                            loc_4A2E:
00004C48 3200                       		move.w	d0,d1
00004C4A D040                       		add.w	d0,d0
00004C4C D041                       		add.w	d1,d0
00004C4E D2C0                       		adda.w	d0,a1
00004C50 24D9                       		move.l	(a1)+,(a2)+
00004C52 34D9                       		move.w	(a1)+,(a2)+
00004C54 4E75                       		rts	
00004C56                            ; End of function PalCycle_SS
00004C56                            
00004C56                            ; ===========================================================================
00004C56 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004C66                            					; XREF: PalCycle_SS
00004C66 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004C76 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004C86 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004C96 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004CA6 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004CB6 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004CC6 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004CD6                            		even
00004CD6 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004CE4                            					; XREF: PalCycle_SS
00004CE4                            		even
00004CE4                            
00004CE4                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004D2C                            		even
00004D2C                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004DFE                            		even
00004DFE                            
00004DFE                            ; ---------------------------------------------------------------------------
00004DFE                            ; Subroutine to	make the special stage background animated
00004DFE                            ; ---------------------------------------------------------------------------
00004DFE                            
00004DFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DFE                            
00004DFE                            
00004DFE                            SS_BGAnimate:				; XREF: SpecialStage
00004DFE 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004E02 6600                       		bne.s	loc_4BF6
00004E04 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004E0A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004E10                            
00004E10                            loc_4BF6:
00004E10 0C40 0008                  		cmpi.w	#8,d0
00004E14 6400                       		bcc.s	loc_4C4E
00004E16 0C40 0006                  		cmpi.w	#6,d0
00004E1A 6600                       		bne.s	loc_4C10
00004E1C 5278 F718                  		addq.w	#1,($FFFFF718).w
00004E20 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004E24 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004E2A                            
00004E2A                            loc_4C10:
00004E2A 7000                       		moveq	#0,d0
00004E2C 3038 F708                  		move.w	($FFFFF708).w,d0
00004E30 4440                       		neg.w	d0
00004E32 4840                       		swap	d0
00004E34 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004E3A 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004E3E 7609                       		moveq	#9,d3
00004E40                            
00004E40                            loc_4C26:
00004E40 302B 0002                  		move.w	2(a3),d0
00004E44 6100 DDB4                  		bsr.w	CalcSine
00004E48 7400                       		moveq	#0,d2
00004E4A 1419                       		move.b	(a1)+,d2
00004E4C C1C2                       		muls.w	d2,d0
00004E4E E080                       		asr.l	#8,d0
00004E50 36C0                       		move.w	d0,(a3)+
00004E52 1419                       		move.b	(a1)+,d2
00004E54 4882                       		ext.w	d2
00004E56 D55B                       		add.w	d2,(a3)+
00004E58 51CB FFE6                  		dbf	d3,loc_4C26
00004E5C 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004E60 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004E66 6000                       		bra.s	loc_4C7E
00004E68                            ; ===========================================================================
00004E68                            
00004E68                            loc_4C4E:				; XREF: SS_BGAnimate
00004E68 0C40 000C                  		cmpi.w	#$C,d0
00004E6C 6600                       		bne.s	loc_4C74
00004E6E 5378 F718                  		subq.w	#1,($FFFFF718).w
00004E72 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004E76 243C 0001 8000             		move.l	#$18000,d2
00004E7C 7206                       		moveq	#6,d1
00004E7E                            
00004E7E                            loc_4C64:
00004E7E 2013                       		move.l	(a3),d0
00004E80 9082                       		sub.l	d2,d0
00004E82 26C0                       		move.l	d0,(a3)+
00004E84 0482 0000 2000             		subi.l	#$2000,d2
00004E8A 51C9 FFF2                  		dbf	d1,loc_4C64
00004E8E                            
00004E8E                            loc_4C74:
00004E8E 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004E92 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004E98                            
00004E98                            loc_4C7E:
00004E98 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004E9C 3038 F718                  		move.w	($FFFFF718).w,d0
00004EA0 4440                       		neg.w	d0
00004EA2 4840                       		swap	d0
00004EA4 7600                       		moveq	#0,d3
00004EA6 161A                       		move.b	(a2)+,d3
00004EA8 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004EAC 4442                       		neg.w	d2
00004EAE 0242 00FF                  		andi.w	#$FF,d2
00004EB2 E54A                       		lsl.w	#2,d2
00004EB4                            
00004EB4                            loc_4C9A:
00004EB4 301B                       		move.w	(a3)+,d0
00004EB6 544B                       		addq.w	#2,a3
00004EB8 7200                       		moveq	#0,d1
00004EBA 121A                       		move.b	(a2)+,d1
00004EBC 5341                       		subq.w	#1,d1
00004EBE                            
00004EBE                            loc_4CA4:
00004EBE 2380 2000                  		move.l	d0,(a1,d2.w)
00004EC2 5842                       		addq.w	#4,d2
00004EC4 0242 03FC                  		andi.w	#$3FC,d2
00004EC8 51C9 FFF4                  		dbf	d1,loc_4CA4
00004ECC 51CB FFE6                  		dbf	d3,loc_4C9A
00004ED0 4E75                       		rts	
00004ED2                            ; End of function SS_BGAnimate
00004ED2                            
00004ED2                            ; ===========================================================================
00004ED2 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004EDE                            		even
00004EDE 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004EE6                            		even
00004EE6 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004EFA                            		even
00004EFA                            					; XREF: SS_BGAnimate
00004EFA                            ; ===========================================================================
00004EFA                            
00004EFA                            ; ---------------------------------------------------------------------------
00004EFA                            ; Continue screen
00004EFA                            ; ---------------------------------------------------------------------------
00004EFA                            
00004EFA                            ContinueScreen:				; XREF: GameModeArray
00004EFA 6100 D176                  		bsr.w	Pal_FadeFrom
00004EFE 46FC 2700                  		move	#$2700,sr
00004F02 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004F06 0200 00BF                  		andi.b	#$BF,d0
00004F0A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004F10 4DF9 00C0 0004             		lea	($C00004).l,a6
00004F16 3CBC 8004                  		move.w	#$8004,(a6)
00004F1A 3CBC 8700                  		move.w	#$8700,(a6)
00004F1E 6100 C5C4                  		bsr.w	ClearScreen
00004F22 43F8 D000                  		lea	($FFFFD000).w,a1
00004F26 7000                       		moveq	#0,d0
00004F28 323C 07FF                  		move.w	#$7FF,d1
00004F2C                            
00004F2C                            Cont_ClrObjRam:
00004F2C 22C0                       		move.l	d0,(a1)+
00004F2E 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004F32                            
00004F32 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004F3C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004F42 6100 C71C                  		bsr.w	NemDec
00004F46 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004F50 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004F56 6100 C708                  		bsr.w	NemDec
00004F5A 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004F64 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004F6A 6100 C6F4                  		bsr.w	NemDec
00004F6E 720A                       		moveq	#10,d1
00004F70 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004F76 7012                       		moveq	#$12,d0
00004F78 6100 D3A2                  		bsr.w	PalLoad1	; load continue	screen pallet
00004F7C 103C 0090                  		move.b	#$90,d0
00004F80 6100 C634                  		bsr.w	PlaySound	; play continue	music
00004F84 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004F8A 42B8 F700                  		clr.l	($FFFFF700).w
00004F8E 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004F96 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004F9C 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004FA2 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004FA8 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004FAE 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004FB4 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004FBA 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004FC0 4EB9 0000 0000             		jsr	ObjectsLoad
00004FC6 4EB9 0000 0000             		jsr	BuildSprites
00004FCC 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004FD0 0000 0040                  		ori.b	#$40,d0
00004FD4 33C0 00C0 0004             		move.w	d0,($C00004).l
00004FDA 6100 CFF0                  		bsr.w	Pal_FadeTo
00004FDE                            
00004FDE                            ; ---------------------------------------------------------------------------
00004FDE                            ; Continue screen main loop
00004FDE                            ; ---------------------------------------------------------------------------
00004FDE                            
00004FDE                            Cont_MainLoop:
00004FDE 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004FE4 6100 DBE2                  		bsr.w	DelayProgram
00004FE8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004FEE 6400                       		bcc.s	loc_4DF2
00004FF0 46FC 2700                  		move	#$2700,sr
00004FF4 3238 F614                  		move.w	($FFFFF614).w,d1
00004FF8 82FC 003C                  		divu.w	#$3C,d1
00004FFC 0281 0000 000F             		andi.l	#$F,d1
00005002 4EB9 0000 0000             		jsr	ContScrCounter
00005008 46FC 2300                  		move	#$2300,sr
0000500C                            
0000500C                            loc_4DF2:
0000500C 4EB9 0000 0000             		jsr	ObjectsLoad
00005012 4EB9 0000 0000             		jsr	BuildSprites
00005018 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000501E 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005020 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005026 64B6                       		bcc.s	Cont_MainLoop
00005028 4A78 F614                  		tst.w	($FFFFF614).w
0000502C 6600 FFB0                  		bne.w	Cont_MainLoop
00005030 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005036 4E75                       		rts	
00005038                            ; ===========================================================================
00005038                            
00005038                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005038 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000503E 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005044 7000                       		moveq	#0,d0
00005046 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000504A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000504E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005052 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005056 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000505A 4E75                       		rts	
0000505C                            ; ===========================================================================
0000505C                            
0000505C                            ; ---------------------------------------------------------------------------
0000505C                            ; Object 80 - Continue screen elements
0000505C                            ; ---------------------------------------------------------------------------
0000505C                            
0000505C                            Obj80:					; XREF: Obj_Index
0000505C 7000                       		moveq	#0,d0
0000505E 1028 0024                  		move.b	$24(a0),d0
00005062 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005066 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000506A                            ; ===========================================================================
0000506A 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000506C 0000                       		dc.w Obj80_Display-Obj80_Index
0000506E 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005070 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005072                            ; ===========================================================================
00005072                            
00005072                            Obj80_Main:				; XREF: Obj80_Index
00005072 5428 0024                  		addq.b	#2,$24(a0)
00005076 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000507E 317C 8500 0002             		move.w	#$8500,2(a0)
00005084 117C 0000 0001             		move.b	#0,1(a0)
0000508A 117C 003C 0019             		move.b	#$3C,$19(a0)
00005090 317C 0120 0008             		move.w	#$120,8(a0)
00005096 317C 00C0 000A             		move.w	#$C0,$A(a0)
0000509C 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000050A2                            
000050A2                            Obj80_Display:				; XREF: Obj80_Index
000050A2 4EF9 0000 0000             		jmp	DisplaySprite
000050A8                            ; ===========================================================================
000050A8                            Obj80_MiniSonicPos:
000050A8 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000050BA 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000050C6                            ; ===========================================================================
000050C6                            
000050C6                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000050C6 2248                       		movea.l	a0,a1
000050C8 45F9 0000 50A8             		lea	(Obj80_MiniSonicPos).l,a2
000050CE 7200                       		moveq	#0,d1
000050D0 1238 FE18                  		move.b	($FFFFFE18).w,d1
000050D4 5501                       		subq.b	#2,d1
000050D6 6400                       		bcc.s	loc_4EC4
000050D8 4EF9 0000 0000             		jmp	DeleteObject
000050DE                            ; ===========================================================================
000050DE                            
000050DE                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000050DE 7601                       		moveq	#1,d3
000050E0 0C01 000E                  		cmpi.b	#$E,d1
000050E4 6500                       		bcs.s	loc_4ED0
000050E6 7600                       		moveq	#0,d3
000050E8 720E                       		moveq	#$E,d1
000050EA                            
000050EA                            loc_4ED0:
000050EA 1401                       		move.b	d1,d2
000050EC 0202 0001                  		andi.b	#1,d2
000050F0                            
000050F0                            Obj80_MiniSonLoop:
000050F0 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000050F4 335A 0008                  		move.w	(a2)+,8(a1)
000050F8 4A02                       		tst.b	d2
000050FA 6700                       		beq.s	loc_4EEA
000050FC 0469 000A 0008             		subi.w	#$A,8(a1)
00005102                            
00005102                            loc_4EEA:
00005102 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005108 137C 0006 001A             		move.b	#6,$1A(a1)
0000510E 137C 0006 0024             		move.b	#6,$24(a1)
00005114 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
0000511C 337C 8551 0002             		move.w	#$8551,2(a1)
00005122 137C 0000 0001             		move.b	#0,1(a1)
00005128 43E9 0040                  		lea	$40(a1),a1
0000512C 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005130 43E9 FFC0                  		lea	-$40(a1),a1
00005134 1343 0028                  		move.b	d3,$28(a1)
00005138                            
00005138                            Obj80_ChkType:				; XREF: Obj80_Index
00005138 4A28 0028                  		tst.b	$28(a0)
0000513C 6700                       		beq.s	loc_4F40
0000513E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005144 6500                       		bcs.s	loc_4F40
00005146 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000514A 0200 0001                  		andi.b	#1,d0
0000514E 6600                       		bne.s	loc_4F40
00005150 4A78 D010                  		tst.w	($FFFFD010).w
00005154 6600                       		bne.s	Obj80_Delete
00005156 4E75                       		rts	
00005158                            ; ===========================================================================
00005158                            
00005158                            loc_4F40:				; XREF: Obj80_ChkType
00005158 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000515C 0200 000F                  		andi.b	#$F,d0
00005160 6600                       		bne.s	Obj80_Display2
00005162 0868 0000 001A             		bchg	#0,$1A(a0)
00005168                            
00005168                            Obj80_Display2:
00005168 4EF9 0000 0000             		jmp	DisplaySprite
0000516E                            ; ===========================================================================
0000516E                            
0000516E                            Obj80_Delete:				; XREF: Obj80_ChkType
0000516E 4EF9 0000 0000             		jmp	DeleteObject
00005174                            ; ===========================================================================
00005174                            
00005174                            ; ---------------------------------------------------------------------------
00005174                            ; Object 81 - Sonic on the continue screen
00005174                            ; ---------------------------------------------------------------------------
00005174                            
00005174                            Obj81:					; XREF: Obj_Index
00005174 7000                       		moveq	#0,d0
00005176 1028 0024                  		move.b	$24(a0),d0
0000517A 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
0000517E 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005182 4EF9 0000 0000             		jmp	DisplaySprite
00005188                            ; ===========================================================================
00005188 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000518A 0000                       		dc.w Obj81_ChkLand-Obj81_Index
0000518C 0000                       		dc.w Obj81_Animate-Obj81_Index
0000518E 0000                       		dc.w Obj81_Run-Obj81_Index
00005190                            ; ===========================================================================
00005190                            
00005190                            Obj81_Main:				; XREF: Obj81_Index
00005190 5428 0024                  		addq.b	#2,$24(a0)
00005194 317C 00A0 0008             		move.w	#$A0,8(a0)
0000519A 317C 00C0 000C             		move.w	#$C0,$C(a0)
000051A0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000051A8 317C 0780 0002             		move.w	#$780,2(a0)
000051AE 117C 0004 0001             		move.b	#4,1(a0)
000051B4 117C 0002 0018             		move.b	#2,$18(a0)
000051BA 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000051C0 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000051C6                            
000051C6                            Obj81_ChkLand:				; XREF: Obj81_Index
000051C6 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000051CC 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000051CE 5428 0024                  		addq.b	#2,$24(a0)
000051D2 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000051D6 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000051DE 317C 8500 0002             		move.w	#$8500,2(a0)
000051E4 117C 0000 001C             		move.b	#0,$1C(a0)
000051EA 6000                       		bra.s	Obj81_Animate
000051EC                            ; ===========================================================================
000051EC                            
000051EC                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000051EC 4EB9 0000 0000             		jsr	SpeedToPos
000051F2 4EB9 0000 0000             		jsr	Sonic_Animate
000051F8 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000051FE                            ; ===========================================================================
000051FE                            
000051FE                            Obj81_Animate:				; XREF: Obj81_Index
000051FE 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005202 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005204 43F9 0000 0000             		lea	(Ani_obj81).l,a1
0000520A 4EF9 0000 0000             		jmp	AnimateSprite
00005210                            ; ===========================================================================
00005210                            
00005210                            Obj81_GetUp:				; XREF: Obj81_Animate
00005210 5428 0024                  		addq.b	#2,$24(a0)
00005214 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000521C 317C 0780 0002             		move.w	#$780,2(a0)
00005222 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005228 4268 0014                  		clr.w	$14(a0)
0000522C 5168 000C                  		subq.w	#8,$C(a0)
00005230 103C 00E0                  		move.b	#$E0,d0
00005234 6100 C386                  		bsr.w	PlaySound_Special ; fade out music
00005238                            
00005238                            Obj81_Run:				; XREF: Obj81_Index
00005238 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000523E 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005240 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005246 6000                       		bra.s	Obj81_ShowRun
00005248                            ; ===========================================================================
00005248                            
00005248                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005248 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000524E                            
0000524E                            Obj81_ShowRun:				; XREF: Obj81_Run
0000524E 4EB9 0000 0000             		jsr	SpeedToPos
00005254 4EB9 0000 0000             		jsr	Sonic_Animate
0000525A 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005260                            ; ===========================================================================
00005260                            Ani_obj81:
00005260                            	include "_anim\obj81.asm"
00005260                            ; ---------------------------------------------------------------------------
00005260                            ; Animation script - Sonic on the continue screen
00005260                            ; ---------------------------------------------------------------------------
00005260 0000                       		dc.w byte_504A-Ani_obj81
00005262 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000526E 00                         		even
0000526E 00                         		even
0000526E                            
0000526E                            ; ---------------------------------------------------------------------------
0000526E                            ; Sprite mappings - Continue screen
0000526E                            ; ---------------------------------------------------------------------------
0000526E                            Map_obj80:
0000526E                            	include "_maps\obj80.asm"
0000526E                            ; ---------------------------------------------------------------------------
0000526E                            ; Sprite mappings - Continue screen
0000526E                            ; ---------------------------------------------------------------------------
0000526E 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005272 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005276 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
0000527A 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000527E 0B                         byte_5066:	dc.b $B
0000527F F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005284 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005289 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000528E F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005293 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005298 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
0000529D F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000052A2 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000052A7 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000052AC 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000052B1 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000052B6 03                         byte_509E:	dc.b 3
000052B7 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000052BC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000052C1 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000052C6 03                         byte_50AE:	dc.b 3
000052C7 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000052CC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000052D1 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000052D6 03                         byte_50BE:	dc.b 3
000052D7 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000052DC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000052E1 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000052E6 02                         byte_50CE:	dc.b 2
000052E7 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000052EC 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000052F1 01                         byte_50D9:	dc.b 1
000052F2 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000052F7 01                         byte_50DF:	dc.b 1
000052F8 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000052FE 00                         		even
000052FE 00                         		even
000052FE                            
000052FE                            ; ===========================================================================
000052FE                            ; ---------------------------------------------------------------------------
000052FE                            ; Ending sequence in Green Hill	Zone
000052FE                            ; ---------------------------------------------------------------------------
000052FE                            
000052FE                            EndingSequence:				; XREF: GameModeArray
000052FE 103C 00E4                  		move.b	#$E4,d0
00005302 6100 C2B8                  		bsr.w	PlaySound_Special ; stop music
00005306 6100 CD6A                  		bsr.w	Pal_FadeFrom
0000530A 43F8 D000                  		lea	($FFFFD000).w,a1
0000530E 7000                       		moveq	#0,d0
00005310 323C 07FF                  		move.w	#$7FF,d1
00005314                            
00005314                            End_ClrObjRam:
00005314 22C0                       		move.l	d0,(a1)+
00005316 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000531A                            
0000531A 43F8 F628                  		lea	($FFFFF628).w,a1
0000531E 7000                       		moveq	#0,d0
00005320 323C 0015                  		move.w	#$15,d1
00005324                            
00005324                            End_ClrRam:
00005324 22C0                       		move.l	d0,(a1)+
00005326 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
0000532A                            
0000532A 43F8 F700                  		lea	($FFFFF700).w,a1
0000532E 7000                       		moveq	#0,d0
00005330 323C 003F                  		move.w	#$3F,d1
00005334                            
00005334                            End_ClrRam2:
00005334 22C0                       		move.l	d0,(a1)+
00005336 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000533A                            
0000533A 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000533E 7000                       		moveq	#0,d0
00005340 323C 0047                  		move.w	#$47,d1
00005344                            
00005344                            End_ClrRam3:
00005344 22C0                       		move.l	d0,(a1)+
00005346 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000534A                            
0000534A 46FC 2700                  		move	#$2700,sr
0000534E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005352 0200 00BF                  		andi.b	#$BF,d0
00005356 33C0 00C0 0004             		move.w	d0,($C00004).l
0000535C 6100 C186                  		bsr.w	ClearScreen
00005360 4DF9 00C0 0004             		lea	($C00004).l,a6
00005366 3CBC 8B03                  		move.w	#$8B03,(a6)
0000536A 3CBC 8230                  		move.w	#$8230,(a6)
0000536E 3CBC 8407                  		move.w	#$8407,(a6)
00005372 3CBC 857C                  		move.w	#$857C,(a6)
00005376 3CBC 9001                  		move.w	#$9001,(a6)
0000537A 3CBC 8004                  		move.w	#$8004,(a6)
0000537E 3CBC 8720                  		move.w	#$8720,(a6)
00005382 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005388 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000538C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005392 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005398 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000539E 6700                       		beq.s	End_LoadData	; if yes, branch
000053A0 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000053A6                            
000053A6                            End_LoadData:
000053A6 701C                       		moveq	#$1C,d0
000053A8 6100 C562                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000053AC 4EB9 0000 0000             		jsr	Hud_Base
000053B2 6100 0000                  		bsr.w	LevelSizeLoad
000053B6 6100 0000                  		bsr.w	DeformBgLayer
000053BA 08F8 0002 F754             		bset	#2,($FFFFF754).w
000053C0 6100 0000                  		bsr.w	MainLoadBlockLoad
000053C4 6100 0000                  		bsr.w	LoadTilesFromStart
000053C8 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000053D0 46FC 2300                  		move	#$2300,sr
000053D4 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000053DA 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000053DE 6100 C6DC                  		bsr.w	KosDec
000053E2 7003                       		moveq	#3,d0
000053E4 6100 CF36                  		bsr.w	PalLoad1	; load Sonic's pallet
000053E8 303C 008B                  		move.w	#$8B,d0
000053EC 6100 C1C8                  		bsr.w	PlaySound	; play ending sequence music
000053F0 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000053F6 6700                       		beq.s	End_LoadSonic	; if not, branch
000053F8 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000053FE                            
000053FE                            End_LoadSonic:
000053FE 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005404 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
0000540A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005410 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005416 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
0000541C 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005422 4EB9 0000 0000             		jsr	ObjPosLoad
00005428 4EB9 0000 0000             		jsr	ObjectsLoad
0000542E 4EB9 0000 0000             		jsr	BuildSprites
00005434 7000                       		moveq	#0,d0
00005436 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000543A 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000543E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005442 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005446 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
0000544A 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000544E 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005452 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005456 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000545A 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000545E 6100 EEDA                  		bsr.w	OscillateNumInit
00005462 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005468 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000546E 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005474 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000547A 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005480 6100 D746                  		bsr.w	DelayProgram
00005484 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005488 0000 0040                  		ori.b	#$40,d0
0000548C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005492 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005498 6100 CB32                  		bsr.w	Pal_FadeTo
0000549C                            
0000549C                            ; ---------------------------------------------------------------------------
0000549C                            ; Main ending sequence loop
0000549C                            ; ---------------------------------------------------------------------------
0000549C                            
0000549C                            End_MainLoop:
0000549C 6100 C12A                  		bsr.w	PauseGame
000054A0 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000054A6 6100 D720                  		bsr.w	DelayProgram
000054AA 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000054AE 6100 0000                  		bsr.w	End_MoveSonic
000054B2 4EB9 0000 0000             		jsr	ObjectsLoad
000054B8 6100 0000                  		bsr.w	DeformBgLayer
000054BC 4EB9 0000 0000             		jsr	BuildSprites
000054C2 4EB9 0000 0000             		jsr	ObjPosLoad
000054C8 6100 C692                  		bsr.w	PalCycle_Load
000054CC 6100 EEC2                  		bsr.w	OscillateNumDo
000054D0 6100 EF4E                  		bsr.w	ChangeRingFrame
000054D4 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000054DA 6700                       		beq.s	loc_52DA	; if yes, branch
000054DC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000054E2 103C 0091                  		move.b	#$91,d0
000054E6 6100 C0D4                  		bsr.w	PlaySound_Special ; play credits music
000054EA 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000054F0 4E75                       		rts	
000054F2                            ; ===========================================================================
000054F2                            
000054F2                            loc_52DA:
000054F2 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000054F6 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000054FA                            
000054FA 4278 FE02                  		clr.w	($FFFFFE02).w
000054FE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005504 4278 F794                  		clr.w	($FFFFF794).w
00005508                            
00005508                            End_AllEmlds:				; XREF: loc_5334
00005508 6100 C0BE                  		bsr.w	PauseGame
0000550C 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005512 6100 D6B4                  		bsr.w	DelayProgram
00005516 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000551A 6100 0000                  		bsr.w	End_MoveSonic
0000551E 4EB9 0000 0000             		jsr	ObjectsLoad
00005524 6100 0000                  		bsr.w	DeformBgLayer
00005528 4EB9 0000 0000             		jsr	BuildSprites
0000552E 4EB9 0000 0000             		jsr	ObjPosLoad
00005534 6100 EE5A                  		bsr.w	OscillateNumDo
00005538 6100 EEE6                  		bsr.w	ChangeRingFrame
0000553C 5378 F794                  		subq.w	#1,($FFFFF794).w
00005540 6A00                       		bpl.s	loc_5334
00005542 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005548 6100 CC72                  		bsr.w	Pal_ToWhite
0000554C                            
0000554C                            loc_5334:
0000554C 4A78 FE02                  		tst.w	($FFFFFE02).w
00005550 6700 FFB6                  		beq.w	End_AllEmlds
00005554 4278 FE02                  		clr.w	($FFFFFE02).w
00005558 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000555E 4BF9 00C0 0004             		lea	($C00004).l,a5
00005564 4DF9 00C0 0000             		lea	($C00000).l,a6
0000556A 47F8 F700                  		lea	($FFFFF700).w,a3
0000556E 49F8 A400                  		lea	($FFFFA400).w,a4
00005572 343C 4000                  		move.w	#$4000,d2
00005576 6100 0000                  		bsr.w	LoadTilesFromStart2
0000557A 7013                       		moveq	#$13,d0
0000557C 6100 CD9E                  		bsr.w	PalLoad1	; load ending pallet
00005580 6100 CB6E                  		bsr.w	Pal_MakeWhite
00005584 6000 FF16                  		bra.w	End_MainLoop
00005588                            
00005588                            ; ---------------------------------------------------------------------------
00005588                            ; Subroutine controlling Sonic on the ending sequence
00005588                            ; ---------------------------------------------------------------------------
00005588                            
00005588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005588                            
00005588                            
00005588                            End_MoveSonic:				; XREF: End_MainLoop
00005588 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000558C 6600                       		bne.s	End_MoveSonic2
0000558E 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005594 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005596 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000559A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000055A0 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000055A6 4E75                       		rts	
000055A8                            ; ===========================================================================
000055A8                            
000055A8                            End_MoveSonic2:				; XREF: End_MoveSonic
000055A8 5500                       		subq.b	#2,d0
000055AA 6600                       		bne.s	End_MoveSonic3
000055AC 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000055B2 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000055B4 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000055B8 7000                       		moveq	#0,d0
000055BA 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000055BE 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000055C2 31C0 D014                  		move.w	d0,($FFFFD014).w
000055C6 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000055CC 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000055D2 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000055D8 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000055DE 4E75                       		rts	
000055E0                            ; ===========================================================================
000055E0                            
000055E0                            End_MoveSonic3:				; XREF: End_MoveSonic
000055E0 5500                       		subq.b	#2,d0
000055E2 6600                       		bne.s	End_MoveSonExit
000055E4 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000055E8 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000055EE 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000055F4 4278 D024                  		clr.w	($FFFFD024).w
000055F8                            
000055F8                            End_MoveSonExit:
000055F8 4E75                       		rts	
000055FA                            ; End of function End_MoveSonic
000055FA                            
000055FA                            ; ===========================================================================
000055FA                            ; ---------------------------------------------------------------------------
000055FA                            ; Object 87 - Sonic on ending sequence
000055FA                            ; ---------------------------------------------------------------------------
000055FA                            
000055FA                            Obj87:					; XREF: Obj_Index
000055FA 7000                       		moveq	#0,d0
000055FC 1028 0025                  		move.b	$25(a0),d0
00005600 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005604 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005608 4EF9 0000 0000             		jmp	DisplaySprite
0000560E                            ; ===========================================================================
0000560E 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005612 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005616 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
0000561A 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
0000561E 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005622                            ; ===========================================================================
00005622                            
00005622                            Obj87_Main:				; XREF: Obj87_Index
00005622 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005628 6700                       		beq.s	Obj87_Main2	; if yes, branch
0000562A 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005630 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005636 4E75                       		rts	
00005638                            ; ===========================================================================
00005638                            
00005638                            Obj87_Main2:				; XREF: Obj87_Main
00005638 5428 0025                  		addq.b	#2,$25(a0)
0000563C 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005644 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000564A 117C 0004 0001             		move.b	#4,1(a0)
00005650 4228 0022                  		clr.b	$22(a0)
00005654 117C 0002 0018             		move.b	#2,$18(a0)
0000565A 117C 0000 001A             		move.b	#0,$1A(a0)
00005660 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005666                            
00005666                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005666 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000566A 6600                       		bne.s	Obj87_Wait
0000566C 5428 0025                  		addq.b	#2,$25(a0)
00005670 317C 0001 001C             		move.w	#1,$1C(a0)
00005676 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
0000567C                            
0000567C                            Obj87_Wait:
0000567C 4E75                       		rts	
0000567E                            ; ===========================================================================
0000567E                            
0000567E                            Obj87_LookUp:				; XREF: Obj87_Index
0000567E 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005686 6600                       		bne.s	locret_5480
00005688 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000568E 317C 005A 0030             		move.w	#$5A,$30(a0)
00005694 5428 0025                  		addq.b	#2,$25(a0)
00005698                            
00005698                            locret_5480:
00005698 4E75                       		rts	
0000569A                            ; ===========================================================================
0000569A                            
0000569A                            Obj87_ClrObjRam:			; XREF: Obj87_Index
0000569A 5368 0030                  		subq.w	#1,$30(a0)
0000569E 6600                       		bne.s	Obj87_Wait2
000056A0 43F8 D400                  		lea	($FFFFD400).w,a1
000056A4 323C 00FF                  		move.w	#$FF,d1
000056A8                            
000056A8                            Obj87_ClrLoop:
000056A8 4299                       		clr.l	(a1)+
000056AA 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000056AE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000056B4 5428 0025                  		addq.b	#2,$25(a0)
000056B8 117C 0001 001C             		move.b	#1,$1C(a0)
000056BE 317C 003C 0030             		move.w	#$3C,$30(a0)
000056C4                            
000056C4                            Obj87_Wait2:
000056C4 4E75                       		rts	
000056C6                            ; ===========================================================================
000056C6                            
000056C6                            Obj87_MakeLogo:				; XREF: Obj87_Index
000056C6 5368 0030                  		subq.w	#1,$30(a0)
000056CA 6600                       		bne.s	Obj87_Wait3
000056CC 5428 0025                  		addq.b	#2,$25(a0)
000056D0 317C 00B4 0030             		move.w	#$B4,$30(a0)
000056D6 117C 0002 001C             		move.b	#2,$1C(a0)
000056DC 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000056E2                            
000056E2                            Obj87_Wait3:
000056E2 4E75                       		rts	
000056E4                            ; ===========================================================================
000056E4                            
000056E4                            Obj87_Animate:				; XREF: Obj87_Index
000056E4 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000056EA 4EF9 0000 0000             		jmp	AnimateSprite
000056F0                            ; ===========================================================================
000056F0                            
000056F0                            Obj87_Leap:				; XREF: Obj87_Index
000056F0 5368 0030                  		subq.w	#1,$30(a0)
000056F4 6600                       		bne.s	Obj87_Wait4
000056F6 5428 0025                  		addq.b	#2,$25(a0)
000056FA 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005702 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005708 117C 0004 0001             		move.b	#4,1(a0)
0000570E 4228 0022                  		clr.b	$22(a0)
00005712 117C 0002 0018             		move.b	#2,$18(a0)
00005718 117C 0005 001A             		move.b	#5,$1A(a0)
0000571E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005724 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000572A 60B8                       		bra.s	Obj87_Animate
0000572C                            ; ===========================================================================
0000572C                            
0000572C                            Obj87_Wait4:				; XREF: Obj87_Leap
0000572C 4E75                       		rts	
0000572E                            ; ===========================================================================
0000572E                            Ani_obj87:
0000572E                            	include "_anim\obj87.asm"
0000572E                            ; ---------------------------------------------------------------------------
0000572E                            ; Animation script - Sonic on the ending sequence
0000572E                            ; ---------------------------------------------------------------------------
0000572E 0000                       		dc.w byte_551C-Ani_obj87
00005730 0000                       		dc.w byte_552A-Ani_obj87
00005732 0000                       		dc.w byte_5534-Ani_obj87
00005734 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005742 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000574C 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005754                            		even
00005754                            		even
00005754                            
00005754                            ; ===========================================================================
00005754                            ; ---------------------------------------------------------------------------
00005754                            ; Object 88 - chaos emeralds on	the ending sequence
00005754                            ; ---------------------------------------------------------------------------
00005754                            
00005754                            Obj88:					; XREF: Obj_Index
00005754 7000                       		moveq	#0,d0
00005756 1028 0024                  		move.b	$24(a0),d0
0000575A 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
0000575E 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005762 4EF9 0000 0000             		jmp	DisplaySprite
00005768                            ; ===========================================================================
00005768 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
0000576A 0000                       		dc.w Obj88_Move-Obj88_Index
0000576C                            ; ===========================================================================
0000576C                            
0000576C                            Obj88_Main:				; XREF: Obj88_Index
0000576C 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005772 6700                       		beq.s	Obj88_Main2
00005774 588F                       		addq.l	#4,sp
00005776 4E75                       		rts	
00005778                            ; ===========================================================================
00005778                            
00005778                            Obj88_Main2:				; XREF: Obj88_Main
00005778 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
0000577E 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005784 2248                       		movea.l	a0,a1
00005786 7600                       		moveq	#0,d3
00005788 7401                       		moveq	#1,d2
0000578A 7205                       		moveq	#5,d1
0000578C                            
0000578C                            Obj88_MainLoop:
0000578C 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005790 5429 0024                  		addq.b	#2,$24(a1)
00005794 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
0000579C 337C 03C5 0002             		move.w	#$3C5,2(a1)
000057A2 137C 0004 0001             		move.b	#4,1(a1)
000057A8 137C 0001 0018             		move.b	#1,$18(a1)
000057AE 3368 0008 0038             		move.w	8(a0),$38(a1)
000057B4 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000057BA 1342 001C                  		move.b	d2,$1C(a1)
000057BE 1342 001A                  		move.b	d2,$1A(a1)
000057C2 5202                       		addq.b	#1,d2
000057C4 1343 0026                  		move.b	d3,$26(a1)
000057C8 0603 002A                  		addi.b	#$2A,d3
000057CC 43E9 0040                  		lea	$40(a1),a1
000057D0 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000057D4                            
000057D4                            Obj88_Move:				; XREF: Obj88_Index
000057D4 3028 003E                  		move.w	$3E(a0),d0
000057D8 D168 0026                  		add.w	d0,$26(a0)
000057DC 1028 0026                  		move.b	$26(a0),d0
000057E0 4EB9 0000 2BFA             		jsr	(CalcSine).l
000057E6 7800                       		moveq	#0,d4
000057E8 1828 003C                  		move.b	$3C(a0),d4
000057EC C3C4                       		muls.w	d4,d1
000057EE E081                       		asr.l	#8,d1
000057F0 C1C4                       		muls.w	d4,d0
000057F2 E080                       		asr.l	#8,d0
000057F4 D268 0038                  		add.w	$38(a0),d1
000057F8 D068 003A                  		add.w	$3A(a0),d0
000057FC 3141 0008                  		move.w	d1,8(a0)
00005800 3140 000C                  		move.w	d0,$C(a0)
00005804 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
0000580A 6700                       		beq.s	loc_55FA
0000580C 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005812                            
00005812                            loc_55FA:
00005812 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005818 6700                       		beq.s	loc_5608
0000581A 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005820                            
00005820                            loc_5608:
00005820 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005826 6700                       		beq.s	locret_5614
00005828 5368 003A                  		subq.w	#1,$3A(a0)
0000582C                            
0000582C                            locret_5614:
0000582C 4E75                       		rts	
0000582E                            ; ===========================================================================
0000582E                            ; ---------------------------------------------------------------------------
0000582E                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000582E                            ; ---------------------------------------------------------------------------
0000582E                            
0000582E                            Obj89:					; XREF: Obj_Index
0000582E 7000                       		moveq	#0,d0
00005830 1028 0024                  		move.b	$24(a0),d0
00005834 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005838 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
0000583C                            ; ===========================================================================
0000583C 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000583E 0000                       		dc.w Obj89_Move-Obj89_Index
00005840 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005842                            ; ===========================================================================
00005842                            
00005842                            Obj89_Main:				; XREF: Obj89_Index
00005842 5428 0024                  		addq.b	#2,$24(a0)
00005846 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
0000584C 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005852 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
0000585A 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005860 117C 0000 0001             		move.b	#0,1(a0)
00005866 117C 0000 0018             		move.b	#0,$18(a0)
0000586C                            
0000586C                            Obj89_Move:				; XREF: Obj89_Index
0000586C 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005872 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005874 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
0000587A 4EB9 0000 0000             		jsr	DisplaySprite
00005880                            ; ===========================================================================
00005880                            
00005880                            Obj89_Delay:				; XREF: Obj89_Move
00005880 5428 0024                  		addq.b	#2,$24(a0)
00005884 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
0000588A                            
0000588A                            Obj89_GotoCredits:			; XREF: Obj89_Index
0000588A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000588E 6A00                       		bpl.s	Obj89_Display
00005890 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005896                            
00005896                            Obj89_Display:
00005896 4EB9 0000 0000             		jsr	DisplaySprite
0000589C                            ; ===========================================================================
0000589C                            ; ---------------------------------------------------------------------------
0000589C                            ; Sprite mappings - Sonic on the ending	sequence
0000589C                            ; ---------------------------------------------------------------------------
0000589C                            Map_obj87:
0000589C                            	include "_maps\obj87.asm"
0000589C                            ; ---------------------------------------------------------------------------
0000589C                            ; Sprite mappings - Sonic on the ending	sequence
0000589C                            ; ---------------------------------------------------------------------------
0000589C 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000058A0 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000058A4 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000058A8 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000058AC 02                         byte_5690:	dc.b 2
000058AD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000058B2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000058B7 03                         byte_569B:	dc.b 3
000058B8 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000058BD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000058C2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000058C7 02                         byte_56AB:	dc.b 2
000058C8 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000058CD FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000058D2 02                         byte_56B6:	dc.b 2
000058D3 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000058D8 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000058DD 02                         byte_56C1:	dc.b 2
000058DE EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000058E3 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000058E8 03                         byte_56CC:	dc.b 3
000058E9 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000058EE EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000058F3 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000058F8 07                         byte_56DC:	dc.b 7
000058F9 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000058FE BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005903 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005908 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
0000590D DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005912 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005917 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
0000591C 18                         byte_5700:	dc.b $18
0000591D 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005922 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005927 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
0000592C 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005931 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005936 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000593B 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005940 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005945 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000594A B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000594F A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005954 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005959 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000595E B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005963 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005968 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000596D D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005972 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005977 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000597C E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005981 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005986 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000598B F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005990 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005996 00                         		even
00005996 00                         		even
00005996                            
00005996                            ; ---------------------------------------------------------------------------
00005996                            ; Sprite mappings - chaos emeralds on the ending sequence
00005996                            ; ---------------------------------------------------------------------------
00005996                            Map_obj88:
00005996                            	include "_maps\obj88.asm"
00005996                            ; ---------------------------------------------------------------------------
00005996                            ; Sprite mappings - chaos emeralds on the ending sequence
00005996                            ; ---------------------------------------------------------------------------
00005996 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
0000599A 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
0000599E 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
000059A2 0000                       		dc.w byte_57AC-Map_obj88
000059A4 01                         byte_5788:	dc.b 1
000059A5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000059AA 01                         byte_578E:	dc.b 1
000059AB F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000059B0 01                         byte_5794:	dc.b 1
000059B1 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000059B6 01                         byte_579A:	dc.b 1
000059B7 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
000059BC 01                         byte_57A0:	dc.b 1
000059BD F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000059C2 01                         byte_57A6:	dc.b 1
000059C3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000059C8 01                         byte_57AC:	dc.b 1
000059C9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000059CE                            		even
000059CE                            		even
000059CE                            
000059CE                            ; ---------------------------------------------------------------------------
000059CE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000059CE                            ; ---------------------------------------------------------------------------
000059CE                            Map_obj89:
000059CE                            	include "_maps\obj89.asm"
000059CE                            ; ---------------------------------------------------------------------------
000059CE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000059CE                            ; ---------------------------------------------------------------------------
000059CE 0000                       		dc.w byte_57B4-Map_obj89
000059D0 03                         byte_57B4:	dc.b 3
000059D1 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000059D6 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000059DB F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000059E0                            		even
000059E0                            		even
000059E0                            
000059E0                            ; ===========================================================================
000059E0                            ; ---------------------------------------------------------------------------
000059E0                            ; Credits ending sequence
000059E0                            ; ---------------------------------------------------------------------------
000059E0                            
000059E0                            Credits:				; XREF: GameModeArray
000059E0 6100 BE1C                  		bsr.w	ClearPLC
000059E4 6100 C68C                  		bsr.w	Pal_FadeFrom
000059E8 4DF9 00C0 0004             		lea	($C00004).l,a6
000059EE 3CBC 8004                  		move.w	#$8004,(a6)
000059F2 3CBC 8230                  		move.w	#$8230,(a6)
000059F6 3CBC 8407                  		move.w	#$8407,(a6)
000059FA 3CBC 9001                  		move.w	#$9001,(a6)
000059FE 3CBC 9200                  		move.w	#$9200,(a6)
00005A02 3CBC 8B03                  		move.w	#$8B03,(a6)
00005A06 3CBC 8720                  		move.w	#$8720,(a6)
00005A0A 4238 F64E                  		clr.b	($FFFFF64E).w
00005A0E 6100 BAD4                  		bsr.w	ClearScreen
00005A12 43F8 D000                  		lea	($FFFFD000).w,a1
00005A16 7000                       		moveq	#0,d0
00005A18 323C 07FF                  		move.w	#$7FF,d1
00005A1C                            
00005A1C                            Cred_ClrObjRam:
00005A1C 22C0                       		move.l	d0,(a1)+
00005A1E 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005A22                            
00005A22 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005A2C 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005A32 6100 BC2C                  		bsr.w	NemDec
00005A36 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005A3A 7000                       		moveq	#0,d0
00005A3C 323C 001F                  		move.w	#$1F,d1
00005A40                            
00005A40                            Cred_ClrPallet:
00005A40 22C0                       		move.l	d0,(a1)+
00005A42 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005A46                            
00005A46 7003                       		moveq	#3,d0
00005A48 6100 C8D2                  		bsr.w	PalLoad1	; load Sonic's pallet
00005A4C 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005A52 4EB9 0000 0000             		jsr	ObjectsLoad
00005A58 4EB9 0000 0000             		jsr	BuildSprites
00005A5E 6100 0000                  		bsr.w	EndingDemoLoad
00005A62 7000                       		moveq	#0,d0
00005A64 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005A68 E948                       		lsl.w	#4,d0
00005A6A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005A70 45F2 0000                  		lea	(a2,d0.w),a2
00005A74 7000                       		moveq	#0,d0
00005A76 1012                       		move.b	(a2),d0
00005A78 6700                       		beq.s	loc_5862
00005A7A 6100 BD24                  		bsr.w	LoadPLC		; load level patterns
00005A7E                            
00005A7E                            loc_5862:
00005A7E 7001                       		moveq	#1,d0
00005A80 6100 BD1E                  		bsr.w	LoadPLC		; load standard	level patterns
00005A84 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005A8A 6100 C540                  		bsr.w	Pal_FadeTo
00005A8E                            
00005A8E                            Cred_WaitLoop:
00005A8E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005A94 6100 D132                  		bsr.w	DelayProgram
00005A98 6100 BD72                  		bsr.w	RunPLC_RAM
00005A9C 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005AA0 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005AA2 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005AA6 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005AA8 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005AAE 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005AB2 4E75                       		rts	
00005AB4                            
00005AB4                            ; ---------------------------------------------------------------------------
00005AB4                            ; Ending sequence demo loading subroutine
00005AB4                            ; ---------------------------------------------------------------------------
00005AB4                            
00005AB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005AB4                            
00005AB4                            
00005AB4                            EndingDemoLoad:				; XREF: Credits
00005AB4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005AB8 0240 000F                  		andi.w	#$F,d0
00005ABC D040                       		add.w	d0,d0
00005ABE 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005AC2 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005AC6 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005ACA 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005AD0 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005AD2 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005AD8 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005ADE 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005AE4 7000                       		moveq	#0,d0
00005AE6 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005AEA 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005AEE 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005AF2 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005AF6 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005AFC 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005AFE 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005B04 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005B08 303C 0008                  		move.w	#8,d0
00005B0C                            
00005B0C                            EndDemo_LampLoad:
00005B0C 24D9                       		move.l	(a1)+,(a2)+
00005B0E 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005B12                            
00005B12                            EndDemo_Exit:
00005B12 4E75                       		rts	
00005B14                            ; End of function EndingDemoLoad
00005B14                            
00005B14                            ; ===========================================================================
00005B14                            ; ---------------------------------------------------------------------------
00005B14                            ; Levels used in the end sequence demos
00005B14                            ; ---------------------------------------------------------------------------
00005B14                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005B24                            
00005B24                            ; ---------------------------------------------------------------------------
00005B24                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005B24                            ; ---------------------------------------------------------------------------
00005B24                            EndDemo_LampVar:
00005B24 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005B26 0A00 062C 000D             		dc.w $A00, $62C, $D
00005B2C 0000 0000                  		dc.l 0
00005B30 0000                       		dc.b 0,	0
00005B32 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005B46 0101                       		dc.b 1,	1
00005B48                            ; ===========================================================================
00005B48                            ; ---------------------------------------------------------------------------
00005B48                            ; "TRY AGAIN" and "END"	screens
00005B48                            ; ---------------------------------------------------------------------------
00005B48                            
00005B48                            TryAgainEnd:				; XREF: Credits
00005B48 6100 BCB4                  		bsr.w	ClearPLC
00005B4C 6100 C524                  		bsr.w	Pal_FadeFrom
00005B50 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B56 3CBC 8004                  		move.w	#$8004,(a6)
00005B5A 3CBC 8230                  		move.w	#$8230,(a6)
00005B5E 3CBC 8407                  		move.w	#$8407,(a6)
00005B62 3CBC 9001                  		move.w	#$9001,(a6)
00005B66 3CBC 9200                  		move.w	#$9200,(a6)
00005B6A 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B6E 3CBC 8720                  		move.w	#$8720,(a6)
00005B72 4238 F64E                  		clr.b	($FFFFF64E).w
00005B76 6100 B96C                  		bsr.w	ClearScreen
00005B7A 43F8 D000                  		lea	($FFFFD000).w,a1
00005B7E 7000                       		moveq	#0,d0
00005B80 323C 07FF                  		move.w	#$7FF,d1
00005B84                            
00005B84                            TryAg_ClrObjRam:
00005B84 22C0                       		move.l	d0,(a1)+
00005B86 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005B8A                            
00005B8A 701D                       		moveq	#$1D,d0
00005B8C 6100 BD7E                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005B90 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005B94 7000                       		moveq	#0,d0
00005B96 323C 001F                  		move.w	#$1F,d1
00005B9A                            
00005B9A                            TryAg_ClrPallet:
00005B9A 22C0                       		move.l	d0,(a1)+
00005B9C 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005BA0                            
00005BA0 7013                       		moveq	#$13,d0
00005BA2 6100 C778                  		bsr.w	PalLoad1	; load ending pallet
00005BA6 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005BAA 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005BB0 4EB9 0000 0000             		jsr	ObjectsLoad
00005BB6 4EB9 0000 0000             		jsr	BuildSprites
00005BBC 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005BC2 6100 C408                  		bsr.w	Pal_FadeTo
00005BC6                            
00005BC6                            ; ---------------------------------------------------------------------------
00005BC6                            ; "TRY AGAIN" and "END"	screen main loop
00005BC6                            ; ---------------------------------------------------------------------------
00005BC6                            TryAg_MainLoop:
00005BC6 6100 BA00                  		bsr.w	PauseGame
00005BCA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005BD0 6100 CFF6                  		bsr.w	DelayProgram
00005BD4 4EB9 0000 0000             		jsr	ObjectsLoad
00005BDA 4EB9 0000 0000             		jsr	BuildSprites
00005BE0 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005BE6 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005BE8 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005BEC 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005BEE 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005BF4 67D0                       		beq.s	TryAg_MainLoop
00005BF6                            
00005BF6                            TryAg_Exit:
00005BF6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005BFC 4E75                       		rts	
00005BFE                            
00005BFE                            ; ===========================================================================
00005BFE                            ; ---------------------------------------------------------------------------
00005BFE                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005BFE                            ; ---------------------------------------------------------------------------
00005BFE                            
00005BFE                            Obj8B:					; XREF: Obj_Index
00005BFE 7000                       		moveq	#0,d0
00005C00 1028 0024                  		move.b	$24(a0),d0
00005C04 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005C08 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005C0C 4EF9 0000 0000             		jmp	DisplaySprite
00005C12                            ; ===========================================================================
00005C12 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005C14 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005C16 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005C18 0000                       		dc.w loc_5A8E-Obj8B_Index
00005C1A                            ; ===========================================================================
00005C1A                            
00005C1A                            Obj8B_Main:				; XREF: Obj8B_Index
00005C1A 5428 0024                  		addq.b	#2,$24(a0)
00005C1E 317C 0120 0008             		move.w	#$120,8(a0)
00005C24 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005C2A 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005C32 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005C38 117C 0000 0001             		move.b	#0,1(a0)
00005C3E 117C 0002 0018             		move.b	#2,$18(a0)
00005C44 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005C4A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005C50 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005C52 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005C58 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005C5E 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005C64 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005C6A                            
00005C6A                            Obj8B_Animate:				; XREF: Obj8B_Index
00005C6A 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005C70 4EF9 0000 0000             		jmp	AnimateSprite
00005C76                            ; ===========================================================================
00005C76                            
00005C76                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005C76 5428 0024                  		addq.b	#2,$24(a0)
00005C7A 7002                       		moveq	#2,d0
00005C7C 0828 0000 001C             		btst	#0,$1C(a0)
00005C82 6700                       		beq.s	loc_5A6A
00005C84 4440                       		neg.w	d0
00005C86                            
00005C86                            loc_5A6A:
00005C86 43F8 D800                  		lea	($FFFFD800).w,a1
00005C8A 7205                       		moveq	#5,d1
00005C8C                            
00005C8C                            loc_5A70:
00005C8C 1340 003E                  		move.b	d0,$3E(a1)
00005C90 3400                       		move.w	d0,d2
00005C92 E742                       		asl.w	#3,d2
00005C94 D529 0026                  		add.b	d2,$26(a1)
00005C98 43E9 0040                  		lea	$40(a1),a1
00005C9C 51C9 FFEE                  		dbf	d1,loc_5A70
00005CA0 5228 001A                  		addq.b	#1,$1A(a0)
00005CA4 317C 0070 0030             		move.w	#112,$30(a0)
00005CAA                            
00005CAA                            loc_5A8E:				; XREF: Obj8B_Index
00005CAA 5368 0030                  		subq.w	#1,$30(a0)
00005CAE 6A00                       		bpl.s	locret_5AA0
00005CB0 0868 0000 001C             		bchg	#0,$1C(a0)
00005CB6 117C 0002 0024             		move.b	#2,$24(a0)
00005CBC                            
00005CBC                            locret_5AA0:
00005CBC 4E75                       		rts	
00005CBE                            ; ===========================================================================
00005CBE                            Ani_obj8B:
00005CBE                            	include "_anim\obj8B.asm"
00005CBE                            ; ---------------------------------------------------------------------------
00005CBE                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005CBE                            ; ---------------------------------------------------------------------------
00005CBE 0000                       		dc.w byte_5AA8-Ani_obj8B
00005CC0 0000                       		dc.w byte_5AAC-Ani_obj8B
00005CC2 0000                       		dc.w byte_5AB0-Ani_obj8B
00005CC4 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005CC8 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005CCC 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005CDE                            		even
00005CDE                            		even
00005CDE                            
00005CDE                            ; ===========================================================================
00005CDE                            ; ---------------------------------------------------------------------------
00005CDE                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005CDE                            ; ---------------------------------------------------------------------------
00005CDE                            
00005CDE                            Obj8C:					; XREF: Obj_Index
00005CDE 7000                       		moveq	#0,d0
00005CE0 1028 0024                  		move.b	$24(a0),d0
00005CE4 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005CE8 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005CEC 4EF9 0000 0000             		jmp	DisplaySprite
00005CF2                            ; ===========================================================================
00005CF2 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005CF4 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005CF6                            ; ===========================================================================
00005CF6                            
00005CF6                            Obj8C_Main:				; XREF: Obj8C_Index
00005CF6 2248                       		movea.l	a0,a1
00005CF8 7400                       		moveq	#0,d2
00005CFA 7600                       		moveq	#0,d3
00005CFC 7205                       		moveq	#5,d1
00005CFE 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005D02                            
00005D02                            Obj8C_MakeEms:				; XREF: loc_5B42
00005D02 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005D06 5429 0024                  		addq.b	#2,$24(a1)
00005D0A 237C 0000 5996 0004        		move.l	#Map_obj88,4(a1)
00005D12 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005D18 137C 0000 0001             		move.b	#0,1(a1)
00005D1E 137C 0001 0018             		move.b	#1,$18(a1)
00005D24 337C 0104 0008             		move.w	#$104,8(a1)
00005D2A 337C 0120 0038             		move.w	#$120,$38(a1)
00005D30 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005D36 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005D3C 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005D42 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005D46                            
00005D46                            Obj8C_ChkEms:
00005D46 7000                       		moveq	#0,d0
00005D48 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005D4C 5340                       		subq.w	#1,d0
00005D4E 6500                       		bcs.s	loc_5B42
00005D50                            
00005D50                            Obj8C_ChkEmLoop:
00005D50 B433 0000                  		cmp.b	(a3,d0.w),d2
00005D54 6600                       		bne.s	loc_5B3E
00005D56 5202                       		addq.b	#1,d2
00005D58 60EC                       		bra.s	Obj8C_ChkEms
00005D5A                            ; ===========================================================================
00005D5A                            
00005D5A                            loc_5B3E:
00005D5A 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005D5E                            
00005D5E                            loc_5B42:
00005D5E 1342 001A                  		move.b	d2,$1A(a1)
00005D62 5229 001A                  		addq.b	#1,$1A(a1)
00005D66 5202                       		addq.b	#1,d2
00005D68 137C 0080 0026             		move.b	#$80,$26(a1)
00005D6E 1343 001E                  		move.b	d3,$1E(a1)
00005D72 1343 001F                  		move.b	d3,$1F(a1)
00005D76 0643 000A                  		addi.w	#$A,d3
00005D7A 43E9 0040                  		lea	$40(a1),a1
00005D7E 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005D82                            
00005D82                            Obj8C_Move:				; XREF: Obj8C_Index
00005D82 4A68 003E                  		tst.w	$3E(a0)
00005D86 6700                       		beq.s	locret_5BBA
00005D88 4A28 001E                  		tst.b	$1E(a0)
00005D8C 6700                       		beq.s	loc_5B78
00005D8E 5328 001E                  		subq.b	#1,$1E(a0)
00005D92 6600                       		bne.s	loc_5B80
00005D94                            
00005D94                            loc_5B78:
00005D94 3028 003E                  		move.w	$3E(a0),d0
00005D98 D168 0026                  		add.w	d0,$26(a0)
00005D9C                            
00005D9C                            loc_5B80:
00005D9C 1028 0026                  		move.b	$26(a0),d0
00005DA0 6700                       		beq.s	loc_5B8C
00005DA2 0C00 0080                  		cmpi.b	#$80,d0
00005DA6 6600                       		bne.s	loc_5B96
00005DA8                            
00005DA8                            loc_5B8C:
00005DA8 4268 003E                  		clr.w	$3E(a0)
00005DAC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005DB2                            
00005DB2                            loc_5B96:
00005DB2 4EB9 0000 2BFA             		jsr	(CalcSine).l
00005DB8 7800                       		moveq	#0,d4
00005DBA 1828 003C                  		move.b	$3C(a0),d4
00005DBE C3C4                       		muls.w	d4,d1
00005DC0 E081                       		asr.l	#8,d1
00005DC2 C1C4                       		muls.w	d4,d0
00005DC4 E080                       		asr.l	#8,d0
00005DC6 D268 0038                  		add.w	$38(a0),d1
00005DCA D068 003A                  		add.w	$3A(a0),d0
00005DCE 3141 0008                  		move.w	d1,8(a0)
00005DD2 3140 000A                  		move.w	d0,$A(a0)
00005DD6                            
00005DD6                            locret_5BBA:
00005DD6 4E75                       		rts	
00005DD8                            ; ===========================================================================
00005DD8                            ; ---------------------------------------------------------------------------
00005DD8                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005DD8                            ; ---------------------------------------------------------------------------
00005DD8                            Map_obj8B:
00005DD8                            	include "_maps\obj8B.asm"
00005DD8                            ; ---------------------------------------------------------------------------
00005DD8                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005DD8                            ; ---------------------------------------------------------------------------
00005DD8 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005DDC 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005DE0 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005DE4 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005DE8 08                         byte_5BCC:	dc.b 8
00005DE9 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005DEE F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005DF3 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005DF8 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005DFD 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005E02 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005E07 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E0C 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E11 08                         byte_5BF5:	dc.b 8
00005E12 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005E17 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005E1C E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005E21 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005E26 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005E2B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005E30 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E35 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E3A 08                         byte_5C1E:	dc.b 8
00005E3B E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005E40 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005E45 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005E4A F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005E4F 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005E54 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005E59 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E5E 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E63 08                         byte_5C47:	dc.b 8
00005E64 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005E69 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005E6E E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005E73 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005E78 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005E7D 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005E82 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E87 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E8C 0C                         byte_5C70:	dc.b $C
00005E8D ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005E92 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005E97 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005E9C 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005EA1 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005EA6 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005EAB 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005EB0 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005EB5 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005EBA 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005EBF 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005EC4 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005EC9 0A                         byte_5CAD:	dc.b $A
00005ECA D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005ECF DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005ED4 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005ED9 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005EDE DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005EE3 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005EE8 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005EED 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005EF2 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005EF7 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005EFC 0A                         byte_5CE0:	dc.b $A
00005EFD C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005F02 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005F07 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005F0C C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005F11 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005F16 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005F1B 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005F20 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005F25 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005F2A 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005F2F 0C                         byte_5D13:	dc.b $C
00005F30 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005F35 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005F3A 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005F3F 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005F44 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005F49 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005F4E 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005F53 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005F58 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005F5D 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005F62 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005F67 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005F6C                            		even
00005F6C                            		even
00005F6C                            
00005F6C                            ; ---------------------------------------------------------------------------
00005F6C                            ; Ending sequence demos
00005F6C                            ; ---------------------------------------------------------------------------
00005F6C                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005F9A                            		even
00005F9A                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005FDA                            		even
00005FDA                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000600A                            		even
0000600A                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000603A                            		even
0000603A                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000605A                            		even
0000605A                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000607A                            		even
0000607A                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000060AA                            		even
000060AA                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000060DA                            		even
000060DA                            
000060DA                            ; ---------------------------------------------------------------------------
000060DA                            ; Subroutine to	load level boundaries and start	locations
000060DA                            ; ---------------------------------------------------------------------------
000060DA                            
000060DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000060DA                            
000060DA                            
000060DA                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000060DA 7000                       		moveq	#0,d0
000060DC 11C0 F740                  		move.b	d0,($FFFFF740).w
000060E0 11C0 F741                  		move.b	d0,($FFFFF741).w
000060E4 11C0 F746                  		move.b	d0,($FFFFF746).w
000060E8 11C0 F748                  		move.b	d0,($FFFFF748).w
000060EC 11C0 F742                  		move.b	d0,($FFFFF742).w
000060F0 3038 FE10                  		move.w	($FFFFFE10).w,d0
000060F4 ED08                       		lsl.b	#6,d0
000060F6 E848                       		lsr.w	#4,d0
000060F8 3200                       		move.w	d0,d1
000060FA D040                       		add.w	d0,d0
000060FC D041                       		add.w	d1,d0
000060FE 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006102 3018                       		move.w	(a0)+,d0
00006104 31C0 F730                  		move.w	d0,($FFFFF730).w
00006108 2018                       		move.l	(a0)+,d0
0000610A 21C0 F728                  		move.l	d0,($FFFFF728).w
0000610E 21C0 F720                  		move.l	d0,($FFFFF720).w
00006112 2018                       		move.l	(a0)+,d0
00006114 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006118 21C0 F724                  		move.l	d0,($FFFFF724).w
0000611C 3038 F728                  		move.w	($FFFFF728).w,d0
00006120 0640 0240                  		addi.w	#$240,d0
00006124 31C0 F732                  		move.w	d0,($FFFFF732).w
00006128 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000612E 3018                       		move.w	(a0)+,d0
00006130 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006134 6000 0000                  		bra.w	LevSz_ChkLamp
00006138                            ; ===========================================================================
00006138                            ; ---------------------------------------------------------------------------
00006138                            ; Level size array and ending start location array
00006138                            ; ---------------------------------------------------------------------------
00006138                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006288                            		even
00006288                            
00006288                            EndingStLocArray:
00006288                            		incbin	misc\sloc_end.bin
000062A8                            		even
000062A8                            
000062A8                            ; ===========================================================================
000062A8                            
000062A8                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000062A8 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000062AC 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000062AE 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000062B4 3238 D008                  		move.w	($FFFFD008).w,d1
000062B8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000062BC 6000                       		bra.s	loc_60D0
000062BE                            ; ===========================================================================
000062BE                            
000062BE                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000062BE 3038 FE10                  		move.w	($FFFFFE10).w,d0
000062C2 ED08                       		lsl.b	#6,d0
000062C4 E848                       		lsr.w	#4,d0
000062C6 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000062CA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000062CE 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000062D0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000062D4 5340                       		subq.w	#1,d0
000062D6 E548                       		lsl.w	#2,d0
000062D8 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000062DC                            
000062DC                            LevSz_SonicPos:
000062DC 7200                       		moveq	#0,d1
000062DE 3219                       		move.w	(a1)+,d1
000062E0 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000062E4 7000                       		moveq	#0,d0
000062E6 3011                       		move.w	(a1),d0
000062E8 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000062EC                            
000062EC                            loc_60D0:				; XREF: LevSz_ChkLamp
000062EC 0441 00A0                  		subi.w	#$A0,d1
000062F0 6400                       		bcc.s	loc_60D8
000062F2 7200                       		moveq	#0,d1
000062F4                            
000062F4                            loc_60D8:
000062F4 3438 F72A                  		move.w	($FFFFF72A).w,d2
000062F8 B242                       		cmp.w	d2,d1
000062FA 6500                       		bcs.s	loc_60E2
000062FC 3202                       		move.w	d2,d1
000062FE                            
000062FE                            loc_60E2:
000062FE 31C1 F700                  		move.w	d1,($FFFFF700).w
00006302 0440 0060                  		subi.w	#$60,d0
00006306 6400                       		bcc.s	loc_60EE
00006308 7000                       		moveq	#0,d0
0000630A                            
0000630A                            loc_60EE:
0000630A B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000630E 6D00                       		blt.s	loc_60F8
00006310 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006314                            
00006314                            loc_60F8:
00006314 31C0 F704                  		move.w	d0,($FFFFF704).w
00006318 6100 0000                  		bsr.w	BgScrollSpeed
0000631C 7000                       		moveq	#0,d0
0000631E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006322 E508                       		lsl.b	#2,d0
00006324 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000632A 6000 0000                  		bra.w	LevSz_Unk
0000632E                            ; ===========================================================================
0000632E                            ; ---------------------------------------------------------------------------
0000632E                            ; Sonic	start location array
0000632E                            ; ---------------------------------------------------------------------------
0000632E                            StartLocArray:	incbin	misc\sloc_lev.bin
0000639E                            		even
0000639E                            
0000639E                            ; ---------------------------------------------------------------------------
0000639E                            ; Which	256x256	tiles contain loops or roll-tunnels
0000639E                            ; ---------------------------------------------------------------------------
0000639E                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000639E                            ; loop,	loop, tunnel, tunnel
0000639E                            ; ---------------------------------------------------------------------------
0000639E                            LoopTileNums:	incbin	misc\loopnums.bin
000063BA                            		even
000063BA                            
000063BA                            ; ===========================================================================
000063BA                            
000063BA                            LevSz_Unk:				; XREF: LevelSizeLoad
000063BA 7000                       		moveq	#0,d0
000063BC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000063C0 E748                       		lsl.w	#3,d0
000063C2 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000063C6 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000063CA 24D9                       		move.l	(a1)+,(a2)+
000063CC 24D9                       		move.l	(a1)+,(a2)+
000063CE 4E75                       		rts	
000063D0                            ; End of function LevelSizeLoad
000063D0                            
000063D0                            ; ===========================================================================
000063D0 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000063D8 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063E0 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063E8 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063F0 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063F8 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006400 0070 0100 0100 0100        		dc.l $700100, $1000100
00006408                            
00006408                            ; ---------------------------------------------------------------------------
00006408                            ; Subroutine to	set scroll speed of some backgrounds
00006408                            ; ---------------------------------------------------------------------------
00006408                            
00006408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006408                            
00006408                            
00006408                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006408 4A38 FE30                  		tst.b	($FFFFFE30).w
0000640C 6600                       		bne.s	loc_6206
0000640E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006412 31C0 F714                  		move.w	d0,($FFFFF714).w
00006416 31C1 F708                  		move.w	d1,($FFFFF708).w
0000641A 31C1 F710                  		move.w	d1,($FFFFF710).w
0000641E 31C1 F718                  		move.w	d1,($FFFFF718).w
00006422                            
00006422                            loc_6206:
00006422 7400                       		moveq	#0,d2
00006424 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006428 D442                       		add.w	d2,d2
0000642A 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000642E 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006432                            ; End of function BgScrollSpeed
00006432                            
00006432                            ; ===========================================================================
00006432 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006436 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000643A 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000643E 0000                       		dc.w BgScroll_End-BgScroll_Index
00006440                            ; ===========================================================================
00006440                            
00006440                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006440 6000 0000                  		bra.w	Deform_GHZ
00006444                            ; ===========================================================================
00006444                            
00006444                            BgScroll_LZ:				; XREF: BgScroll_Index
00006444 E280                       		asr.l	#1,d0
00006446 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000644A 4E75                       		rts	
0000644C                            ; ===========================================================================
0000644C                            
0000644C                            BgScroll_MZ:				; XREF: BgScroll_Index
0000644C 4E75                       		rts	
0000644E                            ; ===========================================================================
0000644E                            
0000644E                            BgScroll_SLZ:				; XREF: BgScroll_Index
0000644E E280                       		asr.l	#1,d0
00006450 0640 00C0                  		addi.w	#$C0,d0
00006454 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006458 4E75                       		rts	
0000645A                            ; ===========================================================================
0000645A                            
0000645A                            BgScroll_SYZ:				; XREF: BgScroll_Index
0000645A E980                       		asl.l	#4,d0
0000645C 2400                       		move.l	d0,d2
0000645E E380                       		asl.l	#1,d0
00006460 D082                       		add.l	d2,d0
00006462 E080                       		asr.l	#8,d0
00006464 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006468 31C0 F714                  		move.w	d0,($FFFFF714).w
0000646C 4E75                       		rts	
0000646E                            ; ===========================================================================
0000646E                            
0000646E                            BgScroll_SBZ:				; XREF: BgScroll_Index
0000646E E980                       		asl.l	#4,d0
00006470 E380                       		asl.l	#1,d0
00006472 E080                       		asr.l	#8,d0
00006474 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006478 4E75                       		rts	
0000647A                            ; ===========================================================================
0000647A                            
0000647A                            BgScroll_End:				; XREF: BgScroll_Index
0000647A 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006480 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006486 4E75                       		rts	
00006488                            ; ===========================================================================
00006488 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
0000648E 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006494 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000649A 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000064A0 4E75                       		rts
000064A2                            
000064A2                            ; ---------------------------------------------------------------------------
000064A2                            ; Background layer deformation subroutines
000064A2                            ; ---------------------------------------------------------------------------
000064A2                            
000064A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000064A2                            
000064A2                            
000064A2                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000064A2 4A38 F744                  		tst.b	($FFFFF744).w
000064A6 6700                       		beq.s	loc_628E
000064A8 4E75                       		rts	
000064AA                            ; ===========================================================================
000064AA                            
000064AA                            loc_628E:
000064AA 4278 F754                  		clr.w	($FFFFF754).w
000064AE 4278 F756                  		clr.w	($FFFFF756).w
000064B2 4278 F758                  		clr.w	($FFFFF758).w
000064B6 4278 F75A                  		clr.w	($FFFFF75A).w
000064BA 6100 0000                  		bsr.w	ScrollHoriz
000064BE 6100 0000                  		bsr.w	ScrollVertical
000064C2 6100 0000                  		bsr.w	DynScrResizeLoad
000064C6 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000064CC 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000064D2 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000064D8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000064DE 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000064E4 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000064EA 7000                       		moveq	#0,d0
000064EC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000064F0 D040                       		add.w	d0,d0
000064F2 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000064F6 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000064FA                            ; End of function DeformBgLayer
000064FA                            
000064FA                            ; ===========================================================================
000064FA                            ; ---------------------------------------------------------------------------
000064FA                            ; Offset index for background layer deformation	code
000064FA                            ; ---------------------------------------------------------------------------
000064FA 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000064FE 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006502 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006506 0000                       		dc.w Deform_GHZ-Deform_Index
00006508                            ; ---------------------------------------------------------------------------
00006508                            ; Green	Hill Zone background layer deformation code
00006508                            ; ---------------------------------------------------------------------------
00006508                            
00006508                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006508                            
00006508                            
00006508                            Deform_GHZ:				; XREF: Deform_Index
00006508 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000650C 48C4                       		ext.l	d4
0000650E EB84                       		asl.l	#5,d4
00006510 2204                       		move.l	d4,d1
00006512 E384                       		asl.l	#1,d4
00006514 D881                       		add.l	d1,d4
00006516 7A00                       		moveq	#0,d5
00006518 6100 0000                  		bsr.w	ScrollBlock1
0000651C 6100 0000                  		bsr.w	ScrollBlock4
00006520 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006524 3038 F704                  		move.w	($FFFFF704).w,d0
00006528 0240 07FF                  		andi.w	#$7FF,d0
0000652C EA48                       		lsr.w	#5,d0
0000652E 4440                       		neg.w	d0
00006530 0640 0026                  		addi.w	#$26,d0
00006534 31C0 F714                  		move.w	d0,($FFFFF714).w
00006538 3800                       		move.w	d0,d4
0000653A 6100 0000                  		bsr.w	ScrollBlock3
0000653E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006544 323C 006F                  		move.w	#$6F,d1
00006548 9244                       		sub.w	d4,d1
0000654A 3038 F700                  		move.w	($FFFFF700).w,d0
0000654E 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006554 6600                       		bne.s	loc_633C
00006556 7000                       		moveq	#0,d0
00006558                            
00006558                            loc_633C:
00006558 4440                       		neg.w	d0
0000655A 4840                       		swap	d0
0000655C 3038 F708                  		move.w	($FFFFF708).w,d0
00006560 4440                       		neg.w	d0
00006562                            
00006562                            loc_6346:
00006562 22C0                       		move.l	d0,(a1)+
00006564 51C9 FFFC                  		dbf	d1,loc_6346
00006568 323C 0027                  		move.w	#$27,d1
0000656C 3038 F710                  		move.w	($FFFFF710).w,d0
00006570 4440                       		neg.w	d0
00006572                            
00006572                            loc_6356:
00006572 22C0                       		move.l	d0,(a1)+
00006574 51C9 FFFC                  		dbf	d1,loc_6356
00006578 3038 F710                  		move.w	($FFFFF710).w,d0
0000657C 0640 0000                  		addi.w	#0,d0
00006580 3438 F700                  		move.w	($FFFFF700).w,d2
00006584 0642 FE00                  		addi.w	#-$200,d2
00006588 9440                       		sub.w	d0,d2
0000658A 48C2                       		ext.l	d2
0000658C E182                       		asl.l	#8,d2
0000658E 85FC 0068                  		divs.w	#$68,d2
00006592 48C2                       		ext.l	d2
00006594 E182                       		asl.l	#8,d2
00006596 7600                       		moveq	#0,d3
00006598 3600                       		move.w	d0,d3
0000659A 323C 0047                  		move.w	#$47,d1
0000659E D244                       		add.w	d4,d1
000065A0                            
000065A0                            loc_6384:
000065A0 3003                       		move.w	d3,d0
000065A2 4440                       		neg.w	d0
000065A4 22C0                       		move.l	d0,(a1)+
000065A6 4843                       		swap	d3
000065A8 D682                       		add.l	d2,d3
000065AA 4843                       		swap	d3
000065AC 51C9 FFF2                  		dbf	d1,loc_6384
000065B0 4E75                       		rts	
000065B2                            ; End of function Deform_GHZ
000065B2                            
000065B2                            ; ---------------------------------------------------------------------------
000065B2                            ; Labyrinth Zone background layer deformation code
000065B2                            ; ---------------------------------------------------------------------------
000065B2                            
000065B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065B2                            
000065B2                            
000065B2                            Deform_LZ:				; XREF: Deform_Index
000065B2 3838 F73A                  		move.w	($FFFFF73A).w,d4
000065B6 48C4                       		ext.l	d4
000065B8 EF84                       		asl.l	#7,d4
000065BA 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000065BE 48C5                       		ext.l	d5
000065C0 EF85                       		asl.l	#7,d5
000065C2 6100 0000                  		bsr.w	ScrollBlock1
000065C6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000065CC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000065D0 323C 00DF                  		move.w	#$DF,d1
000065D4 3038 F700                  		move.w	($FFFFF700).w,d0
000065D8 4440                       		neg.w	d0
000065DA 4840                       		swap	d0
000065DC 3038 F708                  		move.w	($FFFFF708).w,d0
000065E0 4440                       		neg.w	d0
000065E2                            
000065E2                            loc_63C6:
000065E2 22C0                       		move.l	d0,(a1)+
000065E4 51C9 FFFC                  		dbf	d1,loc_63C6
000065E8 3038 F646                  		move.w	($FFFFF646).w,d0
000065EC 9078 F704                  		sub.w	($FFFFF704).w,d0
000065F0 4E75                       		rts	
000065F2                            ; End of function Deform_LZ
000065F2                            
000065F2                            ; ---------------------------------------------------------------------------
000065F2                            ; Marble Zone background layer deformation code
000065F2                            ; ---------------------------------------------------------------------------
000065F2                            
000065F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065F2                            
000065F2                            
000065F2                            Deform_MZ:				; XREF: Deform_Index
000065F2 3838 F73A                  		move.w	($FFFFF73A).w,d4
000065F6 48C4                       		ext.l	d4
000065F8 ED84                       		asl.l	#6,d4
000065FA 2204                       		move.l	d4,d1
000065FC E384                       		asl.l	#1,d4
000065FE D881                       		add.l	d1,d4
00006600 7A00                       		moveq	#0,d5
00006602 6100 0000                  		bsr.w	ScrollBlock1
00006606 303C 0200                  		move.w	#$200,d0
0000660A 3238 F704                  		move.w	($FFFFF704).w,d1
0000660E 0441 01C8                  		subi.w	#$1C8,d1
00006612 6500                       		bcs.s	loc_6402
00006614 3401                       		move.w	d1,d2
00006616 D241                       		add.w	d1,d1
00006618 D242                       		add.w	d2,d1
0000661A E441                       		asr.w	#2,d1
0000661C D041                       		add.w	d1,d0
0000661E                            
0000661E                            loc_6402:
0000661E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006622 6100 0000                  		bsr.w	ScrollBlock3
00006626 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000662C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006630 323C 00DF                  		move.w	#$DF,d1
00006634 3038 F700                  		move.w	($FFFFF700).w,d0
00006638 4440                       		neg.w	d0
0000663A 4840                       		swap	d0
0000663C 3038 F708                  		move.w	($FFFFF708).w,d0
00006640 4440                       		neg.w	d0
00006642                            
00006642                            loc_6426:
00006642 22C0                       		move.l	d0,(a1)+
00006644 51C9 FFFC                  		dbf	d1,loc_6426
00006648 4E75                       		rts	
0000664A                            ; End of function Deform_MZ
0000664A                            
0000664A                            ; ---------------------------------------------------------------------------
0000664A                            ; Star Light Zone background layer deformation code
0000664A                            ; ---------------------------------------------------------------------------
0000664A                            
0000664A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000664A                            
0000664A                            
0000664A                            Deform_SLZ:				; XREF: Deform_Index
0000664A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000664E 48C4                       		ext.l	d4
00006650 EB84                       		asl.l	#5,d4
00006652 2204                       		move.l	d4,d1
00006654 E384                       		asl.l	#1,d4
00006656 D881                       		add.l	d1,d4
00006658 7A00                       		moveq	#0,d5
0000665A 6100 0000                  		bsr.w	ScrollBlock1
0000665E 6100 0000                  		bsr.w	ScrollBlock3
00006662 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006666                            	;	move.w	($FFFFF704).w,d0
00006666                            	;	andi.w	#$7FF,d0
00006666 EA48                       		lsr.w	#5,d0
00006668 4440                       		neg.w	d0
0000666A 0640 0026                  		addi.w	#$26,d0
0000666E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006672 3800                       		move.w	d0,d4
00006674                            	;	bsr.w	ScrollBlock3
00006674 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
0000667A 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
0000667E                            
0000667E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006682 4440                       		neg.w	d0			; negate (positive to negative)
00006684 4840                       		swap	d0			; send to the left side of d0
00006686 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000668A 45F8 A800                  		lea	($FFFFA800).w,a2
0000668E 069A 0000 5000             		addi.l	#$5000,(a2)+
00006694 069A 0000 C000             		addi.l	#$C000,(a2)+
0000669A 3038 A800                  		move.w	($FFFFA800).w,d0
0000669E 4440                       		neg.w	d0			; negate (positive to negative)
000066A0 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000066A2 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000066A6                            slz_DeformLoop_1:
000066A6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000066A8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
000066AC                            
000066AC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000066B0 4440                       		neg.w	d0			; negate (positive to negative)
000066B2 4840                       		swap	d0			; send to the left side of d0
000066B4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000066B8 45F8 A800                  		lea	($FFFFA800).w,a2
000066BC 069A 0000 5000             		addi.l	#$5000,(a2)+
000066C2 069A 0000 C000             		addi.l	#$C000,(a2)+
000066C8 3038 A800                  		move.w	($FFFFA800).w,d0
000066CC 4440                       		neg.w	d0			; negate (positive to negative)
000066CE E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000066D0 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000066D4                            slz_DeformLoop_2:
000066D4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000066D6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
000066DA                            
000066DA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000066DE 4440                       		neg.w	d0			; negate (positive to negative)
000066E0 4840                       		swap	d0			; send to the left side of d0
000066E2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000066E6 45F8 A800                  		lea	($FFFFA800).w,a2
000066EA 069A 0000 5000             		addi.l	#$5000,(a2)+
000066F0 069A 0000 C000             		addi.l	#$C000,(a2)+
000066F6 3038 A800                  		move.w	($FFFFA800).w,d0
000066FA 4440                       		neg.w	d0			; negate (positive to negative)
000066FC E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000066FE 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006702                            slz_DeformLoop_3:
00006702 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006704 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006708                            
00006708 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000670C 4440                       		neg.w	d0			; negate (positive to negative)
0000670E 4840                       		swap	d0			; send to the left side of d0
00006710 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006714 45F8 A800                  		lea	($FFFFA800).w,a2
00006718 069A 0000 5000             		addi.l	#$5000,(a2)+
0000671E 069A 0000 C000             		addi.l	#$C000,(a2)+
00006724 3038 A800                  		move.w	($FFFFA800).w,d0
00006728 4440                       		neg.w	d0			; negate (positive to negative)
0000672A E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
0000672C 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006730                            slz_DeformLoop_4:
00006730 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006732 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006736                            
00006736 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000673A 4440                       		neg.w	d0			; negate (positive to negative)
0000673C 4840                       		swap	d0			; send to the left side of d0
0000673E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006742 45F8 A800                  		lea	($FFFFA800).w,a2
00006746 069A 0000 5000             		addi.l	#$5000,(a2)+
0000674C 069A 0000 C000             		addi.l	#$C000,(a2)+
00006752 3038 A800                  		move.w	($FFFFA800).w,d0
00006756 4440                       		neg.w	d0			; negate (positive to negative)
00006758 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
0000675A 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000675E                            slz_DeformLoop_5:
0000675E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006760 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006764                            
00006764 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006768 4440                       		neg.w	d0			; negate (positive to negative)
0000676A 4840                       		swap	d0			; send to the left side of d0
0000676C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006770 4440                       		neg.w	d0			; negate (positive to negative)
00006772 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006774 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006778                            slz_DeformLoop_6:
00006778 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000677A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
0000677E                            
0000677E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006782 4440                       		neg.w	d0			; negate (positive to negative)
00006784 4840                       		swap	d0			; send to the left side of d0
00006786 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000678A 4440                       		neg.w	d0			; negate (positive to negative)
0000678C EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
0000678E 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006792                            slz_DeformLoop_7:
00006792 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006794 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006798                            
00006798 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000679C 4440                       		neg.w	d0			; negate (positive to negative)
0000679E 4840                       		swap	d0			; send to the left side of d0
000067A0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067A4 4440                       		neg.w	d0			; negate (positive to negative)
000067A6 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
000067A8 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067AC                            slz_DeformLoop_8:
000067AC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000067AE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
000067B2                            
000067B2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067B6 4440                       		neg.w	d0			; negate (positive to negative)
000067B8 4840                       		swap	d0			; send to the left side of d0
000067BA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067BE 4440                       		neg.w	d0			; negate (positive to negative)
000067C0 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000067C2 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067C6                            slz_DeformLoop_9:
000067C6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000067C8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
000067CC                            
000067CC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067D0 4440                       		neg.w	d0			; negate (positive to negative)
000067D2 4840                       		swap	d0			; send to the left side of d0
000067D4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067D8 4440                       		neg.w	d0			; negate (positive to negative)
000067DA E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000067DC 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067E0                            slz_DeformLoop_10:
000067E0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000067E2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
000067E6                            
000067E6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067EA 4440                       		neg.w	d0			; negate (positive to negative)
000067EC 4840                       		swap	d0			; send to the left side of d0
000067EE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067F2 4440                       		neg.w	d0			; negate (positive to negative)
000067F4 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000067F6 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067FA                            slz_DeformLoop_11:
000067FA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000067FC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006800                            
00006800 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006804 4440                       		neg.w	d0			; negate (positive to negative)
00006806 4840                       		swap	d0			; send to the left side of d0
00006808 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000680C 4440                       		neg.w	d0			; negate (positive to negative)
0000680E E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006810 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006814                            slz_DeformLoop_12:
00006814 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006816 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
0000681A                            
0000681A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000681E 4440                       		neg.w	d0			; negate (positive to negative)
00006820 4840                       		swap	d0			; send to the left side of d0
00006822 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006826 4440                       		neg.w	d0			; negate (positive to negative)
00006828 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
0000682A 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000682E                            slz_DeformLoop_13:
0000682E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006830 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006834 4E75                       		rts	
00006836                            ; End of function Deform_SLZ
00006836 4E75                       		rts	
00006838                            ; End of function Deform_SLZ_2
00006838                            
00006838                            ; ---------------------------------------------------------------------------
00006838                            ; Spring Yard Zone background layer deformation	code
00006838                            ; ---------------------------------------------------------------------------
00006838                            
00006838                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006838                            
00006838                            
00006838                            Deform_SYZ:				; XREF: Deform_Index
00006838 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000683C 48C4                       		ext.l	d4
0000683E ED84                       		asl.l	#6,d4
00006840 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006844 48C5                       		ext.l	d5
00006846 E985                       		asl.l	#4,d5
00006848 2205                       		move.l	d5,d1
0000684A E385                       		asl.l	#1,d5
0000684C DA81                       		add.l	d1,d5
0000684E 6100 0000                  		bsr.w	ScrollBlock1
00006852 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006858 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000685C 323C 00DF                  		move.w	#$DF,d1
00006860 3038 F700                  		move.w	($FFFFF700).w,d0
00006864 4440                       		neg.w	d0
00006866 4840                       		swap	d0
00006868 3038 F708                  		move.w	($FFFFF708).w,d0
0000686C 4440                       		neg.w	d0
0000686E                            
0000686E                            loc_653C:
0000686E 22C0                       		move.l	d0,(a1)+
00006870 51C9 FFFC                  		dbf	d1,loc_653C
00006874 4E75                       		rts	
00006876                            ; End of function Deform_SYZ
00006876                            
00006876                            ; ---------------------------------------------------------------------------
00006876                            ; Scrap	Brain Zone background layer deformation	code
00006876                            ; ---------------------------------------------------------------------------
00006876                            
00006876                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006876                            
00006876                            
00006876                            Deform_SBZ:				; XREF: Deform_Index
00006876 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000687A 48C4                       		ext.l	d4
0000687C ED84                       		asl.l	#6,d4
0000687E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006882 48C5                       		ext.l	d5
00006884 E985                       		asl.l	#4,d5
00006886 E385                       		asl.l	#1,d5
00006888 6100 0000                  		bsr.w	ScrollBlock1
0000688C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006892 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006896 323C 00DF                  		move.w	#$DF,d1
0000689A 3038 F700                  		move.w	($FFFFF700).w,d0
0000689E 4440                       		neg.w	d0
000068A0 4840                       		swap	d0
000068A2 3038 F708                  		move.w	($FFFFF708).w,d0
000068A6 4440                       		neg.w	d0
000068A8                            
000068A8                            loc_6576:
000068A8 22C0                       		move.l	d0,(a1)+
000068AA 51C9 FFFC                  		dbf	d1,loc_6576
000068AE 4E75                       		rts	
000068B0                            ; End of function Deform_SBZ
000068B0                            
000068B0                            ; ---------------------------------------------------------------------------
000068B0                            ; Subroutine to	scroll the level horizontally as Sonic moves
000068B0                            ; ---------------------------------------------------------------------------
000068B0                            
000068B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068B0                            
000068B0                            
000068B0                            ScrollHoriz:				; XREF: DeformBgLayer
000068B0 3838 F700                  		move.w	($FFFFF700).w,d4
000068B4 6100                       		bsr.s	ScrollHoriz2
000068B6 3038 F700                  		move.w	($FFFFF700).w,d0
000068BA 0240 0010                  		andi.w	#$10,d0
000068BE 1238 F74A                  		move.b	($FFFFF74A).w,d1
000068C2 B300                       		eor.b	d1,d0
000068C4 6600                       		bne.s	locret_65B0
000068C6 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000068CC 3038 F700                  		move.w	($FFFFF700).w,d0
000068D0 9044                       		sub.w	d4,d0
000068D2 6A00                       		bpl.s	loc_65AA
000068D4 08F8 0002 F754             		bset	#2,($FFFFF754).w
000068DA 4E75                       		rts	
000068DC                            ; ===========================================================================
000068DC                            
000068DC                            loc_65AA:
000068DC 08F8 0003 F754             		bset	#3,($FFFFF754).w
000068E2                            
000068E2                            locret_65B0:
000068E2 4E75                       		rts	
000068E4                            ; End of function ScrollHoriz
000068E4                            
000068E4                            
000068E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068E4                            
000068E4                            
000068E4                            ScrollHoriz2:				; XREF: ScrollHoriz
000068E4 3038 D008                  		move.w	($FFFFD008).w,d0
000068E8 9078 F700                  		sub.w	($FFFFF700).w,d0
000068EC 0440 0090                  		subi.w	#$90,d0
000068F0 6500                       		bcs.s	loc_65F6
000068F2 0440 0010                  		subi.w	#$10,d0
000068F6 6400                       		bcc.s	loc_65CC
000068F8 4278 F73A                  		clr.w	($FFFFF73A).w
000068FC 4E75                       		rts	
000068FE                            ; ===========================================================================
000068FE                            
000068FE                            loc_65CC:
000068FE 0C40 0010                  		cmpi.w	#$10,d0
00006902 6500                       		bcs.s	loc_65D6
00006904 303C 0010                  		move.w	#$10,d0
00006908                            
00006908                            loc_65D6:
00006908 D078 F700                  		add.w	($FFFFF700).w,d0
0000690C B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006910 6D00                       		blt.s	loc_65E4
00006912 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006916                            
00006916                            loc_65E4:
00006916 3200                       		move.w	d0,d1
00006918 9278 F700                  		sub.w	($FFFFF700).w,d1
0000691C E141                       		asl.w	#8,d1
0000691E 31C0 F700                  		move.w	d0,($FFFFF700).w
00006922 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006926 4E75                       		rts	
00006928                            ; ===========================================================================
00006928                            
00006928                            loc_65F6:				; XREF: ScrollHoriz2
00006928 D078 F700                  		add.w	($FFFFF700).w,d0
0000692C B078 F728                  		cmp.w	($FFFFF728).w,d0
00006930 6EE4                       		bgt.s	loc_65E4
00006932 3038 F728                  		move.w	($FFFFF728).w,d0
00006936 60DE                       		bra.s	loc_65E4
00006938                            ; End of function ScrollHoriz2
00006938                            
00006938                            ; ===========================================================================
00006938 4A40                       		tst.w	d0
0000693A 6A00                       		bpl.s	loc_6610
0000693C 303C FFFE                  		move.w	#-2,d0
00006940 60E6                       		bra.s	loc_65F6
00006942                            ; ===========================================================================
00006942                            
00006942                            loc_6610:
00006942 303C 0002                  		move.w	#2,d0
00006946 60B6                       		bra.s	loc_65CC
00006948                            
00006948                            ; ---------------------------------------------------------------------------
00006948                            ; Subroutine to	scroll the level vertically as Sonic moves
00006948                            ; ---------------------------------------------------------------------------
00006948                            
00006948                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006948                            
00006948                            
00006948                            ScrollVertical:				; XREF: DeformBgLayer
00006948 7200                       		moveq	#0,d1
0000694A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000694E 9078 F704                  		sub.w	($FFFFF704).w,d0
00006952 0838 0002 D022             		btst	#2,($FFFFD022).w
00006958 6700                       		beq.s	loc_662A
0000695A 5B40                       		subq.w	#5,d0
0000695C                            
0000695C                            loc_662A:
0000695C 0838 0001 D022             		btst	#1,($FFFFD022).w
00006962 6700                       		beq.s	loc_664A
00006964 0640 0020                  		addi.w	#$20,d0
00006968 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000696C 6500                       		bcs.s	loc_6696
0000696E 0440 0040                  		subi.w	#$40,d0
00006972 6400                       		bcc.s	loc_6696
00006974 4A38 F75C                  		tst.b	($FFFFF75C).w
00006978 6600                       		bne.s	loc_66A8
0000697A 6000                       		bra.s	loc_6656
0000697C                            ; ===========================================================================
0000697C                            
0000697C                            loc_664A:
0000697C 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006980 6600                       		bne.s	loc_665C
00006982 4A38 F75C                  		tst.b	($FFFFF75C).w
00006986 6600                       		bne.s	loc_66A8
00006988                            
00006988                            loc_6656:
00006988 4278 F73C                  		clr.w	($FFFFF73C).w
0000698C 4E75                       		rts	
0000698E                            ; ===========================================================================
0000698E                            
0000698E                            loc_665C:
0000698E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006994 6600                       		bne.s	loc_6684
00006996 3238 D014                  		move.w	($FFFFD014).w,d1
0000699A 6A00                       		bpl.s	loc_666C
0000699C 4441                       		neg.w	d1
0000699E                            
0000699E                            loc_666C:
0000699E 0C41 0800                  		cmpi.w	#$800,d1
000069A2 6400                       		bcc.s	loc_6696
000069A4 323C 0600                  		move.w	#$600,d1
000069A8 0C40 0006                  		cmpi.w	#6,d0
000069AC 6E00                       		bgt.s	loc_66F6
000069AE 0C40 FFFA                  		cmpi.w	#-6,d0
000069B2 6D00                       		blt.s	loc_66C0
000069B4 6000                       		bra.s	loc_66AE
000069B6                            ; ===========================================================================
000069B6                            
000069B6                            loc_6684:
000069B6 323C 0200                  		move.w	#$200,d1
000069BA 0C40 0002                  		cmpi.w	#2,d0
000069BE 6E00                       		bgt.s	loc_66F6
000069C0 0C40 FFFE                  		cmpi.w	#-2,d0
000069C4 6D00                       		blt.s	loc_66C0
000069C6 6000                       		bra.s	loc_66AE
000069C8                            ; ===========================================================================
000069C8                            
000069C8                            loc_6696:
000069C8 323C 1000                  		move.w	#$1000,d1
000069CC 0C40 0010                  		cmpi.w	#$10,d0
000069D0 6E00                       		bgt.s	loc_66F6
000069D2 0C40 FFF0                  		cmpi.w	#-$10,d0
000069D6 6D00                       		blt.s	loc_66C0
000069D8 6000                       		bra.s	loc_66AE
000069DA                            ; ===========================================================================
000069DA                            
000069DA                            loc_66A8:
000069DA 7000                       		moveq	#0,d0
000069DC 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000069E0                            
000069E0                            loc_66AE:
000069E0 7200                       		moveq	#0,d1
000069E2 3200                       		move.w	d0,d1
000069E4 D278 F704                  		add.w	($FFFFF704).w,d1
000069E8 4A40                       		tst.w	d0
000069EA 6A00 0000                  		bpl.w	loc_6700
000069EE 6000 0000                  		bra.w	loc_66CC
000069F2                            ; ===========================================================================
000069F2                            
000069F2                            loc_66C0:
000069F2 4441                       		neg.w	d1
000069F4 48C1                       		ext.l	d1
000069F6 E181                       		asl.l	#8,d1
000069F8 D2B8 F704                  		add.l	($FFFFF704).w,d1
000069FC 4841                       		swap	d1
000069FE                            
000069FE                            loc_66CC:
000069FE B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006A02 6E00                       		bgt.s	loc_6724
00006A04 0C41 FF00                  		cmpi.w	#-$100,d1
00006A08 6E00                       		bgt.s	loc_66F0
00006A0A 0241 07FF                  		andi.w	#$7FF,d1
00006A0E 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006A14 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006A1A 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006A20 6000                       		bra.s	loc_6724
00006A22                            ; ===========================================================================
00006A22                            
00006A22                            loc_66F0:
00006A22 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006A26 6000                       		bra.s	loc_6724
00006A28                            ; ===========================================================================
00006A28                            
00006A28                            loc_66F6:
00006A28 48C1                       		ext.l	d1
00006A2A E181                       		asl.l	#8,d1
00006A2C D2B8 F704                  		add.l	($FFFFF704).w,d1
00006A30 4841                       		swap	d1
00006A32                            
00006A32                            loc_6700:
00006A32 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006A36 6D00                       		blt.s	loc_6724
00006A38 0441 0800                  		subi.w	#$800,d1
00006A3C 6500                       		bcs.s	loc_6720
00006A3E 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006A44 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006A4A 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006A50 6000                       		bra.s	loc_6724
00006A52                            ; ===========================================================================
00006A52                            
00006A52                            loc_6720:
00006A52 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006A56                            
00006A56                            loc_6724:
00006A56 3838 F704                  		move.w	($FFFFF704).w,d4
00006A5A 4841                       		swap	d1
00006A5C 2601                       		move.l	d1,d3
00006A5E 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006A62 E09B                       		ror.l	#8,d3
00006A64 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006A68 21C1 F704                  		move.l	d1,($FFFFF704).w
00006A6C 3038 F704                  		move.w	($FFFFF704).w,d0
00006A70 0240 0010                  		andi.w	#$10,d0
00006A74 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006A78 B300                       		eor.b	d1,d0
00006A7A 6600                       		bne.s	locret_6766
00006A7C 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006A82 3038 F704                  		move.w	($FFFFF704).w,d0
00006A86 9044                       		sub.w	d4,d0
00006A88 6A00                       		bpl.s	loc_6760
00006A8A 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006A90 4E75                       		rts	
00006A92                            ; ===========================================================================
00006A92                            
00006A92                            loc_6760:
00006A92 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006A98                            
00006A98                            locret_6766:
00006A98 4E75                       		rts	
00006A9A                            ; End of function ScrollVertical
00006A9A                            
00006A9A                            
00006A9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A9A                            
00006A9A                            
00006A9A                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006A9A 2438 F708                  		move.l	($FFFFF708).w,d2
00006A9E 2002                       		move.l	d2,d0
00006AA0 D084                       		add.l	d4,d0
00006AA2 21C0 F708                  		move.l	d0,($FFFFF708).w
00006AA6 2200                       		move.l	d0,d1
00006AA8 4841                       		swap	d1
00006AAA 0241 0010                  		andi.w	#$10,d1
00006AAE 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006AB2 B701                       		eor.b	d3,d1
00006AB4 6600                       		bne.s	loc_679C
00006AB6 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006ABC 9082                       		sub.l	d2,d0
00006ABE 6A00                       		bpl.s	loc_6796
00006AC0 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006AC6 6000                       		bra.s	loc_679C
00006AC8                            ; ===========================================================================
00006AC8                            
00006AC8                            loc_6796:
00006AC8 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006ACE                            
00006ACE                            loc_679C:
00006ACE 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006AD2 2003                       		move.l	d3,d0
00006AD4 D085                       		add.l	d5,d0
00006AD6 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006ADA 2200                       		move.l	d0,d1
00006ADC 4841                       		swap	d1
00006ADE 0241 0010                  		andi.w	#$10,d1
00006AE2 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006AE6 B501                       		eor.b	d2,d1
00006AE8 6600                       		bne.s	locret_67D0
00006AEA 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006AF0 9083                       		sub.l	d3,d0
00006AF2 6A00                       		bpl.s	loc_67CA
00006AF4 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006AFA 4E75                       		rts	
00006AFC                            ; ===========================================================================
00006AFC                            
00006AFC                            loc_67CA:
00006AFC 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006B02                            
00006B02                            locret_67D0:
00006B02 4E75                       		rts	
00006B04                            ; End of function ScrollBlock1
00006B04                            
00006B04                            
00006B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B04                            
00006B04                            
00006B04                            ScrollBlock2:				; XREF: Deform_SLZ
00006B04 2438 F708                  		move.l	($FFFFF708).w,d2
00006B08 2002                       		move.l	d2,d0
00006B0A D084                       		add.l	d4,d0
00006B0C 21C0 F708                  		move.l	d0,($FFFFF708).w
00006B10 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006B14 2003                       		move.l	d3,d0
00006B16 D085                       		add.l	d5,d0
00006B18 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006B1C 2200                       		move.l	d0,d1
00006B1E 4841                       		swap	d1
00006B20 0241 0010                  		andi.w	#$10,d1
00006B24 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006B28 B501                       		eor.b	d2,d1
00006B2A 6600                       		bne.s	locret_6812
00006B2C 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006B32 9083                       		sub.l	d3,d0
00006B34 6A00                       		bpl.s	loc_680C
00006B36 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006B3C 4E75                       		rts	
00006B3E                            ; ===========================================================================
00006B3E                            
00006B3E                            loc_680C:
00006B3E 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006B44                            
00006B44                            locret_6812:
00006B44 4E75                       		rts	
00006B46                            ; End of function ScrollBlock2
00006B46                            
00006B46                            
00006B46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B46                            
00006B46                            
00006B46                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006B46 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006B4A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006B4E 3200                       		move.w	d0,d1
00006B50 0241 0010                  		andi.w	#$10,d1
00006B54 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006B58 B501                       		eor.b	d2,d1
00006B5A 6600                       		bne.s	locret_6842
00006B5C 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006B62 9043                       		sub.w	d3,d0
00006B64 6A00                       		bpl.s	loc_683C
00006B66 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006B6C 4E75                       		rts	
00006B6E                            ; ===========================================================================
00006B6E                            
00006B6E                            loc_683C:
00006B6E 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006B74                            
00006B74                            locret_6842:
00006B74 4E75                       		rts	
00006B76                            ; End of function ScrollBlock3
00006B76                            
00006B76                            
00006B76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B76                            
00006B76                            
00006B76                            ScrollBlock4:				; XREF: Deform_GHZ
00006B76 3438 F710                  		move.w	($FFFFF710).w,d2
00006B7A 3638 F714                  		move.w	($FFFFF714).w,d3
00006B7E 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006B82 48C0                       		ext.l	d0
00006B84 EF80                       		asl.l	#7,d0
00006B86 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006B8A 3038 F710                  		move.w	($FFFFF710).w,d0
00006B8E 0240 0010                  		andi.w	#$10,d0
00006B92 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006B96 B300                       		eor.b	d1,d0
00006B98 6600                       		bne.s	locret_6884
00006B9A 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006BA0 3038 F710                  		move.w	($FFFFF710).w,d0
00006BA4 9042                       		sub.w	d2,d0
00006BA6 6A00                       		bpl.s	loc_687E
00006BA8 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006BAE 6000                       		bra.s	locret_6884
00006BB0                            ; ===========================================================================
00006BB0                            
00006BB0                            loc_687E:
00006BB0 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006BB6                            
00006BB6                            locret_6884:
00006BB6 4E75                       		rts	
00006BB8                            ; End of function ScrollBlock4
00006BB8                            
00006BB8                            
00006BB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BB8                            
00006BB8                            
00006BB8                            sub_6886:				; XREF: loc_C44
00006BB8 4BF9 00C0 0004             		lea	($C00004).l,a5
00006BBE 4DF9 00C0 0000             		lea	($C00000).l,a6
00006BC4 45F8 F756                  		lea	($FFFFF756).w,a2
00006BC8 47F8 F708                  		lea	($FFFFF708).w,a3
00006BCC 49F8 A440                  		lea	($FFFFA440).w,a4
00006BD0 343C 6000                  		move.w	#$6000,d2
00006BD4 6100 0000                  		bsr.w	sub_6954
00006BD8 45F8 F758                  		lea	($FFFFF758).w,a2
00006BDC 47F8 F710                  		lea	($FFFFF710).w,a3
00006BE0 6000 0000                  		bra.w	sub_69F4
00006BE4                            ; End of function sub_6886
00006BE4                            
00006BE4                            ; ---------------------------------------------------------------------------
00006BE4                            ; Subroutine to	display	correct	tiles as you move
00006BE4                            ; ---------------------------------------------------------------------------
00006BE4                            
00006BE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BE4                            
00006BE4                            
00006BE4                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006BE4 4BF9 00C0 0004             		lea	($C00004).l,a5
00006BEA 4DF9 00C0 0000             		lea	($C00000).l,a6
00006BF0 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006BF4 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006BF8 49F8 A440                  		lea	($FFFFA440).w,a4
00006BFC 343C 6000                  		move.w	#$6000,d2
00006C00 6100 0000                  		bsr.w	sub_6954
00006C04 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006C08 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006C0C 6100 0000                  		bsr.w	sub_69F4
00006C10 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006C14 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006C18 49F8 A400                  		lea	($FFFFA400).w,a4
00006C1C 343C 4000                  		move.w	#$4000,d2
00006C20 4A12                       		tst.b	(a2)
00006C22 6700                       		beq.s	locret_6952
00006C24 0892 0000                  		bclr	#0,(a2)
00006C28 6700                       		beq.s	loc_6908
00006C2A 78F0                       		moveq	#-$10,d4
00006C2C 7AF0                       		moveq	#-$10,d5
00006C2E 6100 0000                  		bsr.w	sub_6C20
00006C32 78F0                       		moveq	#-$10,d4
00006C34 7AF0                       		moveq	#-$10,d5
00006C36 6100 0000                  		bsr.w	sub_6AD8
00006C3A                            
00006C3A                            loc_6908:
00006C3A 0892 0001                  		bclr	#1,(a2)
00006C3E 6700                       		beq.s	loc_6922
00006C40 383C 00E0                  		move.w	#$E0,d4
00006C44 7AF0                       		moveq	#-$10,d5
00006C46 6100 0000                  		bsr.w	sub_6C20
00006C4A 383C 00E0                  		move.w	#$E0,d4
00006C4E 7AF0                       		moveq	#-$10,d5
00006C50 6100 0000                  		bsr.w	sub_6AD8
00006C54                            
00006C54                            loc_6922:
00006C54 0892 0002                  		bclr	#2,(a2)
00006C58 6700                       		beq.s	loc_6938
00006C5A 78F0                       		moveq	#-$10,d4
00006C5C 7AF0                       		moveq	#-$10,d5
00006C5E 6100 0000                  		bsr.w	sub_6C20
00006C62 78F0                       		moveq	#-$10,d4
00006C64 7AF0                       		moveq	#-$10,d5
00006C66 6100 0000                  		bsr.w	sub_6B04
00006C6A                            
00006C6A                            loc_6938:
00006C6A 0892 0003                  		bclr	#3,(a2)
00006C6E 6700                       		beq.s	locret_6952
00006C70 78F0                       		moveq	#-$10,d4
00006C72 3A3C 0140                  		move.w	#$140,d5
00006C76 6100 0000                  		bsr.w	sub_6C20
00006C7A 78F0                       		moveq	#-$10,d4
00006C7C 3A3C 0140                  		move.w	#$140,d5
00006C80 6100 0000                  		bsr.w	sub_6B04
00006C84                            
00006C84                            locret_6952:
00006C84 4E75                       		rts	
00006C86                            ; End of function LoadTilesAsYouMove
00006C86                            
00006C86                            
00006C86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C86                            
00006C86                            
00006C86                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006C86 4A12                       		tst.b	(a2)
00006C88 6700 0000                  		beq.w	locret_69F2
00006C8C 0892 0000                  		bclr	#0,(a2)
00006C90 6700                       		beq.s	loc_6972
00006C92 78F0                       		moveq	#-$10,d4
00006C94 7AF0                       		moveq	#-$10,d5
00006C96 6100 0000                  		bsr.w	sub_6C20
00006C9A 78F0                       		moveq	#-$10,d4
00006C9C 7AF0                       		moveq	#-$10,d5
00006C9E 7C1F                       		moveq	#$1F,d6
00006CA0 6100 0000                  		bsr.w	sub_6ADA
00006CA4                            
00006CA4                            loc_6972:
00006CA4 0892 0001                  		bclr	#1,(a2)
00006CA8 6700                       		beq.s	loc_698E
00006CAA 383C 00E0                  		move.w	#$E0,d4
00006CAE 7AF0                       		moveq	#-$10,d5
00006CB0 6100 0000                  		bsr.w	sub_6C20
00006CB4 383C 00E0                  		move.w	#$E0,d4
00006CB8 7AF0                       		moveq	#-$10,d5
00006CBA 7C1F                       		moveq	#$1F,d6
00006CBC 6100 0000                  		bsr.w	sub_6ADA
00006CC0                            
00006CC0                            loc_698E:
00006CC0 0892 0002                  		bclr	#2,(a2)
00006CC4 6700                       		beq.s	loc_69BE
00006CC6 78F0                       		moveq	#-$10,d4
00006CC8 7AF0                       		moveq	#-$10,d5
00006CCA 6100 0000                  		bsr.w	sub_6C20
00006CCE 78F0                       		moveq	#-$10,d4
00006CD0 7AF0                       		moveq	#-$10,d5
00006CD2 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006CD6 322B 0004                  		move.w	4(a3),d1
00006CDA 0241 FFF0                  		andi.w	#-$10,d1
00006CDE 9C41                       		sub.w	d1,d6
00006CE0 6D00                       		blt.s	loc_69BE
00006CE2 E84E                       		lsr.w	#4,d6
00006CE4 0C46 000F                  		cmpi.w	#$F,d6
00006CE8 6500                       		bcs.s	loc_69BA
00006CEA 7C0F                       		moveq	#$F,d6
00006CEC                            
00006CEC                            loc_69BA:
00006CEC 6100 0000                  		bsr.w	sub_6B06
00006CF0                            
00006CF0                            loc_69BE:
00006CF0 0892 0003                  		bclr	#3,(a2)
00006CF4 6700                       		beq.s	locret_69F2
00006CF6 78F0                       		moveq	#-$10,d4
00006CF8 3A3C 0140                  		move.w	#$140,d5
00006CFC 6100 0000                  		bsr.w	sub_6C20
00006D00 78F0                       		moveq	#-$10,d4
00006D02 3A3C 0140                  		move.w	#$140,d5
00006D06 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006D0A 322B 0004                  		move.w	4(a3),d1
00006D0E 0241 FFF0                  		andi.w	#-$10,d1
00006D12 9C41                       		sub.w	d1,d6
00006D14 6D00                       		blt.s	locret_69F2
00006D16 E84E                       		lsr.w	#4,d6
00006D18 0C46 000F                  		cmpi.w	#$F,d6
00006D1C 6500                       		bcs.s	loc_69EE
00006D1E 7C0F                       		moveq	#$F,d6
00006D20                            
00006D20                            loc_69EE:
00006D20 6100 0000                  		bsr.w	sub_6B06
00006D24                            
00006D24                            locret_69F2:
00006D24 4E75                       		rts	
00006D26                            ; End of function sub_6954
00006D26                            
00006D26                            
00006D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D26                            
00006D26                            
00006D26                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006D26 4A12                       		tst.b	(a2)
00006D28 6700 0000                  		beq.w	locret_6A80
00006D2C 0892 0002                  		bclr	#2,(a2)
00006D30 6700                       		beq.s	loc_6A3E
00006D32 0C53 0010                  		cmpi.w	#$10,(a3)
00006D36 6500                       		bcs.s	loc_6A3E
00006D38 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006D3C 322B 0004                  		move.w	4(a3),d1
00006D40 0241 FFF0                  		andi.w	#-$10,d1
00006D44 9841                       		sub.w	d1,d4
00006D46 3F04                       		move.w	d4,-(sp)
00006D48 7AF0                       		moveq	#-$10,d5
00006D4A 6100 0000                  		bsr.w	sub_6C20
00006D4E 381F                       		move.w	(sp)+,d4
00006D50 7AF0                       		moveq	#-$10,d5
00006D52 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006D56 322B 0004                  		move.w	4(a3),d1
00006D5A 0241 FFF0                  		andi.w	#-$10,d1
00006D5E 9C41                       		sub.w	d1,d6
00006D60 6D00                       		blt.s	loc_6A3E
00006D62 E84E                       		lsr.w	#4,d6
00006D64 0446 000E                  		subi.w	#$E,d6
00006D68 6400                       		bcc.s	loc_6A3E
00006D6A 4446                       		neg.w	d6
00006D6C 6100 0000                  		bsr.w	sub_6B06
00006D70                            
00006D70                            loc_6A3E:
00006D70 0892 0003                  		bclr	#3,(a2)
00006D74 6700                       		beq.s	locret_6A80
00006D76 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006D7A 322B 0004                  		move.w	4(a3),d1
00006D7E 0241 FFF0                  		andi.w	#-$10,d1
00006D82 9841                       		sub.w	d1,d4
00006D84 3F04                       		move.w	d4,-(sp)
00006D86 3A3C 0140                  		move.w	#$140,d5
00006D8A 6100 0000                  		bsr.w	sub_6C20
00006D8E 381F                       		move.w	(sp)+,d4
00006D90 3A3C 0140                  		move.w	#$140,d5
00006D94 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006D98 322B 0004                  		move.w	4(a3),d1
00006D9C 0241 FFF0                  		andi.w	#-$10,d1
00006DA0 9C41                       		sub.w	d1,d6
00006DA2 6D00                       		blt.s	locret_6A80
00006DA4 E84E                       		lsr.w	#4,d6
00006DA6 0446 000E                  		subi.w	#$E,d6
00006DAA 6400                       		bcc.s	locret_6A80
00006DAC 4446                       		neg.w	d6
00006DAE 6100 0000                  		bsr.w	sub_6B06
00006DB2                            
00006DB2                            locret_6A80:
00006DB2 4E75                       		rts	
00006DB4                            ; End of function sub_69F4
00006DB4                            
00006DB4                            ; ===========================================================================
00006DB4 4A12                       		tst.b	(a2)
00006DB6 6700                       		beq.s	locret_6AD6
00006DB8 0892 0002                  		bclr	#2,(a2)
00006DBC 6700                       		beq.s	loc_6AAC
00006DBE 383C 00D0                  		move.w	#$D0,d4
00006DC2 322B 0004                  		move.w	4(a3),d1
00006DC6 0241 FFF0                  		andi.w	#-$10,d1
00006DCA 9841                       		sub.w	d1,d4
00006DCC 3F04                       		move.w	d4,-(sp)
00006DCE 7AF0                       		moveq	#-$10,d5
00006DD0 6100 0000                  		bsr.w	sub_6C3C
00006DD4 381F                       		move.w	(sp)+,d4
00006DD6 7AF0                       		moveq	#-$10,d5
00006DD8 7C02                       		moveq	#2,d6
00006DDA 6100 0000                  		bsr.w	sub_6B06
00006DDE                            
00006DDE                            loc_6AAC:
00006DDE 0892 0003                  		bclr	#3,(a2)
00006DE2 6700                       		beq.s	locret_6AD6
00006DE4 383C 00D0                  		move.w	#$D0,d4
00006DE8 322B 0004                  		move.w	4(a3),d1
00006DEC 0241 FFF0                  		andi.w	#-$10,d1
00006DF0 9841                       		sub.w	d1,d4
00006DF2 3F04                       		move.w	d4,-(sp)
00006DF4 3A3C 0140                  		move.w	#$140,d5
00006DF8 6100 0000                  		bsr.w	sub_6C3C
00006DFC 381F                       		move.w	(sp)+,d4
00006DFE 3A3C 0140                  		move.w	#$140,d5
00006E02 7C02                       		moveq	#2,d6
00006E04 6100 0000                  		bsr.w	sub_6B06
00006E08                            
00006E08                            locret_6AD6:
00006E08 4E75                       		rts	
00006E0A                            
00006E0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E0A                            
00006E0A                            
00006E0A                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006E0A 7C15                       		moveq	#$15,d6
00006E0C                            ; End of function sub_6AD8
00006E0C                            
00006E0C                            
00006E0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E0C                            
00006E0C                            
00006E0C                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006E0C 2E3C 0080 0000             		move.l	#$800000,d7
00006E12 2200                       		move.l	d0,d1
00006E14                            
00006E14                            loc_6AE2:
00006E14 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006E18 6100 0000                  		bsr.w	sub_6BD6
00006E1C 2001                       		move.l	d1,d0
00006E1E 6100 0000                  		bsr.w	sub_6B32
00006E22 5801                       		addq.b	#4,d1
00006E24 0201 007F                  		andi.b	#$7F,d1
00006E28 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006E2C 0645 0010                  		addi.w	#$10,d5
00006E30 51CE FFE2                  		dbf	d6,loc_6AE2
00006E34 4E75                       		rts	
00006E36                            ; End of function sub_6ADA
00006E36                            
00006E36                            
00006E36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E36                            
00006E36                            
00006E36                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006E36 7C0F                       		moveq	#$F,d6
00006E38                            ; End of function sub_6B04
00006E38                            
00006E38                            
00006E38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E38                            
00006E38                            
00006E38                            sub_6B06:				; XREF: sub_6954
00006E38 2E3C 0080 0000             		move.l	#$800000,d7
00006E3E 2200                       		move.l	d0,d1
00006E40                            
00006E40                            loc_6B0E:
00006E40 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006E44 6100 0000                  		bsr.w	sub_6BD6
00006E48 2001                       		move.l	d1,d0
00006E4A 6100 0000                  		bsr.w	sub_6B32
00006E4E 0641 0100                  		addi.w	#$100,d1
00006E52 0241 0FFF                  		andi.w	#$FFF,d1
00006E56 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006E5A 0644 0010                  		addi.w	#$10,d4
00006E5E 51CE FFE0                  		dbf	d6,loc_6B0E
00006E62 4E75                       		rts	
00006E64                            ; End of function sub_6B06
00006E64                            
00006E64                            
00006E64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E64                            
00006E64                            
00006E64                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006E64 8042                       		or.w	d2,d0
00006E66 4840                       		swap	d0
00006E68 0810 0004                  		btst	#4,(a0)
00006E6C 6600                       		bne.s	loc_6B6E
00006E6E 0810 0003                  		btst	#3,(a0)
00006E72 6600                       		bne.s	loc_6B4E
00006E74 2A80                       		move.l	d0,(a5)
00006E76 2C99                       		move.l	(a1)+,(a6)
00006E78 D087                       		add.l	d7,d0
00006E7A 2A80                       		move.l	d0,(a5)
00006E7C 2C99                       		move.l	(a1)+,(a6)
00006E7E 4E75                       		rts	
00006E80                            ; ===========================================================================
00006E80                            
00006E80                            loc_6B4E:
00006E80 2A80                       		move.l	d0,(a5)
00006E82 2819                       		move.l	(a1)+,d4
00006E84 0A84 0800 0800             		eori.l	#$8000800,d4
00006E8A 4844                       		swap	d4
00006E8C 2C84                       		move.l	d4,(a6)
00006E8E D087                       		add.l	d7,d0
00006E90 2A80                       		move.l	d0,(a5)
00006E92 2819                       		move.l	(a1)+,d4
00006E94 0A84 0800 0800             		eori.l	#$8000800,d4
00006E9A 4844                       		swap	d4
00006E9C 2C84                       		move.l	d4,(a6)
00006E9E 4E75                       		rts	
00006EA0                            ; ===========================================================================
00006EA0                            
00006EA0                            loc_6B6E:
00006EA0 0810 0003                  		btst	#3,(a0)
00006EA4 6600                       		bne.s	loc_6B90
00006EA6 2A80                       		move.l	d0,(a5)
00006EA8 2A19                       		move.l	(a1)+,d5
00006EAA 2819                       		move.l	(a1)+,d4
00006EAC 0A84 1000 1000             		eori.l	#$10001000,d4
00006EB2 2C84                       		move.l	d4,(a6)
00006EB4 D087                       		add.l	d7,d0
00006EB6 2A80                       		move.l	d0,(a5)
00006EB8 0A85 1000 1000             		eori.l	#$10001000,d5
00006EBE 2C85                       		move.l	d5,(a6)
00006EC0 4E75                       		rts	
00006EC2                            ; ===========================================================================
00006EC2                            
00006EC2                            loc_6B90:
00006EC2 2A80                       		move.l	d0,(a5)
00006EC4 2A19                       		move.l	(a1)+,d5
00006EC6 2819                       		move.l	(a1)+,d4
00006EC8 0A84 1800 1800             		eori.l	#$18001800,d4
00006ECE 4844                       		swap	d4
00006ED0 2C84                       		move.l	d4,(a6)
00006ED2 D087                       		add.l	d7,d0
00006ED4 2A80                       		move.l	d0,(a5)
00006ED6 0A85 1800 1800             		eori.l	#$18001800,d5
00006EDC 4845                       		swap	d5
00006EDE 2C85                       		move.l	d5,(a6)
00006EE0 4E75                       		rts	
00006EE2                            ; End of function sub_6B32
00006EE2                            
00006EE2                            ; ===========================================================================
00006EE2 4E75                       		rts	
00006EE4                            ; ===========================================================================
00006EE4 2A80                       		move.l	d0,(a5)
00006EE6 3A3C 2000                  		move.w	#$2000,d5
00006EEA 3819                       		move.w	(a1)+,d4
00006EEC D845                       		add.w	d5,d4
00006EEE 3C84                       		move.w	d4,(a6)
00006EF0 3819                       		move.w	(a1)+,d4
00006EF2 D845                       		add.w	d5,d4
00006EF4 3C84                       		move.w	d4,(a6)
00006EF6 D087                       		add.l	d7,d0
00006EF8 2A80                       		move.l	d0,(a5)
00006EFA 3819                       		move.w	(a1)+,d4
00006EFC D845                       		add.w	d5,d4
00006EFE 3C84                       		move.w	d4,(a6)
00006F00 3819                       		move.w	(a1)+,d4
00006F02 D845                       		add.w	d5,d4
00006F04 3C84                       		move.w	d4,(a6)
00006F06 4E75                       		rts	
00006F08                            
00006F08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F08                            
00006F08                            
00006F08                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00006F08 43F8 B000                  		lea	($FFFFB000).w,a1
00006F0C D86B 0004                  		add.w	4(a3),d4
00006F10 DA53                       		add.w	(a3),d5
00006F12 3604                       		move.w	d4,d3
00006F14 E24B                       		lsr.w	#1,d3
00006F16 0243 0380                  		andi.w	#$380,d3
00006F1A E64D                       		lsr.w	#3,d5
00006F1C 3005                       		move.w	d5,d0
00006F1E EA48                       		lsr.w	#5,d0
00006F20 0240 007F                  		andi.w	#$7F,d0
00006F24 D043                       		add.w	d3,d0
00006F26 76FF                       		moveq	#-1,d3
00006F28 1634 0000                  		move.b	(a4,d0.w),d3
00006F2C 6700                       		beq.s	locret_6C1E
00006F2E 5303                       		subq.b	#1,d3
00006F30 0243 007F                  		andi.w	#$7F,d3
00006F34 EE5B                       		ror.w	#7,d3
00006F36 D844                       		add.w	d4,d4
00006F38 0244 01E0                  		andi.w	#$1E0,d4
00006F3C 0245 001E                  		andi.w	#$1E,d5
00006F40 D644                       		add.w	d4,d3
00006F42 D645                       		add.w	d5,d3
00006F44 2043                       		movea.l	d3,a0
00006F46 3610                       		move.w	(a0),d3
00006F48 0243 03FF                  		andi.w	#$3FF,d3
00006F4C E74B                       		lsl.w	#3,d3
00006F4E D2C3                       		adda.w	d3,a1
00006F50                            
00006F50                            locret_6C1E:
00006F50 4E75                       		rts	
00006F52                            ; End of function sub_6BD6
00006F52                            
00006F52                            
00006F52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F52                            
00006F52                            
00006F52                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00006F52 D86B 0004                  		add.w	4(a3),d4
00006F56 DA53                       		add.w	(a3),d5
00006F58 0244 00F0                  		andi.w	#$F0,d4
00006F5C 0245 01F0                  		andi.w	#$1F0,d5
00006F60 E94C                       		lsl.w	#4,d4
00006F62 E44D                       		lsr.w	#2,d5
00006F64 D845                       		add.w	d5,d4
00006F66 7003                       		moveq	#3,d0
00006F68 4840                       		swap	d0
00006F6A 3004                       		move.w	d4,d0
00006F6C 4E75                       		rts	
00006F6E                            ; End of function sub_6C20
00006F6E                            
00006F6E                            
00006F6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F6E                            ; not used
00006F6E                            
00006F6E                            
00006F6E                            sub_6C3C:
00006F6E D86B 0004                  		add.w	4(a3),d4
00006F72 DA53                       		add.w	(a3),d5
00006F74 0244 00F0                  		andi.w	#$F0,d4
00006F78 0245 01F0                  		andi.w	#$1F0,d5
00006F7C E94C                       		lsl.w	#4,d4
00006F7E E44D                       		lsr.w	#2,d5
00006F80 D845                       		add.w	d5,d4
00006F82 7002                       		moveq	#2,d0
00006F84 4840                       		swap	d0
00006F86 3004                       		move.w	d4,d0
00006F88 4E75                       		rts	
00006F8A                            ; End of function sub_6C3C
00006F8A                            
00006F8A                            ; ---------------------------------------------------------------------------
00006F8A                            ; Subroutine to	load tiles as soon as the level	appears
00006F8A                            ; ---------------------------------------------------------------------------
00006F8A                            
00006F8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F8A                            
00006F8A                            
00006F8A                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00006F8A 4BF9 00C0 0004             		lea	($C00004).l,a5
00006F90 4DF9 00C0 0000             		lea	($C00000).l,a6
00006F96 47F8 F700                  		lea	($FFFFF700).w,a3
00006F9A 49F8 A400                  		lea	($FFFFA400).w,a4
00006F9E 343C 4000                  		move.w	#$4000,d2
00006FA2 6100                       		bsr.s	LoadTilesFromStart2
00006FA4 47F8 F708                  		lea	($FFFFF708).w,a3
00006FA8 49F8 A440                  		lea	($FFFFA440).w,a4
00006FAC 343C 6000                  		move.w	#$6000,d2
00006FB0                            ; End of function LoadTilesFromStart
00006FB0                            
00006FB0                            
00006FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FB0                            
00006FB0                            
00006FB0                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00006FB0 78F0                       		moveq	#-$10,d4
00006FB2 7C0F                       		moveq	#$F,d6
00006FB4                            
00006FB4                            loc_6C82:
00006FB4 48E7 0E00                  		movem.l	d4-d6,-(sp)
00006FB8 7A00                       		moveq	#0,d5
00006FBA 3204                       		move.w	d4,d1
00006FBC 6100 FF94                  		bsr.w	sub_6C20
00006FC0 3801                       		move.w	d1,d4
00006FC2 7A00                       		moveq	#0,d5
00006FC4 7C1F                       		moveq	#$1F,d6
00006FC6 6100 FE44                  		bsr.w	sub_6ADA
00006FCA 4CDF 0070                  		movem.l	(sp)+,d4-d6
00006FCE 0644 0010                  		addi.w	#$10,d4
00006FD2 51CE FFE0                  		dbf	d6,loc_6C82
00006FD6 4E75                       		rts	
00006FD8                            ; End of function LoadTilesFromStart2
00006FD8                            
00006FD8                            ; ---------------------------------------------------------------------------
00006FD8                            ; Main Load Block loading subroutine
00006FD8                            ; ---------------------------------------------------------------------------
00006FD8                            
00006FD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FD8                            
00006FD8                            
00006FD8                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00006FD8 7000                       		moveq	#0,d0
00006FDA 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006FDE E948                       		lsl.w	#4,d0
00006FE0 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00006FE6 45F2 0000                  		lea	(a2,d0.w),a2
00006FEA 2F0A                       		move.l	a2,-(sp)
00006FEC 588A                       		addq.l	#4,a2
00006FEE 205A                       		movea.l	(a2)+,a0
00006FF0 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00006FF4 303C 0000                  		move.w	#0,d0
00006FF8 6100 A944                  		bsr.w	EniDec
00006FFC 205A                       		movea.l	(a2)+,a0
00006FFE 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007004 6100 AAB6                  		bsr.w	KosDec
00007008 6100 0000                  		bsr.w	LevelLayoutLoad
0000700C 301A                       		move.w	(a2)+,d0
0000700E 3012                       		move.w	(a2),d0
00007010 0240 00FF                  		andi.w	#$FF,d0
00007014 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
0000701A 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
0000701C 700C                       		moveq	#$C,d0		; use SB3 pallet
0000701E                            
0000701E                            MLB_ChkSBZPal:
0000701E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007024 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007026 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000702C 6600                       		bne.s	MLB_NormalPal	; if not, branch
0000702E                            
0000702E                            MLB_UsePal0E:
0000702E 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007030                            
00007030                            MLB_NormalPal:
00007030 6100 B2EA                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007034 245F                       		movea.l	(sp)+,a2
00007036 584A                       		addq.w	#4,a2
00007038 7000                       		moveq	#0,d0
0000703A 1012                       		move.b	(a2),d0
0000703C 6700                       		beq.s	locret_6D10
0000703E 6100 A760                  		bsr.w	LoadPLC		; load pattern load cues
00007042                            
00007042                            locret_6D10:
00007042 4E75                       		rts	
00007044                            ; End of function MainLoadBlockLoad
00007044                            
00007044                            ; ---------------------------------------------------------------------------
00007044                            ; Level	layout loading subroutine
00007044                            ; ---------------------------------------------------------------------------
00007044                            
00007044                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007044                            
00007044                            
00007044                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007044 47F8 A400                  		lea	($FFFFA400).w,a3
00007048 323C 01FF                  		move.w	#$1FF,d1
0000704C 7000                       		moveq	#0,d0
0000704E                            
0000704E                            LevLoad_ClrRam:
0000704E 26C0                       		move.l	d0,(a3)+
00007050 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007054                            
00007054 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007058 7200                       		moveq	#0,d1
0000705A 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
0000705E 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007062 7202                       		moveq	#2,d1
00007064                            ; End of function LevelLayoutLoad
00007064                            
00007064                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007064                            
00007064                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007064                            
00007064                            
00007064                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007064 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007068 ED08                       		lsl.b	#6,d0
0000706A EA48                       		lsr.w	#5,d0
0000706C 3400                       		move.w	d0,d2
0000706E D040                       		add.w	d0,d0
00007070 D042                       		add.w	d2,d0
00007072 D041                       		add.w	d1,d0
00007074 43F9 0000 0000             		lea	(Level_Index).l,a1
0000707A 3031 0000                  		move.w	(a1,d0.w),d0
0000707E 43F1 0000                  		lea	(a1,d0.w),a1
00007082 7200                       		moveq	#0,d1
00007084 3401                       		move.w	d1,d2
00007086 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007088 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000708A                            
0000708A                            LevLoad_NumRows:
0000708A 3001                       		move.w	d1,d0
0000708C 204B                       		movea.l	a3,a0
0000708E                            
0000708E                            LevLoad_Row:
0000708E 10D9                       		move.b	(a1)+,(a0)+
00007090 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007094 47EB 0080                  		lea	$80(a3),a3	; do next row
00007098 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000709C 4E75                       		rts	
0000709E                            ; End of function LevelLayoutLoad2
0000709E                            
0000709E                            ; ---------------------------------------------------------------------------
0000709E                            ; Dynamic screen resize	loading	subroutine
0000709E                            ; ---------------------------------------------------------------------------
0000709E                            
0000709E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000709E                            
0000709E                            
0000709E                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000709E 7000                       		moveq	#0,d0
000070A0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000070A4 D040                       		add.w	d0,d0
000070A6 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000070AA 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000070AE 7202                       		moveq	#2,d1
000070B0 3038 F726                  		move.w	($FFFFF726).w,d0
000070B4 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000070B8 6700                       		beq.s	locret_6DAA
000070BA 6400                       		bcc.s	loc_6DAC
000070BC 4441                       		neg.w	d1
000070BE 3038 F704                  		move.w	($FFFFF704).w,d0
000070C2 B078 F726                  		cmp.w	($FFFFF726).w,d0
000070C6 6300                       		bls.s	loc_6DA0
000070C8 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000070CC 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000070D2                            
000070D2                            loc_6DA0:
000070D2 D378 F72E                  		add.w	d1,($FFFFF72E).w
000070D6 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000070DC                            
000070DC                            locret_6DAA:
000070DC 4E75                       		rts	
000070DE                            ; ===========================================================================
000070DE                            
000070DE                            loc_6DAC:				; XREF: DynScrResizeLoad
000070DE 3038 F704                  		move.w	($FFFFF704).w,d0
000070E2 5040                       		addq.w	#8,d0
000070E4 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000070E8 6500                       		bcs.s	loc_6DC4
000070EA 0838 0001 D022             		btst	#1,($FFFFD022).w
000070F0 6700                       		beq.s	loc_6DC4
000070F2 D241                       		add.w	d1,d1
000070F4 D241                       		add.w	d1,d1
000070F6                            
000070F6                            loc_6DC4:
000070F6 D378 F72E                  		add.w	d1,($FFFFF72E).w
000070FA 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007100 4E75                       		rts	
00007102                            ; End of function DynScrResizeLoad
00007102                            
00007102                            ; ===========================================================================
00007102                            ; ---------------------------------------------------------------------------
00007102                            ; Offset index for dynamic screen resizing
00007102                            ; ---------------------------------------------------------------------------
00007102 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007106 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
0000710A 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
0000710E 0000                       		dc.w Resize_Ending-Resize_Index
00007110                            ; ===========================================================================
00007110                            ; ---------------------------------------------------------------------------
00007110                            ; Green	Hill Zone dynamic screen resizing
00007110                            ; ---------------------------------------------------------------------------
00007110                            
00007110                            Resize_GHZ:				; XREF: Resize_Index
00007110 7000                       		moveq	#0,d0
00007112 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007116 D040                       		add.w	d0,d0
00007118 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
0000711C 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007120                            ; ===========================================================================
00007120 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007122 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007124 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007126                            ; ===========================================================================
00007126                            
00007126                            Resize_GHZ1:
00007126 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
0000712C 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007132 6500                       		bcs.s	locret_6E08	; if not, branch
00007134 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
0000713A                            
0000713A                            locret_6E08:
0000713A 4E75                       		rts	
0000713C                            ; ===========================================================================
0000713C                            
0000713C                            Resize_GHZ2:
0000713C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007142 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007148 6500                       		bcs.s	locret_6E3A
0000714A 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007150 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007156 6500                       		bcs.s	locret_6E3A
00007158 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000715E 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007164 6500                       		bcs.s	locret_6E3A
00007166 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000716C                            
0000716C                            locret_6E3A:
0000716C 4E75                       		rts	
0000716E                            ; ===========================================================================
0000716E                            
0000716E                            Resize_GHZ3:
0000716E 7000                       		moveq	#0,d0
00007170 1038 F742                  		move.b	($FFFFF742).w,d0
00007174 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007178 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000717C                            ; ===========================================================================
0000717C 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
0000717E 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007180 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007182                            ; ===========================================================================
00007182                            
00007182                            Resize_GHZ3main:
00007182 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007188 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000718E 6500                       		bcs.s	locret_6E96
00007190 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007196 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000719C 6500                       		bcs.s	locret_6E96
0000719E 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000071A4 6500                       		bcs.s	loc_6E98
000071A6 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000071AC 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000071B2 6400                       		bcc.s	loc_6E8E
000071B4 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000071BA 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000071C0                            
000071C0                            loc_6E8E:
000071C0 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000071C6 6400                       		bcc.s	loc_6E98
000071C8                            
000071C8                            locret_6E96:
000071C8 4E75                       		rts	
000071CA                            ; ===========================================================================
000071CA                            
000071CA                            loc_6E98:
000071CA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000071D0 5438 F742                  		addq.b	#2,($FFFFF742).w
000071D4 4E75                       		rts	
000071D6                            ; ===========================================================================
000071D6                            
000071D6                            Resize_GHZ3boss:
000071D6 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000071DC 6400                       		bcc.s	loc_6EB0
000071DE 5538 F742                  		subq.b	#2,($FFFFF742).w
000071E2                            
000071E2                            loc_6EB0:
000071E2 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000071E8 6500                       		bcs.s	locret_6EE8
000071EA 6100 0000                  		bsr.w	SingleObjLoad
000071EE 6600                       		bne.s	loc_6ED0
000071F0 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000071F4 337C 2A60 0008             		move.w	#$2A60,8(a1)
000071FA 337C 0280 000C             		move.w	#$280,$C(a1)
00007200                            
00007200                            loc_6ED0:
00007200 303C 008C                  		move.w	#$8C,d0
00007204 6100 A3B0                  		bsr.w	PlaySound	; play boss music
00007208 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000720E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007212 7011                       		moveq	#$11,d0
00007214 6000 A58A                  		bra.w	LoadPLC		; load boss patterns
00007218                            ; ===========================================================================
00007218                            
00007218                            locret_6EE8:
00007218 4E75                       		rts	
0000721A                            ; ===========================================================================
0000721A                            
0000721A                            Resize_GHZ3end:
0000721A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007220 4E75                       		rts	
00007222                            ; ===========================================================================
00007222                            ; ---------------------------------------------------------------------------
00007222                            ; Labyrinth Zone dynamic screen	resizing
00007222                            ; ---------------------------------------------------------------------------
00007222                            
00007222                            Resize_LZ:				; XREF: Resize_Index
00007222 7000                       		moveq	#0,d0
00007224 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007228 D040                       		add.w	d0,d0
0000722A 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000722E 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007232                            ; ===========================================================================
00007232 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007234 0000                       		dc.w Resize_LZ12-Resize_LZx
00007236 0000                       		dc.w Resize_LZ3-Resize_LZx
00007238 0000                       		dc.w Resize_SBZ3-Resize_LZx
0000723A                            ; ===========================================================================
0000723A                            
0000723A                            Resize_LZ12:
0000723A 4E75                       		rts	
0000723C                            ; ===========================================================================
0000723C                            
0000723C                            Resize_LZ3:
0000723C 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00007240 6700                       		beq.s	loc_6F28	; if not, branch
00007242 43F8 A506                  		lea	($FFFFA506).w,a1
00007246 0C11 0007                  		cmpi.b	#7,(a1)
0000724A 6700                       		beq.s	loc_6F28
0000724C 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00007250 303C 00B7                  		move.w	#$B7,d0
00007254 6100 A366                  		bsr.w	PlaySound_Special ; play rumbling sound
00007258                            
00007258                            loc_6F28:
00007258 4A38 F742                  		tst.b	($FFFFF742).w
0000725C 6600                       		bne.s	locret_6F64
0000725E 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007264 6500                       		bcs.s	locret_6F62
00007266 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
0000726C 6400                       		bcc.s	locret_6F62
0000726E 6100 0000                  		bsr.w	SingleObjLoad
00007272 6600                       		bne.s	loc_6F4A
00007274 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007278                            
00007278                            loc_6F4A:
00007278 303C 008C                  		move.w	#$8C,d0
0000727C 6100 A338                  		bsr.w	PlaySound	; play boss music
00007280 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007286 5438 F742                  		addq.b	#2,($FFFFF742).w
0000728A 7011                       		moveq	#$11,d0
0000728C 6000 A512                  		bra.w	LoadPLC		; load boss patterns
00007290                            ; ===========================================================================
00007290                            
00007290                            locret_6F62:
00007290 4E75                       		rts	
00007292                            ; ===========================================================================
00007292                            
00007292                            locret_6F64:
00007292 4E75                       		rts	
00007294                            ; ===========================================================================
00007294                            
00007294                            Resize_SBZ3:
00007294 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000729A 6500                       		bcs.s	locret_6F8C
0000729C 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000072A2 6400                       		bcc.s	locret_6F8C	; if not, branch
000072A4 4238 FE30                  		clr.b	($FFFFFE30).w
000072A8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000072AE 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000072B4 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000072BA                            
000072BA                            locret_6F8C:
000072BA 4E75                       		rts	
000072BC                            ; ===========================================================================
000072BC                            ; ---------------------------------------------------------------------------
000072BC                            ; Marble Zone dynamic screen resizing
000072BC                            ; ---------------------------------------------------------------------------
000072BC                            
000072BC                            Resize_MZ:				; XREF: Resize_Index
000072BC 7000                       		moveq	#0,d0
000072BE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000072C2 D040                       		add.w	d0,d0
000072C4 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000072C8 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000072CC                            ; ===========================================================================
000072CC 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000072CE 0000                       		dc.w Resize_MZ2-Resize_MZx
000072D0 0000                       		dc.w Resize_MZ3-Resize_MZx
000072D2                            ; ===========================================================================
000072D2                            
000072D2                            Resize_MZ1:
000072D2 7000                       		moveq	#0,d0
000072D4 1038 F742                  		move.b	($FFFFF742).w,d0
000072D8 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000072DC 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000072E0                            ; ===========================================================================
000072E0 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000072E2 0000                       		dc.w loc_6FEA-off_6FB2
000072E4 0000                       		dc.w loc_702E-off_6FB2
000072E6 0000                       		dc.w loc_7050-off_6FB2
000072E8                            ; ===========================================================================
000072E8                            
000072E8                            loc_6FBA:
000072E8 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000072EE 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000072F4 6500                       		bcs.s	locret_6FE8
000072F6 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000072FC 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007302 6500                       		bcs.s	locret_6FE8
00007304 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000730A 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007310 6500                       		bcs.s	locret_6FE8
00007312 5438 F742                  		addq.b	#2,($FFFFF742).w
00007316                            
00007316                            locret_6FE8:
00007316 4E75                       		rts	
00007318                            ; ===========================================================================
00007318                            
00007318                            loc_6FEA:
00007318 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000731E 6400                       		bcc.s	loc_6FF8
00007320 5538 F742                  		subq.b	#2,($FFFFF742).w
00007324 4E75                       		rts	
00007326                            ; ===========================================================================
00007326                            
00007326                            loc_6FF8:
00007326 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000732C 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007332 6400                       		bcc.s	locret_702C
00007334 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
0000733A 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007340 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007346 6400                       		bcc.s	locret_702C
00007348 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000734E 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007354 6500                       		bcs.s	locret_702C
00007356 5438 F742                  		addq.b	#2,($FFFFF742).w
0000735A                            
0000735A                            locret_702C:
0000735A 4E75                       		rts	
0000735C                            ; ===========================================================================
0000735C                            
0000735C                            loc_702E:
0000735C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007362 6400                       		bcc.s	loc_703C
00007364 5538 F742                  		subq.b	#2,($FFFFF742).w
00007368 4E75                       		rts	
0000736A                            ; ===========================================================================
0000736A                            
0000736A                            loc_703C:
0000736A 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007370 6500                       		bcs.s	locret_704E
00007372 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007378 5438 F742                  		addq.b	#2,($FFFFF742).w
0000737C                            
0000737C                            locret_704E:
0000737C 4E75                       		rts	
0000737E                            ; ===========================================================================
0000737E                            
0000737E                            loc_7050:
0000737E 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007384 6500                       		bcs.s	locret_7072
00007386 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000738C 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007392 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007398 6500                       		bcs.s	locret_7072
0000739A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000073A0                            
000073A0                            locret_7072:
000073A0 4E75                       		rts	
000073A2                            ; ===========================================================================
000073A2                            
000073A2                            Resize_MZ2:
000073A2 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000073A8 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000073AE 6500                       		bcs.s	locret_7088
000073B0 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000073B6                            
000073B6                            locret_7088:
000073B6 4E75                       		rts	
000073B8                            ; ===========================================================================
000073B8                            
000073B8                            Resize_MZ3:
000073B8 7000                       		moveq	#0,d0
000073BA 1038 F742                  		move.b	($FFFFF742).w,d0
000073BE 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000073C2 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000073C6                            ; ===========================================================================
000073C6 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000073C8 0000                       		dc.w Resize_MZ3end-off_7098
000073CA                            ; ===========================================================================
000073CA                            
000073CA                            Resize_MZ3boss:
000073CA 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000073D0 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000073D6 6500                       		bcs.s	locret_70E8
000073D8 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000073DE 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000073E4 6500                       		bcs.s	locret_70E8
000073E6 6100 0000                  		bsr.w	SingleObjLoad
000073EA 6600                       		bne.s	loc_70D0
000073EC 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000073F0 337C 19F0 0008             		move.w	#$19F0,8(a1)
000073F6 337C 022C 000C             		move.w	#$22C,$C(a1)
000073FC                            
000073FC                            loc_70D0:
000073FC 303C 008C                  		move.w	#$8C,d0
00007400 6100 A1B4                  		bsr.w	PlaySound	; play boss music
00007404 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000740A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000740E 7011                       		moveq	#$11,d0
00007410 6000 A38E                  		bra.w	LoadPLC		; load boss patterns
00007414                            ; ===========================================================================
00007414                            
00007414                            locret_70E8:
00007414 4E75                       		rts	
00007416                            ; ===========================================================================
00007416                            
00007416                            Resize_MZ3end:
00007416 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000741C 4E75                       		rts	
0000741E                            ; ===========================================================================
0000741E                            ; ---------------------------------------------------------------------------
0000741E                            ; Star Light Zone dynamic screen resizing
0000741E                            ; ---------------------------------------------------------------------------
0000741E                            
0000741E                            Resize_SLZ:				; XREF: Resize_Index
0000741E 7000                       		moveq	#0,d0
00007420 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007424 D040                       		add.w	d0,d0
00007426 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
0000742A 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000742E                            ; ===========================================================================
0000742E 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
00007430 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00007432 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007434                            ; ===========================================================================
00007434                            
00007434                            Resize_SLZ12:
00007434 4E75                       		rts	
00007436                            ; ===========================================================================
00007436                            
00007436                            Resize_SLZ3:
00007436 7000                       		moveq	#0,d0
00007438 1038 F742                  		move.b	($FFFFF742).w,d0
0000743C 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007440 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007444                            ; ===========================================================================
00007444 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007446 0000                       		dc.w Resize_SLZ3boss-off_7118
00007448 0000                       		dc.w Resize_SLZ3end-off_7118
0000744A                            ; ===========================================================================
0000744A                            
0000744A                            Resize_SLZ3main:
0000744A 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007450 6500                       		bcs.s	locret_7130
00007452 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007458 5438 F742                  		addq.b	#2,($FFFFF742).w
0000745C                            
0000745C                            locret_7130:
0000745C 4E75                       		rts	
0000745E                            ; ===========================================================================
0000745E                            
0000745E                            Resize_SLZ3boss:
0000745E 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007464 6500                       		bcs.s	locret_715C
00007466 6100 0000                  		bsr.w	SingleObjLoad
0000746A 6600                       		bne.s	loc_7144
0000746C 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007470                            
00007470                            loc_7144:
00007470 303C 008C                  		move.w	#$8C,d0
00007474 6100 A140                  		bsr.w	PlaySound	; play boss music
00007478 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000747E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007482 7011                       		moveq	#$11,d0
00007484 6000 A31A                  		bra.w	LoadPLC		; load boss patterns
00007488                            ; ===========================================================================
00007488                            
00007488                            locret_715C:
00007488 4E75                       		rts	
0000748A                            ; ===========================================================================
0000748A                            
0000748A                            Resize_SLZ3end:
0000748A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007490 4E75                       		rts
00007492 4E75                       		rts
00007494                            ; ===========================================================================
00007494                            ; ---------------------------------------------------------------------------
00007494                            ; Spring Yard Zone dynamic screen resizing
00007494                            ; ---------------------------------------------------------------------------
00007494                            
00007494                            Resize_SYZ:				; XREF: Resize_Index
00007494 7000                       		moveq	#0,d0
00007496 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000749A D040                       		add.w	d0,d0
0000749C 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000074A0 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000074A4                            ; ===========================================================================
000074A4 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000074A6 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000074A8 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000074AA                            ; ===========================================================================
000074AA                            
000074AA                            Resize_SYZ1:
000074AA 4E75                       		rts	
000074AC                            ; ===========================================================================
000074AC                            
000074AC                            Resize_SYZ2:
000074AC 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000074B2 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000074B8 6500                       		bcs.s	locret_71A2
000074BA 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000074C0 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000074C6 6500                       		bcs.s	locret_71A2
000074C8 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000074CE                            
000074CE                            locret_71A2:
000074CE 4E75                       		rts	
000074D0                            ; ===========================================================================
000074D0                            
000074D0                            Resize_SYZ3:
000074D0 7000                       		moveq	#0,d0
000074D2 1038 F742                  		move.b	($FFFFF742).w,d0
000074D6 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000074DA 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000074DE                            ; ===========================================================================
000074DE 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000074E0 0000                       		dc.w Resize_SYZ3boss-off_71B2
000074E2 0000                       		dc.w Resize_SYZ3end-off_71B2
000074E4                            ; ===========================================================================
000074E4                            
000074E4                            Resize_SYZ3main:
000074E4 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000074EA 6500                       		bcs.s	locret_71CE
000074EC 6100 0000                  		bsr.w	SingleObjLoad
000074F0 6600                       		bne.s	locret_71CE
000074F2 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000074F6 5438 F742                  		addq.b	#2,($FFFFF742).w
000074FA                            
000074FA                            locret_71CE:
000074FA 4E75                       		rts	
000074FC                            ; ===========================================================================
000074FC                            
000074FC                            Resize_SYZ3boss:
000074FC 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007502 6500                       		bcs.s	locret_7200
00007504 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
0000750A 6100 0000                  		bsr.w	SingleObjLoad
0000750E 6600                       		bne.s	loc_71EC
00007510 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007514 5438 F742                  		addq.b	#2,($FFFFF742).w
00007518                            
00007518                            loc_71EC:
00007518 303C 008C                  		move.w	#$8C,d0
0000751C 6100 A098                  		bsr.w	PlaySound	; play boss music
00007520 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007526 7011                       		moveq	#$11,d0
00007528 6000 A276                  		bra.w	LoadPLC		; load boss patterns
0000752C                            ; ===========================================================================
0000752C                            
0000752C                            locret_7200:
0000752C 4E75                       		rts	
0000752E                            ; ===========================================================================
0000752E                            
0000752E                            Resize_SYZ3end:
0000752E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007534 4E75                       		rts	
00007536                            ; ===========================================================================
00007536                            ; ---------------------------------------------------------------------------
00007536                            ; Scrap	Brain Zone dynamic screen resizing
00007536                            ; ---------------------------------------------------------------------------
00007536                            
00007536                            Resize_SBZ:				; XREF: Resize_Index
00007536 7000                       		moveq	#0,d0
00007538 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000753C D040                       		add.w	d0,d0
0000753E 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007542 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007546                            ; ===========================================================================
00007546 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007548 0000                       		dc.w Resize_SBZ2-Resize_SBZx
0000754A 0000                       		dc.w Resize_FZ-Resize_SBZx
0000754C                            ; ===========================================================================
0000754C                            
0000754C                            Resize_SBZ1:
0000754C 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007552 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007558 6500                       		bcs.s	locret_7242
0000755A 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007560 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007566 6500                       		bcs.s	locret_7242
00007568 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000756E                            
0000756E                            locret_7242:
0000756E 4E75                       		rts	
00007570                            ; ===========================================================================
00007570                            
00007570                            Resize_SBZ2:
00007570 7000                       		moveq	#0,d0
00007572 1038 F742                  		move.b	($FFFFF742).w,d0
00007576 303B 0000                  		move.w	off_7252(pc,d0.w),d0
0000757A 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000757E                            ; ===========================================================================
0000757E 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007580 0000                       		dc.w Resize_SBZ2boss-off_7252
00007582 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007584 0000                       		dc.w Resize_SBZ2end-off_7252
00007586                            ; ===========================================================================
00007586                            
00007586                            Resize_SBZ2main:
00007586 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
0000758C 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007592 6500                       		bcs.s	locret_727A
00007594 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
0000759A 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000075A0 6500                       		bcs.s	locret_727A
000075A2 5438 F742                  		addq.b	#2,($FFFFF742).w
000075A6                            
000075A6                            locret_727A:
000075A6 4E75                       		rts	
000075A8                            ; ===========================================================================
000075A8                            
000075A8                            Resize_SBZ2boss:
000075A8 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000075AE 6500                       		bcs.s	locret_7298
000075B0 6100 0000                  		bsr.w	SingleObjLoad
000075B4 6600                       		bne.s	locret_7298
000075B6 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000075BA 5438 F742                  		addq.b	#2,($FFFFF742).w
000075BE 701E                       		moveq	#$1E,d0
000075C0 6000 A1DE                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000075C4                            ; ===========================================================================
000075C4                            
000075C4                            locret_7298:
000075C4 4E75                       		rts	
000075C6                            ; ===========================================================================
000075C6                            
000075C6                            Resize_SBZ2boss2:
000075C6 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000075CC 6500                       		bcs.s	loc_72B6
000075CE 6100 0000                  		bsr.w	SingleObjLoad
000075D2 6600                       		bne.s	loc_72B0
000075D4 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000075D8 5438 F742                  		addq.b	#2,($FFFFF742).w
000075DC                            
000075DC                            loc_72B0:
000075DC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000075E2                            
000075E2                            loc_72B6:
000075E2 6000                       		bra.s	loc_72C2
000075E4                            ; ===========================================================================
000075E4                            
000075E4                            Resize_SBZ2end:
000075E4 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000075EA 6500                       		bcs.s	loc_72C2
000075EC 4E75                       		rts	
000075EE                            ; ===========================================================================
000075EE                            
000075EE                            loc_72C2:
000075EE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000075F4 4E75                       		rts	
000075F6                            ; ===========================================================================
000075F6                            
000075F6                            Resize_FZ:
000075F6 7000                       		moveq	#0,d0
000075F8 1038 F742                  		move.b	($FFFFF742).w,d0
000075FC 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007600 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007604                            ; ===========================================================================
00007604 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007608 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
0000760C 0000                       		dc.w Resize_FZend2-off_72D8
0000760E                            ; ===========================================================================
0000760E                            
0000760E                            Resize_FZmain:
0000760E 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007614 6500                       		bcs.s	loc_72F4
00007616 5438 F742                  		addq.b	#2,($FFFFF742).w
0000761A 701F                       		moveq	#$1F,d0
0000761C 6100 A182                  		bsr.w	LoadPLC		; load FZ boss patterns
00007620                            
00007620                            loc_72F4:
00007620 60CC                       		bra.s	loc_72C2
00007622                            ; ===========================================================================
00007622                            
00007622                            Resize_FZboss:
00007622 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007628 6500                       		bcs.s	loc_7312
0000762A 6100 0000                  		bsr.w	SingleObjLoad
0000762E 6600                       		bne.s	loc_7312
00007630 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007634 5438 F742                  		addq.b	#2,($FFFFF742).w
00007638 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000763E                            
0000763E                            loc_7312:
0000763E 60AE                       		bra.s	loc_72C2
00007640                            ; ===========================================================================
00007640                            
00007640                            Resize_FZend:
00007640 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007646 6500                       		bcs.s	loc_7320
00007648 5438 F742                  		addq.b	#2,($FFFFF742).w
0000764C                            
0000764C                            loc_7320:
0000764C 60A0                       		bra.s	loc_72C2
0000764E                            ; ===========================================================================
0000764E                            
0000764E                            locret_7322:
0000764E 4E75                       		rts	
00007650                            ; ===========================================================================
00007650                            
00007650                            Resize_FZend2:
00007650 609C                       		bra.s	loc_72C2
00007652                            ; ===========================================================================
00007652                            ; ---------------------------------------------------------------------------
00007652                            ; Ending sequence dynamic screen resizing (empty)
00007652                            ; ---------------------------------------------------------------------------
00007652                            
00007652                            Resize_Ending:				; XREF: Resize_Index
00007652 4E75                       		rts	
00007654                            ; ===========================================================================
00007654                            ; ---------------------------------------------------------------------------
00007654                            ; Object 11 - GHZ bridge
00007654                            ; ---------------------------------------------------------------------------
00007654                            
00007654                            Obj11:					; XREF: Obj_Index
00007654 7000                       		moveq	#0,d0
00007656 1028 0024                  		move.b	$24(a0),d0
0000765A 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
0000765E 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007662                            ; ===========================================================================
00007662 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007666 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
0000766A 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000766E                            ; ===========================================================================
0000766E                            
0000766E                            Obj11_Main:				; XREF: Obj11_Index
0000766E 5428 0024                  		addq.b	#2,$24(a0)
00007672 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
0000767A 317C 438E 0002             		move.w	#$438E,2(a0)
00007680 117C 0004 0001             		move.b	#4,1(a0)
00007686 117C 0003 0018             		move.b	#3,$18(a0)
0000768C 117C 0080 0019             		move.b	#$80,$19(a0)
00007692 3428 000C                  		move.w	$C(a0),d2
00007696 3628 0008                  		move.w	8(a0),d3
0000769A 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
0000769C 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
000076A0 7200                       		moveq	#0,d1
000076A2 1212                       		move.b	(a2),d1		; copy a2 to d1
000076A4 14FC 0000                  		move.b	#0,(a2)+
000076A8 3001                       		move.w	d1,d0
000076AA E248                       		lsr.w	#1,d0
000076AC E948                       		lsl.w	#4,d0
000076AE 9640                       		sub.w	d0,d3
000076B0 5501                       		subq.b	#2,d1
000076B2 6500                       		bcs.s	Obj11_Action
000076B4                            
000076B4                            Obj11_MakeBdg:
000076B4 6100 0000                  		bsr.w	SingleObjLoad
000076B8 6600                       		bne.s	Obj11_Action
000076BA 5228 0028                  		addq.b	#1,$28(a0)
000076BE B668 0008                  		cmp.w	8(a0),d3
000076C2 6600                       		bne.s	loc_73B8
000076C4 0643 0010                  		addi.w	#$10,d3
000076C8 3142 000C                  		move.w	d2,$C(a0)
000076CC 3142 003C                  		move.w	d2,$3C(a0)
000076D0 3A08                       		move.w	a0,d5
000076D2 0445 D000                  		subi.w	#-$3000,d5
000076D6 EC4D                       		lsr.w	#6,d5
000076D8 0245 007F                  		andi.w	#$7F,d5
000076DC 14C5                       		move.b	d5,(a2)+
000076DE 5228 0028                  		addq.b	#1,$28(a0)
000076E2                            
000076E2                            loc_73B8:				; XREF: ROM:00007398j
000076E2 3A09                       		move.w	a1,d5
000076E4 0445 D000                  		subi.w	#-$3000,d5
000076E8 EC4D                       		lsr.w	#6,d5
000076EA 0245 007F                  		andi.w	#$7F,d5
000076EE 14C5                       		move.b	d5,(a2)+
000076F0 137C 000A 0024             		move.b	#$A,$24(a1)
000076F6 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000076F8 3342 000C                  		move.w	d2,$C(a1)
000076FC 3342 003C                  		move.w	d2,$3C(a1)
00007700 3343 0008                  		move.w	d3,8(a1)
00007704 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
0000770C 337C 438E 0002             		move.w	#$438E,2(a1)
00007712 137C 0004 0001             		move.b	#4,1(a1)
00007718 137C 0003 0018             		move.b	#3,$18(a1)
0000771E 137C 0008 0019             		move.b	#8,$19(a1)
00007724 0643 0010                  		addi.w	#$10,d3
00007728 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
0000772C                            
0000772C                            Obj11_Action:				; XREF: Obj11_Index
0000772C 6100                       		bsr.s	Obj11_Solid
0000772E 4A28 003E                  		tst.b	$3E(a0)
00007732 6700                       		beq.s	Obj11_Display
00007734 5928 003E                  		subq.b	#4,$3E(a0)
00007738 6100 0000                  		bsr.w	Obj11_Bend
0000773C                            
0000773C                            Obj11_Display:
0000773C 6100 0000                  		bsr.w	DisplaySprite
00007740 6000 0000                  		bra.w	Obj11_ChkDel
00007744                            
00007744                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007744                            
00007744                            
00007744                            Obj11_Solid:				; XREF: Obj11_Action
00007744 7200                       		moveq	#0,d1
00007746 1228 0028                  		move.b	$28(a0),d1
0000774A E749                       		lsl.w	#3,d1
0000774C 3401                       		move.w	d1,d2
0000774E 5041                       		addq.w	#8,d1
00007750 D442                       		add.w	d2,d2
00007752 43F8 D000                  		lea	($FFFFD000).w,a1
00007756 4A69 0012                  		tst.w	$12(a1)
0000775A 6B00 0000                  		bmi.w	locret_751E
0000775E 3029 0008                  		move.w	8(a1),d0
00007762 9068 0008                  		sub.w	8(a0),d0
00007766 D041                       		add.w	d1,d0
00007768 6B00 0000                  		bmi.w	locret_751E
0000776C B042                       		cmp.w	d2,d0
0000776E 6400 0000                  		bcc.w	locret_751E
00007772 6000                       		bra.s	Platform2
00007774                            ; End of function Obj11_Solid
00007774                            
00007774                            ; ---------------------------------------------------------------------------
00007774                            ; Platform subroutine
00007774                            ; ---------------------------------------------------------------------------
00007774                            
00007774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007774                            
00007774                            
00007774                            PlatformObject:
00007774 43F8 D000                  		lea	($FFFFD000).w,a1
00007778 4A69 0012                  		tst.w	$12(a1)
0000777C 6B00 0000                  		bmi.w	locret_751E
00007780 3029 0008                  		move.w	8(a1),d0
00007784 9068 0008                  		sub.w	8(a0),d0
00007788 D041                       		add.w	d1,d0
0000778A 6B00 0000                  		bmi.w	locret_751E
0000778E D241                       		add.w	d1,d1
00007790 B041                       		cmp.w	d1,d0
00007792 6400 0000                  		bcc.w	locret_751E
00007796                            
00007796                            Platform2:
00007796 3028 000C                  		move.w	$C(a0),d0
0000779A 5140                       		subq.w	#8,d0
0000779C                            
0000779C                            Platform3:
0000779C 3429 000C                  		move.w	$C(a1),d2
000077A0 1229 0016                  		move.b	$16(a1),d1
000077A4 4881                       		ext.w	d1
000077A6 D242                       		add.w	d2,d1
000077A8 5841                       		addq.w	#4,d1
000077AA 9041                       		sub.w	d1,d0
000077AC 6200 0000                  		bhi.w	locret_751E
000077B0 0C40 FFF0                  		cmpi.w	#-$10,d0
000077B4 6500 0000                  		bcs.w	locret_751E
000077B8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000077BC 6B00 0000                  		bmi.w	locret_751E
000077C0 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000077C6 6400 0000                  		bcc.w	locret_751E
000077CA D440                       		add.w	d0,d2
000077CC 5642                       		addq.w	#3,d2
000077CE 3342 000C                  		move.w	d2,$C(a1)
000077D2 5428 0024                  		addq.b	#2,$24(a0)
000077D6                            
000077D6                            loc_74AE:
000077D6 0829 0003 0022             		btst	#3,$22(a1)
000077DC 6700                       		beq.s	loc_74DC
000077DE 7000                       		moveq	#0,d0
000077E0 1029 003D                  		move.b	$3D(a1),d0
000077E4 ED48                       		lsl.w	#6,d0
000077E6 0680 00FF D000             		addi.l	#$FFD000,d0
000077EC 2440                       		movea.l	d0,a2
000077EE 08AA 0003 0022             		bclr	#3,$22(a2)
000077F4 422A 0025                  		clr.b	$25(a2)
000077F8 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000077FE 6600                       		bne.s	loc_74DC
00007800 552A 0024                  		subq.b	#2,$24(a2)
00007804                            
00007804                            loc_74DC:
00007804 3008                       		move.w	a0,d0
00007806 0440 D000                  		subi.w	#-$3000,d0
0000780A EC48                       		lsr.w	#6,d0
0000780C 0240 007F                  		andi.w	#$7F,d0
00007810 1340 003D                  		move.b	d0,$3D(a1)
00007814 137C 0000 0026             		move.b	#0,$26(a1)
0000781A 337C 0000 0012             		move.w	#0,$12(a1)
00007820 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007826 0829 0001 0022             		btst	#1,$22(a1)
0000782C 6700                       		beq.s	loc_7512
0000782E 2F08                       		move.l	a0,-(sp)
00007830 2049                       		movea.l	a1,a0
00007832 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007838 205F                       		movea.l	(sp)+,a0
0000783A                            
0000783A                            loc_7512:
0000783A 08E9 0003 0022             		bset	#3,$22(a1)
00007840 08E8 0003 0022             		bset	#3,$22(a0)
00007846                            
00007846                            locret_751E:
00007846 4E75                       		rts	
00007848                            ; End of function PlatformObject
00007848                            
00007848                            ; ---------------------------------------------------------------------------
00007848                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007848                            ; ---------------------------------------------------------------------------
00007848                            
00007848                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007848                            
00007848                            
00007848                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007848 43F8 D000                  		lea	($FFFFD000).w,a1
0000784C 4A69 0012                  		tst.w	$12(a1)
00007850 6B00 FFF4                  		bmi.w	locret_751E
00007854 3029 0008                  		move.w	8(a1),d0
00007858 9068 0008                  		sub.w	8(a0),d0
0000785C D041                       		add.w	d1,d0
0000785E 6BE6                       		bmi.s	locret_751E
00007860 D241                       		add.w	d1,d1
00007862 B041                       		cmp.w	d1,d0
00007864 64E0                       		bcc.s	locret_751E
00007866 0828 0000 0001             		btst	#0,1(a0)
0000786C 6700                       		beq.s	loc_754A
0000786E 4640                       		not.w	d0
00007870 D041                       		add.w	d1,d0
00007872                            
00007872                            loc_754A:
00007872 E248                       		lsr.w	#1,d0
00007874 7600                       		moveq	#0,d3
00007876 1632 0000                  		move.b	(a2,d0.w),d3
0000787A 3028 000C                  		move.w	$C(a0),d0
0000787E 9043                       		sub.w	d3,d0
00007880 6000 FF1A                  		bra.w	Platform3
00007884                            ; End of function SlopeObject
00007884                            
00007884                            
00007884                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007884                            
00007884                            
00007884                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007884 43F8 D000                  		lea	($FFFFD000).w,a1
00007888 4A69 0012                  		tst.w	$12(a1)
0000788C 6B00 FFB8                  		bmi.w	locret_751E
00007890 3029 0008                  		move.w	8(a1),d0
00007894 9068 0008                  		sub.w	8(a0),d0
00007898 D041                       		add.w	d1,d0
0000789A 6B00 FFAA                  		bmi.w	locret_751E
0000789E D241                       		add.w	d1,d1
000078A0 B041                       		cmp.w	d1,d0
000078A2 6400 FFA2                  		bcc.w	locret_751E
000078A6 3028 000C                  		move.w	$C(a0),d0
000078AA 9043                       		sub.w	d3,d0
000078AC 6000 FEEE                  		bra.w	Platform3
000078B0                            ; End of function Obj15_Solid
000078B0                            
000078B0                            ; ===========================================================================
000078B0                            
000078B0                            Obj11_Action2:				; XREF: Obj11_Index
000078B0 6100                       		bsr.s	Obj11_WalkOff
000078B2 6100 0000                  		bsr.w	DisplaySprite
000078B6 6000 0000                  		bra.w	Obj11_ChkDel
000078BA                            
000078BA                            ; ---------------------------------------------------------------------------
000078BA                            ; Subroutine allowing Sonic to walk off a bridge
000078BA                            ; ---------------------------------------------------------------------------
000078BA                            
000078BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078BA                            
000078BA                            
000078BA                            Obj11_WalkOff:				; XREF: Obj11_Action2
000078BA 7200                       		moveq	#0,d1
000078BC 1228 0028                  		move.b	$28(a0),d1
000078C0 E749                       		lsl.w	#3,d1
000078C2 3401                       		move.w	d1,d2
000078C4 5041                       		addq.w	#8,d1
000078C6 6100                       		bsr.s	ExitPlatform2
000078C8 6400                       		bcc.s	locret_75BE
000078CA E848                       		lsr.w	#4,d0
000078CC 1140 003F                  		move.b	d0,$3F(a0)
000078D0 1028 003E                  		move.b	$3E(a0),d0
000078D4 0C00 0040                  		cmpi.b	#$40,d0
000078D8 6700                       		beq.s	loc_75B6
000078DA 5828 003E                  		addq.b	#4,$3E(a0)
000078DE                            
000078DE                            loc_75B6:
000078DE 6100 0000                  		bsr.w	Obj11_Bend
000078E2 6100 0000                  		bsr.w	Obj11_MoveSonic
000078E6                            
000078E6                            locret_75BE:
000078E6 4E75                       		rts	
000078E8                            ; End of function Obj11_WalkOff
000078E8                            
000078E8                            ; ---------------------------------------------------------------------------
000078E8                            ; Subroutine allowing Sonic to walk or jump off	a platform
000078E8                            ; ---------------------------------------------------------------------------
000078E8                            
000078E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078E8                            
000078E8                            
000078E8                            ExitPlatform:
000078E8 3401                       		move.w	d1,d2
000078EA                            
000078EA                            ExitPlatform2:
000078EA D442                       		add.w	d2,d2
000078EC 43F8 D000                  		lea	($FFFFD000).w,a1
000078F0 0829 0001 0022             		btst	#1,$22(a1)
000078F6 6600                       		bne.s	loc_75E0
000078F8 3029 0008                  		move.w	8(a1),d0
000078FC 9068 0008                  		sub.w	8(a0),d0
00007900 D041                       		add.w	d1,d0
00007902 6B00                       		bmi.s	loc_75E0
00007904 B042                       		cmp.w	d2,d0
00007906 6500                       		bcs.s	locret_75F2
00007908                            
00007908                            loc_75E0:
00007908 08A9 0003 0022             		bclr	#3,$22(a1)
0000790E 117C 0002 0024             		move.b	#2,$24(a0)
00007914 08A8 0003 0022             		bclr	#3,$22(a0)
0000791A                            
0000791A                            locret_75F2:
0000791A 4E75                       		rts	
0000791C                            ; End of function ExitPlatform
0000791C                            
0000791C                            
0000791C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000791C                            
0000791C                            
0000791C                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
0000791C 7000                       		moveq	#0,d0
0000791E 1028 003F                  		move.b	$3F(a0),d0
00007922 1030 0029                  		move.b	$29(a0,d0.w),d0
00007926 ED48                       		lsl.w	#6,d0
00007928 0680 00FF D000             		addi.l	#$FFD000,d0
0000792E 2440                       		movea.l	d0,a2
00007930 43F8 D000                  		lea	($FFFFD000).w,a1
00007934 302A 000C                  		move.w	$C(a2),d0
00007938 5140                       		subq.w	#8,d0
0000793A 7200                       		moveq	#0,d1
0000793C 1229 0016                  		move.b	$16(a1),d1
00007940 9041                       		sub.w	d1,d0
00007942 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007946 4E75                       		rts	
00007948                            ; End of function Obj11_MoveSonic
00007948                            
00007948                            
00007948                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007948                            
00007948                            
00007948                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007948 1028 003E                  		move.b	$3E(a0),d0
0000794C 6100 B2AC                  		bsr.w	CalcSine
00007950 3800                       		move.w	d0,d4
00007952 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007958 7000                       		moveq	#0,d0
0000795A 1028 0028                  		move.b	$28(a0),d0
0000795E E948                       		lsl.w	#4,d0
00007960 7600                       		moveq	#0,d3
00007962 1628 003F                  		move.b	$3F(a0),d3
00007966 3403                       		move.w	d3,d2
00007968 D640                       		add.w	d0,d3
0000796A 7A00                       		moveq	#0,d5
0000796C 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007972 1A35 3000                  		move.b	(a5,d3.w),d5
00007976 0243 000F                  		andi.w	#$F,d3
0000797A E94B                       		lsl.w	#4,d3
0000797C 47F4 3000                  		lea	(a4,d3.w),a3
00007980 45E8 0029                  		lea	$29(a0),a2
00007984                            
00007984                            loc_765C:
00007984 7000                       		moveq	#0,d0
00007986 101A                       		move.b	(a2)+,d0
00007988 ED48                       		lsl.w	#6,d0
0000798A 0680 00FF D000             		addi.l	#$FFD000,d0
00007990 2240                       		movea.l	d0,a1
00007992 7000                       		moveq	#0,d0
00007994 101B                       		move.b	(a3)+,d0
00007996 5240                       		addq.w	#1,d0
00007998 C0C5                       		mulu.w	d5,d0
0000799A C0C4                       		mulu.w	d4,d0
0000799C 4840                       		swap	d0
0000799E D069 003C                  		add.w	$3C(a1),d0
000079A2 3340 000C                  		move.w	d0,$C(a1)
000079A6 51CA FFDC                  		dbf	d2,loc_765C
000079AA 7000                       		moveq	#0,d0
000079AC 1028 0028                  		move.b	$28(a0),d0
000079B0 7600                       		moveq	#0,d3
000079B2 1628 003F                  		move.b	$3F(a0),d3
000079B6 5203                       		addq.b	#1,d3
000079B8 9600                       		sub.b	d0,d3
000079BA 4403                       		neg.b	d3
000079BC 6B00                       		bmi.s	locret_76CA
000079BE 3403                       		move.w	d3,d2
000079C0 E94B                       		lsl.w	#4,d3
000079C2 47F4 3000                  		lea	(a4,d3.w),a3
000079C6 D6C2                       		adda.w	d2,a3
000079C8 5342                       		subq.w	#1,d2
000079CA 6500                       		bcs.s	locret_76CA
000079CC                            
000079CC                            loc_76A4:
000079CC 7000                       		moveq	#0,d0
000079CE 101A                       		move.b	(a2)+,d0
000079D0 ED48                       		lsl.w	#6,d0
000079D2 0680 00FF D000             		addi.l	#$FFD000,d0
000079D8 2240                       		movea.l	d0,a1
000079DA 7000                       		moveq	#0,d0
000079DC 1023                       		move.b	-(a3),d0
000079DE 5240                       		addq.w	#1,d0
000079E0 C0C5                       		mulu.w	d5,d0
000079E2 C0C4                       		mulu.w	d4,d0
000079E4 4840                       		swap	d0
000079E6 D069 003C                  		add.w	$3C(a1),d0
000079EA 3340 000C                  		move.w	d0,$C(a1)
000079EE 51CA FFDC                  		dbf	d2,loc_76A4
000079F2                            
000079F2                            locret_76CA:
000079F2 4E75                       		rts	
000079F4                            ; End of function Obj11_Bend
000079F4                            
000079F4                            ; ===========================================================================
000079F4                            ; ---------------------------------------------------------------------------
000079F4                            ; GHZ bridge-bending data
000079F4                            ; (Defines how the bridge bends	when Sonic walks across	it)
000079F4                            ; ---------------------------------------------------------------------------
000079F4                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007B04                            		even
00007B04                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007C04                            		even
00007C04                            
00007C04                            ; ===========================================================================
00007C04                            
00007C04                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007C04 3028 0008                  		move.w	8(a0),d0
00007C08 0240 FF80                  		andi.w	#$FF80,d0
00007C0C 3238 F700                  		move.w	($FFFFF700).w,d1
00007C10 0441 0080                  		subi.w	#$80,d1
00007C14 0241 FF80                  		andi.w	#$FF80,d1
00007C18 9041                       		sub.w	d1,d0
00007C1A 0C40 0280                  		cmpi.w	#$280,d0
00007C1E 6200 0000                  		bhi.w	Obj11_DelAll
00007C22 4E75                       		rts	
00007C24                            ; ===========================================================================
00007C24                            
00007C24                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007C24 7400                       		moveq	#0,d2
00007C26 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007C2A 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007C2C 5302                       		subq.b	#1,d2		; subtract 1
00007C2E 6500                       		bcs.s	Obj11_Delete
00007C30                            
00007C30                            Obj11_DelLoop:
00007C30 7000                       		moveq	#0,d0
00007C32 101A                       		move.b	(a2)+,d0
00007C34 ED48                       		lsl.w	#6,d0
00007C36 0680 00FF D000             		addi.l	#$FFD000,d0
00007C3C 2240                       		movea.l	d0,a1
00007C3E B048                       		cmp.w	a0,d0
00007C40 6700                       		beq.s	loc_791E
00007C42 6100 0000                  		bsr.w	DeleteObject2
00007C46                            
00007C46                            loc_791E:
00007C46 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007C4A                            
00007C4A                            Obj11_Delete:
00007C4A 6100 0000                  		bsr.w	DeleteObject
00007C4E 4E75                       		rts	
00007C50                            ; ===========================================================================
00007C50                            
00007C50                            Obj11_Delete2:				; XREF: Obj11_Index
00007C50 6100 0000                  		bsr.w	DeleteObject
00007C54 4E75                       		rts	
00007C56                            ; ===========================================================================
00007C56                            
00007C56                            Obj11_Display2:				; XREF: Obj11_Index
00007C56 6100 0000                  		bsr.w	DisplaySprite
00007C5A 4E75                       		rts	
00007C5C                            ; ===========================================================================
00007C5C                            ; ---------------------------------------------------------------------------
00007C5C                            ; Sprite mappings - GHZ	bridge
00007C5C                            ; ---------------------------------------------------------------------------
00007C5C                            Map_obj11:
00007C5C                            	include "_maps\obj11.asm"
00007C5C                            ; ---------------------------------------------------------------------------
00007C5C                            ; Sprite mappings - GHZ	bridge
00007C5C                            ; ---------------------------------------------------------------------------
00007C5C 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007C60 0000                       		dc.w byte_794B-Map_obj11
00007C62 01                         byte_793A:	dc.b 1
00007C63 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007C68 02                         byte_7940:	dc.b 2
00007C69 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007C6E 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007C73 01                         byte_794B:	dc.b 1
00007C74 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007C7A 00                         		even
00007C7A 00                         		even
00007C7A                            
00007C7A                            ; ===========================================================================
00007C7A                            ; ---------------------------------------------------------------------------
00007C7A                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007C7A                            ;	    - spiked ball on a chain (SBZ)
00007C7A                            ; ---------------------------------------------------------------------------
00007C7A                            
00007C7A                            Obj15:					; XREF: Obj_Index
00007C7A 7000                       		moveq	#0,d0
00007C7C 1028 0024                  		move.b	$24(a0),d0
00007C80 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007C84 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007C88                            ; ===========================================================================
00007C88 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007C8C 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007C90 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007C94 0000                       		dc.w Obj15_Action-Obj15_Index
00007C96                            ; ===========================================================================
00007C96                            
00007C96                            Obj15_Main:				; XREF: Obj15_Index
00007C96 5428 0024                  		addq.b	#2,$24(a0)
00007C9A 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007CA2 317C 4380 0002             		move.w	#$4380,2(a0)
00007CA8 117C 0004 0001             		move.b	#4,1(a0)
00007CAE 117C 0003 0018             		move.b	#3,$18(a0)
00007CB4 117C 0018 0019             		move.b	#$18,$19(a0)
00007CBA 117C 0008 0016             		move.b	#8,$16(a0)
00007CC0 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007CC6 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007CCC 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007CD2 6600                       		bne.s	Obj15_NotSLZ
00007CD4 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007CDC 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007CE2 117C 0020 0019             		move.b	#$20,$19(a0)
00007CE8 117C 0010 0016             		move.b	#$10,$16(a0)
00007CEE 117C 0099 0020             		move.b	#$99,$20(a0)
00007CF4                            
00007CF4                            Obj15_NotSLZ:
00007CF4 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007CFA 6600                       		bne.s	Obj15_SetLength
00007CFC 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007D04 317C 0391 0002             		move.w	#$391,2(a0)
00007D0A 117C 0018 0019             		move.b	#$18,$19(a0)
00007D10 117C 0018 0016             		move.b	#$18,$16(a0)
00007D16 117C 0086 0020             		move.b	#$86,$20(a0)
00007D1C 117C 000C 0024             		move.b	#$C,$24(a0)
00007D22                            
00007D22                            Obj15_SetLength:
00007D22 1810                       		move.b	0(a0),d4
00007D24 7200                       		moveq	#0,d1
00007D26 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007D2A 1212                       		move.b	(a2),d1		; move a2 to d1
00007D2C 3F01                       		move.w	d1,-(sp)
00007D2E 0241 000F                  		andi.w	#$F,d1
00007D32 14FC 0000                  		move.b	#0,(a2)+
00007D36 3601                       		move.w	d1,d3
00007D38 E94B                       		lsl.w	#4,d3
00007D3A 5003                       		addq.b	#8,d3
00007D3C 1143 003C                  		move.b	d3,$3C(a0)
00007D40 5103                       		subq.b	#8,d3
00007D42 4A28 001A                  		tst.b	$1A(a0)
00007D46 6700                       		beq.s	Obj15_MakeChain
00007D48 5003                       		addq.b	#8,d3
00007D4A 5341                       		subq.w	#1,d1
00007D4C                            
00007D4C                            Obj15_MakeChain:
00007D4C 6100 0000                  		bsr.w	SingleObjLoad
00007D50 6600                       		bne.s	loc_7A92
00007D52 5228 0028                  		addq.b	#1,$28(a0)
00007D56 3A09                       		move.w	a1,d5
00007D58 0445 D000                  		subi.w	#-$3000,d5
00007D5C EC4D                       		lsr.w	#6,d5
00007D5E 0245 007F                  		andi.w	#$7F,d5
00007D62 14C5                       		move.b	d5,(a2)+
00007D64 137C 000A 0024             		move.b	#$A,$24(a1)
00007D6A 1284                       		move.b	d4,0(a1)	; load swinging	object
00007D6C 2368 0004 0004             		move.l	4(a0),4(a1)
00007D72 3368 0002 0002             		move.w	2(a0),2(a1)
00007D78 08A9 0006 0002             		bclr	#6,2(a1)
00007D7E 137C 0004 0001             		move.b	#4,1(a1)
00007D84 137C 0004 0018             		move.b	#4,$18(a1)
00007D8A 137C 0008 0019             		move.b	#8,$19(a1)
00007D90 137C 0001 001A             		move.b	#1,$1A(a1)
00007D96 1343 003C                  		move.b	d3,$3C(a1)
00007D9A 0403 0010                  		subi.b	#$10,d3
00007D9E 6400                       		bcc.s	loc_7A8E
00007DA0 137C 0002 001A             		move.b	#2,$1A(a1)
00007DA6 137C 0003 0018             		move.b	#3,$18(a1)
00007DAC 08E9 0006 0002             		bset	#6,2(a1)
00007DB2                            
00007DB2                            loc_7A8E:
00007DB2 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007DB6                            
00007DB6                            loc_7A92:
00007DB6 3A08                       		move.w	a0,d5
00007DB8 0445 D000                  		subi.w	#-$3000,d5
00007DBC EC4D                       		lsr.w	#6,d5
00007DBE 0245 007F                  		andi.w	#$7F,d5
00007DC2 14C5                       		move.b	d5,(a2)+
00007DC4 317C 4080 0026             		move.w	#$4080,$26(a0)
00007DCA 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007DD0 321F                       		move.w	(sp)+,d1
00007DD2 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007DD6 6700                       		beq.s	loc_7AD4	; if not, branch
00007DD8 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007DE0 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007DE6 117C 0001 001A             		move.b	#1,$1A(a0)
00007DEC 117C 0002 0018             		move.b	#2,$18(a0)
00007DF2 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007DF8                            
00007DF8                            loc_7AD4:
00007DF8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007DFE 6700                       		beq.s	Obj15_Action	; if yes, branch
00007E00                            
00007E00                            Obj15_SetSolid:				; XREF: Obj15_Index
00007E00 7200                       		moveq	#0,d1
00007E02 1228 0019                  		move.b	$19(a0),d1
00007E06 7600                       		moveq	#0,d3
00007E08 1628 0016                  		move.b	$16(a0),d3
00007E0C 6100 FA76                  		bsr.w	Obj15_Solid
00007E10                            
00007E10                            Obj15_Action:				; XREF: Obj15_Index
00007E10 6100 0000                  		bsr.w	Obj15_Move
00007E14 6100 0000                  		bsr.w	DisplaySprite
00007E18 6000 0000                  		bra.w	Obj15_ChkDel
00007E1C                            ; ===========================================================================
00007E1C                            
00007E1C                            Obj15_Action2:				; XREF: Obj15_Index
00007E1C 7200                       		moveq	#0,d1
00007E1E 1228 0019                  		move.b	$19(a0),d1
00007E22 6100 FAC4                  		bsr.w	ExitPlatform
00007E26 3F28 0008                  		move.w	8(a0),-(sp)
00007E2A 6100 0000                  		bsr.w	Obj15_Move
00007E2E 341F                       		move.w	(sp)+,d2
00007E30 7600                       		moveq	#0,d3
00007E32 1628 0016                  		move.b	$16(a0),d3
00007E36 5203                       		addq.b	#1,d3
00007E38 6100 0000                  		bsr.w	MvSonicOnPtfm
00007E3C 6100 0000                  		bsr.w	DisplaySprite
00007E40 6000 0000                  		bra.w	Obj15_ChkDel
00007E44                            
00007E44 4E75                       		rts
00007E46                            
00007E46                            ; ---------------------------------------------------------------------------
00007E46                            ; Subroutine to	change Sonic's position with a platform
00007E46                            ; ---------------------------------------------------------------------------
00007E46                            
00007E46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E46                            
00007E46                            
00007E46                            MvSonicOnPtfm:
00007E46 43F8 D000                  		lea	($FFFFD000).w,a1
00007E4A 3028 000C                  		move.w	$C(a0),d0
00007E4E 9043                       		sub.w	d3,d0
00007E50 6000                       		bra.s	MvSonic2
00007E52                            ; End of function MvSonicOnPtfm
00007E52                            
00007E52                            ; ---------------------------------------------------------------------------
00007E52                            ; Subroutine to	change Sonic's position with a platform
00007E52                            ; ---------------------------------------------------------------------------
00007E52                            
00007E52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E52                            
00007E52                            
00007E52                            MvSonicOnPtfm2:
00007E52 43F8 D000                  		lea	($FFFFD000).w,a1
00007E56 3028 000C                  		move.w	$C(a0),d0
00007E5A 0440 0009                  		subi.w	#9,d0
00007E5E                            
00007E5E                            MvSonic2:
00007E5E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007E62 6B00                       		bmi.s	locret_7B62
00007E64 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007E6A 6400                       		bcc.s	locret_7B62
00007E6C 4A78 FE08                  		tst.w	($FFFFFE08).w
00007E70 6600                       		bne.s	locret_7B62
00007E72 7200                       		moveq	#0,d1
00007E74 1229 0016                  		move.b	$16(a1),d1
00007E78 9041                       		sub.w	d1,d0
00007E7A 3340 000C                  		move.w	d0,$C(a1)
00007E7E 9468 0008                  		sub.w	8(a0),d2
00007E82 9569 0008                  		sub.w	d2,8(a1)
00007E86                            
00007E86                            locret_7B62:
00007E86 4E75                       		rts	
00007E88                            ; End of function MvSonicOnPtfm2
00007E88                            
00007E88                            
00007E88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E88                            
00007E88                            
00007E88                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007E88 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007E8C 323C 0080                  		move.w	#$80,d1
00007E90 0828 0000 0022             		btst	#0,$22(a0)
00007E96 6700                       		beq.s	loc_7B78
00007E98 4440                       		neg.w	d0
00007E9A D041                       		add.w	d1,d0
00007E9C                            
00007E9C                            loc_7B78:
00007E9C 6000                       		bra.s	Obj15_Move2
00007E9E                            ; End of function Obj15_Move
00007E9E                            
00007E9E                            
00007E9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E9E                            
00007E9E                            
00007E9E                            Obj48_Move:				; XREF: Obj48_Display2
00007E9E 4A28 003D                  		tst.b	$3D(a0)
00007EA2 6600                       		bne.s	loc_7B9C
00007EA4 3028 003E                  		move.w	$3E(a0),d0
00007EA8 5040                       		addq.w	#8,d0
00007EAA 3140 003E                  		move.w	d0,$3E(a0)
00007EAE D168 0026                  		add.w	d0,$26(a0)
00007EB2 0C40 0200                  		cmpi.w	#$200,d0
00007EB6 6600                       		bne.s	loc_7BB6
00007EB8 117C 0001 003D             		move.b	#1,$3D(a0)
00007EBE 6000                       		bra.s	loc_7BB6
00007EC0                            ; ===========================================================================
00007EC0                            
00007EC0                            loc_7B9C:
00007EC0 3028 003E                  		move.w	$3E(a0),d0
00007EC4 5140                       		subq.w	#8,d0
00007EC6 3140 003E                  		move.w	d0,$3E(a0)
00007ECA D168 0026                  		add.w	d0,$26(a0)
00007ECE 0C40 FE00                  		cmpi.w	#-$200,d0
00007ED2 6600                       		bne.s	loc_7BB6
00007ED4 117C 0000 003D             		move.b	#0,$3D(a0)
00007EDA                            
00007EDA                            loc_7BB6:
00007EDA 1028 0026                  		move.b	$26(a0),d0
00007EDE                            ; End of function Obj48_Move
00007EDE                            
00007EDE                            
00007EDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EDE                            
00007EDE                            
00007EDE                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00007EDE 6100 AD1A                  		bsr.w	CalcSine
00007EE2 3428 0038                  		move.w	$38(a0),d2
00007EE6 3628 003A                  		move.w	$3A(a0),d3
00007EEA 45E8 0028                  		lea	$28(a0),a2
00007EEE 7C00                       		moveq	#0,d6
00007EF0 1C1A                       		move.b	(a2)+,d6
00007EF2                            
00007EF2                            loc_7BCE:
00007EF2 7800                       		moveq	#0,d4
00007EF4 181A                       		move.b	(a2)+,d4
00007EF6 ED4C                       		lsl.w	#6,d4
00007EF8 0684 00FF D000             		addi.l	#$FFD000,d4
00007EFE 2244                       		movea.l	d4,a1
00007F00 7800                       		moveq	#0,d4
00007F02 1829 003C                  		move.b	$3C(a1),d4
00007F06 2A04                       		move.l	d4,d5
00007F08 C9C0                       		muls.w	d0,d4
00007F0A E084                       		asr.l	#8,d4
00007F0C CBC1                       		muls.w	d1,d5
00007F0E E085                       		asr.l	#8,d5
00007F10 D842                       		add.w	d2,d4
00007F12 DA43                       		add.w	d3,d5
00007F14 3344 000C                  		move.w	d4,$C(a1)
00007F18 3345 0008                  		move.w	d5,8(a1)
00007F1C 51CE FFD4                  		dbf	d6,loc_7BCE
00007F20 4E75                       		rts	
00007F22                            ; End of function Obj15_Move2
00007F22                            
00007F22                            ; ===========================================================================
00007F22                            
00007F22                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00007F22 3028 003A                  		move.w	$3A(a0),d0
00007F26 0240 FF80                  		andi.w	#$FF80,d0
00007F2A 3238 F700                  		move.w	($FFFFF700).w,d1
00007F2E 0441 0080                  		subi.w	#$80,d1
00007F32 0241 FF80                  		andi.w	#$FF80,d1
00007F36 9041                       		sub.w	d1,d0
00007F38 0C40 0280                  		cmpi.w	#$280,d0
00007F3C 6200 0000                  		bhi.w	Obj15_DelAll
00007F40 4E75                       		rts	
00007F42                            ; ===========================================================================
00007F42                            
00007F42                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00007F42 7400                       		moveq	#0,d2
00007F44 45E8 0028                  		lea	$28(a0),a2
00007F48 141A                       		move.b	(a2)+,d2
00007F4A                            
00007F4A                            Obj15_DelLoop:
00007F4A 7000                       		moveq	#0,d0
00007F4C 101A                       		move.b	(a2)+,d0
00007F4E ED48                       		lsl.w	#6,d0
00007F50 0680 00FF D000             		addi.l	#$FFD000,d0
00007F56 2240                       		movea.l	d0,a1
00007F58 6100 0000                  		bsr.w	DeleteObject2
00007F5C 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00007F60 4E75                       		rts	
00007F62                            ; ===========================================================================
00007F62                            
00007F62                            Obj15_Delete:				; XREF: Obj15_Index
00007F62 6100 0000                  		bsr.w	DeleteObject
00007F66 4E75                       		rts	
00007F68                            ; ===========================================================================
00007F68                            
00007F68                            Obj15_Display:				; XREF: Obj15_Index
00007F68 6000 0000                  		bra.w	DisplaySprite
00007F6C                            ; ===========================================================================
00007F6C                            ; ---------------------------------------------------------------------------
00007F6C                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007F6C                            ; ---------------------------------------------------------------------------
00007F6C                            Map_obj15:
00007F6C                            	include "_maps\obj15ghz.asm"
00007F6C                            ; ---------------------------------------------------------------------------
00007F6C                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007F6C                            ; ---------------------------------------------------------------------------
00007F6C 0000                       		dc.w byte_7C4E-Map_obj15
00007F6E 0000                       		dc.w byte_7C59-Map_obj15
00007F70 0000                       		dc.w byte_7C5F-Map_obj15
00007F72 02                         byte_7C4E:	dc.b 2
00007F73 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00007F78 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00007F7D 01                         byte_7C59:	dc.b 1
00007F7E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007F83 01                         byte_7C5F:	dc.b 1
00007F84 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00007F8A 00                         		even
00007F8A 00                         		even
00007F8A                            
00007F8A                            ; ---------------------------------------------------------------------------
00007F8A                            ; Sprite mappings - SLZ	swinging platforms
00007F8A                            ; ---------------------------------------------------------------------------
00007F8A                            Map_obj15a:
00007F8A                            	include "_maps\obj15slz.asm"
00007F8A                            ; ---------------------------------------------------------------------------
00007F8A                            ; Sprite mappings - SLZ	swinging platforms
00007F8A                            ; ---------------------------------------------------------------------------
00007F8A 0000                       		dc.w byte_7C6C-Map_obj15a
00007F8C 0000                       		dc.w byte_7C95-Map_obj15a
00007F8E 0000                       		dc.w byte_7C9B-Map_obj15a
00007F90 08                         byte_7C6C:	dc.b 8
00007F91 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00007F96 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00007F9B F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00007FA0 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00007FA5 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00007FAA 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00007FAF 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00007FB4 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00007FB9 01                         byte_7C95:	dc.b 1
00007FBA F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00007FBF 01                         byte_7C9B:	dc.b 1
00007FC0 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00007FC6 00                         		even
00007FC6 00                         		even
00007FC6                            
00007FC6                            ; ===========================================================================
00007FC6                            ; ---------------------------------------------------------------------------
00007FC6                            ; Object 17 - helix of spikes on a pole	(GHZ)
00007FC6                            ; ---------------------------------------------------------------------------
00007FC6                            
00007FC6                            Obj17:					; XREF: Obj_Index
00007FC6 7000                       		moveq	#0,d0
00007FC8 1028 0024                  		move.b	$24(a0),d0
00007FCC 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00007FD0 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00007FD4                            ; ===========================================================================
00007FD4 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00007FD6 0000                       		dc.w Obj17_Action-Obj17_Index
00007FD8 0000                       		dc.w Obj17_Action-Obj17_Index
00007FDA 0000                       		dc.w Obj17_Delete-Obj17_Index
00007FDC 0000                       		dc.w Obj17_Display-Obj17_Index
00007FDE                            ; ===========================================================================
00007FDE                            
00007FDE                            Obj17_Main:				; XREF: Obj17_Index
00007FDE 5428 0024                  		addq.b	#2,$24(a0)
00007FE2 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00007FEA 317C 4398 0002             		move.w	#$4398,2(a0)
00007FF0 117C 0007 0022             		move.b	#7,$22(a0)
00007FF6 117C 0004 0001             		move.b	#4,1(a0)
00007FFC 117C 0003 0018             		move.b	#3,$18(a0)
00008002 117C 0008 0019             		move.b	#8,$19(a0)
00008008 3428 000C                  		move.w	$C(a0),d2
0000800C 3628 0008                  		move.w	8(a0),d3
00008010 1810                       		move.b	0(a0),d4
00008012 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008016 7200                       		moveq	#0,d1
00008018 1212                       		move.b	(a2),d1		; move a2 to d1
0000801A 14FC 0000                  		move.b	#0,(a2)+
0000801E 3001                       		move.w	d1,d0
00008020 E248                       		lsr.w	#1,d0
00008022 E948                       		lsl.w	#4,d0
00008024 9640                       		sub.w	d0,d3
00008026 5501                       		subq.b	#2,d1
00008028 6500                       		bcs.s	Obj17_Action
0000802A 7C00                       		moveq	#0,d6
0000802C                            
0000802C                            Obj17_MakeHelix:
0000802C 6100 0000                  		bsr.w	SingleObjLoad
00008030 6600                       		bne.s	Obj17_Action
00008032 5228 0028                  		addq.b	#1,$28(a0)
00008036 3A09                       		move.w	a1,d5
00008038 0445 D000                  		subi.w	#$D000,d5
0000803C EC4D                       		lsr.w	#6,d5
0000803E 0245 007F                  		andi.w	#$7F,d5
00008042 14C5                       		move.b	d5,(a2)+
00008044 137C 0008 0024             		move.b	#8,$24(a1)
0000804A 1284                       		move.b	d4,0(a1)
0000804C 3342 000C                  		move.w	d2,$C(a1)
00008050 3343 0008                  		move.w	d3,8(a1)
00008054 2368 0004 0004             		move.l	4(a0),4(a1)
0000805A 337C 4398 0002             		move.w	#$4398,2(a1)
00008060 137C 0004 0001             		move.b	#4,1(a1)
00008066 137C 0003 0018             		move.b	#3,$18(a1)
0000806C 137C 0008 0019             		move.b	#8,$19(a1)
00008072 1346 003E                  		move.b	d6,$3E(a1)
00008076 5206                       		addq.b	#1,d6
00008078 0206 0007                  		andi.b	#7,d6
0000807C 0643 0010                  		addi.w	#$10,d3
00008080 B668 0008                  		cmp.w	8(a0),d3
00008084 6600                       		bne.s	loc_7D78
00008086 1146 003E                  		move.b	d6,$3E(a0)
0000808A 5206                       		addq.b	#1,d6
0000808C 0206 0007                  		andi.b	#7,d6
00008090 0643 0010                  		addi.w	#$10,d3
00008094 5228 0028                  		addq.b	#1,$28(a0)
00008098                            
00008098                            loc_7D78:
00008098 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000809C                            
0000809C                            Obj17_Action:				; XREF: Obj17_Index
0000809C 6100 0000                  		bsr.w	Obj17_RotateSpikes
000080A0 6100 0000                  		bsr.w	DisplaySprite
000080A4 6000 0000                  		bra.w	Obj17_ChkDel
000080A8                            
000080A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080A8                            
000080A8                            
000080A8                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000080A8 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000080AC 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000080B2 D028 003E                  		add.b	$3E(a0),d0
000080B6 0200 0007                  		andi.b	#7,d0
000080BA 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000080BE 6600                       		bne.s	locret_7DA6
000080C0 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000080C6                            
000080C6                            locret_7DA6:
000080C6 4E75                       		rts	
000080C8                            ; End of function Obj17_RotateSpikes
000080C8                            
000080C8                            ; ===========================================================================
000080C8                            
000080C8                            Obj17_ChkDel:				; XREF: Obj17_Action
000080C8 3028 0008                  		move.w	8(a0),d0
000080CC 0240 FF80                  		andi.w	#$FF80,d0
000080D0 3238 F700                  		move.w	($FFFFF700).w,d1
000080D4 0441 0080                  		subi.w	#$80,d1
000080D8 0241 FF80                  		andi.w	#$FF80,d1
000080DC 9041                       		sub.w	d1,d0
000080DE 0C40 0280                  		cmpi.w	#$280,d0
000080E2 6200 0000                  		bhi.w	Obj17_DelAll
000080E6 4E75                       		rts	
000080E8                            ; ===========================================================================
000080E8                            
000080E8                            Obj17_DelAll:				; XREF: Obj17_ChkDel
000080E8 7400                       		moveq	#0,d2
000080EA 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000080EE 141A                       		move.b	(a2)+,d2	; move a2 to d2
000080F0 5502                       		subq.b	#2,d2
000080F2 6500                       		bcs.s	Obj17_Delete
000080F4                            
000080F4                            Obj17_DelLoop:
000080F4 7000                       		moveq	#0,d0
000080F6 101A                       		move.b	(a2)+,d0
000080F8 ED48                       		lsl.w	#6,d0
000080FA 0680 00FF D000             		addi.l	#$FFD000,d0
00008100 2240                       		movea.l	d0,a1
00008102 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008106 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
0000810A                            
0000810A                            Obj17_Delete:				; XREF: Obj17_Index
0000810A 6100 0000                  		bsr.w	DeleteObject
0000810E 4E75                       		rts	
00008110                            ; ===========================================================================
00008110                            
00008110                            Obj17_Display:				; XREF: Obj17_Index
00008110 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008114 6000 0000                  		bra.w	DisplaySprite
00008118                            ; ===========================================================================
00008118                            ; ---------------------------------------------------------------------------
00008118                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008118                            ; ---------------------------------------------------------------------------
00008118                            Map_obj17:
00008118                            	include "_maps\obj17.asm"
00008118                            ; ---------------------------------------------------------------------------
00008118                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008118                            ; ---------------------------------------------------------------------------
00008118 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
0000811C 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008120 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008124 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008128 01                         byte_7E08:	dc.b 1
00008129 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
0000812E 01                         byte_7E0E:	dc.b 1
0000812F F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008134 01                         byte_7E14:	dc.b 1
00008135 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
0000813A 01                         byte_7E1A:	dc.b 1
0000813B FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008140 01                         byte_7E20:	dc.b 1
00008141 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008146 01                         byte_7E26:	dc.b 1
00008147 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
0000814C 01                         byte_7E2C:	dc.b 1
0000814D F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008152                            		even
00008152                            		even
00008152                            
00008152                            ; ===========================================================================
00008152                            ; ---------------------------------------------------------------------------
00008152                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008152                            ; ---------------------------------------------------------------------------
00008152                            
00008152                            Obj18:					; XREF: Obj_Index
00008152 7000                       		moveq	#0,d0
00008154 1028 0024                  		move.b	$24(a0),d0
00008158 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000815C 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008160                            ; ===========================================================================
00008160 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008162 0000                       		dc.w Obj18_Solid-Obj18_Index
00008164 0000                       		dc.w Obj18_Action2-Obj18_Index
00008166 0000                       		dc.w Obj18_Delete-Obj18_Index
00008168 0000                       		dc.w Obj18_Action-Obj18_Index
0000816A                            ; ===========================================================================
0000816A                            
0000816A                            Obj18_Main:				; XREF: Obj18_Index
0000816A 5428 0024                  		addq.b	#2,$24(a0)
0000816E 317C 4000 0002             		move.w	#$4000,2(a0)
00008174 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000817C 117C 0020 0019             		move.b	#$20,$19(a0)
00008182 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008188 6600                       		bne.s	Obj18_NotSYZ
0000818A 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008192 117C 0020 0019             		move.b	#$20,$19(a0)
00008198                            
00008198                            Obj18_NotSYZ:
00008198 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000819E 6600                       		bne.s	Obj18_NotSLZ
000081A0 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000081A8 117C 0020 0019             		move.b	#$20,$19(a0)
000081AE 317C 4000 0002             		move.w	#$4000,2(a0)
000081B4 117C 0003 0028             		move.b	#3,$28(a0)
000081BA                            
000081BA                            Obj18_NotSLZ:
000081BA 117C 0004 0001             		move.b	#4,1(a0)
000081C0 117C 0004 0018             		move.b	#4,$18(a0)
000081C6 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000081CC 3168 000C 0034             		move.w	$C(a0),$34(a0)
000081D2 3168 0008 0032             		move.w	8(a0),$32(a0)
000081D8 317C 0080 0026             		move.w	#$80,$26(a0)
000081DE 7200                       		moveq	#0,d1
000081E0 1028 0028                  		move.b	$28(a0),d0
000081E4 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000081E8 6600                       		bne.s	Obj18_SetFrame	; if not, branch
000081EA 5201                       		addq.b	#1,d1		; use frame #1
000081EC 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
000081F2                            
000081F2                            Obj18_SetFrame:
000081F2 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
000081F6                            
000081F6                            Obj18_Solid:				; XREF: Obj18_Index
000081F6 4A28 0038                  		tst.b	$38(a0)
000081FA 6700                       		beq.s	loc_7EE0
000081FC 5928 0038                  		subq.b	#4,$38(a0)
00008200                            
00008200                            loc_7EE0:
00008200 7200                       		moveq	#0,d1
00008202 1228 0019                  		move.b	$19(a0),d1
00008206 6100 F56C                  		bsr.w	PlatformObject
0000820A                            
0000820A                            Obj18_Action:				; XREF: Obj18_Index
0000820A 6100 0000                  		bsr.w	Obj18_Move
0000820E 6100 0000                  		bsr.w	Obj18_Nudge
00008212 6100 0000                  		bsr.w	DisplaySprite
00008216 6000 0000                  		bra.w	Obj18_ChkDel
0000821A                            ; ===========================================================================
0000821A                            
0000821A                            Obj18_Action2:				; XREF: Obj18_Index
0000821A 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008220 6700                       		beq.s	loc_7F06
00008222 5828 0038                  		addq.b	#4,$38(a0)
00008226                            
00008226                            loc_7F06:
00008226 7200                       		moveq	#0,d1
00008228 1228 0019                  		move.b	$19(a0),d1
0000822C 6100 F6BA                  		bsr.w	ExitPlatform
00008230 3F28 0008                  		move.w	8(a0),-(sp)
00008234 6100 0000                  		bsr.w	Obj18_Move
00008238 6100 0000                  		bsr.w	Obj18_Nudge
0000823C 341F                       		move.w	(sp)+,d2
0000823E 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008242 6100 0000                  		bsr.w	DisplaySprite
00008246 6000 0000                  		bra.w	Obj18_ChkDel
0000824A                            
0000824A 4E75                       		rts
0000824C                            
0000824C                            ; ---------------------------------------------------------------------------
0000824C                            ; Subroutine to	move platform slightly when you	stand on it
0000824C                            ; ---------------------------------------------------------------------------
0000824C                            
0000824C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000824C                            
0000824C                            
0000824C                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000824C 1028 0038                  		move.b	$38(a0),d0
00008250 6100 A9A8                  		bsr.w	CalcSine
00008254 323C 0400                  		move.w	#$400,d1
00008258 C1C1                       		muls.w	d1,d0
0000825A 4840                       		swap	d0
0000825C D068 002C                  		add.w	$2C(a0),d0
00008260 3140 000C                  		move.w	d0,$C(a0)
00008264 4E75                       		rts	
00008266                            ; End of function Obj18_Nudge
00008266                            
00008266                            ; ---------------------------------------------------------------------------
00008266                            ; Subroutine to	move platforms
00008266                            ; ---------------------------------------------------------------------------
00008266                            
00008266                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008266                            
00008266                            
00008266                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008266 7000                       		moveq	#0,d0
00008268 1028 0028                  		move.b	$28(a0),d0
0000826C 0240 000F                  		andi.w	#$F,d0
00008270 D040                       		add.w	d0,d0
00008272 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008276 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
0000827A                            ; End of function Obj18_Move
0000827A                            
0000827A                            ; ===========================================================================
0000827A 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000827E 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008282 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008286 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
0000828A 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000828E 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008292 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008294                            ; ===========================================================================
00008294                            
00008294                            Obj18_Type00:
00008294 4E75                       		rts			; platform 00 doesn't move
00008296                            ; ===========================================================================
00008296                            
00008296                            Obj18_Type05:
00008296 3028 0032                  		move.w	$32(a0),d0
0000829A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000829E 4401                       		neg.b	d1		; reverse platform-motion
000082A0 0601 0040                  		addi.b	#$40,d1
000082A4 6000                       		bra.s	Obj18_01_Move
000082A6                            ; ===========================================================================
000082A6                            
000082A6                            Obj18_Type01:
000082A6 3028 0032                  		move.w	$32(a0),d0
000082AA 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000082AE 0401 0040                  		subi.b	#$40,d1
000082B2                            
000082B2                            Obj18_01_Move:
000082B2 4881                       		ext.w	d1
000082B4 D041                       		add.w	d1,d0
000082B6 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000082BA 6000 0000                  		bra.w	Obj18_ChgMotion
000082BE                            ; ===========================================================================
000082BE                            
000082BE                            Obj18_Type0C:
000082BE 3028 0034                  		move.w	$34(a0),d0
000082C2 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000082C6 4401                       		neg.b	d1		; reverse platform-motion
000082C8 0601 0030                  		addi.b	#$30,d1
000082CC 6000                       		bra.s	Obj18_02_Move
000082CE                            ; ===========================================================================
000082CE                            
000082CE                            Obj18_Type0B:
000082CE 3028 0034                  		move.w	$34(a0),d0
000082D2 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000082D6 0401 0030                  		subi.b	#$30,d1
000082DA 6000                       		bra.s	Obj18_02_Move
000082DC                            ; ===========================================================================
000082DC                            
000082DC                            Obj18_Type06:
000082DC 3028 0034                  		move.w	$34(a0),d0
000082E0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000082E4 4401                       		neg.b	d1		; reverse platform-motion
000082E6 0601 0040                  		addi.b	#$40,d1
000082EA 6000                       		bra.s	Obj18_02_Move
000082EC                            ; ===========================================================================
000082EC                            
000082EC                            Obj18_Type02:
000082EC 3028 0034                  		move.w	$34(a0),d0
000082F0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000082F4 0401 0040                  		subi.b	#$40,d1
000082F8                            
000082F8                            Obj18_02_Move:
000082F8 4881                       		ext.w	d1
000082FA D041                       		add.w	d1,d0
000082FC 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008300 6000 0000                  		bra.w	Obj18_ChgMotion
00008304                            ; ===========================================================================
00008304                            
00008304                            Obj18_Type03:
00008304 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008308 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
0000830A 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008310 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008312 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008318                            
00008318                            Obj18_03_NoMove:
00008318 4E75                       		rts	
0000831A                            ; ===========================================================================
0000831A                            
0000831A                            Obj18_03_Wait:
0000831A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
0000831E 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008320 317C 0020 003A             		move.w	#32,$3A(a0)
00008326 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
0000832A 4E75                       		rts	
0000832C                            ; ===========================================================================
0000832C                            
0000832C                            Obj18_Type04:
0000832C 4A68 003A                  		tst.w	$3A(a0)
00008330 6700                       		beq.s	loc_8048
00008332 5368 003A                  		subq.w	#1,$3A(a0)
00008336 6600                       		bne.s	loc_8048
00008338 0828 0003 0022             		btst	#3,$22(a0)
0000833E 6700                       		beq.s	loc_8042
00008340 08E9 0001 0022             		bset	#1,$22(a1)
00008346 08A9 0003 0022             		bclr	#3,$22(a1)
0000834C 137C 0002 0024             		move.b	#2,$24(a1)
00008352 08A8 0003 0022             		bclr	#3,$22(a0)
00008358 4228 0025                  		clr.b	$25(a0)
0000835C 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008362                            
00008362                            loc_8042:
00008362 117C 0008 0024             		move.b	#8,$24(a0)
00008368                            
00008368                            loc_8048:
00008368 2628 002C                  		move.l	$2C(a0),d3
0000836C 3028 0012                  		move.w	$12(a0),d0
00008370 48C0                       		ext.l	d0
00008372 E180                       		asl.l	#8,d0
00008374 D680                       		add.l	d0,d3
00008376 2143 002C                  		move.l	d3,$2C(a0)
0000837A 0668 0038 0012             		addi.w	#$38,$12(a0)
00008380 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008384 0640 00E0                  		addi.w	#$E0,d0
00008388 B068 002C                  		cmp.w	$2C(a0),d0
0000838C 6400                       		bcc.s	locret_8074
0000838E 117C 0006 0024             		move.b	#6,$24(a0)
00008394                            
00008394                            locret_8074:
00008394 4E75                       		rts	
00008396                            ; ===========================================================================
00008396                            
00008396                            Obj18_Type07:
00008396 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000839A 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000839C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000083A0 7000                       		moveq	#0,d0
000083A2 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000083A6 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000083A8 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000083AC 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000083AE 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000083B4                            
000083B4                            Obj18_07_NoMove:
000083B4 4E75                       		rts	
000083B6                            ; ===========================================================================
000083B6                            
000083B6                            Obj18_07_Wait:
000083B6 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000083BA 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000083BC 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000083C0 4E75                       		rts	
000083C2                            ; ===========================================================================
000083C2                            
000083C2                            Obj18_Type08:
000083C2 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000083C6 3028 0034                  		move.w	$34(a0),d0
000083CA 0440 0200                  		subi.w	#$200,d0
000083CE B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000083D2 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000083D4 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000083D8                            
000083D8                            Obj18_08_NoStop:
000083D8 4E75                       		rts	
000083DA                            ; ===========================================================================
000083DA                            
000083DA                            Obj18_Type0A:
000083DA 3028 0034                  		move.w	$34(a0),d0
000083DE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083E2 0401 0040                  		subi.b	#$40,d1
000083E6 4881                       		ext.w	d1
000083E8 E241                       		asr.w	#1,d1
000083EA D041                       		add.w	d1,d0
000083EC 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000083F0                            
000083F0                            Obj18_ChgMotion:
000083F0 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000083F6 4E75                       		rts	
000083F8                            ; ===========================================================================
000083F8                            
000083F8                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000083F8 3028 0032                  		move.w	$32(a0),d0
000083FC 0240 FF80                  		andi.w	#$FF80,d0
00008400 3238 F700                  		move.w	($FFFFF700).w,d1
00008404 0441 0080                  		subi.w	#$80,d1
00008408 0241 FF80                  		andi.w	#$FF80,d1
0000840C 9041                       		sub.w	d1,d0
0000840E 0C40 0280                  		cmpi.w	#$280,d0
00008412 6200                       		bhi.s	Obj18_Delete
00008414 4E75                       		rts	
00008416                            ; ===========================================================================
00008416                            
00008416                            Obj18_Delete:				; XREF: Obj18_Index
00008416 6000 0000                  		bra.w	DeleteObject
0000841A                            ; ===========================================================================
0000841A                            ; ---------------------------------------------------------------------------
0000841A                            ; Sprite mappings - unused
0000841A                            ; ---------------------------------------------------------------------------
0000841A                            Map_obj18x:
0000841A                            	include "_maps\obj18x.asm"
0000841A                            ; ---------------------------------------------------------------------------
0000841A                            ; Sprite mappings - unused
0000841A                            ; ---------------------------------------------------------------------------
0000841A 0000                       		dc.w byte_80FE-Map_obj18x
0000841C 0000                       		dc.w byte_8109-Map_obj18x
0000841E 02                         byte_80FE:	dc.b 2
0000841F F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008424 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008429 0A                         byte_8109:	dc.b $A
0000842A F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000842F 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008434 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008439 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
0000843E 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008443 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008448 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000844D 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008452 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008457 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000845C                            		even
0000845C                            		even
0000845C                            
0000845C                            ; ---------------------------------------------------------------------------
0000845C                            ; Sprite mappings - GHZ	platforms
0000845C                            ; ---------------------------------------------------------------------------
0000845C                            Map_obj18:
0000845C                            	include "_maps\obj18ghz.asm"
0000845C                            ; ---------------------------------------------------------------------------
0000845C                            ; Sprite mappings - GHZ	platforms
0000845C                            ; ---------------------------------------------------------------------------
0000845C 0000                       		dc.w byte_8140-Map_obj18
0000845E 0000                       		dc.w byte_8155-Map_obj18
00008460 04                         byte_8140:	dc.b 4
00008461 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008466 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000846B F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008470 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008475 0A                         byte_8155:	dc.b $A
00008476 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000847B 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008480 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008485 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000848A 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000848F F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008494 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008499 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000849E 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000084A3 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000084A8                            		even
000084A8                            		even
000084A8                            
000084A8                            ; ---------------------------------------------------------------------------
000084A8                            ; Sprite mappings - SYZ	platforms
000084A8                            ; ---------------------------------------------------------------------------
000084A8                            Map_obj18a:
000084A8                            	include "_maps\obj18syz.asm"
000084A8                            ; ---------------------------------------------------------------------------
000084A8                            ; Sprite mappings - SYZ	platforms
000084A8                            ; ---------------------------------------------------------------------------
000084A8 0000                       		dc.w byte_818A-Map_obj18a
000084AA 03                         byte_818A:	dc.b 3
000084AB F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000084B0 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000084B5 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000084BA                            		even
000084BA                            		even
000084BA                            
000084BA                            ; ---------------------------------------------------------------------------
000084BA                            ; Sprite mappings - SLZ	platforms
000084BA                            ; ---------------------------------------------------------------------------
000084BA                            Map_obj18b:
000084BA                            	include "_maps\obj18slz.asm"
000084BA                            ; ---------------------------------------------------------------------------
000084BA                            ; Sprite mappings - SLZ	platforms
000084BA                            ; ---------------------------------------------------------------------------
000084BA 0000                       		dc.w byte_819C-Map_obj18b
000084BC 02                         byte_819C:	dc.b 2
000084BD F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000084C2 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000084C8 00                         		even
000084C8 00                         		even
000084C8                            
000084C8                            ; ===========================================================================
000084C8                            ; ---------------------------------------------------------------------------
000084C8                            ; Object 19 - blank
000084C8                            ; ---------------------------------------------------------------------------
000084C8                            
000084C8                            Obj19:					; XREF: Obj_Index
000084C8 4E75                       		rts	
000084CA                            ; ===========================================================================
000084CA                            ; ---------------------------------------------------------------------------
000084CA                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000084CA                            ; ---------------------------------------------------------------------------
000084CA                            Map_obj48:
000084CA                            	include "_maps\obj48.asm"
000084CA                            ; ---------------------------------------------------------------------------
000084CA                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000084CA                            ; ---------------------------------------------------------------------------
000084CA 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000084CE 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000084D2 06                         byte_81B2:	dc.b 6
000084D3 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000084D8 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000084DD E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000084E2 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000084E7 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000084EC 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000084F1 04                         byte_81D1:	dc.b 4
000084F2 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000084F7 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000084FC 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008501 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008506 04                         byte_81E6:	dc.b 4
00008507 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0000850C E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008511 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008516 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0000851B 04                         byte_81FB:	dc.b 4
0000851C E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008521 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008526 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0000852B 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008530                            		even
00008530                            		even
00008530                            
00008530                            ; ===========================================================================
00008530                            ; ---------------------------------------------------------------------------
00008530                            ; Object 1A - GHZ collapsing ledge
00008530                            ; ---------------------------------------------------------------------------
00008530                            
00008530                            Obj1A:					; XREF: Obj_Index
00008530 7000                       		moveq	#0,d0
00008532 1028 0024                  		move.b	$24(a0),d0
00008536 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
0000853A 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
0000853E                            ; ===========================================================================
0000853E 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008542 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008546 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
0000854A                            ; ===========================================================================
0000854A                            
0000854A                            Obj1A_Main:				; XREF: Obj1A_Index
0000854A 5428 0024                  		addq.b	#2,$24(a0)
0000854E 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008556 317C 4000 0002             		move.w	#$4000,2(a0)
0000855C 0028 0004 0001             		ori.b	#4,1(a0)
00008562 117C 0004 0018             		move.b	#4,$18(a0)
00008568 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000856E 117C 0064 0019             		move.b	#$64,$19(a0)
00008574 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000857A 117C 0038 0016             		move.b	#$38,$16(a0)
00008580 08E8 0004 0001             		bset	#4,1(a0)
00008586                            
00008586                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008586 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
0000858A 6700                       		beq.s	Obj1A_Slope	; if not, branch
0000858C 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008590 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008594 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008598                            
00008598                            Obj1A_Slope:
00008598 323C 0030                  		move.w	#$30,d1
0000859C 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000085A2 6100 F2A4                  		bsr.w	SlopeObject
000085A6 6000 0000                  		bra.w	MarkObjGone
000085AA                            ; ===========================================================================
000085AA                            
000085AA                            Obj1A_Touch:				; XREF: Obj1A_Index
000085AA 4A28 0038                  		tst.b	$38(a0)
000085AE 6700 0000                  		beq.w	loc_847A
000085B2 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000085B8 5328 0038                  		subq.b	#1,$38(a0)
000085BC                            
000085BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085BC                            
000085BC                            
000085BC                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000085BC 323C 0030                  		move.w	#$30,d1
000085C0 6100 F326                  		bsr.w	ExitPlatform
000085C4 323C 0030                  		move.w	#$30,d1
000085C8 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000085CE 3428 0008                  		move.w	8(a0),d2
000085D2 6100 0000                  		bsr.w	SlopeObject2
000085D6 6000 0000                  		bra.w	MarkObjGone
000085DA                            ; End of function Obj1A_WalkOff
000085DA                            
000085DA                            ; ===========================================================================
000085DA                            
000085DA                            Obj1A_Display:				; XREF: Obj1A_Index
000085DA 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000085DE 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000085E0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000085E4 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000085E8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000085EC 6000 0000                  		bra.w	DisplaySprite
000085F0                            ; ===========================================================================
000085F0                            
000085F0                            loc_82D0:				; XREF: Obj1A_Display
000085F0 5328 0038                  		subq.b	#1,$38(a0)
000085F4 6100 FFC6                  		bsr.w	Obj1A_WalkOff
000085F8 43F8 D000                  		lea	($FFFFD000).w,a1
000085FC 0829 0003 0022             		btst	#3,$22(a1)
00008602 6700                       		beq.s	loc_82FC
00008604 4A28 0038                  		tst.b	$38(a0)
00008608 6600                       		bne.s	locret_8308
0000860A 08A9 0003 0022             		bclr	#3,$22(a1)
00008610 08A9 0005 0022             		bclr	#5,$22(a1)
00008616 137C 0001 001D             		move.b	#1,$1D(a1)
0000861C                            
0000861C                            loc_82FC:
0000861C 117C 0000 003A             		move.b	#0,$3A(a0)
00008622 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008628                            
00008628                            locret_8308:
00008628 4E75                       		rts	
0000862A                            ; ===========================================================================
0000862A                            
0000862A                            Obj1A_TimeZero:				; XREF: Obj1A_Display
0000862A 6100 0000                  		bsr.w	ObjectFall
0000862E 6100 0000                  		bsr.w	DisplaySprite
00008632 4A28 0001                  		tst.b	1(a0)
00008636 6A00                       		bpl.s	Obj1A_Delete
00008638 4E75                       		rts	
0000863A                            ; ===========================================================================
0000863A                            
0000863A                            Obj1A_Delete:				; XREF: Obj1A_Index
0000863A 6100 0000                  		bsr.w	DeleteObject
0000863E 4E75                       		rts	
00008640                            ; ===========================================================================
00008640                            ; ---------------------------------------------------------------------------
00008640                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008640                            ; ---------------------------------------------------------------------------
00008640                            
00008640                            Obj53:					; XREF: Obj_Index
00008640 7000                       		moveq	#0,d0
00008642 1028 0024                  		move.b	$24(a0),d0
00008646 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
0000864A 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
0000864E                            ; ===========================================================================
0000864E 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008652 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008656 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
0000865A                            ; ===========================================================================
0000865A                            
0000865A                            Obj53_Main:				; XREF: Obj53_Index
0000865A 5428 0024                  		addq.b	#2,$24(a0)
0000865E 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008666 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000866C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008672 6600                       		bne.s	Obj53_NotSLZ
00008674 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
0000867A 5428 001A                  		addq.b	#2,$1A(a0)
0000867E                            
0000867E                            Obj53_NotSLZ:
0000867E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008684 6600                       		bne.s	Obj53_NotSBZ
00008686 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
0000868C                            
0000868C                            Obj53_NotSBZ:
0000868C 0028 0004 0001             		ori.b	#4,1(a0)
00008692 117C 0004 0018             		move.b	#4,$18(a0)
00008698 117C 0007 0038             		move.b	#7,$38(a0)
0000869E 117C 0044 0019             		move.b	#$44,$19(a0)
000086A4                            
000086A4                            Obj53_ChkTouch:				; XREF: Obj53_Index
000086A4 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000086A8 6700                       		beq.s	Obj53_Solid	; if not, branch
000086AA 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000086AE 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000086B2 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000086B6                            
000086B6                            Obj53_Solid:
000086B6 323C 0020                  		move.w	#$20,d1
000086BA 6100 F0B8                  		bsr.w	PlatformObject
000086BE 4A28 0028                  		tst.b	$28(a0)
000086C2 6A00                       		bpl.s	Obj53_MarkAsGone
000086C4 0829 0003 0022             		btst	#3,$22(a1)
000086CA 6700                       		beq.s	Obj53_MarkAsGone
000086CC 08A8 0000 0001             		bclr	#0,1(a0)
000086D2 3029 0008                  		move.w	8(a1),d0
000086D6 9068 0008                  		sub.w	8(a0),d0
000086DA 6400                       		bcc.s	Obj53_MarkAsGone
000086DC 08E8 0000 0001             		bset	#0,1(a0)
000086E2                            
000086E2                            Obj53_MarkAsGone:
000086E2 6000 0000                  		bra.w	MarkObjGone
000086E6                            ; ===========================================================================
000086E6                            
000086E6                            Obj53_Touch:				; XREF: Obj53_Index
000086E6 4A28 0038                  		tst.b	$38(a0)
000086EA 6700 0000                  		beq.w	loc_8458
000086EE 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000086F4 5328 0038                  		subq.b	#1,$38(a0)
000086F8                            
000086F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086F8                            
000086F8                            
000086F8                            Obj53_WalkOff:				; XREF: Obj53_Index
000086F8 323C 0020                  		move.w	#$20,d1
000086FC 6100 F1EA                  		bsr.w	ExitPlatform
00008700 3428 0008                  		move.w	8(a0),d2
00008704 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00008708 6000 0000                  		bra.w	MarkObjGone
0000870C                            ; End of function Obj53_WalkOff
0000870C                            
0000870C                            ; ===========================================================================
0000870C                            
0000870C                            Obj53_Display:				; XREF: Obj53_Index
0000870C 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008710 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008712 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008716 6600 0000                  		bne.w	loc_8402	; if yes, branch
0000871A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000871E 6000 0000                  		bra.w	DisplaySprite
00008722                            ; ===========================================================================
00008722                            
00008722                            loc_8402:
00008722 5328 0038                  		subq.b	#1,$38(a0)
00008726 6100 FFD0                  		bsr.w	Obj53_WalkOff
0000872A 43F8 D000                  		lea	($FFFFD000).w,a1
0000872E 0829 0003 0022             		btst	#3,$22(a1)
00008734 6700                       		beq.s	loc_842E
00008736 4A28 0038                  		tst.b	$38(a0)
0000873A 6600                       		bne.s	locret_843A
0000873C 08A9 0003 0022             		bclr	#3,$22(a1)
00008742 08A9 0005 0022             		bclr	#5,$22(a1)
00008748 137C 0001 001D             		move.b	#1,$1D(a1)
0000874E                            
0000874E                            loc_842E:
0000874E 117C 0000 003A             		move.b	#0,$3A(a0)
00008754 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
0000875A                            
0000875A                            locret_843A:
0000875A 4E75                       		rts	
0000875C                            ; ===========================================================================
0000875C                            
0000875C                            Obj53_TimeZero:				; XREF: Obj53_Display
0000875C 6100 0000                  		bsr.w	ObjectFall
00008760 6100 0000                  		bsr.w	DisplaySprite
00008764 4A28 0001                  		tst.b	1(a0)
00008768 6A00                       		bpl.s	Obj53_Delete
0000876A 4E75                       		rts	
0000876C                            ; ===========================================================================
0000876C                            
0000876C                            Obj53_Delete:				; XREF: Obj53_Index
0000876C 6100 0000                  		bsr.w	DeleteObject
00008770 4E75                       		rts	
00008772                            ; ===========================================================================
00008772                            
00008772                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008772 117C 0000 003A             		move.b	#0,$3A(a0)
00008778                            
00008778                            loc_8458:				; XREF: Obj53_Touch
00008778 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
0000877E 0828 0000 0028             		btst	#0,$28(a0)
00008784 6700                       		beq.s	loc_846C
00008786 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
0000878C                            
0000878C                            loc_846C:
0000878C 7207                       		moveq	#7,d1
0000878E 5228 001A                  		addq.b	#1,$1A(a0)
00008792 6000                       		bra.s	loc_8486
00008794                            ; ===========================================================================
00008794                            
00008794                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008794 117C 0000 003A             		move.b	#0,$3A(a0)
0000879A                            
0000879A                            loc_847A:				; XREF: Obj1A_Touch
0000879A 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
000087A0 7218                       		moveq	#$18,d1
000087A2 5428 001A                  		addq.b	#2,$1A(a0)
000087A6                            
000087A6                            loc_8486:				; XREF: Obj53_Collapse
000087A6 7000                       		moveq	#0,d0
000087A8 1028 001A                  		move.b	$1A(a0),d0
000087AC D040                       		add.w	d0,d0
000087AE 2668 0004                  		movea.l	4(a0),a3
000087B2 D6F3 0000                  		adda.w	(a3,d0.w),a3
000087B6 524B                       		addq.w	#1,a3
000087B8 08E8 0005 0001             		bset	#5,1(a0)
000087BE 1810                       		move.b	0(a0),d4
000087C0 1A28 0001                  		move.b	1(a0),d5
000087C4 2248                       		movea.l	a0,a1
000087C6 6000                       		bra.s	loc_84B2
000087C8                            ; ===========================================================================
000087C8                            
000087C8                            loc_84AA:
000087C8 6100 0000                  		bsr.w	SingleObjLoad
000087CC 6600                       		bne.s	loc_84F2
000087CE 5A4B                       		addq.w	#5,a3
000087D0                            
000087D0                            loc_84B2:
000087D0 137C 0006 0024             		move.b	#6,$24(a1)
000087D6 1284                       		move.b	d4,0(a1)
000087D8 234B 0004                  		move.l	a3,4(a1)
000087DC 1345 0001                  		move.b	d5,1(a1)
000087E0 3368 0008 0008             		move.w	8(a0),8(a1)
000087E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000087EC 3368 0002 0002             		move.w	2(a0),2(a1)
000087F2 1368 0018 0018             		move.b	$18(a0),$18(a1)
000087F8 1368 0019 0019             		move.b	$19(a0),$19(a1)
000087FE 135C 0038                  		move.b	(a4)+,$38(a1)
00008802 B3C8                       		cmpa.l	a0,a1
00008804 6400                       		bcc.s	loc_84EE
00008806 6100 0000                  		bsr.w	DisplaySprite2
0000880A                            
0000880A                            loc_84EE:
0000880A 51C9 FFBC                  		dbf	d1,loc_84AA
0000880E                            
0000880E                            loc_84F2:
0000880E 6100 0000                  		bsr.w	DisplaySprite
00008812 303C 00B9                  		move.w	#$B9,d0
00008816 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play collapsing	sound
0000881C                            ; ===========================================================================
0000881C                            ; ---------------------------------------------------------------------------
0000881C                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000881C                            ; ---------------------------------------------------------------------------
0000881C 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000882C 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008836 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000883E 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008846                            
00008846                            ; ---------------------------------------------------------------------------
00008846                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008846                            ; ---------------------------------------------------------------------------
00008846                            
00008846                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008846                            
00008846                            
00008846                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008846 43F8 D000                  		lea	($FFFFD000).w,a1
0000884A 0829 0003 0022             		btst	#3,$22(a1)
00008850 6700                       		beq.s	locret_856E
00008852 3029 0008                  		move.w	8(a1),d0
00008856 9068 0008                  		sub.w	8(a0),d0
0000885A D041                       		add.w	d1,d0
0000885C E248                       		lsr.w	#1,d0
0000885E 0828 0000 0001             		btst	#0,1(a0)
00008864 6700                       		beq.s	loc_854E
00008866 4640                       		not.w	d0
00008868 D041                       		add.w	d1,d0
0000886A                            
0000886A                            loc_854E:
0000886A 7200                       		moveq	#0,d1
0000886C 1232 0000                  		move.b	(a2,d0.w),d1
00008870 3028 000C                  		move.w	$C(a0),d0
00008874 9041                       		sub.w	d1,d0
00008876 7200                       		moveq	#0,d1
00008878 1229 0016                  		move.b	$16(a1),d1
0000887C 9041                       		sub.w	d1,d0
0000887E 3340 000C                  		move.w	d0,$C(a1)
00008882 9468 0008                  		sub.w	8(a0),d2
00008886 9569 0008                  		sub.w	d2,8(a1)
0000888A                            
0000888A                            locret_856E:
0000888A 4E75                       		rts	
0000888C                            ; End of function SlopeObject2
0000888C                            
0000888C                            ; ===========================================================================
0000888C                            ; ---------------------------------------------------------------------------
0000888C                            ; Collision data for GHZ collapsing ledge
0000888C                            ; ---------------------------------------------------------------------------
0000888C                            Obj1A_SlopeData:
0000888C                            		incbin	misc\ghzledge.bin
000088BC                            		even
000088BC                            
000088BC                            ; ---------------------------------------------------------------------------
000088BC                            ; Sprite mappings - GHZ	collapsing ledge
000088BC                            ; ---------------------------------------------------------------------------
000088BC                            Map_obj1A:
000088BC                            	include "_maps\obj1A.asm"
000088BC                            ; ---------------------------------------------------------------------------
000088BC                            ; Sprite mappings - GHZ	collapsing ledge
000088BC                            ; ---------------------------------------------------------------------------
000088BC 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000088C0 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000088C4 10                         byte_85A8:	dc.b $10
000088C5 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000088CA D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000088CF E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000088D4 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000088D9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000088DE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000088E3 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000088E8 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000088ED F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000088F2 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000088F7 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000088FC 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008901 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008906 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000890B 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008910 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008915 10                         byte_85F9:	dc.b $10
00008916 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000891B D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008920 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008925 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000892A D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000892F D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008934 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008939 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000893E F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008943 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008948 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000894D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008952 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008957 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000895C 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008961 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008966 19                         byte_864A:	dc.b $19
00008967 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000896C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008971 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008976 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000897B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008980 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008985 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000898A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000898F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008994 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008999 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000899E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000089A3 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000089A8 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000089AD F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000089B2 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000089B7 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000089BC 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000089C1 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000089C6 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000089CB 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000089D0 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000089D5 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000089DA 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000089DF 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000089E4 19                         byte_86C8:	dc.b $19
000089E5 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
000089EA C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000089EF D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000089F4 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000089F9 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000089FE E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008A03 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008A08 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008A0D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A12 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008A17 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008A1C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008A21 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008A26 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008A2B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A30 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008A35 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008A3A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008A3F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A44 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008A49 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008A4E 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008A53 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008A58 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008A5D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A62                            		even
00008A62                            		even
00008A62                            
00008A62                            ; ---------------------------------------------------------------------------
00008A62                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008A62                            ; ---------------------------------------------------------------------------
00008A62                            Map_obj53:
00008A62                            	include "_maps\obj53.asm"
00008A62                            ; ---------------------------------------------------------------------------
00008A62                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008A62                            ; ---------------------------------------------------------------------------
00008A62 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008A66 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008A6A 04                         byte_874E:	dc.b 4
00008A6B F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008A70 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008A75 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008A7A 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008A7F 08                         byte_8763:	dc.b 8
00008A80 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008A85 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008A8A F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008A8F F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008A94 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008A99 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008A9E 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008AA3 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008AA8 04                         byte_878C:	dc.b 4
00008AA9 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008AAE 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008AB3 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008AB8 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008ABD 08                         byte_87A1:	dc.b 8
00008ABE F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008AC3 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008AC8 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008ACD F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008AD2 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008AD7 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008ADC 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008AE1 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008AE6                            		even
00008AE6                            		even
00008AE6                            
00008AE6                            ; ===========================================================================
00008AE6                            ; ---------------------------------------------------------------------------
00008AE6                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008AE6                            ; ---------------------------------------------------------------------------
00008AE6                            
00008AE6                            Obj1C:					; XREF: Obj_Index
00008AE6 7000                       		moveq	#0,d0
00008AE8 1028 0024                  		move.b	$24(a0),d0
00008AEC 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008AF0 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008AF4                            ; ===========================================================================
00008AF4 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008AF6 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008AF8                            ; ===========================================================================
00008AF8                            
00008AF8                            Obj1C_Main:				; XREF: Obj1C_Index
00008AF8 5428 0024                  		addq.b	#2,$24(a0)
00008AFC 7000                       		moveq	#0,d0
00008AFE 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008B02 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008B06 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008B0A 2159 0004                  		move.l	(a1)+,4(a0)
00008B0E 3159 0002                  		move.w	(a1)+,2(a0)
00008B12 0028 0004 0001             		ori.b	#4,1(a0)
00008B18 1159 001A                  		move.b	(a1)+,$1A(a0)
00008B1C 1159 0019                  		move.b	(a1)+,$19(a0)
00008B20 1159 0018                  		move.b	(a1)+,$18(a0)
00008B24 1159 0020                  		move.b	(a1)+,$20(a0)
00008B28                            
00008B28                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008B28 3028 0008                  		move.w	8(a0),d0
00008B2C 0240 FF80                  		andi.w	#$FF80,d0
00008B30 3238 F700                  		move.w	($FFFFF700).w,d1
00008B34 0441 0080                  		subi.w	#$80,d1
00008B38 0241 FF80                  		andi.w	#$FF80,d1
00008B3C 9041                       		sub.w	d1,d0
00008B3E 0C40 0280                  		cmpi.w	#$280,d0
00008B42 6200 0000                  		bhi.w	DeleteObject
00008B46 6000 0000                  		bra.w	DisplaySprite
00008B4A                            ; ===========================================================================
00008B4A                            ; ---------------------------------------------------------------------------
00008B4A                            ; Variables for	object $1C are stored in an array
00008B4A                            ; ---------------------------------------------------------------------------
00008B4A 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008B4E 44D8                       		dc.w $44D8		; VRAM setting
00008B50 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008B54 0000 0000                  		dc.l Map_obj1C
00008B58 44D8                       		dc.w $44D8
00008B5A 0008 0200                  		dc.b 0,	8, 2, 0
00008B5E 0000 0000                  		dc.l Map_obj1C
00008B62 44D8                       		dc.w $44D8
00008B64 0008 0200                  		dc.b 0,	8, 2, 0
00008B68 0000 7C5C                  		dc.l Map_obj11
00008B6C 438E                       		dc.w $438E
00008B6E 0110 0100                  		dc.b 1,	$10, 1,	0
00008B72                            ; ---------------------------------------------------------------------------
00008B72                            ; Sprite mappings - SLZ	lava thrower
00008B72                            ; ---------------------------------------------------------------------------
00008B72                            Map_obj1C:
00008B72                            	include "_maps\obj1C.asm"
00008B72                            ; ---------------------------------------------------------------------------
00008B72                            ; Sprite mappings - SLZ	lava thrower
00008B72                            ; ---------------------------------------------------------------------------
00008B72 0000                       		dc.w byte_8858-Map_obj1C
00008B74 01                         byte_8858:	dc.b 1
00008B75 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008B7A                            		even
00008B7A                            		even
00008B7A                            
00008B7A                            ; ===========================================================================
00008B7A                            ; ---------------------------------------------------------------------------
00008B7A                            ; Object 1D - switch that activates when Sonic touches it
00008B7A                            ; (this	is not used anywhere in	the game)
00008B7A                            ; ---------------------------------------------------------------------------
00008B7A                            
00008B7A                            Obj1D:					; XREF: Obj_Index
00008B7A 7000                       		moveq	#0,d0
00008B7C 1028 0024                  		move.b	$24(a0),d0
00008B80 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008B84 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008B88                            ; ===========================================================================
00008B88 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008B8A 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008B8C 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008B8E                            ; ===========================================================================
00008B8E                            
00008B8E                            Obj1D_Main:				; XREF: Obj1D_Index
00008B8E 5428 0024                  		addq.b	#2,$24(a0)
00008B92 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008B9A 317C 4000 0002             		move.w	#$4000,2(a0)
00008BA0 117C 0004 0001             		move.b	#4,1(a0)
00008BA6 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008BAC 117C 0010 0019             		move.b	#$10,$19(a0)
00008BB2 117C 0005 0018             		move.b	#5,$18(a0)
00008BB8                            
00008BB8                            Obj1D_Action:				; XREF: Obj1D_Index
00008BB8 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008BBE 323C 0010                  		move.w	#$10,d1
00008BC2 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008BC6 6700                       		beq.s	Obj1D_ChkDel
00008BC8 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008BCC 7001                       		moveq	#1,d0
00008BCE 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008BD2                            
00008BD2                            Obj1D_ChkDel:
00008BD2 6100 0000                  		bsr.w	DisplaySprite
00008BD6 3028 0008                  		move.w	8(a0),d0
00008BDA 0240 FF80                  		andi.w	#$FF80,d0
00008BDE 3238 F700                  		move.w	($FFFFF700).w,d1
00008BE2 0441 0080                  		subi.w	#$80,d1
00008BE6 0241 FF80                  		andi.w	#$FF80,d1
00008BEA 9041                       		sub.w	d1,d0
00008BEC 0C40 0280                  		cmpi.w	#$280,d0
00008BF0 6200 0000                  		bhi.w	Obj1D_Delete
00008BF4 4E75                       		rts	
00008BF6                            ; ===========================================================================
00008BF6                            
00008BF6                            Obj1D_Delete:				; XREF: Obj1D_Index
00008BF6 6100 0000                  		bsr.w	DeleteObject
00008BFA 4E75                       		rts	
00008BFC                            ; ---------------------------------------------------------------------------
00008BFC                            ; Subroutine to	check if Sonic touches the object
00008BFC                            ; ---------------------------------------------------------------------------
00008BFC                            
00008BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BFC                            
00008BFC                            
00008BFC                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008BFC 43F8 D000                  		lea	($FFFFD000).w,a1
00008C00 3029 0008                  		move.w	8(a1),d0
00008C04 9068 0008                  		sub.w	8(a0),d0
00008C08 D041                       		add.w	d1,d0
00008C0A 6B00                       		bmi.s	loc_8918
00008C0C D241                       		add.w	d1,d1
00008C0E B041                       		cmp.w	d1,d0
00008C10 6400                       		bcc.s	loc_8918
00008C12 3429 000C                  		move.w	$C(a1),d2
00008C16 1229 0016                  		move.b	$16(a1),d1
00008C1A 4881                       		ext.w	d1
00008C1C D242                       		add.w	d2,d1
00008C1E 3028 000C                  		move.w	$C(a0),d0
00008C22 0440 0010                  		subi.w	#$10,d0
00008C26 9041                       		sub.w	d1,d0
00008C28 6200                       		bhi.s	loc_8918
00008C2A 0C40 FFF0                  		cmpi.w	#-$10,d0
00008C2E 6500                       		bcs.s	loc_8918
00008C30 70FF                       		moveq	#-1,d0
00008C32 4E75                       		rts	
00008C34                            ; ===========================================================================
00008C34                            
00008C34                            loc_8918:
00008C34 7000                       		moveq	#0,d0
00008C36 4E75                       		rts	
00008C38                            ; End of function Obj1D_ChkTouch
00008C38                            
00008C38                            ; ===========================================================================
00008C38                            ; ---------------------------------------------------------------------------
00008C38                            ; Sprite mappings - object 1D
00008C38                            ; ---------------------------------------------------------------------------
00008C38                            Map_obj1D:
00008C38                            	include "_maps\obj1D.asm"
00008C38                            ; ---------------------------------------------------------------------------
00008C38                            ; Sprite mappings - object 1D
00008C38                            ; ---------------------------------------------------------------------------
00008C38 0000                       		dc.w byte_891E-Map_obj1D
00008C3A 04                         byte_891E:	dc.b 4
00008C3B E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008C40 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008C45 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008C4A 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008C50 00                         		even
00008C50 00                         		even
00008C50                            
00008C50                            ; ===========================================================================
00008C50                            ; ---------------------------------------------------------------------------
00008C50                            ; Object 2A - doors (SBZ)
00008C50                            ; ---------------------------------------------------------------------------
00008C50                            
00008C50                            Obj2A:					; XREF: Obj_Index
00008C50 7000                       		moveq	#0,d0
00008C52 1028 0024                  		move.b	$24(a0),d0
00008C56 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008C5A 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008C5E                            ; ===========================================================================
00008C5E 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008C60 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008C62                            ; ===========================================================================
00008C62                            
00008C62                            Obj2A_Main:				; XREF: Obj2A_Index
00008C62 5428 0024                  		addq.b	#2,$24(a0)
00008C66 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008C6E 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008C74 0028 0004 0001             		ori.b	#4,1(a0)
00008C7A 117C 0008 0019             		move.b	#8,$19(a0)
00008C80 117C 0004 0018             		move.b	#4,$18(a0)
00008C86                            
00008C86                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008C86 323C 0040                  		move.w	#$40,d1
00008C8A 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008C8E 3038 D008                  		move.w	($FFFFD008).w,d0
00008C92 D041                       		add.w	d1,d0
00008C94 B068 0008                  		cmp.w	8(a0),d0
00008C98 6500                       		bcs.s	Obj2A_Animate
00008C9A 9041                       		sub.w	d1,d0
00008C9C 9041                       		sub.w	d1,d0
00008C9E B068 0008                  		cmp.w	8(a0),d0
00008CA2 6400                       		bcc.s	Obj2A_Animate
00008CA4 D041                       		add.w	d1,d0
00008CA6 B068 0008                  		cmp.w	8(a0),d0
00008CAA 6400                       		bcc.s	loc_899A
00008CAC 0828 0000 0022             		btst	#0,$22(a0)
00008CB2 6600                       		bne.s	Obj2A_Animate
00008CB4 6000                       		bra.s	Obj2A_Open
00008CB6                            ; ===========================================================================
00008CB6                            
00008CB6                            loc_899A:				; XREF: Obj2A_OpenShut
00008CB6 0828 0000 0022             		btst	#0,$22(a0)
00008CBC 6700                       		beq.s	Obj2A_Animate
00008CBE                            
00008CBE                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008CBE 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008CC4                            
00008CC4                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008CC4 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008CCA 6100 0000                  		bsr.w	AnimateSprite
00008CCE 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008CD2 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008CD4 323C 0011                  		move.w	#$11,d1
00008CD8 343C 0020                  		move.w	#$20,d2
00008CDC 3602                       		move.w	d2,d3
00008CDE 5243                       		addq.w	#1,d3
00008CE0 3828 0008                  		move.w	8(a0),d4
00008CE4 6100 0000                  		bsr.w	SolidObject
00008CE8                            
00008CE8                            Obj2A_MarkAsUsed:
00008CE8 6000 0000                  		bra.w	MarkObjGone
00008CEC                            ; ===========================================================================
00008CEC                            Ani_obj2A:
00008CEC                            	include "_anim\obj2A.asm"
00008CEC                            ; ---------------------------------------------------------------------------
00008CEC                            ; Animation script - doors (SBZ)
00008CEC                            ; ---------------------------------------------------------------------------
00008CEC 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008CEE 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008CF0 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008CFC 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008D08                            		even
00008D08                            		even
00008D08                            
00008D08                            ; ---------------------------------------------------------------------------
00008D08                            ; Sprite mappings - doors (SBZ)
00008D08                            ; ---------------------------------------------------------------------------
00008D08                            Map_obj2A:
00008D08                            	include "_maps\obj2A.asm"
00008D08                            ; ---------------------------------------------------------------------------
00008D08                            ; Sprite mappings - doors (SBZ)
00008D08                            ; ---------------------------------------------------------------------------
00008D08 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008D0C 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008D10 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008D14 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008D18 0000                       		dc.w byte_8A56-Map_obj2A
00008D1A 02                         byte_89FE:	dc.b 2
00008D1B E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008D20 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008D25 02                         byte_8A09:	dc.b 2
00008D26 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008D2B 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008D30 02                         byte_8A14:	dc.b 2
00008D31 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008D36 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008D3B 02                         byte_8A1F:	dc.b 2
00008D3C D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008D41 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008D46 02                         byte_8A2A:	dc.b 2
00008D47 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008D4C 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008D51 02                         byte_8A35:	dc.b 2
00008D52 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008D57 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008D5C 02                         byte_8A40:	dc.b 2
00008D5D C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008D62 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008D67 02                         byte_8A4B:	dc.b 2
00008D68 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008D6D 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008D72 02                         byte_8A56:	dc.b 2
00008D73 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008D78 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008D7E 00                         		even
00008D7E 00                         		even
00008D7E                            
00008D7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D7E                            
00008D7E                            
00008D7E                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008D7E 6100 0000                  		bsr.w	Obj44_SolidWall2
00008D82 6700                       		beq.s	loc_8AA8
00008D84 6B00 0000                  		bmi.w	loc_8AC4
00008D88 4A40                       		tst.w	d0
00008D8A 6700 0000                  		beq.w	loc_8A92
00008D8E 6B00                       		bmi.s	loc_8A7C
00008D90 4A69 0010                  		tst.w	$10(a1)
00008D94 6B00                       		bmi.s	loc_8A92
00008D96 6000                       		bra.s	loc_8A82
00008D98                            ; ===========================================================================
00008D98                            
00008D98                            loc_8A7C:
00008D98 4A69 0010                  		tst.w	$10(a1)
00008D9C 6A00                       		bpl.s	loc_8A92
00008D9E                            
00008D9E                            loc_8A82:
00008D9E 9169 0008                  		sub.w	d0,8(a1)
00008DA2 337C 0000 0014             		move.w	#0,$14(a1)
00008DA8 337C 0000 0010             		move.w	#0,$10(a1)
00008DAE                            
00008DAE                            loc_8A92:
00008DAE 0829 0001 0022             		btst	#1,$22(a1)
00008DB4 6600                       		bne.s	loc_8AB6
00008DB6 08E9 0005 0022             		bset	#5,$22(a1)
00008DBC 08E8 0005 0022             		bset	#5,$22(a0)
00008DC2 4E75                       		rts	
00008DC4                            ; ===========================================================================
00008DC4                            
00008DC4                            loc_8AA8:
00008DC4 0828 0005 0022             		btst	#5,$22(a0)
00008DCA 6700                       		beq.s	locret_8AC2
00008DCC 337C 0001 001C             		move.w	#1,$1C(a1)
00008DD2                            
00008DD2                            loc_8AB6:
00008DD2 08A8 0005 0022             		bclr	#5,$22(a0)
00008DD8 08A9 0005 0022             		bclr	#5,$22(a1)
00008DDE                            
00008DDE                            locret_8AC2:
00008DDE 4E75                       		rts	
00008DE0                            ; ===========================================================================
00008DE0                            
00008DE0                            loc_8AC4:
00008DE0 4A69 0012                  		tst.w	$12(a1)
00008DE4 6A00                       		bpl.s	locret_8AD8
00008DE6 4A43                       		tst.w	d3
00008DE8 6A00                       		bpl.s	locret_8AD8
00008DEA 9769 000C                  		sub.w	d3,$C(a1)
00008DEE 337C 0000 0012             		move.w	#0,$12(a1)
00008DF4                            
00008DF4                            locret_8AD8:
00008DF4 4E75                       		rts	
00008DF6                            ; End of function Obj44_SolidWall
00008DF6                            
00008DF6                            
00008DF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DF6                            
00008DF6                            
00008DF6                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008DF6 43F8 D000                  		lea	($FFFFD000).w,a1
00008DFA 3029 0008                  		move.w	8(a1),d0
00008DFE 9068 0008                  		sub.w	8(a0),d0
00008E02 D041                       		add.w	d1,d0
00008E04 6B00                       		bmi.s	loc_8B48
00008E06 3601                       		move.w	d1,d3
00008E08 D643                       		add.w	d3,d3
00008E0A B043                       		cmp.w	d3,d0
00008E0C 6200                       		bhi.s	loc_8B48
00008E0E 1629 0016                  		move.b	$16(a1),d3
00008E12 4883                       		ext.w	d3
00008E14 D443                       		add.w	d3,d2
00008E16 3629 000C                  		move.w	$C(a1),d3
00008E1A 9668 000C                  		sub.w	$C(a0),d3
00008E1E D642                       		add.w	d2,d3
00008E20 6B00                       		bmi.s	loc_8B48
00008E22 3802                       		move.w	d2,d4
00008E24 D844                       		add.w	d4,d4
00008E26 B644                       		cmp.w	d4,d3
00008E28 6400                       		bcc.s	loc_8B48
00008E2A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008E2E 6B00                       		bmi.s	loc_8B48
00008E30 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008E36 6400                       		bcc.s	loc_8B48
00008E38 4A78 FE08                  		tst.w	($FFFFFE08).w
00008E3C 6600                       		bne.s	loc_8B48
00008E3E 3A00                       		move.w	d0,d5
00008E40 B240                       		cmp.w	d0,d1
00008E42 6400                       		bcc.s	loc_8B30
00008E44 D241                       		add.w	d1,d1
00008E46 9041                       		sub.w	d1,d0
00008E48 3A00                       		move.w	d0,d5
00008E4A 4445                       		neg.w	d5
00008E4C                            
00008E4C                            loc_8B30:
00008E4C 3203                       		move.w	d3,d1
00008E4E B443                       		cmp.w	d3,d2
00008E50 6400                       		bcc.s	loc_8B3C
00008E52 9644                       		sub.w	d4,d3
00008E54 3203                       		move.w	d3,d1
00008E56 4441                       		neg.w	d1
00008E58                            
00008E58                            loc_8B3C:
00008E58 BA41                       		cmp.w	d1,d5
00008E5A 6200                       		bhi.s	loc_8B44
00008E5C 7801                       		moveq	#1,d4
00008E5E 4E75                       		rts	
00008E60                            ; ===========================================================================
00008E60                            
00008E60                            loc_8B44:
00008E60 78FF                       		moveq	#-1,d4
00008E62 4E75                       		rts	
00008E64                            ; ===========================================================================
00008E64                            
00008E64                            loc_8B48:
00008E64 7800                       		moveq	#0,d4
00008E66 4E75                       		rts	
00008E68                            ; End of function Obj44_SolidWall2
00008E68                            
00008E68                            ; ===========================================================================
00008E68                            ; ---------------------------------------------------------------------------
00008E68                            ; Object 1E - Ball Hog enemy (SBZ)
00008E68                            ; ---------------------------------------------------------------------------
00008E68                            
00008E68                            Obj1E:					; XREF: Obj_Index
00008E68 7000                       		moveq	#0,d0
00008E6A 1028 0024                  		move.b	$24(a0),d0
00008E6E 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008E72 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008E76                            ; ===========================================================================
00008E76 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008E78 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008E7A                            ; ===========================================================================
00008E7A                            
00008E7A                            Obj1E_Main:				; XREF: Obj1E_Index
00008E7A 117C 0013 0016             		move.b	#$13,$16(a0)
00008E80 117C 0008 0017             		move.b	#8,$17(a0)
00008E86 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008E8E 317C 2302 0002             		move.w	#$2302,2(a0)
00008E94 117C 0004 0001             		move.b	#4,1(a0)
00008E9A 117C 0004 0018             		move.b	#4,$18(a0)
00008EA0 117C 0005 0020             		move.b	#5,$20(a0)
00008EA6 117C 000C 0019             		move.b	#$C,$19(a0)
00008EAC 6100 0000                  		bsr.w	ObjectFall
00008EB0 4EB9 0000 0000             		jsr	ObjHitFloor
00008EB6 4A41                       		tst.w	d1
00008EB8 6A00                       		bpl.s	locret_8BAC
00008EBA D368 000C                  		add.w	d1,$C(a0)
00008EBE 317C 0000 0012             		move.w	#0,$12(a0)
00008EC4 5428 0024                  		addq.b	#2,$24(a0)
00008EC8                            
00008EC8                            locret_8BAC:
00008EC8 4E75                       		rts	
00008ECA                            ; ===========================================================================
00008ECA                            
00008ECA                            Obj1E_Action:				; XREF: Obj1E_Index
00008ECA 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008ED0 6100 0000                  		bsr.w	AnimateSprite
00008ED4 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00008EDA 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00008EDC 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00008EE0 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00008EE2 6000                       		bra.s	Obj1E_MarkAsGone
00008EE4                            ; ===========================================================================
00008EE4                            
00008EE4                            Obj1E_SetBall:				; XREF: Obj1E_Action
00008EE4 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00008EE8                            
00008EE8                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00008EE8 6000 0000                  		bra.w	MarkObjGone
00008EEC                            ; ===========================================================================
00008EEC                            
00008EEC                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00008EEC 117C 0001 0032             		move.b	#1,$32(a0)
00008EF2 6100 0000                  		bsr.w	SingleObjLoad
00008EF6 6600                       		bne.s	loc_8C1A
00008EF8 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00008EFC 3368 0008 0008             		move.w	8(a0),8(a1)
00008F02 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008F08 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00008F0E 337C 0000 0012             		move.w	#0,$12(a1)
00008F14 70FC                       		moveq	#-4,d0
00008F16 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00008F1C 6700                       		beq.s	loc_8C0A	; if not, branch
00008F1E 4440                       		neg.w	d0
00008F20 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00008F24                            
00008F24                            loc_8C0A:
00008F24 D169 0008                  		add.w	d0,8(a1)
00008F28 0669 000C 000C             		addi.w	#$C,$C(a1)
00008F2E 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00008F34                            
00008F34                            loc_8C1A:
00008F34 60B2                       		bra.s	Obj1E_MarkAsGone
00008F36                            ; ===========================================================================
00008F36                            ; ---------------------------------------------------------------------------
00008F36                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00008F36                            ; ---------------------------------------------------------------------------
00008F36                            
00008F36                            Obj20:					; XREF: Obj_Index
00008F36 7000                       		moveq	#0,d0
00008F38 1028 0024                  		move.b	$24(a0),d0
00008F3C 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00008F40 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00008F44                            ; ===========================================================================
00008F44 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00008F46 0000                       		dc.w Obj20_Bounce-Obj20_Index
00008F48                            ; ===========================================================================
00008F48                            
00008F48                            Obj20_Main:				; XREF: Obj20_Index
00008F48 5428 0024                  		addq.b	#2,$24(a0)
00008F4C 117C 0007 0016             		move.b	#7,$16(a0)
00008F52 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008F5A 317C 2302 0002             		move.w	#$2302,2(a0)
00008F60 117C 0004 0001             		move.b	#4,1(a0)
00008F66 117C 0003 0018             		move.b	#3,$18(a0)
00008F6C 117C 0087 0020             		move.b	#$87,$20(a0)
00008F72 117C 0008 0019             		move.b	#8,$19(a0)
00008F78 7000                       		moveq	#0,d0
00008F7A 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00008F7E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00008F82 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00008F86 117C 0004 001A             		move.b	#4,$1A(a0)
00008F8C                            
00008F8C                            Obj20_Bounce:				; XREF: Obj20_Index
00008F8C 4EB9 0000 0000             		jsr	ObjectFall
00008F92 4A68 0012                  		tst.w	$12(a0)
00008F96 6B00                       		bmi.s	Obj20_ChkExplode
00008F98 4EB9 0000 0000             		jsr	ObjHitFloor
00008F9E 4A41                       		tst.w	d1
00008FA0 6A00                       		bpl.s	Obj20_ChkExplode
00008FA2 D368 000C                  		add.w	d1,$C(a0)
00008FA6 317C FD00 0012             		move.w	#-$300,$12(a0)
00008FAC 4A03                       		tst.b	d3
00008FAE 6700                       		beq.s	Obj20_ChkExplode
00008FB0 6B00                       		bmi.s	loc_8CA4
00008FB2 4A68 0010                  		tst.w	$10(a0)
00008FB6 6A00                       		bpl.s	Obj20_ChkExplode
00008FB8 4468 0010                  		neg.w	$10(a0)
00008FBC 6000                       		bra.s	Obj20_ChkExplode
00008FBE                            ; ===========================================================================
00008FBE                            
00008FBE                            loc_8CA4:				; XREF: Obj20_Bounce
00008FBE 4A68 0010                  		tst.w	$10(a0)
00008FC2 6B00                       		bmi.s	Obj20_ChkExplode
00008FC4 4468 0010                  		neg.w	$10(a0)
00008FC8                            
00008FC8                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00008FC8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00008FCC 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00008FCE 10BC 0024                  		move.b	#$24,0(a0)
00008FD2 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00008FD6 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00008FDC 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00008FE0                            ; ===========================================================================
00008FE0                            
00008FE0                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00008FE0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008FE4 6A00                       		bpl.s	Obj20_Display
00008FE6 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00008FEC 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00008FF2                            
00008FF2                            Obj20_Display:
00008FF2 6100 0000                  		bsr.w	DisplaySprite
00008FF6 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008FFA 0640 00E0                  		addi.w	#$E0,d0
00008FFE B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009002 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009006 4E75                       		rts	
00009008                            ; ===========================================================================
00009008                            ; ---------------------------------------------------------------------------
00009008                            ; Object 24 - explosion	from a destroyed monitor
00009008                            ; ---------------------------------------------------------------------------
00009008                            
00009008                            Obj24:					; XREF: Obj_Index
00009008 7000                       		moveq	#0,d0
0000900A 1028 0024                  		move.b	$24(a0),d0
0000900E 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009012 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009016                            ; ===========================================================================
00009016 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009018 0000                       		dc.w Obj24_Animate-Obj24_Index
0000901A                            ; ===========================================================================
0000901A                            
0000901A                            Obj24_Main:				; XREF: Obj24_Index
0000901A 5428 0024                  		addq.b	#2,$24(a0)
0000901E 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009026 317C 041C 0002             		move.w	#$41C,2(a0)
0000902C 117C 0004 0001             		move.b	#4,1(a0)
00009032 117C 0001 0018             		move.b	#1,$18(a0)
00009038 117C 0000 0020             		move.b	#0,$20(a0)
0000903E 117C 000C 0019             		move.b	#$C,$19(a0)
00009044 117C 0009 001E             		move.b	#9,$1E(a0)
0000904A 117C 0000 001A             		move.b	#0,$1A(a0)
00009050 303C 00A5                  		move.w	#$A5,d0
00009054 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play explosion sound
0000905A                            
0000905A                            Obj24_Animate:				; XREF: Obj24_Index
0000905A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000905E 6A00                       		bpl.s	Obj24_Display
00009060 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009066 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000906A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009070 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009074                            
00009074                            Obj24_Display:
00009074 6000 0000                  		bra.w	DisplaySprite
00009078                            ; ===========================================================================
00009078                            ; ---------------------------------------------------------------------------
00009078                            ; Object 27 - explosion	from a destroyed enemy
00009078                            ; ---------------------------------------------------------------------------
00009078                            
00009078                            Obj27:					; XREF: Obj_Index
00009078 7000                       		moveq	#0,d0
0000907A 1028 0024                  		move.b	$24(a0),d0
0000907E 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009082 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009086                            ; ===========================================================================
00009086 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009088 0000                       		dc.w Obj27_Main-Obj27_Index
0000908A 0000                       		dc.w Obj27_Animate-Obj27_Index
0000908C                            ; ===========================================================================
0000908C                            
0000908C                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000908C 5428 0024                  		addq.b	#2,$24(a0)
00009090 6100 0000                  		bsr.w	SingleObjLoad
00009094 6600                       		bne.s	Obj27_Main
00009096 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000909A 3368 0008 0008             		move.w	8(a0),8(a1)
000090A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000090A6 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000090AC                            
000090AC                            Obj27_Main:				; XREF: Obj27_Index
000090AC 5428 0024                  		addq.b	#2,$24(a0)
000090B0 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000090B8 317C 05A0 0002             		move.w	#$5A0,2(a0)
000090BE 117C 0004 0001             		move.b	#4,1(a0)
000090C4 117C 0001 0018             		move.b	#1,$18(a0)
000090CA 117C 0000 0020             		move.b	#0,$20(a0)
000090D0 117C 000C 0019             		move.b	#$C,$19(a0)
000090D6 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
000090DC 117C 0000 001A             		move.b	#0,$1A(a0)
000090E2 303C 00C1                  		move.w	#$C1,d0
000090E6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
000090EC                            
000090EC                            Obj27_Animate:				; XREF: Obj27_Index
000090EC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000090F0 6A00                       		bpl.s	Obj27_Display
000090F2 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
000090F8 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000090FC 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009102 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009106                            
00009106                            Obj27_Display:
00009106 6000 0000                  		bra.w	DisplaySprite
0000910A                            ; ===========================================================================
0000910A                            ; ---------------------------------------------------------------------------
0000910A                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000910A                            ; ---------------------------------------------------------------------------
0000910A                            
0000910A                            Obj3F:					; XREF: Obj_Index
0000910A 7000                       		moveq	#0,d0
0000910C 1028 0024                  		move.b	$24(a0),d0
00009110 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009114 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009118                            ; ===========================================================================
00009118 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000911A FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000911C                            ; ===========================================================================
0000911C                            
0000911C                            Obj3F_Main:				; XREF: Obj3F_Index
0000911C 5428 0024                  		addq.b	#2,$24(a0)
00009120 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009128 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000912E 117C 0004 0001             		move.b	#4,1(a0)
00009134 117C 0001 0018             		move.b	#1,$18(a0)
0000913A 117C 0000 0020             		move.b	#0,$20(a0)
00009140 117C 000C 0019             		move.b	#$C,$19(a0)
00009146 117C 0007 001E             		move.b	#7,$1E(a0)
0000914C 117C 0000 001A             		move.b	#0,$1A(a0)
00009152 303C 00C4                  		move.w	#$C4,d0
00009156 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000915C                            ; ===========================================================================
0000915C                            Ani_obj1E:
0000915C                            	include "_anim\obj1E.asm"
0000915C                            ; ---------------------------------------------------------------------------
0000915C                            ; Animation script - doors (SBZ)
0000915C                            ; ---------------------------------------------------------------------------
0000915C 0000                       		dc.w byte_8E4A-Ani_obj1E
0000915E 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009176 00                         		even
00009176 00                         		even
00009176                            
00009176                            ; ---------------------------------------------------------------------------
00009176                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009176                            ; ---------------------------------------------------------------------------
00009176                            Map_obj1E:
00009176                            	include "_maps\obj1E.asm"
00009176                            ; ---------------------------------------------------------------------------
00009176                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009176                            ; ---------------------------------------------------------------------------
00009176 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000917A 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000917E 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00009182 02                         byte_8E6E:	dc.b 2
00009183 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009188 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000918D 02                         byte_8E79:	dc.b 2
0000918E EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009193 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00009198 02                         byte_8E84:	dc.b 2
00009199 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000919E 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
000091A3 02                         byte_8E8F:	dc.b 2
000091A4 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
000091A9 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
000091AE 01                         byte_8E9A:	dc.b 1
000091AF F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
000091B4 01                         byte_8EA0:	dc.b 1
000091B5 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
000091BA                            		even
000091BA                            		even
000091BA                            
000091BA                            ; ---------------------------------------------------------------------------
000091BA                            ; Sprite mappings - explosion
000091BA                            ; ---------------------------------------------------------------------------
000091BA                            Map_obj24:
000091BA                            	include "_maps\obj24.asm"
000091BA                            ; ---------------------------------------------------------------------------
000091BA                            ; Sprite mappings - explosion
000091BA                            ; ---------------------------------------------------------------------------
000091BA 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
000091BE 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
000091C2 01                         byte_8EAE:	dc.b 1
000091C3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000091C8 01                         byte_8EB4:	dc.b 1
000091C9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000091CE 01                         byte_8EBA:	dc.b 1
000091CF F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000091D4 01                         byte_8EC0:	dc.b 1
000091D5 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000091DA                            		even
000091DA                            		even
000091DA                            
000091DA                            ; ---------------------------------------------------------------------------
000091DA                            ; Sprite mappings - explosion
000091DA                            ; ---------------------------------------------------------------------------
000091DA 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000091DE 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000091E2 0000                       		dc.w byte_8EF7-Map_obj27
000091E4 01                         byte_8ED0:	dc.b 1
000091E5 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000091EA 01                         byte_8ED6:	dc.b 1
000091EB F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000091F0 01                         byte_8EDC:	dc.b 1
000091F1 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000091F6 04                         byte_8EE2:	dc.b 4
000091F7 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
000091FC EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009201 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009206 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000920B 04                         byte_8EF7:	dc.b 4
0000920C EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009211 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009216 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000921B FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009220                            		even
00009220                            ; ---------------------------------------------------------------------------
00009220                            ; Sprite mappings - explosion from when	a boss is destroyed
00009220                            ; ---------------------------------------------------------------------------
00009220 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009222 0000                       		dc.w byte_8F16-Map_obj3F
00009224 0000                       		dc.w byte_8F1C-Map_obj3F
00009226 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009228 FFEB                       		dc.w byte_8EF7-Map_obj3F
0000922A 01                         byte_8F16:	dc.b 1
0000922B F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009230 01                         byte_8F1C:	dc.b 1
00009231 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009236                            		even
00009236                            ; ===========================================================================
00009236                            ; ---------------------------------------------------------------------------
00009236                            ; Object 28 - animals
00009236                            ; ---------------------------------------------------------------------------
00009236                            
00009236                            Obj28:					; XREF: Obj_Index
00009236 7000                       		moveq	#0,d0
00009238 1028 0024                  		move.b	$24(a0),d0
0000923C 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009240 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009244                            ; ===========================================================================
00009244 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009248 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000924C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009250 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009254 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009258 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000925C 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009260 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009264 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009268 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000926C 0000                       		dc.w loc_92D6-Obj28_Index
0000926E                            
0000926E 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000927A                            
0000927A FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000927E 0000 0000                  		dc.l Map_obj28
00009282 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009286 0000 0000                  		dc.l Map_obj28a		; mappings address
0000928A FE80 FD00                  		dc.w $FE80, $FD00
0000928E 0000 0000                  		dc.l Map_obj28
00009292 FEC0 FE80                  		dc.w $FEC0, $FE80
00009296 0000 0000                  		dc.l Map_obj28a
0000929A FE40 FD00                  		dc.w $FE40, $FD00
0000929E 0000 0000                  		dc.l Map_obj28b
000092A2 FD00 FC00                  		dc.w $FD00, $FC00
000092A6 0000 0000                  		dc.l Map_obj28a
000092AA FD80 FC80                  		dc.w $FD80, $FC80
000092AE 0000 0000                  		dc.l Map_obj28b
000092B2                            
000092B2 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
000092C2 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000092D2 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000092DE                            
000092DE 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000092F2 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009306 0000 0000                  		dc.l Map_obj28b
0000930A                            
0000930A 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000931C 0565 05B3                  		dc.w $565, $5B3
00009320                            ; ===========================================================================
00009320                            
00009320                            Obj28_Ending:				; XREF: Obj28_Index
00009320 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009324 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009328 7000                       		moveq	#0,d0
0000932A 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000932E D040                       		add.w	d0,d0		; multiply d0 by 2
00009330 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009334 0440 0014                  		subi.w	#$14,d0
00009338 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000933E D040                       		add.w	d0,d0
00009340 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009346 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000934A 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009350 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009356 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000935C 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009362 117C 000C 0016             		move.b	#$C,$16(a0)
00009368 117C 0004 0001             		move.b	#4,1(a0)
0000936E 08E8 0000 0001             		bset	#0,1(a0)
00009374 117C 0006 0018             		move.b	#6,$18(a0)
0000937A 117C 0008 0019             		move.b	#8,$19(a0)
00009380 117C 0007 001E             		move.b	#7,$1E(a0)
00009386 6000 0000                  		bra.w	DisplaySprite
0000938A                            ; ===========================================================================
0000938A                            
0000938A                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000938A 5428 0024                  		addq.b	#2,$24(a0)
0000938E 6100 9844                  		bsr.w	RandomNumber
00009392 0240 0001                  		andi.w	#1,d0
00009396 7200                       		moveq	#0,d1
00009398 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000939C D241                       		add.w	d1,d1
0000939E D240                       		add.w	d0,d1
000093A0 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
000093A4 1031 1000                  		move.b	(a1,d1.w),d0
000093A8 1140 0030                  		move.b	d0,$30(a0)
000093AC E748                       		lsl.w	#3,d0
000093AE 43FA FECA                  		lea	Obj28_Variables(pc),a1
000093B2 D2C0                       		adda.w	d0,a1
000093B4 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
000093B8 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
000093BC 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
000093C0 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000093C6 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000093CC 6700                       		beq.s	loc_90C0	; if yes, branch
000093CE 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000093D4                            
000093D4                            loc_90C0:
000093D4 117C 000C 0016             		move.b	#$C,$16(a0)
000093DA 117C 0004 0001             		move.b	#4,1(a0)
000093E0 08E8 0000 0001             		bset	#0,1(a0)
000093E6 117C 0006 0018             		move.b	#6,$18(a0)
000093EC 117C 0008 0019             		move.b	#8,$19(a0)
000093F2 117C 0007 001E             		move.b	#7,$1E(a0)
000093F8 117C 0002 001A             		move.b	#2,$1A(a0)
000093FE 317C FC00 0012             		move.w	#-$400,$12(a0)
00009404 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009408 6600                       		bne.s	loc_911C
0000940A 6100 0000                  		bsr.w	SingleObjLoad
0000940E 6600                       		bne.s	Obj28_Display
00009410 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009414 3368 0008 0008             		move.w	8(a0),8(a1)
0000941A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009420 3028 003E                  		move.w	$3E(a0),d0
00009424 E248                       		lsr.w	#1,d0
00009426 1340 001A                  		move.b	d0,$1A(a1)
0000942A                            
0000942A                            Obj28_Display:
0000942A 6000 0000                  		bra.w	DisplaySprite
0000942E                            ; ===========================================================================
0000942E                            
0000942E                            loc_911C:
0000942E 117C 0012 0024             		move.b	#$12,$24(a0)
00009434 4268 0010                  		clr.w	$10(a0)
00009438 6000 0000                  		bra.w	DisplaySprite
0000943C                            ; ===========================================================================
0000943C                            
0000943C                            loc_912A:				; XREF: Obj28_Index
0000943C 4A28 0001                  		tst.b	1(a0)
00009440 6A00 0000                  		bpl.w	DeleteObject
00009444 6100 0000                  		bsr.w	ObjectFall
00009448 4A68 0012                  		tst.w	$12(a0)
0000944C 6B00                       		bmi.s	loc_9180
0000944E 4EB9 0000 0000             		jsr	ObjHitFloor
00009454 4A41                       		tst.w	d1
00009456 6A00                       		bpl.s	loc_9180
00009458 D368 000C                  		add.w	d1,$C(a0)
0000945C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009462 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009468 117C 0001 001A             		move.b	#1,$1A(a0)
0000946E 1028 0030                  		move.b	$30(a0),d0
00009472 D000                       		add.b	d0,d0
00009474 5800                       		addq.b	#4,d0
00009476 1140 0024                  		move.b	d0,$24(a0)
0000947A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000947E 6700                       		beq.s	loc_9180
00009480 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009486 6700                       		beq.s	loc_9180
00009488 4468 0010                  		neg.w	$10(a0)
0000948C 0868 0000 0001             		bchg	#0,1(a0)
00009492                            
00009492                            loc_9180:
00009492 6000 0000                  		bra.w	DisplaySprite
00009496                            ; ===========================================================================
00009496                            
00009496                            loc_9184:				; XREF: Obj28_Index
00009496 6100 0000                  		bsr.w	ObjectFall
0000949A 117C 0001 001A             		move.b	#1,$1A(a0)
000094A0 4A68 0012                  		tst.w	$12(a0)
000094A4 6B00                       		bmi.s	loc_91AE
000094A6 117C 0000 001A             		move.b	#0,$1A(a0)
000094AC 4EB9 0000 0000             		jsr	ObjHitFloor
000094B2 4A41                       		tst.w	d1
000094B4 6A00                       		bpl.s	loc_91AE
000094B6 D368 000C                  		add.w	d1,$C(a0)
000094BA 3168 0034 0012             		move.w	$34(a0),$12(a0)
000094C0                            
000094C0                            loc_91AE:
000094C0 4A28 0028                  		tst.b	$28(a0)
000094C4 6600                       		bne.s	loc_9224
000094C6 4A28 0001                  		tst.b	1(a0)
000094CA 6A00 0000                  		bpl.w	DeleteObject
000094CE 6000 0000                  		bra.w	DisplaySprite
000094D2                            ; ===========================================================================
000094D2                            
000094D2                            loc_91C0:				; XREF: Obj28_Index
000094D2 6100 0000                  		bsr.w	SpeedToPos
000094D6 0668 0018 0012             		addi.w	#$18,$12(a0)
000094DC 4A68 0012                  		tst.w	$12(a0)
000094E0 6B00                       		bmi.s	loc_91FC
000094E2 4EB9 0000 0000             		jsr	ObjHitFloor
000094E8 4A41                       		tst.w	d1
000094EA 6A00                       		bpl.s	loc_91FC
000094EC D368 000C                  		add.w	d1,$C(a0)
000094F0 3168 0034 0012             		move.w	$34(a0),$12(a0)
000094F6 4A28 0028                  		tst.b	$28(a0)
000094FA 6700                       		beq.s	loc_91FC
000094FC 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009502 6700                       		beq.s	loc_91FC
00009504 4468 0010                  		neg.w	$10(a0)
00009508 0868 0000 0001             		bchg	#0,1(a0)
0000950E                            
0000950E                            loc_91FC:
0000950E 5328 001E                  		subq.b	#1,$1E(a0)
00009512 6A00                       		bpl.s	loc_9212
00009514 117C 0001 001E             		move.b	#1,$1E(a0)
0000951A 5228 001A                  		addq.b	#1,$1A(a0)
0000951E 0228 0001 001A             		andi.b	#1,$1A(a0)
00009524                            
00009524                            loc_9212:
00009524 4A28 0028                  		tst.b	$28(a0)
00009528 6600                       		bne.s	loc_9224
0000952A 4A28 0001                  		tst.b	1(a0)
0000952E 6A00 0000                  		bpl.w	DeleteObject
00009532 6000 0000                  		bra.w	DisplaySprite
00009536                            ; ===========================================================================
00009536                            
00009536                            loc_9224:				; XREF: Obj28_Index
00009536 3028 0008                  		move.w	8(a0),d0
0000953A 9078 D008                  		sub.w	($FFFFD008).w,d0
0000953E 6500                       		bcs.s	loc_923C
00009540 0440 0180                  		subi.w	#$180,d0
00009544 6A00                       		bpl.s	loc_923C
00009546 4A28 0001                  		tst.b	1(a0)
0000954A 6A00 0000                  		bpl.w	DeleteObject
0000954E                            
0000954E                            loc_923C:
0000954E 6000 0000                  		bra.w	DisplaySprite
00009552                            ; ===========================================================================
00009552                            
00009552                            loc_9240:				; XREF: Obj28_Index
00009552 4A28 0001                  		tst.b	1(a0)
00009556 6A00 0000                  		bpl.w	DeleteObject
0000955A 5368 0036                  		subq.w	#1,$36(a0)
0000955E 6600 0000                  		bne.w	loc_925C
00009562 117C 0002 0024             		move.b	#2,$24(a0)
00009568 117C 0003 0018             		move.b	#3,$18(a0)
0000956E                            
0000956E                            loc_925C:
0000956E 6000 0000                  		bra.w	DisplaySprite
00009572                            ; ===========================================================================
00009572                            
00009572                            loc_9260:				; XREF: Obj28_Index
00009572 6100 0000                  		bsr.w	sub_9404
00009576 6400                       		bcc.s	loc_927C
00009578 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000957E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009584 117C 000E 0024             		move.b	#$E,$24(a0)
0000958A 6000 FF46                  		bra.w	loc_91C0
0000958E                            ; ===========================================================================
0000958E                            
0000958E                            loc_927C:
0000958E 6000 FFA6                  		bra.w	loc_9224
00009592                            ; ===========================================================================
00009592                            
00009592                            loc_9280:				; XREF: Obj28_Index
00009592 6100 0000                  		bsr.w	sub_9404
00009596 6A00                       		bpl.s	loc_92B6
00009598 4268 0010                  		clr.w	$10(a0)
0000959C 4268 0032                  		clr.w	$32(a0)
000095A0 6100 0000                  		bsr.w	SpeedToPos
000095A4 0668 0018 0012             		addi.w	#$18,$12(a0)
000095AA 6100 0000                  		bsr.w	loc_93C4
000095AE 6100 0000                  		bsr.w	loc_93EC
000095B2 5328 001E                  		subq.b	#1,$1E(a0)
000095B6 6A00                       		bpl.s	loc_92B6
000095B8 117C 0001 001E             		move.b	#1,$1E(a0)
000095BE 5228 001A                  		addq.b	#1,$1A(a0)
000095C2 0228 0001 001A             		andi.b	#1,$1A(a0)
000095C8                            
000095C8                            loc_92B6:
000095C8 6000 FF6C                  		bra.w	loc_9224
000095CC                            ; ===========================================================================
000095CC                            
000095CC                            loc_92BA:				; XREF: Obj28_Index
000095CC 6100 0000                  		bsr.w	sub_9404
000095D0 6A00                       		bpl.s	loc_9310
000095D2 3168 0032 0010             		move.w	$32(a0),$10(a0)
000095D8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000095DE 117C 0004 0024             		move.b	#4,$24(a0)
000095E4 6000 FEB0                  		bra.w	loc_9184
000095E8                            ; ===========================================================================
000095E8                            
000095E8                            loc_92D6:				; XREF: Obj28_Index
000095E8 6100 0000                  		bsr.w	ObjectFall
000095EC 117C 0001 001A             		move.b	#1,$1A(a0)
000095F2 4A68 0012                  		tst.w	$12(a0)
000095F6 6B00                       		bmi.s	loc_9310
000095F8 117C 0000 001A             		move.b	#0,$1A(a0)
000095FE 4EB9 0000 0000             		jsr	ObjHitFloor
00009604 4A41                       		tst.w	d1
00009606 6A00                       		bpl.s	loc_9310
00009608 4628 0029                  		not.b	$29(a0)
0000960C 6600                       		bne.s	loc_9306
0000960E 4468 0010                  		neg.w	$10(a0)
00009612 0868 0000 0001             		bchg	#0,1(a0)
00009618                            
00009618                            loc_9306:
00009618 D368 000C                  		add.w	d1,$C(a0)
0000961C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009622                            
00009622                            loc_9310:
00009622 6000 FF12                  		bra.w	loc_9224
00009626                            ; ===========================================================================
00009626                            
00009626                            loc_9314:				; XREF: Obj28_Index
00009626 6100 0000                  		bsr.w	sub_9404
0000962A 6A00                       		bpl.s	loc_932E
0000962C 4268 0010                  		clr.w	$10(a0)
00009630 4268 0032                  		clr.w	$32(a0)
00009634 6100 0000                  		bsr.w	ObjectFall
00009638 6100 0000                  		bsr.w	loc_93C4
0000963C 6100 0000                  		bsr.w	loc_93EC
00009640                            
00009640                            loc_932E:
00009640 6000 FEF4                  		bra.w	loc_9224
00009644                            ; ===========================================================================
00009644                            
00009644                            loc_9332:				; XREF: Obj28_Index
00009644 6100 0000                  		bsr.w	sub_9404
00009648 6A00                       		bpl.s	loc_936C
0000964A 6100 0000                  		bsr.w	ObjectFall
0000964E 117C 0001 001A             		move.b	#1,$1A(a0)
00009654 4A68 0012                  		tst.w	$12(a0)
00009658 6B00                       		bmi.s	loc_936C
0000965A 117C 0000 001A             		move.b	#0,$1A(a0)
00009660 4EB9 0000 0000             		jsr	ObjHitFloor
00009666 4A41                       		tst.w	d1
00009668 6A00                       		bpl.s	loc_936C
0000966A 4468 0010                  		neg.w	$10(a0)
0000966E 0868 0000 0001             		bchg	#0,1(a0)
00009674 D368 000C                  		add.w	d1,$C(a0)
00009678 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000967E                            
0000967E                            loc_936C:
0000967E 6000 FEB6                  		bra.w	loc_9224
00009682                            ; ===========================================================================
00009682                            
00009682                            loc_9370:				; XREF: Obj28_Index
00009682 6100 0000                  		bsr.w	sub_9404
00009686 6A00                       		bpl.s	loc_93C0
00009688 6100 0000                  		bsr.w	SpeedToPos
0000968C 0668 0018 0012             		addi.w	#$18,$12(a0)
00009692 4A68 0012                  		tst.w	$12(a0)
00009696 6B00                       		bmi.s	loc_93AA
00009698 4EB9 0000 0000             		jsr	ObjHitFloor
0000969E 4A41                       		tst.w	d1
000096A0 6A00                       		bpl.s	loc_93AA
000096A2 4628 0029                  		not.b	$29(a0)
000096A6 6600                       		bne.s	loc_93A0
000096A8 4468 0010                  		neg.w	$10(a0)
000096AC 0868 0000 0001             		bchg	#0,1(a0)
000096B2                            
000096B2                            loc_93A0:
000096B2 D368 000C                  		add.w	d1,$C(a0)
000096B6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096BC                            
000096BC                            loc_93AA:
000096BC 5328 001E                  		subq.b	#1,$1E(a0)
000096C0 6A00                       		bpl.s	loc_93C0
000096C2 117C 0001 001E             		move.b	#1,$1E(a0)
000096C8 5228 001A                  		addq.b	#1,$1A(a0)
000096CC 0228 0001 001A             		andi.b	#1,$1A(a0)
000096D2                            
000096D2                            loc_93C0:
000096D2 6000 FE62                  		bra.w	loc_9224
000096D6                            ; ===========================================================================
000096D6                            
000096D6                            loc_93C4:
000096D6 117C 0001 001A             		move.b	#1,$1A(a0)
000096DC 4A68 0012                  		tst.w	$12(a0)
000096E0 6B00                       		bmi.s	locret_93EA
000096E2 117C 0000 001A             		move.b	#0,$1A(a0)
000096E8 4EB9 0000 0000             		jsr	ObjHitFloor
000096EE 4A41                       		tst.w	d1
000096F0 6A00                       		bpl.s	locret_93EA
000096F2 D368 000C                  		add.w	d1,$C(a0)
000096F6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096FC                            
000096FC                            locret_93EA:
000096FC 4E75                       		rts	
000096FE                            ; ===========================================================================
000096FE                            
000096FE                            loc_93EC:
000096FE 08E8 0000 0001             		bset	#0,1(a0)
00009704 3028 0008                  		move.w	8(a0),d0
00009708 9078 D008                  		sub.w	($FFFFD008).w,d0
0000970C 6400                       		bcc.s	locret_9402
0000970E 08A8 0000 0001             		bclr	#0,1(a0)
00009714                            
00009714                            locret_9402:
00009714 4E75                       		rts	
00009716                            
00009716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009716                            
00009716                            
00009716                            sub_9404:
00009716 3038 D008                  		move.w	($FFFFD008).w,d0
0000971A 9068 0008                  		sub.w	8(a0),d0
0000971E 0440 00B8                  		subi.w	#$B8,d0
00009722 4E75                       		rts	
00009724                            ; End of function sub_9404
00009724                            
00009724                            ; ===========================================================================
00009724                            ; ---------------------------------------------------------------------------
00009724                            ; Object 29 - points that appear when you destroy something
00009724                            ; ---------------------------------------------------------------------------
00009724                            
00009724                            Obj29:					; XREF: Obj_Index
00009724 7000                       		moveq	#0,d0
00009726 1028 0024                  		move.b	$24(a0),d0
0000972A 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000972E 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009732 6000 0000                  		bra.w	DisplaySprite
00009736                            ; ===========================================================================
00009736 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009738 0000                       		dc.w Obj29_Slower-Obj29_Index
0000973A                            ; ===========================================================================
0000973A                            
0000973A                            Obj29_Main:				; XREF: Obj29_Index
0000973A 5428 0024                  		addq.b	#2,$24(a0)
0000973E 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009746 317C 2797 0002             		move.w	#$2797,2(a0)
0000974C 117C 0004 0001             		move.b	#4,1(a0)
00009752 117C 0001 0018             		move.b	#1,$18(a0)
00009758 117C 0008 0019             		move.b	#8,$19(a0)
0000975E 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009764                            
00009764                            Obj29_Slower:				; XREF: Obj29_Index
00009764 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009768 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000976C 6100 0000                  		bsr.w	SpeedToPos
00009770 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009776 4E75                       		rts	
00009778                            ; ===========================================================================
00009778                            ; ---------------------------------------------------------------------------
00009778                            ; Sprite mappings - animals
00009778                            ; ---------------------------------------------------------------------------
00009778                            Map_obj28:
00009778                            	include "_maps\obj28.asm"
00009778                            ; ---------------------------------------------------------------------------
00009778                            ; Sprite mappings - animals
00009778                            ; ---------------------------------------------------------------------------
00009778 0000                       		dc.w byte_9472-Map_obj28
0000977A 0000                       		dc.w byte_9478-Map_obj28
0000977C 0000                       		dc.w byte_946C-Map_obj28
0000977E 01                         byte_946C:	dc.b 1
0000977F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009784 01                         byte_9472:	dc.b 1
00009785 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000978A 01                         byte_9478:	dc.b 1
0000978B F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009790                            		even
00009790                            		even
00009790                            
00009790                            Map_obj28a:
00009790                            	include "_maps\obj28a.asm"
00009790                            ; ---------------------------------------------------------------------------
00009790                            ; Sprite mappings - animals
00009790                            ; ---------------------------------------------------------------------------
00009790 0000                       		dc.w byte_948A-Map_obj28a
00009792 0000                       		dc.w byte_9490-Map_obj28a
00009794 0000                       		dc.w byte_9484-Map_obj28a
00009796 01                         byte_9484:	dc.b 1
00009797 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000979C 01                         byte_948A:	dc.b 1
0000979D FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
000097A2 01                         byte_9490:	dc.b 1
000097A3 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
000097A8                            		even
000097A8                            		even
000097A8                            
000097A8                            Map_obj28b:
000097A8                            	include "_maps\obj28b.asm"
000097A8                            ; ---------------------------------------------------------------------------
000097A8                            ; Sprite mappings - animals
000097A8                            ; ---------------------------------------------------------------------------
000097A8 0000                       		dc.w byte_94A2-Map_obj28b
000097AA 0000                       		dc.w byte_94A8-Map_obj28b
000097AC 0000                       		dc.w byte_949C-Map_obj28b
000097AE 01                         byte_949C:	dc.b 1
000097AF F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000097B4 01                         byte_94A2:	dc.b 1
000097B5 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
000097BA 01                         byte_94A8:	dc.b 1
000097BB FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
000097C0                            		even
000097C0                            		even
000097C0                            
000097C0                            ; ---------------------------------------------------------------------------
000097C0                            ; Sprite mappings - points that	appear when you	destroy	something
000097C0                            ; ---------------------------------------------------------------------------
000097C0                            Map_obj29:
000097C0                            	include "_maps\obj29.asm"
000097C0                            ; ---------------------------------------------------------------------------
000097C0                            ; Sprite mappings - points that	appear when you	destroy	something
000097C0                            ; ---------------------------------------------------------------------------
000097C0 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
000097C4 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
000097C8 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
000097CC 0000                       		dc.w byte_94E5-Map_obj29
000097CE 01                         byte_94BC:	dc.b 1
000097CF FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
000097D4 01                         byte_94C2:	dc.b 1
000097D5 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
000097DA 01                         byte_94C8:	dc.b 1
000097DB FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
000097E0 01                         byte_94CE:	dc.b 1
000097E1 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
000097E6 01                         byte_94D4:	dc.b 1
000097E7 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
000097EC 02                         byte_94DA:	dc.b 2
000097ED FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
000097F2 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
000097F7 02                         byte_94E5:	dc.b 2
000097F8 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
000097FD FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009802                            		even
00009802                            		even
00009802                            
00009802                            ; ===========================================================================
00009802                            ; ---------------------------------------------------------------------------
00009802                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009802                            ; ---------------------------------------------------------------------------
00009802                            
00009802                            Obj1F:					; XREF: Obj_Index
00009802 7000                       		moveq	#0,d0
00009804 1028 0024                  		move.b	$24(a0),d0
00009808 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000980C 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009810                            ; ===========================================================================
00009810 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009812 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009814 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009816 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009818 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000981A                            ; ===========================================================================
0000981A                            
0000981A                            Obj1F_Main:				; XREF: Obj1F_Index
0000981A 117C 0010 0016             		move.b	#$10,$16(a0)
00009820 117C 0008 0017             		move.b	#8,$17(a0)
00009826 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000982E 317C 0400 0002             		move.w	#$400,2(a0)
00009834 117C 0004 0001             		move.b	#4,1(a0)
0000983A 117C 0003 0018             		move.b	#3,$18(a0)
00009840 117C 0006 0020             		move.b	#6,$20(a0)
00009846 117C 0015 0019             		move.b	#$15,$19(a0)
0000984C 6100 0000                  		bsr.w	ObjectFall
00009850 4EB9 0000 0000             		jsr	ObjHitFloor
00009856 4A41                       		tst.w	d1
00009858 6A00                       		bpl.s	locret_955A
0000985A D368 000C                  		add.w	d1,$C(a0)
0000985E 1143 0026                  		move.b	d3,$26(a0)
00009862 317C 0000 0012             		move.w	#0,$12(a0)
00009868 5428 0024                  		addq.b	#2,$24(a0)
0000986C                            
0000986C                            locret_955A:
0000986C 4E75                       		rts	
0000986E                            ; ===========================================================================
0000986E                            
0000986E                            Obj1F_Action:				; XREF: Obj1F_Index
0000986E 7000                       		moveq	#0,d0
00009870 1028 0025                  		move.b	$25(a0),d0
00009874 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009878 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000987C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009882 6100 0000                  		bsr.w	AnimateSprite
00009886 6000 0000                  		bra.w	MarkObjGone
0000988A                            ; ===========================================================================
0000988A 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000988C 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000988E                            ; ===========================================================================
0000988E                            
0000988E                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000988E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009892 6A00                       		bpl.s	locret_95B6
00009894 4A28 0001                  		tst.b	1(a0)
00009898 6A00                       		bpl.s	Obj1F_Move
0000989A 0868 0001 0032             		bchg	#1,$32(a0)
000098A0 6600                       		bne.s	Obj1F_MakeFire
000098A2                            
000098A2                            Obj1F_Move:
000098A2 5428 0025                  		addq.b	#2,$25(a0)
000098A6 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
000098AC 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
000098B2 6100 0000                  		bsr.w	Obj1F_SetAni
000098B6 5600                       		addq.b	#3,d0
000098B8 1140 001C                  		move.b	d0,$1C(a0)
000098BC 0868 0000 0022             		bchg	#0,$22(a0)
000098C2 6600                       		bne.s	locret_95B6
000098C4 4468 0010                  		neg.w	$10(a0)		; change direction
000098C8                            
000098C8                            locret_95B6:
000098C8 4E75                       		rts	
000098CA                            ; ===========================================================================
000098CA                            
000098CA                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
000098CA 317C 003B 0030             		move.w	#$3B,$30(a0)
000098D0 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
000098D6 6100 0000                  		bsr.w	SingleObjLoad
000098DA 6600                       		bne.s	Obj1F_MakeFire2
000098DC 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
000098E0 137C 0006 0024             		move.b	#6,$24(a1)
000098E6 3368 0008 0008             		move.w	8(a0),8(a1)
000098EC 0469 0010 0008             		subi.w	#$10,8(a1)
000098F2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000098F8 337C FF00 0010             		move.w	#-$100,$10(a1)
000098FE                            
000098FE                            Obj1F_MakeFire2:
000098FE 6100 0000                  		bsr.w	SingleObjLoad
00009902 6600                       		bne.s	locret_9618
00009904 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009908 137C 0006 0024             		move.b	#6,$24(a1)
0000990E 3368 0008 0008             		move.w	8(a0),8(a1)
00009914 0669 0010 0008             		addi.w	#$10,8(a1)
0000991A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009920 337C 0100 0010             		move.w	#$100,$10(a1)
00009926                            
00009926                            locret_9618:
00009926 4E75                       		rts	
00009928                            ; ===========================================================================
00009928                            
00009928                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009928 5368 0030                  		subq.w	#1,$30(a0)
0000992C 6B00                       		bmi.s	loc_966E
0000992E 6100 0000                  		bsr.w	SpeedToPos
00009932 0868 0000 0032             		bchg	#0,$32(a0)
00009938 6600                       		bne.s	loc_9654
0000993A 3628 0008                  		move.w	8(a0),d3
0000993E 0643 0010                  		addi.w	#$10,d3
00009942 0828 0000 0022             		btst	#0,$22(a0)
00009948 6700                       		beq.s	loc_9640
0000994A 0443 0020                  		subi.w	#$20,d3
0000994E                            
0000994E                            loc_9640:
0000994E 4EB9 0000 0000             		jsr	ObjHitFloor2
00009954 0C41 FFF8                  		cmpi.w	#-8,d1
00009958 6D00                       		blt.s	loc_966E
0000995A 0C41 000C                  		cmpi.w	#$C,d1
0000995E 6C00                       		bge.s	loc_966E
00009960 4E75                       		rts	
00009962                            ; ===========================================================================
00009962                            
00009962                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009962 4EB9 0000 0000             		jsr	ObjHitFloor
00009968 D368 000C                  		add.w	d1,$C(a0)
0000996C 1143 0026                  		move.b	d3,$26(a0)
00009970 6100 0000                  		bsr.w	Obj1F_SetAni
00009974 5600                       		addq.b	#3,d0
00009976 1140 001C                  		move.b	d0,$1C(a0)
0000997A 4E75                       		rts	
0000997C                            ; ===========================================================================
0000997C                            
0000997C                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000997C 5528 0025                  		subq.b	#2,$25(a0)
00009980 317C 003B 0030             		move.w	#59,$30(a0)
00009986 317C 0000 0010             		move.w	#0,$10(a0)
0000998C 6100 0000                  		bsr.w	Obj1F_SetAni
00009990 1140 001C                  		move.b	d0,$1C(a0)
00009994 4E75                       		rts	
00009996                            ; ---------------------------------------------------------------------------
00009996                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009996                            ; ---------------------------------------------------------------------------
00009996                            
00009996                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009996                            
00009996                            
00009996                            Obj1F_SetAni:				; XREF: loc_966E
00009996 7000                       		moveq	#0,d0
00009998 1628 0026                  		move.b	$26(a0),d3
0000999C 6B00                       		bmi.s	loc_96A4
0000999E 0C03 0006                  		cmpi.b	#6,d3
000099A2 6500                       		bcs.s	locret_96A2
000099A4 7001                       		moveq	#1,d0
000099A6 0828 0000 0022             		btst	#0,$22(a0)
000099AC 6600                       		bne.s	locret_96A2
000099AE 7002                       		moveq	#2,d0
000099B0                            
000099B0                            locret_96A2:
000099B0 4E75                       		rts	
000099B2                            ; ===========================================================================
000099B2                            
000099B2                            loc_96A4:				; XREF: Obj1F_SetAni
000099B2 0C03 00FA                  		cmpi.b	#-6,d3
000099B6 6200                       		bhi.s	locret_96B6
000099B8 7002                       		moveq	#2,d0
000099BA 0828 0000 0022             		btst	#0,$22(a0)
000099C0 6600                       		bne.s	locret_96B6
000099C2 7001                       		moveq	#1,d0
000099C4                            
000099C4                            locret_96B6:
000099C4 4E75                       		rts	
000099C6                            ; End of function Obj1F_SetAni
000099C6                            
000099C6                            ; ===========================================================================
000099C6                            
000099C6                            Obj1F_Delete:				; XREF: Obj1F_Index
000099C6 6100 0000                  		bsr.w	DeleteObject
000099CA 4E75                       		rts	
000099CC                            ; ===========================================================================
000099CC                            ; ---------------------------------------------------------------------------
000099CC                            ; Sub-object - missile that the	Crabmeat throws
000099CC                            ; ---------------------------------------------------------------------------
000099CC                            
000099CC                            Obj1F_BallMain:				; XREF: Obj1F_Index
000099CC 5428 0024                  		addq.b	#2,$24(a0)
000099D0 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000099D8 317C 0400 0002             		move.w	#$400,2(a0)
000099DE 117C 0004 0001             		move.b	#4,1(a0)
000099E4 117C 0003 0018             		move.b	#3,$18(a0)
000099EA 117C 0087 0020             		move.b	#$87,$20(a0)
000099F0 117C 0008 0019             		move.b	#8,$19(a0)
000099F6 317C FC00 0012             		move.w	#-$400,$12(a0)
000099FC 117C 0007 001C             		move.b	#7,$1C(a0)
00009A02                            
00009A02                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009A02 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009A08 6100 0000                  		bsr.w	AnimateSprite
00009A0C 6100 0000                  		bsr.w	ObjectFall
00009A10 6100 0000                  		bsr.w	DisplaySprite
00009A14 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009A18 0640 00E0                  		addi.w	#$E0,d0
00009A1C B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009A20 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009A22 4E75                       		rts	
00009A24                            ; ===========================================================================
00009A24                            
00009A24                            Obj1F_Delete2:
00009A24 6000 0000                  		bra.w	DeleteObject
00009A28                            ; ===========================================================================
00009A28                            Ani_obj1F:
00009A28                            	include "_anim\obj1F.asm"
00009A28                            ; ---------------------------------------------------------------------------
00009A28                            ; Animation script - Crabmeat enemy
00009A28                            ; ---------------------------------------------------------------------------
00009A28 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009A2E 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009A34 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009A38 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009A3C 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009A40 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009A44 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009A4A 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009A50 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009A56 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009A5A 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009A5E                            		even
00009A5E                            		even
00009A5E                            
00009A5E                            ; ---------------------------------------------------------------------------
00009A5E                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009A5E                            ; ---------------------------------------------------------------------------
00009A5E                            Map_obj1F:
00009A5E                            	include "_maps\obj1F.asm"
00009A5E                            ; ---------------------------------------------------------------------------
00009A5E                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009A5E                            ; ---------------------------------------------------------------------------
00009A5E 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
00009A62 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
00009A66 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
00009A6A 0000                       		dc.w byte_97D7-Map_obj1F
00009A6C 04                         byte_975E:	dc.b 4
00009A6D F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
00009A72 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
00009A77 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
00009A7C 0005 0806 00               		dc.b 0,	5, 8, 6, 0
00009A81 04                         byte_9773:	dc.b 4
00009A82 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
00009A87 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
00009A8C 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
00009A91 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
00009A96 04                         byte_9788:	dc.b 4
00009A97 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
00009A9C EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
00009AA1 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
00009AA6 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
00009AAB 04                         byte_979D:	dc.b 4
00009AAC EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
00009AB1 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
00009AB6 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
00009ABB FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
00009AC0 06                         byte_97B2:	dc.b 6
00009AC1 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
00009AC6 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
00009ACB F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
00009AD0 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
00009AD5 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
00009ADA 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
00009ADF 01                         byte_97D1:	dc.b 1
00009AE0 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
00009AE5 01                         byte_97D7:	dc.b 1
00009AE6 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
00009AEC 00                         		even
00009AEC 00                         		even
00009AEC                            
00009AEC                            ; ===========================================================================
00009AEC                            ; ---------------------------------------------------------------------------
00009AEC                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009AEC                            ; ---------------------------------------------------------------------------
00009AEC                            
00009AEC                            Obj22:					; XREF: Obj_Index
00009AEC 7000                       		moveq	#0,d0
00009AEE 1028 0024                  		move.b	$24(a0),d0
00009AF2 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009AF6 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009AFA                            ; ===========================================================================
00009AFA 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009AFC 0000                       		dc.w Obj22_Action-Obj22_Index
00009AFE 0000                       		dc.w Obj22_Delete-Obj22_Index
00009B00                            ; ===========================================================================
00009B00                            
00009B00                            Obj22_Main:				; XREF: Obj22_Index
00009B00 5428 0024                  		addq.b	#2,$24(a0)
00009B04 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009B0C 317C 0444 0002             		move.w	#$444,2(a0)
00009B12 117C 0004 0001             		move.b	#4,1(a0)
00009B18 117C 0003 0018             		move.b	#3,$18(a0)
00009B1E 117C 0008 0020             		move.b	#8,$20(a0)
00009B24 117C 0018 0019             		move.b	#$18,$19(a0)
00009B2A                            
00009B2A                            Obj22_Action:				; XREF: Obj22_Index
00009B2A 7000                       		moveq	#0,d0
00009B2C 1028 0025                  		move.b	$25(a0),d0
00009B30 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009B34 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009B38 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009B3E 6100 0000                  		bsr.w	AnimateSprite
00009B42 6000 0000                  		bra.w	MarkObjGone
00009B46                            ; ===========================================================================
00009B46 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009B48 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009B4A                            ; ===========================================================================
00009B4A                            
00009B4A                            Obj22_Move:				; XREF: Obj22_Index2
00009B4A 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009B4E 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009B50 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009B56 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009B58 5428 0025                  		addq.b	#2,$25(a0)
00009B5C 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009B62 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009B68 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009B6E 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009B74 6600                       		bne.s	locret_986C	; if not, branch
00009B76 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009B7A                            
00009B7A                            locret_986C:
00009B7A 4E75                       		rts	
00009B7C                            ; ===========================================================================
00009B7C                            
00009B7C                            Obj22_Fire:				; XREF: Obj22_Move
00009B7C 6100 0000                  		bsr.w	SingleObjLoad
00009B80 6600                       		bne.s	locret_98D0
00009B82 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009B86 3368 0008 0008             		move.w	8(a0),8(a1)
00009B8C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009B92 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009B98 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009B9E 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009BA4 303C 0018                  		move.w	#$18,d0
00009BA8 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009BAE 6600                       		bne.s	loc_98AA	; if not, branch
00009BB0 4440                       		neg.w	d0
00009BB2 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009BB6                            
00009BB6                            loc_98AA:
00009BB6 D169 0008                  		add.w	d0,8(a1)
00009BBA 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009BC0 337C 000E 0032             		move.w	#$E,$32(a1)
00009BC6 2348 003C                  		move.l	a0,$3C(a1)
00009BCA 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009BD0 317C 003B 0032             		move.w	#$3B,$32(a0)
00009BD6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009BDC                            
00009BDC                            locret_98D0:
00009BDC 4E75                       		rts	
00009BDE                            ; ===========================================================================
00009BDE                            
00009BDE                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009BDE 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009BE2 6B00                       		bmi.s	Obj22_ChgDir
00009BE4 6100 0000                  		bsr.w	SpeedToPos
00009BE8 4A28 0034                  		tst.b	$34(a0)
00009BEC 6600                       		bne.s	locret_992A
00009BEE 3038 D008                  		move.w	($FFFFD008).w,d0
00009BF2 9068 0008                  		sub.w	8(a0),d0
00009BF6 6A00                       		bpl.s	Obj22_SetNrSonic
00009BF8 4440                       		neg.w	d0
00009BFA                            
00009BFA                            Obj22_SetNrSonic:
00009BFA 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009BFE 6400                       		bcc.s	locret_992A	; if not, branch
00009C00 4A28 0001                  		tst.b	1(a0)
00009C04 6A00                       		bpl.s	locret_992A
00009C06 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009C0C 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009C12 6000                       		bra.s	Obj22_Stop
00009C14                            ; ===========================================================================
00009C14                            
00009C14                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009C14 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009C1A 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009C20 317C 003B 0032             		move.w	#59,$32(a0)
00009C26                            
00009C26                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009C26 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009C2A 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009C30 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009C36                            
00009C36                            locret_992A:
00009C36 4E75                       		rts	
00009C38                            ; ===========================================================================
00009C38                            
00009C38                            Obj22_Delete:				; XREF: Obj22_Index
00009C38 6100 0000                  		bsr.w	DeleteObject
00009C3C 4E75                       		rts	
00009C3E                            ; ===========================================================================
00009C3E                            ; ---------------------------------------------------------------------------
00009C3E                            ; Object 23 - missile that Buzz	Bomber throws
00009C3E                            ; ---------------------------------------------------------------------------
00009C3E                            
00009C3E                            Obj23:					; XREF: Obj_Index
00009C3E 7000                       		moveq	#0,d0
00009C40 1028 0024                  		move.b	$24(a0),d0
00009C44 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009C48 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009C4C                            ; ===========================================================================
00009C4C 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009C4E 0000                       		dc.w Obj23_Animate-Obj23_Index
00009C50 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009C52 0000                       		dc.w Obj23_Delete-Obj23_Index
00009C54 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009C56                            ; ===========================================================================
00009C56                            
00009C56                            Obj23_Main:				; XREF: Obj23_Index
00009C56 5368 0032                  		subq.w	#1,$32(a0)
00009C5A 6A00                       		bpl.s	Obj23_ChkCancel
00009C5C 5428 0024                  		addq.b	#2,$24(a0)
00009C60 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009C68 317C 2444 0002             		move.w	#$2444,2(a0)
00009C6E 117C 0004 0001             		move.b	#4,1(a0)
00009C74 117C 0003 0018             		move.b	#3,$18(a0)
00009C7A 117C 0008 0019             		move.b	#8,$19(a0)
00009C80 0228 0003 0022             		andi.b	#3,$22(a0)
00009C86 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009C8A 6700                       		beq.s	Obj23_Animate	; if not, branch
00009C8C 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009C92 117C 0087 0020             		move.b	#$87,$20(a0)
00009C98 117C 0001 001C             		move.b	#1,$1C(a0)
00009C9E 6000                       		bra.s	Obj23_Animate2
00009CA0                            ; ===========================================================================
00009CA0                            
00009CA0                            Obj23_Animate:				; XREF: Obj23_Index
00009CA0 6100                       		bsr.s	Obj23_ChkCancel
00009CA2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009CA8 6100 0000                  		bsr.w	AnimateSprite
00009CAC 6000 0000                  		bra.w	DisplaySprite
00009CB0                            ; ---------------------------------------------------------------------------
00009CB0                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009CB0                            ; destroyed, and if it has, then cancel	the missile
00009CB0                            ; ---------------------------------------------------------------------------
00009CB0                            
00009CB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009CB0                            
00009CB0                            
00009CB0                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009CB0 2268 003C                  		movea.l	$3C(a0),a1
00009CB4 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009CB8 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009CBA 4E75                       		rts	
00009CBC                            ; End of function Obj23_ChkCancel
00009CBC                            
00009CBC                            ; ===========================================================================
00009CBC                            
00009CBC                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009CBC 0828 0007 0022             		btst	#7,$22(a0)
00009CC2 6600                       		bne.s	Obj23_Explode
00009CC4 117C 0087 0020             		move.b	#$87,$20(a0)
00009CCA 117C 0001 001C             		move.b	#1,$1C(a0)
00009CD0 6100 0000                  		bsr.w	SpeedToPos
00009CD4 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009CDA 6100 0000                  		bsr.w	AnimateSprite
00009CDE 6100 0000                  		bsr.w	DisplaySprite
00009CE2 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009CE6 0640 00E0                  		addi.w	#$E0,d0
00009CEA B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009CEE 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009CF0 4E75                       		rts	
00009CF2                            ; ===========================================================================
00009CF2                            
00009CF2                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009CF2 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009CF6 117C 0000 0024             		move.b	#0,$24(a0)
00009CFC 6000 F30A                  		bra.w	Obj24
00009D00                            ; ===========================================================================
00009D00                            
00009D00                            Obj23_Delete:				; XREF: Obj23_Index
00009D00 6100 0000                  		bsr.w	DeleteObject
00009D04 4E75                       		rts	
00009D06                            ; ===========================================================================
00009D06                            
00009D06                            Obj23_FromNewt:				; XREF: Obj23_Index
00009D06 4A28 0001                  		tst.b	1(a0)
00009D0A 6AF4                       		bpl.s	Obj23_Delete
00009D0C 6100 0000                  		bsr.w	SpeedToPos
00009D10                            
00009D10                            Obj23_Animate2:				; XREF: Obj23_Main
00009D10 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009D16 6100 0000                  		bsr.w	AnimateSprite
00009D1A 6100 0000                  		bsr.w	DisplaySprite
00009D1E 4E75                       		rts	
00009D20                            ; ===========================================================================
00009D20                            Ani_obj22:
00009D20                            	include "_anim\obj22.asm"
00009D20                            ; ---------------------------------------------------------------------------
00009D20                            ; Animation script - Buzz Bomber enemy
00009D20                            ; ---------------------------------------------------------------------------
00009D20 0000                       		dc.w byte_9A1E-Ani_obj22
00009D22 0000                       		dc.w byte_9A22-Ani_obj22
00009D24 0000                       		dc.w byte_9A26-Ani_obj22
00009D26 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009D2A 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009D2E 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009D32                            		even
00009D32                            		even
00009D32                            
00009D32                            Ani_obj23:
00009D32                            	include "_anim\obj23.asm"
00009D32                            ; ---------------------------------------------------------------------------
00009D32                            ; Animation script - missile that Buzz Bomber throws
00009D32                            ; ---------------------------------------------------------------------------
00009D32 0000                       		dc.w byte_9A2E-Ani_obj23
00009D34 0000                       		dc.w byte_9A32-Ani_obj23
00009D36 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009D3A 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009D3E                            		even
00009D3E                            		even
00009D3E                            
00009D3E                            ; ---------------------------------------------------------------------------
00009D3E                            ; Sprite mappings - Buzz Bomber	enemy
00009D3E                            ; ---------------------------------------------------------------------------
00009D3E                            Map_obj22:
00009D3E                            	include "_maps\obj22.asm"
00009D3E                            Map_e97a:
00009D3E 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009D40 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009D42 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009D44 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009D46 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009D48 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009D4A 06                         Map_e97a_C: 	dc.b $6
00009D4B F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009D50 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009D55 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009D5A 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009D5F F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009D64 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009D69 06                         Map_e97a_2B: 	dc.b $6
00009D6A F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009D6F F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009D74 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009D79 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009D7E F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009D83 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009D88 07                         Map_e97a_4A: 	dc.b $7
00009D89 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009D8E F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009D93 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009D98 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009D9D 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009DA2 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009DA7 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009DAC 07                         Map_e97a_6E: 	dc.b $7
00009DAD 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
00009DB2 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009DB7 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009DBC 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009DC1 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009DC6 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009DCB F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009DD0 06                         Map_e97a_92: 	dc.b $6
00009DD1 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009DD6 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009DDB 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009DE0 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009DE5 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009DEA F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009DEF 04                         Map_e97a_B1: 	dc.b $4
00009DF0 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009DF5 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009DFA 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009DFF 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009E04                            	even
00009E04                            	even
00009E04                            
00009E04                            ; ---------------------------------------------------------------------------
00009E04                            ; Sprite mappings - missile that Buzz Bomber throws
00009E04                            ; ---------------------------------------------------------------------------
00009E04                            Map_obj23:
00009E04                            	include "_maps\obj23.asm"
00009E04                            ; ---------------------------------------------------------------------------
00009E04                            ; Sprite mappings - missile that Buzz Bomber throws
00009E04                            ; ---------------------------------------------------------------------------
00009E04 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009E08 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009E0C 01                         byte_9B0E:	dc.b 1
00009E0D F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009E12 01                         byte_9B14:	dc.b 1
00009E13 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009E18 01                         byte_9B1A:	dc.b 1
00009E19 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009E1E 01                         byte_9B20:	dc.b 1
00009E1F F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009E24                            		even
00009E24                            		even
00009E24                            
00009E24                            ; ===========================================================================
00009E24                            ; ---------------------------------------------------------------------------
00009E24                            ; Object 25 - rings
00009E24                            ; ---------------------------------------------------------------------------
00009E24                            
00009E24                            Obj25:					; XREF: Obj_Index
00009E24 7000                       		moveq	#0,d0
00009E26 1028 0024                  		move.b	$24(a0),d0
00009E2A 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009E2E 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009E32                            ; ===========================================================================
00009E32 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009E34 0000                       		dc.w Obj25_Animate-Obj25_Index
00009E36 0000                       		dc.w Obj25_Collect-Obj25_Index
00009E38 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009E3A 0000                       		dc.w Obj25_Delete-Obj25_Index
00009E3C                            ; ---------------------------------------------------------------------------
00009E3C                            ; Distances between rings (format: horizontal, vertical)
00009E3C                            ; ---------------------------------------------------------------------------
00009E3C 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009E3E 1800                       		dc.b $18, 0		; horizontal normal
00009E40 2000                       		dc.b $20, 0		; horizontal wide
00009E42 0010                       		dc.b 0,	$10		; vertical tight
00009E44 0018                       		dc.b 0,	$18		; vertical normal
00009E46 0020                       		dc.b 0,	$20		; vertical wide
00009E48 1010                       		dc.b $10, $10		; diagonal
00009E4A 1818                       		dc.b $18, $18
00009E4C 2020                       		dc.b $20, $20
00009E4E F010                       		dc.b $F0, $10
00009E50 E818                       		dc.b $E8, $18
00009E52 E020                       		dc.b $E0, $20
00009E54 1008                       		dc.b $10, 8
00009E56 1810                       		dc.b $18, $10
00009E58 F008                       		dc.b $F0, 8
00009E5A E810                       		dc.b $E8, $10
00009E5C                            ; ===========================================================================
00009E5C                            
00009E5C                            Obj25_Main:				; XREF: Obj25_Index
00009E5C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009E60 7000                       		moveq	#0,d0
00009E62 1028 0023                  		move.b	$23(a0),d0
00009E66 45F2 0002                  		lea	2(a2,d0.w),a2
00009E6A 1812                       		move.b	(a2),d4
00009E6C 1228 0028                  		move.b	$28(a0),d1
00009E70 1001                       		move.b	d1,d0
00009E72 0241 0007                  		andi.w	#7,d1
00009E76 0C41 0007                  		cmpi.w	#7,d1
00009E7A 6600                       		bne.s	loc_9B80
00009E7C 7206                       		moveq	#6,d1
00009E7E                            
00009E7E                            loc_9B80:
00009E7E 4841                       		swap	d1
00009E80 323C 0000                  		move.w	#0,d1
00009E84 E808                       		lsr.b	#4,d0
00009E86 D040                       		add.w	d0,d0
00009E88 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00009E8C 4885                       		ext.w	d5
00009E8E 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00009E92 4886                       		ext.w	d6
00009E94 2248                       		movea.l	a0,a1
00009E96 3428 0008                  		move.w	8(a0),d2
00009E9A 3628 000C                  		move.w	$C(a0),d3
00009E9E E20C                       		lsr.b	#1,d4
00009EA0 6500                       		bcs.s	loc_9C02
00009EA2 0892 0007                  		bclr	#7,(a2)
00009EA6 6000                       		bra.s	loc_9BBA
00009EA8                            ; ===========================================================================
00009EA8                            
00009EA8                            Obj25_MakeRings:
00009EA8 4841                       		swap	d1
00009EAA E20C                       		lsr.b	#1,d4
00009EAC 6500                       		bcs.s	loc_9C02
00009EAE 0892 0007                  		bclr	#7,(a2)
00009EB2 6100 0000                  		bsr.w	SingleObjLoad
00009EB6 6600                       		bne.s	loc_9C0E
00009EB8                            
00009EB8                            loc_9BBA:				; XREF: Obj25_Main
00009EB8 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
00009EBC 5429 0024                  		addq.b	#2,$24(a1)
00009EC0 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
00009EC4 3368 0008 0032             		move.w	8(a0),$32(a1)
00009ECA 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
00009ECE 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009ED6 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009EDC 137C 0004 0001             		move.b	#4,1(a1)
00009EE2 137C 0002 0018             		move.b	#2,$18(a1)
00009EE8 137C 0047 0020             		move.b	#$47,$20(a1)
00009EEE 137C 0008 0019             		move.b	#8,$19(a1)
00009EF4 1368 0023 0023             		move.b	$23(a0),$23(a1)
00009EFA 1341 0034                  		move.b	d1,$34(a1)
00009EFE                            
00009EFE                            loc_9C02:
00009EFE 5241                       		addq.w	#1,d1
00009F00 D445                       		add.w	d5,d2		; add ring spacing value to d2
00009F02 D646                       		add.w	d6,d3		; add ring spacing value to d3
00009F04 4841                       		swap	d1
00009F06 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
00009F0A                            
00009F0A                            loc_9C0E:
00009F0A 0812 0000                  		btst	#0,(a2)
00009F0E 6600 0000                  		bne.w	DeleteObject
00009F12                            
00009F12                            Obj25_Animate:				; XREF: Obj25_Index
00009F12 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
00009F18 6100 0000                  		bsr.w	DisplaySprite
00009F1C 3028 0032                  		move.w	$32(a0),d0
00009F20 0240 FF80                  		andi.w	#$FF80,d0
00009F24 3238 F700                  		move.w	($FFFFF700).w,d1
00009F28 0441 0080                  		subi.w	#$80,d1
00009F2C 0241 FF80                  		andi.w	#$FF80,d1
00009F30 9041                       		sub.w	d1,d0
00009F32 0C40 0280                  		cmpi.w	#$280,d0
00009F36 6200                       		bhi.s	Obj25_Delete
00009F38 4E75                       		rts	
00009F3A                            ; ===========================================================================
00009F3A                            
00009F3A                            Obj25_Collect:				; XREF: Obj25_Index
00009F3A 5428 0024                  		addq.b	#2,$24(a0)
00009F3E 117C 0000 0020             		move.b	#0,$20(a0)
00009F44 117C 0001 0018             		move.b	#1,$18(a0)
00009F4A 6100 0000                  		bsr.w	CollectRing
00009F4E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009F52 7000                       		moveq	#0,d0
00009F54 1028 0023                  		move.b	$23(a0),d0
00009F58 1228 0034                  		move.b	$34(a0),d1
00009F5C 03F2 0002                  		bset	d1,2(a2,d0.w)
00009F60                            
00009F60                            Obj25_Sparkle:				; XREF: Obj25_Index
00009F60 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009F66 6100 0000                  		bsr.w	AnimateSprite
00009F6A 6000 0000                  		bra.w	DisplaySprite
00009F6E                            ; ===========================================================================
00009F6E                            
00009F6E                            Obj25_Delete:				; XREF: Obj25_Index
00009F6E 6000 0000                  		bra.w	DeleteObject
00009F72                            
00009F72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F72                            
00009F72                            
00009F72                            CollectRing:				; XREF: Obj25_Collect
00009F72 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
00009F76 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
00009F7C 303C 00B5                  		move.w	#$B5,d0		; play ring sound
00009F80 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
00009F86 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009F88 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
00009F8E 6700                       		beq.s	loc_9CA4
00009F90 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
00009F96 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009F98 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
00009F9E 6600                       		bne.s	Obj25_PlaySnd
00009FA0                            
00009FA0                            loc_9CA4:
00009FA0 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
00009FA4 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
00009FA8 303C 0088                  		move.w	#$88,d0		; play extra life music
00009FAC                            
00009FAC                            Obj25_PlaySnd:
00009FAC 4EF9 0000 15BC             		jmp	(PlaySound_Special).l
00009FB2                            ; End of function CollectRing
00009FB2                            
00009FB2                            ; ===========================================================================
00009FB2                            ; ---------------------------------------------------------------------------
00009FB2                            ; Object 37 - rings flying out of Sonic	when he's hit
00009FB2                            ; ---------------------------------------------------------------------------
00009FB2                            
00009FB2                            Obj37:					; XREF: Obj_Index
00009FB2 7000                       		moveq	#0,d0
00009FB4 1028 0024                  		move.b	$24(a0),d0
00009FB8 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
00009FBC 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
00009FC0                            ; ===========================================================================
00009FC0 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
00009FC2 0000                       		dc.w Obj37_Bounce-Obj37_Index
00009FC4 0000                       		dc.w Obj37_Collect-Obj37_Index
00009FC6 0000                       		dc.w Obj37_Sparkle-Obj37_Index
00009FC8 0000                       		dc.w Obj37_Delete-Obj37_Index
00009FCA                            ; ===========================================================================
00009FCA                            
00009FCA                            Obj37_CountRings:			; XREF: Obj37_Index
00009FCA 2248                       		movea.l	a0,a1
00009FCC 7A00                       		moveq	#0,d5
00009FCE 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
00009FD2 7020                       		moveq	#32,d0
00009FD4 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
00009FD6 6500                       		bcs.s	loc_9CDE	; if not, branch
00009FD8 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
00009FDA                            
00009FDA                            loc_9CDE:
00009FDA 5345                       		subq.w	#1,d5
00009FDC 383C 0288                  		move.w	#$288,d4
00009FE0 6000                       		bra.s	Obj37_MakeRings
00009FE2                            ; ===========================================================================
00009FE2                            
00009FE2                            Obj37_Loop:
00009FE2 6100 0000                  		bsr.w	SingleObjLoad
00009FE6 6600 0000                  		bne.w	Obj37_ResetCounter
00009FEA                            
00009FEA                            Obj37_MakeRings:			; XREF: Obj37_CountRings
00009FEA 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
00009FEE 5429 0024                  		addq.b	#2,$24(a1)
00009FF2 137C 0008 0016             		move.b	#8,$16(a1)
00009FF8 137C 0008 0017             		move.b	#8,$17(a1)
00009FFE 3368 0008 0008             		move.w	8(a0),8(a1)
0000A004 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A00A 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A012 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A018 137C 0004 0001             		move.b	#4,1(a1)
0000A01E 137C 0003 0018             		move.b	#3,$18(a1)
0000A024 137C 0047 0020             		move.b	#$47,$20(a1)
0000A02A 137C 0008 0019             		move.b	#8,$19(a1)
0000A030 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A036 4A44                       		tst.w	d4
0000A038 6B00                       		bmi.s	loc_9D62
0000A03A 3004                       		move.w	d4,d0
0000A03C 6100 8BBC                  		bsr.w	CalcSine
0000A040 3404                       		move.w	d4,d2
0000A042 E04A                       		lsr.w	#8,d2
0000A044 E560                       		asl.w	d2,d0
0000A046 E561                       		asl.w	d2,d1
0000A048 3400                       		move.w	d0,d2
0000A04A 3601                       		move.w	d1,d3
0000A04C 0604 0010                  		addi.b	#$10,d4
0000A050 6400                       		bcc.s	loc_9D62
0000A052 0444 0080                  		subi.w	#$80,d4
0000A056 6400                       		bcc.s	loc_9D62
0000A058 383C 0288                  		move.w	#$288,d4
0000A05C                            
0000A05C                            loc_9D62:
0000A05C 3342 0010                  		move.w	d2,$10(a1)
0000A060 3343 0012                  		move.w	d3,$12(a1)
0000A064 4442                       		neg.w	d2
0000A066 4444                       		neg.w	d4
0000A068 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A06C                            
0000A06C                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A06C 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A072 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A078 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A07E 303C 00C6                  		move.w	#$C6,d0
0000A082 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A088                            
0000A088                            Obj37_Bounce:				; XREF: Obj37_Index
0000A088 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A08E 6100 0000                  		bsr.w	SpeedToPos
0000A092 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A098 6B00                       		bmi.s	Obj37_ChkDel
0000A09A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A09E D007                       		add.b	d7,d0
0000A0A0 0200 0003                  		andi.b	#3,d0
0000A0A4 6600                       		bne.s	Obj37_ChkDel
0000A0A6 4EB9 0000 0000             		jsr	ObjHitFloor
0000A0AC 4A41                       		tst.w	d1
0000A0AE 6A00                       		bpl.s	Obj37_ChkDel
0000A0B0 D368 000C                  		add.w	d1,$C(a0)
0000A0B4 3028 0012                  		move.w	$12(a0),d0
0000A0B8 E440                       		asr.w	#2,d0
0000A0BA 9168 0012                  		sub.w	d0,$12(a0)
0000A0BE 4468 0012                  		neg.w	$12(a0)
0000A0C2                            
0000A0C2                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A0C2 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A0C6 6700                       		beq.s	Obj37_Delete
0000A0C8 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A0CC 0640 00E0                  		addi.w	#$E0,d0
0000A0D0 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A0D4 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A0D6 6000 0000                  		bra.w	DisplaySprite
0000A0DA                            ; ===========================================================================
0000A0DA                            
0000A0DA                            Obj37_Collect:				; XREF: Obj37_Index
0000A0DA 5428 0024                  		addq.b	#2,$24(a0)
0000A0DE 117C 0000 0020             		move.b	#0,$20(a0)
0000A0E4 117C 0001 0018             		move.b	#1,$18(a0)
0000A0EA 6100 FE86                  		bsr.w	CollectRing
0000A0EE                            
0000A0EE                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A0EE 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A0F4 6100 0000                  		bsr.w	AnimateSprite
0000A0F8 6000 0000                  		bra.w	DisplaySprite
0000A0FC                            ; ===========================================================================
0000A0FC                            
0000A0FC                            Obj37_Delete:				; XREF: Obj37_Index
0000A0FC 6000 0000                  		bra.w	DeleteObject
0000A100                            ; ===========================================================================
0000A100                            ; ---------------------------------------------------------------------------
0000A100                            ; Object 4B - giant ring for entry to special stage
0000A100                            ; ---------------------------------------------------------------------------
0000A100                            
0000A100                            Obj4B:					; XREF: Obj_Index
0000A100 7000                       		moveq	#0,d0
0000A102 1028 0024                  		move.b	$24(a0),d0
0000A106 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A10A 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A10E                            ; ===========================================================================
0000A10E 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A110 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A112 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A114 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A116                            ; ===========================================================================
0000A116                            
0000A116                            Obj4B_Main:				; XREF: Obj4B_Index
0000A116 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A11E 317C 2400 0002             		move.w	#$2400,2(a0)
0000A124 0028 0004 0001             		ori.b	#4,1(a0)
0000A12A 117C 0040 0019             		move.b	#$40,$19(a0)
0000A130 4A28 0001                  		tst.b	1(a0)
0000A134 6A00                       		bpl.s	Obj4B_Animate
0000A136 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A13C 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A140 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A146 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A148 4E75                       		rts	
0000A14A                            ; ===========================================================================
0000A14A                            
0000A14A                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A14A 5428 0024                  		addq.b	#2,$24(a0)
0000A14E 117C 0002 0018             		move.b	#2,$18(a0)
0000A154 117C 0052 0020             		move.b	#$52,$20(a0)
0000A15A 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A160                            
0000A160                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A160 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A166 3028 0008                  		move.w	8(a0),d0
0000A16A 0240 FF80                  		andi.w	#$FF80,d0
0000A16E 3238 F700                  		move.w	($FFFFF700).w,d1
0000A172 0441 0080                  		subi.w	#$80,d1
0000A176 0241 FF80                  		andi.w	#$FF80,d1
0000A17A 9041                       		sub.w	d1,d0
0000A17C 0C40 0280                  		cmpi.w	#$280,d0
0000A180 6200 0000                  		bhi.w	DeleteObject
0000A184 6000 0000                  		bra.w	DisplaySprite
0000A188                            ; ===========================================================================
0000A188                            
0000A188                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A188 5528 0024                  		subq.b	#2,$24(a0)
0000A18C 117C 0000 0020             		move.b	#0,$20(a0)
0000A192 6100 0000                  		bsr.w	SingleObjLoad
0000A196 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A19A 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A19E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A1A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A1AA 2348 003C                  		move.l	a0,$3C(a1)
0000A1AE 3038 D008                  		move.w	($FFFFD008).w,d0
0000A1B2 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A1B6 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A1B8 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A1BE                            
0000A1BE                            Obj4B_PlaySnd:
0000A1BE 303C 00C3                  		move.w	#$C3,d0
0000A1C2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A1C8 6096                       		bra.s	Obj4B_Animate
0000A1CA                            ; ===========================================================================
0000A1CA                            
0000A1CA                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A1CA 6000 0000                  		bra.w	DeleteObject
0000A1CE                            ; ===========================================================================
0000A1CE                            ; ---------------------------------------------------------------------------
0000A1CE                            ; Object 7C - flash effect when	you collect the	giant ring
0000A1CE                            ; ---------------------------------------------------------------------------
0000A1CE                            
0000A1CE                            Obj7C:					; XREF: Obj_Index
0000A1CE 7000                       		moveq	#0,d0
0000A1D0 1028 0024                  		move.b	$24(a0),d0
0000A1D4 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A1D8 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A1DC                            ; ===========================================================================
0000A1DC 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A1DE 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A1E0 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A1E2                            ; ===========================================================================
0000A1E2                            
0000A1E2                            Obj7C_Main:				; XREF: Obj7C_Index
0000A1E2 5428 0024                  		addq.b	#2,$24(a0)
0000A1E6 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A1EE 317C 2462 0002             		move.w	#$2462,2(a0)
0000A1F4 0028 0004 0001             		ori.b	#4,1(a0)
0000A1FA 117C 0000 0018             		move.b	#0,$18(a0)
0000A200 117C 0020 0019             		move.b	#$20,$19(a0)
0000A206 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A20C                            
0000A20C                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A20C 6100                       		bsr.s	Obj7C_Collect
0000A20E 3028 0008                  		move.w	8(a0),d0
0000A212 0240 FF80                  		andi.w	#$FF80,d0
0000A216 3238 F700                  		move.w	($FFFFF700).w,d1
0000A21A 0441 0080                  		subi.w	#$80,d1
0000A21E 0241 FF80                  		andi.w	#$FF80,d1
0000A222 9041                       		sub.w	d1,d0
0000A224 0C40 0280                  		cmpi.w	#$280,d0
0000A228 6200 0000                  		bhi.w	DeleteObject
0000A22C 6000 0000                  		bra.w	DisplaySprite
0000A230                            
0000A230                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A230                            
0000A230                            
0000A230                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A230 5328 001E                  		subq.b	#1,$1E(a0)
0000A234 6A00                       		bpl.s	locret_9F76
0000A236 117C 0001 001E             		move.b	#1,$1E(a0)
0000A23C 5228 001A                  		addq.b	#1,$1A(a0)
0000A240 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A246 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A248 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A24E 6600                       		bne.s	locret_9F76	; if not, branch
0000A250 2268 003C                  		movea.l	$3C(a0),a1
0000A254 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A25A 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A260 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A266 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A26A 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A26E                            
0000A26E                            locret_9F76:
0000A26E 4E75                       		rts	
0000A270                            ; ===========================================================================
0000A270                            
0000A270                            Obj7C_End:				; XREF: Obj7C_Collect
0000A270 5428 0024                  		addq.b	#2,$24(a0)
0000A274 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A27A 588F                       		addq.l	#4,sp
0000A27C 4E75                       		rts	
0000A27E                            ; End of function Obj7C_Collect
0000A27E                            
0000A27E                            ; ===========================================================================
0000A27E                            
0000A27E                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A27E 6000 0000                  		bra.w	DeleteObject
0000A282                            ; ===========================================================================
0000A282                            Ani_obj25:
0000A282                            	include "_anim\obj25.asm"
0000A282                            ; ---------------------------------------------------------------------------
0000A282                            ; Animation script - ring
0000A282                            ; ---------------------------------------------------------------------------
0000A282 0000                       		dc.w byte_9F8C-Ani_obj25
0000A284 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A28A                            		even
0000A28A                            		even
0000A28A                            
0000A28A                            ; ---------------------------------------------------------------------------
0000A28A                            ; Sprite mappings - rings
0000A28A                            ; ---------------------------------------------------------------------------
0000A28A                            Map_obj25:
0000A28A                            	include "_maps\obj25.asm"
0000A28A                            ; ---------------------------------------------------------------------------
0000A28A                            ; Sprite mappings - rings
0000A28A                            ; ---------------------------------------------------------------------------
0000A28A 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A28E 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A292 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A296 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A29A 01                         byte_9FA2:	dc.b 1
0000A29B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A2A0 01                         byte_9FA8:	dc.b 1
0000A2A1 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A2A6 01                         byte_9FAE:	dc.b 1
0000A2A7 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A2AC 01                         byte_9FB4:	dc.b 1
0000A2AD F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A2B2 01                         byte_9FBA:	dc.b 1
0000A2B3 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A2B8 01                         byte_9FC0:	dc.b 1
0000A2B9 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A2BE 01                         byte_9FC6:	dc.b 1
0000A2BF F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A2C4 01                         byte_9FCC:	dc.b 1
0000A2C5 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A2CA                            		even
0000A2CA                            		even
0000A2CA                            
0000A2CA                            ; ---------------------------------------------------------------------------
0000A2CA                            ; Sprite mappings - giant ring
0000A2CA                            ; ---------------------------------------------------------------------------
0000A2CA                            Map_obj4B:
0000A2CA                            	include "_maps\obj4B.asm"
0000A2CA                            ; ---------------------------------------------------------------------------
0000A2CA                            ; Sprite mappings - giant ring
0000A2CA                            ; ---------------------------------------------------------------------------
0000A2CA 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A2CE 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A2D2 0A                         byte_9FDA:	dc.b $A
0000A2D3 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A2D8 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A2DD E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A2E2 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A2E7 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A2EC F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A2F1 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A2F6 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A2FB 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A300 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A305 08                         byte_A00D:	dc.b 8
0000A306 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A30B E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A310 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A315 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A31A F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A31F 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A324 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A329 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A32E 04                         byte_A036:	dc.b 4
0000A32F E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A334 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A339 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A33E 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A343 08                         byte_A04B:	dc.b 8
0000A344 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A349 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A34E E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A353 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A358 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A35D 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A362 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A367 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A36C                            		even
0000A36C                            		even
0000A36C                            
0000A36C                            ; ---------------------------------------------------------------------------
0000A36C                            ; Sprite mappings - flash effect when you collect the giant ring
0000A36C                            ; ---------------------------------------------------------------------------
0000A36C                            Map_obj7C:
0000A36C                            	include "_maps\obj7C.asm"
0000A36C                            ; ---------------------------------------------------------------------------
0000A36C                            ; Sprite mappings - flash effect when you collect the giant ring
0000A36C                            ; ---------------------------------------------------------------------------
0000A36C 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A370 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A374 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A378 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A37C 02                         byte_A084:	dc.b 2
0000A37D E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A382 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A387 04                         byte_A08F:	dc.b 4
0000A388 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A38D E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A392 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A397 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A39C 04                         byte_A0A4:	dc.b 4
0000A39D E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A3A2 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A3A7 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A3AC 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A3B1 04                         byte_A0B9:	dc.b 4
0000A3B2 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A3B7 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A3BC 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A3C1 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A3C6 04                         byte_A0CE:	dc.b 4
0000A3C7 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A3CC E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A3D1 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A3D6 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A3DB 04                         byte_A0E3:	dc.b 4
0000A3DC E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A3E1 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A3E6 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A3EB 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A3F0 02                         byte_A0F8:	dc.b 2
0000A3F1 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A3F6 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A3FB 04                         byte_A103:	dc.b 4
0000A3FC E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A401 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A406 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A40B 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A410                            		even
0000A410                            		even
0000A410                            
0000A410                            ; ===========================================================================
0000A410                            ; ---------------------------------------------------------------------------
0000A410                            ; Object 26 - monitors
0000A410                            ; ---------------------------------------------------------------------------
0000A410                            
0000A410                            Obj26:					; XREF: Obj_Index
0000A410 7000                       		moveq	#0,d0
0000A412 1028 0024                  		move.b	$24(a0),d0
0000A416 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A41A 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A41E                            ; ===========================================================================
0000A41E 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A420 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A422 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A424 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A426 0000                       		dc.w Obj26_Display-Obj26_Index
0000A428                            ; ===========================================================================
0000A428                            
0000A428                            Obj26_Main:				; XREF: Obj26_Index
0000A428 5428 0024                  		addq.b	#2,$24(a0)
0000A42C 117C 000E 0016             		move.b	#$E,$16(a0)
0000A432 117C 000E 0017             		move.b	#$E,$17(a0)
0000A438 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A440 317C 0680 0002             		move.w	#$680,2(a0)
0000A446 117C 0004 0001             		move.b	#4,1(a0)
0000A44C 117C 0003 0018             		move.b	#3,$18(a0)
0000A452 117C 000F 0019             		move.b	#$F,$19(a0)
0000A458 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A45C 7000                       		moveq	#0,d0
0000A45E 1028 0023                  		move.b	$23(a0),d0
0000A462 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A468 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A46E 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A470 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A476 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A47C 4E75                       		rts	
0000A47E                            ; ===========================================================================
0000A47E                            
0000A47E                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A47E 117C 0046 0020             		move.b	#$46,$20(a0)
0000A484 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A48A                            
0000A48A                            Obj26_Solid:				; XREF: Obj26_Index
0000A48A 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A48E 6700                       		beq.s	loc_A1EC	; if not, branch
0000A490 5500                       		subq.b	#2,d0
0000A492 6600                       		bne.s	Obj26_Fall
0000A494 7200                       		moveq	#0,d1
0000A496 1228 0019                  		move.b	$19(a0),d1
0000A49A 0641 000B                  		addi.w	#$B,d1
0000A49E 6100 D448                  		bsr.w	ExitPlatform
0000A4A2 0829 0003 0022             		btst	#3,$22(a1)
0000A4A8 6600 0000                  		bne.w	loc_A1BC
0000A4AC 4228 0025                  		clr.b	$25(a0)
0000A4B0 6000 0000                  		bra.w	Obj26_Animate
0000A4B4                            ; ===========================================================================
0000A4B4                            
0000A4B4                            loc_A1BC:				; XREF: Obj26_Solid
0000A4B4 363C 0010                  		move.w	#$10,d3
0000A4B8 3428 0008                  		move.w	8(a0),d2
0000A4BC 6100 D988                  		bsr.w	MvSonicOnPtfm
0000A4C0 6000 0000                  		bra.w	Obj26_Animate
0000A4C4                            ; ===========================================================================
0000A4C4                            
0000A4C4                            Obj26_Fall:				; XREF: Obj26_Solid
0000A4C4 6100 0000                  		bsr.w	ObjectFall
0000A4C8 4EB9 0000 0000             		jsr	ObjHitFloor
0000A4CE 4A41                       		tst.w	d1
0000A4D0 6A00 0000                  		bpl.w	Obj26_Animate
0000A4D4 D368 000C                  		add.w	d1,$C(a0)
0000A4D8 4268 0012                  		clr.w	$12(a0)
0000A4DC 4228 0025                  		clr.b	$25(a0)
0000A4E0 6000 0000                  		bra.w	Obj26_Animate
0000A4E4                            ; ===========================================================================
0000A4E4                            
0000A4E4                            loc_A1EC:				; XREF: Obj26_Solid
0000A4E4 323C 001A                  		move.w	#$1A,d1
0000A4E8 343C 000F                  		move.w	#$F,d2
0000A4EC 6100 0000                  		bsr.w	Obj26_SolidSides
0000A4F0 6700 0000                  		beq.w	loc_A25C
0000A4F4 4A69 0012                  		tst.w	$12(a1)
0000A4F8 6B00                       		bmi.s	loc_A20A
0000A4FA 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A500 6700                       		beq.s	loc_A25C	; if yes, branch
0000A502                            
0000A502                            loc_A20A:
0000A502 4A41                       		tst.w	d1
0000A504 6A00                       		bpl.s	loc_A220
0000A506 9769 000C                  		sub.w	d3,$C(a1)
0000A50A 6100 D2CA                  		bsr.w	loc_74AE
0000A50E 117C 0002 0025             		move.b	#2,$25(a0)
0000A514 6000 0000                  		bra.w	Obj26_Animate
0000A518                            ; ===========================================================================
0000A518                            
0000A518                            loc_A220:
0000A518 4A40                       		tst.w	d0
0000A51A 6700 0000                  		beq.w	loc_A246
0000A51E 6B00                       		bmi.s	loc_A230
0000A520 4A69 0010                  		tst.w	$10(a1)
0000A524 6B00                       		bmi.s	loc_A246
0000A526 6000                       		bra.s	loc_A236
0000A528                            ; ===========================================================================
0000A528                            
0000A528                            loc_A230:
0000A528 4A69 0010                  		tst.w	$10(a1)
0000A52C 6A00                       		bpl.s	loc_A246
0000A52E                            
0000A52E                            loc_A236:
0000A52E 9169 0008                  		sub.w	d0,8(a1)
0000A532 337C 0000 0014             		move.w	#0,$14(a1)
0000A538 337C 0000 0010             		move.w	#0,$10(a1)
0000A53E                            
0000A53E                            loc_A246:
0000A53E 0829 0001 0022             		btst	#1,$22(a1)
0000A544 6600                       		bne.s	loc_A26A
0000A546 08E9 0005 0022             		bset	#5,$22(a1)
0000A54C 08E8 0005 0022             		bset	#5,$22(a0)
0000A552 6000                       		bra.s	Obj26_Animate
0000A554                            ; ===========================================================================
0000A554                            
0000A554                            loc_A25C:
0000A554 0828 0005 0022             		btst	#5,$22(a0)
0000A55A 6700                       		beq.s	Obj26_Animate
0000A55C 337C 0001 001C             		move.w	#1,$1C(a1)
0000A562                            
0000A562                            loc_A26A:
0000A562 08A8 0005 0022             		bclr	#5,$22(a0)
0000A568 08A9 0005 0022             		bclr	#5,$22(a1)
0000A56E                            
0000A56E                            Obj26_Animate:				; XREF: Obj26_Index
0000A56E 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A574 6100 0000                  		bsr.w	AnimateSprite
0000A578                            
0000A578                            Obj26_Display:				; XREF: Obj26_Index
0000A578 6100 0000                  		bsr.w	DisplaySprite
0000A57C 3028 0008                  		move.w	8(a0),d0
0000A580 0240 FF80                  		andi.w	#$FF80,d0
0000A584 3238 F700                  		move.w	($FFFFF700).w,d1
0000A588 0441 0080                  		subi.w	#$80,d1
0000A58C 0241 FF80                  		andi.w	#$FF80,d1
0000A590 9041                       		sub.w	d1,d0
0000A592 0C40 0280                  		cmpi.w	#$280,d0
0000A596 6200 0000                  		bhi.w	DeleteObject
0000A59A 4E75                       		rts	
0000A59C                            ; ===========================================================================
0000A59C                            
0000A59C                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A59C 5428 0024                  		addq.b	#2,$24(a0)
0000A5A0 117C 0000 0020             		move.b	#0,$20(a0)
0000A5A6 6100 0000                  		bsr.w	SingleObjLoad
0000A5AA 6600                       		bne.s	Obj26_Explode
0000A5AC 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A5B0 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5B6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A5BC 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A5C2                            
0000A5C2                            Obj26_Explode:
0000A5C2 6100 0000                  		bsr.w	SingleObjLoad
0000A5C6 6600                       		bne.s	Obj26_SetBroken
0000A5C8 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000A5CC 5429 0024                  		addq.b	#2,$24(a1)
0000A5D0 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A5DC                            
0000A5DC                            Obj26_SetBroken:
0000A5DC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A5E0 7000                       		moveq	#0,d0
0000A5E2 1028 0023                  		move.b	$23(a0),d0
0000A5E6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A5EC 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A5F2 6000 0000                  		bra.w	DisplaySprite
0000A5F6                            ; ===========================================================================
0000A5F6                            ; ---------------------------------------------------------------------------
0000A5F6                            ; Object 2E - contents of monitors
0000A5F6                            ; ---------------------------------------------------------------------------
0000A5F6                            
0000A5F6                            Obj2E:					; XREF: Obj_Index
0000A5F6 7000                       		moveq	#0,d0
0000A5F8 1028 0024                  		move.b	$24(a0),d0
0000A5FC 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A600 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A604 6000 0000                  		bra.w	DisplaySprite
0000A608                            ; ===========================================================================
0000A608 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A60A 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A60C 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A60E                            ; ===========================================================================
0000A60E                            
0000A60E                            Obj2E_Main:				; XREF: Obj2E_Index
0000A60E 5428 0024                  		addq.b	#2,$24(a0)
0000A612 317C 0680 0002             		move.w	#$680,2(a0)
0000A618 117C 0024 0001             		move.b	#$24,1(a0)
0000A61E 117C 0003 0018             		move.b	#3,$18(a0)
0000A624 117C 0008 0019             		move.b	#8,$19(a0)
0000A62A 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A630 7000                       		moveq	#0,d0
0000A632 1028 001C                  		move.b	$1C(a0),d0
0000A636 5400                       		addq.b	#2,d0
0000A638 1140 001A                  		move.b	d0,$1A(a0)
0000A63C 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A642 D000                       		add.b	d0,d0
0000A644 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A648 5249                       		addq.w	#1,a1
0000A64A 2149 0004                  		move.l	a1,4(a0)
0000A64E                            
0000A64E                            Obj2E_Move:				; XREF: Obj2E_Index
0000A64E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A652 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A656 6100 0000                  		bsr.w	SpeedToPos
0000A65A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A660 4E75                       		rts	
0000A662                            ; ===========================================================================
0000A662                            
0000A662                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A662 5428 0024                  		addq.b	#2,$24(a0)
0000A666 317C 001D 001E             		move.w	#29,$1E(a0)
0000A66C 1028 001C                  		move.b	$1C(a0),d0
0000A670 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A674 6600                       		bne.s	Obj2E_ChkSonic
0000A676 4E75                       		rts			; Eggman monitor does nothing
0000A678                            ; ===========================================================================
0000A678                            
0000A678                            Obj2E_ChkSonic:
0000A678 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A67C 6600                       		bne.s	Obj2E_ChkShoes
0000A67E                            
0000A67E                            ExtraLife:
0000A67E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A682 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A686 303C 0088                  		move.w	#$88,d0
0000A68A 4EF9 0000 15B6             		jmp	(PlaySound).l	; play extra life music
0000A690                            ; ===========================================================================
0000A690                            
0000A690                            Obj2E_ChkShoes:
0000A690 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A694 6600                       		bne.s	Obj2E_ChkShield
0000A696 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A69C 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A6A2 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A6A8 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A6AE 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A6B4 303C 00E2                  		move.w	#$E2,d0
0000A6B8 4EF9 0000 15B6             		jmp	(PlaySound).l	; Speed	up the music
0000A6BE                            ; ===========================================================================
0000A6BE                            
0000A6BE                            Obj2E_ChkShield:
0000A6BE 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A6C2 6600                       		bne.s	Obj2E_ChkInvinc
0000A6C4 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A6CA 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A6D0 303C 00AF                  		move.w	#$AF,d0
0000A6D4 4EF9 0000 15B6             		jmp	(PlaySound).l	; play shield sound
0000A6DA                            ; ===========================================================================
0000A6DA                            
0000A6DA                            Obj2E_ChkInvinc:
0000A6DA 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A6DE 6600                       		bne.s	Obj2E_ChkRings
0000A6E0 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A6E6 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A6EC 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A6F2 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A6F8 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A6FE 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A704 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A70A 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A710 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A716 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A71C 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A720 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A722 303C 0087                  		move.w	#$87,d0
0000A726 4EF9 0000 15B6             		jmp	(PlaySound).l	; play invincibility music
0000A72C                            ; ===========================================================================
0000A72C                            
0000A72C                            Obj2E_NoMusic:
0000A72C 4E75                       		rts	
0000A72E                            ; ===========================================================================
0000A72E                            
0000A72E                            Obj2E_ChkRings:
0000A72E 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A732 6600                       		bne.s	Obj2E_ChkS
0000A734 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A73A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A740 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A746 6500                       		bcs.s	Obj2E_RingSound
0000A748 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A74E 6700 FF2E                  		beq.w	ExtraLife
0000A752 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A758 6500                       		bcs.s	Obj2E_RingSound
0000A75A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A760 6700 FF1C                  		beq.w	ExtraLife
0000A764                            
0000A764                            Obj2E_RingSound:
0000A764 303C 00B5                  		move.w	#$B5,d0
0000A768 4EF9 0000 15B6             		jmp	(PlaySound).l	; play ring sound
0000A76E                            ; ===========================================================================
0000A76E                            
0000A76E                            Obj2E_ChkS:
0000A76E 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A772 6600                       		bne.s	Obj2E_ChkEnd
0000A774                            		; nop	
0000A774 7201                       		moveq	#1,d1
0000A776 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A77A                            
0000A77A                            Obj2E_ChkEnd:
0000A77A 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A77C                            ; ===========================================================================
0000A77C                            
0000A77C                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A77C 5368 001E                  		subq.w	#1,$1E(a0)
0000A780 6B00 0000                  		bmi.w	DeleteObject
0000A784 4E75                       		rts	
0000A786                            ; ---------------------------------------------------------------------------
0000A786                            ; Subroutine to	make the sides of a monitor solid
0000A786                            ; ---------------------------------------------------------------------------
0000A786                            
0000A786                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A786                            
0000A786                            
0000A786                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A786 43F8 D000                  		lea	($FFFFD000).w,a1
0000A78A 3029 0008                  		move.w	8(a1),d0
0000A78E 9068 0008                  		sub.w	8(a0),d0
0000A792 D041                       		add.w	d1,d0
0000A794 6B00                       		bmi.s	loc_A4E6
0000A796 3601                       		move.w	d1,d3
0000A798 D643                       		add.w	d3,d3
0000A79A B043                       		cmp.w	d3,d0
0000A79C 6200                       		bhi.s	loc_A4E6
0000A79E 1629 0016                  		move.b	$16(a1),d3
0000A7A2 4883                       		ext.w	d3
0000A7A4 D443                       		add.w	d3,d2
0000A7A6 3629 000C                  		move.w	$C(a1),d3
0000A7AA 9668 000C                  		sub.w	$C(a0),d3
0000A7AE D642                       		add.w	d2,d3
0000A7B0 6B00                       		bmi.s	loc_A4E6
0000A7B2 D442                       		add.w	d2,d2
0000A7B4 B642                       		cmp.w	d2,d3
0000A7B6 6400                       		bcc.s	loc_A4E6
0000A7B8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A7BC 6B00                       		bmi.s	loc_A4E6
0000A7BE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A7C4 6400                       		bcc.s	loc_A4E6
0000A7C6 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A7CA 6600                       		bne.s	loc_A4E6
0000A7CC B240                       		cmp.w	d0,d1
0000A7CE 6400                       		bcc.s	loc_A4DC
0000A7D0 D241                       		add.w	d1,d1
0000A7D2 9041                       		sub.w	d1,d0
0000A7D4                            
0000A7D4                            loc_A4DC:
0000A7D4 0C43 0010                  		cmpi.w	#$10,d3
0000A7D8 6500                       		bcs.s	loc_A4EA
0000A7DA                            
0000A7DA                            loc_A4E2:
0000A7DA 7201                       		moveq	#1,d1
0000A7DC 4E75                       		rts	
0000A7DE                            ; ===========================================================================
0000A7DE                            
0000A7DE                            loc_A4E6:
0000A7DE 7200                       		moveq	#0,d1
0000A7E0 4E75                       		rts	
0000A7E2                            ; ===========================================================================
0000A7E2                            
0000A7E2                            loc_A4EA:
0000A7E2 7200                       		moveq	#0,d1
0000A7E4 1228 0019                  		move.b	$19(a0),d1
0000A7E8 5841                       		addq.w	#4,d1
0000A7EA 3401                       		move.w	d1,d2
0000A7EC D442                       		add.w	d2,d2
0000A7EE D269 0008                  		add.w	8(a1),d1
0000A7F2 9268 0008                  		sub.w	8(a0),d1
0000A7F6 6BE2                       		bmi.s	loc_A4E2
0000A7F8 B242                       		cmp.w	d2,d1
0000A7FA 64DE                       		bcc.s	loc_A4E2
0000A7FC 72FF                       		moveq	#-1,d1
0000A7FE 4E75                       		rts	
0000A800                            ; End of function Obj26_SolidSides
0000A800                            
0000A800                            ; ===========================================================================
0000A800                            Ani_obj26:
0000A800                            	include "_anim\obj26.asm"
0000A800                            ; ---------------------------------------------------------------------------
0000A800                            ; Animation script - monitors
0000A800                            ; ---------------------------------------------------------------------------
0000A800 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A806 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A80C 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A812 0000                       		dc.w byte_A582-Ani_obj26
0000A814 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A81A 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A826 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A832 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A83E 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A84A 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A856 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A862 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A86E 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000A87A 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000A882                            		even
0000A882                            		even
0000A882                            
0000A882                            ; ---------------------------------------------------------------------------
0000A882                            ; Sprite mappings - monitors
0000A882                            ; ---------------------------------------------------------------------------
0000A882                            Map_obj26:
0000A882                            	include "_maps\obj26.asm"
0000A882                            ; ---------------------------------------------------------------------------
0000A882                            ; Sprite mappings - monitors
0000A882                            ; ---------------------------------------------------------------------------
0000A882 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000A886 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000A88A 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000A88E 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000A892 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000A896 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000A89A 01                         byte_A5A2:	dc.b 1			; static monitor
0000A89B EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A8A0 02                         byte_A5A8:	dc.b 2			; static monitor
0000A8A1 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000A8A6 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A8AB 02                         byte_A5B3:	dc.b 2			; static monitor
0000A8AC F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000A8B1 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A8B6 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000A8B7 F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000A8BC EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A8C1 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000A8C2 F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000A8C7 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A8CC 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000A8CD F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000A8D2 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A8D7 02                         byte_A5DF:	dc.b 2			; shield monitor
0000A8D8 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000A8DD EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A8E2 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000A8E3 F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000A8E8 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A8ED 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000A8EE F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000A8F3 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A8F8 02                         byte_A600:	dc.b 2			; 'S' monitor
0000A8F9 F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000A8FE EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A903 02                         byte_A60B:	dc.b 2			; goggles monitor
0000A904 F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000A909 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A90E 01                         byte_A616:	dc.b 1			; broken monitor
0000A90F FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000A914                            		even
0000A914                            		even
0000A914                            
0000A914                            ; ===========================================================================
0000A914                            ; ---------------------------------------------------------------------------
0000A914                            ; Object 0E - Sonic on the title screen
0000A914                            ; ---------------------------------------------------------------------------
0000A914                            
0000A914                            Obj0E:					; XREF: Obj_Index
0000A914 7000                       		moveq	#0,d0
0000A916 1028 0024                  		move.b	$24(a0),d0
0000A91A 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000A91E 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000A922                            ; ===========================================================================
0000A922 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000A924 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000A926 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000A928 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000A92A                            ; ===========================================================================
0000A92A                            
0000A92A                            Obj0E_Main:				; XREF: Obj0E_Index
0000A92A 5428 0024                  		addq.b	#2,$24(a0)
0000A92E 317C 00F0 0008             		move.w	#$F0,8(a0)
0000A934 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000A93A 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000A942 317C 2300 0002             		move.w	#$2300,2(a0)
0000A948 117C 0001 0018             		move.b	#1,$18(a0)
0000A94E 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000A954 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A95A 6100 0000                  		bsr.w	AnimateSprite
0000A95E                            
0000A95E                            Obj0E_Delay:				; XREF: Obj0E_Index
0000A95E 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000A962 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000A964 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000A968 6000 0000                  		bra.w	DisplaySprite
0000A96C                            ; ===========================================================================
0000A96C                            
0000A96C                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000A96C 4E75                       		rts	
0000A96E                            ; ===========================================================================
0000A96E                            
0000A96E                            Obj0E_Move:				; XREF: Obj0E_Index
0000A96E 5168 000A                  		subq.w	#8,$A(a0)
0000A972 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000A978 6600                       		bne.s	Obj0E_Display
0000A97A 5428 0024                  		addq.b	#2,$24(a0)
0000A97E                            
0000A97E                            Obj0E_Display:
0000A97E 6000 0000                  		bra.w	DisplaySprite
0000A982                            ; ===========================================================================
0000A982 4E75                       		rts	
0000A984                            ; ===========================================================================
0000A984                            
0000A984                            Obj0E_Animate:				; XREF: Obj0E_Index
0000A984 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A98A 6100 0000                  		bsr.w	AnimateSprite
0000A98E 6000 0000                  		bra.w	DisplaySprite
0000A992                            ; ===========================================================================
0000A992 4E75                       		rts	
0000A994                            ; ===========================================================================
0000A994                            ; ---------------------------------------------------------------------------
0000A994                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000A994                            ; ---------------------------------------------------------------------------
0000A994                            
0000A994                            Obj0F:					; XREF: Obj_Index
0000A994 7000                       		moveq	#0,d0
0000A996 1028 0024                  		move.b	$24(a0),d0
0000A99A 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000A99E 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000A9A2 6000 0000                  		bra.w	DisplaySprite
0000A9A6                            ; ===========================================================================
0000A9A6 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000A9A8 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000A9AA 0000                       		dc.w locret_A6F8-Obj0F_Index
0000A9AC                            ; ===========================================================================
0000A9AC                            
0000A9AC                            Obj0F_Main:				; XREF: Obj0F_Index
0000A9AC 5428 0024                  		addq.b	#2,$24(a0)
0000A9B0 317C 00D0 0008             		move.w	#$D0,8(a0)
0000A9B6 317C 0130 000A             		move.w	#$130,$A(a0)
0000A9BC 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000A9C4 317C 0200 0002             		move.w	#$200,2(a0)
0000A9CA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000A9D0 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000A9D2 5428 0024                  		addq.b	#2,$24(a0)
0000A9D6 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000A9DC 6600                       		bne.s	locret_A6F8	; if not, branch
0000A9DE 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000A9E4 317C 0170 0008             		move.w	#$170,8(a0)
0000A9EA 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000A9F0                            
0000A9F0                            locret_A6F8:				; XREF: Obj0F_Index
0000A9F0 4E75                       		rts	
0000A9F2                            ; ===========================================================================
0000A9F2                            
0000A9F2                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000A9F2 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000A9F8 6000 0000                  		bra.w	AnimateSprite
0000A9FC                            ; ===========================================================================
0000A9FC                            Ani_obj0E:
0000A9FC                            	include "_anim\obj0E.asm"
0000A9FC                            ; ---------------------------------------------------------------------------
0000A9FC                            ; Animation script - Sonic on the title screen
0000A9FC                            ; ---------------------------------------------------------------------------
0000A9FC 0000                       		dc.w byte_A706-Ani_obj0E
0000A9FE 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AA0A                            		even
0000AA0A                            		even
0000AA0A                            
0000AA0A                            Ani_obj0F:
0000AA0A                            	include "_anim\obj0F.asm"
0000AA0A                            ; ---------------------------------------------------------------------------
0000AA0A                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AA0A                            ; ---------------------------------------------------------------------------
0000AA0A 0000                       		dc.w byte_A714-Ani_obj0F
0000AA0C 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AA10                            		even
0000AA10                            		even
0000AA10                            
0000AA10                            ; ---------------------------------------------------------------------------
0000AA10                            ; Subroutine to	animate	a sprite using an animation script
0000AA10                            ; ---------------------------------------------------------------------------
0000AA10                            
0000AA10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AA10                            
0000AA10                            
0000AA10                            AnimateSprite:
0000AA10 7000                       		moveq	#0,d0
0000AA12 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AA16 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AA1A 6700                       		beq.s	Anim_Run	; if not, branch
0000AA1C 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AA20 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AA26 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AA2C                            
0000AA2C                            Anim_Run:
0000AA2C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AA30 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AA32 D040                       		add.w	d0,d0
0000AA34 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AA38 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AA3C 7200                       		moveq	#0,d1
0000AA3E 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AA42 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AA46 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AA48                            
0000AA48                            Anim_Next:
0000AA48 1200                       		move.b	d0,d1
0000AA4A 0200 001F                  		andi.b	#$1F,d0
0000AA4E 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AA52 1028 0022                  		move.b	$22(a0),d0
0000AA56 E719                       		rol.b	#3,d1
0000AA58 B101                       		eor.b	d0,d1
0000AA5A 0201 0003                  		andi.b	#3,d1
0000AA5E 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AA64 8328 0001                  		or.b	d1,1(a0)
0000AA68 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AA6C                            
0000AA6C                            Anim_Wait:
0000AA6C 4E75                       		rts	
0000AA6E                            ; ===========================================================================
0000AA6E                            
0000AA6E                            Anim_End_FF:
0000AA6E 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AA70 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AA72 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AA78 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AA7C 60CA                       		bra.s	Anim_Next
0000AA7E                            ; ===========================================================================
0000AA7E                            
0000AA7E                            Anim_End_FE:
0000AA7E 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AA80 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AA82 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AA86 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AA8A 9200                       		sub.b	d0,d1
0000AA8C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AA90 60B6                       		bra.s	Anim_Next
0000AA92                            ; ===========================================================================
0000AA92                            
0000AA92                            Anim_End_FD:
0000AA92 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AA94 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AA96 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AA9C                            
0000AA9C                            Anim_End_FC:
0000AA9C 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AA9E 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AAA0 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AAA4                            
0000AAA4                            Anim_End_FB:
0000AAA4 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AAA6 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AAA8 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AAAE 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AAB2                            
0000AAB2                            Anim_End_FA:
0000AAB2 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AAB4 6600                       		bne.s	Anim_End	; if not, branch
0000AAB6 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AABA                            
0000AABA                            Anim_End:
0000AABA 4E75                       		rts	
0000AABC                            ; End of function AnimateSprite
0000AABC                            
0000AABC                            ; ===========================================================================
0000AABC                            ; ---------------------------------------------------------------------------
0000AABC                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AABC                            ; ---------------------------------------------------------------------------
0000AABC                            Map_obj0F:
0000AABC                            	include "_maps\obj0F.asm"
0000AABC                            ; ---------------------------------------------------------------------------
0000AABC                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AABC                            ; ---------------------------------------------------------------------------
0000AABC 0000                       		dc.w byte_A7CD-Map_obj0F
0000AABE 0000                       		dc.w byte_A7CC-Map_obj0F
0000AAC0 0000                       		dc.w byte_A7EB-Map_obj0F
0000AAC2 0000                       		dc.w byte_A882-Map_obj0F
0000AAC4 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AAC5 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AACA 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AACF 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AAD4 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AAD9 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AADE 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AAE3 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AAE4 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AAE9 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AAEE B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AAF3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AAF8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AAFD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AB02 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AB07 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AB0C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AB11 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AB16 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AB1B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AB20 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AB25 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AB2A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AB2F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AB34 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AB39 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AB3E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AB43 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AB48 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AB4D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AB52 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AB57 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AB5C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AB61 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AB66 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AB6B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AB70 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AB75 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AB7A 01                         byte_A882:	dc.b 1			; "TM"
0000AB7B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000AB80                            		even
0000AB80                            		even
0000AB80                            
0000AB80                            ; ---------------------------------------------------------------------------
0000AB80                            ; Sprite mappings - Sonic on the title screen
0000AB80                            ; ---------------------------------------------------------------------------
0000AB80                            Map_obj0E:
0000AB80                            	include "_maps\obj0E.asm"
0000AB80                            ; ================================================================================
0000AB80                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 15:54:10 GMT-0500 (Central Daylight Time)
0000AB80                            ; ================================================================================
0000AB80                            
0000AB80                            DATANHL9WDDYR1:
0000AB80 0000 0000                  	dc.w DATANHL9WDDYR1_0-DATANHL9WDDYR1, DATANHL9WDDYR1_1-DATANHL9WDDYR1
0000AB84 0000 0000                  	dc.w DATANHL9WDDYR1_2-DATANHL9WDDYR1, DATANHL9WDDYR1_3-DATANHL9WDDYR1
0000AB88 0000 0000                  	dc.w DATANHL9WDDYR1_4-DATANHL9WDDYR1, DATANHL9WDDYR1_5-DATANHL9WDDYR1
0000AB8C 0000 0000                  	dc.w DATANHL9WDDYR1_6-DATANHL9WDDYR1, DATANHL9WDDYR1_7-DATANHL9WDDYR1
0000AB90 0A                         DATANHL9WDDYR1_0: dc.b $A
0000AB91 0808 0000 08               	dc.b $8, $8, $0, $0, $8
0000AB96 100F 0003 08               	dc.b $10, $F, $0, $3, $8
0000AB9B 100F 0013 28               	dc.b $10, $F, $0, $13, $28
0000ABA0 300E 0023 08               	dc.b $30, $E, $0, $23, $8
0000ABA5 300E 002F 28               	dc.b $30, $E, $0, $2F, $28
0000ABAA 480D 003B 00               	dc.b $48, $D, $0, $3B, $0
0000ABAF 4809 0043 20               	dc.b $48, $9, $0, $43, $20
0000ABB4 4800 0049 38               	dc.b $48, $0, $0, $49, $38
0000ABB9 580C 004A 08               	dc.b $58, $C, $0, $4A, $8
0000ABBE 5800 004E 28               	dc.b $58, $0, $0, $4E, $28
0000ABC3 0F                         DATANHL9WDDYR1_1: dc.b $F
0000ABC4 480E 01BD 20               	dc.b $48, $E, $1, $BD, $20
0000ABC9 3805 01C9 38               	dc.b $38, $5, $1, $C9, $38
0000ABCE 4000 01CD 30               	dc.b $40, $0, $1, $CD, $30
0000ABD3 4800 01CE 40               	dc.b $48, $0, $1, $CE, $40
0000ABD8 6000 01CF 20               	dc.b $60, $0, $1, $CF, $20
0000ABDD 100E 004F 08               	dc.b $10, $E, $0, $4F, $8
0000ABE2 100E 005B 28               	dc.b $10, $E, $0, $5B, $28
0000ABE7 1801 0067 48               	dc.b $18, $1, $0, $67, $48
0000ABEC 2802 0069 00               	dc.b $28, $2, $0, $69, $0
0000ABF1 280F 006C 08               	dc.b $28, $F, $0, $6C, $8
0000ABF6 280F 007C 28               	dc.b $28, $F, $0, $7C, $28
0000ABFB 3002 008C 48               	dc.b $30, $2, $0, $8C, $48
0000AC00 480E 008F 10               	dc.b $48, $E, $0, $8F, $10
0000AC05 4809 009B 30               	dc.b $48, $9, $0, $9B, $30
0000AC0A 5804 00A1 30               	dc.b $58, $4, $0, $A1, $30
0000AC0F 11                         DATANHL9WDDYR1_2: dc.b $11
0000AC10 380E 01BD 28               	dc.b $38, $E, $1, $BD, $28
0000AC15 2805 01C9 40               	dc.b $28, $5, $1, $C9, $40
0000AC1A 3000 01CD 38               	dc.b $30, $0, $1, $CD, $38
0000AC1F 3800 01CE 48               	dc.b $38, $0, $1, $CE, $48
0000AC24 5000 01CF 28               	dc.b $50, $0, $1, $CF, $28
0000AC29 200F 01A9 08               	dc.b $20, $F, $1, $A9, $8
0000AC2E 2003 01B9 28               	dc.b $20, $3, $1, $B9, $28
0000AC33 100E 004F 08               	dc.b $10, $E, $0, $4F, $8
0000AC38 100E 005B 28               	dc.b $10, $E, $0, $5B, $28
0000AC3D 1801 0067 48               	dc.b $18, $1, $0, $67, $48
0000AC42 2802 0069 00               	dc.b $28, $2, $0, $69, $0
0000AC47 280F 006C 08               	dc.b $28, $F, $0, $6C, $8
0000AC4C 280F 007C 28               	dc.b $28, $F, $0, $7C, $28
0000AC51 3002 008C 48               	dc.b $30, $2, $0, $8C, $48
0000AC56 480E 008F 10               	dc.b $48, $E, $0, $8F, $10
0000AC5B 4809 009B 30               	dc.b $48, $9, $0, $9B, $30
0000AC60 5804 00A1 30               	dc.b $58, $4, $0, $A1, $30
0000AC65 0D                         DATANHL9WDDYR1_3: dc.b $D
0000AC66 100F 00A3 08               	dc.b $10, $F, $0, $A3, $8
0000AC6B 0808 00B3 28               	dc.b $8, $8, $0, $B3, $28
0000AC70 100F 00B6 28               	dc.b $10, $F, $0, $B6, $28
0000AC75 1800 00C6 48               	dc.b $18, $0, $0, $C6, $48
0000AC7A 2006 00C7 48               	dc.b $20, $6, $0, $C7, $48
0000AC7F 3800 00CD 48               	dc.b $38, $0, $0, $CD, $48
0000AC84 300D 00CE 08               	dc.b $30, $D, $0, $CE, $8
0000AC89 300E 00D6 28               	dc.b $30, $E, $0, $D6, $28
0000AC8E 400B 00E2 10               	dc.b $40, $B, $0, $E2, $10
0000AC93 4808 00EE 28               	dc.b $48, $8, $0, $EE, $28
0000AC98 5001 00F1 08               	dc.b $50, $1, $0, $F1, $8
0000AC9D 5004 00F3 28               	dc.b $50, $4, $0, $F3, $28
0000ACA2 5800 00F5 28               	dc.b $58, $0, $0, $F5, $28
0000ACA7 0B                         DATANHL9WDDYR1_4: dc.b $B
0000ACA8 080F 00F6 10               	dc.b $8, $F, $0, $F6, $10
0000ACAD 080B 0106 30               	dc.b $8, $B, $1, $6, $30
0000ACB2 1006 0112 48               	dc.b $10, $6, $1, $12, $48
0000ACB7 280E 0118 18               	dc.b $28, $E, $1, $18, $18
0000ACBC 280E 0124 38               	dc.b $28, $E, $1, $24, $38
0000ACC1 2801 0130 10               	dc.b $28, $1, $1, $30, $10
0000ACC6 400E 0132 10               	dc.b $40, $E, $1, $32, $10
0000ACCB 4006 013E 30               	dc.b $40, $6, $1, $3E, $30
0000ACD0 4004 0144 40               	dc.b $40, $4, $1, $44, $40
0000ACD5 4800 0146 40               	dc.b $48, $0, $1, $46, $40
0000ACDA 5808 0147 18               	dc.b $58, $8, $1, $47, $18
0000ACDF 13                         DATANHL9WDDYR1_5: dc.b $13
0000ACE0 280E 01E4 38               	dc.b $28, $E, $1, $E4, $38
0000ACE5 1805 01F0 48               	dc.b $18, $5, $1, $F0, $48
0000ACEA 4008 01F4 38               	dc.b $40, $8, $1, $F4, $38
0000ACEF 4804 01F7 38               	dc.b $48, $4, $1, $F7, $38
0000ACF4 100F 014A 10               	dc.b $10, $F, $1, $4A, $10
0000ACF9 0804 015A 20               	dc.b $8, $4, $1, $5A, $20
0000ACFE 000B 015C 30               	dc.b $0, $B, $1, $5C, $30
0000AD03 0800 0168 48               	dc.b $8, $0, $1, $68, $48
0000AD08 1800 0169 48               	dc.b $18, $0, $1, $69, $48
0000AD0D 1805 016A 00               	dc.b $18, $5, $1, $6A, $0
0000AD12 2802 016E 08               	dc.b $28, $2, $1, $6E, $8
0000AD17 300F 0171 10               	dc.b $30, $F, $1, $71, $10
0000AD1C 200D 0181 30               	dc.b $20, $D, $1, $81, $30
0000AD21 2001 0189 50               	dc.b $20, $1, $1, $89, $50
0000AD26 3008 018B 30               	dc.b $30, $8, $1, $8B, $30
0000AD2B 380E 018E 30               	dc.b $38, $E, $1, $8E, $30
0000AD30 500D 019A 08               	dc.b $50, $D, $1, $9A, $8
0000AD35 500C 01A2 28               	dc.b $50, $C, $1, $A2, $28
0000AD3A 5808 01A6 28               	dc.b $58, $8, $1, $A6, $28
0000AD3F 0F                         DATANHL9WDDYR1_6: dc.b $F
0000AD40 EC0F 020D E2               	dc.b $EC, $F, $2, $D, $E2
0000AD45 0C0F 021D E2               	dc.b $C, $F, $2, $1D, $E2
0000AD4A 2C0F 022D E2               	dc.b $2C, $F, $2, $2D, $E2
0000AD4F EC0F 023D 02               	dc.b $EC, $F, $2, $3D, $2
0000AD54 0C0F 024D 02               	dc.b $C, $F, $2, $4D, $2
0000AD59 2C0F 025D 02               	dc.b $2C, $F, $2, $5D, $2
0000AD5E EC0F 026D 22               	dc.b $EC, $F, $2, $6D, $22
0000AD63 0C0F 027D 22               	dc.b $C, $F, $2, $7D, $22
0000AD68 2C0F 028D 22               	dc.b $2C, $F, $2, $8D, $22
0000AD6D EC0F 029D 42               	dc.b $EC, $F, $2, $9D, $42
0000AD72 0C0F 02AD 42               	dc.b $C, $F, $2, $AD, $42
0000AD77 2C0F 02BD 42               	dc.b $2C, $F, $2, $BD, $42
0000AD7C EC07 02CD 62               	dc.b $EC, $7, $2, $CD, $62
0000AD81 0C07 02D5 62               	dc.b $C, $7, $2, $D5, $62
0000AD86 2C07 02DD 62               	dc.b $2C, $7, $2, $DD, $62
0000AD8B 0F                         DATANHL9WDDYR1_7: dc.b $F
0000AD8C EC0F 020D E2               	dc.b $EC, $F, $2, $D, $E2
0000AD91 0C0F 021D E2               	dc.b $C, $F, $2, $1D, $E2
0000AD96 2C0F 022D E2               	dc.b $2C, $F, $2, $2D, $E2
0000AD9B EC0F 023D 02               	dc.b $EC, $F, $2, $3D, $2
0000ADA0 0C0F 024D 02               	dc.b $C, $F, $2, $4D, $2
0000ADA5 2C0F 025D 02               	dc.b $2C, $F, $2, $5D, $2
0000ADAA EC0F 026D 22               	dc.b $EC, $F, $2, $6D, $22
0000ADAF 0C0F 027D 22               	dc.b $C, $F, $2, $7D, $22
0000ADB4 2C0F 028D 22               	dc.b $2C, $F, $2, $8D, $22
0000ADB9 EC0F 029D 42               	dc.b $EC, $F, $2, $9D, $42
0000ADBE 0C0F 02AD 42               	dc.b $C, $F, $2, $AD, $42
0000ADC3 2C0F 02BD 42               	dc.b $2C, $F, $2, $BD, $42
0000ADC8 EC07 02CD 62               	dc.b $EC, $7, $2, $CD, $62
0000ADCD 0C07 02D5 62               	dc.b $C, $7, $2, $D5, $62
0000ADD2 2C07 02DD 62               	dc.b $2C, $7, $2, $DD, $62
0000ADD8 00                         	even
0000ADD8 00                         	even
0000ADD8                            
0000ADD8                            ; ===========================================================================
0000ADD8                            ; ---------------------------------------------------------------------------
0000ADD8                            ; Object 2B - Chopper enemy (GHZ)
0000ADD8                            ; ---------------------------------------------------------------------------
0000ADD8                            
0000ADD8                            Obj2B:					; XREF: Obj_Index
0000ADD8 7000                       		moveq	#0,d0
0000ADDA 1028 0024                  		move.b	$24(a0),d0
0000ADDE 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000ADE2 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000ADE6 6000 0000                  		bra.w	MarkObjGone
0000ADEA                            ; ===========================================================================
0000ADEA 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000ADEC 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000ADEE                            ; ===========================================================================
0000ADEE                            
0000ADEE                            Obj2B_Main:				; XREF: Obj2B_Index
0000ADEE 5428 0024                  		addq.b	#2,$24(a0)
0000ADF2 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000ADFA 317C 047B 0002             		move.w	#$47B,2(a0)
0000AE00 117C 0004 0001             		move.b	#4,1(a0)
0000AE06 117C 0004 0018             		move.b	#4,$18(a0)
0000AE0C 117C 0009 0020             		move.b	#9,$20(a0)
0000AE12 117C 0010 0019             		move.b	#$10,$19(a0)
0000AE18 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AE1E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000AE24                            
0000AE24                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000AE24 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000AE2A 6100 FBE4                  		bsr.w	AnimateSprite
0000AE2E 6100 0000                  		bsr.w	SpeedToPos
0000AE32 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000AE38 3028 0030                  		move.w	$30(a0),d0
0000AE3C B068 000C                  		cmp.w	$C(a0),d0
0000AE40 6400                       		bcc.s	Obj2B_ChgAni
0000AE42 3140 000C                  		move.w	d0,$C(a0)
0000AE46 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AE4C                            
0000AE4C                            Obj2B_ChgAni:
0000AE4C 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000AE52 0440 00C0                  		subi.w	#$C0,d0
0000AE56 B068 000C                  		cmp.w	$C(a0),d0
0000AE5A 6400                       		bcc.s	locret_ABB6
0000AE5C 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000AE62 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000AE66 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000AE68 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000AE6E                            
0000AE6E                            locret_ABB6:
0000AE6E 4E75                       		rts	
0000AE70                            ; ===========================================================================
0000AE70                            Ani_obj2B:
0000AE70                            	include "_anim\obj2B.asm"
0000AE70                            ; ---------------------------------------------------------------------------
0000AE70                            ; Animation script - Chopper enemy
0000AE70                            ; ---------------------------------------------------------------------------
0000AE70 0000                       		dc.w byte_ABBE-Ani_obj2B
0000AE72 0000                       		dc.w byte_ABC2-Ani_obj2B
0000AE74 0000                       		dc.w byte_ABC6-Ani_obj2B
0000AE76 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000AE7A 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000AE7E 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000AE82 00                         		even
0000AE82 00                         		even
0000AE82                            
0000AE82                            ; ---------------------------------------------------------------------------
0000AE82                            ; Sprite mappings - Chopper enemy (GHZ)
0000AE82                            ; ---------------------------------------------------------------------------
0000AE82                            Map_obj2B:
0000AE82                            	include "_maps\obj2B.asm"
0000AE82                            ; ---------------------------------------------------------------------------
0000AE82                            ; Sprite mappings - Chopper enemy (GHZ)
0000AE82                            ; ---------------------------------------------------------------------------
0000AE82 0000                       		dc.w byte_ABCE-Map_obj2B
0000AE84 0000                       		dc.w byte_ABD4-Map_obj2B
0000AE86 01                         byte_ABCE:	dc.b 1
0000AE87 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000AE8C 01                         byte_ABD4:	dc.b 1
0000AE8D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000AE92                            		even
0000AE92                            		even
0000AE92                            
0000AE92                            ; ===========================================================================
0000AE92                            ; ---------------------------------------------------------------------------
0000AE92                            ; Object 2C - Jaws enemy (LZ)
0000AE92                            ; ---------------------------------------------------------------------------
0000AE92                            
0000AE92                            Obj2C:					; XREF: Obj_Index
0000AE92 7000                       		moveq	#0,d0
0000AE94 1028 0024                  		move.b	$24(a0),d0
0000AE98 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000AE9C 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000AEA0                            ; ===========================================================================
0000AEA0 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000AEA2 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000AEA4                            ; ===========================================================================
0000AEA4                            
0000AEA4                            Obj2C_Main:				; XREF: Obj2C_Index
0000AEA4 5428 0024                  		addq.b	#2,$24(a0)
0000AEA8 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000AEB0 317C 2486 0002             		move.w	#$2486,2(a0)
0000AEB6 0028 0004 0001             		ori.b	#4,1(a0)
0000AEBC 117C 000A 0020             		move.b	#$A,$20(a0)
0000AEC2 117C 0004 0018             		move.b	#4,$18(a0)
0000AEC8 117C 0010 0019             		move.b	#$10,$19(a0)
0000AECE 7000                       		moveq	#0,d0
0000AED0 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000AED4 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000AED6 5340                       		subq.w	#1,d0
0000AED8 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000AEDC 3140 0032                  		move.w	d0,$32(a0)
0000AEE0 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000AEE6 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000AEEC 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000AEEE 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000AEF2                            
0000AEF2                            Obj2C_Turn:				; XREF: Obj2C_Index
0000AEF2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000AEF6 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000AEF8 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000AEFE 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000AF02 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000AF08 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000AF0E                            
0000AF0E                            Obj2C_Animate:
0000AF0E 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000AF14 6100 FAFA                  		bsr.w	AnimateSprite
0000AF18 6100 0000                  		bsr.w	SpeedToPos
0000AF1C 6000 0000                  		bra.w	MarkObjGone
0000AF20                            ; ===========================================================================
0000AF20                            Ani_obj2C:
0000AF20                            	include "_anim\obj2C.asm"
0000AF20                            ; ---------------------------------------------------------------------------
0000AF20                            ; Animation script - Jaws enemy
0000AF20                            ; ---------------------------------------------------------------------------
0000AF20 0000                       		dc.w byte_AC6A-Ani_obj2C
0000AF22 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000AF28                            		even
0000AF28                            		even
0000AF28                            
0000AF28                            ; ---------------------------------------------------------------------------
0000AF28                            ; Sprite mappings - Jaws enemy (LZ)
0000AF28                            ; ---------------------------------------------------------------------------
0000AF28                            Map_obj2C:
0000AF28                            	include "_maps\obj2C.asm"
0000AF28                            ; ---------------------------------------------------------------------------
0000AF28                            ; Sprite mappings - Jaws enemy (LZ)
0000AF28                            ; ---------------------------------------------------------------------------
0000AF28 0000                       		dc.w byte_AC78-Map_obj2C
0000AF2A 0000                       		dc.w byte_AC83-Map_obj2C
0000AF2C 0000                       		dc.w byte_AC8E-Map_obj2C
0000AF2E 0000                       		dc.w byte_AC99-Map_obj2C
0000AF30 02                         byte_AC78:	dc.b 2
0000AF31 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AF36 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000AF3B 02                         byte_AC83:	dc.b 2
0000AF3C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AF41 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000AF46 02                         byte_AC8E:	dc.b 2
0000AF47 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AF4C F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000AF51 02                         byte_AC99:	dc.b 2
0000AF52 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AF57 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000AF5C                            		even
0000AF5C                            		even
0000AF5C                            
0000AF5C                            ; ===========================================================================
0000AF5C                            ; ---------------------------------------------------------------------------
0000AF5C                            ; Object 2D - Burrobot enemy (LZ)
0000AF5C                            ; ---------------------------------------------------------------------------
0000AF5C                            
0000AF5C                            Obj2D:					; XREF: Obj_Index
0000AF5C 7000                       		moveq	#0,d0
0000AF5E 1028 0024                  		move.b	$24(a0),d0
0000AF62 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000AF66 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000AF6A                            ; ===========================================================================
0000AF6A 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000AF6C 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000AF6E                            ; ===========================================================================
0000AF6E                            
0000AF6E                            Obj2D_Main:				; XREF: Obj2D_Index
0000AF6E 5428 0024                  		addq.b	#2,$24(a0)
0000AF72 117C 0013 0016             		move.b	#$13,$16(a0)
0000AF78 117C 0008 0017             		move.b	#8,$17(a0)
0000AF7E 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000AF86 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000AF8C 0028 0004 0001             		ori.b	#4,1(a0)
0000AF92 117C 0004 0018             		move.b	#4,$18(a0)
0000AF98 117C 0005 0020             		move.b	#5,$20(a0)
0000AF9E 117C 000C 0019             		move.b	#$C,$19(a0)
0000AFA4 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000AFA8 117C 0002 001C             		move.b	#2,$1C(a0)
0000AFAE                            
0000AFAE                            Obj2D_Action:				; XREF: Obj2D_Index
0000AFAE 7000                       		moveq	#0,d0
0000AFB0 1028 0025                  		move.b	$25(a0),d0
0000AFB4 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000AFB8 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000AFBC 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000AFC2 6100 FA4C                  		bsr.w	AnimateSprite
0000AFC6 6000 0000                  		bra.w	MarkObjGone
0000AFCA                            ; ===========================================================================
0000AFCA 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000AFCC 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000AFCE 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000AFD0 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000AFD2                            ; ===========================================================================
0000AFD2                            
0000AFD2                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000AFD2 5368 0030                  		subq.w	#1,$30(a0)
0000AFD6 6A00                       		bpl.s	locret_AD42
0000AFD8 5428 0025                  		addq.b	#2,$25(a0)
0000AFDC 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000AFE2 317C 0080 0010             		move.w	#$80,$10(a0)
0000AFE8 117C 0001 001C             		move.b	#1,$1C(a0)
0000AFEE 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000AFF4 6700                       		beq.s	locret_AD42
0000AFF6 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000AFFA                            
0000AFFA                            locret_AD42:
0000AFFA 4E75                       		rts	
0000AFFC                            ; ===========================================================================
0000AFFC                            
0000AFFC                            Obj2D_Move:				; XREF: Obj2D_Index2
0000AFFC 5368 0030                  		subq.w	#1,$30(a0)
0000B000 6B00                       		bmi.s	loc_AD84
0000B002 6100 0000                  		bsr.w	SpeedToPos
0000B006 0868 0000 0032             		bchg	#0,$32(a0)
0000B00C 6600                       		bne.s	loc_AD78
0000B00E 3628 0008                  		move.w	8(a0),d3
0000B012 0643 000C                  		addi.w	#$C,d3
0000B016 0828 0000 0022             		btst	#0,$22(a0)
0000B01C 6600                       		bne.s	loc_AD6A
0000B01E 0443 0018                  		subi.w	#$18,d3
0000B022                            
0000B022                            loc_AD6A:
0000B022 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B028 0C41 000C                  		cmpi.w	#$C,d1
0000B02C 6C00                       		bge.s	loc_AD84
0000B02E 4E75                       		rts	
0000B030                            ; ===========================================================================
0000B030                            
0000B030                            loc_AD78:				; XREF: Obj2D_Move
0000B030 4EB9 0000 0000             		jsr	ObjHitFloor
0000B036 D368 000C                  		add.w	d1,$C(a0)
0000B03A 4E75                       		rts	
0000B03C                            ; ===========================================================================
0000B03C                            
0000B03C                            loc_AD84:				; XREF: Obj2D_Move
0000B03C 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B042 6700                       		beq.s	loc_ADA4
0000B044 5528 0025                  		subq.b	#2,$25(a0)
0000B048 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B04E 317C 0000 0010             		move.w	#0,$10(a0)
0000B054 117C 0000 001C             		move.b	#0,$1C(a0)
0000B05A 4E75                       		rts	
0000B05C                            ; ===========================================================================
0000B05C                            
0000B05C                            loc_ADA4:
0000B05C 5428 0025                  		addq.b	#2,$25(a0)
0000B060 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B066 117C 0002 001C             		move.b	#2,$1C(a0)
0000B06C 4E75                       		rts	
0000B06E                            ; ===========================================================================
0000B06E                            
0000B06E                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B06E 6100 0000                  		bsr.w	SpeedToPos
0000B072 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B078 6B00                       		bmi.s	locret_ADF0
0000B07A 117C 0003 001C             		move.b	#3,$1C(a0)
0000B080 4EB9 0000 0000             		jsr	ObjHitFloor
0000B086 4A41                       		tst.w	d1
0000B088 6A00                       		bpl.s	locret_ADF0
0000B08A D368 000C                  		add.w	d1,$C(a0)
0000B08E 317C 0000 0012             		move.w	#0,$12(a0)
0000B094 117C 0001 001C             		move.b	#1,$1C(a0)
0000B09A 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B0A0 5528 0025                  		subq.b	#2,$25(a0)
0000B0A4 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B0A8                            
0000B0A8                            locret_ADF0:
0000B0A8 4E75                       		rts	
0000B0AA                            ; ===========================================================================
0000B0AA                            
0000B0AA                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B0AA 343C 0060                  		move.w	#$60,d2
0000B0AE 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B0B2 6400                       		bcc.s	locret_AE20
0000B0B4 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B0B8 9068 000C                  		sub.w	$C(a0),d0
0000B0BC 6400                       		bcc.s	locret_AE20
0000B0BE 0C40 FF80                  		cmpi.w	#-$80,d0
0000B0C2 6500                       		bcs.s	locret_AE20
0000B0C4 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B0C8 6600                       		bne.s	locret_AE20
0000B0CA 5528 0025                  		subq.b	#2,$25(a0)
0000B0CE 3141 0010                  		move.w	d1,$10(a0)
0000B0D2 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B0D8                            
0000B0D8                            locret_AE20:
0000B0D8 4E75                       		rts	
0000B0DA                            
0000B0DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B0DA                            
0000B0DA                            
0000B0DA                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B0DA 323C 0080                  		move.w	#$80,d1
0000B0DE 08E8 0000 0022             		bset	#0,$22(a0)
0000B0E4 3038 D008                  		move.w	($FFFFD008).w,d0
0000B0E8 9068 0008                  		sub.w	8(a0),d0
0000B0EC 6400                       		bcc.s	loc_AE40
0000B0EE 4440                       		neg.w	d0
0000B0F0 4441                       		neg.w	d1
0000B0F2 08A8 0000 0022             		bclr	#0,$22(a0)
0000B0F8                            
0000B0F8                            loc_AE40:
0000B0F8 B042                       		cmp.w	d2,d0
0000B0FA 4E75                       		rts	
0000B0FC                            ; End of function Obj2D_ChkSonic2
0000B0FC                            
0000B0FC                            ; ===========================================================================
0000B0FC                            Ani_obj2D:
0000B0FC                            	include "_anim\obj2D.asm"
0000B0FC                            ; ---------------------------------------------------------------------------
0000B0FC                            ; Animation script - Burrobot enemy
0000B0FC                            ; ---------------------------------------------------------------------------
0000B0FC 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B0FE 0000                       		dc.w byte_AE50-Ani_obj2D
0000B100 0000                       		dc.w byte_AE54-Ani_obj2D
0000B102 0000                       		dc.w byte_AE58-Ani_obj2D
0000B104 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000B108 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000B10C 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000B110 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B114 00                         		even
0000B114 00                         		even
0000B114                            
0000B114                            ; ---------------------------------------------------------------------------
0000B114                            ; Sprite mappings - Burrobot enemy (LZ)
0000B114                            ; ---------------------------------------------------------------------------
0000B114                            Map_obj2D:
0000B114                            	include "_maps\obj2D.asm"
0000B114                            ; ---------------------------------------------------------------------------
0000B114                            ; Sprite mappings - Burrobot enemy (LZ)
0000B114                            ; ---------------------------------------------------------------------------
0000B114 0000                       		dc.w byte_AE6A-Map_obj2D
0000B116 0000                       		dc.w byte_AE75-Map_obj2D
0000B118 0000                       		dc.w byte_AE80-Map_obj2D
0000B11A 0000                       		dc.w byte_AE8B-Map_obj2D
0000B11C 0000                       		dc.w byte_AE96-Map_obj2D
0000B11E 0000                       		dc.w byte_AEA1-Map_obj2D
0000B120 0000                       		dc.w byte_AEAC-Map_obj2D
0000B122 02                         byte_AE6A:	dc.b 2
0000B123 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000B128 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B12D 02                         byte_AE75:	dc.b 2
0000B12E EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B133 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000B138 02                         byte_AE80:	dc.b 2
0000B139 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000B13E 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000B143 02                         byte_AE8B:	dc.b 2
0000B144 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000B149 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000B14E 02                         byte_AE96:	dc.b 2
0000B14F E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000B154 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000B159 02                         byte_AEA1:	dc.b 2
0000B15A F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000B15F F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000B164 02                         byte_AEAC:	dc.b 2
0000B165 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B16A 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B170 00                         		even
0000B170 00                         		even
0000B170                            
0000B170                            ; ===========================================================================
0000B170                            ; ---------------------------------------------------------------------------
0000B170                            ; Object 2F - large moving platforms (MZ)
0000B170                            ; ---------------------------------------------------------------------------
0000B170                            
0000B170                            Obj2F:					; XREF: Obj_Index
0000B170 7000                       		moveq	#0,d0
0000B172 1028 0024                  		move.b	$24(a0),d0
0000B176 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B17A 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B17E                            ; ===========================================================================
0000B17E 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B180 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B182                            
0000B182 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B184 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B186 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B188 0140                       		dc.b 1,	$40
0000B18A 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B18C 0220                       		dc.b 2,	$20
0000B18E                            ; ===========================================================================
0000B18E                            
0000B18E                            Obj2F_Main:				; XREF: Obj2F_Index
0000B18E 5428 0024                  		addq.b	#2,$24(a0)
0000B192 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B19A 317C C000 0002             		move.w	#$C000,2(a0)
0000B1A0 117C 0004 0001             		move.b	#4,1(a0)
0000B1A6 117C 0005 0018             		move.b	#5,$18(a0)
0000B1AC 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B1B2 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B1B8 7000                       		moveq	#0,d0
0000B1BA 1028 0028                  		move.b	$28(a0),d0
0000B1BE E448                       		lsr.w	#2,d0
0000B1C0 0240 001C                  		andi.w	#$1C,d0
0000B1C4 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B1C8 3019                       		move.w	(a1)+,d0
0000B1CA 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B1CE 214A 0030                  		move.l	a2,$30(a0)
0000B1D2 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B1D6 1151 0019                  		move.b	(a1),$19(a0)
0000B1DA 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B1E0 117C 0040 0016             		move.b	#$40,$16(a0)
0000B1E6 08E8 0004 0001             		bset	#4,1(a0)
0000B1EC                            
0000B1EC                            Obj2F_Action:				; XREF: Obj2F_Index
0000B1EC 6100 0000                  		bsr.w	Obj2F_Types
0000B1F0 4A28 0025                  		tst.b	$25(a0)
0000B1F4 6700                       		beq.s	Obj2F_Solid
0000B1F6 7200                       		moveq	#0,d1
0000B1F8 1228 0019                  		move.b	$19(a0),d1
0000B1FC 0641 000B                  		addi.w	#$B,d1
0000B200 6100 C6E6                  		bsr.w	ExitPlatform
0000B204 0829 0003 0022             		btst	#3,$22(a1)
0000B20A 6600 0000                  		bne.w	Obj2F_Slope
0000B20E 4228 0025                  		clr.b	$25(a0)
0000B212 6000                       		bra.s	Obj2F_Display
0000B214                            ; ===========================================================================
0000B214                            
0000B214                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B214 7200                       		moveq	#0,d1
0000B216 1228 0019                  		move.b	$19(a0),d1
0000B21A 0641 000B                  		addi.w	#$B,d1
0000B21E 2468 0030                  		movea.l	$30(a0),a2
0000B222 3428 0008                  		move.w	8(a0),d2
0000B226 6100 D61E                  		bsr.w	SlopeObject2
0000B22A 6000                       		bra.s	Obj2F_Display
0000B22C                            ; ===========================================================================
0000B22C                            
0000B22C                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B22C 7200                       		moveq	#0,d1
0000B22E 1228 0019                  		move.b	$19(a0),d1
0000B232 0641 000B                  		addi.w	#$B,d1
0000B236 343C 0020                  		move.w	#$20,d2
0000B23A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B240 6600                       		bne.s	loc_AF8E
0000B242 343C 0030                  		move.w	#$30,d2
0000B246                            
0000B246                            loc_AF8E:
0000B246 2468 0030                  		movea.l	$30(a0),a2
0000B24A 6100 0000                  		bsr.w	SolidObject2F
0000B24E                            
0000B24E                            Obj2F_Display:				; XREF: Obj2F_Action
0000B24E 6100 0000                  		bsr.w	DisplaySprite
0000B252 6000 0000                  		bra.w	Obj2F_ChkDel
0000B256                            
0000B256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B256                            
0000B256                            
0000B256                            Obj2F_Types:				; XREF: Obj2F_Action
0000B256 7000                       		moveq	#0,d0
0000B258 1028 0028                  		move.b	$28(a0),d0
0000B25C 0240 0007                  		andi.w	#7,d0
0000B260 D040                       		add.w	d0,d0
0000B262 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B266 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B26A                            ; End of function Obj2F_Types
0000B26A                            
0000B26A                            ; ===========================================================================
0000B26A 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B26C 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B26E 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B270 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B272 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B274 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B276                            ; ===========================================================================
0000B276                            
0000B276                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B276 4E75                       		rts			; type 00 platform doesn't move
0000B278                            ; ===========================================================================
0000B278                            
0000B278                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B278 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B27C 323C 0020                  		move.w	#$20,d1
0000B280 6000                       		bra.s	Obj2F_Move
0000B282                            ; ===========================================================================
0000B282                            
0000B282                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B282 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B286 323C 0030                  		move.w	#$30,d1
0000B28A 6000                       		bra.s	Obj2F_Move
0000B28C                            ; ===========================================================================
0000B28C                            
0000B28C                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B28C 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B290 323C 0040                  		move.w	#$40,d1
0000B294 6000                       		bra.s	Obj2F_Move
0000B296                            ; ===========================================================================
0000B296                            
0000B296                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B296 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B29A 323C 0060                  		move.w	#$60,d1
0000B29E                            
0000B29E                            Obj2F_Move:
0000B29E 0828 0003 0028             		btst	#3,$28(a0)
0000B2A4 6700                       		beq.s	loc_AFF2
0000B2A6 4440                       		neg.w	d0
0000B2A8 D041                       		add.w	d1,d0
0000B2AA                            
0000B2AA                            loc_AFF2:
0000B2AA 3228 002C                  		move.w	$2C(a0),d1
0000B2AE 9240                       		sub.w	d0,d1
0000B2B0 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B2B4 4E75                       		rts	
0000B2B6                            ; ===========================================================================
0000B2B6                            
0000B2B6                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B2B6 1028 0034                  		move.b	$34(a0),d0
0000B2BA 4A28 0025                  		tst.b	$25(a0)
0000B2BE 6600                       		bne.s	loc_B010
0000B2C0 5500                       		subq.b	#2,d0
0000B2C2 6400                       		bcc.s	loc_B01C
0000B2C4 7000                       		moveq	#0,d0
0000B2C6 6000                       		bra.s	loc_B01C
0000B2C8                            ; ===========================================================================
0000B2C8                            
0000B2C8                            loc_B010:
0000B2C8 5800                       		addq.b	#4,d0
0000B2CA 0C00 0040                  		cmpi.b	#$40,d0
0000B2CE 6500                       		bcs.s	loc_B01C
0000B2D0 103C 0040                  		move.b	#$40,d0
0000B2D4                            
0000B2D4                            loc_B01C:
0000B2D4 1140 0034                  		move.b	d0,$34(a0)
0000B2D8 4EB9 0000 2BFA             		jsr	(CalcSine).l
0000B2DE E848                       		lsr.w	#4,d0
0000B2E0 3200                       		move.w	d0,d1
0000B2E2 D068 002C                  		add.w	$2C(a0),d0
0000B2E6 3140 000C                  		move.w	d0,$C(a0)
0000B2EA 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B2F0 6600                       		bne.s	loc_B07A
0000B2F2 4A28 0035                  		tst.b	$35(a0)
0000B2F6 6600                       		bne.s	loc_B07A
0000B2F8 117C 0001 0035             		move.b	#1,$35(a0)
0000B2FE 6100 0000                  		bsr.w	SingleObjLoad2
0000B302 6600                       		bne.s	loc_B07A
0000B304 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B308 3368 0008 0008             		move.w	8(a0),8(a1)
0000B30E 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B314 5069 002C                  		addq.w	#8,$2C(a1)
0000B318 5769 002C                  		subq.w	#3,$2C(a1)
0000B31C 0469 0040 0008             		subi.w	#$40,8(a1)
0000B322 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B328 2348 0038                  		move.l	a0,$38(a1)
0000B32C 2448                       		movea.l	a0,a2
0000B32E 6100                       		bsr.s	sub_B09C
0000B330                            
0000B330                            loc_B07A:
0000B330 7400                       		moveq	#0,d2
0000B332 45E8 0036                  		lea	$36(a0),a2
0000B336 141A                       		move.b	(a2)+,d2
0000B338 5302                       		subq.b	#1,d2
0000B33A 6500                       		bcs.s	locret_B09A
0000B33C                            
0000B33C                            loc_B086:
0000B33C 7000                       		moveq	#0,d0
0000B33E 101A                       		move.b	(a2)+,d0
0000B340 ED48                       		lsl.w	#6,d0
0000B342 0640 D000                  		addi.w	#-$3000,d0
0000B346 3240                       		movea.w	d0,a1
0000B348 3341 003C                  		move.w	d1,$3C(a1)
0000B34C 51CA FFEE                  		dbf	d2,loc_B086
0000B350                            
0000B350                            locret_B09A:
0000B350 4E75                       		rts	
0000B352                            
0000B352                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B352                            
0000B352                            
0000B352                            sub_B09C:
0000B352 45EA 0036                  		lea	$36(a2),a2
0000B356 7000                       		moveq	#0,d0
0000B358 1012                       		move.b	(a2),d0
0000B35A 5212                       		addq.b	#1,(a2)
0000B35C 45F2 0001                  		lea	1(a2,d0.w),a2
0000B360 3009                       		move.w	a1,d0
0000B362 0440 D000                  		subi.w	#-$3000,d0
0000B366 EC48                       		lsr.w	#6,d0
0000B368 0240 007F                  		andi.w	#$7F,d0
0000B36C 1480                       		move.b	d0,(a2)
0000B36E 4E75                       		rts	
0000B370                            ; End of function sub_B09C
0000B370                            
0000B370                            ; ===========================================================================
0000B370                            
0000B370                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B370 4A28 0035                  		tst.b	$35(a0)
0000B374 6700                       		beq.s	loc_B0C6
0000B376 4A28 0001                  		tst.b	1(a0)
0000B37A 6A00                       		bpl.s	Obj2F_DelFlames
0000B37C                            
0000B37C                            loc_B0C6:
0000B37C 3028 002A                  		move.w	$2A(a0),d0
0000B380 0240 FF80                  		andi.w	#$FF80,d0
0000B384 3238 F700                  		move.w	($FFFFF700).w,d1
0000B388 0441 0080                  		subi.w	#$80,d1
0000B38C 0241 FF80                  		andi.w	#$FF80,d1
0000B390 9041                       		sub.w	d1,d0
0000B392 0C40 0280                  		cmpi.w	#$280,d0
0000B396 6200 0000                  		bhi.w	DeleteObject
0000B39A 4E75                       		rts	
0000B39C                            ; ===========================================================================
0000B39C                            
0000B39C                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B39C 7400                       		moveq	#0,d2
0000B39E                            
0000B39E                            loc_B0E8:
0000B39E 45E8 0036                  		lea	$36(a0),a2
0000B3A2 1412                       		move.b	(a2),d2
0000B3A4 421A                       		clr.b	(a2)+
0000B3A6 5302                       		subq.b	#1,d2
0000B3A8 6500                       		bcs.s	locret_B116
0000B3AA                            
0000B3AA                            loc_B0F4:
0000B3AA 7000                       		moveq	#0,d0
0000B3AC 1012                       		move.b	(a2),d0
0000B3AE 421A                       		clr.b	(a2)+
0000B3B0 ED48                       		lsl.w	#6,d0
0000B3B2 0640 D000                  		addi.w	#-$3000,d0
0000B3B6 3240                       		movea.w	d0,a1
0000B3B8 6100 0000                  		bsr.w	DeleteObject2
0000B3BC 51CA FFEC                  		dbf	d2,loc_B0F4
0000B3C0 117C 0000 0035             		move.b	#0,$35(a0)
0000B3C6 117C 0000 0034             		move.b	#0,$34(a0)
0000B3CC                            
0000B3CC                            locret_B116:
0000B3CC 4E75                       		rts	
0000B3CE                            ; ===========================================================================
0000B3CE                            ; ---------------------------------------------------------------------------
0000B3CE                            ; Collision data for large moving platforms (MZ)
0000B3CE                            ; ---------------------------------------------------------------------------
0000B3CE                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B41A                            		even
0000B41A                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B446                            		even
0000B446                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B492                            		even
0000B492                            ; ===========================================================================
0000B492                            ; ---------------------------------------------------------------------------
0000B492                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B492                            ; (appears when	you walk on sinking platforms)
0000B492                            ; ---------------------------------------------------------------------------
0000B492                            
0000B492                            Obj35:					; XREF: Obj_Index
0000B492 7000                       		moveq	#0,d0
0000B494 1028 0024                  		move.b	$24(a0),d0
0000B498 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B49C 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B4A0                            ; ===========================================================================
0000B4A0 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B4A2 0000                       		dc.w loc_B238-Obj35_Index
0000B4A4 0000                       		dc.w Obj35_Move-Obj35_Index
0000B4A6                            ; ===========================================================================
0000B4A6                            
0000B4A6                            Obj35_Main:				; XREF: Obj35_Index
0000B4A6 5428 0024                  		addq.b	#2,$24(a0)
0000B4AA 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B4B2 317C 0345 0002             		move.w	#$345,2(a0)
0000B4B8 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B4BE 117C 0004 0001             		move.b	#4,1(a0)
0000B4C4 117C 0001 0018             		move.b	#1,$18(a0)
0000B4CA 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B4D0 117C 0008 0019             		move.b	#8,$19(a0)
0000B4D6 303C 00C8                  		move.w	#$C8,d0
0000B4DA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000B4E0 4A28 0028                  		tst.b	$28(a0)
0000B4E4 6700                       		beq.s	loc_B238
0000B4E6 5428 0024                  		addq.b	#2,$24(a0)
0000B4EA 6000 0000                  		bra.w	Obj35_Move
0000B4EE                            ; ===========================================================================
0000B4EE                            
0000B4EE                            loc_B238:				; XREF: Obj35_Index
0000B4EE 2268 0030                  		movea.l	$30(a0),a1
0000B4F2 3228 0008                  		move.w	8(a0),d1
0000B4F6 9268 002A                  		sub.w	$2A(a0),d1
0000B4FA 0641 000C                  		addi.w	#$C,d1
0000B4FE 3001                       		move.w	d1,d0
0000B500 E248                       		lsr.w	#1,d0
0000B502 1031 0000                  		move.b	(a1,d0.w),d0
0000B506 4440                       		neg.w	d0
0000B508 D068 002C                  		add.w	$2C(a0),d0
0000B50C 3400                       		move.w	d0,d2
0000B50E D068 003C                  		add.w	$3C(a0),d0
0000B512 3140 000C                  		move.w	d0,$C(a0)
0000B516 0C41 0084                  		cmpi.w	#$84,d1
0000B51A 6400                       		bcc.s	loc_B2B0
0000B51C 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B524 0C41 0080                  		cmpi.w	#$80,d1
0000B528 6400                       		bcc.s	loc_B2B0
0000B52A 2028 0008                  		move.l	8(a0),d0
0000B52E 0680 0008 0000             		addi.l	#$80000,d0
0000B534 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B53A 6600                       		bne.s	loc_B2B0
0000B53C 6100 0000                  		bsr.w	SingleObjLoad2
0000B540 6600                       		bne.s	loc_B2B0
0000B542 12BC 0035                  		move.b	#$35,0(a1)
0000B546 3368 0008 0008             		move.w	8(a0),8(a1)
0000B54C 3342 002C                  		move.w	d2,$2C(a1)
0000B550 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B556 137C 0001 0028             		move.b	#1,$28(a1)
0000B55C 2468 0038                  		movea.l	$38(a0),a2
0000B560 6100 FDF0                  		bsr.w	sub_B09C
0000B564                            
0000B564                            loc_B2B0:
0000B564 6000                       		bra.s	Obj35_Animate
0000B566                            ; ===========================================================================
0000B566                            
0000B566                            Obj35_Move:				; XREF: Obj35_Index
0000B566 3028 002C                  		move.w	$2C(a0),d0
0000B56A D068 003C                  		add.w	$3C(a0),d0
0000B56E 3140 000C                  		move.w	d0,$C(a0)
0000B572                            
0000B572                            Obj35_Animate:				; XREF: loc_B238
0000B572 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B578 6100 F496                  		bsr.w	AnimateSprite
0000B57C 6000 0000                  		bra.w	DisplaySprite
0000B580                            ; ===========================================================================
0000B580                            Ani_obj35:
0000B580                            	include "_anim\obj35.asm"
0000B580                            ; ---------------------------------------------------------------------------
0000B580                            ; Animation script - fireball that sits on the	floor (MZ)
0000B580                            ; ---------------------------------------------------------------------------
0000B580 0000                       		dc.w byte_B2CE-Ani_obj35
0000B582 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B588                            		even
0000B588                            		even
0000B588                            
0000B588                            ; ---------------------------------------------------------------------------
0000B588                            ; Sprite mappings - large moving platforms (MZ)
0000B588                            ; ---------------------------------------------------------------------------
0000B588                            Map_obj2F:
0000B588                            	include "_maps\obj2F.asm"
0000B588                            ; ---------------------------------------------------------------------------
0000B588                            ; Sprite mappings - large moving platforms (MZ)
0000B588                            ; ---------------------------------------------------------------------------
0000B588 0000                       		dc.w byte_B2DA-Map_obj2F
0000B58A 0000                       		dc.w byte_B31C-Map_obj2F
0000B58C 0000                       		dc.w byte_B34F-Map_obj2F
0000B58E 0D                         byte_B2DA:	dc.b $D
0000B58F D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B594 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B599 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B59E D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B5A3 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B5A8 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B5AD D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B5B2 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B5B7 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B5BC F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B5C1 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B5C6 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B5CB F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B5D0 0A                         byte_B31C:	dc.b $A
0000B5D1 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B5D6 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B5DB 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B5E0 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B5E5 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B5EA F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B5EF C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B5F4 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B5F9 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B5FE E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B603 06                         byte_B34F:	dc.b 6
0000B604 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B609 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B60E 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B613 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B618 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B61D 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B622                            		even
0000B622                            		even
0000B622                            
0000B622                            ; ---------------------------------------------------------------------------
0000B622                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B622                            ; ---------------------------------------------------------------------------
0000B622                            Map_obj14:
0000B622                            	include "_maps\obj14.asm"
0000B622                            ; ---------------------------------------------------------------------------
0000B622                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B622                            ; ---------------------------------------------------------------------------
0000B622 0000                       		dc.w byte_B37A-Map_obj14
0000B624 0000                       		dc.w byte_B380-Map_obj14
0000B626 0000                       		dc.w byte_B386-Map_obj14
0000B628 0000                       		dc.w byte_B38C-Map_obj14
0000B62A 0000                       		dc.w byte_B392-Map_obj14
0000B62C 0000                       		dc.w byte_B398-Map_obj14
0000B62E 01                         byte_B37A:	dc.b 1
0000B62F E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B634 01                         byte_B380:	dc.b 1
0000B635 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B63A 01                         byte_B386:	dc.b 1
0000B63B F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B640 01                         byte_B38C:	dc.b 1
0000B641 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B646 01                         byte_B392:	dc.b 1
0000B647 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B64C 01                         byte_B398:	dc.b 1
0000B64D F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B652                            		even
0000B652                            		even
0000B652                            
0000B652                            ; ===========================================================================
0000B652                            ; ---------------------------------------------------------------------------
0000B652                            ; Object 30 - large green glassy blocks	(MZ)
0000B652                            ; ---------------------------------------------------------------------------
0000B652                            
0000B652                            Obj30:					; XREF: Obj_Index
0000B652 7000                       		moveq	#0,d0
0000B654 1028 0024                  		move.b	$24(a0),d0
0000B658 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B65C 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B660 3028 0008                  		move.w	8(a0),d0
0000B664 0240 FF80                  		andi.w	#$FF80,d0
0000B668 3238 F700                  		move.w	($FFFFF700).w,d1
0000B66C 0441 0080                  		subi.w	#$80,d1
0000B670 0241 FF80                  		andi.w	#$FF80,d1
0000B674 9041                       		sub.w	d1,d0
0000B676 0C40 0280                  		cmpi.w	#$280,d0
0000B67A 6200 0000                  		bhi.w	Obj30_Delete
0000B67E 6000 0000                  		bra.w	DisplaySprite
0000B682                            ; ===========================================================================
0000B682                            
0000B682                            Obj30_Delete:
0000B682 6000 0000                  		bra.w	DeleteObject
0000B686                            ; ===========================================================================
0000B686 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B688 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B68A 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B68C 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B68E 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B690                            
0000B690 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B693 0400 01                    		dc.b 4,	0, 1
0000B696 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B699 0800 01                    		dc.b 8,	0, 1
0000B69C                            ; ===========================================================================
0000B69C                            
0000B69C                            Obj30_Main:				; XREF: Obj30_Index
0000B69C 45F9 0000 B690             		lea	(Obj30_Vars1).l,a2
0000B6A2 7201                       		moveq	#1,d1
0000B6A4 117C 0048 0016             		move.b	#$48,$16(a0)
0000B6AA 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B6B0 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B6B2 45F9 0000 B696             		lea	(Obj30_Vars2).l,a2
0000B6B8 7201                       		moveq	#1,d1
0000B6BA 117C 0038 0016             		move.b	#$38,$16(a0)
0000B6C0                            
0000B6C0                            loc_B40C:
0000B6C0 2248                       		movea.l	a0,a1
0000B6C2 6000                       		bra.s	Obj30_Load	; load main object
0000B6C4                            ; ===========================================================================
0000B6C4                            
0000B6C4                            Obj30_Loop:
0000B6C4 6100 0000                  		bsr.w	SingleObjLoad2
0000B6C8 6600                       		bne.s	loc_B480
0000B6CA                            
0000B6CA                            Obj30_Load:				; XREF: Obj30_Main
0000B6CA 135A 0024                  		move.b	(a2)+,$24(a1)
0000B6CE 12BC 0030                  		move.b	#$30,0(a1)
0000B6D2 3368 0008 0008             		move.w	8(a0),8(a1)
0000B6D8 101A                       		move.b	(a2)+,d0
0000B6DA 4880                       		ext.w	d0
0000B6DC D068 000C                  		add.w	$C(a0),d0
0000B6E0 3340 000C                  		move.w	d0,$C(a1)
0000B6E4 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B6EC 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B6F2 137C 0004 0001             		move.b	#4,1(a1)
0000B6F8 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B6FE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B704 137C 0020 0019             		move.b	#$20,$19(a1)
0000B70A 137C 0004 0018             		move.b	#4,$18(a1)
0000B710 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B714 2348 003C                  		move.l	a0,$3C(a1)
0000B718 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B71C                            
0000B71C 137C 0010 0019             		move.b	#$10,$19(a1)
0000B722 137C 0003 0018             		move.b	#3,$18(a1)
0000B728 5029 0028                  		addq.b	#8,$28(a1)
0000B72C 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B732                            
0000B732                            loc_B480:
0000B732 317C 0090 0032             		move.w	#$90,$32(a0)
0000B738 08E8 0004 0001             		bset	#4,1(a0)
0000B73E                            
0000B73E                            Obj30_Block012:				; XREF: Obj30_Index
0000B73E 6100 0000                  		bsr.w	Obj30_Types
0000B742 323C 002B                  		move.w	#$2B,d1
0000B746 343C 0048                  		move.w	#$48,d2
0000B74A 363C 0049                  		move.w	#$49,d3
0000B74E 3828 0008                  		move.w	8(a0),d4
0000B752 6000 0000                  		bra.w	SolidObject
0000B756                            ; ===========================================================================
0000B756                            
0000B756                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B756 2268 003C                  		movea.l	$3C(a0),a1
0000B75A 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B760 6000 0000                  		bra.w	Obj30_Types
0000B764                            ; ===========================================================================
0000B764                            
0000B764                            Obj30_Block34:				; XREF: Obj30_Index
0000B764 6100 0000                  		bsr.w	Obj30_Types
0000B768 323C 002B                  		move.w	#$2B,d1
0000B76C 343C 0038                  		move.w	#$38,d2
0000B770 363C 0039                  		move.w	#$39,d3
0000B774 3828 0008                  		move.w	8(a0),d4
0000B778 6000 0000                  		bra.w	SolidObject
0000B77C                            ; ===========================================================================
0000B77C                            
0000B77C                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B77C 2268 003C                  		movea.l	$3C(a0),a1
0000B780 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B786 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B78C 6000 0002                  		bra.w	*+4
0000B790                            
0000B790                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B790                            
0000B790                            
0000B790                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B790 7000                       		moveq	#0,d0
0000B792 1028 0028                  		move.b	$28(a0),d0
0000B796 0240 0007                  		andi.w	#7,d0
0000B79A D040                       		add.w	d0,d0
0000B79C 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B7A0 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B7A4                            ; End of function Obj30_Types
0000B7A4                            
0000B7A4                            ; ===========================================================================
0000B7A4 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B7A6 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B7A8 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B7AA 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B7AC 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B7AE                            ; ===========================================================================
0000B7AE                            
0000B7AE                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B7AE 4E75                       		rts	
0000B7B0                            ; ===========================================================================
0000B7B0                            
0000B7B0                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B7B0 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B7B4 323C 0040                  		move.w	#$40,d1
0000B7B8 6000                       		bra.s	loc_B514
0000B7BA                            ; ===========================================================================
0000B7BA                            
0000B7BA                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000B7BA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B7BE 323C 0040                  		move.w	#$40,d1
0000B7C2 4440                       		neg.w	d0
0000B7C4 D041                       		add.w	d1,d0
0000B7C6                            
0000B7C6                            loc_B514:				; XREF: Obj30_Type01
0000B7C6 0828 0003 0028             		btst	#3,$28(a0)
0000B7CC 6700                       		beq.s	loc_B526
0000B7CE 4440                       		neg.w	d0
0000B7D0 D041                       		add.w	d1,d0
0000B7D2 E208                       		lsr.b	#1,d0
0000B7D4 0640 0020                  		addi.w	#$20,d0
0000B7D8                            
0000B7D8                            loc_B526:
0000B7D8 6000 0000                  		bra.w	loc_B5EE
0000B7DC                            ; ===========================================================================
0000B7DC                            
0000B7DC                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000B7DC 0828 0003 0028             		btst	#3,$28(a0)
0000B7E2 6700                       		beq.s	loc_B53E
0000B7E4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B7E8 0440 0010                  		subi.w	#$10,d0
0000B7EC 6000 0000                  		bra.w	loc_B5EE
0000B7F0                            ; ===========================================================================
0000B7F0                            
0000B7F0                            loc_B53E:
0000B7F0 0828 0003 0022             		btst	#3,$22(a0)
0000B7F6 6600                       		bne.s	loc_B54E
0000B7F8 08A8 0000 0034             		bclr	#0,$34(a0)
0000B7FE 6000                       		bra.s	loc_B582
0000B800                            ; ===========================================================================
0000B800                            
0000B800                            loc_B54E:
0000B800 4A28 0034                  		tst.b	$34(a0)
0000B804 6600                       		bne.s	loc_B582
0000B806 117C 0001 0034             		move.b	#1,$34(a0)
0000B80C 08E8 0000 0035             		bset	#0,$35(a0)
0000B812 6700                       		beq.s	loc_B582
0000B814 08E8 0007 0034             		bset	#7,$34(a0)
0000B81A 317C 0010 0036             		move.w	#$10,$36(a0)
0000B820 117C 000A 0038             		move.b	#$A,$38(a0)
0000B826 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000B82C 6600                       		bne.s	loc_B582
0000B82E 317C 0040 0036             		move.w	#$40,$36(a0)
0000B834                            
0000B834                            loc_B582:
0000B834 4A28 0034                  		tst.b	$34(a0)
0000B838 6A00                       		bpl.s	loc_B5AA
0000B83A 4A28 0038                  		tst.b	$38(a0)
0000B83E 6700                       		beq.s	loc_B594
0000B840 5328 0038                  		subq.b	#1,$38(a0)
0000B844 6600                       		bne.s	loc_B5AA
0000B846                            
0000B846                            loc_B594:
0000B846 4A68 0032                  		tst.w	$32(a0)
0000B84A 6700                       		beq.s	loc_B5A4
0000B84C 5368 0032                  		subq.w	#1,$32(a0)
0000B850 5368 0036                  		subq.w	#1,$36(a0)
0000B854 6600                       		bne.s	loc_B5AA
0000B856                            
0000B856                            loc_B5A4:
0000B856 08A8 0007 0034             		bclr	#7,$34(a0)
0000B85C                            
0000B85C                            loc_B5AA:
0000B85C 3028 0032                  		move.w	$32(a0),d0
0000B860 6000                       		bra.s	loc_B5EE
0000B862                            ; ===========================================================================
0000B862                            
0000B862                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000B862 0828 0003 0028             		btst	#3,$28(a0)
0000B868 6700                       		beq.s	Obj30_ChkSwitch
0000B86A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B86E 0440 0010                  		subi.w	#$10,d0
0000B872 6000                       		bra.s	loc_B5EE
0000B874                            ; ===========================================================================
0000B874                            
0000B874                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000B874 4A28 0034                  		tst.b	$34(a0)
0000B878 6600                       		bne.s	loc_B5E0
0000B87A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000B87E 7000                       		moveq	#0,d0
0000B880 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000B884 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000B886 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000B88A 6700                       		beq.s	loc_B5EA	; if not, branch
0000B88C 117C 0001 0034             		move.b	#1,$34(a0)
0000B892                            
0000B892                            loc_B5E0:
0000B892 4A68 0032                  		tst.w	$32(a0)
0000B896 6700                       		beq.s	loc_B5EA
0000B898 5568 0032                  		subq.w	#2,$32(a0)
0000B89C                            
0000B89C                            loc_B5EA:
0000B89C 3028 0032                  		move.w	$32(a0),d0
0000B8A0                            
0000B8A0                            loc_B5EE:
0000B8A0 3228 0030                  		move.w	$30(a0),d1
0000B8A4 9240                       		sub.w	d0,d1
0000B8A6 3141 000C                  		move.w	d1,$C(a0)
0000B8AA 4E75                       		rts	
0000B8AC                            ; ===========================================================================
0000B8AC                            ; ---------------------------------------------------------------------------
0000B8AC                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B8AC                            ; ---------------------------------------------------------------------------
0000B8AC                            Map_obj30:
0000B8AC                            	include "_maps\obj30.asm"
0000B8AC                            ; ---------------------------------------------------------------------------
0000B8AC                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B8AC                            ; ---------------------------------------------------------------------------
0000B8AC 0000                       		dc.w byte_B600-Map_obj30
0000B8AE 0000                       		dc.w byte_B63D-Map_obj30
0000B8B0 0000                       		dc.w byte_B648-Map_obj30
0000B8B2 0C                         byte_B600:	dc.b $C
0000B8B3 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000B8B8 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000B8BD C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000B8C2 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000B8C7 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000B8CC E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000B8D1 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000B8D6 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000B8DB 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000B8E0 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000B8E5 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000B8EA 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000B8EF 02                         byte_B63D:	dc.b 2
0000B8F0 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000B8F5 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000B8FA 0A                         byte_B648:	dc.b $A
0000B8FB C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000B900 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000B905 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000B90A D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000B90F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000B914 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000B919 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000B91E 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000B923 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000B928 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000B92E 00                         		even
0000B92E 00                         		even
0000B92E                            
0000B92E                            ; ===========================================================================
0000B92E                            ; ---------------------------------------------------------------------------
0000B92E                            ; Object 31 - stomping metal blocks on chains (MZ)
0000B92E                            ; ---------------------------------------------------------------------------
0000B92E                            
0000B92E                            Obj31:					; XREF: Obj_Index
0000B92E 7000                       		moveq	#0,d0
0000B930 1028 0024                  		move.b	$24(a0),d0
0000B934 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000B938 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000B93C                            ; ===========================================================================
0000B93C 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000B93E 0000                       		dc.w loc_B798-Obj31_Index
0000B940 0000                       		dc.w loc_B7FE-Obj31_Index
0000B942 0000                       		dc.w Obj31_Display2-Obj31_Index
0000B944 0000                       		dc.w loc_B7E2-Obj31_Index
0000B946                            
0000B946 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000B948 0100                       		dc.b 1,	0
0000B94A                            
0000B94A 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000B94D 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000B950 08CC 03                    		dc.b 8,	$CC, 3
0000B953 06F0 02                    		dc.b 6,	$F0, 2
0000B956                            
0000B956 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000B95A 5000 7800                  		dc.w $5000, $7800
0000B95E 3800 5800                  		dc.w $3800, $5800
0000B962 B800                       		dc.w $B800
0000B964                            ; ===========================================================================
0000B964                            
0000B964                            Obj31_Main:				; XREF: Obj31_Index
0000B964 7000                       		moveq	#0,d0
0000B966 1028 0028                  		move.b	$28(a0),d0
0000B96A 6A00                       		bpl.s	loc_B6CE
0000B96C 0240 007F                  		andi.w	#$7F,d0
0000B970 D040                       		add.w	d0,d0
0000B972 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000B976 115A 003A                  		move.b	(a2)+,$3A(a0)
0000B97A 101A                       		move.b	(a2)+,d0
0000B97C 1140 0028                  		move.b	d0,$28(a0)
0000B980                            
0000B980                            loc_B6CE:
0000B980 0200 000F                  		andi.b	#$F,d0
0000B984 D040                       		add.w	d0,d0
0000B986 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000B98A 4A40                       		tst.w	d0
0000B98C 6600                       		bne.s	loc_B6E0
0000B98E 3142 0032                  		move.w	d2,$32(a0)
0000B992                            
0000B992                            loc_B6E0:
0000B992 45F9 0000 B94A             		lea	(Obj31_Var).l,a2
0000B998 2248                       		movea.l	a0,a1
0000B99A 7203                       		moveq	#3,d1
0000B99C 6000                       		bra.s	Obj31_MakeStomper
0000B99E                            ; ===========================================================================
0000B99E                            
0000B99E                            Obj31_Loop:
0000B99E 6100 0000                  		bsr.w	SingleObjLoad2
0000B9A2 6600 0000                  		bne.w	Obj31_SetSize
0000B9A6                            
0000B9A6                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000B9A6 135A 0024                  		move.b	(a2)+,$24(a1)
0000B9AA 12BC 0031                  		move.b	#$31,0(a1)
0000B9AE 3368 0008 0008             		move.w	8(a0),8(a1)
0000B9B4 101A                       		move.b	(a2)+,d0
0000B9B6 4880                       		ext.w	d0
0000B9B8 D068 000C                  		add.w	$C(a0),d0
0000B9BC 3340 000C                  		move.w	d0,$C(a1)
0000B9C0 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000B9C8 337C 0300 0002             		move.w	#$300,2(a1)
0000B9CE 137C 0004 0001             		move.b	#4,1(a1)
0000B9D4 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B9DA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B9E0 137C 0010 0019             		move.b	#$10,$19(a1)
0000B9E6 3342 0034                  		move.w	d2,$34(a1)
0000B9EA 137C 0004 0018             		move.b	#4,$18(a1)
0000B9F0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B9F4 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000B9FA 6600                       		bne.s	loc_B76A
0000B9FC 5341                       		subq.w	#1,d1
0000B9FE 1028 0028                  		move.b	$28(a0),d0
0000BA02 0240 00F0                  		andi.w	#$F0,d0
0000BA06 0C40 0020                  		cmpi.w	#$20,d0
0000BA0A 679A                       		beq.s	Obj31_MakeStomper
0000BA0C 137C 0038 0019             		move.b	#$38,$19(a1)
0000BA12 137C 0090 0020             		move.b	#$90,$20(a1)
0000BA18 5241                       		addq.w	#1,d1
0000BA1A                            
0000BA1A                            loc_B76A:
0000BA1A 2348 003C                  		move.l	a0,$3C(a1)
0000BA1E 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BA22                            
0000BA22 137C 0003 0018             		move.b	#3,$18(a1)
0000BA28                            
0000BA28                            Obj31_SetSize:
0000BA28 7000                       		moveq	#0,d0
0000BA2A 1028 0028                  		move.b	$28(a0),d0
0000BA2E E648                       		lsr.w	#3,d0
0000BA30 0200 000E                  		andi.b	#$E,d0
0000BA34 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BA38 115A 0019                  		move.b	(a2)+,$19(a0)
0000BA3C 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BA40 6000                       		bra.s	loc_B798
0000BA42                            ; ===========================================================================
0000BA42 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BA44 3009                       		dc.b $30, 9
0000BA46 100A                       		dc.b $10, $A
0000BA48                            ; ===========================================================================
0000BA48                            
0000BA48                            loc_B798:				; XREF: Obj31_Index
0000BA48 6100 0000                  		bsr.w	Obj31_Types
0000BA4C 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BA52 7200                       		moveq	#0,d1
0000BA54 1228 0019                  		move.b	$19(a0),d1
0000BA58 0641 000B                  		addi.w	#$B,d1
0000BA5C 343C 000C                  		move.w	#$C,d2
0000BA60 363C 000D                  		move.w	#$D,d3
0000BA64 3828 0008                  		move.w	8(a0),d4
0000BA68 6100 0000                  		bsr.w	SolidObject
0000BA6C 0828 0003 0022             		btst	#3,$22(a0)
0000BA72 6700                       		beq.s	Obj31_Display
0000BA74 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BA7A 6400                       		bcc.s	Obj31_Display
0000BA7C 2448                       		movea.l	a0,a2
0000BA7E 41F8 D000                  		lea	($FFFFD000).w,a0
0000BA82 4EB9 0000 0000             		jsr	KillSonic
0000BA88 204A                       		movea.l	a2,a0
0000BA8A                            
0000BA8A                            Obj31_Display:
0000BA8A 6100 0000                  		bsr.w	DisplaySprite
0000BA8E 6000 0000                  		bra.w	Obj31_ChkDel
0000BA92                            ; ===========================================================================
0000BA92                            
0000BA92                            loc_B7E2:				; XREF: Obj31_Index
0000BA92 117C 0080 0016             		move.b	#$80,$16(a0)
0000BA98 08E8 0004 0001             		bset	#4,1(a0)
0000BA9E 2268 003C                  		movea.l	$3C(a0),a1
0000BAA2 1029 0032                  		move.b	$32(a1),d0
0000BAA6 EA08                       		lsr.b	#5,d0
0000BAA8 5600                       		addq.b	#3,d0
0000BAAA 1140 001A                  		move.b	d0,$1A(a0)
0000BAAE                            
0000BAAE                            loc_B7FE:				; XREF: Obj31_Index
0000BAAE 2268 003C                  		movea.l	$3C(a0),a1
0000BAB2 7000                       		moveq	#0,d0
0000BAB4 1029 0032                  		move.b	$32(a1),d0
0000BAB8 D068 0030                  		add.w	$30(a0),d0
0000BABC 3140 000C                  		move.w	d0,$C(a0)
0000BAC0                            
0000BAC0                            Obj31_Display2:				; XREF: Obj31_Index
0000BAC0 6100 0000                  		bsr.w	DisplaySprite
0000BAC4                            
0000BAC4                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BAC4 3028 0008                  		move.w	8(a0),d0
0000BAC8 0240 FF80                  		andi.w	#$FF80,d0
0000BACC 3238 F700                  		move.w	($FFFFF700).w,d1
0000BAD0 0441 0080                  		subi.w	#$80,d1
0000BAD4 0241 FF80                  		andi.w	#$FF80,d1
0000BAD8 9041                       		sub.w	d1,d0
0000BADA 0C40 0280                  		cmpi.w	#$280,d0
0000BADE 6200 0000                  		bhi.w	DeleteObject
0000BAE2 4E75                       		rts	
0000BAE4                            ; ===========================================================================
0000BAE4                            
0000BAE4                            Obj31_Types:				; XREF: loc_B798
0000BAE4 1028 0028                  		move.b	$28(a0),d0
0000BAE8 0240 000F                  		andi.w	#$F,d0
0000BAEC D040                       		add.w	d0,d0
0000BAEE 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BAF2 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BAF6                            ; ===========================================================================
0000BAF6 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BAF8 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BAFA 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BAFC 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BAFE 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BB00 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BB02 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BB04                            ; ===========================================================================
0000BB04                            
0000BB04                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BB04 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BB08 7000                       		moveq	#0,d0
0000BB0A 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BB0E 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BB12 6700                       		beq.s	loc_B8A8	; if not, branch
0000BB14 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BB18 6A00                       		bpl.s	loc_B872
0000BB1A 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BB20 6700                       		beq.s	loc_B8A0
0000BB22                            
0000BB22                            loc_B872:
0000BB22 4A68 0032                  		tst.w	$32(a0)
0000BB26 6700                       		beq.s	loc_B8A0
0000BB28 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BB2C 0200 000F                  		andi.b	#$F,d0
0000BB30 6600                       		bne.s	loc_B892
0000BB32 4A28 0001                  		tst.b	1(a0)
0000BB36 6A00                       		bpl.s	loc_B892
0000BB38 303C 00C7                  		move.w	#$C7,d0
0000BB3C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BB42                            
0000BB42                            loc_B892:
0000BB42 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BB48 6400                       		bcc.s	Obj31_Restart
0000BB4A 317C 0000 0032             		move.w	#0,$32(a0)
0000BB50                            
0000BB50                            loc_B8A0:
0000BB50 317C 0000 0012             		move.w	#0,$12(a0)
0000BB56 6000                       		bra.s	Obj31_Restart
0000BB58                            ; ===========================================================================
0000BB58                            
0000BB58                            loc_B8A8:				; XREF: Obj31_Type00
0000BB58 3228 0034                  		move.w	$34(a0),d1
0000BB5C B268 0032                  		cmp.w	$32(a0),d1
0000BB60 6700                       		beq.s	Obj31_Restart
0000BB62 3028 0012                  		move.w	$12(a0),d0
0000BB66 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BB6C D168 0032                  		add.w	d0,$32(a0)
0000BB70 B268 0032                  		cmp.w	$32(a0),d1
0000BB74 6200                       		bhi.s	Obj31_Restart
0000BB76 3141 0032                  		move.w	d1,$32(a0)
0000BB7A 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BB80 4A28 0001                  		tst.b	1(a0)
0000BB84 6A00                       		bpl.s	Obj31_Restart
0000BB86 303C 00BD                  		move.w	#$BD,d0
0000BB8A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BB90                            
0000BB90                            Obj31_Restart:
0000BB90 7000                       		moveq	#0,d0
0000BB92 1028 0032                  		move.b	$32(a0),d0
0000BB96 D068 0030                  		add.w	$30(a0),d0
0000BB9A 3140 000C                  		move.w	d0,$C(a0)
0000BB9E 4E75                       		rts	
0000BBA0                            ; ===========================================================================
0000BBA0                            
0000BBA0                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BBA0 4A68 0036                  		tst.w	$36(a0)
0000BBA4 6700                       		beq.s	loc_B938
0000BBA6 4A68 0038                  		tst.w	$38(a0)
0000BBAA 6700                       		beq.s	loc_B902
0000BBAC 5368 0038                  		subq.w	#1,$38(a0)
0000BBB0 6000                       		bra.s	loc_B97C
0000BBB2                            ; ===========================================================================
0000BBB2                            
0000BBB2                            loc_B902:
0000BBB2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BBB6 0200 000F                  		andi.b	#$F,d0
0000BBBA 6600                       		bne.s	loc_B91C
0000BBBC 4A28 0001                  		tst.b	1(a0)
0000BBC0 6A00                       		bpl.s	loc_B91C
0000BBC2 303C 00C7                  		move.w	#$C7,d0
0000BBC6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BBCC                            
0000BBCC                            loc_B91C:
0000BBCC 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BBD2 6400                       		bcc.s	loc_B97C
0000BBD4 317C 0000 0032             		move.w	#0,$32(a0)
0000BBDA 317C 0000 0012             		move.w	#0,$12(a0)
0000BBE0 317C 0000 0036             		move.w	#0,$36(a0)
0000BBE6 6000                       		bra.s	loc_B97C
0000BBE8                            ; ===========================================================================
0000BBE8                            
0000BBE8                            loc_B938:				; XREF: Obj31_Type01
0000BBE8 3228 0034                  		move.w	$34(a0),d1
0000BBEC B268 0032                  		cmp.w	$32(a0),d1
0000BBF0 6700                       		beq.s	loc_B97C
0000BBF2 3028 0012                  		move.w	$12(a0),d0
0000BBF6 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BBFC D168 0032                  		add.w	d0,$32(a0)
0000BC00 B268 0032                  		cmp.w	$32(a0),d1
0000BC04 6200                       		bhi.s	loc_B97C
0000BC06 3141 0032                  		move.w	d1,$32(a0)
0000BC0A 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BC10 317C 0001 0036             		move.w	#1,$36(a0)
0000BC16 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BC1C 4A28 0001                  		tst.b	1(a0)
0000BC20 6A00                       		bpl.s	loc_B97C
0000BC22 303C 00BD                  		move.w	#$BD,d0
0000BC26 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BC2C                            
0000BC2C                            loc_B97C:
0000BC2C 6000 FF62                  		bra.w	Obj31_Restart
0000BC30                            ; ===========================================================================
0000BC30                            
0000BC30                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BC30 3038 D008                  		move.w	($FFFFD008).w,d0
0000BC34 9068 0008                  		sub.w	8(a0),d0
0000BC38 6400                       		bcc.s	loc_B98C
0000BC3A 4440                       		neg.w	d0
0000BC3C                            
0000BC3C                            loc_B98C:
0000BC3C 0C40 0090                  		cmpi.w	#$90,d0
0000BC40 6400                       		bcc.s	loc_B996
0000BC42 5228 0028                  		addq.b	#1,$28(a0)
0000BC46                            
0000BC46                            loc_B996:
0000BC46 6000 FF48                  		bra.w	Obj31_Restart
0000BC4A                            ; ===========================================================================
0000BC4A                            ; ---------------------------------------------------------------------------
0000BC4A                            ; Object 45 - spiked metal block from beta version (MZ)
0000BC4A                            ; ---------------------------------------------------------------------------
0000BC4A                            
0000BC4A                            Obj45:					; XREF: Obj_Index
0000BC4A 7000                       		moveq	#0,d0
0000BC4C 1028 0024                  		move.b	$24(a0),d0
0000BC50 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BC54 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BC58                            ; ===========================================================================
0000BC58 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BC5A 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BC5C 0000                       		dc.w loc_BA8E-Obj45_Index
0000BC5E 0000                       		dc.w Obj45_Display-Obj45_Index
0000BC60 0000                       		dc.w loc_BA7A-Obj45_Index
0000BC62                            
0000BC62 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BC65 04E4 01                    		dc.b	4, $E4,	  1
0000BC68 0834 03                    		dc.b	8, $34,	  3
0000BC6B 0628 02                    		dc.b	6, $28,	  2
0000BC6E                            
0000BC6E 3800                       word_B9BE:	dc.w $3800
0000BC70 A000                       		dc.w -$6000
0000BC72 5000                       		dc.w $5000
0000BC74                            ; ===========================================================================
0000BC74                            
0000BC74                            Obj45_Main:				; XREF: Obj45_Index
0000BC74 7000                       		moveq	#0,d0
0000BC76 1028 0028                  		move.b	$28(a0),d0
0000BC7A D040                       		add.w	d0,d0
0000BC7C 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BC80 45F9 0000 BC62             		lea	(Obj45_Var).l,a2
0000BC86 2248                       		movea.l	a0,a1
0000BC88 7203                       		moveq	#3,d1
0000BC8A 6000                       		bra.s	Obj45_Load
0000BC8C                            ; ===========================================================================
0000BC8C                            
0000BC8C                            Obj45_Loop:
0000BC8C 6100 0000                  		bsr.w	SingleObjLoad2
0000BC90 6600                       		bne.s	loc_BA52
0000BC92                            
0000BC92                            Obj45_Load:				; XREF: Obj45_Main
0000BC92 135A 0024                  		move.b	(a2)+,$24(a1)
0000BC96 12BC 0045                  		move.b	#$45,0(a1)
0000BC9A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BCA0 101A                       		move.b	(a2)+,d0
0000BCA2 4880                       		ext.w	d0
0000BCA4 D068 0008                  		add.w	8(a0),d0
0000BCA8 3340 0008                  		move.w	d0,8(a1)
0000BCAC 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BCB4 337C 0300 0002             		move.w	#$300,2(a1)
0000BCBA 137C 0004 0001             		move.b	#4,1(a1)
0000BCC0 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BCC6 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BCCC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BCD2 137C 0020 0019             		move.b	#$20,$19(a1)
0000BCD8 3342 0034                  		move.w	d2,$34(a1)
0000BCDC 137C 0004 0018             		move.b	#4,$18(a1)
0000BCE2 0C12 0001                  		cmpi.b	#1,(a2)
0000BCE6 6600                       		bne.s	loc_BA40
0000BCE8 137C 0091 0020             		move.b	#$91,$20(a1)
0000BCEE                            
0000BCEE                            loc_BA40:
0000BCEE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BCF2 2348 003C                  		move.l	a0,$3C(a1)
0000BCF6 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BCFA                            
0000BCFA 137C 0003 0018             		move.b	#3,$18(a1)
0000BD00                            
0000BD00                            loc_BA52:
0000BD00 117C 0010 0019             		move.b	#$10,$19(a0)
0000BD06                            
0000BD06                            Obj45_Solid:				; XREF: Obj45_Index
0000BD06 3F28 0008                  		move.w	8(a0),-(sp)
0000BD0A 6100 0000                  		bsr.w	Obj45_Move
0000BD0E 323C 0017                  		move.w	#$17,d1
0000BD12 343C 0020                  		move.w	#$20,d2
0000BD16 363C 0020                  		move.w	#$20,d3
0000BD1A 381F                       		move.w	(sp)+,d4
0000BD1C 6100 0000                  		bsr.w	SolidObject
0000BD20 6100 0000                  		bsr.w	DisplaySprite
0000BD24 6000 0000                  		bra.w	Obj45_ChkDel
0000BD28                            ; ===========================================================================
0000BD28                            
0000BD28                            loc_BA7A:				; XREF: Obj45_Index
0000BD28 2268 003C                  		movea.l	$3C(a0),a1
0000BD2C 1029 0032                  		move.b	$32(a1),d0
0000BD30 0600 0010                  		addi.b	#$10,d0
0000BD34 EA08                       		lsr.b	#5,d0
0000BD36 5600                       		addq.b	#3,d0
0000BD38 1140 001A                  		move.b	d0,$1A(a0)
0000BD3C                            
0000BD3C                            loc_BA8E:				; XREF: Obj45_Index
0000BD3C 2268 003C                  		movea.l	$3C(a0),a1
0000BD40 7000                       		moveq	#0,d0
0000BD42 1029 0032                  		move.b	$32(a1),d0
0000BD46 4440                       		neg.w	d0
0000BD48 D068 0030                  		add.w	$30(a0),d0
0000BD4C 3140 0008                  		move.w	d0,8(a0)
0000BD50                            
0000BD50                            Obj45_Display:				; XREF: Obj45_Index
0000BD50 6100 0000                  		bsr.w	DisplaySprite
0000BD54                            
0000BD54                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BD54 3028 003A                  		move.w	$3A(a0),d0
0000BD58 0240 FF80                  		andi.w	#$FF80,d0
0000BD5C 3238 F700                  		move.w	($FFFFF700).w,d1
0000BD60 0441 0080                  		subi.w	#$80,d1
0000BD64 0241 FF80                  		andi.w	#$FF80,d1
0000BD68 9041                       		sub.w	d1,d0
0000BD6A 0C40 0280                  		cmpi.w	#$280,d0
0000BD6E 6200 0000                  		bhi.w	DeleteObject
0000BD72 4E75                       		rts	
0000BD74                            
0000BD74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BD74                            
0000BD74                            
0000BD74                            Obj45_Move:				; XREF: Obj45_Solid
0000BD74 7000                       		moveq	#0,d0
0000BD76 1028 0028                  		move.b	$28(a0),d0
0000BD7A D040                       		add.w	d0,d0
0000BD7C 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BD80 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BD84                            ; End of function Obj45_Move
0000BD84                            
0000BD84                            ; ===========================================================================
0000BD84 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BD86 0000                       		dc.w loc_BADA-off_BAD6
0000BD88                            ; ===========================================================================
0000BD88                            
0000BD88                            loc_BADA:				; XREF: off_BAD6
0000BD88 4A68 0036                  		tst.w	$36(a0)
0000BD8C 6700                       		beq.s	loc_BB08
0000BD8E 4A68 0038                  		tst.w	$38(a0)
0000BD92 6700                       		beq.s	loc_BAEC
0000BD94 5368 0038                  		subq.w	#1,$38(a0)
0000BD98 6000                       		bra.s	loc_BB3C
0000BD9A                            ; ===========================================================================
0000BD9A                            
0000BD9A                            loc_BAEC:
0000BD9A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BDA0 6400                       		bcc.s	loc_BB3C
0000BDA2 317C 0000 0032             		move.w	#0,$32(a0)
0000BDA8 317C 0000 0010             		move.w	#0,$10(a0)
0000BDAE 317C 0000 0036             		move.w	#0,$36(a0)
0000BDB4 6000                       		bra.s	loc_BB3C
0000BDB6                            ; ===========================================================================
0000BDB6                            
0000BDB6                            loc_BB08:				; XREF: loc_BADA
0000BDB6 3228 0034                  		move.w	$34(a0),d1
0000BDBA B268 0032                  		cmp.w	$32(a0),d1
0000BDBE 6700                       		beq.s	loc_BB3C
0000BDC0 3028 0010                  		move.w	$10(a0),d0
0000BDC4 0668 0070 0010             		addi.w	#$70,$10(a0)
0000BDCA D168 0032                  		add.w	d0,$32(a0)
0000BDCE B268 0032                  		cmp.w	$32(a0),d1
0000BDD2 6200                       		bhi.s	loc_BB3C
0000BDD4 3141 0032                  		move.w	d1,$32(a0)
0000BDD8 317C 0000 0010             		move.w	#0,$10(a0)
0000BDDE 317C 0001 0036             		move.w	#1,$36(a0)
0000BDE4 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BDEA                            
0000BDEA                            loc_BB3C:
0000BDEA 7000                       		moveq	#0,d0
0000BDEC 1028 0032                  		move.b	$32(a0),d0
0000BDF0 4440                       		neg.w	d0
0000BDF2 D068 0030                  		add.w	$30(a0),d0
0000BDF6 3140 0008                  		move.w	d0,8(a0)
0000BDFA 4E75                       		rts	
0000BDFC                            ; ===========================================================================
0000BDFC                            ; ---------------------------------------------------------------------------
0000BDFC                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BDFC                            ; ---------------------------------------------------------------------------
0000BDFC                            Map_obj31:
0000BDFC                            	include "_maps\obj31.asm"
0000BDFC                            ; ---------------------------------------------------------------------------
0000BDFC                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BDFC                            ; ---------------------------------------------------------------------------
0000BDFC 0000                       		dc.w byte_BB64-Map_obj31
0000BDFE 0000                       		dc.w byte_BB7E-Map_obj31
0000BE00 0000                       		dc.w byte_BB98-Map_obj31
0000BE02 0000                       		dc.w byte_BB9E-Map_obj31
0000BE04 0000                       		dc.w byte_BBA9-Map_obj31
0000BE06 0000                       		dc.w byte_BBBE-Map_obj31
0000BE08 0000                       		dc.w byte_BBDD-Map_obj31
0000BE0A 0000                       		dc.w byte_BC06-Map_obj31
0000BE0C 0000                       		dc.w byte_BC06-Map_obj31
0000BE0E 0000                       		dc.w byte_BC39-Map_obj31
0000BE10 0000                       		dc.w byte_BC53-Map_obj31
0000BE12 05                         byte_BB64:	dc.b 5
0000BE13 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000BE18 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000BE1D EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BE22 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000BE27 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000BE2C 05                         byte_BB7E:	dc.b 5
0000BE2D F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000BE32 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000BE37 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000BE3C F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000BE41 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000BE46 01                         byte_BB98:	dc.b 1
0000BE47 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000BE4C 02                         byte_BB9E:	dc.b 2
0000BE4D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BE52 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BE57 04                         byte_BBA9:	dc.b 4
0000BE58 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BE5D F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BE62 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BE67 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BE6C 06                         byte_BBBE:	dc.b 6
0000BE6D C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BE72 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BE77 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BE7C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BE81 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BE86 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BE8B 08                         byte_BBDD:	dc.b 8
0000BE8C A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BE91 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BE96 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BE9B D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BEA0 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BEA5 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BEAA 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BEAF 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BEB4 0A                         byte_BC06:	dc.b $A
0000BEB5 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000BEBA 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000BEBF A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BEC4 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BEC9 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BECE D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BED3 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BED8 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BEDD 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BEE2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BEE7 05                         byte_BC39:	dc.b 5
0000BEE8 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000BEED F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000BEF2 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000BEF7 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000BEFC EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BF01 01                         byte_BC53:	dc.b 1
0000BF02 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000BF08 00                         		even
0000BF08 00                         		even
0000BF08                            
0000BF08                            ; ---------------------------------------------------------------------------
0000BF08                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BF08                            ; ---------------------------------------------------------------------------
0000BF08                            Map_obj45:
0000BF08                            	include "_maps\obj45.asm"
0000BF08                            ; ---------------------------------------------------------------------------
0000BF08                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BF08                            ; ---------------------------------------------------------------------------
0000BF08 0000                       		dc.w byte_BC6C-Map_obj45
0000BF0A 0000                       		dc.w byte_BC7C-Map_obj45
0000BF0C 0000                       		dc.w byte_BC8C-Map_obj45
0000BF0E 0000                       		dc.w byte_BC92-Map_obj45
0000BF10 0000                       		dc.w byte_BC9D-Map_obj45
0000BF12 0000                       		dc.w byte_BCB2-Map_obj45
0000BF14 0000                       		dc.w byte_BCD1-Map_obj45
0000BF16 0000                       		dc.w byte_BCFA-Map_obj45
0000BF18 0000                       		dc.w byte_BCFA-Map_obj45
0000BF1A 03                         byte_BC6C:	dc.b 3
0000BF1B E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000BF20 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000BF25 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000BF2A 03                         byte_BC7C:	dc.b 3
0000BF2B E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000BF30 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000BF35 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000BF3A 01                         byte_BC8C:	dc.b 1
0000BF3B F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000BF40 02                         byte_BC92:	dc.b 2
0000BF41 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BF46 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BF4B 04                         byte_BC9D:	dc.b 4
0000BF4C F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BF51 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BF56 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BF5B F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BF60 06                         byte_BCB2:	dc.b 6
0000BF61 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BF66 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BF6B F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BF70 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BF75 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BF7A F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BF7F 08                         byte_BCD1:	dc.b 8
0000BF80 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BF85 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BF8A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BF8F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BF94 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BF99 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BF9E F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BFA3 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BFA8 08                         byte_BCFA:	dc.b 8
0000BFA9 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BFAE F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BFB3 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BFB8 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BFBD F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BFC2 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BFC7 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BFCC F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BFD1 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000BFD6 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000BFDC 00                         		even
0000BFDC 00                         		even
0000BFDC                            
0000BFDC                            ; ===========================================================================
0000BFDC                            ; ---------------------------------------------------------------------------
0000BFDC                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000BFDC                            ; ---------------------------------------------------------------------------
0000BFDC                            
0000BFDC                            Obj32:					; XREF: Obj_Index
0000BFDC 7000                       		moveq	#0,d0
0000BFDE 1028 0024                  		move.b	$24(a0),d0
0000BFE2 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000BFE6 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000BFEA                            ; ===========================================================================
0000BFEA 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000BFEC 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000BFEE                            ; ===========================================================================
0000BFEE                            
0000BFEE                            Obj32_Main:				; XREF: Obj32_Index
0000BFEE 5428 0024                  		addq.b	#2,$24(a0)
0000BFF2 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000BFFA 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C000 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C006 6700                       		beq.s	loc_BD60
0000C008 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C00E                            
0000C00E                            loc_BD60:
0000C00E 117C 0004 0001             		move.b	#4,1(a0)
0000C014 117C 0010 0019             		move.b	#$10,$19(a0)
0000C01A 117C 0004 0018             		move.b	#4,$18(a0)
0000C020 5668 000C                  		addq.w	#3,$C(a0)
0000C024                            
0000C024                            Obj32_Pressed:				; XREF: Obj32_Index
0000C024 4A28 0001                  		tst.b	1(a0)
0000C028 6A00                       		bpl.s	Obj32_Display
0000C02A 323C 001B                  		move.w	#$1B,d1
0000C02E 343C 0005                  		move.w	#5,d2
0000C032 363C 0005                  		move.w	#5,d3
0000C036 3828 0008                  		move.w	8(a0),d4
0000C03A 6100 0000                  		bsr.w	SolidObject
0000C03E 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C044 1028 0028                  		move.b	$28(a0),d0
0000C048 0240 000F                  		andi.w	#$F,d0
0000C04C 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C050 47F3 0000                  		lea	(a3,d0.w),a3
0000C054 7600                       		moveq	#0,d3
0000C056 0828 0006 0028             		btst	#6,$28(a0)
0000C05C 6700                       		beq.s	loc_BDB2
0000C05E 7607                       		moveq	#7,d3
0000C060                            
0000C060                            loc_BDB2:
0000C060 4A28 0028                  		tst.b	$28(a0)
0000C064 6A00                       		bpl.s	loc_BDBE
0000C066 6100 0000                  		bsr.w	Obj32_MZBlock
0000C06A 6600                       		bne.s	loc_BDC8
0000C06C                            
0000C06C                            loc_BDBE:
0000C06C 4A28 0025                  		tst.b	$25(a0)
0000C070 6600                       		bne.s	loc_BDC8
0000C072 0793                       		bclr	d3,(a3)
0000C074 6000                       		bra.s	loc_BDDE
0000C076                            ; ===========================================================================
0000C076                            
0000C076                            loc_BDC8:
0000C076 4A13                       		tst.b	(a3)
0000C078 6600                       		bne.s	loc_BDD6
0000C07A 303C 00CD                  		move.w	#$CD,d0
0000C07E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play switch sound
0000C084                            
0000C084                            loc_BDD6:
0000C084 07D3                       		bset	d3,(a3)
0000C086 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C08C                            
0000C08C                            loc_BDDE:
0000C08C 0828 0005 0028             		btst	#5,$28(a0)
0000C092 6700                       		beq.s	Obj32_Display
0000C094 5328 001E                  		subq.b	#1,$1E(a0)
0000C098 6A00                       		bpl.s	Obj32_Display
0000C09A 117C 0007 001E             		move.b	#7,$1E(a0)
0000C0A0 0868 0001 001A             		bchg	#1,$1A(a0)
0000C0A6                            
0000C0A6                            Obj32_Display:
0000C0A6 6100 0000                  		bsr.w	DisplaySprite
0000C0AA 3028 0008                  		move.w	8(a0),d0
0000C0AE 0240 FF80                  		andi.w	#$FF80,d0
0000C0B2 3238 F700                  		move.w	($FFFFF700).w,d1
0000C0B6 0441 0080                  		subi.w	#$80,d1
0000C0BA 0241 FF80                  		andi.w	#$FF80,d1
0000C0BE 9041                       		sub.w	d1,d0
0000C0C0 0C40 0280                  		cmpi.w	#$280,d0
0000C0C4 6200 0000                  		bhi.w	Obj32_Delete
0000C0C8 4E75                       		rts	
0000C0CA                            ; ===========================================================================
0000C0CA                            
0000C0CA                            Obj32_Delete:
0000C0CA 6100 0000                  		bsr.w	DeleteObject
0000C0CE 4E75                       		rts	
0000C0D0                            
0000C0D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C0D0                            
0000C0D0                            
0000C0D0                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C0D0 3F03                       		move.w	d3,-(sp)
0000C0D2 3428 0008                  		move.w	8(a0),d2
0000C0D6 3628 000C                  		move.w	$C(a0),d3
0000C0DA 0442 0010                  		subi.w	#$10,d2
0000C0DE 5143                       		subq.w	#8,d3
0000C0E0 383C 0020                  		move.w	#$20,d4
0000C0E4 3A3C 0010                  		move.w	#$10,d5
0000C0E8 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C0EC 3C3C 005F                  		move.w	#$5F,d6
0000C0F0                            
0000C0F0                            Obj32_MZLoop:
0000C0F0 4A29 0001                  		tst.b	1(a1)
0000C0F4 6A00                       		bpl.s	loc_BE4E
0000C0F6 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C0FA 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C0FC                            
0000C0FC                            loc_BE4E:
0000C0FC 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C100 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C104                            
0000C104 361F                       		move.w	(sp)+,d3
0000C106 7000                       		moveq	#0,d0
0000C108                            
0000C108                            locret_BE5A:
0000C108 4E75                       		rts	
0000C10A                            ; ===========================================================================
0000C10A 1010                       Obj32_MZData:	dc.b $10, $10
0000C10C                            ; ===========================================================================
0000C10C                            
0000C10C                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C10C 7001                       		moveq	#1,d0
0000C10E 0240 003F                  		andi.w	#$3F,d0
0000C112 D040                       		add.w	d0,d0
0000C114 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C118 121A                       		move.b	(a2)+,d1
0000C11A 4881                       		ext.w	d1
0000C11C 3029 0008                  		move.w	8(a1),d0
0000C120 9041                       		sub.w	d1,d0
0000C122 9042                       		sub.w	d2,d0
0000C124 6400                       		bcc.s	loc_BE80
0000C126 D241                       		add.w	d1,d1
0000C128 D041                       		add.w	d1,d0
0000C12A 6500                       		bcs.s	loc_BE84
0000C12C 60CE                       		bra.s	loc_BE4E
0000C12E                            ; ===========================================================================
0000C12E                            
0000C12E                            loc_BE80:
0000C12E B044                       		cmp.w	d4,d0
0000C130 62CA                       		bhi.s	loc_BE4E
0000C132                            
0000C132                            loc_BE84:
0000C132 121A                       		move.b	(a2)+,d1
0000C134 4881                       		ext.w	d1
0000C136 3029 000C                  		move.w	$C(a1),d0
0000C13A 9041                       		sub.w	d1,d0
0000C13C 9043                       		sub.w	d3,d0
0000C13E 6400                       		bcc.s	loc_BE9A
0000C140 D241                       		add.w	d1,d1
0000C142 D041                       		add.w	d1,d0
0000C144 6500                       		bcs.s	loc_BE9E
0000C146 60B4                       		bra.s	loc_BE4E
0000C148                            ; ===========================================================================
0000C148                            
0000C148                            loc_BE9A:
0000C148 B045                       		cmp.w	d5,d0
0000C14A 62B0                       		bhi.s	loc_BE4E
0000C14C                            
0000C14C                            loc_BE9E:
0000C14C 361F                       		move.w	(sp)+,d3
0000C14E 7001                       		moveq	#1,d0
0000C150 4E75                       		rts	
0000C152                            ; End of function Obj32_MZBlock
0000C152                            
0000C152                            ; ===========================================================================
0000C152                            ; ---------------------------------------------------------------------------
0000C152                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C152                            ; ---------------------------------------------------------------------------
0000C152                            Map_obj32:
0000C152                            	include "_maps\obj32.asm"
0000C152                            ; ---------------------------------------------------------------------------
0000C152                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C152                            ; ---------------------------------------------------------------------------
0000C152 0000                       		dc.w byte_BEAC-Map_obj32
0000C154 0000                       		dc.w byte_BEB7-Map_obj32
0000C156 0000                       		dc.w byte_BEC2-Map_obj32
0000C158 0000                       		dc.w byte_BEB7-Map_obj32
0000C15A 02                         byte_BEAC:	dc.b 2
0000C15B F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C160 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C165 02                         byte_BEB7:	dc.b 2
0000C166 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C16B F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C170 02                         byte_BEC2:	dc.b 2
0000C171 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C176 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C17B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C180                            		even
0000C180                            		even
0000C180                            
0000C180                            ; ===========================================================================
0000C180                            ; ---------------------------------------------------------------------------
0000C180                            ; Object 33 - pushable blocks (MZ, LZ)
0000C180                            ; ---------------------------------------------------------------------------
0000C180                            
0000C180                            Obj33:					; XREF: Obj_Index
0000C180 7000                       		moveq	#0,d0
0000C182 1028 0024                  		move.b	$24(a0),d0
0000C186 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C18A 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C18E                            ; ===========================================================================
0000C18E 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C190 0000                       		dc.w loc_BF6E-Obj33_Index
0000C192 0000                       		dc.w loc_C02C-Obj33_Index
0000C194                            
0000C194 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C196 4001                       		dc.b $40, 1
0000C198                            ; ===========================================================================
0000C198                            
0000C198                            Obj33_Main:				; XREF: Obj33_Index
0000C198 5428 0024                  		addq.b	#2,$24(a0)
0000C19C 117C 000F 0016             		move.b	#$F,$16(a0)
0000C1A2 117C 000F 0017             		move.b	#$F,$17(a0)
0000C1A8 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C1B0 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C1B6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C1BC 6600                       		bne.s	loc_BF16
0000C1BE 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C1C4                            
0000C1C4                            loc_BF16:
0000C1C4 117C 0004 0001             		move.b	#4,1(a0)
0000C1CA 117C 0003 0018             		move.b	#3,$18(a0)
0000C1D0 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C1D6 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C1DC 7000                       		moveq	#0,d0
0000C1DE 1028 0028                  		move.b	$28(a0),d0
0000C1E2 D040                       		add.w	d0,d0
0000C1E4 0240 000E                  		andi.w	#$E,d0
0000C1E8 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C1EC 115A 0019                  		move.b	(a2)+,$19(a0)
0000C1F0 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C1F4 4A28 0028                  		tst.b	$28(a0)
0000C1F8 6700                       		beq.s	Obj33_ChkGone
0000C1FA 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C200                            
0000C200                            Obj33_ChkGone:
0000C200 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C204 7000                       		moveq	#0,d0
0000C206 1028 0023                  		move.b	$23(a0),d0
0000C20A 6700                       		beq.s	loc_BF6E
0000C20C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C212 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C218 6600 0000                  		bne.w	DeleteObject
0000C21C                            
0000C21C                            loc_BF6E:				; XREF: Obj33_Index
0000C21C 4A28 0032                  		tst.b	$32(a0)
0000C220 6600 0000                  		bne.w	loc_C046
0000C224 7200                       		moveq	#0,d1
0000C226 1228 0019                  		move.b	$19(a0),d1
0000C22A 0641 000B                  		addi.w	#$B,d1
0000C22E 343C 0010                  		move.w	#$10,d2
0000C232 363C 0011                  		move.w	#$11,d3
0000C236 3828 0008                  		move.w	8(a0),d4
0000C23A 6100 0000                  		bsr.w	loc_C186
0000C23E 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C244 6600                       		bne.s	loc_BFC6	; if not, branch
0000C246 08A8 0007 0028             		bclr	#7,$28(a0)
0000C24C 3028 0008                  		move.w	8(a0),d0
0000C250 0C40 0A20                  		cmpi.w	#$A20,d0
0000C254 6500                       		bcs.s	loc_BFC6
0000C256 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C25A 6400                       		bcc.s	loc_BFC6
0000C25C 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C260 0440 001C                  		subi.w	#$1C,d0
0000C264 3140 000C                  		move.w	d0,$C(a0)
0000C268 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C26E 08E8 0007 0028             		bset	#7,$28(a0)
0000C274                            
0000C274                            loc_BFC6:
0000C274 3028 0008                  		move.w	8(a0),d0
0000C278 0240 FF80                  		andi.w	#$FF80,d0
0000C27C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C280 0441 0080                  		subi.w	#$80,d1
0000C284 0241 FF80                  		andi.w	#$FF80,d1
0000C288 9041                       		sub.w	d1,d0
0000C28A 0C40 0280                  		cmpi.w	#$280,d0
0000C28E 6200                       		bhi.s	loc_BFE6
0000C290 6000 0000                  		bra.w	DisplaySprite
0000C294                            ; ===========================================================================
0000C294                            
0000C294                            loc_BFE6:
0000C294 3028 0034                  		move.w	$34(a0),d0
0000C298 0240 FF80                  		andi.w	#$FF80,d0
0000C29C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C2A0 0441 0080                  		subi.w	#$80,d1
0000C2A4 0241 FF80                  		andi.w	#$FF80,d1
0000C2A8 9041                       		sub.w	d1,d0
0000C2AA 0C40 0280                  		cmpi.w	#$280,d0
0000C2AE 6200                       		bhi.s	loc_C016
0000C2B0 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C2B6 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C2BC 117C 0004 0024             		move.b	#4,$24(a0)
0000C2C2 6000                       		bra.s	loc_C02C
0000C2C4                            ; ===========================================================================
0000C2C4                            
0000C2C4                            loc_C016:
0000C2C4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C2C8 7000                       		moveq	#0,d0
0000C2CA 1028 0023                  		move.b	$23(a0),d0
0000C2CE 6700                       		beq.s	loc_C028
0000C2D0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C2D6                            
0000C2D6                            loc_C028:
0000C2D6 6000 0000                  		bra.w	DeleteObject
0000C2DA                            ; ===========================================================================
0000C2DA                            
0000C2DA                            loc_C02C:				; XREF: Obj33_Index
0000C2DA 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C2DE 6700                       		beq.s	locret_C044
0000C2E0 117C 0002 0024             		move.b	#2,$24(a0)
0000C2E6 4228 0032                  		clr.b	$32(a0)
0000C2EA 4268 0010                  		clr.w	$10(a0)
0000C2EE 4268 0012                  		clr.w	$12(a0)
0000C2F2                            
0000C2F2                            locret_C044:
0000C2F2 4E75                       		rts	
0000C2F4                            ; ===========================================================================
0000C2F4                            
0000C2F4                            loc_C046:				; XREF: loc_BF6E
0000C2F4 3F28 0008                  		move.w	8(a0),-(sp)
0000C2F8 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C2FE 6400                       		bcc.s	loc_C056
0000C300 6100 0000                  		bsr.w	SpeedToPos
0000C304                            
0000C304                            loc_C056:
0000C304 0828 0001 0022             		btst	#1,$22(a0)
0000C30A 6700                       		beq.s	loc_C0A0
0000C30C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C312 4EB9 0000 0000             		jsr	ObjHitFloor
0000C318 4A41                       		tst.w	d1
0000C31A 6A00 0000                  		bpl.w	loc_C09E
0000C31E D368 000C                  		add.w	d1,$C(a0)
0000C322 4268 0012                  		clr.w	$12(a0)
0000C326 08A8 0001 0022             		bclr	#1,$22(a0)
0000C32C 3011                       		move.w	(a1),d0
0000C32E 0240 03FF                  		andi.w	#$3FF,d0
0000C332 0C40 016A                  		cmpi.w	#$16A,d0
0000C336 6500                       		bcs.s	loc_C09E
0000C338 3028 0030                  		move.w	$30(a0),d0
0000C33C E640                       		asr.w	#3,d0
0000C33E 3140 0010                  		move.w	d0,$10(a0)
0000C342 117C 0001 0032             		move.b	#1,$32(a0)
0000C348 4268 000E                  		clr.w	$E(a0)
0000C34C                            
0000C34C                            loc_C09E:
0000C34C 6000                       		bra.s	loc_C0E6
0000C34E                            ; ===========================================================================
0000C34E                            
0000C34E                            loc_C0A0:
0000C34E 4A68 0010                  		tst.w	$10(a0)
0000C352 6700 0000                  		beq.w	loc_C0D6
0000C356 6B00                       		bmi.s	loc_C0BC
0000C358 7600                       		moveq	#0,d3
0000C35A 1628 0019                  		move.b	$19(a0),d3
0000C35E 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C364 4A41                       		tst.w	d1		; has block touched a wall?
0000C366 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C368 6000                       		bra.s	loc_C0E6
0000C36A                            ; ===========================================================================
0000C36A                            
0000C36A                            loc_C0BC:
0000C36A 7600                       		moveq	#0,d3
0000C36C 1628 0019                  		move.b	$19(a0),d3
0000C370 4643                       		not.w	d3
0000C372 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C378 4A41                       		tst.w	d1		; has block touched a wall?
0000C37A 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C37C 6000                       		bra.s	loc_C0E6
0000C37E                            ; ===========================================================================
0000C37E                            
0000C37E                            Obj33_StopPush:
0000C37E 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C382 6000                       		bra.s	loc_C0E6
0000C384                            ; ===========================================================================
0000C384                            
0000C384                            loc_C0D6:
0000C384 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C38C 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C392 6400                       		bcc.s	loc_C104
0000C394                            
0000C394                            loc_C0E6:
0000C394 7200                       		moveq	#0,d1
0000C396 1228 0019                  		move.b	$19(a0),d1
0000C39A 0641 000B                  		addi.w	#$B,d1
0000C39E 343C 0010                  		move.w	#$10,d2
0000C3A2 363C 0011                  		move.w	#$11,d3
0000C3A6 381F                       		move.w	(sp)+,d4
0000C3A8 6100 0000                  		bsr.w	loc_C186
0000C3AC 6100                       		bsr.s	Obj33_ChkLava
0000C3AE 6000 FEC4                  		bra.w	loc_BFC6
0000C3B2                            ; ===========================================================================
0000C3B2                            
0000C3B2                            loc_C104:
0000C3B2 381F                       		move.w	(sp)+,d4
0000C3B4 43F8 D000                  		lea	($FFFFD000).w,a1
0000C3B8 08A9 0003 0022             		bclr	#3,$22(a1)
0000C3BE 08A8 0003 0022             		bclr	#3,$22(a0)
0000C3C4 6000 FECE                  		bra.w	loc_BFE6
0000C3C8                            ; ===========================================================================
0000C3C8                            
0000C3C8                            Obj33_ChkLava:
0000C3C8 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C3CE 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C3D0 343C FFE0                  		move.w	#-$20,d2
0000C3D4 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C3DA 6700                       		beq.s	Obj33_LoadLava
0000C3DC 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C3E2 6700                       		beq.s	Obj33_LoadLava
0000C3E4 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C3EA 6700                       		beq.s	Obj33_LoadLava
0000C3EC 4E75                       		rts	
0000C3EE                            ; ===========================================================================
0000C3EE                            
0000C3EE                            Obj33_ChkLava2:
0000C3EE 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C3F4 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C3F6 343C 0020                  		move.w	#$20,d2
0000C3FA 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C400 6700                       		beq.s	Obj33_LoadLava
0000C402 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C408 6700                       		beq.s	Obj33_LoadLava
0000C40A                            
0000C40A                            Obj33_NoLava:
0000C40A 4E75                       		rts	
0000C40C                            ; ===========================================================================
0000C40C                            
0000C40C                            Obj33_LoadLava:
0000C40C 6100 0000                  		bsr.w	SingleObjLoad
0000C410 6600                       		bne.s	locret_C184
0000C412 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C416 3368 0008 0008             		move.w	8(a0),8(a1)
0000C41C D569 0008                  		add.w	d2,8(a1)
0000C420 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C426 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C42C 2348 003C                  		move.l	a0,$3C(a1)
0000C430                            
0000C430                            locret_C184:
0000C430 4E75                       		rts	
0000C432                            ; ===========================================================================
0000C432                            
0000C432                            loc_C186:				; XREF: loc_BF6E
0000C432 1028 0025                  		move.b	$25(a0),d0
0000C436 6700 0000                  		beq.w	loc_C218
0000C43A 5500                       		subq.b	#2,d0
0000C43C 6600                       		bne.s	loc_C1AA
0000C43E 6100 B4A8                  		bsr.w	ExitPlatform
0000C442 0829 0003 0022             		btst	#3,$22(a1)
0000C448 6600                       		bne.s	loc_C1A4
0000C44A 4228 0025                  		clr.b	$25(a0)
0000C44E 4E75                       		rts	
0000C450                            ; ===========================================================================
0000C450                            
0000C450                            loc_C1A4:
0000C450 3404                       		move.w	d4,d2
0000C452 6000 B9F2                  		bra.w	MvSonicOnPtfm
0000C456                            ; ===========================================================================
0000C456                            
0000C456                            loc_C1AA:
0000C456 5500                       		subq.b	#2,d0
0000C458 6600                       		bne.s	loc_C1F2
0000C45A 6100 0000                  		bsr.w	SpeedToPos
0000C45E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C464 4EB9 0000 0000             		jsr	ObjHitFloor
0000C46A 4A41                       		tst.w	d1
0000C46C 6A00 0000                  		bpl.w	locret_C1F0
0000C470 D368 000C                  		add.w	d1,$C(a0)
0000C474 4268 0012                  		clr.w	$12(a0)
0000C478 4228 0025                  		clr.b	$25(a0)
0000C47C 3011                       		move.w	(a1),d0
0000C47E 0240 03FF                  		andi.w	#$3FF,d0
0000C482 0C40 016A                  		cmpi.w	#$16A,d0
0000C486 6500                       		bcs.s	locret_C1F0
0000C488 3028 0030                  		move.w	$30(a0),d0
0000C48C E640                       		asr.w	#3,d0
0000C48E 3140 0010                  		move.w	d0,$10(a0)
0000C492 117C 0001 0032             		move.b	#1,$32(a0)
0000C498 4268 000E                  		clr.w	$E(a0)
0000C49C                            
0000C49C                            locret_C1F0:
0000C49C 4E75                       		rts	
0000C49E                            ; ===========================================================================
0000C49E                            
0000C49E                            loc_C1F2:
0000C49E 6100 0000                  		bsr.w	SpeedToPos
0000C4A2 3028 0008                  		move.w	8(a0),d0
0000C4A6 0240 000C                  		andi.w	#$C,d0
0000C4AA 6600 0000                  		bne.w	locret_C2E4
0000C4AE 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C4B4 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C4BA 4268 0010                  		clr.w	$10(a0)
0000C4BE 5528 0025                  		subq.b	#2,$25(a0)
0000C4C2 4E75                       		rts	
0000C4C4                            ; ===========================================================================
0000C4C4                            
0000C4C4                            loc_C218:
0000C4C4 6100 0000                  		bsr.w	loc_FAC8
0000C4C8 4A44                       		tst.w	d4
0000C4CA 6700 0000                  		beq.w	locret_C2E4
0000C4CE 6B00 0000                  		bmi.w	locret_C2E4
0000C4D2 4A28 0032                  		tst.b	$32(a0)
0000C4D6 6700                       		beq.s	loc_C230
0000C4D8 6000 0000                  		bra.w	locret_C2E4
0000C4DC                            ; ===========================================================================
0000C4DC                            
0000C4DC                            loc_C230:
0000C4DC 4A40                       		tst.w	d0
0000C4DE 6700 0000                  		beq.w	locret_C2E4
0000C4E2 6B00                       		bmi.s	loc_C268
0000C4E4 0829 0000 0022             		btst	#0,$22(a1)
0000C4EA 6600 0000                  		bne.w	locret_C2E4
0000C4EE 3F00                       		move.w	d0,-(sp)
0000C4F0 7600                       		moveq	#0,d3
0000C4F2 1628 0019                  		move.b	$19(a0),d3
0000C4F6 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C4FC 301F                       		move.w	(sp)+,d0
0000C4FE 4A41                       		tst.w	d1
0000C500 6B00 0000                  		bmi.w	locret_C2E4
0000C504 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C50C 7001                       		moveq	#1,d0
0000C50E 323C 0040                  		move.w	#$40,d1
0000C512 6000                       		bra.s	loc_C294
0000C514                            ; ===========================================================================
0000C514                            
0000C514                            loc_C268:
0000C514 0829 0000 0022             		btst	#0,$22(a1)
0000C51A 6700                       		beq.s	locret_C2E4
0000C51C 3F00                       		move.w	d0,-(sp)
0000C51E 7600                       		moveq	#0,d3
0000C520 1628 0019                  		move.b	$19(a0),d3
0000C524 4643                       		not.w	d3
0000C526 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C52C 301F                       		move.w	(sp)+,d0
0000C52E 4A41                       		tst.w	d1
0000C530 6B00                       		bmi.s	locret_C2E4
0000C532 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C53A 70FF                       		moveq	#-1,d0
0000C53C 323C FFC0                  		move.w	#-$40,d1
0000C540                            
0000C540                            loc_C294:
0000C540 43F8 D000                  		lea	($FFFFD000).w,a1
0000C544 D169 0008                  		add.w	d0,8(a1)
0000C548 3341 0014                  		move.w	d1,$14(a1)
0000C54C 337C 0000 0010             		move.w	#0,$10(a1)
0000C552 3F00                       		move.w	d0,-(sp)
0000C554 303C 00A7                  		move.w	#$A7,d0
0000C558 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C55E 301F                       		move.w	(sp)+,d0
0000C560 4A28 0028                  		tst.b	$28(a0)
0000C564 6B00                       		bmi.s	locret_C2E4
0000C566 3F00                       		move.w	d0,-(sp)
0000C568 4EB9 0000 0000             		jsr	ObjHitFloor
0000C56E 301F                       		move.w	(sp)+,d0
0000C570 0C41 0004                  		cmpi.w	#4,d1
0000C574 6F00                       		ble.s	loc_C2E0
0000C576 317C 0400 0010             		move.w	#$400,$10(a0)
0000C57C 4A40                       		tst.w	d0
0000C57E 6A00                       		bpl.s	loc_C2D8
0000C580 4468 0010                  		neg.w	$10(a0)
0000C584                            
0000C584                            loc_C2D8:
0000C584 117C 0006 0025             		move.b	#6,$25(a0)
0000C58A 6000                       		bra.s	locret_C2E4
0000C58C                            ; ===========================================================================
0000C58C                            
0000C58C                            loc_C2E0:
0000C58C D368 000C                  		add.w	d1,$C(a0)
0000C590                            
0000C590                            locret_C2E4:
0000C590 4E75                       		rts	
0000C592                            ; ===========================================================================
0000C592                            ; ---------------------------------------------------------------------------
0000C592                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C592                            ; ---------------------------------------------------------------------------
0000C592                            Map_obj33:
0000C592                            	include "_maps\obj33.asm"
0000C592                            ; ---------------------------------------------------------------------------
0000C592                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C592                            ; ---------------------------------------------------------------------------
0000C592 0000                       		dc.w byte_C2EA-Map_obj33
0000C594 0000                       		dc.w byte_C2F0-Map_obj33
0000C596 01                         byte_C2EA:	dc.b 1
0000C597 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C59C 04                         byte_C2F0:	dc.b 4
0000C59D F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C5A2 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C5A7 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C5AC F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C5B2 00                         		even
0000C5B2 00                         		even
0000C5B2                            
0000C5B2                            ; ===========================================================================
0000C5B2                            ; ---------------------------------------------------------------------------
0000C5B2                            ; Object 34 - zone title cards
0000C5B2                            ; ---------------------------------------------------------------------------
0000C5B2                            
0000C5B2                            Obj34:					; XREF: Obj_Index
0000C5B2 7000                       		moveq	#0,d0
0000C5B4 1028 0024                  		move.b	$24(a0),d0
0000C5B8 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C5BC 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C5C0                            ; ===========================================================================
0000C5C0 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C5C2 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C5C4 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C5C6 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C5C8                            ; ===========================================================================
0000C5C8                            
0000C5C8                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C5C8 2248                       		movea.l	a0,a1
0000C5CA 7000                       		moveq	#0,d0
0000C5CC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C5D0 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C5D6 6600                       		bne.s	Obj34_CheckFZ
0000C5D8 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C5DA                            
0000C5DA                            Obj34_CheckFZ:
0000C5DA 3400                       		move.w	d0,d2
0000C5DC 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C5E2 6600                       		bne.s	Obj34_LoadConfig
0000C5E4 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C5E6 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C5E8                            
0000C5E8                            Obj34_LoadConfig:
0000C5E8 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C5EE E948                       		lsl.w	#4,d0
0000C5F0 D6C0                       		adda.w	d0,a3
0000C5F2 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C5F8 7203                       		moveq	#3,d1
0000C5FA                            
0000C5FA                            Obj34_Loop:
0000C5FA 12BC 0034                  		move.b	#$34,0(a1)
0000C5FE 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C602 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C606 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C60A 335A 000A                  		move.w	(a2)+,$A(a1)
0000C60E 135A 0024                  		move.b	(a2)+,$24(a1)
0000C612 101A                       		move.b	(a2)+,d0
0000C614 6600                       		bne.s	Obj34_ActNumber
0000C616 1002                       		move.b	d2,d0
0000C618                            
0000C618                            Obj34_ActNumber:
0000C618 0C00 0007                  		cmpi.b	#7,d0
0000C61C 6600                       		bne.s	Obj34_MakeSprite
0000C61E D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C622 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C628 6600                       		bne.s	Obj34_MakeSprite
0000C62A 5300                       		subq.b	#1,d0
0000C62C                            
0000C62C                            Obj34_MakeSprite:
0000C62C 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C630 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C638 337C 8580 0002             		move.w	#$8580,2(a1)
0000C63E 137C 0078 0019             		move.b	#$78,$19(a1)
0000C644 137C 0000 0001             		move.b	#0,1(a1)
0000C64A 137C 0000 0018             		move.b	#0,$18(a1)
0000C650 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C656 43E9 0040                  		lea	$40(a1),a1	; next object
0000C65A 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C65E                            
0000C65E                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C65E 7210                       		moveq	#$10,d1		; set horizontal speed
0000C660 3028 0030                  		move.w	$30(a0),d0
0000C664 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C668 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C66A 6C00                       		bge.s	Obj34_Move
0000C66C 4441                       		neg.w	d1
0000C66E                            
0000C66E                            Obj34_Move:
0000C66E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C672                            
0000C672                            loc_C3C8:
0000C672 3028 0008                  		move.w	8(a0),d0
0000C676 6B00                       		bmi.s	locret_C3D8
0000C678 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C67C 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C67E 6000 0000                  		bra.w	DisplaySprite
0000C682                            ; ===========================================================================
0000C682                            
0000C682                            locret_C3D8:
0000C682 4E75                       		rts	
0000C684                            ; ===========================================================================
0000C684                            
0000C684                            Obj34_Wait:				; XREF: Obj34_Index
0000C684 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C688 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C68A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C68E 6000 0000                  		bra.w	DisplaySprite
0000C692                            ; ===========================================================================
0000C692                            
0000C692                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C692 4A28 0001                  		tst.b	1(a0)
0000C696 6A00                       		bpl.s	Obj34_ChangeArt
0000C698 7220                       		moveq	#$20,d1
0000C69A 3028 0032                  		move.w	$32(a0),d0
0000C69E B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C6A2 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C6A4 6C00                       		bge.s	Obj34_Move2
0000C6A6 4441                       		neg.w	d1
0000C6A8                            
0000C6A8                            Obj34_Move2:
0000C6A8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C6AC 3028 0008                  		move.w	8(a0),d0
0000C6B0 6B00                       		bmi.s	locret_C412
0000C6B2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C6B6 6400                       		bcc.s	locret_C412	; if yes, branch
0000C6B8 6000 0000                  		bra.w	DisplaySprite
0000C6BC                            ; ===========================================================================
0000C6BC                            
0000C6BC                            locret_C412:
0000C6BC 4E75                       		rts	
0000C6BE                            ; ===========================================================================
0000C6BE                            
0000C6BE                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C6BE 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C6C4 6600                       		bne.s	Obj34_Delete
0000C6C6 7002                       		moveq	#2,d0
0000C6C8 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
0000C6CE 7000                       		moveq	#0,d0
0000C6D0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C6D4 0640 0015                  		addi.w	#$15,d0
0000C6D8 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns
0000C6DE                            
0000C6DE                            Obj34_Delete:
0000C6DE 6000 0000                  		bra.w	DeleteObject
0000C6E2                            ; ===========================================================================
0000C6E2 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C6E4 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C6E6 00E4                       		dc.w $E4
0000C6E8 0206                       		dc.b 2,	6
0000C6EA 00EA                       		dc.w $EA
0000C6EC 0207                       		dc.b 2,	7
0000C6EE 00E0                       		dc.w $E0
0000C6F0 020A                       		dc.b 2,	$A
0000C6F2                            ; ---------------------------------------------------------------------------
0000C6F2                            ; Title	card configuration data
0000C6F2                            ; Format:
0000C6F2                            ; 4 bytes per item (YYYY XXXX)
0000C6F2                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C6F2                            ; ---------------------------------------------------------------------------
0000C6F2 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C702 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C712 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C722 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C732 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C742 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C752 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C762                            ; ===========================================================================
0000C762                            ; ---------------------------------------------------------------------------
0000C762                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C762                            ; ---------------------------------------------------------------------------
0000C762                            
0000C762                            Obj39:					; XREF: Obj_Index
0000C762 7000                       		moveq	#0,d0
0000C764 1028 0024                  		move.b	$24(a0),d0
0000C768 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C76C 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C770                            ; ===========================================================================
0000C770 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C772 0000                       		dc.w loc_C50C-Obj39_Index
0000C774 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C776                            ; ===========================================================================
0000C776                            
0000C776                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C776 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C77A 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C77C 4E75                       		rts	
0000C77E                            ; ===========================================================================
0000C77E                            
0000C77E                            Obj39_Main:
0000C77E 5428 0024                  		addq.b	#2,$24(a0)
0000C782 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C788 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C78E 6700                       		beq.s	loc_C4EC	; if not, branch
0000C790 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C796                            
0000C796                            loc_C4EC:
0000C796 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C79C 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C7A4 317C 855E 0002             		move.w	#$855E,2(a0)
0000C7AA 117C 0000 0001             		move.b	#0,1(a0)
0000C7B0 117C 0000 0018             		move.b	#0,$18(a0)
0000C7B6                            
0000C7B6                            loc_C50C:				; XREF: Obj39_Index
0000C7B6 7210                       		moveq	#$10,d1		; set horizontal speed
0000C7B8 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000C7BE 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000C7C0 6500                       		bcs.s	Obj39_Move
0000C7C2 4441                       		neg.w	d1
0000C7C4                            
0000C7C4                            Obj39_Move:
0000C7C4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C7C8 6000 0000                  		bra.w	DisplaySprite
0000C7CC                            ; ===========================================================================
0000C7CC                            
0000C7CC                            Obj39_SetWait:				; XREF: Obj39_Main
0000C7CC 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000C7D2 5428 0024                  		addq.b	#2,$24(a0)
0000C7D6 4E75                       		rts	
0000C7D8                            ; ===========================================================================
0000C7D8                            
0000C7D8                            Obj39_Wait:				; XREF: Obj39_Index
0000C7D8 1038 F605                  		move.b	($FFFFF605).w,d0
0000C7DC 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000C7E0 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000C7E2 0828 0000 001A             		btst	#0,$1A(a0)
0000C7E8 6600                       		bne.s	Obj39_Display
0000C7EA 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000C7EE 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000C7F0 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C7F4 6000 0000                  		bra.w	DisplaySprite
0000C7F8                            ; ===========================================================================
0000C7F8                            
0000C7F8                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000C7F8 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000C7FC 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000C7FE 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000C804 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000C808 6600                       		bne.s	Obj39_Display	; if yes, branch
0000C80A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000C810 6000                       		bra.s	Obj39_Display
0000C812                            ; ===========================================================================
0000C812                            
0000C812                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000C812 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C818                            
0000C818                            Obj39_Display:				; XREF: Obj39_ChgMode
0000C818 6000 0000                  		bra.w	DisplaySprite
0000C81C                            ; ===========================================================================
0000C81C                            ; ---------------------------------------------------------------------------
0000C81C                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000C81C                            ; ---------------------------------------------------------------------------
0000C81C                            
0000C81C                            Obj3A:					; XREF: Obj_Index
0000C81C 7000                       		moveq	#0,d0
0000C81E 1028 0024                  		move.b	$24(a0),d0
0000C822 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000C826 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000C82A                            ; ===========================================================================
0000C82A 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000C82C 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000C82E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C830 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000C832 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C834 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000C836 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C838 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000C83A 0000                       		dc.w loc_C766-Obj3A_Index
0000C83C                            ; ===========================================================================
0000C83C                            
0000C83C                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000C83C 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C840 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000C842 4E75                       		rts	
0000C844                            ; ===========================================================================
0000C844                            
0000C844                            Obj3A_Main:
0000C844 2248                       		movea.l	a0,a1
0000C846 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000C84C 7206                       		moveq	#6,d1
0000C84E                            
0000C84E                            Obj3A_Loop:
0000C84E 12BC 003A                  		move.b	#$3A,0(a1)
0000C852 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000C856 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000C85A 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C85E 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C862 135A 0024                  		move.b	(a2)+,$24(a1)
0000C866 101A                       		move.b	(a2)+,d0
0000C868 0C00 0006                  		cmpi.b	#6,d0
0000C86C 6600                       		bne.s	loc_C5CA
0000C86E D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000C872                            
0000C872                            loc_C5CA:
0000C872 1340 001A                  		move.b	d0,$1A(a1)
0000C876 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000C87E 337C 8580 0002             		move.w	#$8580,2(a1)
0000C884 137C 0000 0001             		move.b	#0,1(a1)
0000C88A 43E9 0040                  		lea	$40(a1),a1
0000C88E 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000C892                            
0000C892                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000C892 7210                       		moveq	#$10,d1		; set horizontal speed
0000C894 3028 0030                  		move.w	$30(a0),d0
0000C898 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C89C 6700                       		beq.s	loc_C61A	; if yes, branch
0000C89E 6C00                       		bge.s	Obj3A_Move
0000C8A0 4441                       		neg.w	d1
0000C8A2                            
0000C8A2                            Obj3A_Move:
0000C8A2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C8A6                            
0000C8A6                            loc_C5FE:				; XREF: loc_C61A
0000C8A6 3028 0008                  		move.w	8(a0),d0
0000C8AA 6B00                       		bmi.s	locret_C60E
0000C8AC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C8B0 6400                       		bcc.s	locret_C60E	; if yes, branch
0000C8B2 6000 0000                  		bra.w	DisplaySprite
0000C8B6                            ; ===========================================================================
0000C8B6                            
0000C8B6                            locret_C60E:
0000C8B6 4E75                       		rts	
0000C8B8                            ; ===========================================================================
0000C8B8                            
0000C8B8                            loc_C610:				; XREF: loc_C61A
0000C8B8 117C 000E 0024             		move.b	#$E,$24(a0)
0000C8BE 6000 0000                  		bra.w	Obj3A_ChkPos2
0000C8C2                            ; ===========================================================================
0000C8C2                            
0000C8C2                            loc_C61A:				; XREF: Obj3A_ChkPos
0000C8C2 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000C8C8 67EE                       		beq.s	loc_C610
0000C8CA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C8D0 66D4                       		bne.s	loc_C5FE
0000C8D2 5428 0024                  		addq.b	#2,$24(a0)
0000C8D6 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C8DC                            
0000C8DC                            Obj3A_Wait:				; XREF: Obj3A_Index
0000C8DC 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C8E0 6600                       		bne.s	Obj3A_Display
0000C8E2 5428 0024                  		addq.b	#2,$24(a0)
0000C8E6                            
0000C8E6                            Obj3A_Display:
0000C8E6 6000 0000                  		bra.w	DisplaySprite
0000C8EA                            ; ===========================================================================
0000C8EA                            
0000C8EA                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000C8EA 6100 0000                  		bsr.w	DisplaySprite
0000C8EE 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000C8F4 7000                       		moveq	#0,d0
0000C8F6 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000C8FA 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000C8FC 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C900 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000C906                            
0000C906                            Obj3A_RingBonus:
0000C906 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C90A 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000C90C 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C910 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C916                            
0000C916                            Obj3A_ChkBonus:
0000C916 4A40                       		tst.w	d0		; is there any bonus?
0000C918 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000C91A 303C 00C5                  		move.w	#$C5,d0
0000C91E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C924 5428 0024                  		addq.b	#2,$24(a0)
0000C928 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000C92E 6600                       		bne.s	Obj3A_SetDelay
0000C930 5828 0024                  		addq.b	#4,$24(a0)
0000C934                            
0000C934                            Obj3A_SetDelay:
0000C934 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C93A                            
0000C93A                            locret_C692:
0000C93A 4E75                       		rts	
0000C93C                            ; ===========================================================================
0000C93C                            
0000C93C                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000C93C 4EB9 0000 0000             		jsr	AddPoints
0000C942 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C946 0200 0003                  		andi.b	#3,d0
0000C94A 66EE                       		bne.s	locret_C692
0000C94C 303C 00CD                  		move.w	#$CD,d0
0000C950 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C956                            ; ===========================================================================
0000C956                            
0000C956                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000C956 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C95A 0240 0007                  		andi.w	#7,d0
0000C95E E748                       		lsl.w	#3,d0
0000C960 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000C964 0241 0003                  		andi.w	#3,d1
0000C968 D241                       		add.w	d1,d1
0000C96A D041                       		add.w	d1,d0
0000C96C 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000C970 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000C974 4A40                       		tst.w	d0
0000C976 6600                       		bne.s	Obj3A_ChkSS
0000C978 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000C97E 6000                       		bra.s	Obj3A_Display2
0000C980                            ; ===========================================================================
0000C980                            
0000C980                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000C980 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000C984 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000C988 6700                       		beq.s	loc_C6EA	; if not, branch
0000C98A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000C990 6000                       		bra.s	Obj3A_Display2
0000C992                            ; ===========================================================================
0000C992                            
0000C992                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000C992 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C998                            
0000C998                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000C998 6000 0000                  		bra.w	DisplaySprite
0000C99C                            ; ===========================================================================
0000C99C                            ; ---------------------------------------------------------------------------
0000C99C                            ; Level	order array
0000C99C                            ; ---------------------------------------------------------------------------
0000C99C                            LevelOrder:	incbin	misc\lvl_ord.bin
0000C9CC                            		even
0000C9CC                            ; ===========================================================================
0000C9CC                            
0000C9CC                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000C9CC 7220                       		moveq	#$20,d1		; set horizontal speed
0000C9CE 3028 0032                  		move.w	$32(a0),d0
0000C9D2 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000C9D6 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000C9D8 6C00                       		bge.s	Obj3A_Move2
0000C9DA 4441                       		neg.w	d1
0000C9DC                            
0000C9DC                            Obj3A_Move2:
0000C9DC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C9E0 3028 0008                  		move.w	8(a0),d0
0000C9E4 6B00                       		bmi.s	locret_C748
0000C9E6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C9EA 6400                       		bcc.s	locret_C748	; if yes, branch
0000C9EC 6000 0000                  		bra.w	DisplaySprite
0000C9F0                            ; ===========================================================================
0000C9F0                            
0000C9F0                            locret_C748:
0000C9F0 4E75                       		rts	
0000C9F2                            ; ===========================================================================
0000C9F2                            
0000C9F2                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000C9F2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C9F8 6600 0000                  		bne.w	DeleteObject
0000C9FC 5428 0024                  		addq.b	#2,$24(a0)
0000CA00 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CA04 303C 008D                  		move.w	#$8D,d0
0000CA08 4EF9 0000 15B6             		jmp	(PlaySound).l	; play FZ music
0000CA0E                            ; ===========================================================================
0000CA0E                            
0000CA0E                            loc_C766:				; XREF: Obj3A_Index
0000CA0E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CA12 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CA18 6700 0000                  		beq.w	DeleteObject
0000CA1C 4E75                       		rts	
0000CA1E                            ; ===========================================================================
0000CA1E 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CA24 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CA26 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CA2C 0201                       		dc.b 2,	1
0000CA2E 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CA34 0206                       		dc.b 2,	6
0000CA36 0520 0120 00EC             		dc.w $520, $120, $EC
0000CA3C 0202                       		dc.b 2,	2
0000CA3E 0540 0120 00FC             		dc.w $540, $120, $FC
0000CA44 0203                       		dc.b 2,	3
0000CA46 0560 0120 010C             		dc.w $560, $120, $10C
0000CA4C 0204                       		dc.b 2,	4
0000CA4E 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CA54 0205                       		dc.b 2,	5
0000CA56                            ; ===========================================================================
0000CA56                            ; ---------------------------------------------------------------------------
0000CA56                            ; Object 7E - special stage results screen
0000CA56                            ; ---------------------------------------------------------------------------
0000CA56                            
0000CA56                            Obj7E:					; XREF: Obj_Index
0000CA56 7000                       		moveq	#0,d0
0000CA58 1028 0024                  		move.b	$24(a0),d0
0000CA5C 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CA60 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CA64                            ; ===========================================================================
0000CA64 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CA66 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CA68 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CA6A 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CA6C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CA6E 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CA70 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CA72 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CA74 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CA76 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CA78 0000                       		dc.w loc_C91A-Obj7E_Index
0000CA7A                            ; ===========================================================================
0000CA7A                            
0000CA7A                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CA7A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CA7E 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CA80 4E75                       		rts	
0000CA82                            ; ===========================================================================
0000CA82                            
0000CA82                            Obj7E_Main:
0000CA82 2248                       		movea.l	a0,a1
0000CA84 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CA8A 7203                       		moveq	#3,d1
0000CA8C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CA92 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CA94 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CA96                            
0000CA96                            Obj7E_Loop:
0000CA96 12BC 007E                  		move.b	#$7E,0(a1)
0000CA9A 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CA9E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CAA2 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CAA6 135A 0024                  		move.b	(a2)+,$24(a1)
0000CAAA 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CAAE 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CAB6 337C 8580 0002             		move.w	#$8580,2(a1)
0000CABC 137C 0000 0001             		move.b	#0,1(a1)
0000CAC2 43E9 0040                  		lea	$40(a1),a1
0000CAC6 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CACA                            
0000CACA 7007                       		moveq	#7,d0
0000CACC 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CAD0 6700                       		beq.s	loc_C842
0000CAD2 7000                       		moveq	#0,d0
0000CAD4 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CAD8 6600                       		bne.s	loc_C842	; if not, branch
0000CADA 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CADC 317C 0018 0008             		move.w	#$18,8(a0)
0000CAE2 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CAE8                            
0000CAE8                            loc_C842:
0000CAE8 1140 001A                  		move.b	d0,$1A(a0)
0000CAEC                            
0000CAEC                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CAEC 7210                       		moveq	#$10,d1		; set horizontal speed
0000CAEE 3028 0030                  		move.w	$30(a0),d0
0000CAF2 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CAF6 6700                       		beq.s	loc_C86C	; if yes, branch
0000CAF8 6C00                       		bge.s	Obj7E_Move
0000CAFA 4441                       		neg.w	d1
0000CAFC                            
0000CAFC                            Obj7E_Move:
0000CAFC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB00                            
0000CB00                            loc_C85A:				; XREF: loc_C86C
0000CB00 3028 0008                  		move.w	8(a0),d0
0000CB04 6B00                       		bmi.s	locret_C86A
0000CB06 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB0A 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CB0C 6000 0000                  		bra.w	DisplaySprite
0000CB10                            ; ===========================================================================
0000CB10                            
0000CB10                            locret_C86A:
0000CB10 4E75                       		rts	
0000CB12                            ; ===========================================================================
0000CB12                            
0000CB12                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CB12 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CB18 66E6                       		bne.s	loc_C85A
0000CB1A 5428 0024                  		addq.b	#2,$24(a0)
0000CB1E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB24 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CB2A                            
0000CB2A                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CB2A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CB2E 6600                       		bne.s	Obj7E_Display
0000CB30 5428 0024                  		addq.b	#2,$24(a0)
0000CB34                            
0000CB34                            Obj7E_Display:
0000CB34 6000 0000                  		bra.w	DisplaySprite
0000CB38                            ; ===========================================================================
0000CB38                            
0000CB38                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CB38 6100 0000                  		bsr.w	DisplaySprite
0000CB3C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CB42 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CB46 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CB48 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CB4E 700A                       		moveq	#10,d0		; add 10 to score
0000CB50 4EB9 0000 0000             		jsr	AddPoints
0000CB56 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CB5A 0200 0003                  		andi.b	#3,d0
0000CB5E 6600                       		bne.s	locret_C8EA
0000CB60 303C 00CD                  		move.w	#$CD,d0
0000CB64 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CB6A                            ; ===========================================================================
0000CB6A                            
0000CB6A                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CB6A 303C 00C5                  		move.w	#$C5,d0
0000CB6E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CB74 5428 0024                  		addq.b	#2,$24(a0)
0000CB78 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB7E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CB84 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CB86 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CB8C 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CB90                            
0000CB90                            locret_C8EA:
0000CB90 4E75                       		rts	
0000CB92                            ; ===========================================================================
0000CB92                            
0000CB92                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CB92 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CB98 6000 0000                  		bra.w	DisplaySprite
0000CB9C                            ; ===========================================================================
0000CB9C                            
0000CB9C                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CB9C 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CBA2 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CBA8 303C 00BF                  		move.w	#$BF,d0
0000CBAC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play continues music
0000CBB2 5428 0024                  		addq.b	#2,$24(a0)
0000CBB6 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CBBC 6000 0000                  		bra.w	DisplaySprite
0000CBC0                            ; ===========================================================================
0000CBC0                            
0000CBC0                            loc_C91A:				; XREF: Obj7E_Index
0000CBC0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CBC4 0200 000F                  		andi.b	#$F,d0
0000CBC8 6600                       		bne.s	Obj7E_Display2
0000CBCA 0868 0000 001A             		bchg	#0,$1A(a0)
0000CBD0                            
0000CBD0                            Obj7E_Display2:
0000CBD0 6000 0000                  		bra.w	DisplaySprite
0000CBD4                            ; ===========================================================================
0000CBD4 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CBDA 0200                       		dc.b 2,	0		; rountine number, frame number
0000CBDC 0320 0120 0118             		dc.w $320, $120, $118
0000CBE2 0201                       		dc.b 2,	1
0000CBE4 0360 0120 0128             		dc.w $360, $120, $128
0000CBEA 0202                       		dc.b 2,	2
0000CBEC 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CBF2 0203                       		dc.b 2,	3
0000CBF4 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CBFA 0206                       		dc.b 2,	6
0000CBFC                            ; ===========================================================================
0000CBFC                            ; ---------------------------------------------------------------------------
0000CBFC                            ; Object 7F - chaos emeralds from the special stage results screen
0000CBFC                            ; ---------------------------------------------------------------------------
0000CBFC                            
0000CBFC                            Obj7F:					; XREF: Obj_Index
0000CBFC 7000                       		moveq	#0,d0
0000CBFE 1028 0024                  		move.b	$24(a0),d0
0000CC02 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CC06 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CC0A                            ; ===========================================================================
0000CC0A 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CC0C 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CC0E                            
0000CC0E                            ; ---------------------------------------------------------------------------
0000CC0E                            ; X-axis positions for chaos emeralds
0000CC0E                            ; ---------------------------------------------------------------------------
0000CC0E 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CC1A                            ; ===========================================================================
0000CC1A                            
0000CC1A                            Obj7F_Main:				; XREF: Obj7F_Index
0000CC1A 2248                       		movea.l	a0,a1
0000CC1C 45F9 0000 CC0E             		lea	(Obj7F_PosData).l,a2
0000CC22 7400                       		moveq	#0,d2
0000CC24 7200                       		moveq	#0,d1
0000CC26 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CC2A 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CC2C 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CC30                            
0000CC30                            Obj7F_Loop:
0000CC30 12BC 007F                  		move.b	#$7F,0(a1)
0000CC34 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CC38 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CC3E 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CC42 1633 2000                  		move.b	(a3,d2.w),d3
0000CC46 1343 001A                  		move.b	d3,$1A(a1)
0000CC4A 1343 001C                  		move.b	d3,$1C(a1)
0000CC4E 5202                       		addq.b	#1,d2
0000CC50 5429 0024                  		addq.b	#2,$24(a1)
0000CC54 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CC5C 337C 8541 0002             		move.w	#$8541,2(a1)
0000CC62 137C 0000 0001             		move.b	#0,1(a1)
0000CC68 43E9 0040                  		lea	$40(a1),a1	; next object
0000CC6C 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CC70                            
0000CC70                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CC70 1028 001A                  		move.b	$1A(a0),d0
0000CC74 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CC7A 0C00 0006                  		cmpi.b	#6,d0
0000CC7E 6600                       		bne.s	Obj7F_Display
0000CC80 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CC86                            
0000CC86                            Obj7F_Display:
0000CC86 6000 0000                  		bra.w	DisplaySprite
0000CC8A                            ; ===========================================================================
0000CC8A                            ; ---------------------------------------------------------------------------
0000CC8A                            ; Sprite mappings - zone title cards
0000CC8A                            ; ---------------------------------------------------------------------------
0000CC8A 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CC8C 0000                       		dc.w byte_CA2C-Map_obj34
0000CC8E 0000                       		dc.w byte_CA5A-Map_obj34
0000CC90 0000                       		dc.w byte_CA7A-Map_obj34
0000CC92 0000                       		dc.w byte_CAA8-Map_obj34
0000CC94 0000                       		dc.w byte_CADC-Map_obj34
0000CC96 0000                       		dc.w byte_CB10-Map_obj34
0000CC98 0000                       		dc.w byte_CB26-Map_obj34
0000CC9A 0000                       		dc.w byte_CB31-Map_obj34
0000CC9C 0000                       		dc.w byte_CB3C-Map_obj34
0000CC9E 0000                       		dc.w byte_CB47-Map_obj34
0000CCA0 0000                       		dc.w byte_CB8A-Map_obj34
0000CCA2 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CCA3 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CCA8 F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CCAD F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CCB2 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CCB7 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CCBC F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CCC1 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CCC6 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CCCB F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CCD0 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CCD5 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000CCDA F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000CCDF 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000CCE0 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000CCE5 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000CCEA F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000CCEF F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000CCF4 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000CCF9 F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000CCFE F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CD03 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000CD08 F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000CD0D F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000CD12 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000CD17 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000CD1C F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000CD21 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000CD26 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000CD2B F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000CD30 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000CD35 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000CD3A F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000CD3F F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000CD44 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000CD49 F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000CD4E 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000CD4F F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000CD54 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000CD59 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000CD5E F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000CD63 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000CD68 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000CD69 F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000CD6E F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000CD73 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000CD78 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000CD7D F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000CD82 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000CD87 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000CD8C F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000CD91 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000CD96 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000CD9B F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000CDA0 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000CDA5 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000CDAA F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000CDAF F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000CDB4 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000CDB9 F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000CDBE 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000CDBF F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000CDC4 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000CDC9 F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000CDCE F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000CDD3 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000CDD8 F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000CDDD F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000CDE2 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000CDE7 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000CDEC F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000CDF1 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000CDF6 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000CDFB F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000CE00 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000CE05 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000CE0A F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000CE0F F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000CE14 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000CE19 F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000CE1E F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000CE23 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000CE28 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000CE29 F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000CE2E F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000CE33 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000CE38 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000CE3D F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000CE42 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CE47 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000CE4C 04                         byte_CB10:	dc.b 4			; ZONE
0000CE4D F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000CE52 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000CE57 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000CE5C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CE61 00                         		dc.b 0
0000CE62 02                         byte_CB26:	dc.b 2			; ACT 1
0000CE63 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CE68 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000CE6D 02                         byte_CB31:	dc.b 2			; ACT 2
0000CE6E 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CE73 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000CE78 02                         byte_CB3C:	dc.b 2			; ACT 3
0000CE79 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CE7E F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000CE83 0D                         byte_CB47:	dc.b $D			; Oval
0000CE84 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000CE89 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000CE8E EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000CE93 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000CE98 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000CE9D 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000CEA2 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000CEA7 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000CEAC EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000CEB1 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000CEB6 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000CEBB 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000CEC0 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000CEC5 00                         		dc.b 0
0000CEC6 05                         byte_CB8A:	dc.b 5			; FINAL
0000CEC7 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000CECC F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000CED1 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000CED6 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000CEDB F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000CEE0                            		even
0000CEE0                            ; ---------------------------------------------------------------------------
0000CEE0                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CEE0                            ; ---------------------------------------------------------------------------
0000CEE0                            Map_obj39:
0000CEE0                            	include "_maps\obj39.asm"
0000CEE0                            ; ---------------------------------------------------------------------------
0000CEE0                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CEE0                            ; ---------------------------------------------------------------------------
0000CEE0 0000                       		dc.w byte_CBAC-Map_obj39
0000CEE2 0000                       		dc.w byte_CBB7-Map_obj39
0000CEE4 0000                       		dc.w byte_CBC2-Map_obj39
0000CEE6 0000                       		dc.w byte_CBCD-Map_obj39
0000CEE8 02                         byte_CBAC:	dc.b 2
0000CEE9 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000CEEE F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000CEF3 02                         byte_CBB7:	dc.b 2
0000CEF4 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000CEF9 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000CEFE 02                         byte_CBC2:	dc.b 2
0000CEFF F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000CF04 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000CF09 02                         byte_CBCD:	dc.b 2
0000CF0A F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000CF0F F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000CF14                            		even
0000CF14                            		even
0000CF14                            
0000CF14                            ; ---------------------------------------------------------------------------
0000CF14                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000CF14                            ; ---------------------------------------------------------------------------
0000CF14 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000CF16 0000                       		dc.w byte_CC13-Map_obj3A
0000CF18 0000                       		dc.w byte_CC32-Map_obj3A
0000CF1A 0000                       		dc.w byte_CC51-Map_obj3A
0000CF1C 0000                       		dc.w byte_CC75-Map_obj3A
0000CF1E FF6F                       		dc.w byte_CB47-Map_obj3A
0000CF20 FF4E                       		dc.w byte_CB26-Map_obj3A
0000CF22 FF59                       		dc.w byte_CB31-Map_obj3A
0000CF24 FF64                       		dc.w byte_CB3C-Map_obj3A
0000CF26 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000CF27 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000CF2C F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000CF31 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000CF36 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000CF3B F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000CF40 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000CF45 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000CF4A F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000CF4F F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000CF54 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000CF59 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000CF5E F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000CF63 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000CF68 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000CF6D F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000CF72 06                         byte_CC13:	dc.b 6			; PASSED
0000CF73 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000CF78 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000CF7D F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000CF82 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000CF87 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CF8C F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000CF91 06                         byte_CC32:	dc.b 6			; SCORE
0000CF92 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CF97 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CF9C F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CFA1 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CFA6 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CFAB FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CFB0 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000CFB1 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000CFB6 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CFBB F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CFC0 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CFC5 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CFCA F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000CFCF F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CFD4 07                         byte_CC75:	dc.b 7			; RING BONUS
0000CFD5 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CFDA F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CFDF F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CFE4 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CFE9 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CFEE F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CFF3 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CFF8                            		even
0000CFF8                            ; ---------------------------------------------------------------------------
0000CFF8                            ; Sprite mappings - special stage results screen
0000CFF8                            ; ---------------------------------------------------------------------------
0000CFF8 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000CFFA 0000                       		dc.w byte_CCEE-Map_obj7E
0000CFFC 0000                       		dc.w byte_CD0D-Map_obj7E
0000CFFE FE8B                       		dc.w byte_CB47-Map_obj7E
0000D000 0000                       		dc.w byte_CD31-Map_obj7E
0000D002 0000                       		dc.w byte_CD46-Map_obj7E
0000D004 0000                       		dc.w byte_CD5B-Map_obj7E
0000D006 0000                       		dc.w byte_CD6B-Map_obj7E
0000D008 0000                       		dc.w byte_CDA8-Map_obj7E
0000D00A 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D00B F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D010 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D015 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D01A F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D01F F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D024 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D029 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D02E F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D033 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D038 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D03D F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D042 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D047 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D04C 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D04D F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D052 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D057 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D05C F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D061 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D066 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D06B 07                         byte_CD0D:	dc.b 7
0000D06C F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D071 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D076 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D07B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D080 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D085 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D08A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D08F 04                         byte_CD31:	dc.b 4
0000D090 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D095 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D09A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D09F F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D0A4 04                         byte_CD46:	dc.b 4
0000D0A5 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D0AA F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D0AF F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D0B4 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D0B9 03                         byte_CD5B:	dc.b 3
0000D0BA F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D0BF F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D0C4 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D0C9 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D0CA F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D0CF F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D0D4 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D0D9 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D0DE F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D0E3 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D0E8 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D0ED F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D0F2 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D0F7 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D0FC F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D101 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D106 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D107 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D10C F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D111 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D116 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D11B F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D120 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D125 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D12A F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D12F F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D134 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D139 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D13E F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D143 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D148 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D14D F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D152                            		even
0000D152                            ; ---------------------------------------------------------------------------
0000D152                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D152                            ; ---------------------------------------------------------------------------
0000D152                            Map_obj7F:
0000D152                            	include "_maps\obj7F.asm"
0000D152                            ; ---------------------------------------------------------------------------
0000D152                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D152                            ; ---------------------------------------------------------------------------
0000D152 0000                       		dc.w byte_CE02-Map_obj7F
0000D154 0000                       		dc.w byte_CE08-Map_obj7F
0000D156 0000                       		dc.w byte_CE0E-Map_obj7F
0000D158 0000                       		dc.w byte_CE14-Map_obj7F
0000D15A 0000                       		dc.w byte_CE1A-Map_obj7F
0000D15C 0000                       		dc.w byte_CE20-Map_obj7F
0000D15E 0000                       		dc.w byte_CE26-Map_obj7F
0000D160 01                         byte_CE02:	dc.b 1
0000D161 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D166 01                         byte_CE08:	dc.b 1
0000D167 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D16C 01                         byte_CE0E:	dc.b 1
0000D16D F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D172 01                         byte_CE14:	dc.b 1
0000D173 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D178 01                         byte_CE1A:	dc.b 1
0000D179 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D17E 01                         byte_CE20:	dc.b 1
0000D17F F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D184 00                         byte_CE26:	dc.b 0			; Blank frame
0000D186 00                         		even
0000D186 00                         		even
0000D186                            
0000D186                            ; ===========================================================================
0000D186                            ; ---------------------------------------------------------------------------
0000D186                            ; Object 36 - spikes
0000D186                            ; ---------------------------------------------------------------------------
0000D186                            
0000D186                            Obj36:					; XREF: Obj_Index
0000D186 7000                       		moveq	#0,d0
0000D188 1028 0024                  		move.b	$24(a0),d0
0000D18C 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D190 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D194                            ; ===========================================================================
0000D194 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D196 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D198                            
0000D198 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D19A 0110                       		dc.b 1,	$10
0000D19C 0204                       		dc.b 2,	4
0000D19E 031C                       		dc.b 3,	$1C
0000D1A0 0440                       		dc.b 4,	$40
0000D1A2 0510                       		dc.b 5,	$10
0000D1A4                            ; ===========================================================================
0000D1A4                            
0000D1A4                            Obj36_Main:				; XREF: Obj36_Index
0000D1A4 5428 0024                  		addq.b	#2,$24(a0)
0000D1A8 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D1B0 317C 051B 0002             		move.w	#$51B,2(a0)
0000D1B6 0028 0004 0001             		ori.b	#4,1(a0)
0000D1BC 117C 0004 0018             		move.b	#4,$18(a0)
0000D1C2 1028 0028                  		move.b	$28(a0),d0
0000D1C6 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D1CC 0240 00F0                  		andi.w	#$F0,d0
0000D1D0 43F9 0000 D198             		lea	(Obj36_Var).l,a1
0000D1D6 E648                       		lsr.w	#3,d0
0000D1D8 D2C0                       		adda.w	d0,a1
0000D1DA 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D1DE 1159 0019                  		move.b	(a1)+,$19(a0)
0000D1E2 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D1E8 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D1EE                            
0000D1EE                            Obj36_Solid:				; XREF: Obj36_Index
0000D1EE 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D1F2 343C 0004                  		move.w	#4,d2
0000D1F6 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D1FC 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D1FE 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D204 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D206 343C 0014                  		move.w	#$14,d2
0000D20A                            
0000D20A                            ; Spikes types $1x and $5x face	sideways
0000D20A                            
0000D20A                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D20A 323C 001B                  		move.w	#$1B,d1
0000D20E 3602                       		move.w	d2,d3
0000D210 5243                       		addq.w	#1,d3
0000D212 3828 0008                  		move.w	8(a0),d4
0000D216 6100 0000                  		bsr.w	SolidObject
0000D21A 0828 0003 0022             		btst	#3,$22(a0)
0000D220 6600                       		bne.s	Obj36_Display
0000D222 0C44 0001                  		cmpi.w	#1,d4
0000D226 6700                       		beq.s	Obj36_Hurt
0000D228 6000                       		bra.s	Obj36_Display
0000D22A                            ; ===========================================================================
0000D22A                            
0000D22A                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D22A                            
0000D22A                            Obj36_Upright:				; XREF: Obj36_Solid
0000D22A 7200                       		moveq	#0,d1
0000D22C 1228 0019                  		move.b	$19(a0),d1
0000D230 0641 000B                  		addi.w	#$B,d1
0000D234 343C 0010                  		move.w	#$10,d2
0000D238 363C 0011                  		move.w	#$11,d3
0000D23C 3828 0008                  		move.w	8(a0),d4
0000D240 6100 0000                  		bsr.w	SolidObject
0000D244 0828 0003 0022             		btst	#3,$22(a0)
0000D24A 6600                       		bne.s	Obj36_Hurt
0000D24C 4A44                       		tst.w	d4
0000D24E 6A00                       		bpl.s	Obj36_Display
0000D250                            
0000D250                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D250 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D254 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D256 2F08                       		move.l	a0,-(sp)
0000D258 2448                       		movea.l	a0,a2
0000D25A 41F8 D000                  		lea	($FFFFD000).w,a0
0000D25E 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D264 6400                       		bcc.s	loc_CF20
0000D266 2628 000C                  		move.l	$C(a0),d3
0000D26A 3028 0012                  		move.w	$12(a0),d0
0000D26E 48C0                       		ext.l	d0
0000D270 E180                       		asl.l	#8,d0
0000D272 9680                       		sub.l	d0,d3
0000D274 2143 000C                  		move.l	d3,$C(a0)
0000D278 4EB9 0000 0000             		jsr	HurtSonic
0000D27E                            
0000D27E                            loc_CF20:
0000D27E 205F                       		movea.l	(sp)+,a0
0000D280                            
0000D280                            Obj36_Display:
0000D280 6100 0000                  		bsr.w	DisplaySprite
0000D284 3028 0030                  		move.w	$30(a0),d0
0000D288 0240 FF80                  		andi.w	#$FF80,d0
0000D28C 3238 F700                  		move.w	($FFFFF700).w,d1
0000D290 0441 0080                  		subi.w	#$80,d1
0000D294 0241 FF80                  		andi.w	#$FF80,d1
0000D298 9041                       		sub.w	d1,d0
0000D29A 0C40 0280                  		cmpi.w	#$280,d0
0000D29E 6200 0000                  		bhi.w	DeleteObject
0000D2A2 4E75                       		rts	
0000D2A4                            ; ===========================================================================
0000D2A4                            
0000D2A4                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D2A4 7000                       		moveq	#0,d0
0000D2A6 1028 0028                  		move.b	$28(a0),d0
0000D2AA D040                       		add.w	d0,d0
0000D2AC 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D2B0 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D2B4                            ; ===========================================================================
0000D2B4 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D2B6 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D2B8 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D2BA                            ; ===========================================================================
0000D2BA                            
0000D2BA                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D2BA 4E75                       		rts			; don't move the object
0000D2BC                            ; ===========================================================================
0000D2BC                            
0000D2BC                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D2BC 6100 0000                  		bsr.w	Obj36_Wait
0000D2C0 7000                       		moveq	#0,d0
0000D2C2 1028 0034                  		move.b	$34(a0),d0
0000D2C6 D068 0032                  		add.w	$32(a0),d0
0000D2CA 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D2CE 4E75                       		rts	
0000D2D0                            ; ===========================================================================
0000D2D0                            
0000D2D0                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D2D0 6100 0000                  		bsr.w	Obj36_Wait
0000D2D4 7000                       		moveq	#0,d0
0000D2D6 1028 0034                  		move.b	$34(a0),d0
0000D2DA D068 0030                  		add.w	$30(a0),d0
0000D2DE 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D2E2 4E75                       		rts	
0000D2E4                            ; ===========================================================================
0000D2E4                            
0000D2E4                            Obj36_Wait:
0000D2E4 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D2E8 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D2EA 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D2EE 6600                       		bne.s	locret_CFE6
0000D2F0 4A28 0001                  		tst.b	1(a0)
0000D2F4 6A00                       		bpl.s	locret_CFE6
0000D2F6 303C 00B6                  		move.w	#$B6,d0
0000D2FA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D300 6000                       		bra.s	locret_CFE6
0000D302                            ; ===========================================================================
0000D302                            
0000D302                            loc_CFA4:
0000D302 4A68 0036                  		tst.w	$36(a0)
0000D306 6700                       		beq.s	loc_CFC6
0000D308 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D30E 6400                       		bcc.s	locret_CFE6
0000D310 317C 0000 0034             		move.w	#0,$34(a0)
0000D316 317C 0000 0036             		move.w	#0,$36(a0)
0000D31C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D322 6000                       		bra.s	locret_CFE6
0000D324                            ; ===========================================================================
0000D324                            
0000D324                            loc_CFC6:
0000D324 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D32A 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D330 6500                       		bcs.s	locret_CFE6
0000D332 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D338 317C 0001 0036             		move.w	#1,$36(a0)
0000D33E 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D344                            
0000D344                            locret_CFE6:
0000D344 4E75                       		rts	
0000D346                            ; ===========================================================================
0000D346                            ; ---------------------------------------------------------------------------
0000D346                            ; Sprite mappings - spikes
0000D346                            ; ---------------------------------------------------------------------------
0000D346                            Map_obj36:
0000D346                            	include "_maps\obj36.asm"
0000D346                            ; ---------------------------------------------------------------------------
0000D346                            ; Sprite mappings - spikes
0000D346                            ; ---------------------------------------------------------------------------
0000D346 0000                       		dc.w byte_CFF4-Map_obj36
0000D348 0000                       		dc.w byte_D004-Map_obj36
0000D34A 0000                       		dc.w byte_D014-Map_obj36
0000D34C 0000                       		dc.w byte_D01A-Map_obj36
0000D34E 0000                       		dc.w byte_D02A-Map_obj36
0000D350 0000                       		dc.w byte_D049-Map_obj36
0000D352 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D353 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D358 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D35D F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D362 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D363 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D368 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D36D 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D372 01                         byte_D014:	dc.b 1			; 1 spike
0000D373 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D378 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D379 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D37E F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D383 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D388 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D389 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D38E F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D393 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D398 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D39D F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D3A2 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D3A7 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D3A8 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D3AE 00                         		even
0000D3AE 00                         		even
0000D3AE                            
0000D3AE                            ; ===========================================================================
0000D3AE                            ; ---------------------------------------------------------------------------
0000D3AE                            ; Object 3B - purple rock (GHZ)
0000D3AE                            ; ---------------------------------------------------------------------------
0000D3AE                            
0000D3AE                            Obj3B:					; XREF: Obj_Index
0000D3AE 7000                       		moveq	#0,d0
0000D3B0 1028 0024                  		move.b	$24(a0),d0
0000D3B4 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D3B8 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D3BC                            ; ===========================================================================
0000D3BC 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D3BE 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D3C0                            ; ===========================================================================
0000D3C0                            
0000D3C0                            Obj3B_Main:				; XREF: Obj3B_Index
0000D3C0 5428 0024                  		addq.b	#2,$24(a0)
0000D3C4 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D3CC 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D3D2 117C 0004 0001             		move.b	#4,1(a0)
0000D3D8 117C 0013 0019             		move.b	#$13,$19(a0)
0000D3DE 117C 0004 0018             		move.b	#4,$18(a0)
0000D3E4                            
0000D3E4                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D3E4 323C 001B                  		move.w	#$1B,d1
0000D3E8 343C 0010                  		move.w	#$10,d2
0000D3EC 363C 0010                  		move.w	#$10,d3
0000D3F0 3828 0008                  		move.w	8(a0),d4
0000D3F4 6100 0000                  		bsr.w	SolidObject
0000D3F8 6100 0000                  		bsr.w	DisplaySprite
0000D3FC 3028 0008                  		move.w	8(a0),d0
0000D400 0240 FF80                  		andi.w	#$FF80,d0
0000D404 3238 F700                  		move.w	($FFFFF700).w,d1
0000D408 0441 0080                  		subi.w	#$80,d1
0000D40C 0241 FF80                  		andi.w	#$FF80,d1
0000D410 9041                       		sub.w	d1,d0
0000D412 0C40 0280                  		cmpi.w	#$280,d0
0000D416 6200 0000                  		bhi.w	DeleteObject
0000D41A 4E75                       		rts	
0000D41C                            ; ===========================================================================
0000D41C                            ; ---------------------------------------------------------------------------
0000D41C                            ; Object 49 - waterfall	sound effect (GHZ)
0000D41C                            ; ---------------------------------------------------------------------------
0000D41C                            
0000D41C                            Obj49:					; XREF: Obj_Index
0000D41C 7000                       		moveq	#0,d0
0000D41E 1028 0024                  		move.b	$24(a0),d0
0000D422 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D426 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D42A                            ; ===========================================================================
0000D42A 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D42C 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D42E                            ; ===========================================================================
0000D42E                            
0000D42E                            Obj49_Main:				; XREF: Obj49_Index
0000D42E 5428 0024                  		addq.b	#2,$24(a0)
0000D432 117C 0004 0001             		move.b	#4,1(a0)
0000D438                            
0000D438                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D438 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D43C 0200 003F                  		andi.b	#$3F,d0
0000D440 6600                       		bne.s	Obj49_ChkDel
0000D442 303C 00D0                  		move.w	#$D0,d0
0000D446 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D44C                            
0000D44C                            Obj49_ChkDel:
0000D44C 3028 0008                  		move.w	8(a0),d0
0000D450 0240 FF80                  		andi.w	#$FF80,d0
0000D454 3238 F700                  		move.w	($FFFFF700).w,d1
0000D458 0441 0080                  		subi.w	#$80,d1
0000D45C 0241 FF80                  		andi.w	#$FF80,d1
0000D460 9041                       		sub.w	d1,d0
0000D462 0C40 0280                  		cmpi.w	#$280,d0
0000D466 6200 0000                  		bhi.w	DeleteObject
0000D46A 4E75                       		rts	
0000D46C                            ; ===========================================================================
0000D46C                            ; ---------------------------------------------------------------------------
0000D46C                            ; Sprite mappings - purple rock	(GHZ)
0000D46C                            ; ---------------------------------------------------------------------------
0000D46C                            Map_obj3B:
0000D46C                            	include "_maps\obj3B.asm"
0000D46C                            ; ---------------------------------------------------------------------------
0000D46C                            ; Sprite mappings - purple rock	(GHZ)
0000D46C                            ; ---------------------------------------------------------------------------
0000D46C 0000                       		dc.w byte_D110-Map_obj3B
0000D46E 02                         byte_D110:	dc.b 2
0000D46F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D474 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D47A 00                         		even
0000D47A 00                         		even
0000D47A                            
0000D47A                            ; ===========================================================================
0000D47A                            ; ---------------------------------------------------------------------------
0000D47A                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D47A                            ; ---------------------------------------------------------------------------
0000D47A                            
0000D47A                            Obj3C:					; XREF: Obj_Index
0000D47A 7000                       		moveq	#0,d0
0000D47C 1028 0024                  		move.b	$24(a0),d0
0000D480 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D484 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D488 6000 0000                  		bra.w	MarkObjGone
0000D48C                            ; ===========================================================================
0000D48C 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D48E 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D490 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D492                            ; ===========================================================================
0000D492                            
0000D492                            Obj3C_Main:				; XREF: Obj3C_Index
0000D492 5428 0024                  		addq.b	#2,$24(a0)
0000D496 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D49E 317C 450F 0002             		move.w	#$450F,2(a0)
0000D4A4 117C 0004 0001             		move.b	#4,1(a0)
0000D4AA 117C 0010 0019             		move.b	#$10,$19(a0)
0000D4B0 117C 0004 0018             		move.b	#4,$18(a0)
0000D4B6 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D4BC                            
0000D4BC                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D4BC 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D4C2 323C 001B                  		move.w	#$1B,d1
0000D4C6 343C 0020                  		move.w	#$20,d2
0000D4CA 363C 0020                  		move.w	#$20,d3
0000D4CE 3828 0008                  		move.w	8(a0),d4
0000D4D2 6100 0000                  		bsr.w	SolidObject
0000D4D6 0828 0005 0022             		btst	#5,$22(a0)
0000D4DC 6600                       		bne.s	Obj3C_ChkRoll
0000D4DE                            
0000D4DE                            locret_D180:
0000D4DE 4E75                       		rts	
0000D4E0                            ; ===========================================================================
0000D4E0                            
0000D4E0                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D4E0 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D4E6 66F6                       		bne.s	locret_D180	; if not, branch
0000D4E8 3028 0030                  		move.w	$30(a0),d0
0000D4EC 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D4EE 4440                       		neg.w	d0
0000D4F0                            
0000D4F0                            Obj3C_ChkSpeed:
0000D4F0 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D4F4 65E8                       		bcs.s	locret_D180	; if not, branch
0000D4F6 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D4FC 5869 0008                  		addq.w	#4,8(a1)
0000D500 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D506 3028 0008                  		move.w	8(a0),d0
0000D50A B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D50E 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D510 5169 0008                  		subq.w	#8,8(a1)
0000D514 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D51A                            
0000D51A                            Obj3C_Smash:
0000D51A 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D520 08A8 0005 0022             		bclr	#5,$22(a0)
0000D526 08A9 0005 0022             		bclr	#5,$22(a1)
0000D52C 7207                       		moveq	#7,d1		; load 8 fragments
0000D52E 343C 0070                  		move.w	#$70,d2
0000D532 6100                       		bsr.s	SmashObject
0000D534                            
0000D534                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D534 6100 0000                  		bsr.w	SpeedToPos
0000D538 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D53E 6100 0000                  		bsr.w	DisplaySprite
0000D542 4A28 0001                  		tst.b	1(a0)
0000D546 6A00 0000                  		bpl.w	DeleteObject
0000D54A 4E75                       		rts	
0000D54C                            
0000D54C                            ; ---------------------------------------------------------------------------
0000D54C                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D54C                            ; ---------------------------------------------------------------------------
0000D54C                            
0000D54C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D54C                            
0000D54C                            
0000D54C                            SmashObject:				; XREF: Obj3C_Smash
0000D54C 7000                       		moveq	#0,d0
0000D54E 1028 001A                  		move.b	$1A(a0),d0
0000D552 D040                       		add.w	d0,d0
0000D554 2668 0004                  		movea.l	4(a0),a3
0000D558 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D55C 524B                       		addq.w	#1,a3
0000D55E 08E8 0005 0001             		bset	#5,1(a0)
0000D564 1810                       		move.b	0(a0),d4
0000D566 1A28 0001                  		move.b	1(a0),d5
0000D56A 2248                       		movea.l	a0,a1
0000D56C 6000                       		bra.s	Smash_LoadFrag
0000D56E                            ; ===========================================================================
0000D56E                            
0000D56E                            Smash_Loop:
0000D56E 6100 0000                  		bsr.w	SingleObjLoad
0000D572 6600                       		bne.s	Smash_PlaySnd
0000D574 5A4B                       		addq.w	#5,a3
0000D576                            
0000D576                            Smash_LoadFrag:				; XREF: SmashObject
0000D576 137C 0004 0024             		move.b	#4,$24(a1)
0000D57C 1284                       		move.b	d4,0(a1)
0000D57E 234B 0004                  		move.l	a3,4(a1)
0000D582 1345 0001                  		move.b	d5,1(a1)
0000D586 3368 0008 0008             		move.w	8(a0),8(a1)
0000D58C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D592 3368 0002 0002             		move.w	2(a0),2(a1)
0000D598 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D59E 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D5A4 335C 0010                  		move.w	(a4)+,$10(a1)
0000D5A8 335C 0012                  		move.w	(a4)+,$12(a1)
0000D5AC B3C8                       		cmpa.l	a0,a1
0000D5AE 6400                       		bcc.s	loc_D268
0000D5B0 2F08                       		move.l	a0,-(sp)
0000D5B2 2049                       		movea.l	a1,a0
0000D5B4 6100 0000                  		bsr.w	SpeedToPos
0000D5B8 D568 0012                  		add.w	d2,$12(a0)
0000D5BC 205F                       		movea.l	(sp)+,a0
0000D5BE 6100 0000                  		bsr.w	DisplaySprite2
0000D5C2                            
0000D5C2                            loc_D268:
0000D5C2 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D5C6                            
0000D5C6                            Smash_PlaySnd:
0000D5C6 303C 00CB                  		move.w	#$CB,d0
0000D5CA 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D5D0                            ; End of function SmashObject
0000D5D0                            
0000D5D0                            ; ===========================================================================
0000D5D0                            ; Smashed block	fragment speeds
0000D5D0                            ;
0000D5D0 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D5D4 0600 FF00                  		dc.w $600, $FF00
0000D5D8 0600 0100                  		dc.w $600, $100
0000D5DC 0400 0500                  		dc.w $400, $500
0000D5E0 0600 FA00                  		dc.w $600, $FA00
0000D5E4 0800 FE00                  		dc.w $800, $FE00
0000D5E8 0800 0200                  		dc.w $800, $200
0000D5EC 0600 0600                  		dc.w $600, $600
0000D5F0                            
0000D5F0 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D5F4 F800 FE00                  		dc.w $F800, $FE00
0000D5F8 F800 0200                  		dc.w $F800, $200
0000D5FC FA00 0600                  		dc.w $FA00, $600
0000D600 FC00 FB00                  		dc.w $FC00, $FB00
0000D604 FA00 FF00                  		dc.w $FA00, $FF00
0000D608 FA00 0100                  		dc.w $FA00, $100
0000D60C FC00 0500                  		dc.w $FC00, $500
0000D610                            ; ---------------------------------------------------------------------------
0000D610                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D610                            ; ---------------------------------------------------------------------------
0000D610                            Map_obj3C:
0000D610                            	include "_maps\obj3C.asm"
0000D610                            ; ---------------------------------------------------------------------------
0000D610                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D610                            ; ---------------------------------------------------------------------------
0000D610 0000                       		dc.w byte_D2BC-Map_obj3C
0000D612 0000                       		dc.w byte_D2E5-Map_obj3C
0000D614 0000                       		dc.w byte_D30E-Map_obj3C
0000D616 08                         byte_D2BC:	dc.b 8
0000D617 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D61C F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D621 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D626 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D62B E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D630 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D635 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D63A 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D63F 08                         byte_D2E5:	dc.b 8
0000D640 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D645 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D64A 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D64F 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D654 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D659 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D65E 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D663 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D668 08                         byte_D30E:	dc.b 8
0000D669 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D66E F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D673 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D678 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D67D E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D682 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D687 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D68C 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D692 00                         		even
0000D692 00                         		even
0000D692                            
0000D692                            ; ---------------------------------------------------------------------------
0000D692                            ; Object code loading subroutine
0000D692                            ; ---------------------------------------------------------------------------
0000D692                            
0000D692                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D692                            
0000D692                            
0000D692                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D692 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D696 7E7F                       		moveq	#$7F,d7
0000D698 7000                       		moveq	#0,d0
0000D69A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D6A0 6400                       		bcc.s	loc_D362
0000D6A2                            
0000D6A2                            loc_D348:
0000D6A2 1010                       		move.b	(a0),d0		; load object number from RAM
0000D6A4 6700                       		beq.s	loc_D358
0000D6A6 D040                       		add.w	d0,d0
0000D6A8 D040                       		add.w	d0,d0
0000D6AA 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D6AE 4E91                       		jsr	(a1)		; run the object's code
0000D6B0 7000                       		moveq	#0,d0
0000D6B2                            
0000D6B2                            loc_D358:
0000D6B2 41E8 0040                  		lea	$40(a0),a0	; next object
0000D6B6 51CF FFEA                  		dbf	d7,loc_D348
0000D6BA 4E75                       		rts	
0000D6BC                            ; ===========================================================================
0000D6BC                            
0000D6BC                            loc_D362:
0000D6BC 7E1F                       		moveq	#$1F,d7
0000D6BE 61E2                       		bsr.s	loc_D348
0000D6C0 7E5F                       		moveq	#$5F,d7
0000D6C2                            
0000D6C2                            loc_D368:
0000D6C2 7000                       		moveq	#0,d0
0000D6C4 1010                       		move.b	(a0),d0
0000D6C6 6700                       		beq.s	loc_D378
0000D6C8 4A28 0001                  		tst.b	1(a0)
0000D6CC 6A00                       		bpl.s	loc_D378
0000D6CE 6100 0000                  		bsr.w	DisplaySprite
0000D6D2                            
0000D6D2                            loc_D378:
0000D6D2 41E8 0040                  		lea	$40(a0),a0
0000D6D6                            
0000D6D6                            loc_D37C:
0000D6D6 51CF FFEA                  		dbf	d7,loc_D368
0000D6DA 4E75                       		rts	
0000D6DC                            ; End of function ObjectsLoad
0000D6DC                            
0000D6DC                            ; ===========================================================================
0000D6DC                            ; ---------------------------------------------------------------------------
0000D6DC                            ; Object pointers
0000D6DC                            ; ---------------------------------------------------------------------------
0000D6DC                            Obj_Index:
0000D6DC                            	include "_inc\Object pointers.asm"
0000D6DC                            ; ---------------------------------------------------------------------------
0000D6DC                            ; Object pointers
0000D6DC                            ; ---------------------------------------------------------------------------
0000D6DC 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D6EC 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D6FC 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D70C 0000 0000 0000 A914 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D71C 0000 7654 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D72C 0000 7C7A 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D73C 0000 84C8 0000 8530 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D74C 0000 8B7A 0000 8E68 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D75C 0000 0000 0000 9AEC 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D76C 0000 9E24 0000 A410 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D77C 0000 9724 0000 8C50 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D78C 0000 AF5C 0000 A5F6 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D79C 0000 B92E 0000 BFDC 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D7AC 0000 B492 0000 D186 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000D7BC 0000 C762 0000 C81C 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000D7CC 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000D7DC 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000D7EC 0000 BC4A 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000D7FC 0000 D41C 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000D80C 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000D81C 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000D82C 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000D83C 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000D84C 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000D85C 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000D86C 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000D87C 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000D88C 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000D89C 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000D8AC 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000D8BC 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000D8CC 0000 0000 0000 CA56 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000D8DC 0000 5174 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000D8EC 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000D8FC 0000 582E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D8FC 0000 582E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D90C                            
0000D90C                            ; ---------------------------------------------------------------------------
0000D90C                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000D90C                            ; ---------------------------------------------------------------------------
0000D90C                            
0000D90C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D90C                            
0000D90C                            
0000D90C                            ObjectFall:
0000D90C 2428 0008                  		move.l	8(a0),d2
0000D910 2628 000C                  		move.l	$C(a0),d3
0000D914 3028 0010                  		move.w	$10(a0),d0
0000D918 48C0                       		ext.l	d0
0000D91A E180                       		asl.l	#8,d0
0000D91C D480                       		add.l	d0,d2
0000D91E 3028 0012                  		move.w	$12(a0),d0
0000D922 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000D928 48C0                       		ext.l	d0
0000D92A E180                       		asl.l	#8,d0
0000D92C D680                       		add.l	d0,d3
0000D92E 2142 0008                  		move.l	d2,8(a0)
0000D932 2143 000C                  		move.l	d3,$C(a0)
0000D936 4E75                       		rts	
0000D938                            ; End of function ObjectFall
0000D938                            
0000D938                            ; ---------------------------------------------------------------------------
0000D938                            ; Subroutine translating object	speed to update	object position
0000D938                            ; ---------------------------------------------------------------------------
0000D938                            
0000D938                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D938                            
0000D938                            
0000D938                            SpeedToPos:
0000D938 2428 0008                  		move.l	8(a0),d2
0000D93C 2628 000C                  		move.l	$C(a0),d3
0000D940 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000D944 48C0                       		ext.l	d0
0000D946 E180                       		asl.l	#8,d0		; multiply speed by $100
0000D948 D480                       		add.l	d0,d2		; add to x-axis	position
0000D94A 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000D94E 48C0                       		ext.l	d0
0000D950 E180                       		asl.l	#8,d0		; multiply by $100
0000D952 D680                       		add.l	d0,d3		; add to y-axis	position
0000D954 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000D958 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000D95C 4E75                       		rts	
0000D95E                            ; End of function SpeedToPos
0000D95E                            
0000D95E                            ; ---------------------------------------------------------------------------
0000D95E                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000D95E                            ; ---------------------------------------------------------------------------
0000D95E                            
0000D95E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D95E                            
0000D95E                            
0000D95E                            DisplaySprite:
0000D95E 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000D962 3028 0018                  		move.w	$18(a0),d0
0000D966 E248                       		lsr.w	#1,d0
0000D968 0240 0380                  		andi.w	#$380,d0
0000D96C D2C0                       		adda.w	d0,a1
0000D96E 0C51 007E                  		cmpi.w	#$7E,(a1)
0000D972 6400                       		bcc.s	locret_D620
0000D974 5451                       		addq.w	#2,(a1)
0000D976 D2D1                       		adda.w	(a1),a1
0000D978 3288                       		move.w	a0,(a1)
0000D97A                            
0000D97A                            locret_D620:
0000D97A 4E75                       		rts	
0000D97C                            ; End of function DisplaySprite
0000D97C                            
0000D97C                            ; ---------------------------------------------------------------------------
0000D97C                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000D97C                            ; ---------------------------------------------------------------------------
0000D97C                            
0000D97C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D97C                            
0000D97C                            
0000D97C                            DisplaySprite2:
0000D97C 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000D980 3029 0018                  		move.w	$18(a1),d0
0000D984 E248                       		lsr.w	#1,d0
0000D986 0240 0380                  		andi.w	#$380,d0
0000D98A D4C0                       		adda.w	d0,a2
0000D98C 0C52 007E                  		cmpi.w	#$7E,(a2)
0000D990 6400                       		bcc.s	locret_D63E
0000D992 5452                       		addq.w	#2,(a2)
0000D994 D4D2                       		adda.w	(a2),a2
0000D996 3489                       		move.w	a1,(a2)
0000D998                            
0000D998                            locret_D63E:
0000D998 4E75                       		rts	
0000D99A                            ; End of function DisplaySprite2
0000D99A                            
0000D99A                            ; ---------------------------------------------------------------------------
0000D99A                            ; Subroutine to	delete an object
0000D99A                            ; ---------------------------------------------------------------------------
0000D99A                            
0000D99A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D99A                            
0000D99A                            
0000D99A                            DeleteObject:
0000D99A 2248                       		movea.l	a0,a1
0000D99C                            
0000D99C                            DeleteObject2:
0000D99C 7200                       		moveq	#0,d1
0000D99E 700F                       		moveq	#$F,d0
0000D9A0                            
0000D9A0                            loc_D646:
0000D9A0 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000D9A2 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000D9A6 4E75                       		rts	
0000D9A8                            ; End of function DeleteObject
0000D9A8                            
0000D9A8                            ; ===========================================================================
0000D9A8 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000D9AC 00FF F700                  		dc.l $FFF700		; main screen x-position
0000D9B0 00FF F708                  		dc.l $FFF708		; background x-position	1
0000D9B4 00FF F718                  		dc.l $FFF718		; background x-position	2
0000D9B8                            ; ---------------------------------------------------------------------------
0000D9B8                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000D9B8                            ; ---------------------------------------------------------------------------
0000D9B8                            
0000D9B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9B8                            
0000D9B8                            
0000D9B8                            BuildSprites:				; XREF: TitleScreen; et al
0000D9B8 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000D9BC 7A00                       		moveq	#0,d5
0000D9BE 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000D9C2 7E07                       		moveq	#7,d7
0000D9C4                            
0000D9C4                            loc_D66A:
0000D9C4 4A54                       		tst.w	(a4)
0000D9C6 6700 0000                  		beq.w	loc_D72E
0000D9CA 7C02                       		moveq	#2,d6
0000D9CC                            
0000D9CC                            loc_D672:
0000D9CC 3074 6000                  		movea.w	(a4,d6.w),a0
0000D9D0 4A10                       		tst.b	(a0)
0000D9D2 6700 0000                  		beq.w	loc_D726
0000D9D6 08A8 0007 0001             		bclr	#7,1(a0)
0000D9DC 1028 0001                  		move.b	1(a0),d0
0000D9E0 1800                       		move.b	d0,d4
0000D9E2 0240 000C                  		andi.w	#$C,d0
0000D9E6 6700                       		beq.s	loc_D6DE
0000D9E8 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000D9EC 7000                       		moveq	#0,d0
0000D9EE 1028 0019                  		move.b	$19(a0),d0
0000D9F2 3628 0008                  		move.w	8(a0),d3
0000D9F6 9651                       		sub.w	(a1),d3
0000D9F8 3203                       		move.w	d3,d1
0000D9FA D240                       		add.w	d0,d1
0000D9FC 6B00 0000                  		bmi.w	loc_D726
0000DA00 3203                       		move.w	d3,d1
0000DA02 9240                       		sub.w	d0,d1
0000DA04 0C41 0140                  		cmpi.w	#$140,d1
0000DA08 6C00                       		bge.s	loc_D726
0000DA0A 0643 0080                  		addi.w	#$80,d3
0000DA0E 0804 0004                  		btst	#4,d4
0000DA12 6700                       		beq.s	loc_D6E8
0000DA14 7000                       		moveq	#0,d0
0000DA16 1028 0016                  		move.b	$16(a0),d0
0000DA1A 3428 000C                  		move.w	$C(a0),d2
0000DA1E 9469 0004                  		sub.w	4(a1),d2
0000DA22 3202                       		move.w	d2,d1
0000DA24 D240                       		add.w	d0,d1
0000DA26 6B00                       		bmi.s	loc_D726
0000DA28 3202                       		move.w	d2,d1
0000DA2A 9240                       		sub.w	d0,d1
0000DA2C 0C41 00E0                  		cmpi.w	#$E0,d1
0000DA30 6C00                       		bge.s	loc_D726
0000DA32 0642 0080                  		addi.w	#$80,d2
0000DA36 6000                       		bra.s	loc_D700
0000DA38                            ; ===========================================================================
0000DA38                            
0000DA38                            loc_D6DE:
0000DA38 3428 000A                  		move.w	$A(a0),d2
0000DA3C 3628 0008                  		move.w	8(a0),d3
0000DA40 6000                       		bra.s	loc_D700
0000DA42                            ; ===========================================================================
0000DA42                            
0000DA42                            loc_D6E8:
0000DA42 3428 000C                  		move.w	$C(a0),d2
0000DA46 9469 0004                  		sub.w	4(a1),d2
0000DA4A 0642 0080                  		addi.w	#$80,d2
0000DA4E 0C42 0060                  		cmpi.w	#$60,d2
0000DA52 6500                       		bcs.s	loc_D726
0000DA54 0C42 0180                  		cmpi.w	#$180,d2
0000DA58 6400                       		bcc.s	loc_D726
0000DA5A                            
0000DA5A                            loc_D700:
0000DA5A 2268 0004                  		movea.l	4(a0),a1
0000DA5E 7200                       		moveq	#0,d1
0000DA60 0804 0005                  		btst	#5,d4
0000DA64 6600                       		bne.s	loc_D71C
0000DA66 1228 001A                  		move.b	$1A(a0),d1
0000DA6A D201                       		add.b	d1,d1
0000DA6C D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DA70 1219                       		move.b	(a1)+,d1
0000DA72 5301                       		subq.b	#1,d1
0000DA74 6B00                       		bmi.s	loc_D720
0000DA76                            
0000DA76                            loc_D71C:
0000DA76 6100 0000                  		bsr.w	sub_D750
0000DA7A                            
0000DA7A                            loc_D720:
0000DA7A 08E8 0007 0001             		bset	#7,1(a0)
0000DA80                            
0000DA80                            loc_D726:
0000DA80 5446                       		addq.w	#2,d6
0000DA82 5554                       		subq.w	#2,(a4)
0000DA84 6600 FF46                  		bne.w	loc_D672
0000DA88                            
0000DA88                            loc_D72E:
0000DA88 49EC 0080                  		lea	$80(a4),a4
0000DA8C 51CF FF36                  		dbf	d7,loc_D66A
0000DA90 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DA94 0C05 0050                  		cmpi.b	#$50,d5
0000DA98 6700                       		beq.s	loc_D748
0000DA9A 24BC 0000 0000             		move.l	#0,(a2)
0000DAA0 4E75                       		rts	
0000DAA2                            ; ===========================================================================
0000DAA2                            
0000DAA2                            loc_D748:
0000DAA2 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DAA8 4E75                       		rts	
0000DAAA                            ; End of function BuildSprites
0000DAAA                            
0000DAAA                            
0000DAAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DAAA                            
0000DAAA                            
0000DAAA                            sub_D750:				; XREF: BuildSprites
0000DAAA 3668 0002                  		movea.w	2(a0),a3
0000DAAE 0804 0000                  		btst	#0,d4
0000DAB2 6600                       		bne.s	loc_D796
0000DAB4 0804 0001                  		btst	#1,d4
0000DAB8 6600 0000                  		bne.w	loc_D7E4
0000DABC                            ; End of function sub_D750
0000DABC                            
0000DABC                            
0000DABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DABC                            
0000DABC                            
0000DABC                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DABC 0C05 0050                  		cmpi.b	#$50,d5
0000DAC0 6700                       		beq.s	locret_D794
0000DAC2 1019                       		move.b	(a1)+,d0
0000DAC4 4880                       		ext.w	d0
0000DAC6 D042                       		add.w	d2,d0
0000DAC8 34C0                       		move.w	d0,(a2)+
0000DACA 14D9                       		move.b	(a1)+,(a2)+
0000DACC 5205                       		addq.b	#1,d5
0000DACE 14C5                       		move.b	d5,(a2)+
0000DAD0 1019                       		move.b	(a1)+,d0
0000DAD2 E148                       		lsl.w	#8,d0
0000DAD4 1019                       		move.b	(a1)+,d0
0000DAD6 D04B                       		add.w	a3,d0
0000DAD8 34C0                       		move.w	d0,(a2)+
0000DADA 1019                       		move.b	(a1)+,d0
0000DADC 4880                       		ext.w	d0
0000DADE D043                       		add.w	d3,d0
0000DAE0 0240 01FF                  		andi.w	#$1FF,d0
0000DAE4 6600                       		bne.s	loc_D78E
0000DAE6 5240                       		addq.w	#1,d0
0000DAE8                            
0000DAE8                            loc_D78E:
0000DAE8 34C0                       		move.w	d0,(a2)+
0000DAEA 51C9 FFD0                  		dbf	d1,sub_D762
0000DAEE                            
0000DAEE                            locret_D794:
0000DAEE 4E75                       		rts	
0000DAF0                            ; End of function sub_D762
0000DAF0                            
0000DAF0                            ; ===========================================================================
0000DAF0                            
0000DAF0                            loc_D796:
0000DAF0 0804 0001                  		btst	#1,d4
0000DAF4 6600 0000                  		bne.w	loc_D82A
0000DAF8                            
0000DAF8                            loc_D79E:
0000DAF8 0C05 0050                  		cmpi.b	#$50,d5
0000DAFC 6700                       		beq.s	locret_D7E2
0000DAFE 1019                       		move.b	(a1)+,d0
0000DB00 4880                       		ext.w	d0
0000DB02 D042                       		add.w	d2,d0
0000DB04 34C0                       		move.w	d0,(a2)+
0000DB06 1819                       		move.b	(a1)+,d4
0000DB08 14C4                       		move.b	d4,(a2)+
0000DB0A 5205                       		addq.b	#1,d5
0000DB0C 14C5                       		move.b	d5,(a2)+
0000DB0E 1019                       		move.b	(a1)+,d0
0000DB10 E148                       		lsl.w	#8,d0
0000DB12 1019                       		move.b	(a1)+,d0
0000DB14 D04B                       		add.w	a3,d0
0000DB16 0A40 0800                  		eori.w	#$800,d0
0000DB1A 34C0                       		move.w	d0,(a2)+
0000DB1C 1019                       		move.b	(a1)+,d0
0000DB1E 4880                       		ext.w	d0
0000DB20 4440                       		neg.w	d0
0000DB22 D804                       		add.b	d4,d4
0000DB24 0244 0018                  		andi.w	#$18,d4
0000DB28 5044                       		addq.w	#8,d4
0000DB2A 9044                       		sub.w	d4,d0
0000DB2C D043                       		add.w	d3,d0
0000DB2E 0240 01FF                  		andi.w	#$1FF,d0
0000DB32 6600                       		bne.s	loc_D7DC
0000DB34 5240                       		addq.w	#1,d0
0000DB36                            
0000DB36                            loc_D7DC:
0000DB36 34C0                       		move.w	d0,(a2)+
0000DB38 51C9 FFBE                  		dbf	d1,loc_D79E
0000DB3C                            
0000DB3C                            locret_D7E2:
0000DB3C 4E75                       		rts	
0000DB3E                            ; ===========================================================================
0000DB3E                            
0000DB3E                            loc_D7E4:				; XREF: sub_D750
0000DB3E 0C05 0050                  		cmpi.b	#$50,d5
0000DB42 6700                       		beq.s	locret_D828
0000DB44 1019                       		move.b	(a1)+,d0
0000DB46 1811                       		move.b	(a1),d4
0000DB48 4880                       		ext.w	d0
0000DB4A 4440                       		neg.w	d0
0000DB4C E70C                       		lsl.b	#3,d4
0000DB4E 0244 0018                  		andi.w	#$18,d4
0000DB52 5044                       		addq.w	#8,d4
0000DB54 9044                       		sub.w	d4,d0
0000DB56 D042                       		add.w	d2,d0
0000DB58 34C0                       		move.w	d0,(a2)+
0000DB5A 14D9                       		move.b	(a1)+,(a2)+
0000DB5C 5205                       		addq.b	#1,d5
0000DB5E 14C5                       		move.b	d5,(a2)+
0000DB60 1019                       		move.b	(a1)+,d0
0000DB62 E148                       		lsl.w	#8,d0
0000DB64 1019                       		move.b	(a1)+,d0
0000DB66 D04B                       		add.w	a3,d0
0000DB68 0A40 1000                  		eori.w	#$1000,d0
0000DB6C 34C0                       		move.w	d0,(a2)+
0000DB6E 1019                       		move.b	(a1)+,d0
0000DB70 4880                       		ext.w	d0
0000DB72 D043                       		add.w	d3,d0
0000DB74 0240 01FF                  		andi.w	#$1FF,d0
0000DB78 6600                       		bne.s	loc_D822
0000DB7A 5240                       		addq.w	#1,d0
0000DB7C                            
0000DB7C                            loc_D822:
0000DB7C 34C0                       		move.w	d0,(a2)+
0000DB7E 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DB82                            
0000DB82                            locret_D828:
0000DB82 4E75                       		rts	
0000DB84                            ; ===========================================================================
0000DB84                            
0000DB84                            loc_D82A:
0000DB84 0C05 0050                  		cmpi.b	#$50,d5
0000DB88 6700                       		beq.s	locret_D87C
0000DB8A 1019                       		move.b	(a1)+,d0
0000DB8C 1811                       		move.b	(a1),d4
0000DB8E 4880                       		ext.w	d0
0000DB90 4440                       		neg.w	d0
0000DB92 E70C                       		lsl.b	#3,d4
0000DB94 0244 0018                  		andi.w	#$18,d4
0000DB98 5044                       		addq.w	#8,d4
0000DB9A 9044                       		sub.w	d4,d0
0000DB9C D042                       		add.w	d2,d0
0000DB9E 34C0                       		move.w	d0,(a2)+
0000DBA0 1819                       		move.b	(a1)+,d4
0000DBA2 14C4                       		move.b	d4,(a2)+
0000DBA4 5205                       		addq.b	#1,d5
0000DBA6 14C5                       		move.b	d5,(a2)+
0000DBA8 1019                       		move.b	(a1)+,d0
0000DBAA E148                       		lsl.w	#8,d0
0000DBAC 1019                       		move.b	(a1)+,d0
0000DBAE D04B                       		add.w	a3,d0
0000DBB0 0A40 1800                  		eori.w	#$1800,d0
0000DBB4 34C0                       		move.w	d0,(a2)+
0000DBB6 1019                       		move.b	(a1)+,d0
0000DBB8 4880                       		ext.w	d0
0000DBBA 4440                       		neg.w	d0
0000DBBC D804                       		add.b	d4,d4
0000DBBE 0244 0018                  		andi.w	#$18,d4
0000DBC2 5044                       		addq.w	#8,d4
0000DBC4 9044                       		sub.w	d4,d0
0000DBC6 D043                       		add.w	d3,d0
0000DBC8 0240 01FF                  		andi.w	#$1FF,d0
0000DBCC 6600                       		bne.s	loc_D876
0000DBCE 5240                       		addq.w	#1,d0
0000DBD0                            
0000DBD0                            loc_D876:
0000DBD0 34C0                       		move.w	d0,(a2)+
0000DBD2 51C9 FFB0                  		dbf	d1,loc_D82A
0000DBD6                            
0000DBD6                            locret_D87C:
0000DBD6 4E75                       		rts	
0000DBD8                            ; ---------------------------------------------------------------------------
0000DBD8                            ; Subroutine to	check if an object is on the screen
0000DBD8                            ; ---------------------------------------------------------------------------
0000DBD8                            
0000DBD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBD8                            
0000DBD8                            
0000DBD8                            ChkObjOnScreen:
0000DBD8 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DBDC 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DBE0 6B00                       		bmi.s	NotOnScreen
0000DBE2 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DBE6 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DBE8                            
0000DBE8 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DBEC 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DBF0 6B00                       		bmi.s	NotOnScreen
0000DBF2 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DBF6 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DBF8                            
0000DBF8 7000                       		moveq	#0,d0		; set flag to 0
0000DBFA 4E75                       		rts	
0000DBFC                            ; ===========================================================================
0000DBFC                            
0000DBFC                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DBFC 7001                       		moveq	#1,d0		; set flag to 1
0000DBFE 4E75                       		rts	
0000DC00                            ; End of function ChkObjOnScreen
0000DC00                            
0000DC00                            
0000DC00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC00                            
0000DC00                            
0000DC00                            ChkObjOnScreen2:
0000DC00 7200                       		moveq	#0,d1
0000DC02 1228 0019                  		move.b	$19(a0),d1
0000DC06 3028 0008                  		move.w	8(a0),d0
0000DC0A 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DC0E D041                       		add.w	d1,d0
0000DC10 6B00                       		bmi.s	NotOnScreen2
0000DC12 D241                       		add.w	d1,d1
0000DC14 9041                       		sub.w	d1,d0
0000DC16 0C40 0140                  		cmpi.w	#320,d0
0000DC1A 6C00                       		bge.s	NotOnScreen2
0000DC1C                            
0000DC1C 3228 000C                  		move.w	$C(a0),d1
0000DC20 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DC24 6B00                       		bmi.s	NotOnScreen2
0000DC26 0C41 00E0                  		cmpi.w	#224,d1
0000DC2A 6C00                       		bge.s	NotOnScreen2
0000DC2C                            
0000DC2C 7000                       		moveq	#0,d0
0000DC2E 4E75                       		rts	
0000DC30                            ; ===========================================================================
0000DC30                            
0000DC30                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DC30 7001                       		moveq	#1,d0
0000DC32 4E75                       		rts	
0000DC34                            ; End of function ChkObjOnScreen2
0000DC34                            
0000DC34                            ; ---------------------------------------------------------------------------
0000DC34                            ; Subroutine to	load a level's objects
0000DC34                            ; ---------------------------------------------------------------------------
0000DC34                            
0000DC34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC34                            
0000DC34                            
0000DC34                            ObjPosLoad:				; XREF: Level; et al
0000DC34 7000                       		moveq	#0,d0
0000DC36 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DC3A 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DC3E 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DC42                            ; End of function ObjPosLoad
0000DC42                            
0000DC42                            ; ===========================================================================
0000DC42 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DC44 0000                       		dc.w OPL_Next-OPL_Index
0000DC46                            ; ===========================================================================
0000DC46                            
0000DC46                            OPL_Main:				; XREF: OPL_Index
0000DC46 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DC4A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DC4E ED08                       		lsl.b	#6,d0
0000DC50 E848                       		lsr.w	#4,d0
0000DC52 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DC58 2248                       		movea.l	a0,a1
0000DC5A D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DC5E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DC62 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DC66 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DC6A 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DC6E 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DC72 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DC76 34FC 0101                  		move.w	#$101,(a2)+
0000DC7A 303C 005E                  		move.w	#$5E,d0
0000DC7E                            
0000DC7E                            OPL_ClrList:
0000DC7E 429A                       		clr.l	(a2)+
0000DC80 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DC84                            
0000DC84 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DC88 7400                       		moveq	#0,d2
0000DC8A 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DC8E 0446 0080                  		subi.w	#$80,d6
0000DC92 6400                       		bcc.s	loc_D93C
0000DC94 7C00                       		moveq	#0,d6
0000DC96                            
0000DC96                            loc_D93C:
0000DC96 0246 FF80                  		andi.w	#$FF80,d6
0000DC9A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DC9E                            
0000DC9E                            loc_D944:
0000DC9E BC50                       		cmp.w	(a0),d6
0000DCA0 6300                       		bls.s	loc_D956
0000DCA2 4A28 0004                  		tst.b	4(a0)
0000DCA6 6A00                       		bpl.s	loc_D952
0000DCA8 1412                       		move.b	(a2),d2
0000DCAA 5212                       		addq.b	#1,(a2)
0000DCAC                            
0000DCAC                            loc_D952:
0000DCAC 5C48                       		addq.w	#6,a0
0000DCAE 60EE                       		bra.s	loc_D944
0000DCB0                            ; ===========================================================================
0000DCB0                            
0000DCB0                            loc_D956:
0000DCB0 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DCB4 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DCB8 0446 0080                  		subi.w	#$80,d6
0000DCBC 6500                       		bcs.s	loc_D976
0000DCBE                            
0000DCBE                            loc_D964:
0000DCBE BC50                       		cmp.w	(a0),d6
0000DCC0 6300                       		bls.s	loc_D976
0000DCC2 4A28 0004                  		tst.b	4(a0)
0000DCC6 6A00                       		bpl.s	loc_D972
0000DCC8 522A 0001                  		addq.b	#1,1(a2)
0000DCCC                            
0000DCCC                            loc_D972:
0000DCCC 5C48                       		addq.w	#6,a0
0000DCCE 60EE                       		bra.s	loc_D964
0000DCD0                            ; ===========================================================================
0000DCD0                            
0000DCD0                            loc_D976:
0000DCD0 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DCD4 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DCDA                            
0000DCDA                            OPL_Next:				; XREF: OPL_Index
0000DCDA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DCDE 7400                       		moveq	#0,d2
0000DCE0 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DCE4 0246 FF80                  		andi.w	#$FF80,d6
0000DCE8 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DCEC 6700 0000                  		beq.w	locret_DA3A
0000DCF0 6C00                       		bge.s	loc_D9F6
0000DCF2 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DCF6 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DCFA 0446 0080                  		subi.w	#$80,d6
0000DCFE 6500                       		bcs.s	loc_D9D2
0000DD00                            
0000DD00                            loc_D9A6:
0000DD00 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DD04 6C00                       		bge.s	loc_D9D2
0000DD06 5D48                       		subq.w	#6,a0
0000DD08 4A28 0004                  		tst.b	4(a0)
0000DD0C 6A00                       		bpl.s	loc_D9BC
0000DD0E 532A 0001                  		subq.b	#1,1(a2)
0000DD12 142A 0001                  		move.b	1(a2),d2
0000DD16                            
0000DD16                            loc_D9BC:
0000DD16 6100 0000                  		bsr.w	loc_DA3C
0000DD1A 6600                       		bne.s	loc_D9C6
0000DD1C 5D48                       		subq.w	#6,a0
0000DD1E 60E0                       		bra.s	loc_D9A6
0000DD20                            ; ===========================================================================
0000DD20                            
0000DD20                            loc_D9C6:
0000DD20 4A28 0004                  		tst.b	4(a0)
0000DD24 6A00                       		bpl.s	loc_D9D0
0000DD26 522A 0001                  		addq.b	#1,1(a2)
0000DD2A                            
0000DD2A                            loc_D9D0:
0000DD2A 5C48                       		addq.w	#6,a0
0000DD2C                            
0000DD2C                            loc_D9D2:
0000DD2C 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DD30 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DD34 0646 0300                  		addi.w	#$300,d6
0000DD38                            
0000DD38                            loc_D9DE:
0000DD38 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DD3C 6E00                       		bgt.s	loc_D9F0
0000DD3E 4A28 FFFE                  		tst.b	-2(a0)
0000DD42 6A00                       		bpl.s	loc_D9EC
0000DD44 5312                       		subq.b	#1,(a2)
0000DD46                            
0000DD46                            loc_D9EC:
0000DD46 5D48                       		subq.w	#6,a0
0000DD48 60EE                       		bra.s	loc_D9DE
0000DD4A                            ; ===========================================================================
0000DD4A                            
0000DD4A                            loc_D9F0:
0000DD4A 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DD4E 4E75                       		rts	
0000DD50                            ; ===========================================================================
0000DD50                            
0000DD50                            loc_D9F6:
0000DD50 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DD54 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DD58 0646 0280                  		addi.w	#$280,d6
0000DD5C                            
0000DD5C                            loc_DA02:
0000DD5C BC50                       		cmp.w	(a0),d6
0000DD5E 6300                       		bls.s	loc_DA16
0000DD60 4A28 0004                  		tst.b	4(a0)
0000DD64 6A00                       		bpl.s	loc_DA10
0000DD66 1412                       		move.b	(a2),d2
0000DD68 5212                       		addq.b	#1,(a2)
0000DD6A                            
0000DD6A                            loc_DA10:
0000DD6A 6100 0000                  		bsr.w	loc_DA3C
0000DD6E 67EC                       		beq.s	loc_DA02
0000DD70                            
0000DD70                            loc_DA16:
0000DD70 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DD74 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DD78 0446 0300                  		subi.w	#$300,d6
0000DD7C 6500                       		bcs.s	loc_DA36
0000DD7E                            
0000DD7E                            loc_DA24:
0000DD7E BC50                       		cmp.w	(a0),d6
0000DD80 6300                       		bls.s	loc_DA36
0000DD82 4A28 0004                  		tst.b	4(a0)
0000DD86 6A00                       		bpl.s	loc_DA32
0000DD88 522A 0001                  		addq.b	#1,1(a2)
0000DD8C                            
0000DD8C                            loc_DA32:
0000DD8C 5C48                       		addq.w	#6,a0
0000DD8E 60EE                       		bra.s	loc_DA24
0000DD90                            ; ===========================================================================
0000DD90                            
0000DD90                            loc_DA36:
0000DD90 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DD94                            
0000DD94                            locret_DA3A:
0000DD94 4E75                       		rts	
0000DD96                            ; ===========================================================================
0000DD96                            
0000DD96                            loc_DA3C:
0000DD96 4A28 0004                  		tst.b	4(a0)
0000DD9A 6A00                       		bpl.s	OPL_MakeItem
0000DD9C 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000DDA2 6700                       		beq.s	OPL_MakeItem
0000DDA4 5C48                       		addq.w	#6,a0
0000DDA6 7000                       		moveq	#0,d0
0000DDA8 4E75                       		rts	
0000DDAA                            ; ===========================================================================
0000DDAA                            
0000DDAA                            OPL_MakeItem:
0000DDAA 6100 0000                  		bsr.w	SingleObjLoad
0000DDAE 6600                       		bne.s	locret_DA8A
0000DDB0 3358 0008                  		move.w	(a0)+,8(a1)
0000DDB4 3018                       		move.w	(a0)+,d0
0000DDB6 3200                       		move.w	d0,d1
0000DDB8 0240 0FFF                  		andi.w	#$FFF,d0
0000DDBC 3340 000C                  		move.w	d0,$C(a1)
0000DDC0 E559                       		rol.w	#2,d1
0000DDC2 0201 0003                  		andi.b	#3,d1
0000DDC6 1341 0001                  		move.b	d1,1(a1)
0000DDCA 1341 0022                  		move.b	d1,$22(a1)
0000DDCE 1018                       		move.b	(a0)+,d0
0000DDD0 6A00                       		bpl.s	loc_DA80
0000DDD2 0200 007F                  		andi.b	#$7F,d0
0000DDD6 1342 0023                  		move.b	d2,$23(a1)
0000DDDA                            
0000DDDA                            loc_DA80:
0000DDDA 1280                       		move.b	d0,0(a1)
0000DDDC 1358 0028                  		move.b	(a0)+,$28(a1)
0000DDE0 7000                       		moveq	#0,d0
0000DDE2                            
0000DDE2                            locret_DA8A:
0000DDE2 4E75                       		rts	
0000DDE4                            ; ---------------------------------------------------------------------------
0000DDE4                            ; Single object	loading	subroutine
0000DDE4                            ; ---------------------------------------------------------------------------
0000DDE4                            
0000DDE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDE4                            
0000DDE4                            
0000DDE4                            SingleObjLoad:
0000DDE4 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000DDE8 303C 005F                  		move.w	#$5F,d0
0000DDEC                            
0000DDEC                            loc_DA94:
0000DDEC 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000DDEE 6700                       		beq.s	locret_DAA0	; if yes, branch
0000DDF0 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000DDF4 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000DDF8                            
0000DDF8                            locret_DAA0:
0000DDF8 4E75                       		rts	
0000DDFA                            ; End of function SingleObjLoad
0000DDFA                            
0000DDFA                            
0000DDFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDFA                            
0000DDFA                            
0000DDFA                            SingleObjLoad2:
0000DDFA 2248                       		movea.l	a0,a1
0000DDFC 303C F000                  		move.w	#-$1000,d0
0000DE00 9048                       		sub.w	a0,d0
0000DE02 EC48                       		lsr.w	#6,d0
0000DE04 5340                       		subq.w	#1,d0
0000DE06 6500                       		bcs.s	locret_DABC
0000DE08                            
0000DE08                            loc_DAB0:
0000DE08 4A11                       		tst.b	(a1)
0000DE0A 6700                       		beq.s	locret_DABC
0000DE0C 43E9 0040                  		lea	$40(a1),a1
0000DE10 51C8 FFF6                  		dbf	d0,loc_DAB0
0000DE14                            
0000DE14                            locret_DABC:
0000DE14 4E75                       		rts	
0000DE16                            ; End of function SingleObjLoad2
0000DE16                            
0000DE16                            ; ===========================================================================
0000DE16                            ; ---------------------------------------------------------------------------
0000DE16                            ; Object 41 - springs
0000DE16                            ; ---------------------------------------------------------------------------
0000DE16                            
0000DE16                            Obj41:					; XREF: Obj_Index
0000DE16 7000                       		moveq	#0,d0
0000DE18 1028 0024                  		move.b	$24(a0),d0
0000DE1C 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000DE20 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000DE24 6100 FB38                  		bsr.w	DisplaySprite
0000DE28 3028 0008                  		move.w	8(a0),d0
0000DE2C 0240 FF80                  		andi.w	#$FF80,d0
0000DE30 3238 F700                  		move.w	($FFFFF700).w,d1
0000DE34 0441 0080                  		subi.w	#$80,d1
0000DE38 0241 FF80                  		andi.w	#$FF80,d1
0000DE3C 9041                       		sub.w	d1,d0
0000DE3E 0C40 0280                  		cmpi.w	#$280,d0
0000DE42 6200 FB56                  		bhi.w	DeleteObject
0000DE46 4E75                       		rts	
0000DE48                            ; ===========================================================================
0000DE48 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000DE4A 0000                       		dc.w Obj41_Up-Obj41_Index
0000DE4C 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000DE4E 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000DE50 0000                       		dc.w Obj41_LR-Obj41_Index
0000DE52 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000DE54 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000DE56 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000DE58 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000DE5A 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000DE5C                            
0000DE5C F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000DE5E F600                       		dc.w -$A00		; power	of yellow spring
0000DE60                            ; ===========================================================================
0000DE60                            
0000DE60                            Obj41_Main:				; XREF: Obj41_Index
0000DE60 5428 0024                  		addq.b	#2,$24(a0)
0000DE64 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000DE6C 317C 0523 0002             		move.w	#$523,2(a0)
0000DE72 0028 0004 0001             		ori.b	#4,1(a0)
0000DE78 117C 0010 0019             		move.b	#$10,$19(a0)
0000DE7E 117C 0004 0018             		move.b	#4,$18(a0)
0000DE84 1028 0028                  		move.b	$28(a0),d0
0000DE88 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000DE8C 6700                       		beq.s	loc_DB54	; if not, branch
0000DE8E 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000DE94 117C 0001 001C             		move.b	#1,$1C(a0)
0000DE9A 117C 0003 001A             		move.b	#3,$1A(a0)
0000DEA0 317C 0533 0002             		move.w	#$533,2(a0)
0000DEA6 117C 0008 0019             		move.b	#8,$19(a0)
0000DEAC                            
0000DEAC                            loc_DB54:
0000DEAC 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000DEB0 6700                       		beq.s	loc_DB66	; if not, branch
0000DEB2 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000DEB8 08E8 0001 0022             		bset	#1,$22(a0)
0000DEBE                            
0000DEBE                            loc_DB66:
0000DEBE 0800 0001                  		btst	#1,d0
0000DEC2 6700                       		beq.s	loc_DB72
0000DEC4 08E8 0005 0002             		bset	#5,2(a0)
0000DECA                            
0000DECA                            loc_DB72:
0000DECA 0240 000F                  		andi.w	#$F,d0
0000DECE 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000DED4 4E75                       		rts	
0000DED6                            ; ===========================================================================
0000DED6                            
0000DED6                            Obj41_Up:				; XREF: Obj41_Index
0000DED6 323C 001B                  		move.w	#$1B,d1
0000DEDA 343C 0008                  		move.w	#8,d2
0000DEDE 363C 0010                  		move.w	#$10,d3
0000DEE2 3828 0008                  		move.w	8(a0),d4
0000DEE6 6100 0000                  		bsr.w	SolidObject
0000DEEA 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000DEEE 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000DEF0 4E75                       		rts	
0000DEF2                            ; ===========================================================================
0000DEF2                            
0000DEF2                            Obj41_BounceUp:				; XREF: Obj41_Up
0000DEF2 5428 0024                  		addq.b	#2,$24(a0)
0000DEF6 5069 000C                  		addq.w	#8,$C(a1)
0000DEFA 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000DF00 08E9 0001 0022             		bset	#1,$22(a1)
0000DF06 08A9 0003 0022             		bclr	#3,$22(a1)
0000DF0C 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000DF12 137C 0002 0024             		move.b	#2,$24(a1)
0000DF18 08A8 0003 0022             		bclr	#3,$22(a0)
0000DF1E 4228 0025                  		clr.b	$25(a0)
0000DF22 303C 00CC                  		move.w	#$CC,d0
0000DF26 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000DF2C                            
0000DF2C                            Obj41_AniUp:				; XREF: Obj41_Index
0000DF2C 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DF32 6000 CADC                  		bra.w	AnimateSprite
0000DF36                            ; ===========================================================================
0000DF36                            
0000DF36                            Obj41_ResetUp:				; XREF: Obj41_Index
0000DF36 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DF3C 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000DF40 4E75                       		rts	
0000DF42                            ; ===========================================================================
0000DF42                            
0000DF42                            Obj41_LR:				; XREF: Obj41_Index
0000DF42 323C 0013                  		move.w	#$13,d1
0000DF46 343C 000E                  		move.w	#$E,d2
0000DF4A 363C 000F                  		move.w	#$F,d3
0000DF4E 3828 0008                  		move.w	8(a0),d4
0000DF52 6100 0000                  		bsr.w	SolidObject
0000DF56 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DF5C 6600                       		bne.s	loc_DC0C
0000DF5E 117C 0008 0024             		move.b	#8,$24(a0)
0000DF64                            
0000DF64                            loc_DC0C:
0000DF64 0828 0005 0022             		btst	#5,$22(a0)
0000DF6A 6600                       		bne.s	Obj41_BounceLR
0000DF6C 4E75                       		rts	
0000DF6E                            ; ===========================================================================
0000DF6E                            
0000DF6E                            Obj41_BounceLR:				; XREF: Obj41_LR
0000DF6E 5428 0024                  		addq.b	#2,$24(a0)
0000DF72 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000DF78 5069 0008                  		addq.w	#8,8(a1)
0000DF7C 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000DF82 6600                       		bne.s	loc_DC36	; if yes, branch
0000DF84 0469 0010 0008             		subi.w	#$10,8(a1)
0000DF8A 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000DF8E                            
0000DF8E                            loc_DC36:
0000DF8E 337C 000F 003E             		move.w	#$F,$3E(a1)
0000DF94 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DF9A 0869 0000 0022             		bchg	#0,$22(a1)
0000DFA0 0829 0002 0022             		btst	#2,$22(a1)
0000DFA6 6600                       		bne.s	loc_DC56
0000DFA8 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000DFAE                            
0000DFAE                            loc_DC56:
0000DFAE 08A8 0005 0022             		bclr	#5,$22(a0)
0000DFB4 08A9 0005 0022             		bclr	#5,$22(a1)
0000DFBA 303C 00CC                  		move.w	#$CC,d0
0000DFBE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000DFC4                            
0000DFC4                            Obj41_AniLR:				; XREF: Obj41_Index
0000DFC4 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DFCA 6000 CA44                  		bra.w	AnimateSprite
0000DFCE                            ; ===========================================================================
0000DFCE                            
0000DFCE                            Obj41_ResetLR:				; XREF: Obj41_Index
0000DFCE 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000DFD4 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000DFD8 4E75                       		rts	
0000DFDA                            ; ===========================================================================
0000DFDA                            
0000DFDA                            Obj41_Dwn:				; XREF: Obj41_Index
0000DFDA 323C 001B                  		move.w	#$1B,d1
0000DFDE 343C 0008                  		move.w	#8,d2
0000DFE2 363C 0010                  		move.w	#$10,d3
0000DFE6 3828 0008                  		move.w	8(a0),d4
0000DFEA 6100 0000                  		bsr.w	SolidObject
0000DFEE 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DFF4 6600                       		bne.s	loc_DCA4
0000DFF6 117C 000E 0024             		move.b	#$E,$24(a0)
0000DFFC                            
0000DFFC                            loc_DCA4:
0000DFFC 4A28 0025                  		tst.b	$25(a0)
0000E000 6600                       		bne.s	locret_DCAE
0000E002 4A44                       		tst.w	d4
0000E004 6B00                       		bmi.s	Obj41_BounceDwn
0000E006                            
0000E006                            locret_DCAE:
0000E006 4E75                       		rts	
0000E008                            ; ===========================================================================
0000E008                            
0000E008                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E008 5428 0024                  		addq.b	#2,$24(a0)
0000E00C 5169 000C                  		subq.w	#8,$C(a1)
0000E010 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E016 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E01A 08E9 0001 0022             		bset	#1,$22(a1)
0000E020 08A9 0003 0022             		bclr	#3,$22(a1)
0000E026 137C 0002 0024             		move.b	#2,$24(a1)
0000E02C 08A8 0003 0022             		bclr	#3,$22(a0)
0000E032 4228 0025                  		clr.b	$25(a0)
0000E036 303C 00CC                  		move.w	#$CC,d0
0000E03A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E040                            
0000E040                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E040 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E046 6000 C9C8                  		bra.w	AnimateSprite
0000E04A                            ; ===========================================================================
0000E04A                            
0000E04A                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E04A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E050 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E054 4E75                       		rts	
0000E056                            ; ===========================================================================
0000E056                            Ani_obj41:
0000E056                            	include "_anim\obj41.asm"
0000E056                            ; ---------------------------------------------------------------------------
0000E056                            ; Animation script - springs
0000E056                            ; ---------------------------------------------------------------------------
0000E056 0000                       		dc.w byte_DD02-Ani_obj41
0000E058 0000                       		dc.w byte_DD0E-Ani_obj41
0000E05A 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E066 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E072                            		even
0000E072                            		even
0000E072                            
0000E072                            ; ---------------------------------------------------------------------------
0000E072                            ; Sprite mappings - springs
0000E072                            ; ---------------------------------------------------------------------------
0000E072                            Map_obj41:
0000E072                            	include "_maps\obj41.asm"
0000E072                            ; ---------------------------------------------------------------------------
0000E072                            ; Sprite mappings - springs
0000E072                            ; ---------------------------------------------------------------------------
0000E072 0000                       		dc.w byte_DD26-Map_obj41
0000E074 0000                       		dc.w byte_DD31-Map_obj41
0000E076 0000                       		dc.w byte_DD37-Map_obj41
0000E078 0000                       		dc.w byte_DD47-Map_obj41
0000E07A 0000                       		dc.w byte_DD4D-Map_obj41
0000E07C 0000                       		dc.w byte_DD53-Map_obj41
0000E07E 02                         byte_DD26:	dc.b 2
0000E07F F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E084 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E089 01                         byte_DD31:	dc.b 1
0000E08A 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E08F 03                         byte_DD37:	dc.b 3
0000E090 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E095 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E09A 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E09F 01                         byte_DD47:	dc.b 1
0000E0A0 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E0A5 01                         byte_DD4D:	dc.b 1
0000E0A6 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E0AB 04                         byte_DD53:	dc.b 4
0000E0AC F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E0B1 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E0B6 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E0BB 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E0C0                            		even
0000E0C0                            		even
0000E0C0                            
0000E0C0                            ; ===========================================================================
0000E0C0                            ; ---------------------------------------------------------------------------
0000E0C0                            ; Object 42 - Newtron enemy (GHZ)
0000E0C0                            ; ---------------------------------------------------------------------------
0000E0C0                            
0000E0C0                            Obj42:					; XREF: Obj_Index
0000E0C0 7000                       		moveq	#0,d0
0000E0C2 1028 0024                  		move.b	$24(a0),d0
0000E0C6 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E0CA 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E0CE                            ; ===========================================================================
0000E0CE 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E0D0 0000                       		dc.w Obj42_Action-Obj42_Index
0000E0D2 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E0D4                            ; ===========================================================================
0000E0D4                            
0000E0D4                            Obj42_Main:				; XREF: Obj42_Index
0000E0D4 5428 0024                  		addq.b	#2,$24(a0)
0000E0D8 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E0E0 317C 049B 0002             		move.w	#$49B,2(a0)
0000E0E6 117C 0004 0001             		move.b	#4,1(a0)
0000E0EC 117C 0004 0018             		move.b	#4,$18(a0)
0000E0F2 117C 0014 0019             		move.b	#$14,$19(a0)
0000E0F8 117C 0010 0016             		move.b	#$10,$16(a0)
0000E0FE 117C 0008 0017             		move.b	#8,$17(a0)
0000E104                            
0000E104                            Obj42_Action:				; XREF: Obj42_Index
0000E104 7000                       		moveq	#0,d0
0000E106 1028 0025                  		move.b	$25(a0),d0
0000E10A 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E10E 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E112 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E118 6100 C8F6                  		bsr.w	AnimateSprite
0000E11C 6000 0000                  		bra.w	MarkObjGone
0000E120                            ; ===========================================================================
0000E120 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E122 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E124 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E126 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E128 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E12A                            ; ===========================================================================
0000E12A                            
0000E12A                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E12A 08E8 0000 0022             		bset	#0,$22(a0)
0000E130 3038 D008                  		move.w	($FFFFD008).w,d0
0000E134 9068 0008                  		sub.w	8(a0),d0
0000E138 6400                       		bcc.s	loc_DDEA
0000E13A 4440                       		neg.w	d0
0000E13C 08A8 0000 0022             		bclr	#0,$22(a0)
0000E142                            
0000E142                            loc_DDEA:
0000E142 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E146 6400                       		bcc.s	locret_DE12	; if not, branch
0000E148 5428 0025                  		addq.b	#2,$25(a0)
0000E14C 117C 0001 001C             		move.b	#1,$1C(a0)
0000E152 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E156 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E158 317C 249B 0002             		move.w	#$249B,2(a0)
0000E15E 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E164 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E16A                            
0000E16A                            locret_DE12:
0000E16A 4E75                       		rts	
0000E16C                            ; ===========================================================================
0000E16C                            
0000E16C                            Obj42_Type00:				; XREF: Obj42_Index2
0000E16C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E172 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E174 08E8 0000 0022             		bset	#0,$22(a0)
0000E17A 3038 D008                  		move.w	($FFFFD008).w,d0
0000E17E 9068 0008                  		sub.w	8(a0),d0
0000E182 6400                       		bcc.s	locret_DE32
0000E184 08A8 0000 0022             		bclr	#0,$22(a0)
0000E18A                            
0000E18A                            locret_DE32:
0000E18A 4E75                       		rts	
0000E18C                            ; ===========================================================================
0000E18C                            
0000E18C                            Obj42_Fall:				; XREF: Obj42_Type00
0000E18C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E192 6600                       		bne.s	loc_DE42
0000E194 117C 000C 0020             		move.b	#$C,$20(a0)
0000E19A                            
0000E19A                            loc_DE42:
0000E19A 6100 F770                  		bsr.w	ObjectFall
0000E19E 6100 0000                  		bsr.w	ObjHitFloor
0000E1A2 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E1A4 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E1A6 D368 000C                  		add.w	d1,$C(a0)
0000E1AA 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E1B0 5428 0025                  		addq.b	#2,$25(a0)
0000E1B4 117C 0002 001C             		move.b	#2,$1C(a0)
0000E1BA 0828 0005 0002             		btst	#5,2(a0)
0000E1C0 6700                       		beq.s	Obj42_Move
0000E1C2 5228 001C                  		addq.b	#1,$1C(a0)
0000E1C6                            
0000E1C6                            Obj42_Move:
0000E1C6 117C 000D 0020             		move.b	#$D,$20(a0)
0000E1CC 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E1D2 0828 0000 0022             		btst	#0,$22(a0)
0000E1D8 6600                       		bne.s	locret_DE86
0000E1DA 4468 0010                  		neg.w	$10(a0)
0000E1DE                            
0000E1DE                            locret_DE86:
0000E1DE 4E75                       		rts	
0000E1E0                            ; ===========================================================================
0000E1E0                            
0000E1E0                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E1E0 6100 F756                  		bsr.w	SpeedToPos
0000E1E4 6100 0000                  		bsr.w	ObjHitFloor
0000E1E8 0C41 FFF8                  		cmpi.w	#-8,d1
0000E1EC 6D00                       		blt.s	loc_DEA2
0000E1EE 0C41 000C                  		cmpi.w	#$C,d1
0000E1F2 6C00                       		bge.s	loc_DEA2
0000E1F4 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E1F8 4E75                       		rts	
0000E1FA                            ; ===========================================================================
0000E1FA                            
0000E1FA                            loc_DEA2:
0000E1FA 5428 0025                  		addq.b	#2,$25(a0)
0000E1FE 4E75                       		rts	
0000E200                            ; ===========================================================================
0000E200                            
0000E200                            Obj42_Speed:				; XREF: Obj42_Index2
0000E200 6100 F736                  		bsr.w	SpeedToPos
0000E204 4E75                       		rts	
0000E206                            ; ===========================================================================
0000E206                            
0000E206                            Obj42_Type01:				; XREF: Obj42_Index2
0000E206 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E20C 6600                       		bne.s	Obj42_FireMissile
0000E20E 117C 000C 0020             		move.b	#$C,$20(a0)
0000E214                            
0000E214                            Obj42_FireMissile:
0000E214 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E21A 6600                       		bne.s	locret_DF14
0000E21C 4A28 0032                  		tst.b	$32(a0)
0000E220 6600                       		bne.s	locret_DF14
0000E222 117C 0001 0032             		move.b	#1,$32(a0)
0000E228 6100 FBBA                  		bsr.w	SingleObjLoad
0000E22C 6600                       		bne.s	locret_DF14
0000E22E 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E232 3368 0008 0008             		move.w	8(a0),8(a1)
0000E238 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E23E 5169 000C                  		subq.w	#8,$C(a1)
0000E242 337C 0200 0010             		move.w	#$200,$10(a1)
0000E248 303C 0014                  		move.w	#$14,d0
0000E24C 0828 0000 0022             		btst	#0,$22(a0)
0000E252 6600                       		bne.s	loc_DF04
0000E254 4440                       		neg.w	d0
0000E256 4469 0010                  		neg.w	$10(a1)
0000E25A                            
0000E25A                            loc_DF04:
0000E25A D169 0008                  		add.w	d0,8(a1)
0000E25E 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E264 137C 0001 0028             		move.b	#1,$28(a1)
0000E26A                            
0000E26A                            locret_DF14:
0000E26A 4E75                       		rts	
0000E26C                            ; ===========================================================================
0000E26C                            
0000E26C                            Obj42_Delete:				; XREF: Obj42_Index
0000E26C 6000 F72C                  		bra.w	DeleteObject
0000E270                            ; ===========================================================================
0000E270                            Ani_obj42:
0000E270                            	include "_anim\obj42.asm"
0000E270                            ; ---------------------------------------------------------------------------
0000E270                            ; Animation script - Newtron enemy
0000E270                            ; ---------------------------------------------------------------------------
0000E270 0000                       		dc.w byte_DF24-Ani_obj42
0000E272 0000                       		dc.w byte_DF28-Ani_obj42
0000E274 0000                       		dc.w byte_DF30-Ani_obj42
0000E276 0000                       		dc.w byte_DF34-Ani_obj42
0000E278 0000                       		dc.w byte_DF38-Ani_obj42
0000E27A 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E27E 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E286 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E28A 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E28E 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E298                            		even
0000E298                            		even
0000E298                            
0000E298                            ; ---------------------------------------------------------------------------
0000E298                            ; Sprite mappings - Newtron enemy (GHZ)
0000E298                            ; ---------------------------------------------------------------------------
0000E298                            Map_obj42:
0000E298                            	include "_maps\obj42.asm"
0000E298                            ; ---------------------------------------------------------------------------
0000E298                            ; Sprite mappings - Newtron enemy (GHZ)
0000E298                            ; ---------------------------------------------------------------------------
0000E298 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E29C 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E2A0 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E2A4 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E2A8 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E2AC 0000                       		dc.w byte_DFF8-Map_obj42
0000E2AE 03                         byte_DF58:	dc.b 3
0000E2AF EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E2B4 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E2B9 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E2BE 03                         byte_DF68:	dc.b 3
0000E2BF EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E2C4 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E2C9 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E2CE 03                         byte_DF78:	dc.b 3
0000E2CF EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E2D4 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E2D9 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E2DE 04                         byte_DF88:	dc.b 4
0000E2DF EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E2E4 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E2E9 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E2EE 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E2F3 03                         byte_DF9D:	dc.b 3
0000E2F4 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E2F9 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E2FE 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E303 02                         byte_DFAD:	dc.b 2
0000E304 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E309 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E30E 03                         byte_DFB8:	dc.b 3
0000E30F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E314 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E319 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E31E 03                         byte_DFC8:	dc.b 3
0000E31F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E324 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E329 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E32E 03                         byte_DFD8:	dc.b 3
0000E32F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E334 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E339 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E33E 03                         byte_DFE8:	dc.b 3
0000E33F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E344 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E349 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E34E 00                         byte_DFF8:	dc.b 0
0000E350 00                         		even
0000E350 00                         		even
0000E350                            
0000E350                            ; ===========================================================================
0000E350                            ; ---------------------------------------------------------------------------
0000E350                            ; Object 43 - Roller enemy (SYZ)
0000E350                            ; ---------------------------------------------------------------------------
0000E350                            
0000E350                            Obj43:					; XREF: Obj_Index
0000E350 7000                       		moveq	#0,d0
0000E352 1028 0024                  		move.b	$24(a0),d0
0000E356 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E35A 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E35E                            ; ===========================================================================
0000E35E 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E360 0000                       		dc.w Obj43_Action-Obj43_Index
0000E362                            ; ===========================================================================
0000E362                            
0000E362                            Obj43_Main:				; XREF: Obj43_Index
0000E362 117C 000E 0016             		move.b	#$E,$16(a0)
0000E368 117C 0008 0017             		move.b	#8,$17(a0)
0000E36E 6100 F59C                  		bsr.w	ObjectFall
0000E372 6100 0000                  		bsr.w	ObjHitFloor
0000E376 4A41                       		tst.w	d1
0000E378 6A00                       		bpl.s	locret_E052
0000E37A D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E37E 317C 0000 0012             		move.w	#0,$12(a0)
0000E384 5428 0024                  		addq.b	#2,$24(a0)
0000E388 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E390 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E396 117C 0004 0001             		move.b	#4,1(a0)
0000E39C 117C 0004 0018             		move.b	#4,$18(a0)
0000E3A2 117C 0010 0019             		move.b	#$10,$19(a0)
0000E3A8                            
0000E3A8                            locret_E052:
0000E3A8 4E75                       		rts	
0000E3AA                            ; ===========================================================================
0000E3AA                            
0000E3AA                            Obj43_Action:				; XREF: Obj43_Index
0000E3AA 7000                       		moveq	#0,d0
0000E3AC 1028 0025                  		move.b	$25(a0),d0
0000E3B0 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E3B4 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E3B8 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E3BE 6100 C650                  		bsr.w	AnimateSprite
0000E3C2 3028 0008                  		move.w	8(a0),d0
0000E3C6 0240 FF80                  		andi.w	#$FF80,d0
0000E3CA 3238 F700                  		move.w	($FFFFF700).w,d1
0000E3CE 0441 0080                  		subi.w	#$80,d1
0000E3D2 0241 FF80                  		andi.w	#$FF80,d1
0000E3D6 9041                       		sub.w	d1,d0
0000E3D8 0C40 0280                  		cmpi.w	#$280,d0
0000E3DC 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E3E0 6000 F57C                  		bra.w	DisplaySprite
0000E3E4                            ; ===========================================================================
0000E3E4                            
0000E3E4                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E3E4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E3E8 7000                       		moveq	#0,d0
0000E3EA 1028 0023                  		move.b	$23(a0),d0
0000E3EE 6700                       		beq.s	Obj43_Delete
0000E3F0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E3F6                            
0000E3F6                            Obj43_Delete:
0000E3F6 6000 F5A2                  		bra.w	DeleteObject
0000E3FA                            ; ===========================================================================
0000E3FA 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E3FC 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E3FE 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E400 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E402                            ; ===========================================================================
0000E402                            
0000E402                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E402 3038 D008                  		move.w	($FFFFD008).w,d0
0000E406 0440 0100                  		subi.w	#$100,d0
0000E40A 6500                       		bcs.s	loc_E0D2
0000E40C 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E410 6500                       		bcs.s	loc_E0D2
0000E412 5828 0025                  		addq.b	#4,$25(a0)
0000E416 117C 0002 001C             		move.b	#2,$1C(a0)
0000E41C 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E422 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E428                            
0000E428                            loc_E0D2:
0000E428 588F                       		addq.l	#4,sp
0000E42A 4E75                       		rts	
0000E42C                            ; ===========================================================================
0000E42C                            
0000E42C                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E42C 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E432 6700                       		beq.s	loc_E0F8
0000E434 5368 0030                  		subq.w	#1,$30(a0)
0000E438 6A00                       		bpl.s	locret_E0F6
0000E43A 117C 0001 001C             		move.b	#1,$1C(a0)
0000E440 317C 0700 0010             		move.w	#$700,$10(a0)
0000E446 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E44C                            
0000E44C                            locret_E0F6:
0000E44C 4E75                       		rts	
0000E44E                            ; ===========================================================================
0000E44E                            
0000E44E                            loc_E0F8:
0000E44E 5428 0025                  		addq.b	#2,$25(a0)
0000E452 4E75                       		rts	
0000E454                            ; ===========================================================================
0000E454                            
0000E454                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E454 6100 0000                  		bsr.w	Obj43_Stop
0000E458 6100 F4DE                  		bsr.w	SpeedToPos
0000E45C 6100 0000                  		bsr.w	ObjHitFloor
0000E460 0C41 FFF8                  		cmpi.w	#-8,d1
0000E464 6D00                       		blt.s	Obj43_Jump
0000E466 0C41 000C                  		cmpi.w	#$C,d1
0000E46A 6C00                       		bge.s	Obj43_Jump
0000E46C D368 000C                  		add.w	d1,$C(a0)
0000E470 4E75                       		rts	
0000E472                            ; ===========================================================================
0000E472                            
0000E472                            Obj43_Jump:
0000E472 5428 0025                  		addq.b	#2,$25(a0)
0000E476 08E8 0000 0032             		bset	#0,$32(a0)
0000E47C 6700                       		beq.s	locret_E12E
0000E47E 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E484                            
0000E484                            locret_E12E:
0000E484 4E75                       		rts	
0000E486                            ; ===========================================================================
0000E486                            
0000E486                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E486 6100 F484                  		bsr.w	ObjectFall
0000E48A 4A68 0012                  		tst.w	$12(a0)
0000E48E 6B00                       		bmi.s	locret_E150
0000E490 6100 0000                  		bsr.w	ObjHitFloor
0000E494 4A41                       		tst.w	d1
0000E496 6A00                       		bpl.s	locret_E150
0000E498 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E49C 5528 0025                  		subq.b	#2,$25(a0)
0000E4A0 317C 0000 0012             		move.w	#0,$12(a0)
0000E4A6                            
0000E4A6                            locret_E150:
0000E4A6 4E75                       		rts	
0000E4A8                            
0000E4A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E4A8                            
0000E4A8                            
0000E4A8                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E4A8 4A28 0032                  		tst.b	$32(a0)
0000E4AC 6B00                       		bmi.s	locret_E188
0000E4AE 3038 D008                  		move.w	($FFFFD008).w,d0
0000E4B2 0440 0030                  		subi.w	#$30,d0
0000E4B6 9068 0008                  		sub.w	8(a0),d0
0000E4BA 6400                       		bcc.s	locret_E188
0000E4BC 117C 0000 001C             		move.b	#0,$1C(a0)
0000E4C2 117C 000E 0020             		move.b	#$E,$20(a0)
0000E4C8 4268 0010                  		clr.w	$10(a0)
0000E4CC 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E4D2 117C 0002 0025             		move.b	#2,$25(a0)
0000E4D8 08E8 0007 0032             		bset	#7,$32(a0)
0000E4DE                            
0000E4DE                            locret_E188:
0000E4DE 4E75                       		rts	
0000E4E0                            ; End of function Obj43_Stop
0000E4E0                            
0000E4E0                            ; ===========================================================================
0000E4E0                            Ani_obj43:
0000E4E0                            	include "_anim\obj43.asm"
0000E4E0                            ; ---------------------------------------------------------------------------
0000E4E0                            ; Animation script - Roller enemy
0000E4E0                            ; ---------------------------------------------------------------------------
0000E4E0 0000                       		dc.w byte_E190-Ani_obj43
0000E4E2 0000                       		dc.w byte_E196-Ani_obj43
0000E4E4 0000                       		dc.w byte_E19C-Ani_obj43
0000E4E6 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E4EC 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E4F2 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E4F8 00                         		even
0000E4F8 00                         		even
0000E4F8                            
0000E4F8                            ; ---------------------------------------------------------------------------
0000E4F8                            ; Sprite mappings - Roller enemy (SYZ)
0000E4F8                            ; ---------------------------------------------------------------------------
0000E4F8                            Map_obj43:
0000E4F8                            	include "_maps\obj43.asm"
0000E4F8                            ; ---------------------------------------------------------------------------
0000E4F8                            ; Sprite mappings - Roller enemy (SYZ)
0000E4F8                            ; ---------------------------------------------------------------------------
0000E4F8 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E4FC 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E500 0000                       		dc.w byte_E1CE-Map_obj43
0000E502 02                         byte_E1AC:	dc.b 2
0000E503 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E508 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E50D 02                         byte_E1B7:	dc.b 2
0000E50E E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E513 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E518 01                         byte_E1C2:	dc.b 1
0000E519 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E51E 01                         byte_E1C8:	dc.b 1
0000E51F F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E524 01                         byte_E1CE:	dc.b 1
0000E525 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E52A                            		even
0000E52A                            		even
0000E52A                            
0000E52A                            ; ===========================================================================
0000E52A                            ; ---------------------------------------------------------------------------
0000E52A                            ; Object 44 - walls (GHZ)
0000E52A                            ; ---------------------------------------------------------------------------
0000E52A                            
0000E52A                            Obj44:					; XREF: Obj_Index
0000E52A 7000                       		moveq	#0,d0
0000E52C 1028 0024                  		move.b	$24(a0),d0
0000E530 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E534 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E538                            ; ===========================================================================
0000E538 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E53A 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E53C 0000                       		dc.w Obj44_Display-Obj44_Index
0000E53E                            ; ===========================================================================
0000E53E                            
0000E53E                            Obj44_Main:				; XREF: Obj44_Index
0000E53E 5428 0024                  		addq.b	#2,$24(a0)
0000E542 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E54A 317C 434C 0002             		move.w	#$434C,2(a0)
0000E550 0028 0004 0001             		ori.b	#4,1(a0)
0000E556 117C 0008 0019             		move.b	#8,$19(a0)
0000E55C 117C 0006 0018             		move.b	#6,$18(a0)
0000E562 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E568 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E56E 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E570 5428 0024                  		addq.b	#2,$24(a0)
0000E574 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E576                            ; ===========================================================================
0000E576                            
0000E576                            Obj44_Solid:				; XREF: Obj44_Index
0000E576 323C 0013                  		move.w	#$13,d1
0000E57A 343C 0028                  		move.w	#$28,d2
0000E57E 6100 A7FE                  		bsr.w	Obj44_SolidWall
0000E582                            
0000E582                            Obj44_Display:				; XREF: Obj44_Index
0000E582 6100 F3DA                  		bsr.w	DisplaySprite
0000E586 3028 0008                  		move.w	8(a0),d0
0000E58A 0240 FF80                  		andi.w	#$FF80,d0
0000E58E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E592 0441 0080                  		subi.w	#$80,d1
0000E596 0241 FF80                  		andi.w	#$FF80,d1
0000E59A 9041                       		sub.w	d1,d0
0000E59C 0C40 0280                  		cmpi.w	#$280,d0
0000E5A0 6200 F3F8                  		bhi.w	DeleteObject
0000E5A4 4E75                       		rts	
0000E5A6                            ; ===========================================================================
0000E5A6                            ; ---------------------------------------------------------------------------
0000E5A6                            ; Sprite mappings - walls (GHZ)
0000E5A6                            ; ---------------------------------------------------------------------------
0000E5A6                            Map_obj44:
0000E5A6                            	include "_maps\obj44.asm"
0000E5A6                            ; ---------------------------------------------------------------------------
0000E5A6                            ; Sprite mappings - walls (GHZ)
0000E5A6                            ; ---------------------------------------------------------------------------
0000E5A6 0000                       		dc.w byte_E256-Map_obj44
0000E5A8 0000                       		dc.w byte_E26B-Map_obj44
0000E5AA 0000                       		dc.w byte_E280-Map_obj44
0000E5AC 04                         byte_E256:	dc.b 4
0000E5AD E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E5B2 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E5B7 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E5BC 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E5C1 04                         byte_E26B:	dc.b 4
0000E5C2 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E5C7 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E5CC 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E5D1 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E5D6 04                         byte_E280:	dc.b 4
0000E5D7 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E5DC F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E5E1 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E5E6 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E5EC 00                         		even
0000E5EC 00                         		even
0000E5EC                            
0000E5EC                            ; ===========================================================================
0000E5EC                            ; ---------------------------------------------------------------------------
0000E5EC                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E5EC                            ; ---------------------------------------------------------------------------
0000E5EC                            
0000E5EC                            Obj13:					; XREF: Obj_Index
0000E5EC 7000                       		moveq	#0,d0
0000E5EE 1028 0024                  		move.b	$24(a0),d0
0000E5F2 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E5F6 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E5FA 6000 0000                  		bra.w	Obj14_ChkDel
0000E5FE                            ; ===========================================================================
0000E5FE 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E600 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E602                            ; ---------------------------------------------------------------------------
0000E602                            ;
0000E602                            ; Lava ball production rates
0000E602                            ;
0000E602 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E608                            ; ===========================================================================
0000E608                            
0000E608                            Obj13_Main:				; XREF: Obj13_Index
0000E608 5428 0024                  		addq.b	#2,$24(a0)
0000E60C 1028 0028                  		move.b	$28(a0),d0
0000E610 E848                       		lsr.w	#4,d0
0000E612 0240 000F                  		andi.w	#$F,d0
0000E616 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E61C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E622 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E628                            
0000E628                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E628 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E62C 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E62E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E634 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E638 6600                       		bne.s	locret_E302
0000E63A 6100 F7A8                  		bsr.w	SingleObjLoad
0000E63E 6600                       		bne.s	locret_E302
0000E640 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E644 3368 0008 0008             		move.w	8(a0),8(a1)
0000E64A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E650 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E656                            
0000E656                            locret_E302:
0000E656 4E75                       		rts	
0000E658                            ; ===========================================================================
0000E658                            ; ---------------------------------------------------------------------------
0000E658                            ; Object 14 - lava balls (MZ, SLZ)
0000E658                            ; ---------------------------------------------------------------------------
0000E658                            
0000E658                            Obj14:					; XREF: Obj_Index
0000E658 7000                       		moveq	#0,d0
0000E65A 1028 0024                  		move.b	$24(a0),d0
0000E65E 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E662 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E666 6000 F2F6                  		bra.w	DisplaySprite
0000E66A                            ; ===========================================================================
0000E66A 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E66C 0000                       		dc.w Obj14_Action-Obj14_Index
0000E66E 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E670                            
0000E670 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E67A 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E682                            ; ===========================================================================
0000E682                            
0000E682                            Obj14_Main:				; XREF: Obj14_Index
0000E682 5428 0024                  		addq.b	#2,$24(a0)
0000E686 117C 0008 0016             		move.b	#8,$16(a0)
0000E68C 117C 0008 0017             		move.b	#8,$17(a0)
0000E692 217C 0000 B622 0004        		move.l	#Map_obj14,4(a0)
0000E69A 317C 0345 0002             		move.w	#$345,2(a0)
0000E6A0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E6A6 6600                       		bne.s	loc_E35A
0000E6A8 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E6AE                            
0000E6AE                            loc_E35A:
0000E6AE 117C 0004 0001             		move.b	#4,1(a0)
0000E6B4 117C 0003 0018             		move.b	#3,$18(a0)
0000E6BA 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E6C0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E6C6 4A28 0029                  		tst.b	$29(a0)
0000E6CA 6700                       		beq.s	Obj14_SetSpeed
0000E6CC 5428 0018                  		addq.b	#2,$18(a0)
0000E6D0                            
0000E6D0                            Obj14_SetSpeed:
0000E6D0 7000                       		moveq	#0,d0
0000E6D2 1028 0028                  		move.b	$28(a0),d0
0000E6D6 D040                       		add.w	d0,d0
0000E6D8 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E6DE 117C 0008 0019             		move.b	#8,$19(a0)
0000E6E4 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E6EA 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E6EC 117C 0010 0019             		move.b	#$10,$19(a0)
0000E6F2 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E6F8 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E6FE 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E704                            
0000E704                            Obj14_PlaySnd:
0000E704 303C 00AE                  		move.w	#$AE,d0
0000E708 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E70E                            
0000E70E                            Obj14_Action:				; XREF: Obj14_Index
0000E70E 7000                       		moveq	#0,d0
0000E710 1028 0028                  		move.b	$28(a0),d0
0000E714 D040                       		add.w	d0,d0
0000E716 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E71A 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E71E 6100 F218                  		bsr.w	SpeedToPos
0000E722 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E728 6100 C2E6                  		bsr.w	AnimateSprite
0000E72C                            
0000E72C                            Obj14_ChkDel:				; XREF: Obj13
0000E72C 3028 0008                  		move.w	8(a0),d0
0000E730 0240 FF80                  		andi.w	#$FF80,d0
0000E734 3238 F700                  		move.w	($FFFFF700).w,d1
0000E738 0441 0080                  		subi.w	#$80,d1
0000E73C 0241 FF80                  		andi.w	#$FF80,d1
0000E740 9041                       		sub.w	d1,d0
0000E742 0C40 0280                  		cmpi.w	#$280,d0
0000E746 6200 F252                  		bhi.w	DeleteObject
0000E74A 4E75                       		rts	
0000E74C                            ; ===========================================================================
0000E74C 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E750 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E754 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E758 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E75C 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E75E                            ; ===========================================================================
0000E75E                            ; lavaball types 00-03 fly up and fall back down
0000E75E                            
0000E75E                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E75E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E764 3028 0030                  		move.w	$30(a0),d0
0000E768 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E76C 6400                       		bcc.s	loc_E41E	; if not, branch
0000E76E 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E772                            
0000E772                            loc_E41E:
0000E772 08A8 0001 0022             		bclr	#1,$22(a0)
0000E778 4A68 0012                  		tst.w	$12(a0)
0000E77C 6A00                       		bpl.s	locret_E430
0000E77E 08E8 0001 0022             		bset	#1,$22(a0)
0000E784                            
0000E784                            locret_E430:
0000E784 4E75                       		rts	
0000E786                            ; ===========================================================================
0000E786                            ; lavaball type	04 flies up until it hits the ceiling
0000E786                            
0000E786                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E786 08E8 0001 0022             		bset	#1,$22(a0)
0000E78C 6100 0000                  		bsr.w	ObjHitCeiling
0000E790 4A41                       		tst.w	d1
0000E792 6A00                       		bpl.s	locret_E452
0000E794 117C 0008 0028             		move.b	#8,$28(a0)
0000E79A 117C 0001 001C             		move.b	#1,$1C(a0)
0000E7A0 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E7A6                            
0000E7A6                            locret_E452:
0000E7A6 4E75                       		rts	
0000E7A8                            ; ===========================================================================
0000E7A8                            ; lavaball type	05 falls down until it hits the	floor
0000E7A8                            
0000E7A8                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E7A8 08A8 0001 0022             		bclr	#1,$22(a0)
0000E7AE 6100 0000                  		bsr.w	ObjHitFloor
0000E7B2 4A41                       		tst.w	d1
0000E7B4 6A00                       		bpl.s	locret_E474
0000E7B6 117C 0008 0028             		move.b	#8,$28(a0)
0000E7BC 117C 0001 001C             		move.b	#1,$1C(a0)
0000E7C2 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000E7C8                            
0000E7C8                            locret_E474:
0000E7C8 4E75                       		rts	
0000E7CA                            ; ===========================================================================
0000E7CA                            ; lavaball types 06-07 move sideways
0000E7CA                            
0000E7CA                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000E7CA 08E8 0000 0022             		bset	#0,$22(a0)
0000E7D0 76F8                       		moveq	#-8,d3
0000E7D2 6100 0000                  		bsr.w	ObjHitWallLeft
0000E7D6 4A41                       		tst.w	d1
0000E7D8 6A00                       		bpl.s	locret_E498
0000E7DA 117C 0008 0028             		move.b	#8,$28(a0)
0000E7E0 117C 0003 001C             		move.b	#3,$1C(a0)
0000E7E6 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E7EC                            
0000E7EC                            locret_E498:
0000E7EC 4E75                       		rts	
0000E7EE                            ; ===========================================================================
0000E7EE                            
0000E7EE                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000E7EE 08A8 0000 0022             		bclr	#0,$22(a0)
0000E7F4 7608                       		moveq	#8,d3
0000E7F6 6100 0000                  		bsr.w	ObjHitWallRight
0000E7FA 4A41                       		tst.w	d1
0000E7FC 6A00                       		bpl.s	locret_E4BC
0000E7FE 117C 0008 0028             		move.b	#8,$28(a0)
0000E804 117C 0003 001C             		move.b	#3,$1C(a0)
0000E80A 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E810                            
0000E810                            locret_E4BC:
0000E810 4E75                       		rts	
0000E812                            ; ===========================================================================
0000E812                            
0000E812                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000E812 4E75                       		rts	
0000E814                            ; ===========================================================================
0000E814                            
0000E814                            Obj14_Delete:				; XREF: Obj14_Index
0000E814 6000 F184                  		bra.w	DeleteObject
0000E818                            ; ===========================================================================
0000E818                            Ani_obj14:
0000E818                            	include "_anim\obj14.asm"
0000E818                            ; ---------------------------------------------------------------------------
0000E818                            ; Animation script - lava balls
0000E818                            ; ---------------------------------------------------------------------------
0000E818 0000                       		dc.w byte_E4CC-Ani_obj14
0000E81A 0000                       		dc.w byte_E4D2-Ani_obj14
0000E81C 0000                       		dc.w byte_E4D6-Ani_obj14
0000E81E 0000                       		dc.w byte_E4DC-Ani_obj14
0000E820 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000E826 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000E82A 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000E830 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000E834                            		even
0000E834                            		even
0000E834                            
0000E834                            ; ===========================================================================
0000E834                            ; ---------------------------------------------------------------------------
0000E834                            ; Object 6D - flame thrower (SBZ)
0000E834                            ; ---------------------------------------------------------------------------
0000E834                            
0000E834                            Obj6D:					; XREF: Obj_Index
0000E834 7000                       		moveq	#0,d0
0000E836 1028 0024                  		move.b	$24(a0),d0
0000E83A 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000E83E 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000E842                            ; ===========================================================================
0000E842 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000E844 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000E846                            ; ===========================================================================
0000E846                            
0000E846                            Obj6D_Main:				; XREF: Obj6D_Index
0000E846 5428 0024                  		addq.b	#2,$24(a0)
0000E84A 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000E852 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000E858 0028 0004 0001             		ori.b	#4,1(a0)
0000E85E 117C 0001 0018             		move.b	#1,$18(a0)
0000E864 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E86A 117C 000C 0019             		move.b	#$C,$19(a0)
0000E870 1028 0028                  		move.b	$28(a0),d0
0000E874 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000E878 D040                       		add.w	d0,d0		; multiply by 2
0000E87A 3140 0030                  		move.w	d0,$30(a0)
0000E87E 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000E882 1028 0028                  		move.b	$28(a0),d0
0000E886 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000E88A EB48                       		lsl.w	#5,d0		; multiply by $20
0000E88C 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000E890 117C 000A 0036             		move.b	#$A,$36(a0)
0000E896 0828 0001 0022             		btst	#1,$22(a0)
0000E89C 6700                       		beq.s	Obj6D_Action
0000E89E 117C 0002 001C             		move.b	#2,$1C(a0)
0000E8A4 117C 0015 0036             		move.b	#$15,$36(a0)
0000E8AA                            
0000E8AA                            Obj6D_Action:				; XREF: Obj6D_Index
0000E8AA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000E8AE 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000E8B0 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000E8B6 0868 0000 001C             		bchg	#0,$1C(a0)
0000E8BC 6700                       		beq.s	loc_E57A
0000E8BE 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000E8C4 303C 00B3                  		move.w	#$B3,d0
0000E8C8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000E8CE                            
0000E8CE                            loc_E57A:
0000E8CE 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000E8D4 6100 C13A                  		bsr.w	AnimateSprite
0000E8D8 117C 0000 0020             		move.b	#0,$20(a0)
0000E8DE 1028 0036                  		move.b	$36(a0),d0
0000E8E2 B028 001A                  		cmp.b	$1A(a0),d0
0000E8E6 6600                       		bne.s	Obj6D_ChkDel
0000E8E8 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000E8EE                            
0000E8EE                            Obj6D_ChkDel:
0000E8EE 3028 0008                  		move.w	8(a0),d0
0000E8F2 0240 FF80                  		andi.w	#$FF80,d0
0000E8F6 3238 F700                  		move.w	($FFFFF700).w,d1
0000E8FA 0441 0080                  		subi.w	#$80,d1
0000E8FE 0241 FF80                  		andi.w	#$FF80,d1
0000E902 9041                       		sub.w	d1,d0
0000E904 0C40 0280                  		cmpi.w	#$280,d0
0000E908 6200 F090                  		bhi.w	DeleteObject
0000E90C 6000 F050                  		bra.w	DisplaySprite
0000E910                            ; ===========================================================================
0000E910                            Ani_obj6D:
0000E910                            	include "_anim\obj6D.asm"
0000E910                            ; ---------------------------------------------------------------------------
0000E910                            ; Animation script - flamethrower (SBZ)
0000E910                            ; ---------------------------------------------------------------------------
0000E910 0000                       		dc.w byte_E5C4-Ani_obj6D
0000E912 0000                       		dc.w byte_E5D2-Ani_obj6D
0000E914 0000                       		dc.w byte_E5DC-Ani_obj6D
0000E916 0000                       		dc.w byte_E5EA-Ani_obj6D
0000E918 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000E926 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000E930 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000E93E 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000E948                            		even
0000E948                            		even
0000E948                            
0000E948                            ; ---------------------------------------------------------------------------
0000E948                            ; Sprite mappings - flame thrower (SBZ)
0000E948                            ; ---------------------------------------------------------------------------
0000E948                            Map_obj6D:
0000E948                            	include "_maps\obj6D.asm"
0000E948                            ; ---------------------------------------------------------------------------
0000E948                            ; Sprite mappings - flame thrower (SBZ)
0000E948                            ; ---------------------------------------------------------------------------
0000E948 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000E94C 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000E950 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000E954 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000E958 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000E95C 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000E960 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000E964 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000E968 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000E96C 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000E970 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000E974 01                         byte_E620:	dc.b 1
0000E975 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E97A 02                         byte_E626:	dc.b 2
0000E97B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E980 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E985 02                         byte_E631:	dc.b 2
0000E986 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E98B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E990 03                         byte_E63C:	dc.b 3
0000E991 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E996 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E99B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E9A0 03                         byte_E64C:	dc.b 3
0000E9A1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E9A6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E9AB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E9B0 04                         byte_E65C:	dc.b 4
0000E9B1 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E9B6 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E9BB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E9C0 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E9C5 04                         byte_E671:	dc.b 4
0000E9C6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E9CB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E9D0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E9D5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E9DA 05                         byte_E686:	dc.b 5
0000E9DB F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E9E0 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E9E5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E9EA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E9EF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E9F4 05                         byte_E6A0:	dc.b 5
0000E9F5 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E9FA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E9FF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EA04 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EA09 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EA0E 06                         byte_E6BA:	dc.b 6
0000EA0F E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EA14 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EA19 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EA1E 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EA23 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EA28 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EA2D 06                         byte_E6D9:	dc.b 6
0000EA2E E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EA33 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EA38 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EA3D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EA42 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EA47 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EA4C 01                         byte_E6F8:	dc.b 1
0000EA4D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EA52 02                         byte_E6FE:	dc.b 2
0000EA53 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EA58 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EA5D 02                         byte_E709:	dc.b 2
0000EA5E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EA63 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EA68 03                         byte_E714:	dc.b 3
0000EA69 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EA6E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EA73 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EA78 03                         byte_E724:	dc.b 3
0000EA79 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EA7E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EA83 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EA88 04                         byte_E734:	dc.b 4
0000EA89 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EA8E 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EA93 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EA98 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EA9D 04                         byte_E749:	dc.b 4
0000EA9E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EAA3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EAA8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EAAD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EAB2 05                         byte_E75E:	dc.b 5
0000EAB3 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EAB8 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EABD 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EAC2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EAC7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EACC 05                         byte_E778:	dc.b 5
0000EACD F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EAD2 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EAD7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EADC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EAE1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EAE6 06                         byte_E792:	dc.b 6
0000EAE7 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EAEC F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EAF1 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EAF6 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EAFB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EB00 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EB05 06                         byte_E7B1:	dc.b 6
0000EB06 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EB0B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EB10 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EB15 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EB1A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EB1F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EB24                            		even
0000EB24                            		even
0000EB24                            
0000EB24                            ; ===========================================================================
0000EB24                            ; ---------------------------------------------------------------------------
0000EB24                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EB24                            ; ---------------------------------------------------------------------------
0000EB24                            
0000EB24                            Obj46:					; XREF: Obj_Index
0000EB24 7000                       		moveq	#0,d0
0000EB26 1028 0024                  		move.b	$24(a0),d0
0000EB2A 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000EB2E 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EB32                            ; ===========================================================================
0000EB32 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EB34 0000                       		dc.w Obj46_Action-Obj46_Index
0000EB36                            ; ===========================================================================
0000EB36                            
0000EB36                            Obj46_Main:				; XREF: Obj46_Index
0000EB36 5428 0024                  		addq.b	#2,$24(a0)
0000EB3A 117C 000F 0016             		move.b	#$F,$16(a0)
0000EB40 117C 000F 0017             		move.b	#$F,$17(a0)
0000EB46 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EB4E 317C 4000 0002             		move.w	#$4000,2(a0)
0000EB54 117C 0004 0001             		move.b	#4,1(a0)
0000EB5A 117C 0003 0018             		move.b	#3,$18(a0)
0000EB60 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB66 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EB6C 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EB72                            
0000EB72                            Obj46_Action:				; XREF: Obj46_Index
0000EB72 4A28 0001                  		tst.b	1(a0)
0000EB76 6A00                       		bpl.s	Obj46_ChkDel
0000EB78 7000                       		moveq	#0,d0
0000EB7A 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EB7E 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EB82 D040                       		add.w	d0,d0
0000EB84 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EB88 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EB8C 323C 001B                  		move.w	#$1B,d1
0000EB90 343C 0010                  		move.w	#$10,d2
0000EB94 363C 0011                  		move.w	#$11,d3
0000EB98 3828 0008                  		move.w	8(a0),d4
0000EB9C 6100 0000                  		bsr.w	SolidObject
0000EBA0                            
0000EBA0                            Obj46_ChkDel:
0000EBA0 6100 EDBC                  		bsr.w	DisplaySprite
0000EBA4 3028 0008                  		move.w	8(a0),d0
0000EBA8 0240 FF80                  		andi.w	#$FF80,d0
0000EBAC 3238 F700                  		move.w	($FFFFF700).w,d1
0000EBB0 0441 0080                  		subi.w	#$80,d1
0000EBB4 0241 FF80                  		andi.w	#$FF80,d1
0000EBB8 9041                       		sub.w	d1,d0
0000EBBA 0C40 0280                  		cmpi.w	#$280,d0
0000EBBE 6200 EDDA                  		bhi.w	DeleteObject
0000EBC2 4E75                       		rts	
0000EBC4                            ; ===========================================================================
0000EBC4 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EBC6 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EBC8 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EBCA 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EBCC 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EBCE                            ; ===========================================================================
0000EBCE                            
0000EBCE                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EBCE 4E75                       		rts	
0000EBD0                            ; ===========================================================================
0000EBD0                            
0000EBD0                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EBD0 3038 D008                  		move.w	($FFFFD008).w,d0
0000EBD4 9068 0008                  		sub.w	8(a0),d0
0000EBD8 6400                       		bcc.s	loc_E888
0000EBDA 4440                       		neg.w	d0
0000EBDC                            
0000EBDC                            loc_E888:
0000EBDC 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EBE0 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EBE2 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EBE8                            
0000EBE8                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EBE8 7000                       		moveq	#0,d0
0000EBEA 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EBEE 0828 0003 0028             		btst	#3,$28(a0)
0000EBF4 6700                       		beq.s	loc_E8A8
0000EBF6 4440                       		neg.w	d0
0000EBF8 0640 0010                  		addi.w	#$10,d0
0000EBFC                            
0000EBFC                            loc_E8A8:
0000EBFC 3228 0030                  		move.w	$30(a0),d1
0000EC00 9240                       		sub.w	d0,d1
0000EC02 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000EC06 4E75                       		rts	
0000EC08                            ; ===========================================================================
0000EC08                            
0000EC08                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000EC08 6100 ED2E                  		bsr.w	SpeedToPos
0000EC0C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000EC12 6100 0000                  		bsr.w	ObjHitFloor
0000EC16 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EC18 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EC1C D368 000C                  		add.w	d1,$C(a0)
0000EC20 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EC24 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EC2A 117C 0004 0028             		move.b	#4,$28(a0)
0000EC30 3011                       		move.w	(a1),d0
0000EC32 0240 03FF                  		andi.w	#$3FF,d0
0000EC36 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EC3A 6400                       		bcc.s	locret_E8EE
0000EC3C 117C 0000 0028             		move.b	#0,$28(a0)
0000EC42                            
0000EC42                            locret_E8EE:
0000EC42 4E75                       		rts	
0000EC44                            ; ===========================================================================
0000EC44                            
0000EC44                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EC44 7000                       		moveq	#0,d0
0000EC46 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EC4A E648                       		lsr.w	#3,d0
0000EC4C 3228 0030                  		move.w	$30(a0),d1
0000EC50 9240                       		sub.w	d0,d1
0000EC52 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EC56 4E75                       		rts	
0000EC58                            ; ===========================================================================
0000EC58                            ; ---------------------------------------------------------------------------
0000EC58                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EC58                            ; ---------------------------------------------------------------------------
0000EC58                            Map_obj46:
0000EC58                            	include "_maps\obj46.asm"
0000EC58                            ; ---------------------------------------------------------------------------
0000EC58                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EC58                            ; ---------------------------------------------------------------------------
0000EC58 0000                       		dc.w byte_E906-Map_obj46
0000EC5A 01                         byte_E906:	dc.b 1
0000EC5B F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EC60                            		even
0000EC60                            		even
0000EC60                            
0000EC60                            ; ===========================================================================
0000EC60                            ; ---------------------------------------------------------------------------
0000EC60                            ; Object 12 - lamp (SYZ)
0000EC60                            ; ---------------------------------------------------------------------------
0000EC60                            
0000EC60                            Obj12:					; XREF: Obj_Index
0000EC60 7000                       		moveq	#0,d0
0000EC62 1028 0024                  		move.b	$24(a0),d0
0000EC66 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EC6A 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EC6E                            ; ===========================================================================
0000EC6E 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EC70 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EC72                            ; ===========================================================================
0000EC72                            
0000EC72                            Obj12_Main:				; XREF: Obj12_Index
0000EC72 5428 0024                  		addq.b	#2,$24(a0)
0000EC76 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EC7E 317C 0000 0002             		move.w	#0,2(a0)
0000EC84 117C 0004 0001             		move.b	#4,1(a0)
0000EC8A 117C 0010 0019             		move.b	#$10,$19(a0)
0000EC90 117C 0006 0018             		move.b	#6,$18(a0)
0000EC96                            
0000EC96                            Obj12_Animate:				; XREF: Obj12_Index
0000EC96 5328 001E                  		subq.b	#1,$1E(a0)
0000EC9A 6A00                       		bpl.s	Obj12_ChkDel
0000EC9C 117C 0007 001E             		move.b	#7,$1E(a0)
0000ECA2 5228 001A                  		addq.b	#1,$1A(a0)
0000ECA6 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000ECAC 6500                       		bcs.s	Obj12_ChkDel
0000ECAE 117C 0000 001A             		move.b	#0,$1A(a0)
0000ECB4                            
0000ECB4                            Obj12_ChkDel:
0000ECB4 3028 0008                  		move.w	8(a0),d0
0000ECB8 0240 FF80                  		andi.w	#$FF80,d0
0000ECBC 3238 F700                  		move.w	($FFFFF700).w,d1
0000ECC0 0441 0080                  		subi.w	#$80,d1
0000ECC4 0241 FF80                  		andi.w	#$FF80,d1
0000ECC8 9041                       		sub.w	d1,d0
0000ECCA 0C40 0280                  		cmpi.w	#$280,d0
0000ECCE 6200 ECCA                  		bhi.w	DeleteObject
0000ECD2 6000 EC8A                  		bra.w	DisplaySprite
0000ECD6                            ; ===========================================================================
0000ECD6                            ; ---------------------------------------------------------------------------
0000ECD6                            ; Sprite mappings - lamp (SYZ)
0000ECD6                            ; ---------------------------------------------------------------------------
0000ECD6                            Map_obj12:
0000ECD6                            	include "_maps\obj12.asm"
0000ECD6                            ; ---------------------------------------------------------------------------
0000ECD6                            ; Sprite mappings - lamp (SYZ)
0000ECD6                            ; ---------------------------------------------------------------------------
0000ECD6 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000ECDA 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000ECDE 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000ECE2 02                         byte_E98E:	dc.b 2
0000ECE3 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000ECE8 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000ECED 02                         byte_E999:	dc.b 2
0000ECEE F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000ECF3 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000ECF8 02                         byte_E9A4:	dc.b 2
0000ECF9 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000ECFE 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000ED03 02                         byte_E9AF:	dc.b 2
0000ED04 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000ED09 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000ED0E 02                         byte_E9BA:	dc.b 2
0000ED0F F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000ED14 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000ED19 02                         byte_E9C5:	dc.b 2
0000ED1A F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000ED1F 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000ED24                            		even
0000ED24                            		even
0000ED24                            
0000ED24                            ; ===========================================================================
0000ED24                            ; ---------------------------------------------------------------------------
0000ED24                            ; Object 47 - pinball bumper (SYZ)
0000ED24                            ; ---------------------------------------------------------------------------
0000ED24                            
0000ED24                            Obj47:					; XREF: Obj_Index
0000ED24 7000                       		moveq	#0,d0
0000ED26 1028 0024                  		move.b	$24(a0),d0
0000ED2A 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000ED2E 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000ED32                            ; ===========================================================================
0000ED32 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000ED34 0000                       		dc.w Obj47_Hit-Obj47_Index
0000ED36                            ; ===========================================================================
0000ED36                            
0000ED36                            Obj47_Main:				; XREF: Obj47_Index
0000ED36 5428 0024                  		addq.b	#2,$24(a0)
0000ED3A 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000ED42 317C 0380 0002             		move.w	#$380,2(a0)
0000ED48 117C 0004 0001             		move.b	#4,1(a0)
0000ED4E 117C 0010 0019             		move.b	#$10,$19(a0)
0000ED54 117C 0001 0018             		move.b	#1,$18(a0)
0000ED5A 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000ED60                            
0000ED60                            Obj47_Hit:				; XREF: Obj47_Index
0000ED60 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000ED64 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000ED68 4228 0021                  		clr.b	$21(a0)
0000ED6C 43F8 D000                  		lea	($FFFFD000).w,a1
0000ED70 3228 0008                  		move.w	8(a0),d1
0000ED74 3428 000C                  		move.w	$C(a0),d2
0000ED78 9269 0008                  		sub.w	8(a1),d1
0000ED7C 9469 000C                  		sub.w	$C(a1),d2
0000ED80 4EB9 0000 2EC8             		jsr	(CalcAngle).l
0000ED86 4EB9 0000 2BFA             		jsr	(CalcSine).l
0000ED8C C3FC F900                  		muls.w	#-$700,d1
0000ED90 E081                       		asr.l	#8,d1
0000ED92 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000ED96 C1FC F900                  		muls.w	#-$700,d0
0000ED9A E080                       		asr.l	#8,d0
0000ED9C 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000EDA0 08E9 0001 0022             		bset	#1,$22(a1)
0000EDA6 08A9 0004 0022             		bclr	#4,$22(a1)
0000EDAC 08A9 0005 0022             		bclr	#5,$22(a1)
0000EDB2 4229 003C                  		clr.b	$3C(a1)
0000EDB6 117C 0001 001C             		move.b	#1,$1C(a0)
0000EDBC 303C 00B4                  		move.w	#$B4,d0
0000EDC0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bumper sound
0000EDC6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EDCA 7000                       		moveq	#0,d0
0000EDCC 1028 0023                  		move.b	$23(a0),d0
0000EDD0 6700                       		beq.s	Obj47_Score
0000EDD2 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000EDD8 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000EDDA 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000EDDE                            
0000EDDE                            Obj47_Score:
0000EDDE 7001                       		moveq	#1,d0
0000EDE0 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000EDE6 6100 EFFC                  		bsr.w	SingleObjLoad
0000EDEA 6600                       		bne.s	Obj47_Display
0000EDEC 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000EDF0 3368 0008 0008             		move.w	8(a0),8(a1)
0000EDF6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EDFC 137C 0004 001A             		move.b	#4,$1A(a1)
0000EE02                            
0000EE02                            Obj47_Display:
0000EE02 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000EE08 6100 BC06                  		bsr.w	AnimateSprite
0000EE0C 3028 0008                  		move.w	8(a0),d0
0000EE10 0240 FF80                  		andi.w	#$FF80,d0
0000EE14 3238 F700                  		move.w	($FFFFF700).w,d1
0000EE18 0441 0080                  		subi.w	#$80,d1
0000EE1C 0241 FF80                  		andi.w	#$FF80,d1
0000EE20 9041                       		sub.w	d1,d0
0000EE22 0C40 0280                  		cmpi.w	#$280,d0
0000EE26 6200                       		bhi.s	Obj47_ChkHit
0000EE28 6000 EB34                  		bra.w	DisplaySprite
0000EE2C                            ; ===========================================================================
0000EE2C                            
0000EE2C                            Obj47_ChkHit:				; XREF: Obj47_Display
0000EE2C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EE30 7000                       		moveq	#0,d0
0000EE32 1028 0023                  		move.b	$23(a0),d0
0000EE36 6700                       		beq.s	Obj47_Delete
0000EE38 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EE3E                            
0000EE3E                            Obj47_Delete:
0000EE3E 6000 EB5A                  		bra.w	DeleteObject
0000EE42                            ; ===========================================================================
0000EE42                            Ani_obj47:
0000EE42                            	include "_anim\obj47.asm"
0000EE42                            ; ---------------------------------------------------------------------------
0000EE42                            ; Animation script - flamethrower (SBZ)
0000EE42                            ; ---------------------------------------------------------------------------
0000EE42 0000                       		dc.w byte_EAF4-Ani_obj47
0000EE44 0000                       		dc.w byte_EAF8-Ani_obj47
0000EE46 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000EE4A 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000EE52                            		even
0000EE52                            		even
0000EE52                            
0000EE52                            ; ---------------------------------------------------------------------------
0000EE52                            ; Sprite mappings - pinball bumper (SYZ)
0000EE52                            ; ---------------------------------------------------------------------------
0000EE52                            Map_obj47:
0000EE52                            	include "_maps\obj47.asm"
0000EE52                            ; ---------------------------------------------------------------------------
0000EE52                            ; Sprite mappings - pinball bumper (SYZ)
0000EE52                            ; ---------------------------------------------------------------------------
0000EE52 0000                       		dc.w byte_EB06-Map_obj47
0000EE54 0000                       		dc.w byte_EB11-Map_obj47
0000EE56 0000                       		dc.w byte_EB1C-Map_obj47
0000EE58 02                         byte_EB06:	dc.b 2
0000EE59 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000EE5E F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000EE63 02                         byte_EB11:	dc.b 2
0000EE64 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000EE69 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000EE6E 02                         byte_EB1C:	dc.b 2
0000EE6F F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000EE74 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000EE7A 00                         		even
0000EE7A 00                         		even
0000EE7A                            
0000EE7A                            ; ===========================================================================
0000EE7A                            ; ---------------------------------------------------------------------------
0000EE7A                            ; Object 0D - signpost at the end of a level
0000EE7A                            ; ---------------------------------------------------------------------------
0000EE7A                            
0000EE7A                            Obj0D:					; XREF: Obj_Index
0000EE7A 7000                       		moveq	#0,d0
0000EE7C 1028 0024                  		move.b	$24(a0),d0
0000EE80 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000EE84 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000EE88 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000EE8E 6100 BB80                  		bsr.w	AnimateSprite
0000EE92 6100 EACA                  		bsr.w	DisplaySprite
0000EE96 3028 0008                  		move.w	8(a0),d0
0000EE9A 0240 FF80                  		andi.w	#$FF80,d0
0000EE9E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EEA2 0441 0080                  		subi.w	#$80,d1
0000EEA6 0241 FF80                  		andi.w	#$FF80,d1
0000EEAA 9041                       		sub.w	d1,d0
0000EEAC 0C40 0280                  		cmpi.w	#$280,d0
0000EEB0 6200 EAE8                  		bhi.w	DeleteObject
0000EEB4 4E75                       		rts	
0000EEB6                            ; ===========================================================================
0000EEB6 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000EEB8 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000EEBA 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000EEBC 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000EEBE 0000                       		dc.w locret_ED1A-Obj0D_Index
0000EEC0                            ; ===========================================================================
0000EEC0                            
0000EEC0                            Obj0D_Main:				; XREF: Obj0D_Index
0000EEC0 5428 0024                  		addq.b	#2,$24(a0)
0000EEC4 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000EECC 317C 0680 0002             		move.w	#$680,2(a0)
0000EED2 117C 0004 0001             		move.b	#4,1(a0)
0000EED8 117C 0018 0019             		move.b	#$18,$19(a0)
0000EEDE 117C 0004 0018             		move.b	#4,$18(a0)
0000EEE4                            
0000EEE4                            Obj0D_Touch:				; XREF: Obj0D_Index
0000EEE4 3038 D008                  		move.w	($FFFFD008).w,d0
0000EEE8 9068 0008                  		sub.w	8(a0),d0
0000EEEC 6500                       		bcs.s	locret_EBBA
0000EEEE 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000EEF2 6400                       		bcc.s	locret_EBBA	; if not, branch
0000EEF4 303C 00CF                  		move.w	#$CF,d0
0000EEF8 4EB9 0000 15B6             		jsr	(PlaySound).l	; play signpost	sound
0000EEFE 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000EF02 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000EF08 5428 0024                  		addq.b	#2,$24(a0)
0000EF0C                            
0000EF0C                            locret_EBBA:
0000EF0C 4E75                       		rts	
0000EF0E                            ; ===========================================================================
0000EF0E                            
0000EF0E                            Obj0D_Spin:				; XREF: Obj0D_Index
0000EF0E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000EF12 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000EF14 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000EF1A 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000EF1E 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000EF24 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000EF26 5428 0024                  		addq.b	#2,$24(a0)
0000EF2A                            
0000EF2A                            Obj0D_Sparkle:
0000EF2A 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000EF2E 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000EF30 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000EF36 7000                       		moveq	#0,d0
0000EF38 1028 0034                  		move.b	$34(a0),d0
0000EF3C 5428 0034                  		addq.b	#2,$34(a0)
0000EF40 0228 000E 0034             		andi.b	#$E,$34(a0)
0000EF46 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000EF4A 6100 EE98                  		bsr.w	SingleObjLoad
0000EF4E 6600                       		bne.s	locret_EC42
0000EF50 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000EF54 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000EF5A 101A                       		move.b	(a2)+,d0
0000EF5C 4880                       		ext.w	d0
0000EF5E D068 0008                  		add.w	8(a0),d0
0000EF62 3340 0008                  		move.w	d0,8(a1)
0000EF66 101A                       		move.b	(a2)+,d0
0000EF68 4880                       		ext.w	d0
0000EF6A D068 000C                  		add.w	$C(a0),d0
0000EF6E 3340 000C                  		move.w	d0,$C(a1)
0000EF72 237C 0000 A28A 0004        		move.l	#Map_obj25,4(a1)
0000EF7A 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000EF80 137C 0004 0001             		move.b	#4,1(a1)
0000EF86 137C 0002 0018             		move.b	#2,$18(a1)
0000EF8C 137C 0008 0019             		move.b	#8,$19(a1)
0000EF92                            
0000EF92                            locret_EC42:
0000EF92 4E75                       		rts	
0000EF94                            ; ===========================================================================
0000EF94 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000EF96 0808                       		dc.b	8,   8
0000EF98 F000                       		dc.b -$10,   0
0000EF9A 18F8                       		dc.b  $18,  -8
0000EF9C 00F8                       		dc.b	0,  -8
0000EF9E 1000                       		dc.b  $10,   0
0000EFA0 E808                       		dc.b -$18,   8
0000EFA2 1810                       		dc.b  $18, $10
0000EFA4                            ; ===========================================================================
0000EFA4                            
0000EFA4                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000EFA4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000EFA8 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000EFAC 0838 0001 D022             		btst	#1,($FFFFD022).w
0000EFB2 6600                       		bne.s	loc_EC70
0000EFB4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000EFBA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000EFC0 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000EFC2 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000EFC8 6000                       		bra.s	loc_EC70
0000EFCA                            
0000EFCA                            Obj0D_MoveLeft:
0000EFCA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000EFD0                            
0000EFD0                            loc_EC70:
0000EFD0 4A38 D000                  		tst.b	($FFFFD000).w
0000EFD4 6700                       		beq.s	loc_EC86
0000EFD6 3038 D008                  		move.w	($FFFFD008).w,d0
0000EFDA 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000EFDE 0641 0128                  		addi.w	#$128,d1
0000EFE2 B041                       		cmp.w	d1,d0
0000EFE4 6500                       		bcs.s	locret_ECEE
0000EFE6                            
0000EFE6                            loc_EC86:
0000EFE6 5428 0024                  		addq.b	#2,$24(a0)
0000EFEA                            
0000EFEA                            ; ---------------------------------------------------------------------------
0000EFEA                            ; Subroutine to	set up bonuses at the end of an	act
0000EFEA                            ; ---------------------------------------------------------------------------
0000EFEA                            
0000EFEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EFEA                            
0000EFEA                            
0000EFEA                            GotThroughAct:				; XREF: Obj3E_EndAct
0000EFEA 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000EFEE 6600                       		bne.s	locret_ECEE
0000EFF0 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000EFF6 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000EFFA 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000EFFE 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F004 7010                       		moveq	#$10,d0
0000F006 4EB9 0000 17D2             		jsr	(LoadPLC2).l	; load title card patterns
0000F00C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F012 7000                       		moveq	#0,d0
0000F014 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F018 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F01C 7200                       		moveq	#0,d1
0000F01E 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F022 D041                       		add.w	d1,d0		; add up your time
0000F024 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F028 7214                       		moveq	#$14,d1
0000F02A B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F02C 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F02E 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F030                            
0000F030                            loc_ECD0:
0000F030 D040                       		add.w	d0,d0
0000F032 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F038 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F03C C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F040 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F044 303C 008E                  		move.w	#$8E,d0
0000F048 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F04E                            
0000F04E                            locret_ECEE:
0000F04E 4E75                       		rts	
0000F050                            ; End of function GotThroughAct
0000F050                            
0000F050                            ; ===========================================================================
0000F050 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F064 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F07A                            ; ===========================================================================
0000F07A                            
0000F07A                            locret_ED1A:				; XREF: Obj0D_Index
0000F07A 4E75                       		rts	
0000F07C                            ; ===========================================================================
0000F07C                            Ani_obj0D:
0000F07C                            	include "_anim\obj0D.asm"
0000F07C                            ; ---------------------------------------------------------------------------
0000F07C                            ; Animation script - signpost
0000F07C                            ; ---------------------------------------------------------------------------
0000F07C 0000                       		dc.w byte_ED24-Ani_obj0D
0000F07E 0000                       		dc.w byte_ED28-Ani_obj0D
0000F080 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F082 0000                       		dc.w byte_ED34-Ani_obj0D
0000F084 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F088 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F08E 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F094 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F098 00                         		even
0000F098 00                         		even
0000F098                            
0000F098                            ; ---------------------------------------------------------------------------
0000F098                            ; Sprite mappings - signpost
0000F098                            ; ---------------------------------------------------------------------------
0000F098                            Map_obj0D:
0000F098                            	include "_maps\obj0D.asm"
0000F098                            ; ---------------------------------------------------------------------------
0000F098                            ; Sprite mappings - signpost
0000F098                            ; ---------------------------------------------------------------------------
0000F098 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F09C 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F0A0 0000                       		dc.w byte_ED73-Map_obj0D
0000F0A2 03                         byte_ED42:	dc.b 3
0000F0A3 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F0A8 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F0AD 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F0B2 02                         byte_ED52:	dc.b 2
0000F0B3 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F0B8 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F0BD 02                         byte_ED5D:	dc.b 2
0000F0BE F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F0C3 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F0C8 02                         byte_ED68:	dc.b 2
0000F0C9 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F0CE 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F0D3 03                         byte_ED73:	dc.b 3
0000F0D4 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F0D9 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F0DE 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F0E4 00                         		even
0000F0E4 00                         		even
0000F0E4                            
0000F0E4                            ; ===========================================================================
0000F0E4                            ; ---------------------------------------------------------------------------
0000F0E4                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F0E4                            ; ---------------------------------------------------------------------------
0000F0E4                            
0000F0E4                            Obj4C:					; XREF: Obj_Index
0000F0E4 7000                       		moveq	#0,d0
0000F0E6 1028 0024                  		move.b	$24(a0),d0
0000F0EA 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F0EE 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F0F2 6000 0000                  		bra.w	Obj4D_ChkDel
0000F0F6                            ; ===========================================================================
0000F0F6 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F0F8 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F0FA 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F0FC 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F0FE 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F100 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F102                            ; ===========================================================================
0000F102                            
0000F102                            Obj4C_Main:				; XREF: Obj4C_Index
0000F102 5428 0024                  		addq.b	#2,$24(a0)
0000F106 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F10E 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F114 117C 0004 0001             		move.b	#4,1(a0)
0000F11A 117C 0001 0018             		move.b	#1,$18(a0)
0000F120 117C 0038 0019             		move.b	#$38,$19(a0)
0000F126 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F12C                            
0000F12C                            loc_EDCC:				; XREF: Obj4C_Index
0000F12C 5368 0032                  		subq.w	#1,$32(a0)
0000F130 6A00                       		bpl.s	locret_EDF0
0000F132 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F138 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F13C 3228 000C                  		move.w	$C(a0),d1
0000F140 B041                       		cmp.w	d1,d0
0000F142 6400                       		bcc.s	locret_EDF0
0000F144 0441 0170                  		subi.w	#$170,d1
0000F148 B041                       		cmp.w	d1,d0
0000F14A 6500                       		bcs.s	locret_EDF0
0000F14C 5428 0024                  		addq.b	#2,$24(a0)
0000F150                            
0000F150                            locret_EDF0:
0000F150 4E75                       		rts	
0000F152                            ; ===========================================================================
0000F152                            
0000F152                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F152 5428 0024                  		addq.b	#2,$24(a0)
0000F156 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F15A 6600                       		bne.s	loc_EE18
0000F15C 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F160 3368 0008 0008             		move.w	8(a0),8(a1)
0000F166 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F16C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F172 2348 003C                  		move.l	a0,$3C(a1)
0000F176                            
0000F176                            loc_EE18:
0000F176 117C 0001 001C             		move.b	#1,$1C(a0)
0000F17C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F180 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F182 117C 0004 001C             		move.b	#4,$1C(a0)
0000F188 6000                       		bra.s	Obj4C_Display
0000F18A                            ; ===========================================================================
0000F18A                            
0000F18A                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F18A 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F18E 08E9 0001 0022             		bset	#1,$22(a1)
0000F194 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F19A 6000                       		bra.s	Obj4C_Display
0000F19C                            ; ===========================================================================
0000F19C                            
0000F19C                            loc_EE3E:				; XREF: Obj4C_Index
0000F19C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F1A0 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F1A2 5428 0024                  		addq.b	#2,$24(a0)
0000F1A6 4E75                       		rts	
0000F1A8                            ; ===========================================================================
0000F1A8                            
0000F1A8                            Obj4C_Display:				; XREF: Obj4C_Index
0000F1A8 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F1AE 6100 B860                  		bsr.w	AnimateSprite
0000F1B2 6100 E7AA                  		bsr.w	DisplaySprite
0000F1B6 4E75                       		rts	
0000F1B8                            ; ===========================================================================
0000F1B8                            
0000F1B8                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F1B8 117C 0000 001C             		move.b	#0,$1C(a0)
0000F1BE 117C 0002 0024             		move.b	#2,$24(a0)
0000F1C4 4A28 0028                  		tst.b	$28(a0)
0000F1C8 6700 E7D0                  		beq.w	DeleteObject
0000F1CC 4E75                       		rts	
0000F1CE                            ; ===========================================================================
0000F1CE                            ; ---------------------------------------------------------------------------
0000F1CE                            ; Object 4D - lava geyser / lavafall (MZ)
0000F1CE                            ; ---------------------------------------------------------------------------
0000F1CE                            
0000F1CE                            Obj4D:					; XREF: Obj_Index
0000F1CE 7000                       		moveq	#0,d0
0000F1D0 1028 0024                  		move.b	$24(a0),d0
0000F1D4 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F1D8 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F1DC 6000 E780                  		bra.w	DisplaySprite
0000F1E0                            ; ===========================================================================
0000F1E0 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F1E2 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F1E4 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F1E6 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F1E8                            
0000F1E8 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F1EC                            ; ===========================================================================
0000F1EC                            
0000F1EC                            Obj4D_Main:				; XREF: Obj4D_Index
0000F1EC 5428 0024                  		addq.b	#2,$24(a0)
0000F1F0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F1F6 4A28 0028                  		tst.b	$28(a0)
0000F1FA 6700                       		beq.s	loc_EEA4
0000F1FC 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F202                            
0000F202                            loc_EEA4:
0000F202 7000                       		moveq	#0,d0
0000F204 1028 0028                  		move.b	$28(a0),d0
0000F208 D040                       		add.w	d0,d0
0000F20A 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F210 2248                       		movea.l	a0,a1
0000F212 7201                       		moveq	#1,d1
0000F214 6100                       		bsr.s	Obj4D_MakeLava
0000F216 6000                       		bra.s	loc_EF10
0000F218                            ; ===========================================================================
0000F218                            
0000F218                            Obj4D_Loop:
0000F218 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F21C 6600                       		bne.s	loc_EF0A
0000F21E                            
0000F21E                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F21E 12BC 004D                  		move.b	#$4D,0(a1)
0000F222 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F22A 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F230 137C 0004 0001             		move.b	#4,1(a1)
0000F236 137C 0020 0019             		move.b	#$20,$19(a1)
0000F23C 3368 0008 0008             		move.w	8(a0),8(a1)
0000F242 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F248 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F24E 137C 0001 0018             		move.b	#1,$18(a1)
0000F254 137C 0005 001C             		move.b	#5,$1C(a1)
0000F25A 4A28 0028                  		tst.b	$28(a0)
0000F25E 6700                       		beq.s	loc_EF0A
0000F260 137C 0002 001C             		move.b	#2,$1C(a1)
0000F266                            
0000F266                            loc_EF0A:
0000F266 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F26A 4E75                       		rts	
0000F26C                            ; ===========================================================================
0000F26C                            
0000F26C                            loc_EF10:				; XREF: Obj4D_Main
0000F26C 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F272 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F278 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F27E 137C 0093 0020             		move.b	#$93,$20(a1)
0000F284 137C 0080 0016             		move.b	#$80,$16(a1)
0000F28A 08E9 0004 0001             		bset	#4,1(a1)
0000F290 5829 0024                  		addq.b	#4,$24(a1)
0000F294 2348 003C                  		move.l	a0,$3C(a1)
0000F298 4A28 0028                  		tst.b	$28(a0)
0000F29C 6700                       		beq.s	Obj4D_PlaySnd
0000F29E 7200                       		moveq	#0,d1
0000F2A0 6100 FF76                  		bsr.w	Obj4D_Loop
0000F2A4 5429 0024                  		addq.b	#2,$24(a1)
0000F2A8 08E9 0004 0002             		bset	#4,2(a1)
0000F2AE 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F2B4 137C 0000 0018             		move.b	#0,$18(a1)
0000F2BA 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F2C0 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F2C6 117C 0000 0028             		move.b	#0,$28(a0)
0000F2CC                            
0000F2CC                            Obj4D_PlaySnd:
0000F2CC 303C 00C8                  		move.w	#$C8,d0
0000F2D0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000F2D6                            
0000F2D6                            Obj4D_Action:				; XREF: Obj4D_Index
0000F2D6 7000                       		moveq	#0,d0
0000F2D8 1028 0028                  		move.b	$28(a0),d0
0000F2DC D040                       		add.w	d0,d0
0000F2DE 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F2E2 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F2E6 6100 E650                  		bsr.w	SpeedToPos
0000F2EA 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F2F0 6100 B71E                  		bsr.w	AnimateSprite
0000F2F4                            
0000F2F4                            Obj4D_ChkDel:				; XREF: Obj4C
0000F2F4 3028 0008                  		move.w	8(a0),d0
0000F2F8 0240 FF80                  		andi.w	#$FF80,d0
0000F2FC 3238 F700                  		move.w	($FFFFF700).w,d1
0000F300 0441 0080                  		subi.w	#$80,d1
0000F304 0241 FF80                  		andi.w	#$FF80,d1
0000F308 9041                       		sub.w	d1,d0
0000F30A 0C40 0280                  		cmpi.w	#$280,d0
0000F30E 6200 E68A                  		bhi.w	DeleteObject
0000F312 4E75                       		rts	
0000F314                            ; ===========================================================================
0000F314 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F316 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F318                            ; ===========================================================================
0000F318                            
0000F318                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F318 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F31E 3028 0030                  		move.w	$30(a0),d0
0000F322 B068 000C                  		cmp.w	$C(a0),d0
0000F326 6400                       		bcc.s	locret_EFDA
0000F328 5828 0024                  		addq.b	#4,$24(a0)
0000F32C 2268 003C                  		movea.l	$3C(a0),a1
0000F330 137C 0003 001C             		move.b	#3,$1C(a1)
0000F336                            
0000F336                            locret_EFDA:
0000F336 4E75                       		rts	
0000F338                            ; ===========================================================================
0000F338                            
0000F338                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F338 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F33E 3028 0030                  		move.w	$30(a0),d0
0000F342 B068 000C                  		cmp.w	$C(a0),d0
0000F346 6400                       		bcc.s	locret_EFFA
0000F348 5828 0024                  		addq.b	#4,$24(a0)
0000F34C 2268 003C                  		movea.l	$3C(a0),a1
0000F350 137C 0001 001C             		move.b	#1,$1C(a1)
0000F356                            
0000F356                            locret_EFFA:
0000F356 4E75                       		rts	
0000F358                            ; ===========================================================================
0000F358                            
0000F358                            loc_EFFC:				; XREF: Obj4D_Index
0000F358 2268 003C                  		movea.l	$3C(a0),a1
0000F35C 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F362 6700 0000                  		beq.w	Obj4D_Delete
0000F366 3029 000C                  		move.w	$C(a1),d0
0000F36A 0640 0060                  		addi.w	#$60,d0
0000F36E 3140 000C                  		move.w	d0,$C(a0)
0000F372 9068 0030                  		sub.w	$30(a0),d0
0000F376 4440                       		neg.w	d0
0000F378 7208                       		moveq	#8,d1
0000F37A 0C40 0040                  		cmpi.w	#$40,d0
0000F37E 6C00                       		bge.s	loc_F026
0000F380 720B                       		moveq	#$B,d1
0000F382                            
0000F382                            loc_F026:
0000F382 0C40 0080                  		cmpi.w	#$80,d0
0000F386 6F00                       		ble.s	loc_F02E
0000F388 720E                       		moveq	#$E,d1
0000F38A                            
0000F38A                            loc_F02E:
0000F38A 5328 001E                  		subq.b	#1,$1E(a0)
0000F38E 6A00                       		bpl.s	loc_F04C
0000F390 117C 0007 001E             		move.b	#7,$1E(a0)
0000F396 5228 001B                  		addq.b	#1,$1B(a0)
0000F39A 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F3A0 6500                       		bcs.s	loc_F04C
0000F3A2 117C 0000 001B             		move.b	#0,$1B(a0)
0000F3A8                            
0000F3A8                            loc_F04C:
0000F3A8 1028 001B                  		move.b	$1B(a0),d0
0000F3AC D001                       		add.b	d1,d0
0000F3AE 1140 001A                  		move.b	d0,$1A(a0)
0000F3B2 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F3B6                            ; ===========================================================================
0000F3B6                            
0000F3B6                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F3B6 6000 E5E2                  		bra.w	DeleteObject
0000F3BA                            ; ===========================================================================
0000F3BA                            ; ---------------------------------------------------------------------------
0000F3BA                            ; Object 4E - advancing	wall of	lava (MZ)
0000F3BA                            ; ---------------------------------------------------------------------------
0000F3BA                            
0000F3BA                            Obj4E:					; XREF: Obj_Index
0000F3BA 7000                       		moveq	#0,d0
0000F3BC 1028 0024                  		move.b	$24(a0),d0
0000F3C0 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F3C4 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F3C8                            ; ===========================================================================
0000F3C8 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F3CA 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F3CC 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F3CE 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F3D0 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F3D2                            ; ===========================================================================
0000F3D2                            
0000F3D2                            Obj4E_Main:				; XREF: Obj4E_Index
0000F3D2 5828 0024                  		addq.b	#4,$24(a0)
0000F3D6 2248                       		movea.l	a0,a1
0000F3D8 7201                       		moveq	#1,d1
0000F3DA 6000                       		bra.s	Obj4E_Main2
0000F3DC                            ; ===========================================================================
0000F3DC                            
0000F3DC                            Obj4E_Loop:
0000F3DC 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F3E0 6600                       		bne.s	loc_F0C8
0000F3E2                            
0000F3E2                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F3E2 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F3E6 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F3EE 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F3F4 137C 0004 0001             		move.b	#4,1(a1)
0000F3FA 137C 0050 0019             		move.b	#$50,$19(a1)
0000F400 3368 0008 0008             		move.w	8(a0),8(a1)
0000F406 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F40C 137C 0001 0018             		move.b	#1,$18(a1)
0000F412 137C 0000 001C             		move.b	#0,$1C(a1)
0000F418 137C 0094 0020             		move.b	#$94,$20(a1)
0000F41E 2348 003C                  		move.l	a0,$3C(a1)
0000F422                            
0000F422                            loc_F0C8:
0000F422 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F426                            
0000F426 5C29 0024                  		addq.b	#6,$24(a1)
0000F42A 137C 0004 001A             		move.b	#4,$1A(a1)
0000F430                            
0000F430                            Obj4E_Action:				; XREF: Obj4E_Index
0000F430 3038 D008                  		move.w	($FFFFD008).w,d0
0000F434 9068 0008                  		sub.w	8(a0),d0
0000F438 6400                       		bcc.s	Obj4E_ChkSonic
0000F43A 4440                       		neg.w	d0
0000F43C                            
0000F43C                            Obj4E_ChkSonic:
0000F43C 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F440 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F442 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F446 9068 000C                  		sub.w	$C(a0),d0
0000F44A 6400                       		bcc.s	loc_F0F4
0000F44C 4440                       		neg.w	d0
0000F44E                            
0000F44E                            loc_F0F4:
0000F44E 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F452 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F454 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F45A 6000                       		bra.s	Obj4E_Solid
0000F45C                            ; ===========================================================================
0000F45C                            
0000F45C                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F45C 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F460 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F462 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F468 5528 0024                  		subq.b	#2,$24(a0)
0000F46C                            
0000F46C                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F46C 323C 002B                  		move.w	#$2B,d1
0000F470 343C 0018                  		move.w	#$18,d2
0000F474 3602                       		move.w	d2,d3
0000F476 5243                       		addq.w	#1,d3
0000F478 3828 0008                  		move.w	8(a0),d4
0000F47C 1028 0024                  		move.b	$24(a0),d0
0000F480 3F00                       		move.w	d0,-(sp)
0000F482 6100 0000                  		bsr.w	SolidObject
0000F486 301F                       		move.w	(sp)+,d0
0000F488 1140 0024                  		move.b	d0,$24(a0)
0000F48C 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F492 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F494 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F498 4228 0036                  		clr.b	$36(a0)
0000F49C                            
0000F49C                            Obj4E_Animate:
0000F49C 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F4A2 6100 B56C                  		bsr.w	AnimateSprite
0000F4A6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F4AC 6400                       		bcc.s	Obj4E_ChkDel
0000F4AE 6100 E488                  		bsr.w	SpeedToPos
0000F4B2                            
0000F4B2                            Obj4E_ChkDel:
0000F4B2 6100 E4AA                  		bsr.w	DisplaySprite
0000F4B6 4A28 0036                  		tst.b	$36(a0)
0000F4BA 6600                       		bne.s	locret_F17E
0000F4BC 3028 0008                  		move.w	8(a0),d0
0000F4C0 0240 FF80                  		andi.w	#$FF80,d0
0000F4C4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F4C8 0441 0080                  		subi.w	#$80,d1
0000F4CC 0241 FF80                  		andi.w	#$FF80,d1
0000F4D0 9041                       		sub.w	d1,d0
0000F4D2 0C40 0280                  		cmpi.w	#$280,d0
0000F4D6 6200                       		bhi.s	Obj4E_ChkGone
0000F4D8                            
0000F4D8                            locret_F17E:
0000F4D8 4E75                       		rts	
0000F4DA                            ; ===========================================================================
0000F4DA                            
0000F4DA                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F4DA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F4DE 7000                       		moveq	#0,d0
0000F4E0 1028 0023                  		move.b	$23(a0),d0
0000F4E4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F4EA 117C 0008 0024             		move.b	#8,$24(a0)
0000F4F0 4E75                       		rts	
0000F4F2                            ; ===========================================================================
0000F4F2                            
0000F4F2                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F4F2 2268 003C                  		movea.l	$3C(a0),a1
0000F4F6 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F4FC 6700                       		beq.s	Obj4E_Delete
0000F4FE 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F504 0468 0080 0008             		subi.w	#$80,8(a0)
0000F50A 6000 E452                  		bra.w	DisplaySprite
0000F50E                            ; ===========================================================================
0000F50E                            
0000F50E                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F50E 6000 E48A                  		bra.w	DeleteObject
0000F512                            ; ===========================================================================
0000F512                            ; ---------------------------------------------------------------------------
0000F512                            ; Object 54 - invisible	lava tag (MZ)
0000F512                            ; ---------------------------------------------------------------------------
0000F512                            
0000F512                            Obj54:					; XREF: Obj_Index
0000F512 7000                       		moveq	#0,d0
0000F514 1028 0024                  		move.b	$24(a0),d0
0000F518 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F51C 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F520                            ; ===========================================================================
0000F520 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F522 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F524                            
0000F524 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F528                            ; ===========================================================================
0000F528                            
0000F528                            Obj54_Main:				; XREF: Obj54_Index
0000F528 5428 0024                  		addq.b	#2,$24(a0)
0000F52C 7000                       		moveq	#0,d0
0000F52E 1028 0028                  		move.b	$28(a0),d0
0000F532 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F538 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F540 117C 0084 0001             		move.b	#$84,1(a0)
0000F546                            
0000F546                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F546 3028 0008                  		move.w	8(a0),d0
0000F54A 0240 FF80                  		andi.w	#$FF80,d0
0000F54E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F552 0441 0080                  		subi.w	#$80,d1
0000F556 0241 FF80                  		andi.w	#$FF80,d1
0000F55A 9041                       		sub.w	d1,d0
0000F55C 6B00 E43C                  		bmi.w	DeleteObject
0000F560 0C40 0280                  		cmpi.w	#$280,d0
0000F564 6200 E434                  		bhi.w	DeleteObject
0000F568 4E75                       		rts	
0000F56A                            ; ===========================================================================
0000F56A                            ; ---------------------------------------------------------------------------
0000F56A                            ; Sprite mappings - invisible lava tag (MZ)
0000F56A                            ; ---------------------------------------------------------------------------
0000F56A                            Map_obj54:
0000F56A                            	include "_maps\obj54.asm"
0000F56A                            ; ---------------------------------------------------------------------------
0000F56A                            ; Sprite mappings - invisible lava tag (MZ)
0000F56A                            ; ---------------------------------------------------------------------------
0000F56A 0000                       		dc.w byte_F212-Map_obj54
0000F56C 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F56E 00                         		even
0000F56E 00                         		even
0000F56E                            
0000F56E                            Ani_obj4C:
0000F56E                            	include "_anim\obj4C.asm"
0000F56E                            ; ---------------------------------------------------------------------------
0000F56E                            ; Animation script - geyser of lava (MZ)
0000F56E                            ; ---------------------------------------------------------------------------
0000F56E 0000                       		dc.w byte_F220-Ani_obj4C
0000F570 0000                       		dc.w byte_F22A-Ani_obj4C
0000F572 0000                       		dc.w byte_F22E-Ani_obj4C
0000F574 0000                       		dc.w byte_F232-Ani_obj4C
0000F576 0000                       		dc.w byte_F23A-Ani_obj4C
0000F578 0000                       		dc.w byte_F23E-Ani_obj4C
0000F57A 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F584 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F588 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F58C 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F594 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F598 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F59C                            		even
0000F59C                            		even
0000F59C                            
0000F59C                            Ani_obj4E:
0000F59C                            	include "_anim\obj4E.asm"
0000F59C                            ; ---------------------------------------------------------------------------
0000F59C                            ; Animation script - advancing wall of lava (MZ)
0000F59C                            ; ---------------------------------------------------------------------------
0000F59C 0000                       		dc.w byte_F244-Ani_obj4E
0000F59E 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F5A4                            		even
0000F5A4                            		even
0000F5A4                            
0000F5A4                            ; ---------------------------------------------------------------------------
0000F5A4                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F5A4                            ; ---------------------------------------------------------------------------
0000F5A4                            Map_obj4C:
0000F5A4                            	include "_maps\obj4C.asm"
0000F5A4                            ; ---------------------------------------------------------------------------
0000F5A4                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F5A4                            ; ---------------------------------------------------------------------------
0000F5A4 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F5A8 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F5AC 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F5B0 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F5B4 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F5B8 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F5BC 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F5C0 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F5C4 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F5C8 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F5CC 02                         byte_F272:	dc.b 2
0000F5CD EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F5D2 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F5D7 02                         byte_F27D:	dc.b 2
0000F5D8 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F5DD EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F5E2 04                         byte_F288:	dc.b 4
0000F5E3 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F5E8 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F5ED F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F5F2 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F5F7 04                         byte_F29D:	dc.b 4
0000F5F8 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F5FD F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F602 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F607 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F60C 06                         byte_F2B2:	dc.b 6
0000F60D EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F612 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F617 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F61C EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F621 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F626 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F62B 06                         byte_F2D1:	dc.b 6
0000F62C EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F631 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F636 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F63B EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F640 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F645 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F64A 02                         byte_F2F0:	dc.b 2
0000F64B E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F650 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F655 02                         byte_F2FB:	dc.b 2
0000F656 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F65B E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F660 0A                         byte_F306:	dc.b $A
0000F661 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F666 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F66B B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F670 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F675 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F67A D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F67F F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F684 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F689 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F68E 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F693 0A                         byte_F339:	dc.b $A
0000F694 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F699 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F69E B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F6A3 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F6A8 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F6AD D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F6B2 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F6B7 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F6BC 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F6C1 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F6C6 0A                         byte_F36C:	dc.b $A
0000F6C7 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F6CC 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F6D1 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F6D6 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F6DB D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F6E0 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F6E5 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F6EA F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F6EF 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F6F4 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F6F9 06                         byte_F39F:	dc.b 6
0000F6FA 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F6FF 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F704 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F709 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F70E D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F713 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F718 06                         byte_F3BE:	dc.b 6
0000F719 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F71E 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F723 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F728 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F72D D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F732 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F737 06                         byte_F3DD:	dc.b 6
0000F738 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F73D 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F742 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F747 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F74C D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F751 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F756 10                         byte_F3FC:	dc.b $10
0000F757 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F75C 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F761 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F766 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F76B D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F770 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F775 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F77A F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F77F 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F784 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F789 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F78E 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F793 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F798 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F79D 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F7A2 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F7A7 10                         byte_F44D:	dc.b $10
0000F7A8 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F7AD 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F7B2 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F7B7 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F7BC D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F7C1 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F7C6 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F7CB F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F7D0 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F7D5 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F7DA 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000F7DF 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000F7E4 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000F7E9 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000F7EE 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000F7F3 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000F7F8 10                         byte_F49E:	dc.b $10
0000F7F9 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F7FE 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F803 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F808 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F80D D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F812 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F817 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F81C F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F821 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F826 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F82B 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000F830 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000F835 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000F83A 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000F83F 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000F844 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000F849 06                         byte_F4EF:	dc.b 6
0000F84A E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000F84F E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000F854 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000F859 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000F85E D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000F863 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000F868 06                         byte_F50E:	dc.b 6
0000F869 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000F86E E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000F873 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000F878 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000F87D D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000F882 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000F887 00                         byte_F52D:	dc.b 0
0000F888                            		even
0000F888                            		even
0000F888                            
0000F888                            ; ---------------------------------------------------------------------------
0000F888                            ; Sprite mappings - advancing wall of lava (MZ)
0000F888                            ; ---------------------------------------------------------------------------
0000F888                            Map_obj4E:
0000F888                            	include "_maps\obj4E.asm"
0000F888                            ; ---------------------------------------------------------------------------
0000F888                            ; Sprite mappings - advancing wall of lava (MZ)
0000F888                            ; ---------------------------------------------------------------------------
0000F888 0000                       		dc.w byte_F538-Map_obj4E
0000F88A 0000                       		dc.w byte_F566-Map_obj4E
0000F88C 0000                       		dc.w byte_F594-Map_obj4E
0000F88E 0000                       		dc.w byte_F5C2-Map_obj4E
0000F890 0000                       		dc.w byte_F5F0-Map_obj4E
0000F892 09                         byte_F538:	dc.b 9
0000F893 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000F898 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F89D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F8A2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F8A7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F8AC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F8B1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F8B6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F8BB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F8C0 09                         byte_F566:	dc.b 9
0000F8C1 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F8C6 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000F8CB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F8D0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F8D5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F8DA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F8DF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F8E4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F8E9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F8EE 09                         byte_F594:	dc.b 9
0000F8EF E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000F8F4 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F8F9 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F8FE E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F903 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F908 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F90D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F912 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F917 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F91C 09                         byte_F5C2:	dc.b 9
0000F91D E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F922 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000F927 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F92C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F931 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F936 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F93B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F940 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F945 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F94A 08                         byte_F5F0:	dc.b 8
0000F94B E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000F950 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F955 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F95A 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F95F E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F964 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F969 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F96E 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F974 00                         		even
0000F974 00                         		even
0000F974                            
0000F974                            ; ===========================================================================
0000F974                            ; ---------------------------------------------------------------------------
0000F974                            ; Object 40 - Moto Bug enemy (GHZ)
0000F974                            ; ---------------------------------------------------------------------------
0000F974                            
0000F974                            Obj40:					; XREF: Obj_Index
0000F974 7000                       		moveq	#0,d0
0000F976 1028 0024                  		move.b	$24(a0),d0
0000F97A 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000F97E 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000F982                            ; ===========================================================================
0000F982 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000F984 0000                       		dc.w Obj40_Action-Obj40_Index
0000F986 0000                       		dc.w Obj40_Animate-Obj40_Index
0000F988 0000                       		dc.w Obj40_Delete-Obj40_Index
0000F98A                            ; ===========================================================================
0000F98A                            
0000F98A                            Obj40_Main:				; XREF: Obj40_Index
0000F98A 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000F992 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000F998 117C 0004 0001             		move.b	#4,1(a0)
0000F99E 117C 0004 0018             		move.b	#4,$18(a0)
0000F9A4 117C 0014 0019             		move.b	#$14,$19(a0)
0000F9AA 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000F9AE 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000F9B0 117C 000E 0016             		move.b	#$E,$16(a0)
0000F9B6 117C 0008 0017             		move.b	#8,$17(a0)
0000F9BC 117C 000C 0020             		move.b	#$C,$20(a0)
0000F9C2 6100 DF48                  		bsr.w	ObjectFall
0000F9C6 4EB9 0000 0000             		jsr	ObjHitFloor
0000F9CC 4A41                       		tst.w	d1
0000F9CE 6A00                       		bpl.s	locret_F68A
0000F9D0 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F9D4 317C 0000 0012             		move.w	#0,$12(a0)
0000F9DA 5428 0024                  		addq.b	#2,$24(a0)
0000F9DE 0868 0000 0022             		bchg	#0,$22(a0)
0000F9E4                            
0000F9E4                            locret_F68A:
0000F9E4 4E75                       		rts	
0000F9E6                            ; ===========================================================================
0000F9E6                            
0000F9E6                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000F9E6 5828 0024                  		addq.b	#4,$24(a0)
0000F9EA 6000 0000                  		bra.w	Obj40_Animate
0000F9EE                            ; ===========================================================================
0000F9EE                            
0000F9EE                            Obj40_Action:				; XREF: Obj40_Index
0000F9EE 7000                       		moveq	#0,d0
0000F9F0 1028 0025                  		move.b	$25(a0),d0
0000F9F4 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000F9F8 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000F9FC 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FA02 6100 B00C                  		bsr.w	AnimateSprite
0000FA06                            
0000FA06                            ; ---------------------------------------------------------------------------
0000FA06                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FA06                            ; ---------------------------------------------------------------------------
0000FA06                            
0000FA06                            MarkObjGone:
0000FA06 3028 0008                  		move.w	8(a0),d0
0000FA0A 0240 FF80                  		andi.w	#$FF80,d0
0000FA0E 3238 F700                  		move.w	($FFFFF700).w,d1
0000FA12 0441 0080                  		subi.w	#$80,d1
0000FA16 0241 FF80                  		andi.w	#$FF80,d1
0000FA1A 9041                       		sub.w	d1,d0
0000FA1C 0C40 0280                  		cmpi.w	#$280,d0
0000FA20 6200 0000                  		bhi.w	Mark_ChkGone
0000FA24 6000 DF38                  		bra.w	DisplaySprite
0000FA28                            ; ===========================================================================
0000FA28                            
0000FA28                            Mark_ChkGone:
0000FA28 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FA2C 7000                       		moveq	#0,d0
0000FA2E 1028 0023                  		move.b	$23(a0),d0
0000FA32 6700                       		beq.s	Mark_Delete
0000FA34 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FA3A                            
0000FA3A                            Mark_Delete:
0000FA3A 6000 DF5E                  		bra.w	DeleteObject
0000FA3E                            
0000FA3E                            ; ===========================================================================
0000FA3E 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FA40 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FA42                            ; ===========================================================================
0000FA42                            
0000FA42                            Obj40_Move:				; XREF: Obj40_Index2
0000FA42 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FA46 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FA48 5428 0025                  		addq.b	#2,$25(a0)
0000FA4C 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FA52 117C 0001 001C             		move.b	#1,$1C(a0)
0000FA58 0868 0000 0022             		bchg	#0,$22(a0)
0000FA5E 6600                       		bne.s	locret_F70A
0000FA60 4468 0010                  		neg.w	$10(a0)		; change direction
0000FA64                            
0000FA64                            locret_F70A:
0000FA64 4E75                       		rts	
0000FA66                            ; ===========================================================================
0000FA66                            
0000FA66                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FA66 6100 DED0                  		bsr.w	SpeedToPos
0000FA6A 4EB9 0000 0000             		jsr	ObjHitFloor
0000FA70 0C41 FFF8                  		cmpi.w	#-8,d1
0000FA74 6D00                       		blt.s	Obj40_Pause
0000FA76 0C41 000C                  		cmpi.w	#$C,d1
0000FA7A 6C00                       		bge.s	Obj40_Pause
0000FA7C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FA80 5328 0033                  		subq.b	#1,$33(a0)
0000FA84 6A00                       		bpl.s	locret_F756
0000FA86 117C 000F 0033             		move.b	#$F,$33(a0)
0000FA8C 6100 E356                  		bsr.w	SingleObjLoad
0000FA90 6600                       		bne.s	locret_F756
0000FA92 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FA96 3368 0008 0008             		move.w	8(a0),8(a1)
0000FA9C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FAA2 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FAA8 137C 0002 001C             		move.b	#2,$1C(a1)
0000FAAE                            
0000FAAE                            locret_F756:
0000FAAE 4E75                       		rts	
0000FAB0                            ; ===========================================================================
0000FAB0                            
0000FAB0                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FAB0 5528 0025                  		subq.b	#2,$25(a0)
0000FAB4 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FABA 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FAC0 117C 0000 001C             		move.b	#0,$1C(a0)
0000FAC6 4E75                       		rts	
0000FAC8                            ; ===========================================================================
0000FAC8                            
0000FAC8                            Obj40_Animate:				; XREF: Obj40_Index
0000FAC8 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FACE 6100 AF40                  		bsr.w	AnimateSprite
0000FAD2 6000 DE8A                  		bra.w	DisplaySprite
0000FAD6                            ; ===========================================================================
0000FAD6                            
0000FAD6                            Obj40_Delete:				; XREF: Obj40_Index
0000FAD6 6000 DEC2                  		bra.w	DeleteObject
0000FADA                            ; ===========================================================================
0000FADA                            Ani_obj40:
0000FADA                            	include "_anim\obj40.asm"
0000FADA                            ; ---------------------------------------------------------------------------
0000FADA                            ; Animation script - Motobug enemy
0000FADA                            ; ---------------------------------------------------------------------------
0000FADA 0000                       		dc.w byte_F788-Ani_obj40
0000FADC 0000                       		dc.w byte_F78C-Ani_obj40
0000FADE 0000                       		dc.w byte_F792-Ani_obj40
0000FAE0 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FAE4 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FAEA 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FAF8                            		even
0000FAF8                            		even
0000FAF8                            
0000FAF8                            ; ---------------------------------------------------------------------------
0000FAF8                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FAF8                            ; ---------------------------------------------------------------------------
0000FAF8                            Map_obj40:
0000FAF8                            	include "_maps\obj40.asm"
0000FAF8                            Map_cedc:
0000FAF8 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FAFA 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FAFC 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FAFE 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FB00 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FB02 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FB04 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FB06 04                         Map_cedc_E: 	dc.b $4
0000FB07 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FB0C 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FB11 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FB16 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FB1B 04                         Map_cedc_23: 	dc.b $4
0000FB1C F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FB21 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FB26 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FB2B 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FB30 05                         Map_cedc_38: 	dc.b $5
0000FB31 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FB36 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FB3B F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FB40 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FB45 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FB4A 01                         Map_cedc_52: 	dc.b $1
0000FB4B FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FB50 01                         Map_cedc_58: 	dc.b $1
0000FB51 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FB56 01                         Map_cedc_5E: 	dc.b $1
0000FB57 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FB5C 00                         Map_cedc_64: 	dc.b $0
0000FB5E 00                         	even
0000FB5E 00                         	even
0000FB5E                            
0000FB5E                            ; ===========================================================================
0000FB5E                            ; ---------------------------------------------------------------------------
0000FB5E                            ; Object 4F - blank
0000FB5E                            ; ---------------------------------------------------------------------------
0000FB5E                            
0000FB5E                            Obj4F:					; XREF: Obj_Index
0000FB5E 4E75                       		rts	
0000FB60                            
0000FB60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB60                            
0000FB60                            
0000FB60                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FB60 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FB64 D047                       		add.w	d7,d0
0000FB66 0240 0003                  		andi.w	#3,d0
0000FB6A 6600                       		bne.s	loc_F836
0000FB6C 7600                       		moveq	#0,d3
0000FB6E 1628 0019                  		move.b	$19(a0),d3
0000FB72 4A68 0010                  		tst.w	$10(a0)
0000FB76 6B00                       		bmi.s	loc_F82C
0000FB78 6100 0000                  		bsr.w	ObjHitWallRight
0000FB7C 4A41                       		tst.w	d1
0000FB7E 6A00                       		bpl.s	loc_F836
0000FB80                            
0000FB80                            loc_F828:
0000FB80 7001                       		moveq	#1,d0
0000FB82 4E75                       		rts	
0000FB84                            ; ===========================================================================
0000FB84                            
0000FB84                            loc_F82C:
0000FB84 4643                       		not.w	d3
0000FB86 6100 0000                  		bsr.w	ObjHitWallLeft
0000FB8A 4A41                       		tst.w	d1
0000FB8C 6BF2                       		bmi.s	loc_F828
0000FB8E                            
0000FB8E                            loc_F836:
0000FB8E 7000                       		moveq	#0,d0
0000FB90 4E75                       		rts	
0000FB92                            ; End of function Obj50_ChkWall
0000FB92                            
0000FB92                            ; ===========================================================================
0000FB92                            ; ---------------------------------------------------------------------------
0000FB92                            ; Object 50 - Yadrin enemy (SYZ)
0000FB92                            ; ---------------------------------------------------------------------------
0000FB92                            
0000FB92                            Obj50:					; XREF: Obj_Index
0000FB92 7000                       		moveq	#0,d0
0000FB94 1028 0024                  		move.b	$24(a0),d0
0000FB98 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FB9C 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FBA0                            ; ===========================================================================
0000FBA0 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FBA2 0000                       		dc.w Obj50_Action-Obj50_Index
0000FBA4                            ; ===========================================================================
0000FBA4                            
0000FBA4                            Obj50_Main:				; XREF: Obj50_Index
0000FBA4 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FBAC 317C 247B 0002             		move.w	#$247B,2(a0)
0000FBB2 117C 0004 0001             		move.b	#4,1(a0)
0000FBB8 117C 0004 0018             		move.b	#4,$18(a0)
0000FBBE 117C 0014 0019             		move.b	#$14,$19(a0)
0000FBC4 117C 0011 0016             		move.b	#$11,$16(a0)
0000FBCA 117C 0008 0017             		move.b	#8,$17(a0)
0000FBD0 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FBD6 6100 DD34                  		bsr.w	ObjectFall
0000FBDA 6100 0000                  		bsr.w	ObjHitFloor
0000FBDE 4A41                       		tst.w	d1
0000FBE0 6A00                       		bpl.s	locret_F89E
0000FBE2 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FBE6 317C 0000 0012             		move.w	#0,$12(a0)
0000FBEC 5428 0024                  		addq.b	#2,$24(a0)
0000FBF0 0868 0000 0022             		bchg	#0,$22(a0)
0000FBF6                            
0000FBF6                            locret_F89E:
0000FBF6 4E75                       		rts	
0000FBF8                            ; ===========================================================================
0000FBF8                            
0000FBF8                            Obj50_Action:				; XREF: Obj50_Index
0000FBF8 7000                       		moveq	#0,d0
0000FBFA 1028 0025                  		move.b	$25(a0),d0
0000FBFE 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FC02 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FC06 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FC0C 6100 AE02                  		bsr.w	AnimateSprite
0000FC10 6000 FDF4                  		bra.w	MarkObjGone
0000FC14                            ; ===========================================================================
0000FC14 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FC16 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FC18                            ; ===========================================================================
0000FC18                            
0000FC18                            Obj50_Move:				; XREF: Obj50_Index2
0000FC18 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FC1C 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FC1E 5428 0025                  		addq.b	#2,$25(a0)
0000FC22 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FC28 117C 0001 001C             		move.b	#1,$1C(a0)
0000FC2E 0868 0000 0022             		bchg	#0,$22(a0)
0000FC34 6600                       		bne.s	locret_F8E2
0000FC36 4468 0010                  		neg.w	$10(a0)		; change direction
0000FC3A                            
0000FC3A                            locret_F8E2:
0000FC3A 4E75                       		rts	
0000FC3C                            ; ===========================================================================
0000FC3C                            
0000FC3C                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FC3C 6100 DCFA                  		bsr.w	SpeedToPos
0000FC40 6100 0000                  		bsr.w	ObjHitFloor
0000FC44 0C41 FFF8                  		cmpi.w	#-8,d1
0000FC48 6D00                       		blt.s	Obj50_Pause
0000FC4A 0C41 000C                  		cmpi.w	#$C,d1
0000FC4E 6C00                       		bge.s	Obj50_Pause
0000FC50 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FC54 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FC58 6600                       		bne.s	Obj50_Pause
0000FC5A 4E75                       		rts	
0000FC5C                            ; ===========================================================================
0000FC5C                            
0000FC5C                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FC5C 5528 0025                  		subq.b	#2,$25(a0)
0000FC60 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FC66 317C 0000 0010             		move.w	#0,$10(a0)
0000FC6C 117C 0000 001C             		move.b	#0,$1C(a0)
0000FC72 4E75                       		rts	
0000FC74                            ; ===========================================================================
0000FC74                            Ani_obj50:
0000FC74                            	include "_anim\obj50.asm"
0000FC74                            ; ---------------------------------------------------------------------------
0000FC74                            ; Animation script - Yadrin enemy
0000FC74                            ; ---------------------------------------------------------------------------
0000FC74 0000                       		dc.w byte_F920-Ani_obj50
0000FC76 0000                       		dc.w byte_F924-Ani_obj50
0000FC78 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FC7C 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FC86                            		even
0000FC86                            		even
0000FC86                            
0000FC86                            ; ---------------------------------------------------------------------------
0000FC86                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FC86                            ; ---------------------------------------------------------------------------
0000FC86                            Map_obj50:
0000FC86                            	include "_maps\obj50.asm"
0000FC86                            ; ---------------------------------------------------------------------------
0000FC86                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FC86                            ; ---------------------------------------------------------------------------
0000FC86 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000FC8A 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000FC8E 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000FC92 05                         byte_F93A:	dc.b 5
0000FC93 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FC98 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FC9D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FCA2 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FCA7 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FCAC 05                         byte_F954:	dc.b 5
0000FCAD F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FCB2 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FCB7 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FCBC F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FCC1 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FCC6 05                         byte_F96E:	dc.b 5
0000FCC7 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FCCC 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FCD1 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FCD6 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FCDB 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FCE0 05                         byte_F988:	dc.b 5
0000FCE1 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FCE6 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FCEB EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FCF0 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FCF5 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FCFA 05                         byte_F9A2:	dc.b 5
0000FCFB F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FD00 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FD05 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FD0A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FD0F 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FD14 05                         byte_F9BC:	dc.b 5
0000FD15 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FD1A 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FD1F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FD24 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FD29 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FD2E                            		even
0000FD2E                            		even
0000FD2E                            
0000FD2E                            ; ---------------------------------------------------------------------------
0000FD2E                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FD2E                            ;
0000FD2E                            ; variables:
0000FD2E                            ; d1 = width
0000FD2E                            ; d2 = height /	2 (when	jumping)
0000FD2E                            ; d3 = height /	2 (when	walking)
0000FD2E                            ; d4 = x-axis position
0000FD2E                            ; ---------------------------------------------------------------------------
0000FD2E                            
0000FD2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD2E                            
0000FD2E                            
0000FD2E                            SolidObject:
0000FD2E 4A28 0025                  		tst.b	$25(a0)
0000FD32 6700 0000                  		beq.w	loc_FAC8
0000FD36 3401                       		move.w	d1,d2
0000FD38 D442                       		add.w	d2,d2
0000FD3A 43F8 D000                  		lea	($FFFFD000).w,a1
0000FD3E 0829 0001 0022             		btst	#1,$22(a1)
0000FD44 6600                       		bne.s	loc_F9FE
0000FD46 3029 0008                  		move.w	8(a1),d0
0000FD4A 9068 0008                  		sub.w	8(a0),d0
0000FD4E D041                       		add.w	d1,d0
0000FD50 6B00                       		bmi.s	loc_F9FE
0000FD52 B042                       		cmp.w	d2,d0
0000FD54 6500                       		bcs.s	loc_FA12
0000FD56                            
0000FD56                            loc_F9FE:
0000FD56 08A9 0003 0022             		bclr	#3,$22(a1)
0000FD5C 08A8 0003 0022             		bclr	#3,$22(a0)
0000FD62 4228 0025                  		clr.b	$25(a0)
0000FD66 7800                       		moveq	#0,d4
0000FD68 4E75                       		rts	
0000FD6A                            ; ===========================================================================
0000FD6A                            
0000FD6A                            loc_FA12:
0000FD6A 3404                       		move.w	d4,d2
0000FD6C 6100 80D8                  		bsr.w	MvSonicOnPtfm
0000FD70 7800                       		moveq	#0,d4
0000FD72 4E75                       		rts	
0000FD74                            ; ===========================================================================
0000FD74                            
0000FD74                            SolidObject71:				; XREF: Obj71_Solid
0000FD74 4A28 0025                  		tst.b	$25(a0)
0000FD78 6700 0000                  		beq.w	loc_FAD0
0000FD7C 3401                       		move.w	d1,d2
0000FD7E D442                       		add.w	d2,d2
0000FD80 43F8 D000                  		lea	($FFFFD000).w,a1
0000FD84 0829 0001 0022             		btst	#1,$22(a1)
0000FD8A 6600                       		bne.s	loc_FA44
0000FD8C 3029 0008                  		move.w	8(a1),d0
0000FD90 9068 0008                  		sub.w	8(a0),d0
0000FD94 D041                       		add.w	d1,d0
0000FD96 6B00                       		bmi.s	loc_FA44
0000FD98 B042                       		cmp.w	d2,d0
0000FD9A 6500                       		bcs.s	loc_FA58
0000FD9C                            
0000FD9C                            loc_FA44:
0000FD9C 08A9 0003 0022             		bclr	#3,$22(a1)
0000FDA2 08A8 0003 0022             		bclr	#3,$22(a0)
0000FDA8 4228 0025                  		clr.b	$25(a0)
0000FDAC 7800                       		moveq	#0,d4
0000FDAE 4E75                       		rts	
0000FDB0                            ; ===========================================================================
0000FDB0                            
0000FDB0                            loc_FA58:
0000FDB0 3404                       		move.w	d4,d2
0000FDB2 6100 8092                  		bsr.w	MvSonicOnPtfm
0000FDB6 7800                       		moveq	#0,d4
0000FDB8 4E75                       		rts	
0000FDBA                            ; ===========================================================================
0000FDBA                            
0000FDBA                            SolidObject2F:				; XREF: Obj2F_Solid
0000FDBA 43F8 D000                  		lea	($FFFFD000).w,a1
0000FDBE 4A28 0001                  		tst.b	1(a0)
0000FDC2 6A00 0000                  		bpl.w	loc_FB92
0000FDC6 3029 0008                  		move.w	8(a1),d0
0000FDCA 9068 0008                  		sub.w	8(a0),d0
0000FDCE D041                       		add.w	d1,d0
0000FDD0 6B00 0000                  		bmi.w	loc_FB92
0000FDD4 3601                       		move.w	d1,d3
0000FDD6 D643                       		add.w	d3,d3
0000FDD8 B043                       		cmp.w	d3,d0
0000FDDA 6200 0000                  		bhi.w	loc_FB92
0000FDDE 3A00                       		move.w	d0,d5
0000FDE0 0828 0000 0001             		btst	#0,1(a0)
0000FDE6 6700                       		beq.s	loc_FA94
0000FDE8 4645                       		not.w	d5
0000FDEA DA43                       		add.w	d3,d5
0000FDEC                            
0000FDEC                            loc_FA94:
0000FDEC E24D                       		lsr.w	#1,d5
0000FDEE 7600                       		moveq	#0,d3
0000FDF0 1632 5000                  		move.b	(a2,d5.w),d3
0000FDF4 9612                       		sub.b	(a2),d3
0000FDF6 3A28 000C                  		move.w	$C(a0),d5
0000FDFA 9A43                       		sub.w	d3,d5
0000FDFC 1629 0016                  		move.b	$16(a1),d3
0000FE00 4883                       		ext.w	d3
0000FE02 D443                       		add.w	d3,d2
0000FE04 3629 000C                  		move.w	$C(a1),d3
0000FE08 9645                       		sub.w	d5,d3
0000FE0A 5843                       		addq.w	#4,d3
0000FE0C D642                       		add.w	d2,d3
0000FE0E 6B00 0000                  		bmi.w	loc_FB92
0000FE12 3802                       		move.w	d2,d4
0000FE14 D844                       		add.w	d4,d4
0000FE16 B644                       		cmp.w	d4,d3
0000FE18 6400 0000                  		bcc.w	loc_FB92
0000FE1C 6000 0000                  		bra.w	loc_FB0E
0000FE20                            ; ===========================================================================
0000FE20                            
0000FE20                            loc_FAC8:
0000FE20 4A28 0001                  		tst.b	1(a0)
0000FE24 6A00 0000                  		bpl.w	loc_FB92
0000FE28                            
0000FE28                            loc_FAD0:
0000FE28 43F8 D000                  		lea	($FFFFD000).w,a1
0000FE2C 3029 0008                  		move.w	8(a1),d0
0000FE30 9068 0008                  		sub.w	8(a0),d0
0000FE34 D041                       		add.w	d1,d0
0000FE36 6B00 0000                  		bmi.w	loc_FB92
0000FE3A 3601                       		move.w	d1,d3
0000FE3C D643                       		add.w	d3,d3
0000FE3E B043                       		cmp.w	d3,d0
0000FE40 6200 0000                  		bhi.w	loc_FB92
0000FE44 1629 0016                  		move.b	$16(a1),d3
0000FE48 4883                       		ext.w	d3
0000FE4A D443                       		add.w	d3,d2
0000FE4C 3629 000C                  		move.w	$C(a1),d3
0000FE50 9668 000C                  		sub.w	$C(a0),d3
0000FE54 5843                       		addq.w	#4,d3
0000FE56 D642                       		add.w	d2,d3
0000FE58 6B00 0000                  		bmi.w	loc_FB92
0000FE5C 3802                       		move.w	d2,d4
0000FE5E D844                       		add.w	d4,d4
0000FE60 B644                       		cmp.w	d4,d3
0000FE62 6400 0000                  		bcc.w	loc_FB92
0000FE66                            
0000FE66                            loc_FB0E:
0000FE66 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000FE6A 6B00 0000                  		bmi.w	loc_FB92
0000FE6E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000FE74 6400 0000                  		bcc.w	loc_FB92
0000FE78 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FE7C 6600 0000                  		bne.w	loc_FBAC
0000FE80 3A00                       		move.w	d0,d5
0000FE82 B240                       		cmp.w	d0,d1
0000FE84 6400                       		bcc.s	loc_FB36
0000FE86 D241                       		add.w	d1,d1
0000FE88 9041                       		sub.w	d1,d0
0000FE8A 3A00                       		move.w	d0,d5
0000FE8C 4445                       		neg.w	d5
0000FE8E                            
0000FE8E                            loc_FB36:
0000FE8E 3203                       		move.w	d3,d1
0000FE90 B443                       		cmp.w	d3,d2
0000FE92 6400                       		bcc.s	loc_FB44
0000FE94 5943                       		subq.w	#4,d3
0000FE96 9644                       		sub.w	d4,d3
0000FE98 3203                       		move.w	d3,d1
0000FE9A 4441                       		neg.w	d1
0000FE9C                            
0000FE9C                            loc_FB44:
0000FE9C BA41                       		cmp.w	d1,d5
0000FE9E 6200 0000                  		bhi.w	loc_FBB0
0000FEA2 0C41 0004                  		cmpi.w	#4,d1
0000FEA6 6300                       		bls.s	loc_FB8C
0000FEA8 4A40                       		tst.w	d0
0000FEAA 6700                       		beq.s	loc_FB70
0000FEAC 6B00                       		bmi.s	loc_FB5E
0000FEAE 4A69 0010                  		tst.w	$10(a1)
0000FEB2 6B00                       		bmi.s	loc_FB70
0000FEB4 6000                       		bra.s	loc_FB64
0000FEB6                            ; ===========================================================================
0000FEB6                            
0000FEB6                            loc_FB5E:
0000FEB6 4A69 0010                  		tst.w	$10(a1)
0000FEBA 6A00                       		bpl.s	loc_FB70
0000FEBC                            
0000FEBC                            loc_FB64:
0000FEBC 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0000FEC2 337C 0000 0010             		move.w	#0,$10(a1)
0000FEC8                            
0000FEC8                            loc_FB70:
0000FEC8 9169 0008                  		sub.w	d0,8(a1)
0000FECC 0829 0001 0022             		btst	#1,$22(a1)
0000FED2 6600                       		bne.s	loc_FB8C
0000FED4 08E9 0005 0022             		bset	#5,$22(a1)
0000FEDA 08E8 0005 0022             		bset	#5,$22(a0)
0000FEE0 7801                       		moveq	#1,d4
0000FEE2 4E75                       		rts	
0000FEE4                            ; ===========================================================================
0000FEE4                            
0000FEE4                            loc_FB8C:
0000FEE4 6100                       		bsr.s	loc_FBA0
0000FEE6 7801                       		moveq	#1,d4
0000FEE8 4E75                       		rts	
0000FEEA                            ; ===========================================================================
0000FEEA                            
0000FEEA                            loc_FB92:
0000FEEA 0828 0005 0022             		btst	#5,$22(a0)
0000FEF0 6700                       		beq.s	loc_FBAC
0000FEF2 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0000FEF8                            
0000FEF8                            loc_FBA0:
0000FEF8 08A8 0005 0022             		bclr	#5,$22(a0)
0000FEFE 08A9 0005 0022             		bclr	#5,$22(a1)
0000FF04                            
0000FF04                            loc_FBAC:
0000FF04 7800                       		moveq	#0,d4
0000FF06 4E75                       		rts	
0000FF08                            ; ===========================================================================
0000FF08                            
0000FF08                            loc_FBB0:
0000FF08 4A43                       		tst.w	d3
0000FF0A 6B00                       		bmi.s	loc_FBBC
0000FF0C 0C43 0010                  		cmpi.w	#$10,d3
0000FF10 6500                       		bcs.s	loc_FBEE
0000FF12 60D6                       		bra.s	loc_FB92
0000FF14                            ; ===========================================================================
0000FF14                            
0000FF14                            loc_FBBC:
0000FF14 4A69 0012                  		tst.w	$12(a1)
0000FF18 6700                       		beq.s	loc_FBD6
0000FF1A 6A00                       		bpl.s	loc_FBD2
0000FF1C 4A43                       		tst.w	d3
0000FF1E 6A00                       		bpl.s	loc_FBD2
0000FF20 9769 000C                  		sub.w	d3,$C(a1)
0000FF24 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0000FF2A                            
0000FF2A                            loc_FBD2:
0000FF2A 78FF                       		moveq	#-1,d4
0000FF2C 4E75                       		rts	
0000FF2E                            ; ===========================================================================
0000FF2E                            
0000FF2E                            loc_FBD6:
0000FF2E 0829 0001 0022             		btst	#1,$22(a1)
0000FF34 66F4                       		bne.s	loc_FBD2
0000FF36 2F08                       		move.l	a0,-(sp)
0000FF38 2049                       		movea.l	a1,a0
0000FF3A 4EB9 0000 0000             		jsr	KillSonic
0000FF40 205F                       		movea.l	(sp)+,a0
0000FF42 78FF                       		moveq	#-1,d4
0000FF44 4E75                       		rts	
0000FF46                            ; ===========================================================================
0000FF46                            
0000FF46                            loc_FBEE:
0000FF46 5943                       		subq.w	#4,d3
0000FF48 7200                       		moveq	#0,d1
0000FF4A 1228 0019                  		move.b	$19(a0),d1
0000FF4E 3401                       		move.w	d1,d2
0000FF50 D442                       		add.w	d2,d2
0000FF52 D269 0008                  		add.w	8(a1),d1
0000FF56 9268 0008                  		sub.w	8(a0),d1
0000FF5A 6B00                       		bmi.s	loc_FC28
0000FF5C B242                       		cmp.w	d2,d1
0000FF5E 6400                       		bcc.s	loc_FC28
0000FF60 4A69 0012                  		tst.w	$12(a1)
0000FF64 6B00                       		bmi.s	loc_FC28
0000FF66 9769 000C                  		sub.w	d3,$C(a1)
0000FF6A 5369 000C                  		subq.w	#1,$C(a1)
0000FF6E 6100                       		bsr.s	sub_FC2C
0000FF70 117C 0002 0025             		move.b	#2,$25(a0)
0000FF76 08E8 0003 0022             		bset	#3,$22(a0)
0000FF7C 78FF                       		moveq	#-1,d4
0000FF7E 4E75                       		rts	
0000FF80                            ; ===========================================================================
0000FF80                            
0000FF80                            loc_FC28:
0000FF80 7800                       		moveq	#0,d4
0000FF82 4E75                       		rts	
0000FF84                            ; End of function SolidObject
0000FF84                            
0000FF84                            
0000FF84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FF84                            
0000FF84                            
0000FF84                            sub_FC2C:				; XREF: SolidObject
0000FF84 0829 0003 0022             		btst	#3,$22(a1)
0000FF8A 6700                       		beq.s	loc_FC4E
0000FF8C 7000                       		moveq	#0,d0
0000FF8E 1029 003D                  		move.b	$3D(a1),d0
0000FF92 ED48                       		lsl.w	#6,d0
0000FF94 0680 00FF D000             		addi.l	#$FFD000,d0
0000FF9A 2440                       		movea.l	d0,a2
0000FF9C 08AA 0003 0022             		bclr	#3,$22(a2)
0000FFA2 422A 0025                  		clr.b	$25(a2)
0000FFA6                            
0000FFA6                            loc_FC4E:
0000FFA6 3008                       		move.w	a0,d0
0000FFA8 0440 D000                  		subi.w	#-$3000,d0
0000FFAC EC48                       		lsr.w	#6,d0
0000FFAE 0240 007F                  		andi.w	#$7F,d0
0000FFB2 1340 003D                  		move.b	d0,$3D(a1)
0000FFB6 137C 0000 0026             		move.b	#0,$26(a1)
0000FFBC 337C 0000 0012             		move.w	#0,$12(a1)
0000FFC2 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000FFC8 0829 0001 0022             		btst	#1,$22(a1)
0000FFCE 6700                       		beq.s	loc_FC84
0000FFD0 2F08                       		move.l	a0,-(sp)
0000FFD2 2049                       		movea.l	a1,a0
0000FFD4 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000FFDA 205F                       		movea.l	(sp)+,a0
0000FFDC                            
0000FFDC                            loc_FC84:
0000FFDC 08E9 0003 0022             		bset	#3,$22(a1)
0000FFE2 08E8 0003 0022             		bset	#3,$22(a0)
0000FFE8 4E75                       		rts	
0000FFEA                            ; End of function sub_FC2C
0000FFEA                            
0000FFEA                            ; ===========================================================================
0000FFEA                            ; ---------------------------------------------------------------------------
0000FFEA                            ; Object 51 - smashable	green block (MZ)
0000FFEA                            ; ---------------------------------------------------------------------------
0000FFEA                            
0000FFEA                            Obj51:					; XREF: Obj_Index
0000FFEA 7000                       		moveq	#0,d0
0000FFEC 1028 0024                  		move.b	$24(a0),d0
0000FFF0 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0000FFF4 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0000FFF8 6000 FA0C                  		bra.w	MarkObjGone
0000FFFC                            ; ===========================================================================
0000FFFC 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0000FFFE 0000                       		dc.w Obj51_Solid-Obj51_Index
00010000 0000                       		dc.w Obj51_Display-Obj51_Index
00010002                            ; ===========================================================================
00010002                            
00010002                            Obj51_Main:				; XREF: Obj51_Index
00010002 5428 0024                  		addq.b	#2,$24(a0)
00010006 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0001000E 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010014 117C 0004 0001             		move.b	#4,1(a0)
0001001A 117C 0010 0019             		move.b	#$10,$19(a0)
00010020 117C 0004 0018             		move.b	#4,$18(a0)
00010026 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001002C                            
0001002C                            Obj51_Solid:				; XREF: Obj51_Index
0001002C 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010032 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010038 323C 001B                  		move.w	#$1B,d1
0001003C 343C 0010                  		move.w	#$10,d2
00010040 363C 0011                  		move.w	#$11,d3
00010044 3828 0008                  		move.w	8(a0),d4
00010048 6100 FCE4                  		bsr.w	SolidObject
0001004C 0828 0003 0022             		btst	#3,$22(a0)
00010052 6600                       		bne.s	Obj51_Smash
00010054                            
00010054                            locret_FCFC:
00010054 4E75                       		rts	
00010056                            ; ===========================================================================
00010056                            
00010056                            Obj51_Smash:				; XREF: Obj51_Solid
00010056 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0001005C 66F6                       		bne.s	locret_FCFC	; if not, branch
0001005E 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010064 08E9 0002 0022             		bset	#2,$22(a1)
0001006A 137C 000E 0016             		move.b	#$E,$16(a1)
00010070 137C 0007 0017             		move.b	#7,$17(a1)
00010076 137C 0002 001C             		move.b	#2,$1C(a1)
0001007C 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010082 08E9 0001 0022             		bset	#1,$22(a1)
00010088 08A9 0003 0022             		bclr	#3,$22(a1)
0001008E 137C 0002 0024             		move.b	#2,$24(a1)
00010094 08A8 0003 0022             		bclr	#3,$22(a0)
0001009A 4228 0025                  		clr.b	$25(a0)
0001009E 117C 0001 001A             		move.b	#1,$1A(a0)
000100A4 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000100AA 7203                       		moveq	#3,d1		; set number of	fragments to 4
000100AC 343C 0038                  		move.w	#$38,d2
000100B0 6100 D49A                  		bsr.w	SmashObject
000100B4 6100 DD2E                  		bsr.w	SingleObjLoad
000100B8 6600                       		bne.s	Obj51_Display
000100BA 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000100BE 3368 0008 0008             		move.w	8(a0),8(a1)
000100C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000100CA 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000100CE 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000100D2 0C42 0006                  		cmpi.w	#6,d2
000100D6 6500                       		bcs.s	Obj51_Bonus
000100D8 7406                       		moveq	#6,d2
000100DA                            
000100DA                            Obj51_Bonus:
000100DA 7000                       		moveq	#0,d0
000100DC 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000100E0 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000100E6 6500                       		bcs.s	loc_FD98	; if not, branch
000100E8 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000100EC 740A                       		moveq	#10,d2
000100EE                            
000100EE                            loc_FD98:
000100EE 4EB9 0000 0000             		jsr	AddPoints
000100F4 E24A                       		lsr.w	#1,d2
000100F6 1342 001A                  		move.b	d2,$1A(a1)
000100FA                            
000100FA                            Obj51_Display:				; XREF: Obj51_Index
000100FA 6100 D83C                  		bsr.w	SpeedToPos
000100FE 0668 0038 0012             		addi.w	#$38,$12(a0)
00010104 6100 D858                  		bsr.w	DisplaySprite
00010108 4A28 0001                  		tst.b	1(a0)
0001010C 6A00 D88C                  		bpl.w	DeleteObject
00010110 4E75                       		rts	
00010112                            ; ===========================================================================
00010112 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010116 FF00 FF00                  		dc.w $FF00, $FF00
0001011A 0200 FE00                  		dc.w $200, $FE00
0001011E 0100 FF00                  		dc.w $100, $FF00
00010122                            
00010122 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0001012A                            ; ---------------------------------------------------------------------------
0001012A                            ; Sprite mappings - smashable green block (MZ)
0001012A                            ; ---------------------------------------------------------------------------
0001012A                            Map_obj51:
0001012A                            	include "_maps\obj51.asm"
0001012A                            ; ---------------------------------------------------------------------------
0001012A                            ; Sprite mappings - smashable green block (MZ)
0001012A                            ; ---------------------------------------------------------------------------
0001012A 0000                       		dc.w byte_FDD8-Map_obj51
0001012C 0000                       		dc.w byte_FDE3-Map_obj51
0001012E 02                         byte_FDD8:	dc.b 2
0001012F F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010134 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010139 04                         byte_FDE3:	dc.b 4
0001013A F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0001013F 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010144 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010149 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0001014E                            		even
0001014E                            		even
0001014E                            
0001014E                            ; ===========================================================================
0001014E                            ; ---------------------------------------------------------------------------
0001014E                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0001014E                            ; ---------------------------------------------------------------------------
0001014E                            
0001014E                            Obj52:					; XREF: Obj_Index
0001014E 7000                       		moveq	#0,d0
00010150 1028 0024                  		move.b	$24(a0),d0
00010154 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010158 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0001015C                            ; ===========================================================================
0001015C 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0001015E 0000                       		dc.w Obj52_Platform-Obj52_Index
00010160 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010162                            
00010162 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010164 2001                       		dc.b $20, 1
00010166 2002                       		dc.b $20, 2
00010168 4003                       		dc.b $40, 3
0001016A 3004                       		dc.b $30, 4
0001016C                            ; ===========================================================================
0001016C                            
0001016C                            Obj52_Main:				; XREF: Obj52_Index
0001016C 5428 0024                  		addq.b	#2,$24(a0)
00010170 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010178 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001017E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010184 6600                       		bne.s	loc_FE44
00010186 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0001018E 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010194 117C 0007 0016             		move.b	#7,$16(a0)
0001019A                            
0001019A                            loc_FE44:
0001019A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000101A0 6600                       		bne.s	loc_FE60
000101A2 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000101A8 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000101AE 6700                       		beq.s	loc_FE60	; if yes, branch
000101B0 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000101B6                            
000101B6                            loc_FE60:
000101B6 117C 0004 0001             		move.b	#4,1(a0)
000101BC 7000                       		moveq	#0,d0
000101BE 1028 0028                  		move.b	$28(a0),d0
000101C2 E648                       		lsr.w	#3,d0
000101C4 0240 001E                  		andi.w	#$1E,d0
000101C8 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000101CC 115A 0019                  		move.b	(a2)+,$19(a0)
000101D0 115A 001A                  		move.b	(a2)+,$1A(a0)
000101D4 117C 0004 0018             		move.b	#4,$18(a0)
000101DA 3168 0008 0030             		move.w	8(a0),$30(a0)
000101E0 3168 000C 0032             		move.w	$C(a0),$32(a0)
000101E6 0228 000F 0028             		andi.b	#$F,$28(a0)
000101EC                            
000101EC                            Obj52_Platform:				; XREF: Obj52_Index
000101EC 6100 0000                  		bsr.w	Obj52_Move
000101F0 7200                       		moveq	#0,d1
000101F2 1228 0019                  		move.b	$19(a0),d1
000101F6 4EB9 0000 7774             		jsr	(PlatformObject).l
000101FC 6000                       		bra.s	Obj52_ChkDel
000101FE                            ; ===========================================================================
000101FE                            
000101FE                            Obj52_StandOn:				; XREF: Obj52_Index
000101FE 7200                       		moveq	#0,d1
00010200 1228 0019                  		move.b	$19(a0),d1
00010204 4EB9 0000 78E8             		jsr	(ExitPlatform).l
0001020A 3F28 0008                  		move.w	8(a0),-(sp)
0001020E 6100 0000                  		bsr.w	Obj52_Move
00010212 341F                       		move.w	(sp)+,d2
00010214 4EB9 0000 7E52             		jsr	(MvSonicOnPtfm2).l
0001021A                            
0001021A                            Obj52_ChkDel:				; XREF: Obj52_Platform
0001021A 3028 0030                  		move.w	$30(a0),d0
0001021E 0240 FF80                  		andi.w	#$FF80,d0
00010222 3238 F700                  		move.w	($FFFFF700).w,d1
00010226 0441 0080                  		subi.w	#$80,d1
0001022A 0241 FF80                  		andi.w	#$FF80,d1
0001022E 9041                       		sub.w	d1,d0
00010230 0C40 0280                  		cmpi.w	#$280,d0
00010234 6200 D764                  		bhi.w	DeleteObject
00010238 6000 D724                  		bra.w	DisplaySprite
0001023C                            ; ===========================================================================
0001023C                            
0001023C                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001023C 7000                       		moveq	#0,d0
0001023E 1028 0028                  		move.b	$28(a0),d0
00010242 0240 000F                  		andi.w	#$F,d0
00010246 D040                       		add.w	d0,d0
00010248 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001024C 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010250                            ; ===========================================================================
00010250 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010254 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010258 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001025C 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010260 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010264 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010266                            ; ===========================================================================
00010266                            
00010266                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010266 4E75                       		rts	
00010268                            ; ===========================================================================
00010268                            
00010268                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010268 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001026C 323C 0060                  		move.w	#$60,d1
00010270 0828 0000 0022             		btst	#0,$22(a0)
00010276 6700                       		beq.s	loc_FF26
00010278 4440                       		neg.w	d0
0001027A D041                       		add.w	d1,d0
0001027C                            
0001027C                            loc_FF26:
0001027C 3228 0030                  		move.w	$30(a0),d1
00010280 9240                       		sub.w	d0,d1
00010282 3141 0008                  		move.w	d1,8(a0)
00010286 4E75                       		rts	
00010288                            ; ===========================================================================
00010288                            
00010288                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010288 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0001028E 6600                       		bne.s	Obj52_02_Wait
00010290 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010294                            
00010294                            Obj52_02_Wait:
00010294 4E75                       		rts	
00010296                            ; ===========================================================================
00010296                            
00010296                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010296 7600                       		moveq	#0,d3
00010298 1628 0019                  		move.b	$19(a0),d3
0001029C 6100 0000                  		bsr.w	ObjHitWallRight
000102A0 4A41                       		tst.w	d1		; has the platform hit a wall?
000102A2 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000102A4 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000102A8 3168 0008 0030             		move.w	8(a0),$30(a0)
000102AE 4E75                       		rts	
000102B0                            ; ===========================================================================
000102B0                            
000102B0                            Obj52_03_End:
000102B0 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000102B4 4E75                       		rts	
000102B6                            ; ===========================================================================
000102B6                            
000102B6                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000102B6 7600                       		moveq	#0,d3
000102B8 1628 0019                  		move.b	$19(a0),d3
000102BC 6100 0000                  		bsr.w	ObjHitWallRight
000102C0 4A41                       		tst.w	d1		; has the platform hit a wall?
000102C2 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000102C4 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000102C8 3168 0008 0030             		move.w	8(a0),$30(a0)
000102CE 4E75                       		rts	
000102D0                            ; ===========================================================================
000102D0                            
000102D0                            Obj52_05_End:
000102D0 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000102D4 4E75                       		rts	
000102D6                            ; ===========================================================================
000102D6                            
000102D6                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000102D6 6100 D660                  		bsr.w	SpeedToPos
000102DA 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000102E0 6100 0000                  		bsr.w	ObjHitFloor
000102E4 4A41                       		tst.w	d1		; has platform hit the floor?
000102E6 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000102EA D368 000C                  		add.w	d1,$C(a0)
000102EE 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000102F2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000102F6                            
000102F6                            locret_FFA0:
000102F6 4E75                       		rts	
000102F8                            ; ===========================================================================
000102F8                            
000102F8                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000102F8 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000102FC 6700                       		beq.s	Obj52_07_ChkDel
000102FE 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010302                            
00010302                            Obj52_07_ChkDel:
00010302 588F                       		addq.l	#4,sp
00010304 3028 0030                  		move.w	$30(a0),d0
00010308 0240 FF80                  		andi.w	#$FF80,d0
0001030C 3238 F700                  		move.w	($FFFFF700).w,d1
00010310 0441 0080                  		subi.w	#$80,d1
00010314 0241 FF80                  		andi.w	#$FF80,d1
00010318 9041                       		sub.w	d1,d0
0001031A 0C40 0280                  		cmpi.w	#$280,d0
0001031E 6200 D67A                  		bhi.w	DeleteObject
00010322 4E75                       		rts	
00010324                            ; ===========================================================================
00010324                            
00010324                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010324 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010328 323C 0080                  		move.w	#$80,d1
0001032C 0828 0000 0022             		btst	#0,$22(a0)
00010332 6700                       		beq.s	loc_FFE2
00010334 4440                       		neg.w	d0
00010336 D041                       		add.w	d1,d0
00010338                            
00010338                            loc_FFE2:
00010338 3228 0032                  		move.w	$32(a0),d1
0001033C 9240                       		sub.w	d0,d1
0001033E 3141 000C                  		move.w	d1,$C(a0)
00010342 4E75                       		rts	
00010344                            ; ===========================================================================
00010344                            
00010344                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010344 7600                       		moveq	#0,d3
00010346 1628 0019                  		move.b	$19(a0),d3
0001034A D643                       		add.w	d3,d3
0001034C 7208                       		moveq	#8,d1
0001034E 0828 0000 0022             		btst	#0,$22(a0)
00010354 6700                       		beq.s	loc_10004
00010356 4441                       		neg.w	d1
00010358 4443                       		neg.w	d3
0001035A                            
0001035A                            loc_10004:
0001035A 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
0001035E 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010360 3028 0008                  		move.w	8(a0),d0
00010364 9068 0030                  		sub.w	$30(a0),d0
00010368 B043                       		cmp.w	d3,d0
0001036A 6700                       		beq.s	Obj52_0A_Wait
0001036C D368 0008                  		add.w	d1,8(a0)	; move platform
00010370 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010376 4E75                       		rts	
00010378                            ; ===========================================================================
00010378                            
00010378                            Obj52_0A_Wait:
00010378 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001037C 6600                       		bne.s	locret_1002E	; if time remains, branch
0001037E 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010384                            
00010384                            locret_1002E:
00010384 4E75                       		rts	
00010386                            ; ===========================================================================
00010386                            
00010386                            Obj52_0A_Back:
00010386 3028 0008                  		move.w	8(a0),d0
0001038A 9068 0030                  		sub.w	$30(a0),d0
0001038E 6700                       		beq.s	Obj52_0A_Reset
00010390 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010394 4E75                       		rts	
00010396                            ; ===========================================================================
00010396                            
00010396                            Obj52_0A_Reset:
00010396 4268 0036                  		clr.w	$36(a0)
0001039A 5328 0028                  		subq.b	#1,$28(a0)
0001039E 4E75                       		rts	
000103A0                            ; ===========================================================================
000103A0                            ; ---------------------------------------------------------------------------
000103A0                            ; Sprite mappings - moving blocks (MZ, SBZ)
000103A0                            ; ---------------------------------------------------------------------------
000103A0                            Map_obj52:
000103A0                            	include "_maps\obj52mz.asm"
000103A0                            ; ---------------------------------------------------------------------------
000103A0                            ; Sprite mappings - moving blocks (MZ, SBZ)
000103A0                            ; ---------------------------------------------------------------------------
000103A0 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000103A4 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000103A8 0000                       		dc.w byte_1008F-Map_obj52
000103AA 01                         byte_10054:	dc.b 1
000103AB F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000103B0 02                         byte_1005A:	dc.b 2
000103B1 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000103B6 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000103BB 04                         byte_10065:	dc.b 4
000103BC F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000103C1 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000103C6 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000103CB 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000103D0 04                         byte_1007A:	dc.b 4
000103D1 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000103D6 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000103DB F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000103E0 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000103E5 03                         byte_1008F:	dc.b 3
000103E6 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000103EB F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000103F0 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000103F6 00                         		even
000103F6 00                         		even
000103F6                            
000103F6                            ; ---------------------------------------------------------------------------
000103F6                            ; Sprite mappings - moving block (LZ)
000103F6                            ; ---------------------------------------------------------------------------
000103F6                            Map_obj52a:
000103F6                            	include "_maps\obj52lz.asm"
000103F6                            ; ---------------------------------------------------------------------------
000103F6                            ; Sprite mappings - moving block (LZ)
000103F6                            ; ---------------------------------------------------------------------------
000103F6 0000                       		dc.w byte_100A2-Map_obj52a
000103F8 01                         byte_100A2:	dc.b 1
000103F9 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000103FE                            		even
000103FE                            		even
000103FE                            
000103FE                            ; ===========================================================================
000103FE                            ; ---------------------------------------------------------------------------
000103FE                            ; Object 55 - Basaran enemy (MZ)
000103FE                            ; ---------------------------------------------------------------------------
000103FE                            
000103FE                            Obj55:					; XREF: Obj_Index
000103FE 7000                       		moveq	#0,d0
00010400 1028 0024                  		move.b	$24(a0),d0
00010404 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010408 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
0001040C                            ; ===========================================================================
0001040C 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
0001040E 0000                       		dc.w Obj55_Action-Obj55_Index
00010410                            ; ===========================================================================
00010410                            
00010410                            Obj55_Main:				; XREF: Obj55_Index
00010410 5428 0024                  		addq.b	#2,$24(a0)
00010414 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
0001041C 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010422 117C 0004 0001             		move.b	#4,1(a0)
00010428 117C 000C 0016             		move.b	#$C,$16(a0)
0001042E 117C 0002 0018             		move.b	#2,$18(a0)
00010434 117C 000B 0020             		move.b	#$B,$20(a0)
0001043A 117C 0010 0019             		move.b	#$10,$19(a0)
00010440                            
00010440                            Obj55_Action:				; XREF: Obj55_Index
00010440 7000                       		moveq	#0,d0
00010442 1028 0025                  		move.b	$25(a0),d0
00010446 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
0001044A 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
0001044E 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010454 6100 A5BA                  		bsr.w	AnimateSprite
00010458 6000 F5AC                  		bra.w	MarkObjGone
0001045C                            ; ===========================================================================
0001045C 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
0001045E 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010460 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010462 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010464                            ; ===========================================================================
00010464                            
00010464                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010464 343C 0080                  		move.w	#$80,d2
00010468 6100 0000                  		bsr.w	Obj55_ChkSonic
0001046C 6400                       		bcc.s	Obj55_NoDrop
0001046E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010472 3140 0036                  		move.w	d0,$36(a0)
00010476 9068 000C                  		sub.w	$C(a0),d0
0001047A 6500                       		bcs.s	Obj55_NoDrop
0001047C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010480 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010482 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010486 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010488 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001048C D007                       		add.b	d7,d0
0001048E 0200 0007                  		andi.b	#7,d0
00010492 6600                       		bne.s	Obj55_NoDrop
00010494 117C 0001 001C             		move.b	#1,$1C(a0)
0001049A 5428 0025                  		addq.b	#2,$25(a0)
0001049E                            
0001049E                            Obj55_NoDrop:
0001049E 4E75                       		rts	
000104A0                            ; ===========================================================================
000104A0                            
000104A0                            Obj55_DropFly:				; XREF: Obj55_Index2
000104A0 6100 D496                  		bsr.w	SpeedToPos
000104A4 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000104AA 343C 0080                  		move.w	#$80,d2
000104AE 6100 0000                  		bsr.w	Obj55_ChkSonic
000104B2 3028 0036                  		move.w	$36(a0),d0
000104B6 9068 000C                  		sub.w	$C(a0),d0
000104BA 6500                       		bcs.s	Obj55_ChkDel
000104BC 0C40 0010                  		cmpi.w	#$10,d0
000104C0 6400                       		bcc.s	locret_10180
000104C2 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000104C6 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000104CC 117C 0002 001C             		move.b	#2,$1C(a0)
000104D2 5428 0025                  		addq.b	#2,$25(a0)
000104D6                            
000104D6                            locret_10180:
000104D6 4E75                       		rts	
000104D8                            ; ===========================================================================
000104D8                            
000104D8                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000104D8 4A28 0001                  		tst.b	1(a0)
000104DC 6A00 D4BC                  		bpl.w	DeleteObject
000104E0 4E75                       		rts	
000104E2                            ; ===========================================================================
000104E2                            
000104E2                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000104E2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000104E6 0200 000F                  		andi.b	#$F,d0
000104EA 6600                       		bne.s	loc_101A0
000104EC 303C 00C0                  		move.w	#$C0,d0
000104F0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flapping sound
000104F6                            
000104F6                            loc_101A0:
000104F6 6100 D440                  		bsr.w	SpeedToPos
000104FA 3038 D008                  		move.w	($FFFFD008).w,d0
000104FE 9068 0008                  		sub.w	8(a0),d0
00010502 6400                       		bcc.s	loc_101B0
00010504 4440                       		neg.w	d0
00010506                            
00010506                            loc_101B0:
00010506 0C40 0080                  		cmpi.w	#$80,d0
0001050A 6500                       		bcs.s	locret_101C6
0001050C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010510 D007                       		add.b	d7,d0
00010512 0200 0007                  		andi.b	#7,d0
00010516 6600                       		bne.s	locret_101C6
00010518 5428 0025                  		addq.b	#2,$25(a0)
0001051C                            
0001051C                            locret_101C6:
0001051C 4E75                       		rts	
0001051E                            ; ===========================================================================
0001051E                            
0001051E                            Obj55_FlyUp:				; XREF: Obj55_Index2
0001051E 6100 D418                  		bsr.w	SpeedToPos
00010522 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010528 6100 0000                  		bsr.w	ObjHitCeiling
0001052C 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0001052E 6A00                       		bpl.s	locret_101F4	; if not, branch
00010530 9368 000C                  		sub.w	d1,$C(a0)
00010534 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
0001053A 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
0001053E 4268 0012                  		clr.w	$12(a0)
00010542 4228 001C                  		clr.b	$1C(a0)
00010546 4228 0025                  		clr.b	$25(a0)
0001054A                            
0001054A                            locret_101F4:
0001054A 4E75                       		rts	
0001054C                            ; ===========================================================================
0001054C                            
0001054C                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
0001054C 323C 0100                  		move.w	#$100,d1
00010550 08E8 0000 0022             		bset	#0,$22(a0)
00010556 3038 D008                  		move.w	($FFFFD008).w,d0
0001055A 9068 0008                  		sub.w	8(a0),d0
0001055E 6400                       		bcc.s	loc_10214
00010560 4440                       		neg.w	d0
00010562 4441                       		neg.w	d1
00010564 08A8 0000 0022             		bclr	#0,$22(a0)
0001056A                            
0001056A                            loc_10214:
0001056A B042                       		cmp.w	d2,d0
0001056C 4E75                       		rts	
0001056E                            ; ===========================================================================
0001056E 6100 D3C8                  		bsr.w	SpeedToPos
00010572 6100 D3EA                  		bsr.w	DisplaySprite
00010576 4A28 0001                  		tst.b	1(a0)
0001057A 6A00 D41E                  		bpl.w	DeleteObject
0001057E 4E75                       		rts	
00010580                            ; ===========================================================================
00010580                            Ani_obj55:
00010580                            	include "_anim\obj55.asm"
00010580                            ; ---------------------------------------------------------------------------
00010580                            ; Animation script - Basaran enemy
00010580                            ; ---------------------------------------------------------------------------
00010580 0000                       		dc.w byte_10230-Ani_obj55
00010582 0000                       		dc.w byte_10234-Ani_obj55
00010584 0000                       		dc.w byte_10238-Ani_obj55
00010586 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
0001058A 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
0001058E 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010594                            		even
00010594                            		even
00010594                            
00010594                            ; ---------------------------------------------------------------------------
00010594                            ; Sprite mappings - Basaran enemy (MZ)
00010594                            ; ---------------------------------------------------------------------------
00010594                            Map_obj55:
00010594                            	include "_maps\obj55.asm"
00010594                            ; ---------------------------------------------------------------------------
00010594                            ; Sprite mappings - Basaran enemy (MZ)
00010594                            ; ---------------------------------------------------------------------------
00010594 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010598 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
0001059C 01                         byte_10246:	dc.b 1
0001059D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000105A2 03                         byte_1024C:	dc.b 3
000105A3 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000105A8 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000105AD 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000105B2 04                         byte_1025C:	dc.b 4
000105B3 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000105B8 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000105BD 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000105C2 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000105C7 04                         byte_10271:	dc.b 4
000105C8 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000105CD 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000105D2 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000105D7 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000105DC                            		even
000105DC                            		even
000105DC                            
000105DC                            ; ===========================================================================
000105DC                            ; ---------------------------------------------------------------------------
000105DC                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000105DC                            ; ---------------------------------------------------------------------------
000105DC                            
000105DC                            Obj56:					; XREF: Obj_Index
000105DC 7000                       		moveq	#0,d0
000105DE 1028 0024                  		move.b	$24(a0),d0
000105E2 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000105E6 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
000105EA                            ; ===========================================================================
000105EA 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
000105EC 0000                       		dc.w Obj56_Action-Obj56_Index
000105EE                            
000105EE 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
000105F0 2020                       		dc.b  $20, $20
000105F2 1020                       		dc.b  $10, $20
000105F4 201A                       		dc.b  $20, $1A
000105F6 1027                       		dc.b  $10, $27
000105F8 1010                       		dc.b  $10, $10
000105FA 0820                       		dc.b	8, $20
000105FC 4010                       		dc.b  $40, $10
000105FE                            ; ===========================================================================
000105FE                            
000105FE                            Obj56_Main:				; XREF: Obj56_Index
000105FE 5428 0024                  		addq.b	#2,$24(a0)
00010602 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
0001060A 317C 4000 0002             		move.w	#$4000,2(a0)
00010610 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010616 6600                       		bne.s	loc_102C8
00010618 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
0001061E                            
0001061E                            loc_102C8:
0001061E 117C 0004 0001             		move.b	#4,1(a0)
00010624 117C 0003 0018             		move.b	#3,$18(a0)
0001062A 7000                       		moveq	#0,d0
0001062C 1028 0028                  		move.b	$28(a0),d0
00010630 E648                       		lsr.w	#3,d0
00010632 0240 000E                  		andi.w	#$E,d0
00010636 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
0001063A 115A 0019                  		move.b	(a2)+,$19(a0)
0001063E 1152 0016                  		move.b	(a2),$16(a0)
00010642 E248                       		lsr.w	#1,d0
00010644 1140 001A                  		move.b	d0,$1A(a0)
00010648 3168 0008 0034             		move.w	8(a0),$34(a0)
0001064E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010654 7000                       		moveq	#0,d0
00010656 1012                       		move.b	(a2),d0
00010658 D040                       		add.w	d0,d0
0001065A 3140 003A                  		move.w	d0,$3A(a0)
0001065E 7000                       		moveq	#0,d0
00010660 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010666 6700                       		beq.s	loc_10332
00010668 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
0001066C 0240 000F                  		andi.w	#$F,d0
00010670 5140                       		subq.w	#8,d0
00010672 6500                       		bcs.s	loc_10332
00010674 E548                       		lsl.w	#2,d0
00010676 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
0001067A 45F2 0000                  		lea	(a2,d0.w),a2
0001067E 4A52                       		tst.w	(a2)
00010680 6A00                       		bpl.s	loc_10332
00010682 0868 0000 0022             		bchg	#0,$22(a0)
00010688                            
00010688                            loc_10332:
00010688 1028 0028                  		move.b	$28(a0),d0
0001068C 6A00                       		bpl.s	Obj56_Action
0001068E 0200 000F                  		andi.b	#$F,d0
00010692 1140 003C                  		move.b	d0,$3C(a0)
00010696 117C 0005 0028             		move.b	#5,$28(a0)
0001069C 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
000106A2 6600                       		bne.s	Obj56_ChkGone
000106A4 117C 000C 0028             		move.b	#$C,$28(a0)
000106AA 317C 0080 003A             		move.w	#$80,$3A(a0)
000106B0                            
000106B0                            Obj56_ChkGone:
000106B0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000106B4 7000                       		moveq	#0,d0
000106B6 1028 0023                  		move.b	$23(a0),d0
000106BA 6700                       		beq.s	Obj56_Action
000106BC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000106C2 0832 0000 0002             		btst	#0,2(a2,d0.w)
000106C8 6700                       		beq.s	Obj56_Action
000106CA 5228 0028                  		addq.b	#1,$28(a0)
000106CE 4268 003A                  		clr.w	$3A(a0)
000106D2                            
000106D2                            Obj56_Action:				; XREF: Obj56_Index
000106D2 3F28 0008                  		move.w	8(a0),-(sp)
000106D6 7000                       		moveq	#0,d0
000106D8 1028 0028                  		move.b	$28(a0),d0	; get object type
000106DC 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000106E0 D040                       		add.w	d0,d0
000106E2 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
000106E6 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
000106EA 381F                       		move.w	(sp)+,d4
000106EC 4A28 0001                  		tst.b	1(a0)
000106F0 6A00                       		bpl.s	Obj56_ChkDel
000106F2 7200                       		moveq	#0,d1
000106F4 1228 0019                  		move.b	$19(a0),d1
000106F8 0641 000B                  		addi.w	#$B,d1
000106FC 7400                       		moveq	#0,d2
000106FE 1428 0016                  		move.b	$16(a0),d2
00010702 3602                       		move.w	d2,d3
00010704 5243                       		addq.w	#1,d3
00010706 6100 F626                  		bsr.w	SolidObject
0001070A                            
0001070A                            Obj56_ChkDel:
0001070A 3028 0034                  		move.w	$34(a0),d0
0001070E 0240 FF80                  		andi.w	#$FF80,d0
00010712 3238 F700                  		move.w	($FFFFF700).w,d1
00010716 0441 0080                  		subi.w	#$80,d1
0001071A 0241 FF80                  		andi.w	#$FF80,d1
0001071E 9041                       		sub.w	d1,d0
00010720 0C40 0280                  		cmpi.w	#$280,d0
00010724 6200 D274                  		bhi.w	DeleteObject
00010728 6000 D234                  		bra.w	DisplaySprite
0001072C                            ; ===========================================================================
0001072C 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010730 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010734 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010738 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
0001073C 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010740 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010744 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010748                            ; ===========================================================================
00010748                            
00010748                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010748 4E75                       		rts	
0001074A                            ; ===========================================================================
0001074A                            
0001074A                            Obj56_Type01:				; XREF: Obj56_TypeIndex
0001074A 323C 0040                  		move.w	#$40,d1
0001074E 7000                       		moveq	#0,d0
00010750 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010754 6000                       		bra.s	Obj56_Move_LR
00010756                            ; ===========================================================================
00010756                            
00010756                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010756 323C 0080                  		move.w	#$80,d1
0001075A 7000                       		moveq	#0,d0
0001075C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010760                            
00010760                            Obj56_Move_LR:
00010760 0828 0000 0022             		btst	#0,$22(a0)
00010766 6700                       		beq.s	loc_10416
00010768 4440                       		neg.w	d0
0001076A D041                       		add.w	d1,d0
0001076C                            
0001076C                            loc_10416:
0001076C 3228 0034                  		move.w	$34(a0),d1
00010770 9240                       		sub.w	d0,d1
00010772 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010776 4E75                       		rts	
00010778                            ; ===========================================================================
00010778                            
00010778                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010778 323C 0040                  		move.w	#$40,d1
0001077C 7000                       		moveq	#0,d0
0001077E 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010782 6000                       		bra.s	Obj56_Move_UD
00010784                            ; ===========================================================================
00010784                            
00010784                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010784 323C 0080                  		move.w	#$80,d1
00010788 7000                       		moveq	#0,d0
0001078A 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001078E                            
0001078E                            Obj56_Move_UD:
0001078E 0828 0000 0022             		btst	#0,$22(a0)
00010794 6700                       		beq.s	loc_10444
00010796 4440                       		neg.w	d0
00010798 D041                       		add.w	d1,d0
0001079A                            
0001079A                            loc_10444:
0001079A 3228 0030                  		move.w	$30(a0),d1
0001079E 9240                       		sub.w	d0,d1
000107A0 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000107A4 4E75                       		rts	
000107A6                            ; ===========================================================================
000107A6                            
000107A6                            Obj56_Type05:				; XREF: Obj56_TypeIndex
000107A6 4A28 0038                  		tst.b	$38(a0)
000107AA 6600                       		bne.s	loc_104A4
000107AC 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000107B2 6600                       		bne.s	loc_1047A	; if not, branch
000107B4 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000107BA 6600                       		bne.s	loc_1047A
000107BC 4238 F7C9                  		clr.b	($FFFFF7C9).w
000107C0 3038 D008                  		move.w	($FFFFD008).w,d0
000107C4 B068 0008                  		cmp.w	8(a0),d0
000107C8 6400                       		bcc.s	loc_1047A
000107CA 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000107D0                            
000107D0                            loc_1047A:
000107D0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000107D4 7000                       		moveq	#0,d0
000107D6 1028 003C                  		move.b	$3C(a0),d0
000107DA 0832 0000 0000             		btst	#0,(a2,d0.w)
000107E0 6700                       		beq.s	loc_104AE
000107E2 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000107E8 6600                       		bne.s	loc_1049E	; if not, branch
000107EA 0C00 0003                  		cmpi.b	#3,d0
000107EE 6600                       		bne.s	loc_1049E
000107F0 4238 F7C9                  		clr.b	($FFFFF7C9).w
000107F4                            
000107F4                            loc_1049E:
000107F4 117C 0001 0038             		move.b	#1,$38(a0)
000107FA                            
000107FA                            loc_104A4:
000107FA 4A68 003A                  		tst.w	$3A(a0)
000107FE 6700                       		beq.s	loc_104C8
00010800 5568 003A                  		subq.w	#2,$3A(a0)
00010804                            
00010804                            loc_104AE:
00010804 3028 003A                  		move.w	$3A(a0),d0
00010808 0828 0000 0022             		btst	#0,$22(a0)
0001080E 6700                       		beq.s	loc_104BC
00010810 4440                       		neg.w	d0
00010812                            
00010812                            loc_104BC:
00010812 3228 0030                  		move.w	$30(a0),d1
00010816 D240                       		add.w	d0,d1
00010818 3141 000C                  		move.w	d1,$C(a0)
0001081C 4E75                       		rts	
0001081E                            ; ===========================================================================
0001081E                            
0001081E                            loc_104C8:
0001081E 5228 0028                  		addq.b	#1,$28(a0)
00010822 4228 0038                  		clr.b	$38(a0)
00010826 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001082A 7000                       		moveq	#0,d0
0001082C 1028 0023                  		move.b	$23(a0),d0
00010830 67D2                       		beq.s	loc_104AE
00010832 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010838 60CA                       		bra.s	loc_104AE
0001083A                            ; ===========================================================================
0001083A                            
0001083A                            Obj56_Type06:				; XREF: Obj56_TypeIndex
0001083A 4A28 0038                  		tst.b	$38(a0)
0001083E 6600                       		bne.s	loc_10500
00010840 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010844 7000                       		moveq	#0,d0
00010846 1028 003C                  		move.b	$3C(a0),d0
0001084A 4A32 0000                  		tst.b	(a2,d0.w)
0001084E 6A00                       		bpl.s	loc_10512
00010850 117C 0001 0038             		move.b	#1,$38(a0)
00010856                            
00010856                            loc_10500:
00010856 7000                       		moveq	#0,d0
00010858 1028 0016                  		move.b	$16(a0),d0
0001085C D040                       		add.w	d0,d0
0001085E B068 003A                  		cmp.w	$3A(a0),d0
00010862 6700                       		beq.s	loc_1052C
00010864 5468 003A                  		addq.w	#2,$3A(a0)
00010868                            
00010868                            loc_10512:
00010868 3028 003A                  		move.w	$3A(a0),d0
0001086C 0828 0000 0022             		btst	#0,$22(a0)
00010872 6700                       		beq.s	loc_10520
00010874 4440                       		neg.w	d0
00010876                            
00010876                            loc_10520:
00010876 3228 0030                  		move.w	$30(a0),d1
0001087A D240                       		add.w	d0,d1
0001087C 3141 000C                  		move.w	d1,$C(a0)
00010880 4E75                       		rts	
00010882                            ; ===========================================================================
00010882                            
00010882                            loc_1052C:
00010882 5328 0028                  		subq.b	#1,$28(a0)
00010886 4228 0038                  		clr.b	$38(a0)
0001088A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001088E 7000                       		moveq	#0,d0
00010890 1028 0023                  		move.b	$23(a0),d0
00010894 67D2                       		beq.s	loc_10512
00010896 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001089C 60CA                       		bra.s	loc_10512
0001089E                            ; ===========================================================================
0001089E                            
0001089E                            Obj56_Type07:				; XREF: Obj56_TypeIndex
0001089E 4A28 0038                  		tst.b	$38(a0)
000108A2 6600                       		bne.s	loc_1055E
000108A4 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
000108A8 6700                       		beq.s	locret_10578
000108AA 117C 0001 0038             		move.b	#1,$38(a0)
000108B0 4268 003A                  		clr.w	$3A(a0)
000108B4                            
000108B4                            loc_1055E:
000108B4 5268 0008                  		addq.w	#1,8(a0)
000108B8 3168 0008 0034             		move.w	8(a0),$34(a0)
000108BE 5268 003A                  		addq.w	#1,$3A(a0)
000108C2 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000108C8 6600                       		bne.s	locret_10578
000108CA 4228 0028                  		clr.b	$28(a0)
000108CE                            
000108CE                            locret_10578:
000108CE 4E75                       		rts	
000108D0                            ; ===========================================================================
000108D0                            
000108D0                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000108D0 4A28 0038                  		tst.b	$38(a0)
000108D4 6600                       		bne.s	loc_10598
000108D6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000108DA 7000                       		moveq	#0,d0
000108DC 1028 003C                  		move.b	$3C(a0),d0
000108E0 0832 0000 0000             		btst	#0,(a2,d0.w)
000108E6 6700                       		beq.s	loc_105A2
000108E8 117C 0001 0038             		move.b	#1,$38(a0)
000108EE                            
000108EE                            loc_10598:
000108EE 4A68 003A                  		tst.w	$3A(a0)
000108F2 6700                       		beq.s	loc_105C0
000108F4 5568 003A                  		subq.w	#2,$3A(a0)
000108F8                            
000108F8                            loc_105A2:
000108F8 3028 003A                  		move.w	$3A(a0),d0
000108FC 0828 0000 0022             		btst	#0,$22(a0)
00010902 6700                       		beq.s	loc_105B4
00010904 4440                       		neg.w	d0
00010906 0640 0080                  		addi.w	#$80,d0
0001090A                            
0001090A                            loc_105B4:
0001090A 3228 0034                  		move.w	$34(a0),d1
0001090E D240                       		add.w	d0,d1
00010910 3141 0008                  		move.w	d1,8(a0)
00010914 4E75                       		rts	
00010916                            ; ===========================================================================
00010916                            
00010916                            loc_105C0:
00010916 5228 0028                  		addq.b	#1,$28(a0)
0001091A 4228 0038                  		clr.b	$38(a0)
0001091E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010922 7000                       		moveq	#0,d0
00010924 1028 0023                  		move.b	$23(a0),d0
00010928 67CE                       		beq.s	loc_105A2
0001092A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010930 60C6                       		bra.s	loc_105A2
00010932                            ; ===========================================================================
00010932                            
00010932                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010932 4A28 0038                  		tst.b	$38(a0)
00010936 6600                       		bne.s	loc_105F8
00010938 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001093C 7000                       		moveq	#0,d0
0001093E 1028 003C                  		move.b	$3C(a0),d0
00010942 4A32 0000                  		tst.b	(a2,d0.w)
00010946 6A00                       		bpl.s	loc_10606
00010948 117C 0001 0038             		move.b	#1,$38(a0)
0001094E                            
0001094E                            loc_105F8:
0001094E 303C 0080                  		move.w	#$80,d0
00010952 B068 003A                  		cmp.w	$3A(a0),d0
00010956 6700                       		beq.s	loc_10624
00010958 5468 003A                  		addq.w	#2,$3A(a0)
0001095C                            
0001095C                            loc_10606:
0001095C 3028 003A                  		move.w	$3A(a0),d0
00010960 0828 0000 0022             		btst	#0,$22(a0)
00010966 6700                       		beq.s	loc_10618
00010968 4440                       		neg.w	d0
0001096A 0640 0080                  		addi.w	#$80,d0
0001096E                            
0001096E                            loc_10618:
0001096E 3228 0034                  		move.w	$34(a0),d1
00010972 D240                       		add.w	d0,d1
00010974 3141 0008                  		move.w	d1,8(a0)
00010978 4E75                       		rts	
0001097A                            ; ===========================================================================
0001097A                            
0001097A                            loc_10624:
0001097A 5328 0028                  		subq.b	#1,$28(a0)
0001097E 4228 0038                  		clr.b	$38(a0)
00010982 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010986 7000                       		moveq	#0,d0
00010988 1028 0023                  		move.b	$23(a0),d0
0001098C 67CE                       		beq.s	loc_10606
0001098E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010994 60C6                       		bra.s	loc_10606
00010996                            ; ===========================================================================
00010996                            
00010996                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010996 323C 0010                  		move.w	#$10,d1
0001099A 7000                       		moveq	#0,d0
0001099C 1038 FE88                  		move.b	($FFFFFE88).w,d0
000109A0 E248                       		lsr.w	#1,d0
000109A2 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
000109A6 6000                       		bra.s	Obj56_Move_Sqr
000109A8                            ; ===========================================================================
000109A8                            
000109A8                            Obj56_Type09:				; XREF: Obj56_TypeIndex
000109A8 323C 0030                  		move.w	#$30,d1
000109AC 7000                       		moveq	#0,d0
000109AE 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
000109B2 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
000109B6 6000                       		bra.s	Obj56_Move_Sqr
000109B8                            ; ===========================================================================
000109B8                            
000109B8                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
000109B8 323C 0050                  		move.w	#$50,d1
000109BC 7000                       		moveq	#0,d0
000109BE 1038 FE90                  		move.b	($FFFFFE90).w,d0
000109C2 3638 FE92                  		move.w	($FFFFFE92).w,d3
000109C6 6000                       		bra.s	Obj56_Move_Sqr
000109C8                            ; ===========================================================================
000109C8                            
000109C8                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000109C8 323C 0070                  		move.w	#$70,d1
000109CC 7000                       		moveq	#0,d0
000109CE 1038 FE94                  		move.b	($FFFFFE94).w,d0
000109D2 3638 FE96                  		move.w	($FFFFFE96).w,d3
000109D6                            
000109D6                            Obj56_Move_Sqr:
000109D6 4A43                       		tst.w	d3
000109D8 6600                       		bne.s	loc_1068E
000109DA 5228 0022                  		addq.b	#1,$22(a0)
000109DE 0228 0003 0022             		andi.b	#3,$22(a0)
000109E4                            
000109E4                            loc_1068E:
000109E4 1428 0022                  		move.b	$22(a0),d2
000109E8 0202 0003                  		andi.b	#3,d2
000109EC 6600                       		bne.s	loc_106AE
000109EE 9041                       		sub.w	d1,d0
000109F0 D068 0034                  		add.w	$34(a0),d0
000109F4 3140 0008                  		move.w	d0,8(a0)
000109F8 4441                       		neg.w	d1
000109FA D268 0030                  		add.w	$30(a0),d1
000109FE 3141 000C                  		move.w	d1,$C(a0)
00010A02 4E75                       		rts	
00010A04                            ; ===========================================================================
00010A04                            
00010A04                            loc_106AE:
00010A04 5302                       		subq.b	#1,d2
00010A06 6600                       		bne.s	loc_106CC
00010A08 5341                       		subq.w	#1,d1
00010A0A 9041                       		sub.w	d1,d0
00010A0C 4440                       		neg.w	d0
00010A0E D068 0030                  		add.w	$30(a0),d0
00010A12 3140 000C                  		move.w	d0,$C(a0)
00010A16 5241                       		addq.w	#1,d1
00010A18 D268 0034                  		add.w	$34(a0),d1
00010A1C 3141 0008                  		move.w	d1,8(a0)
00010A20 4E75                       		rts	
00010A22                            ; ===========================================================================
00010A22                            
00010A22                            loc_106CC:
00010A22 5302                       		subq.b	#1,d2
00010A24 6600                       		bne.s	loc_106EA
00010A26 5341                       		subq.w	#1,d1
00010A28 9041                       		sub.w	d1,d0
00010A2A 4440                       		neg.w	d0
00010A2C D068 0034                  		add.w	$34(a0),d0
00010A30 3140 0008                  		move.w	d0,8(a0)
00010A34 5241                       		addq.w	#1,d1
00010A36 D268 0030                  		add.w	$30(a0),d1
00010A3A 3141 000C                  		move.w	d1,$C(a0)
00010A3E 4E75                       		rts	
00010A40                            ; ===========================================================================
00010A40                            
00010A40                            loc_106EA:
00010A40 9041                       		sub.w	d1,d0
00010A42 D068 0030                  		add.w	$30(a0),d0
00010A46 3140 000C                  		move.w	d0,$C(a0)
00010A4A 4441                       		neg.w	d1
00010A4C D268 0034                  		add.w	$34(a0),d1
00010A50 3141 0008                  		move.w	d1,8(a0)
00010A54 4E75                       		rts	
00010A56                            ; ===========================================================================
00010A56                            ; ---------------------------------------------------------------------------
00010A56                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010A56                            ; ---------------------------------------------------------------------------
00010A56                            Map_obj56:
00010A56                            	include "_maps\obj56.asm"
00010A56                            ; ---------------------------------------------------------------------------
00010A56                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010A56                            ; ---------------------------------------------------------------------------
00010A56 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010A5A 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010A5E 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010A62 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010A66 01                         byte_10710:	dc.b 1
00010A67 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010A6C 04                         byte_10716:	dc.b 4
00010A6D E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010A72 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010A77 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010A7C 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010A81 02                         byte_1072B:	dc.b 2
00010A82 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010A87 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010A8C 04                         byte_10736:	dc.b 4
00010A8D E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010A92 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010A97 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010A9C 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010AA1 03                         byte_1074B:	dc.b 3
00010AA2 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010AA7 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010AAC 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010AB1 01                         byte_1075B:	dc.b 1
00010AB2 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010AB7 02                         byte_10761:	dc.b 2
00010AB8 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010ABD 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010AC2 04                         byte_1076C:	dc.b 4
00010AC3 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010AC8 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010ACD F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010AD2 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010AD8 00                         		even
00010AD8 00                         		even
00010AD8                            
00010AD8                            ; ===========================================================================
00010AD8                            ; ---------------------------------------------------------------------------
00010AD8                            ; Object 57 - spiked balls (SYZ, LZ)
00010AD8                            ; ---------------------------------------------------------------------------
00010AD8                            
00010AD8                            Obj57:					; XREF: Obj_Index
00010AD8 7000                       		moveq	#0,d0
00010ADA 1028 0024                  		move.b	$24(a0),d0
00010ADE 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010AE2 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010AE6                            ; ===========================================================================
00010AE6 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010AE8 0000                       		dc.w Obj57_Move-Obj57_Index
00010AEA 0000                       		dc.w Obj57_Display-Obj57_Index
00010AEC                            ; ===========================================================================
00010AEC                            
00010AEC                            Obj57_Main:				; XREF: Obj57_Index
00010AEC 5428 0024                  		addq.b	#2,$24(a0)
00010AF0 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010AF8 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010AFE 117C 0004 0001             		move.b	#4,1(a0)
00010B04 117C 0004 0018             		move.b	#4,$18(a0)
00010B0A 117C 0008 0019             		move.b	#8,$19(a0)
00010B10 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010B16 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010B1C 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010B22 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010B28 6600                       		bne.s	loc_107E8
00010B2A 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010B30 317C 0310 0002             		move.w	#$310,2(a0)
00010B36 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010B3E                            
00010B3E                            loc_107E8:
00010B3E 1228 0028                  		move.b	$28(a0),d1	; get object type
00010B42 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010B46 4881                       		ext.w	d1
00010B48 E741                       		asl.w	#3,d1		; multiply by 8
00010B4A 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010B4E 1028 0022                  		move.b	$22(a0),d0
00010B52 E418                       		ror.b	#2,d0
00010B54 0200 00C0                  		andi.b	#-$40,d0
00010B58 1140 0026                  		move.b	d0,$26(a0)
00010B5C 45E8 0029                  		lea	$29(a0),a2
00010B60 1228 0028                  		move.b	$28(a0),d1	; get object type
00010B64 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010B68 14FC 0000                  		move.b	#0,(a2)+
00010B6C 3601                       		move.w	d1,d3
00010B6E E94B                       		lsl.w	#4,d3
00010B70 1143 003C                  		move.b	d3,$3C(a0)
00010B74 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010B76 6500                       		bcs.s	loc_10894
00010B78 0828 0003 0028             		btst	#3,$28(a0)
00010B7E 6700                       		beq.s	Obj57_MakeChain
00010B80 5341                       		subq.w	#1,d1
00010B82 6500                       		bcs.s	loc_10894
00010B84                            
00010B84                            Obj57_MakeChain:
00010B84 6100 D25E                  		bsr.w	SingleObjLoad
00010B88 6600                       		bne.s	loc_10894
00010B8A 5228 0029                  		addq.b	#1,$29(a0)
00010B8E 3A09                       		move.w	a1,d5
00010B90 0445 D000                  		subi.w	#-$3000,d5
00010B94 EC4D                       		lsr.w	#6,d5
00010B96 0245 007F                  		andi.w	#$7F,d5
00010B9A 14C5                       		move.b	d5,(a2)+
00010B9C 137C 0004 0024             		move.b	#4,$24(a1)
00010BA2 1290                       		move.b	0(a0),0(a1)
00010BA4 2368 0004 0004             		move.l	4(a0),4(a1)
00010BAA 3368 0002 0002             		move.w	2(a0),2(a1)
00010BB0 1368 0001 0001             		move.b	1(a0),1(a1)
00010BB6 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010BBC 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010BC2 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010BC8 0403 0010                  		subi.b	#$10,d3
00010BCC 1343 003C                  		move.b	d3,$3C(a1)
00010BD0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010BD6 6600                       		bne.s	loc_10890
00010BD8 4A03                       		tst.b	d3
00010BDA 6600                       		bne.s	loc_10890
00010BDC 137C 0002 001A             		move.b	#2,$1A(a1)
00010BE2                            
00010BE2                            loc_10890:
00010BE2 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010BE6                            
00010BE6                            loc_10894:
00010BE6 3A08                       		move.w	a0,d5
00010BE8 0445 D000                  		subi.w	#-$3000,d5
00010BEC EC4D                       		lsr.w	#6,d5
00010BEE 0245 007F                  		andi.w	#$7F,d5
00010BF2 14C5                       		move.b	d5,(a2)+
00010BF4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010BFA 6600                       		bne.s	Obj57_Move
00010BFC 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010C02 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010C08                            
00010C08                            Obj57_Move:				; XREF: Obj57_Index
00010C08 6100 0000                  		bsr.w	Obj57_MoveSub
00010C0C 6000 0000                  		bra.w	Obj57_ChkDel
00010C10                            ; ===========================================================================
00010C10                            
00010C10                            Obj57_MoveSub:				; XREF: Obj57_Move
00010C10 3028 003E                  		move.w	$3E(a0),d0
00010C14 D168 0026                  		add.w	d0,$26(a0)
00010C18 1028 0026                  		move.b	$26(a0),d0
00010C1C 4EB9 0000 2BFA             		jsr	(CalcSine).l
00010C22 3428 0038                  		move.w	$38(a0),d2
00010C26 3628 003A                  		move.w	$3A(a0),d3
00010C2A 45E8 0029                  		lea	$29(a0),a2
00010C2E 7C00                       		moveq	#0,d6
00010C30 1C1A                       		move.b	(a2)+,d6
00010C32                            
00010C32                            Obj57_MoveLoop:
00010C32 7800                       		moveq	#0,d4
00010C34 181A                       		move.b	(a2)+,d4
00010C36 ED4C                       		lsl.w	#6,d4
00010C38 0684 00FF D000             		addi.l	#$FFD000,d4
00010C3E 2244                       		movea.l	d4,a1
00010C40 7800                       		moveq	#0,d4
00010C42 1829 003C                  		move.b	$3C(a1),d4
00010C46 2A04                       		move.l	d4,d5
00010C48 C9C0                       		muls.w	d0,d4
00010C4A E084                       		asr.l	#8,d4
00010C4C CBC1                       		muls.w	d1,d5
00010C4E E085                       		asr.l	#8,d5
00010C50 D842                       		add.w	d2,d4
00010C52 DA43                       		add.w	d3,d5
00010C54 3344 000C                  		move.w	d4,$C(a1)
00010C58 3345 0008                  		move.w	d5,8(a1)
00010C5C 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010C60 4E75                       		rts	
00010C62                            ; ===========================================================================
00010C62                            
00010C62                            Obj57_ChkDel:				; XREF: Obj57_Move
00010C62 3028 003A                  		move.w	$3A(a0),d0
00010C66 0240 FF80                  		andi.w	#$FF80,d0
00010C6A 3238 F700                  		move.w	($FFFFF700).w,d1
00010C6E 0441 0080                  		subi.w	#$80,d1
00010C72 0241 FF80                  		andi.w	#$FF80,d1
00010C76 9041                       		sub.w	d1,d0
00010C78 0C40 0280                  		cmpi.w	#$280,d0
00010C7C 6200 0000                  		bhi.w	Obj57_Delete
00010C80 6000 CCDC                  		bra.w	DisplaySprite
00010C84                            ; ===========================================================================
00010C84                            
00010C84                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010C84 7400                       		moveq	#0,d2
00010C86 45E8 0029                  		lea	$29(a0),a2
00010C8A 141A                       		move.b	(a2)+,d2
00010C8C                            
00010C8C                            Obj57_DelLoop:
00010C8C 7000                       		moveq	#0,d0
00010C8E 101A                       		move.b	(a2)+,d0
00010C90 ED48                       		lsl.w	#6,d0
00010C92 0680 00FF D000             		addi.l	#$FFD000,d0
00010C98 2240                       		movea.l	d0,a1
00010C9A 6100 CD00                  		bsr.w	DeleteObject2
00010C9E 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010CA2                            
00010CA2 4E75                       		rts	
00010CA4                            ; ===========================================================================
00010CA4                            
00010CA4                            Obj57_Display:				; XREF: Obj57_Index
00010CA4 6000 CCB8                  		bra.w	DisplaySprite
00010CA8                            ; ===========================================================================
00010CA8                            ; ---------------------------------------------------------------------------
00010CA8                            ; Sprite mappings - chain of spiked balls (SYZ)
00010CA8                            ; ---------------------------------------------------------------------------
00010CA8                            Map_obj57:
00010CA8                            	include "_maps\obj57syz.asm"
00010CA8                            ; ---------------------------------------------------------------------------
00010CA8                            ; Sprite mappings - chain of spiked balls (SYZ)
00010CA8                            ; ---------------------------------------------------------------------------
00010CA8 0000                       		dc.w byte_10958-Map_obj57
00010CAA 01                         byte_10958:	dc.b 1
00010CAB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010CB0                            		even
00010CB0                            		even
00010CB0                            
00010CB0                            ; ---------------------------------------------------------------------------
00010CB0                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010CB0                            ; ---------------------------------------------------------------------------
00010CB0                            Map_obj57a:
00010CB0                            	include "_maps\obj57lz.asm"
00010CB0                            ; ---------------------------------------------------------------------------
00010CB0                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010CB0                            ; ---------------------------------------------------------------------------
00010CB0 0000                       		dc.w byte_10964-Map_obj57a
00010CB2 0000                       		dc.w byte_1096A-Map_obj57a
00010CB4 0000                       		dc.w byte_10970-Map_obj57a
00010CB6 01                         byte_10964:	dc.b 1
00010CB7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010CBC 01                         byte_1096A:	dc.b 1
00010CBD F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010CC2 01                         byte_10970:	dc.b 1
00010CC3 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010CC8                            		even
00010CC8                            		even
00010CC8                            
00010CC8                            ; ===========================================================================
00010CC8                            ; ---------------------------------------------------------------------------
00010CC8                            ; Object 58 - giant spiked balls (SYZ)
00010CC8                            ; ---------------------------------------------------------------------------
00010CC8                            
00010CC8                            Obj58:					; XREF: Obj_Index
00010CC8 7000                       		moveq	#0,d0
00010CCA 1028 0024                  		move.b	$24(a0),d0
00010CCE 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010CD2 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010CD6                            ; ===========================================================================
00010CD6 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010CD8 0000                       		dc.w Obj58_Move-Obj58_Index
00010CDA                            ; ===========================================================================
00010CDA                            
00010CDA                            Obj58_Main:				; XREF: Obj58_Index
00010CDA 5428 0024                  		addq.b	#2,$24(a0)
00010CDE 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010CE6 317C 0396 0002             		move.w	#$396,2(a0)
00010CEC 117C 0004 0001             		move.b	#4,1(a0)
00010CF2 117C 0004 0018             		move.b	#4,$18(a0)
00010CF8 117C 0018 0019             		move.b	#$18,$19(a0)
00010CFE 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010D04 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010D0A 117C 0086 0020             		move.b	#$86,$20(a0)
00010D10 1228 0028                  		move.b	$28(a0),d1	; get object type
00010D14 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010D18 4881                       		ext.w	d1
00010D1A E741                       		asl.w	#3,d1		; multiply by 8
00010D1C 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010D20 1028 0022                  		move.b	$22(a0),d0
00010D24 E418                       		ror.b	#2,d0
00010D26 0200 00C0                  		andi.b	#$C0,d0
00010D2A 1140 0026                  		move.b	d0,$26(a0)
00010D2E 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010D34                            
00010D34                            Obj58_Move:				; XREF: Obj58_Index
00010D34 7000                       		moveq	#0,d0
00010D36 1028 0028                  		move.b	$28(a0),d0	; get object type
00010D3A 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010D3E D040                       		add.w	d0,d0
00010D40 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010D44 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010D48 3028 003A                  		move.w	$3A(a0),d0
00010D4C 0240 FF80                  		andi.w	#$FF80,d0
00010D50 3238 F700                  		move.w	($FFFFF700).w,d1
00010D54 0441 0080                  		subi.w	#$80,d1
00010D58 0241 FF80                  		andi.w	#$FF80,d1
00010D5C 9041                       		sub.w	d1,d0
00010D5E 0C40 0280                  		cmpi.w	#$280,d0
00010D62 6200 CC36                  		bhi.w	DeleteObject
00010D66 6000 CBF6                  		bra.w	DisplaySprite
00010D6A                            ; ===========================================================================
00010D6A 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010D6C 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00010D6E 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00010D70 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00010D72                            ; ===========================================================================
00010D72                            
00010D72                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00010D72 4E75                       		rts	
00010D74                            ; ===========================================================================
00010D74                            
00010D74                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010D74 323C 0060                  		move.w	#$60,d1
00010D78 7000                       		moveq	#0,d0
00010D7A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010D7E 0828 0000 0022             		btst	#0,$22(a0)
00010D84 6700                       		beq.s	loc_10A38
00010D86 4440                       		neg.w	d0
00010D88 D041                       		add.w	d1,d0
00010D8A                            
00010D8A                            loc_10A38:
00010D8A 3228 003A                  		move.w	$3A(a0),d1
00010D8E 9240                       		sub.w	d0,d1
00010D90 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010D94 4E75                       		rts	
00010D96                            ; ===========================================================================
00010D96                            
00010D96                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00010D96 323C 0060                  		move.w	#$60,d1
00010D9A 7000                       		moveq	#0,d0
00010D9C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010DA0 0828 0000 0022             		btst	#0,$22(a0)
00010DA6 6700                       		beq.s	loc_10A5C
00010DA8 4440                       		neg.w	d0
00010DAA 0640 0080                  		addi.w	#$80,d0
00010DAE                            
00010DAE                            loc_10A5C:
00010DAE 3228 0038                  		move.w	$38(a0),d1
00010DB2 9240                       		sub.w	d0,d1
00010DB4 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010DB8 4E75                       		rts	
00010DBA                            ; ===========================================================================
00010DBA                            
00010DBA                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00010DBA 3028 003E                  		move.w	$3E(a0),d0
00010DBE D168 0026                  		add.w	d0,$26(a0)
00010DC2 1028 0026                  		move.b	$26(a0),d0
00010DC6 4EB9 0000 2BFA             		jsr	(CalcSine).l
00010DCC 3428 0038                  		move.w	$38(a0),d2
00010DD0 3628 003A                  		move.w	$3A(a0),d3
00010DD4 7800                       		moveq	#0,d4
00010DD6 1828 003C                  		move.b	$3C(a0),d4
00010DDA 2A04                       		move.l	d4,d5
00010DDC C9C0                       		muls.w	d0,d4
00010DDE E084                       		asr.l	#8,d4
00010DE0 CBC1                       		muls.w	d1,d5
00010DE2 E085                       		asr.l	#8,d5
00010DE4 D842                       		add.w	d2,d4
00010DE6 DA43                       		add.w	d3,d5
00010DE8 3144 000C                  		move.w	d4,$C(a0)
00010DEC 3145 0008                  		move.w	d5,8(a0)
00010DF0 4E75                       		rts	
00010DF2                            ; ===========================================================================
00010DF2                            ; ---------------------------------------------------------------------------
00010DF2                            ; Sprite mappings - SBZ	spiked ball on a chain
00010DF2                            ; ---------------------------------------------------------------------------
00010DF2                            Map_obj15b:
00010DF2                            	include "_maps\obj15sbz.asm"
00010DF2                            ; ---------------------------------------------------------------------------
00010DF2                            ; Sprite mappings - spiked ball on a chain (SBZ)
00010DF2                            ; ---------------------------------------------------------------------------
00010DF2 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00010DF6 0000                       		dc.w byte_10AC6-Map_obj15b
00010DF8 05                         byte_10AA6:	dc.b 5
00010DF9 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00010DFE F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00010E03 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00010E08 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00010E0D 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00010E12 01                         byte_10AC0:	dc.b 1
00010E13 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00010E18 02                         byte_10AC6:	dc.b 2
00010E19 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00010E1E E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00010E24 00                         		even
00010E24 00                         		even
00010E24                            
00010E24                            ; ===========================================================================
00010E24                            ; ---------------------------------------------------------------------------
00010E24                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00010E24                            ; ---------------------------------------------------------------------------
00010E24                            
00010E24                            Obj59:					; XREF: Obj_Index
00010E24 7000                       		moveq	#0,d0
00010E26 1028 0024                  		move.b	$24(a0),d0
00010E2A 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00010E2E 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00010E32 3028 0032                  		move.w	$32(a0),d0
00010E36 0240 FF80                  		andi.w	#$FF80,d0
00010E3A 3238 F700                  		move.w	($FFFFF700).w,d1
00010E3E 0441 0080                  		subi.w	#$80,d1
00010E42 0241 FF80                  		andi.w	#$FF80,d1
00010E46 9041                       		sub.w	d1,d0
00010E48 0C40 0280                  		cmpi.w	#$280,d0
00010E4C 6200 CB4C                  		bhi.w	DeleteObject
00010E50 6000 CB0C                  		bra.w	DisplaySprite
00010E54                            ; ===========================================================================
00010E54 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00010E56 0000                       		dc.w Obj59_Platform-Obj59_Index
00010E58 0000                       		dc.w Obj59_Action-Obj59_Index
00010E5A 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00010E5C                            
00010E5C 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00010E5E                            
00010E5E 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00010E60 2001                       		dc.b $20, 1
00010E62 3401                       		dc.b $34, 1
00010E64 1003                       		dc.b $10, 3
00010E66 2003                       		dc.b $20, 3
00010E68 3403                       		dc.b $34, 3
00010E6A 1401                       		dc.b $14, 1
00010E6C 2401                       		dc.b $24, 1
00010E6E 2C01                       		dc.b $2C, 1
00010E70 1403                       		dc.b $14, 3
00010E72 2403                       		dc.b $24, 3
00010E74 2C03                       		dc.b $2C, 3
00010E76 2005                       		dc.b $20, 5
00010E78 2007                       		dc.b $20, 7
00010E7A 3009                       		dc.b $30, 9
00010E7C                            ; ===========================================================================
00010E7C                            
00010E7C                            Obj59_Main:				; XREF: Obj59_Index
00010E7C 5428 0024                  		addq.b	#2,$24(a0)
00010E80 7000                       		moveq	#0,d0
00010E82 1028 0028                  		move.b	$28(a0),d0
00010E86 6A00                       		bpl.s	Obj59_Main2
00010E88 5828 0024                  		addq.b	#4,$24(a0)
00010E8C 0240 007F                  		andi.w	#$7F,d0
00010E90 C0FC 0006                  		mulu.w	#6,d0
00010E94 3140 003C                  		move.w	d0,$3C(a0)
00010E98 3140 003E                  		move.w	d0,$3E(a0)
00010E9C 588F                       		addq.l	#4,sp
00010E9E 4E75                       		rts	
00010EA0                            ; ===========================================================================
00010EA0                            
00010EA0                            Obj59_Main2:
00010EA0 E648                       		lsr.w	#3,d0
00010EA2 0240 001E                  		andi.w	#$1E,d0
00010EA6 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00010EAA 115A 0019                  		move.b	(a2)+,$19(a0)
00010EAE 115A 001A                  		move.b	(a2)+,$1A(a0)
00010EB2 7000                       		moveq	#0,d0
00010EB4 1028 0028                  		move.b	$28(a0),d0
00010EB8 D040                       		add.w	d0,d0
00010EBA 0240 001E                  		andi.w	#$1E,d0
00010EBE 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00010EC2 101A                       		move.b	(a2)+,d0
00010EC4 E548                       		lsl.w	#2,d0
00010EC6 3140 003C                  		move.w	d0,$3C(a0)
00010ECA 115A 0028                  		move.b	(a2)+,$28(a0)
00010ECE 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00010ED6 317C 4000 0002             		move.w	#$4000,2(a0)
00010EDC 117C 0004 0001             		move.b	#4,1(a0)
00010EE2 117C 0004 0018             		move.b	#4,$18(a0)
00010EE8 3168 0008 0032             		move.w	8(a0),$32(a0)
00010EEE 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010EF4                            
00010EF4                            Obj59_Platform:				; XREF: Obj59_Index
00010EF4 7200                       		moveq	#0,d1
00010EF6 1228 0019                  		move.b	$19(a0),d1
00010EFA 4EB9 0000 7774             		jsr	(PlatformObject).l
00010F00 6000 0000                  		bra.w	Obj59_Types
00010F04                            ; ===========================================================================
00010F04                            
00010F04                            Obj59_Action:				; XREF: Obj59_Index
00010F04 7200                       		moveq	#0,d1
00010F06 1228 0019                  		move.b	$19(a0),d1
00010F0A 4EB9 0000 78E8             		jsr	(ExitPlatform).l
00010F10 3F28 0008                  		move.w	8(a0),-(sp)
00010F14 6100 0000                  		bsr.w	Obj59_Types
00010F18 341F                       		move.w	(sp)+,d2
00010F1A 4A10                       		tst.b	0(a0)
00010F1C 6700                       		beq.s	locret_10BD4
00010F1E 4EF9 0000 7E52             		jmp	(MvSonicOnPtfm2).l
00010F24                            ; ===========================================================================
00010F24                            
00010F24                            locret_10BD4:
00010F24 4E75                       		rts	
00010F26                            ; ===========================================================================
00010F26                            
00010F26                            Obj59_Types:
00010F26 7000                       		moveq	#0,d0
00010F28 1028 0028                  		move.b	$28(a0),d0
00010F2C 0240 000F                  		andi.w	#$F,d0
00010F30 D040                       		add.w	d0,d0
00010F32 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00010F36 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00010F3A                            ; ===========================================================================
00010F3A 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010F3E 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010F42 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010F46 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010F4A 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00010F4E                            ; ===========================================================================
00010F4E                            
00010F4E                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00010F4E 4E75                       		rts	
00010F50                            ; ===========================================================================
00010F50                            
00010F50                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00010F50 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00010F56 6600                       		bne.s	locret_10C0C
00010F58 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010F5C                            
00010F5C                            locret_10C0C:
00010F5C 4E75                       		rts	
00010F5E                            ; ===========================================================================
00010F5E                            
00010F5E                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00010F5E 6100 0000                  		bsr.w	Obj59_Move
00010F62 3028 0034                  		move.w	$34(a0),d0
00010F66 4440                       		neg.w	d0
00010F68 D068 0030                  		add.w	$30(a0),d0
00010F6C 3140 000C                  		move.w	d0,$C(a0)
00010F70 4E75                       		rts	
00010F72                            ; ===========================================================================
00010F72                            
00010F72                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00010F72 6100 0000                  		bsr.w	Obj59_Move
00010F76 3028 0034                  		move.w	$34(a0),d0
00010F7A D068 0030                  		add.w	$30(a0),d0
00010F7E 3140 000C                  		move.w	d0,$C(a0)
00010F82 4E75                       		rts	
00010F84                            ; ===========================================================================
00010F84                            
00010F84                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00010F84 6100 0000                  		bsr.w	Obj59_Move
00010F88 3028 0034                  		move.w	$34(a0),d0
00010F8C E240                       		asr.w	#1,d0
00010F8E 4440                       		neg.w	d0
00010F90 D068 0030                  		add.w	$30(a0),d0
00010F94 3140 000C                  		move.w	d0,$C(a0)
00010F98 3028 0034                  		move.w	$34(a0),d0
00010F9C D068 0032                  		add.w	$32(a0),d0
00010FA0 3140 0008                  		move.w	d0,8(a0)
00010FA4 4E75                       		rts	
00010FA6                            ; ===========================================================================
00010FA6                            
00010FA6                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00010FA6 6100 0000                  		bsr.w	Obj59_Move
00010FAA 3028 0034                  		move.w	$34(a0),d0
00010FAE E240                       		asr.w	#1,d0
00010FB0 D068 0030                  		add.w	$30(a0),d0
00010FB4 3140 000C                  		move.w	d0,$C(a0)
00010FB8 3028 0034                  		move.w	$34(a0),d0
00010FBC 4440                       		neg.w	d0
00010FBE D068 0032                  		add.w	$32(a0),d0
00010FC2 3140 0008                  		move.w	d0,8(a0)
00010FC6 4E75                       		rts	
00010FC8                            ; ===========================================================================
00010FC8                            
00010FC8                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00010FC8 6100 0000                  		bsr.w	Obj59_Move
00010FCC 3028 0034                  		move.w	$34(a0),d0
00010FD0 4440                       		neg.w	d0
00010FD2 D068 0030                  		add.w	$30(a0),d0
00010FD6 3140 000C                  		move.w	d0,$C(a0)
00010FDA 4A28 0028                  		tst.b	$28(a0)
00010FDE 6700 0000                  		beq.w	loc_10C94
00010FE2 4E75                       		rts	
00010FE4                            ; ===========================================================================
00010FE4                            
00010FE4                            loc_10C94:
00010FE4 0828 0003 0022             		btst	#3,$22(a0)
00010FEA 6700                       		beq.s	Obj59_Delete
00010FEC 08E9 0001 0022             		bset	#1,$22(a1)
00010FF2 08A9 0003 0022             		bclr	#3,$22(a1)
00010FF8 137C 0002 0024             		move.b	#2,$24(a1)
00010FFE                            
00010FFE                            Obj59_Delete:
00010FFE 6000 C99A                  		bra.w	DeleteObject
00011002                            
00011002                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011002                            
00011002                            
00011002                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011002 3028 0038                  		move.w	$38(a0),d0
00011006 4A28 003A                  		tst.b	$3A(a0)
0001100A 6600                       		bne.s	loc_10CC8
0001100C 0C40 0800                  		cmpi.w	#$800,d0
00011010 6400                       		bcc.s	loc_10CD0
00011012 0640 0010                  		addi.w	#$10,d0
00011016 6000                       		bra.s	loc_10CD0
00011018                            ; ===========================================================================
00011018                            
00011018                            loc_10CC8:
00011018 4A40                       		tst.w	d0
0001101A 6700                       		beq.s	loc_10CD0
0001101C 0440 0010                  		subi.w	#$10,d0
00011020                            
00011020                            loc_10CD0:
00011020 3140 0038                  		move.w	d0,$38(a0)
00011024 48C0                       		ext.l	d0
00011026 E180                       		asl.l	#8,d0
00011028 D0A8 0034                  		add.l	$34(a0),d0
0001102C 2140 0034                  		move.l	d0,$34(a0)
00011030 4840                       		swap	d0
00011032 3428 003C                  		move.w	$3C(a0),d2
00011036 B042                       		cmp.w	d2,d0
00011038 6300                       		bls.s	loc_10CF0
0001103A 117C 0001 003A             		move.b	#1,$3A(a0)
00011040                            
00011040                            loc_10CF0:
00011040 D442                       		add.w	d2,d2
00011042 B042                       		cmp.w	d2,d0
00011044 6600                       		bne.s	locret_10CFA
00011046 4228 0028                  		clr.b	$28(a0)
0001104A                            
0001104A                            locret_10CFA:
0001104A 4E75                       		rts	
0001104C                            ; End of function Obj59_Move
0001104C                            
0001104C                            ; ===========================================================================
0001104C                            
0001104C                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001104C 5368 003C                  		subq.w	#1,$3C(a0)
00011050 6600                       		bne.s	Obj59_ChkDel
00011052 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011058 6100 CD8A                  		bsr.w	SingleObjLoad
0001105C 6600                       		bne.s	Obj59_ChkDel
0001105E 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011062 3368 0008 0008             		move.w	8(a0),8(a1)
00011068 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001106E 137C 000E 0028             		move.b	#$E,$28(a1)
00011074                            
00011074                            Obj59_ChkDel:
00011074 588F                       		addq.l	#4,sp
00011076 3028 0008                  		move.w	8(a0),d0
0001107A 0240 FF80                  		andi.w	#$FF80,d0
0001107E 3238 F700                  		move.w	($FFFFF700).w,d1
00011082 0441 0080                  		subi.w	#$80,d1
00011086 0241 FF80                  		andi.w	#$FF80,d1
0001108A 9041                       		sub.w	d1,d0
0001108C 0C40 0280                  		cmpi.w	#$280,d0
00011090 6200 C908                  		bhi.w	DeleteObject
00011094 4E75                       		rts	
00011096                            ; ===========================================================================
00011096                            ; ---------------------------------------------------------------------------
00011096                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011096                            ; ---------------------------------------------------------------------------
00011096                            Map_obj59:
00011096                            	include "_maps\obj59.asm"
00011096                            ; ---------------------------------------------------------------------------
00011096                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011096                            ; ---------------------------------------------------------------------------
00011096 0000                       		dc.w byte_10D4A-Map_obj59
00011098 03                         byte_10D4A:	dc.b 3
00011099 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
0001109E F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000110A3 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000110A8                            		even
000110A8                            		even
000110A8                            
000110A8                            ; ===========================================================================
000110A8                            ; ---------------------------------------------------------------------------
000110A8                            ; Object 5A - platforms	moving in circles (SLZ)
000110A8                            ; ---------------------------------------------------------------------------
000110A8                            
000110A8                            Obj5A:					; XREF: Obj_Index
000110A8 7000                       		moveq	#0,d0
000110AA 1028 0024                  		move.b	$24(a0),d0
000110AE 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000110B2 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000110B6 3028 0032                  		move.w	$32(a0),d0
000110BA 0240 FF80                  		andi.w	#$FF80,d0
000110BE 3238 F700                  		move.w	($FFFFF700).w,d1
000110C2 0441 0080                  		subi.w	#$80,d1
000110C6 0241 FF80                  		andi.w	#$FF80,d1
000110CA 9041                       		sub.w	d1,d0
000110CC 0C40 0280                  		cmpi.w	#$280,d0
000110D0 6200 C8C8                  		bhi.w	DeleteObject
000110D4 6000 C888                  		bra.w	DisplaySprite
000110D8                            ; ===========================================================================
000110D8 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000110DA 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000110DC 0000                       		dc.w Obj5A_Action-Obj5A_Index
000110DE                            ; ===========================================================================
000110DE                            
000110DE                            Obj5A_Main:				; XREF: Obj5A_Index
000110DE 5428 0024                  		addq.b	#2,$24(a0)
000110E2 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000110EA 317C 4000 0002             		move.w	#$4000,2(a0)
000110F0 117C 0004 0001             		move.b	#4,1(a0)
000110F6 117C 0004 0018             		move.b	#4,$18(a0)
000110FC 117C 0018 0019             		move.b	#$18,$19(a0)
00011102 3168 0008 0032             		move.w	8(a0),$32(a0)
00011108 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001110E                            
0001110E                            Obj5A_Platform:				; XREF: Obj5A_Index
0001110E 7200                       		moveq	#0,d1
00011110 1228 0019                  		move.b	$19(a0),d1
00011114 4EB9 0000 7774             		jsr	(PlatformObject).l
0001111A 6000 0000                  		bra.w	Obj5A_Types
0001111E                            ; ===========================================================================
0001111E                            
0001111E                            Obj5A_Action:				; XREF: Obj5A_Index
0001111E 7200                       		moveq	#0,d1
00011120 1228 0019                  		move.b	$19(a0),d1
00011124 4EB9 0000 78E8             		jsr	(ExitPlatform).l
0001112A 3F28 0008                  		move.w	8(a0),-(sp)
0001112E 6100 0000                  		bsr.w	Obj5A_Types
00011132 341F                       		move.w	(sp)+,d2
00011134 4EF9 0000 7E52             		jmp	(MvSonicOnPtfm2).l
0001113A                            ; ===========================================================================
0001113A                            
0001113A                            Obj5A_Types:
0001113A 7000                       		moveq	#0,d0
0001113C 1028 0028                  		move.b	$28(a0),d0
00011140 0240 000C                  		andi.w	#$C,d0
00011144 E248                       		lsr.w	#1,d0
00011146 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001114A 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
0001114E                            ; ===========================================================================
0001114E 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011150 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011152                            ; ===========================================================================
00011152                            
00011152                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011152 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011156 0401 0050                  		subi.b	#$50,d1
0001115A 4881                       		ext.w	d1
0001115C 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011160 0402 0050                  		subi.b	#$50,d2
00011164 4882                       		ext.w	d2
00011166 0828 0000 0028             		btst	#0,$28(a0)
0001116C 6700                       		beq.s	loc_10E24
0001116E 4441                       		neg.w	d1
00011170 4442                       		neg.w	d2
00011172                            
00011172                            loc_10E24:
00011172 0828 0001 0028             		btst	#1,$28(a0)
00011178 6700                       		beq.s	loc_10E30
0001117A 4441                       		neg.w	d1
0001117C C342                       		exg	d1,d2
0001117E                            
0001117E                            loc_10E30:
0001117E D268 0032                  		add.w	$32(a0),d1
00011182 3141 0008                  		move.w	d1,8(a0)
00011186 D468 0030                  		add.w	$30(a0),d2
0001118A 3142 000C                  		move.w	d2,$C(a0)
0001118E 4E75                       		rts	
00011190                            ; ===========================================================================
00011190                            
00011190                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011190 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011194 0401 0050                  		subi.b	#$50,d1
00011198 4881                       		ext.w	d1
0001119A 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001119E 0402 0050                  		subi.b	#$50,d2
000111A2 4882                       		ext.w	d2
000111A4 0828 0000 0028             		btst	#0,$28(a0)
000111AA 6700                       		beq.s	loc_10E62
000111AC 4441                       		neg.w	d1
000111AE 4442                       		neg.w	d2
000111B0                            
000111B0                            loc_10E62:
000111B0 0828 0001 0028             		btst	#1,$28(a0)
000111B6 6700                       		beq.s	loc_10E6E
000111B8 4441                       		neg.w	d1
000111BA C342                       		exg	d1,d2
000111BC                            
000111BC                            loc_10E6E:
000111BC 4441                       		neg.w	d1
000111BE D268 0032                  		add.w	$32(a0),d1
000111C2 3141 0008                  		move.w	d1,8(a0)
000111C6 D468 0030                  		add.w	$30(a0),d2
000111CA 3142 000C                  		move.w	d2,$C(a0)
000111CE 4E75                       		rts	
000111D0                            ; ===========================================================================
000111D0                            ; ---------------------------------------------------------------------------
000111D0                            ; Sprite mappings - platforms that move	in circles (SLZ)
000111D0                            ; ---------------------------------------------------------------------------
000111D0                            Map_obj5A:
000111D0                            	include "_maps\obj5A.asm"
000111D0                            ; ---------------------------------------------------------------------------
000111D0                            ; Sprite mappings - platforms that move	in circles (SLZ)
000111D0                            ; ---------------------------------------------------------------------------
000111D0 0000                       		dc.w byte_10E84-Map_obj5A
000111D2 02                         byte_10E84:	dc.b 2
000111D3 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000111D8 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000111DE 00                         		even
000111DE 00                         		even
000111DE                            
000111DE                            ; ===========================================================================
000111DE                            ; ---------------------------------------------------------------------------
000111DE                            ; Object 5B - blocks that form a staircase (SLZ)
000111DE                            ; ---------------------------------------------------------------------------
000111DE                            
000111DE                            Obj5B:					; XREF: Obj_Index
000111DE 7000                       		moveq	#0,d0
000111E0 1028 0024                  		move.b	$24(a0),d0
000111E4 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000111E8 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000111EC 3028 0030                  		move.w	$30(a0),d0
000111F0 0240 FF80                  		andi.w	#$FF80,d0
000111F4 3238 F700                  		move.w	($FFFFF700).w,d1
000111F8 0441 0080                  		subi.w	#$80,d1
000111FC 0241 FF80                  		andi.w	#$FF80,d1
00011200 9041                       		sub.w	d1,d0
00011202 0C40 0280                  		cmpi.w	#$280,d0
00011206 6200 C792                  		bhi.w	DeleteObject
0001120A 6000 C752                  		bra.w	DisplaySprite
0001120E                            ; ===========================================================================
0001120E 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011210 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011212 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011214                            ; ===========================================================================
00011214                            
00011214                            Obj5B_Main:				; XREF: Obj5B_Index
00011214 5428 0024                  		addq.b	#2,$24(a0)
00011218 7638                       		moveq	#$38,d3
0001121A 7801                       		moveq	#1,d4
0001121C 0828 0000 0022             		btst	#0,$22(a0)
00011222 6700                       		beq.s	loc_10EDA
00011224 763B                       		moveq	#$3B,d3
00011226 78FF                       		moveq	#-1,d4
00011228                            
00011228                            loc_10EDA:
00011228 3428 0008                  		move.w	8(a0),d2
0001122C 2248                       		movea.l	a0,a1
0001122E 7203                       		moveq	#3,d1
00011230 6000                       		bra.s	Obj5B_MakeBlocks
00011232                            ; ===========================================================================
00011232                            
00011232                            Obj5B_Loop:
00011232 6100 CBC6                  		bsr.w	SingleObjLoad2
00011236 6600 0000                  		bne.w	Obj5B_Move
0001123A 137C 0004 0024             		move.b	#4,$24(a1)
00011240                            
00011240                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011240 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011244 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001124C 337C 4000 0002             		move.w	#$4000,2(a1)
00011252 137C 0004 0001             		move.b	#4,1(a1)
00011258 137C 0003 0018             		move.b	#3,$18(a1)
0001125E 137C 0010 0019             		move.b	#$10,$19(a1)
00011264 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001126A 3342 0008                  		move.w	d2,8(a1)
0001126E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011274 3368 0008 0030             		move.w	8(a0),$30(a1)
0001127A 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011280 0642 0020                  		addi.w	#$20,d2
00011284 1343 0037                  		move.b	d3,$37(a1)
00011288 2348 003C                  		move.l	a0,$3C(a1)
0001128C D604                       		add.b	d4,d3
0001128E 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011292                            
00011292                            Obj5B_Move:				; XREF: Obj5B_Index
00011292 7000                       		moveq	#0,d0
00011294 1028 0028                  		move.b	$28(a0),d0
00011298 0240 0007                  		andi.w	#7,d0
0001129C D040                       		add.w	d0,d0
0001129E 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000112A2 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000112A6                            
000112A6                            Obj5B_Solid:				; XREF: Obj5B_Index
000112A6 2468 003C                  		movea.l	$3C(a0),a2
000112AA 7000                       		moveq	#0,d0
000112AC 1028 0037                  		move.b	$37(a0),d0
000112B0 1032 0000                  		move.b	(a2,d0.w),d0
000112B4 D068 0032                  		add.w	$32(a0),d0
000112B8 3140 000C                  		move.w	d0,$C(a0)
000112BC 7200                       		moveq	#0,d1
000112BE 1228 0019                  		move.b	$19(a0),d1
000112C2 0641 000B                  		addi.w	#$B,d1
000112C6 343C 0010                  		move.w	#$10,d2
000112CA 363C 0011                  		move.w	#$11,d3
000112CE 3828 0008                  		move.w	8(a0),d4
000112D2 6100 EA5A                  		bsr.w	SolidObject
000112D6 4A04                       		tst.b	d4
000112D8 6A00                       		bpl.s	loc_10F92
000112DA 1544 0036                  		move.b	d4,$36(a2)
000112DE                            
000112DE                            loc_10F92:
000112DE 0828 0003 0022             		btst	#3,$22(a0)
000112E4 6700                       		beq.s	locret_10FA0
000112E6 157C 0001 0036             		move.b	#1,$36(a2)
000112EC                            
000112EC                            locret_10FA0:
000112EC 4E75                       		rts	
000112EE                            ; ===========================================================================
000112EE 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000112F0 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000112F2 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000112F4 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000112F6                            ; ===========================================================================
000112F6                            
000112F6                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000112F6 4A68 0034                  		tst.w	$34(a0)
000112FA 6600                       		bne.s	loc_10FC0
000112FC 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011302 6600                       		bne.s	locret_10FBE
00011304 317C 001E 0034             		move.w	#$1E,$34(a0)
0001130A                            
0001130A                            locret_10FBE:
0001130A 4E75                       		rts	
0001130C                            ; ===========================================================================
0001130C                            
0001130C                            loc_10FC0:
0001130C 5368 0034                  		subq.w	#1,$34(a0)
00011310 66F8                       		bne.s	locret_10FBE
00011312 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011316 4E75                       		rts	
00011318                            ; ===========================================================================
00011318                            
00011318                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011318 4A68 0034                  		tst.w	$34(a0)
0001131C 6600                       		bne.s	loc_10FE0
0001131E 4A28 0036                  		tst.b	$36(a0)
00011322 6A00                       		bpl.s	locret_10FDE
00011324 317C 003C 0034             		move.w	#$3C,$34(a0)
0001132A                            
0001132A                            locret_10FDE:
0001132A 4E75                       		rts	
0001132C                            ; ===========================================================================
0001132C                            
0001132C                            loc_10FE0:
0001132C 5368 0034                  		subq.w	#1,$34(a0)
00011330 6600                       		bne.s	loc_10FEC
00011332 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011336 4E75                       		rts	
00011338                            ; ===========================================================================
00011338                            
00011338                            loc_10FEC:
00011338 43E8 0038                  		lea	$38(a0),a1
0001133C 3028 0034                  		move.w	$34(a0),d0
00011340 E408                       		lsr.b	#2,d0
00011342 0200 0001                  		andi.b	#1,d0
00011346 12C0                       		move.b	d0,(a1)+
00011348 0A00 0001                  		eori.b	#1,d0
0001134C 12C0                       		move.b	d0,(a1)+
0001134E 0A00 0001                  		eori.b	#1,d0
00011352 12C0                       		move.b	d0,(a1)+
00011354 0A00 0001                  		eori.b	#1,d0
00011358 12C0                       		move.b	d0,(a1)+
0001135A 4E75                       		rts	
0001135C                            ; ===========================================================================
0001135C                            
0001135C                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001135C 43E8 0038                  		lea	$38(a0),a1
00011360 0C11 0080                  		cmpi.b	#$80,(a1)
00011364 6700                       		beq.s	locret_11038
00011366 5211                       		addq.b	#1,(a1)
00011368 7200                       		moveq	#0,d1
0001136A 1219                       		move.b	(a1)+,d1
0001136C 4841                       		swap	d1
0001136E E289                       		lsr.l	#1,d1
00011370 2401                       		move.l	d1,d2
00011372 E289                       		lsr.l	#1,d1
00011374 2601                       		move.l	d1,d3
00011376 D682                       		add.l	d2,d3
00011378 4841                       		swap	d1
0001137A 4842                       		swap	d2
0001137C 4843                       		swap	d3
0001137E 12C3                       		move.b	d3,(a1)+
00011380 12C2                       		move.b	d2,(a1)+
00011382 12C1                       		move.b	d1,(a1)+
00011384                            
00011384                            locret_11038:
00011384 4E75                       		rts	
00011386 4E75                       		rts	
00011388                            ; ===========================================================================
00011388                            ; ---------------------------------------------------------------------------
00011388                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011388                            ; ---------------------------------------------------------------------------
00011388                            Map_obj5B:
00011388                            	include "_maps\obj5B.asm"
00011388                            ; ---------------------------------------------------------------------------
00011388                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011388                            ; ---------------------------------------------------------------------------
00011388 0000                       		dc.w byte_1103E-Map_obj5B
0001138A 01                         byte_1103E:	dc.b 1
0001138B F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011390                            		even
00011390                            		even
00011390                            
00011390                            ; ===========================================================================
00011390                            ; ---------------------------------------------------------------------------
00011390                            ; Object 5C - metal girders in foreground (SLZ)
00011390                            ; ---------------------------------------------------------------------------
00011390                            
00011390                            Obj5C:					; XREF: Obj_Index
00011390 7000                       		moveq	#0,d0
00011392 1028 0024                  		move.b	$24(a0),d0
00011396 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0001139A 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
0001139E                            ; ===========================================================================
0001139E 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000113A0 0000                       		dc.w Obj5C_Display-Obj5C_Index
000113A2                            ; ===========================================================================
000113A2                            
000113A2                            Obj5C_Main:				; XREF: Obj5C_Index
000113A2 5428 0024                  		addq.b	#2,$24(a0)
000113A6 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000113AE 317C 83CC 0002             		move.w	#$83CC,2(a0)
000113B4 117C 0010 0019             		move.b	#$10,$19(a0)
000113BA                            
000113BA                            Obj5C_Display:				; XREF: Obj5C_Index
000113BA 2238 F700                  		move.l	($FFFFF700).w,d1
000113BE D281                       		add.l	d1,d1
000113C0 4841                       		swap	d1
000113C2 4441                       		neg.w	d1
000113C4 3141 0008                  		move.w	d1,8(a0)
000113C8 2238 F704                  		move.l	($FFFFF704).w,d1
000113CC D281                       		add.l	d1,d1
000113CE 4841                       		swap	d1
000113D0 0241 003F                  		andi.w	#$3F,d1
000113D4 4441                       		neg.w	d1
000113D6 0641 0100                  		addi.w	#$100,d1
000113DA 3141 000A                  		move.w	d1,$A(a0)
000113DE 6000 C57E                  		bra.w	DisplaySprite
000113E2                            ; ===========================================================================
000113E2                            ; ---------------------------------------------------------------------------
000113E2                            ; Sprite mappings - metal girders in foreground	(SLZ)
000113E2                            ; ---------------------------------------------------------------------------
000113E2                            Map_obj5C:
000113E2                            	include "_maps\obj5C.asm"
000113E2                            ; ---------------------------------------------------------------------------
000113E2                            ; Sprite mappings - metal girders in foreground	(SLZ)
000113E2                            ; ---------------------------------------------------------------------------
000113E2 0000                       		dc.w byte_11098-Map_obj5C
000113E4 09                         byte_11098:	dc.b 9
000113E5 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000113EA A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000113EF C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000113F4 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000113F9 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000113FE 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011403 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011408 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001140D 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011412                            		even
00011412                            		even
00011412                            
00011412                            ; ===========================================================================
00011412                            ; ---------------------------------------------------------------------------
00011412                            ; Object 1B - water surface (LZ)
00011412                            ; ---------------------------------------------------------------------------
00011412                            
00011412                            Obj1B:					; XREF: Obj_Index
00011412 7000                       		moveq	#0,d0
00011414 1028 0024                  		move.b	$24(a0),d0
00011418 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001141C 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011420                            ; ===========================================================================
00011420 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011422 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011424                            ; ===========================================================================
00011424                            
00011424                            Obj1B_Main:				; XREF: Obj1B_Index
00011424 5428 0024                  		addq.b	#2,$24(a0)
00011428 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011430 317C C300 0002             		move.w	#$C300,2(a0)
00011436 117C 0004 0001             		move.b	#4,1(a0)
0001143C 117C 0080 0019             		move.b	#$80,$19(a0)
00011442 3168 0008 0030             		move.w	8(a0),$30(a0)
00011448                            
00011448                            Obj1B_Action:				; XREF: Obj1B_Index
00011448 3238 F700                  		move.w	($FFFFF700).w,d1
0001144C 0241 FFE0                  		andi.w	#$FFE0,d1
00011450 D268 0030                  		add.w	$30(a0),d1
00011454 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001145A 6700                       		beq.s	loc_11114
0001145C 0641 0020                  		addi.w	#$20,d1
00011460                            
00011460                            loc_11114:
00011460 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011464 3238 F646                  		move.w	($FFFFF646).w,d1
00011468 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
0001146C 4A28 0032                  		tst.b	$32(a0)
00011470 6600                       		bne.s	Obj1B_Animate
00011472 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011478 6700                       		beq.s	loc_1114A	; if not, branch
0001147A 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
0001147E 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011484 6000                       		bra.s	Obj1B_Display
00011486                            ; ===========================================================================
00011486                            
00011486                            Obj1B_Animate:				; XREF: loc_11114
00011486 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001148A 6600                       		bne.s	Obj1B_Display	; if yes, branch
0001148C 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011492 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011496                            
00011496                            loc_1114A:				; XREF: loc_11114
00011496 5328 001E                  		subq.b	#1,$1E(a0)
0001149A 6A00                       		bpl.s	Obj1B_Display
0001149C 117C 0007 001E             		move.b	#7,$1E(a0)
000114A2 5228 001A                  		addq.b	#1,$1A(a0)
000114A6 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000114AC 6500                       		bcs.s	Obj1B_Display
000114AE 117C 0000 001A             		move.b	#0,$1A(a0)
000114B4                            
000114B4                            Obj1B_Display:
000114B4 6000 C4A8                  		bra.w	DisplaySprite
000114B8                            ; ===========================================================================
000114B8                            ; ---------------------------------------------------------------------------
000114B8                            ; Sprite mappings - water surface (LZ)
000114B8                            ; ---------------------------------------------------------------------------
000114B8                            Map_obj1B:
000114B8                            	include "_maps\obj1B.asm"
000114B8                            ; ---------------------------------------------------------------------------
000114B8                            ; Sprite mappings - water surface (LZ)
000114B8                            ; ---------------------------------------------------------------------------
000114B8 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000114BC 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000114C0 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000114C4 03                         byte_11178:	dc.b 3
000114C5 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000114CA FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000114CF FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000114D4 03                         byte_11188:	dc.b 3
000114D5 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000114DA FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000114DF FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000114E4 03                         byte_11198:	dc.b 3
000114E5 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000114EA FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000114EF FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000114F4 06                         byte_111A8:	dc.b 6
000114F5 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000114FA FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
000114FF FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011504 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011509 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001150E FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011513 06                         byte_111C7:	dc.b 6
00011514 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011519 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
0001151E FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011523 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011528 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001152D FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011532 06                         byte_111E6:	dc.b 6
00011533 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011538 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0001153D FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011542 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011547 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001154C FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011552 00                         		even
00011552 00                         		even
00011552                            
00011552                            ; ===========================================================================
00011552                            ; ---------------------------------------------------------------------------
00011552                            ; Object 0B - pole that	breaks (LZ)
00011552                            ; ---------------------------------------------------------------------------
00011552                            
00011552                            Obj0B:					; XREF: Obj_Index
00011552 7000                       		moveq	#0,d0
00011554 1028 0024                  		move.b	$24(a0),d0
00011558 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
0001155C 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011560                            ; ===========================================================================
00011560 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011562 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011564 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011566                            ; ===========================================================================
00011566                            
00011566                            Obj0B_Main:				; XREF: Obj0B_Index
00011566 5428 0024                  		addq.b	#2,$24(a0)
0001156A 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011572 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011578 117C 0004 0001             		move.b	#4,1(a0)
0001157E 117C 0008 0019             		move.b	#8,$19(a0)
00011584 117C 0004 0018             		move.b	#4,$18(a0)
0001158A 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011590 7000                       		moveq	#0,d0
00011592 1028 0028                  		move.b	$28(a0),d0	; get object type
00011596 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001159A 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
0001159E                            
0001159E                            Obj0B_Action:				; XREF: Obj0B_Index
0001159E 4A28 0032                  		tst.b	$32(a0)
000115A2 6700                       		beq.s	Obj0B_Grab
000115A4 4A68 0030                  		tst.w	$30(a0)
000115A8 6700                       		beq.s	Obj0B_MoveUp
000115AA 5368 0030                  		subq.w	#1,$30(a0)
000115AE 6600                       		bne.s	Obj0B_MoveUp
000115B0 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000115B6 6000                       		bra.s	Obj0B_Release
000115B8                            ; ===========================================================================
000115B8                            
000115B8                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000115B8 43F8 D000                  		lea	($FFFFD000).w,a1
000115BC 3028 000C                  		move.w	$C(a0),d0
000115C0 0440 0018                  		subi.w	#$18,d0
000115C4 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000115CA 6700                       		beq.s	Obj0B_MoveDown
000115CC 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000115D0 B069 000C                  		cmp.w	$C(a1),d0
000115D4 6500                       		bcs.s	Obj0B_MoveDown
000115D6 3340 000C                  		move.w	d0,$C(a1)
000115DA                            
000115DA                            Obj0B_MoveDown:
000115DA 0640 0024                  		addi.w	#$24,d0
000115DE 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
000115E4 6700                       		beq.s	Obj0B_LetGo
000115E6 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000115EA B069 000C                  		cmp.w	$C(a1),d0
000115EE 6400                       		bcc.s	Obj0B_LetGo
000115F0 3340 000C                  		move.w	d0,$C(a1)
000115F4                            
000115F4                            Obj0B_LetGo:
000115F4 1038 F603                  		move.b	($FFFFF603).w,d0
000115F8 0240 0070                  		andi.w	#$70,d0
000115FC 6700                       		beq.s	Obj0B_Display
000115FE                            
000115FE                            Obj0B_Release:				; XREF: Obj0B_Action
000115FE 4228 0020                  		clr.b	$20(a0)
00011602 5428 0024                  		addq.b	#2,$24(a0)
00011606 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001160A 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001160E 4228 0032                  		clr.b	$32(a0)
00011612 6000                       		bra.s	Obj0B_Display
00011614                            ; ===========================================================================
00011614                            
00011614                            Obj0B_Grab:				; XREF: Obj0B_Action
00011614 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011618 6700                       		beq.s	Obj0B_Display	; if not, branch
0001161A 43F8 D000                  		lea	($FFFFD000).w,a1
0001161E 3028 0008                  		move.w	8(a0),d0
00011622 0640 0014                  		addi.w	#$14,d0
00011626 B069 0008                  		cmp.w	8(a1),d0
0001162A 6400                       		bcc.s	Obj0B_Display
0001162C 4228 0021                  		clr.b	$21(a0)
00011630 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011636 6400                       		bcc.s	Obj0B_Display
00011638 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
0001163C 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011640 3028 0008                  		move.w	8(a0),d0
00011644 0640 0014                  		addi.w	#$14,d0
00011648 3340 0008                  		move.w	d0,8(a1)
0001164C 08A9 0000 0022             		bclr	#0,$22(a1)
00011652 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011658 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001165E 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011664 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
0001166A                            
0001166A                            Obj0B_Display:				; XREF: Obj0B_Index
0001166A 6000 E39A                  		bra.w	MarkObjGone
0001166E                            ; ===========================================================================
0001166E                            ; ---------------------------------------------------------------------------
0001166E                            ; Sprite mappings - pole that breaks (LZ)
0001166E                            ; ---------------------------------------------------------------------------
0001166E                            Map_obj0B:
0001166E                            	include "_maps\obj0B.asm"
0001166E                            ; ---------------------------------------------------------------------------
0001166E                            ; Sprite mappings - pole that breaks (LZ)
0001166E                            ; ---------------------------------------------------------------------------
0001166E 0000                       		dc.w byte_11326-Map_obj0B
00011670 0000                       		dc.w byte_11331-Map_obj0B
00011672 02                         byte_11326:	dc.b 2			; normal pole
00011673 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011678 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001167D 04                         byte_11331:	dc.b 4			; broken pole
0001167E E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011683 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011688 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0001168D 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011692                            		even
00011692                            		even
00011692                            
00011692                            ; ===========================================================================
00011692                            ; ---------------------------------------------------------------------------
00011692                            ; Object 0C - flapping door (LZ)
00011692                            ; ---------------------------------------------------------------------------
00011692                            
00011692                            Obj0C:					; XREF: Obj_Index
00011692 7000                       		moveq	#0,d0
00011694 1028 0024                  		move.b	$24(a0),d0
00011698 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
0001169C 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
000116A0                            ; ===========================================================================
000116A0 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
000116A2 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
000116A4                            ; ===========================================================================
000116A4                            
000116A4                            Obj0C_Main:				; XREF: Obj0C_Index
000116A4 5428 0024                  		addq.b	#2,$24(a0)
000116A8 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
000116B0 317C 4328 0002             		move.w	#$4328,2(a0)
000116B6 0028 0004 0001             		ori.b	#4,1(a0)
000116BC 117C 0028 0019             		move.b	#$28,$19(a0)
000116C2 7000                       		moveq	#0,d0
000116C4 1028 0028                  		move.b	$28(a0),d0	; get object type
000116C8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000116CC 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000116D0                            
000116D0                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000116D0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000116D4 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
000116D6 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000116DC 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
000116E2 4A28 0001                  		tst.b	1(a0)
000116E6 6A00                       		bpl.s	Obj0C_Solid
000116E8 303C 00BB                  		move.w	#$BB,d0
000116EC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
000116F2                            
000116F2                            Obj0C_Solid:
000116F2 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
000116F8 6100 9316                  		bsr.w	AnimateSprite
000116FC 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011700 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011704 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011706 3038 D008                  		move.w	($FFFFD008).w,d0
0001170A B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
0001170E 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011710 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011716 323C 0013                  		move.w	#$13,d1
0001171A 343C 0020                  		move.w	#$20,d2
0001171E 3602                       		move.w	d2,d3
00011720 5243                       		addq.w	#1,d3
00011722 3828 0008                  		move.w	8(a0),d4
00011726 6100 E606                  		bsr.w	SolidObject	; make the door	solid
0001172A                            
0001172A                            Obj0C_Display:
0001172A 6000 E2DA                  		bra.w	MarkObjGone
0001172E                            ; ===========================================================================
0001172E                            Ani_obj0C:
0001172E                            	include "_anim\obj0C.asm"
0001172E                            ; ---------------------------------------------------------------------------
0001172E                            ; Animation script - flapping door (LZ)
0001172E                            ; ---------------------------------------------------------------------------
0001172E 0000                       		dc.w byte_113E6-Ani_obj0C
00011730 0000                       		dc.w byte_113EC-Ani_obj0C
00011732 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011738 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
0001173E                            		even
0001173E                            		even
0001173E                            
0001173E                            ; ---------------------------------------------------------------------------
0001173E                            ; Sprite mappings - flapping door (LZ)
0001173E                            ; ---------------------------------------------------------------------------
0001173E                            Map_obj0C:
0001173E                            	include "_maps\obj0C.asm"
0001173E                            ; ---------------------------------------------------------------------------
0001173E                            ; Sprite mappings - flapping door (LZ)
0001173E                            ; ---------------------------------------------------------------------------
0001173E 0000                       		dc.w byte_113F8-Map_obj0C
00011740 0000                       		dc.w byte_11403-Map_obj0C
00011742 0000                       		dc.w byte_1140E-Map_obj0C
00011744 02                         byte_113F8:	dc.b 2
00011745 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001174A 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001174F 02                         byte_11403:	dc.b 2
00011750 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011755 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001175A 02                         byte_1140E:	dc.b 2
0001175B D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011760 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011766 00                         		even
00011766 00                         		even
00011766                            
00011766                            ; ===========================================================================
00011766                            ; ---------------------------------------------------------------------------
00011766                            ; Object 71 - invisible	solid blocks
00011766                            ; ---------------------------------------------------------------------------
00011766                            
00011766                            Obj71:					; XREF: Obj_Index
00011766 7000                       		moveq	#0,d0
00011768 1028 0024                  		move.b	$24(a0),d0
0001176C 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011770 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011774                            ; ===========================================================================
00011774 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011776 0000                       		dc.w Obj71_Solid-Obj71_Index
00011778                            ; ===========================================================================
00011778                            
00011778                            Obj71_Main:				; XREF: Obj71_Index
00011778 5428 0024                  		addq.b	#2,$24(a0)
0001177C 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011784 317C 8680 0002             		move.w	#$8680,2(a0)
0001178A 0028 0004 0001             		ori.b	#4,1(a0)
00011790 1028 0028                  		move.b	$28(a0),d0	; get object type
00011794 1200                       		move.b	d0,d1
00011796 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0001179A 0640 0010                  		addi.w	#$10,d0
0001179E E248                       		lsr.w	#1,d0
000117A0 1140 0019                  		move.b	d0,$19(a0)	; set object width
000117A4 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000117A8 5241                       		addq.w	#1,d1
000117AA E749                       		lsl.w	#3,d1
000117AC 1141 0016                  		move.b	d1,$16(a0)	; set object height
000117B0                            
000117B0                            Obj71_Solid:				; XREF: Obj71_Index
000117B0 6100 C426                  		bsr.w	ChkObjOnScreen
000117B4 6600                       		bne.s	Obj71_ChkDel
000117B6 7200                       		moveq	#0,d1
000117B8 1228 0019                  		move.b	$19(a0),d1
000117BC 0641 000B                  		addi.w	#$B,d1
000117C0 7400                       		moveq	#0,d2
000117C2 1428 0016                  		move.b	$16(a0),d2
000117C6 3602                       		move.w	d2,d3
000117C8 5243                       		addq.w	#1,d3
000117CA 3828 0008                  		move.w	8(a0),d4
000117CE 6100 E5A4                  		bsr.w	SolidObject71
000117D2                            
000117D2                            Obj71_ChkDel:
000117D2 3028 0008                  		move.w	8(a0),d0
000117D6 0240 FF80                  		andi.w	#$FF80,d0
000117DA 3238 F700                  		move.w	($FFFFF700).w,d1
000117DE 0441 0080                  		subi.w	#$80,d1
000117E2 0241 FF80                  		andi.w	#$FF80,d1
000117E6 9041                       		sub.w	d1,d0
000117E8 0C40 0280                  		cmpi.w	#$280,d0
000117EC 6200                       		bhi.s	Obj71_Delete
000117EE 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
000117F2 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
000117F4 4EFA C168                  		jmp	DisplaySprite	; if yes, display the object
000117F8                            ; ===========================================================================
000117F8                            
000117F8                            Obj71_NoDisplay:
000117F8 4E75                       		rts	
000117FA                            ; ===========================================================================
000117FA                            
000117FA                            Obj71_Delete:
000117FA 4EFA C19E                  		jmp	DeleteObject
000117FE                            ; ===========================================================================
000117FE                            ; ---------------------------------------------------------------------------
000117FE                            ; Sprite mappings - invisible solid blocks
000117FE                            ; ---------------------------------------------------------------------------
000117FE                            Map_obj71:
000117FE                            	include "_maps\obj71.asm"
000117FE                            ; ---------------------------------------------------------------------------
000117FE                            ; Sprite mappings - invisible solid blocks
000117FE                            ; ---------------------------------------------------------------------------
000117FE 0000                       		dc.w byte_114BC-Map_obj71
00011800 0000                       		dc.w byte_114D1-Map_obj71
00011802 0000                       		dc.w byte_114E6-Map_obj71
00011804 04                         byte_114BC:	dc.b 4
00011805 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
0001180A F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
0001180F 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011814 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011819 04                         byte_114D1:	dc.b 4
0001181A E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
0001181F E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011824 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011829 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
0001182E 04                         byte_114E6:	dc.b 4
0001182F E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011834 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011839 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
0001183E 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011844 00                         		even
00011844 00                         		even
00011844                            
00011844                            ; ===========================================================================
00011844                            ; ---------------------------------------------------------------------------
00011844                            ; Object 5D - fans (SLZ)
00011844                            ; ---------------------------------------------------------------------------
00011844                            
00011844                            Obj5D:					; XREF: Obj_Index
00011844 7000                       		moveq	#0,d0
00011846 1028 0024                  		move.b	$24(a0),d0
0001184A 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
0001184E 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011852                            ; ===========================================================================
00011852 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011854 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011856                            ; ===========================================================================
00011856                            
00011856                            Obj5D_Main:				; XREF: Obj5D_Index
00011856 5428 0024                  		addq.b	#2,$24(a0)
0001185A 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011862 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011868 0028 0004 0001             		ori.b	#4,1(a0)
0001186E 117C 0010 0019             		move.b	#$10,$19(a0)
00011874 117C 0004 0018             		move.b	#4,$18(a0)
0001187A                            
0001187A                            Obj5D_Delay:				; XREF: Obj5D_Index
0001187A 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011880 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011882 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011886 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011888 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
0001188E 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011894 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011896 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
0001189C                            
0001189C                            Obj5D_Blow:
0001189C 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
000118A0 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
000118A4 43F8 D000                  		lea	($FFFFD000).w,a1
000118A8 3029 0008                  		move.w	8(a1),d0
000118AC 9068 0008                  		sub.w	8(a0),d0
000118B0 0828 0000 0022             		btst	#0,$22(a0)
000118B6 6600                       		bne.s	Obj5D_ChkSonic
000118B8 4440                       		neg.w	d0
000118BA                            
000118BA                            Obj5D_ChkSonic:
000118BA 0640 0050                  		addi.w	#$50,d0
000118BE 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000118C2 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000118C4 3229 000C                  		move.w	$C(a1),d1
000118C8 0641 0060                  		addi.w	#$60,d1
000118CC 9268 000C                  		sub.w	$C(a0),d1
000118D0 6500                       		bcs.s	Obj5D_Animate
000118D2 0C41 0070                  		cmpi.w	#$70,d1
000118D6 6400                       		bcc.s	Obj5D_Animate
000118D8 0440 0050                  		subi.w	#$50,d0
000118DC 6400                       		bcc.s	loc_1159A
000118DE 4640                       		not.w	d0
000118E0 D040                       		add.w	d0,d0
000118E2                            
000118E2                            loc_1159A:
000118E2 0640 0060                  		addi.w	#$60,d0
000118E6 0828 0000 0022             		btst	#0,$22(a0)
000118EC 6600                       		bne.s	loc_115A8
000118EE 4440                       		neg.w	d0
000118F0                            
000118F0                            loc_115A8:
000118F0 4400                       		neg.b	d0
000118F2 E840                       		asr.w	#4,d0
000118F4 0828 0000 0028             		btst	#0,$28(a0)
000118FA 6700                       		beq.s	Obj5D_MoveSonic
000118FC 4440                       		neg.w	d0
000118FE                            
000118FE                            Obj5D_MoveSonic:
000118FE D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011902                            
00011902                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011902 5328 001E                  		subq.b	#1,$1E(a0)
00011906 6A00                       		bpl.s	Obj5D_ChkDel
00011908 117C 0000 001E             		move.b	#0,$1E(a0)
0001190E 5228 001B                  		addq.b	#1,$1B(a0)
00011912 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011918 6500                       		bcs.s	loc_115D8
0001191A 117C 0000 001B             		move.b	#0,$1B(a0)
00011920                            
00011920                            loc_115D8:
00011920 7000                       		moveq	#0,d0
00011922 0828 0000 0028             		btst	#0,$28(a0)
00011928 6700                       		beq.s	loc_115E4
0001192A 7002                       		moveq	#2,d0
0001192C                            
0001192C                            loc_115E4:
0001192C D028 001B                  		add.b	$1B(a0),d0
00011930 1140 001A                  		move.b	d0,$1A(a0)
00011934                            
00011934                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011934 6100 C028                  		bsr.w	DisplaySprite
00011938 3028 0008                  		move.w	8(a0),d0
0001193C 0240 FF80                  		andi.w	#$FF80,d0
00011940 3238 F700                  		move.w	($FFFFF700).w,d1
00011944 0441 0080                  		subi.w	#$80,d1
00011948 0241 FF80                  		andi.w	#$FF80,d1
0001194C 9041                       		sub.w	d1,d0
0001194E 0C40 0280                  		cmpi.w	#$280,d0
00011952 6200 C046                  		bhi.w	DeleteObject
00011956 4E75                       		rts	
00011958                            ; ===========================================================================
00011958                            ; ---------------------------------------------------------------------------
00011958                            ; Sprite mappings - fans (SLZ)
00011958                            ; ---------------------------------------------------------------------------
00011958                            Map_obj5D:
00011958                            	include "_maps\obj5D.asm"
00011958                            ; ---------------------------------------------------------------------------
00011958                            ; Sprite mappings - fans (SLZ)
00011958                            ; ---------------------------------------------------------------------------
00011958 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0001195C 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011960 0000                       		dc.w byte_1161A-Map_obj5D
00011962 02                         byte_1161A:	dc.b 2
00011963 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011968 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001196D 02                         byte_11625:	dc.b 2
0001196E F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011973 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011978 02                         byte_11630:	dc.b 2
00011979 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
0001197E 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011984 00                         		even
00011984 00                         		even
00011984                            
00011984                            ; ===========================================================================
00011984                            ; ---------------------------------------------------------------------------
00011984                            ; Object 5E - seesaws (SLZ)
00011984                            ; ---------------------------------------------------------------------------
00011984                            
00011984                            Obj5E:					; XREF: Obj_Index
00011984 7000                       		moveq	#0,d0
00011986 1028 0024                  		move.b	$24(a0),d0
0001198A 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
0001198E 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011992 3028 0030                  		move.w	$30(a0),d0
00011996 0240 FF80                  		andi.w	#$FF80,d0
0001199A 3238 F700                  		move.w	($FFFFF700).w,d1
0001199E 0441 0080                  		subi.w	#$80,d1
000119A2 0241 FF80                  		andi.w	#$FF80,d1
000119A6 9041                       		sub.w	d1,d0
000119A8 6B00 BFF0                  		bmi.w	DeleteObject
000119AC 0C40 0280                  		cmpi.w	#$280,d0
000119B0 6200 BFE8                  		bhi.w	DeleteObject
000119B4 6000 BFA8                  		bra.w	DisplaySprite
000119B8                            ; ===========================================================================
000119B8 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
000119BA 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000119BC 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000119BE 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000119C0 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000119C2 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000119C4                            ; ===========================================================================
000119C4                            
000119C4                            Obj5E_Main:				; XREF: Obj5E_Index
000119C4 5428 0024                  		addq.b	#2,$24(a0)
000119C8 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000119D0 317C 0374 0002             		move.w	#$374,2(a0)
000119D6 0028 0004 0001             		ori.b	#4,1(a0)
000119DC 117C 0004 0018             		move.b	#4,$18(a0)
000119E2 117C 0030 0019             		move.b	#$30,$19(a0)
000119E8 3168 0008 0030             		move.w	8(a0),$30(a0)
000119EE 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000119F2 6600                       		bne.s	loc_116D2	; if not, branch
000119F4 6100 C404                  		bsr.w	SingleObjLoad2
000119F8 6600                       		bne.s	loc_116D2
000119FA 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000119FE 5C29 0024                  		addq.b	#6,$24(a1)
00011A02 3368 0008 0008             		move.w	8(a0),8(a1)
00011A08 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011A0E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011A14 2348 003C                  		move.l	a0,$3C(a1)
00011A18                            
00011A18                            loc_116D2:
00011A18 0828 0000 0022             		btst	#0,$22(a0)
00011A1E 6700                       		beq.s	loc_116E0
00011A20 117C 0002 001A             		move.b	#2,$1A(a0)
00011A26                            
00011A26                            loc_116E0:
00011A26 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011A2C                            
00011A2C                            Obj5E_Slope:				; XREF: Obj5E_Index
00011A2C 1228 003A                  		move.b	$3A(a0),d1
00011A30 6100 0000                  		bsr.w	loc_11766
00011A34 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011A3A 0828 0000 001A             		btst	#0,$1A(a0)
00011A40 6700                       		beq.s	loc_11702
00011A42 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011A48                            
00011A48                            loc_11702:
00011A48 43F8 D000                  		lea	($FFFFD000).w,a1
00011A4C 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011A52 323C 0030                  		move.w	#$30,d1
00011A56 4EB9 0000 7848             		jsr	(SlopeObject).l
00011A5C 4E75                       		rts	
00011A5E                            ; ===========================================================================
00011A5E                            
00011A5E                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011A5E 6100 0000                  		bsr.w	loc_1174A
00011A62 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011A68 0828 0000 001A             		btst	#0,$1A(a0)
00011A6E 6700                       		beq.s	loc_11730
00011A70 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011A76                            
00011A76                            loc_11730:
00011A76 323C 0030                  		move.w	#$30,d1
00011A7A 4EB9 0000 78E8             		jsr	(ExitPlatform).l
00011A80 323C 0030                  		move.w	#$30,d1
00011A84 3428 0008                  		move.w	8(a0),d2
00011A88 4EB9 0000 8846             		jsr	SlopeObject2
00011A8E 4E75                       		rts	
00011A90                            ; ===========================================================================
00011A90                            
00011A90                            loc_1174A:				; XREF: Obj5E_Slope2
00011A90 7202                       		moveq	#2,d1
00011A92 43F8 D000                  		lea	($FFFFD000).w,a1
00011A96 3028 0008                  		move.w	8(a0),d0
00011A9A 9069 0008                  		sub.w	8(a1),d0
00011A9E 6400                       		bcc.s	loc_1175E
00011AA0 4440                       		neg.w	d0
00011AA2 7200                       		moveq	#0,d1
00011AA4                            
00011AA4                            loc_1175E:
00011AA4 0C40 0008                  		cmpi.w	#8,d0
00011AA8 6400                       		bcc.s	loc_11766
00011AAA 7201                       		moveq	#1,d1
00011AAC                            
00011AAC                            loc_11766:
00011AAC 1028 001A                  		move.b	$1A(a0),d0
00011AB0 B001                       		cmp.b	d1,d0
00011AB2 6700                       		beq.s	locret_11790
00011AB4 6400                       		bcc.s	loc_11772
00011AB6 5400                       		addq.b	#2,d0
00011AB8                            
00011AB8                            loc_11772:
00011AB8 5300                       		subq.b	#1,d0
00011ABA 1140 001A                  		move.b	d0,$1A(a0)
00011ABE 1141 003A                  		move.b	d1,$3A(a0)
00011AC2 08A8 0000 0001             		bclr	#0,1(a0)
00011AC8 0828 0001 001A             		btst	#1,$1A(a0)
00011ACE 6700                       		beq.s	locret_11790
00011AD0 08E8 0000 0001             		bset	#0,1(a0)
00011AD6                            
00011AD6                            locret_11790:
00011AD6 4E75                       		rts	
00011AD8                            ; ===========================================================================
00011AD8                            
00011AD8                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011AD8 5428 0024                  		addq.b	#2,$24(a0)
00011ADC 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011AE4 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011AEA 0028 0004 0001             		ori.b	#4,1(a0)
00011AF0 117C 0004 0018             		move.b	#4,$18(a0)
00011AF6 117C 008B 0020             		move.b	#$8B,$20(a0)
00011AFC 117C 000C 0019             		move.b	#$C,$19(a0)
00011B02 3168 0008 0030             		move.w	8(a0),$30(a0)
00011B08 0668 0028 0008             		addi.w	#$28,8(a0)
00011B0E 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011B14 117C 0001 001A             		move.b	#1,$1A(a0)
00011B1A 0828 0000 0022             		btst	#0,$22(a0)
00011B20 6700                       		beq.s	Obj5E_MoveSpike
00011B22 0468 0050 0008             		subi.w	#$50,8(a0)
00011B28 117C 0002 003A             		move.b	#2,$3A(a0)
00011B2E                            
00011B2E                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011B2E 2268 003C                  		movea.l	$3C(a0),a1
00011B32 7000                       		moveq	#0,d0
00011B34 1028 003A                  		move.b	$3A(a0),d0
00011B38 9029 003A                  		sub.b	$3A(a1),d0
00011B3C 6700                       		beq.s	loc_1183E
00011B3E 6400                       		bcc.s	loc_117FC
00011B40 4400                       		neg.b	d0
00011B42                            
00011B42                            loc_117FC:
00011B42 323C F7E8                  		move.w	#-$818,d1
00011B46 343C FEEC                  		move.w	#-$114,d2
00011B4A 0C00 0001                  		cmpi.b	#1,d0
00011B4E 6700                       		beq.s	loc_11822
00011B50 323C F510                  		move.w	#-$AF0,d1
00011B54 343C FF34                  		move.w	#-$CC,d2
00011B58 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011B5E 6D00                       		blt.s	loc_11822
00011B60 323C F200                  		move.w	#-$E00,d1
00011B64 343C FF60                  		move.w	#-$A0,d2
00011B68                            
00011B68                            loc_11822:
00011B68 3141 0012                  		move.w	d1,$12(a0)
00011B6C 3142 0010                  		move.w	d2,$10(a0)
00011B70 3028 0008                  		move.w	8(a0),d0
00011B74 9068 0030                  		sub.w	$30(a0),d0
00011B78 6400                       		bcc.s	loc_11838
00011B7A 4468 0010                  		neg.w	$10(a0)
00011B7E                            
00011B7E                            loc_11838:
00011B7E 5428 0024                  		addq.b	#2,$24(a0)
00011B82 6000                       		bra.s	Obj5E_SpikeFall
00011B84                            ; ===========================================================================
00011B84                            
00011B84                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011B84 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011B8A 7000                       		moveq	#0,d0
00011B8C 1029 001A                  		move.b	$1A(a1),d0
00011B90 343C 0028                  		move.w	#$28,d2
00011B94 3228 0008                  		move.w	8(a0),d1
00011B98 9268 0030                  		sub.w	$30(a0),d1
00011B9C 6400                       		bcc.s	loc_1185C
00011B9E 4442                       		neg.w	d2
00011BA0 5440                       		addq.w	#2,d0
00011BA2                            
00011BA2                            loc_1185C:
00011BA2 D040                       		add.w	d0,d0
00011BA4 3228 0034                  		move.w	$34(a0),d1
00011BA8 D272 0000                  		add.w	(a2,d0.w),d1
00011BAC 3141 000C                  		move.w	d1,$C(a0)
00011BB0 D468 0030                  		add.w	$30(a0),d2
00011BB4 3142 0008                  		move.w	d2,8(a0)
00011BB8 4268 000E                  		clr.w	$E(a0)
00011BBC 4268 000A                  		clr.w	$A(a0)
00011BC0 4E75                       		rts	
00011BC2                            ; ===========================================================================
00011BC2                            
00011BC2                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011BC2 4A68 0012                  		tst.w	$12(a0)
00011BC6 6A00                       		bpl.s	loc_1189A
00011BC8 6100 BD42                  		bsr.w	ObjectFall
00011BCC 3028 0034                  		move.w	$34(a0),d0
00011BD0 0440 002F                  		subi.w	#$2F,d0
00011BD4 B068 000C                  		cmp.w	$C(a0),d0
00011BD8 6E00                       		bgt.s	locret_11898
00011BDA 6100 BD30                  		bsr.w	ObjectFall
00011BDE                            
00011BDE                            locret_11898:
00011BDE 4E75                       		rts	
00011BE0                            ; ===========================================================================
00011BE0                            
00011BE0                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011BE0 6100 BD2A                  		bsr.w	ObjectFall
00011BE4 2268 003C                  		movea.l	$3C(a0),a1
00011BE8 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011BEE 7000                       		moveq	#0,d0
00011BF0 1029 001A                  		move.b	$1A(a1),d0
00011BF4 3228 0008                  		move.w	8(a0),d1
00011BF8 9268 0030                  		sub.w	$30(a0),d1
00011BFC 6400                       		bcc.s	loc_118BA
00011BFE 5440                       		addq.w	#2,d0
00011C00                            
00011C00                            loc_118BA:
00011C00 D040                       		add.w	d0,d0
00011C02 3228 0034                  		move.w	$34(a0),d1
00011C06 D272 0000                  		add.w	(a2,d0.w),d1
00011C0A B268 000C                  		cmp.w	$C(a0),d1
00011C0E 6E00                       		bgt.s	locret_11938
00011C10 2268 003C                  		movea.l	$3C(a0),a1
00011C14 7202                       		moveq	#2,d1
00011C16 4A68 0010                  		tst.w	$10(a0)
00011C1A 6B00                       		bmi.s	Obj5E_Spring
00011C1C 7200                       		moveq	#0,d1
00011C1E                            
00011C1E                            Obj5E_Spring:
00011C1E 1341 003A                  		move.b	d1,$3A(a1)
00011C22 1141 003A                  		move.b	d1,$3A(a0)
00011C26 B229 001A                  		cmp.b	$1A(a1),d1
00011C2A 6700                       		beq.s	loc_1192C
00011C2C 08A9 0003 0022             		bclr	#3,$22(a1)
00011C32 6700                       		beq.s	loc_1192C
00011C34 4229 0025                  		clr.b	$25(a1)
00011C38 137C 0002 0024             		move.b	#2,$24(a1)
00011C3E 45F8 D000                  		lea	($FFFFD000).w,a2
00011C42 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011C48 446A 0012                  		neg.w	$12(a2)
00011C4C 08EA 0001 0022             		bset	#1,$22(a2)
00011C52 08AA 0003 0022             		bclr	#3,$22(a2)
00011C58 422A 003C                  		clr.b	$3C(a2)
00011C5C 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011C62 157C 0002 0024             		move.b	#2,$24(a2)
00011C68 303C 00CC                  		move.w	#$CC,d0
00011C6C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
00011C72                            
00011C72                            loc_1192C:
00011C72 4268 0010                  		clr.w	$10(a0)
00011C76 4268 0012                  		clr.w	$12(a0)
00011C7A 5528 0024                  		subq.b	#2,$24(a0)
00011C7E                            
00011C7E                            locret_11938:
00011C7E 4E75                       		rts	
00011C80                            ; ===========================================================================
00011C80 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011C8A                            
00011C8A                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011CBA                            		even
00011CBA                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011CEA                            		even
00011CEA                            ; ---------------------------------------------------------------------------
00011CEA                            ; Sprite mappings - seesaws (SLZ)
00011CEA                            ; ---------------------------------------------------------------------------
00011CEA                            Map_obj5E:
00011CEA                            	include "_maps\obj5E.asm"
00011CEA                            ; ---------------------------------------------------------------------------
00011CEA                            ; Sprite mappings - seesaws (SLZ)
00011CEA                            ; ---------------------------------------------------------------------------
00011CEA 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011CEE 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011CF2 07                         byte_119AC:	dc.b 7
00011CF3 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011CF8 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011CFD E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011D02 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011D07 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011D0C F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011D11 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011D16 04                         byte_119D0:	dc.b 4
00011D17 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011D1C E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011D21 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011D26 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011D2C 00                         		even
00011D2C 00                         		even
00011D2C                            
00011D2C                            ; ---------------------------------------------------------------------------
00011D2C                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011D2C                            ; ---------------------------------------------------------------------------
00011D2C                            Map_obj5Ea:
00011D2C                            	include "_maps\obj5Eballs.asm"
00011D2C                            ; ---------------------------------------------------------------------------
00011D2C                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011D2C                            ; ---------------------------------------------------------------------------
00011D2C 0000                       		dc.w byte_119EA-Map_obj5Ea
00011D2E 0000                       		dc.w byte_119F0-Map_obj5Ea
00011D30 01                         byte_119EA:	dc.b 1
00011D31 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011D36 01                         byte_119F0:	dc.b 1
00011D37 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011D3C                            		even
00011D3C                            		even
00011D3C                            
00011D3C                            ; ===========================================================================
00011D3C                            ; ---------------------------------------------------------------------------
00011D3C                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011D3C                            ; ---------------------------------------------------------------------------
00011D3C                            
00011D3C                            Obj5F:					; XREF: Obj_Index
00011D3C 7000                       		moveq	#0,d0
00011D3E 1028 0024                  		move.b	$24(a0),d0
00011D42 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011D46 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011D4A                            ; ===========================================================================
00011D4A 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011D4C 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011D4E 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011D50 0000                       		dc.w Obj5F_End-Obj5F_Index
00011D52                            ; ===========================================================================
00011D52                            
00011D52                            Obj5F_Main:				; XREF: Obj5F_Index
00011D52 5428 0024                  		addq.b	#2,$24(a0)
00011D56 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011D5E 317C 0400 0002             		move.w	#$400,2(a0)
00011D64 0028 0004 0001             		ori.b	#4,1(a0)
00011D6A 117C 0003 0018             		move.b	#3,$18(a0)
00011D70 117C 000C 0019             		move.b	#$C,$19(a0)
00011D76 1028 0028                  		move.b	$28(a0),d0
00011D7A 6700                       		beq.s	loc_11A3C
00011D7C 1140 0024                  		move.b	d0,$24(a0)
00011D80 4E75                       		rts	
00011D82                            ; ===========================================================================
00011D82                            
00011D82                            loc_11A3C:
00011D82 117C 009A 0020             		move.b	#$9A,$20(a0)
00011D88 0868 0000 0022             		bchg	#0,$22(a0)
00011D8E                            
00011D8E                            Obj5F_Action:				; XREF: Obj5F_Index
00011D8E 7000                       		moveq	#0,d0
00011D90 1028 0025                  		move.b	$25(a0),d0
00011D94 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00011D98 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00011D9C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011DA2 6100 8C6C                  		bsr.w	AnimateSprite
00011DA6 6000 DC5E                  		bra.w	MarkObjGone
00011DAA                            ; ===========================================================================
00011DAA 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00011DAC 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00011DAE 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00011DB0                            ; ===========================================================================
00011DB0                            
00011DB0                            Obj5F_Walk:				; XREF: Obj5F_Index2
00011DB0 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011DB4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011DB8 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00011DBA 5428 0025                  		addq.b	#2,$25(a0)
00011DBE 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00011DC4 317C 0010 0010             		move.w	#$10,$10(a0)
00011DCA 117C 0001 001C             		move.b	#1,$1C(a0)
00011DD0 0868 0000 0022             		bchg	#0,$22(a0)
00011DD6 6700                       		beq.s	locret_11A96
00011DD8 4468 0010                  		neg.w	$10(a0)		; change direction
00011DDC                            
00011DDC                            locret_11A96:
00011DDC 4E75                       		rts	
00011DDE                            ; ===========================================================================
00011DDE                            
00011DDE                            Obj5F_Wait:				; XREF: Obj5F_Index2
00011DDE 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011DE2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011DE6 6B00                       		bmi.s	loc_11AA8
00011DE8 6100 BB4E                  		bsr.w	SpeedToPos
00011DEC 4E75                       		rts	
00011DEE                            ; ===========================================================================
00011DEE                            
00011DEE                            loc_11AA8:
00011DEE 5528 0025                  		subq.b	#2,$25(a0)
00011DF2 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00011DF8 4268 0010                  		clr.w	$10(a0)		; stop walking
00011DFC 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00011E02 4E75                       		rts	
00011E04                            ; ===========================================================================
00011E04                            
00011E04                            Obj5F_Explode:				; XREF: Obj5F_Index2
00011E04 5368 0030                  		subq.w	#1,$30(a0)
00011E08 6A00                       		bpl.s	locret_11AD0
00011E0A 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00011E0E 117C 0000 0024             		move.b	#0,$24(a0)
00011E14                            
00011E14                            locret_11AD0:
00011E14 4E75                       		rts	
00011E16                            ; ===========================================================================
00011E16                            
00011E16                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00011E16 3038 D008                  		move.w	($FFFFD008).w,d0
00011E1A 9068 0008                  		sub.w	8(a0),d0
00011E1E 6400                       		bcc.s	loc_11ADE
00011E20 4440                       		neg.w	d0
00011E22                            
00011E22                            loc_11ADE:
00011E22 0C40 0060                  		cmpi.w	#$60,d0
00011E26 6400                       		bcc.s	locret_11B5E
00011E28 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011E2C 9068 000C                  		sub.w	$C(a0),d0
00011E30 6400                       		bcc.s	Obj5F_MakeFuse
00011E32 4440                       		neg.w	d0
00011E34                            
00011E34                            Obj5F_MakeFuse:
00011E34 0C40 0060                  		cmpi.w	#$60,d0
00011E38 6400                       		bcc.s	locret_11B5E
00011E3A 4A78 FE08                  		tst.w	($FFFFFE08).w
00011E3E 6600                       		bne.s	locret_11B5E
00011E40 117C 0004 0025             		move.b	#4,$25(a0)
00011E46 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00011E4C 4268 0010                  		clr.w	$10(a0)
00011E50 117C 0002 001C             		move.b	#2,$1C(a0)
00011E56 6100 BFA2                  		bsr.w	SingleObjLoad2
00011E5A 6600                       		bne.s	locret_11B5E
00011E5C 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00011E60 3368 0008 0008             		move.w	8(a0),8(a1)
00011E66 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011E6C 3368 000C 0034             		move.w	$C(a0),$34(a1)
00011E72 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011E78 137C 0004 0028             		move.b	#4,$28(a1)
00011E7E 137C 0003 001C             		move.b	#3,$1C(a1)
00011E84 337C 0010 0012             		move.w	#$10,$12(a1)
00011E8A 0828 0001 0022             		btst	#1,$22(a0)
00011E90 6700                       		beq.s	loc_11B54
00011E92 4469 0012                  		neg.w	$12(a1)
00011E96                            
00011E96                            loc_11B54:
00011E96 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00011E9C 2348 003C                  		move.l	a0,$3C(a1)
00011EA0                            
00011EA0                            locret_11B5E:
00011EA0 4E75                       		rts	
00011EA2                            ; ===========================================================================
00011EA2                            
00011EA2                            Obj5F_Display:				; XREF: Obj5F_Index
00011EA2 6100                       		bsr.s	loc_11B70
00011EA4 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011EAA 6100 8B64                  		bsr.w	AnimateSprite
00011EAE 6000 DB56                  		bra.w	MarkObjGone
00011EB2                            ; ===========================================================================
00011EB2                            
00011EB2                            loc_11B70:
00011EB2 5368 0030                  		subq.w	#1,$30(a0)
00011EB6 6B00                       		bmi.s	loc_11B7C
00011EB8 6100 BA7E                  		bsr.w	SpeedToPos
00011EBC 4E75                       		rts	
00011EBE                            ; ===========================================================================
00011EBE                            
00011EBE                            loc_11B7C:
00011EBE 4268 0030                  		clr.w	$30(a0)
00011EC2 4228 0024                  		clr.b	$24(a0)
00011EC6 3168 0034 000C             		move.w	$34(a0),$C(a0)
00011ECC 7203                       		moveq	#3,d1
00011ECE 2248                       		movea.l	a0,a1
00011ED0 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00011ED6 6000                       		bra.s	Obj5F_MakeShrap
00011ED8                            ; ===========================================================================
00011ED8                            
00011ED8                            Obj5F_Loop:
00011ED8 6100 BF20                  		bsr.w	SingleObjLoad2
00011EDC 6600                       		bne.s	loc_11BCE
00011EDE                            
00011EDE                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00011EDE 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00011EE2 3368 0008 0008             		move.w	8(a0),8(a1)
00011EE8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011EEE 137C 0006 0028             		move.b	#6,$28(a1)
00011EF4 137C 0004 001C             		move.b	#4,$1C(a1)
00011EFA 335A 0010                  		move.w	(a2)+,$10(a1)
00011EFE 335A 0012                  		move.w	(a2)+,$12(a1)
00011F02 137C 0098 0020             		move.b	#$98,$20(a1)
00011F08 08E9 0007 0001             		bset	#7,1(a1)
00011F0E                            
00011F0E                            loc_11BCE:
00011F0E 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00011F12                            
00011F12 117C 0006 0024             		move.b	#6,$24(a0)
00011F18                            
00011F18                            Obj5F_End:				; XREF: Obj5F_Index
00011F18 6100 BA1E                  		bsr.w	SpeedToPos
00011F1C 0668 0018 0012             		addi.w	#$18,$12(a0)
00011F22 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011F28 6100 8AE6                  		bsr.w	AnimateSprite
00011F2C 4A28 0001                  		tst.b	1(a0)
00011F30 6A00 BA68                  		bpl.w	DeleteObject
00011F34 6000 BA28                  		bra.w	DisplaySprite
00011F38                            ; ===========================================================================
00011F38 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00011F48                            
00011F48                            Ani_obj5F:
00011F48                            	include "_anim\obj5F.asm"
00011F48                            ; ---------------------------------------------------------------------------
00011F48                            ; Animation script - Bomb enemy
00011F48                            ; ---------------------------------------------------------------------------
00011F48 0000                       		dc.w byte_11C12-Ani_obj5F
00011F4A 0000                       		dc.w byte_11C16-Ani_obj5F
00011F4C 0000                       		dc.w byte_11C1C-Ani_obj5F
00011F4E 0000                       		dc.w byte_11C20-Ani_obj5F
00011F50 0000                       		dc.w byte_11C24-Ani_obj5F
00011F52 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00011F56 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00011F5C 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00011F60 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00011F64 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00011F68                            		even
00011F68                            		even
00011F68                            
00011F68                            ; ---------------------------------------------------------------------------
00011F68                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011F68                            ; ---------------------------------------------------------------------------
00011F68                            Map_obj5F:
00011F68                            	include "_maps\obj5F.asm"
00011F68                            ; ---------------------------------------------------------------------------
00011F68                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011F68                            ; ---------------------------------------------------------------------------
00011F68 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00011F6C 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00011F70 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00011F74 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00011F78 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00011F7C 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00011F80 03                         byte_11C40:	dc.b 3
00011F81 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011F86 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011F8B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011F90 03                         byte_11C50:	dc.b 3
00011F91 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011F96 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011F9B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011FA0 03                         byte_11C60:	dc.b 3
00011FA1 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011FA6 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00011FAB E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011FB0 03                         byte_11C70:	dc.b 3
00011FB1 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011FB6 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00011FBB E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011FC0 03                         byte_11C80:	dc.b 3
00011FC1 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011FC6 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00011FCB E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011FD0 03                         byte_11C90:	dc.b 3
00011FD1 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011FD6 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00011FDB E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011FE0 02                         byte_11CA0:	dc.b 2
00011FE1 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011FE6 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011FEB 02                         byte_11CAB:	dc.b 2
00011FEC F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011FF1 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011FF6 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00011FF7 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00011FFC 01                         byte_11CBC:	dc.b 1			; fuse
00011FFD E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012002 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012003 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012008 01                         byte_11CC8:	dc.b 1			; fireball
00012009 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001200E                            		even
0001200E                            		even
0001200E                            
0001200E                            ; ===========================================================================
0001200E                            ; ---------------------------------------------------------------------------
0001200E                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001200E                            ; ---------------------------------------------------------------------------
0001200E                            
0001200E                            Obj60:					; XREF: Obj_Index
0001200E 7000                       		moveq	#0,d0
00012010 1028 0024                  		move.b	$24(a0),d0
00012014 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012018 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001201C                            ; ===========================================================================
0001201C 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
0001201E 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012020 0000                       		dc.w Obj60_Display-Obj60_Index
00012022 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012024 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012026                            ; ===========================================================================
00012026                            
00012026                            Obj60_Main:				; XREF: Obj60_Index
00012026 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0001202E 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012034 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001203A 6700                       		beq.s	loc_11D02
0001203C 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012042                            
00012042                            loc_11D02:
00012042 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012048 6600                       		bne.s	loc_11D10
0001204A 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012050                            
00012050                            loc_11D10:
00012050 0028 0004 0001             		ori.b	#4,1(a0)
00012056 117C 0004 0018             		move.b	#4,$18(a0)
0001205C 117C 000B 0020             		move.b	#$B,$20(a0)
00012062 117C 000C 0019             		move.b	#$C,$19(a0)
00012068 7400                       		moveq	#0,d2
0001206A 45E8 0037                  		lea	$37(a0),a2
0001206E 264A                       		movea.l	a2,a3
00012070 524A                       		addq.w	#1,a2
00012072 7203                       		moveq	#3,d1
00012074                            
00012074                            Obj60_MakeOrbs:
00012074 6100 BD84                  		bsr.w	SingleObjLoad2
00012078 6600                       		bne.s	loc_11D90
0001207A 5213                       		addq.b	#1,(a3)
0001207C 3A09                       		move.w	a1,d5
0001207E 0445 D000                  		subi.w	#-$3000,d5
00012082 EC4D                       		lsr.w	#6,d5
00012084 0245 007F                  		andi.w	#$7F,d5
00012088 14C5                       		move.b	d5,(a2)+
0001208A 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001208C 137C 0006 0024             		move.b	#6,$24(a1)
00012092 2368 0004 0004             		move.l	4(a0),4(a1)
00012098 3368 0002 0002             		move.w	2(a0),2(a1)
0001209E 0029 0004 0001             		ori.b	#4,1(a1)
000120A4 137C 0004 0018             		move.b	#4,$18(a1)
000120AA 137C 0008 0019             		move.b	#8,$19(a1)
000120B0 137C 0003 001A             		move.b	#3,$1A(a1)
000120B6 137C 0098 0020             		move.b	#$98,$20(a1)
000120BC 1342 0026                  		move.b	d2,$26(a1)
000120C0 0602 0040                  		addi.b	#$40,d2
000120C4 2348 003C                  		move.l	a0,$3C(a1)
000120C8 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000120CC                            
000120CC                            loc_11D90:
000120CC 7001                       		moveq	#1,d0
000120CE 0828 0000 0022             		btst	#0,$22(a0)
000120D4 6700                       		beq.s	Obj60_Move
000120D6 4440                       		neg.w	d0
000120D8                            
000120D8                            Obj60_Move:
000120D8 1140 0036                  		move.b	d0,$36(a0)
000120DC 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000120E2 5428 0024                  		addq.b	#2,$24(a0)
000120E6 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000120EC 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000120F2 6700                       		beq.s	locret_11DBC	; if not, branch
000120F4 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000120F8                            
000120F8                            locret_11DBC:
000120F8 4E75                       		rts	
000120FA                            ; ===========================================================================
000120FA                            
000120FA                            Obj60_ChkSonic:				; XREF: Obj60_Index
000120FA 3038 D008                  		move.w	($FFFFD008).w,d0
000120FE 9068 0008                  		sub.w	8(a0),d0
00012102 6400                       		bcc.s	loc_11DCA
00012104 4440                       		neg.w	d0
00012106                            
00012106                            loc_11DCA:
00012106 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001210A 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001210C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012110 9068 000C                  		sub.w	$C(a0),d0
00012114 6400                       		bcc.s	loc_11DDC
00012116 4440                       		neg.w	d0
00012118                            
00012118                            loc_11DDC:
00012118 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001211C 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001211E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012122 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012124 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0001212A                            
0001212A                            Obj60_Animate:
0001212A 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012130 6100 88DE                  		bsr.w	AnimateSprite
00012134 6000 0000                  		bra.w	Obj60_ChkDel
00012138                            ; ===========================================================================
00012138                            
00012138                            Obj60_Display:				; XREF: Obj60_Index
00012138 6100 B7FE                  		bsr.w	SpeedToPos
0001213C                            
0001213C                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001213C 3028 0008                  		move.w	8(a0),d0
00012140 0240 FF80                  		andi.w	#$FF80,d0
00012144 3238 F700                  		move.w	($FFFFF700).w,d1
00012148 0441 0080                  		subi.w	#$80,d1
0001214C 0241 FF80                  		andi.w	#$FF80,d1
00012150 9041                       		sub.w	d1,d0
00012152 0C40 0280                  		cmpi.w	#$280,d0
00012156 6200 0000                  		bhi.w	Obj60_ChkGone
0001215A 6000 B802                  		bra.w	DisplaySprite
0001215E                            ; ===========================================================================
0001215E                            
0001215E                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0001215E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012162 7000                       		moveq	#0,d0
00012164 1028 0023                  		move.b	$23(a0),d0
00012168 6700                       		beq.s	loc_11E34
0001216A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012170                            
00012170                            loc_11E34:
00012170 45E8 0037                  		lea	$37(a0),a2
00012174 7400                       		moveq	#0,d2
00012176 141A                       		move.b	(a2)+,d2
00012178 5342                       		subq.w	#1,d2
0001217A 6500                       		bcs.s	Obj60_Delete
0001217C                            
0001217C                            loc_11E40:
0001217C 7000                       		moveq	#0,d0
0001217E 101A                       		move.b	(a2)+,d0
00012180 ED48                       		lsl.w	#6,d0
00012182 0680 00FF D000             		addi.l	#$FFD000,d0
00012188 2240                       		movea.l	d0,a1
0001218A 6100 B810                  		bsr.w	DeleteObject2
0001218E 51CA FFEC                  		dbf	d2,loc_11E40
00012192                            
00012192                            Obj60_Delete:
00012192 6000 B806                  		bra.w	DeleteObject
00012196                            ; ===========================================================================
00012196                            
00012196                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012196 2268 003C                  		movea.l	$3C(a0),a1
0001219A 0C11 0060                  		cmpi.b	#$60,0(a1)
0001219E 6600 B7FA                  		bne.w	DeleteObject
000121A2 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000121A8 6600                       		bne.s	Obj60_Circle
000121AA 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000121B0 6600                       		bne.s	Obj60_Circle
000121B2 5428 0024                  		addq.b	#2,$24(a0)
000121B6 5329 0037                  		subq.b	#1,$37(a1)
000121BA 6600                       		bne.s	Obj60_FireOrb
000121BC 5429 0024                  		addq.b	#2,$24(a1)
000121C0                            
000121C0                            Obj60_FireOrb:
000121C0 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000121C6 0829 0000 0022             		btst	#0,$22(a1)
000121CC 6700                       		beq.s	Obj60_Display2
000121CE 4468 0010                  		neg.w	$10(a0)
000121D2                            
000121D2                            Obj60_Display2:
000121D2 6000 B78A                  		bra.w	DisplaySprite
000121D6                            ; ===========================================================================
000121D6                            
000121D6                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000121D6 1028 0026                  		move.b	$26(a0),d0
000121DA 4EB9 0000 2BFA             		jsr	(CalcSine).l
000121E0 E841                       		asr.w	#4,d1
000121E2 D269 0008                  		add.w	8(a1),d1
000121E6 3141 0008                  		move.w	d1,8(a0)
000121EA E840                       		asr.w	#4,d0
000121EC D069 000C                  		add.w	$C(a1),d0
000121F0 3140 000C                  		move.w	d0,$C(a0)
000121F4 1029 0036                  		move.b	$36(a1),d0
000121F8 D128 0026                  		add.b	d0,$26(a0)
000121FC 6000 B760                  		bra.w	DisplaySprite
00012200                            ; ===========================================================================
00012200                            
00012200                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012200 6100 B736                  		bsr.w	SpeedToPos
00012204 4A28 0001                  		tst.b	1(a0)
00012208 6A00 B790                  		bpl.w	DeleteObject
0001220C 6000 B750                  		bra.w	DisplaySprite
00012210                            ; ===========================================================================
00012210                            Ani_obj60:
00012210                            	include "_anim\obj60.asm"
00012210                            ; ---------------------------------------------------------------------------
00012210                            ; Animation script - Orbinaut enemy
00012210                            ; ---------------------------------------------------------------------------
00012210 0000                       		dc.w byte_11EDA-Ani_obj60
00012212 0000                       		dc.w byte_11EDE-Ani_obj60
00012214 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012218 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
0001221E                            		even
0001221E                            		even
0001221E                            
0001221E                            ; ---------------------------------------------------------------------------
0001221E                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001221E                            ; ---------------------------------------------------------------------------
0001221E                            Map_obj60:
0001221E                            	include "_maps\obj60.asm"
0001221E                            ; ---------------------------------------------------------------------------
0001221E                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001221E                            ; ---------------------------------------------------------------------------
0001221E 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012222 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012226 01                         byte_11EEC:	dc.b 1
00012227 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001222C 01                         byte_11EF2:	dc.b 1
0001222D F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012232 01                         byte_11EF8:	dc.b 1
00012233 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012238 01                         byte_11EFE:	dc.b 1
00012239 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001223E                            		even
0001223E                            		even
0001223E                            
0001223E                            ; ===========================================================================
0001223E                            ; ---------------------------------------------------------------------------
0001223E                            ; Object 16 - harpoon (LZ)
0001223E                            ; ---------------------------------------------------------------------------
0001223E                            
0001223E                            Obj16:					; XREF: Obj_Index
0001223E 7000                       		moveq	#0,d0
00012240 1028 0024                  		move.b	$24(a0),d0
00012244 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012248 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001224C                            ; ===========================================================================
0001224C 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0001224E 0000                       		dc.w Obj16_Move-Obj16_Index
00012250 0000                       		dc.w Obj16_Wait-Obj16_Index
00012252                            ; ===========================================================================
00012252                            
00012252                            Obj16_Main:				; XREF: Obj16_Index
00012252 5428 0024                  		addq.b	#2,$24(a0)
00012256 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
0001225E 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012264 0028 0004 0001             		ori.b	#4,1(a0)
0001226A 117C 0004 0018             		move.b	#4,$18(a0)
00012270 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012276 117C 0014 0019             		move.b	#$14,$19(a0)
0001227C 317C 003C 0030             		move.w	#60,$30(a0)
00012282                            
00012282                            Obj16_Move:				; XREF: Obj16_Index
00012282 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012288 6100 8786                  		bsr.w	AnimateSprite
0001228C 7000                       		moveq	#0,d0
0001228E 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012292 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012298 6000 D76C                  		bra.w	MarkObjGone
0001229C                            ; ===========================================================================
0001229C 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000122A2                            ; ===========================================================================
000122A2                            
000122A2                            Obj16_Wait:				; XREF: Obj16_Index
000122A2 5368 0030                  		subq.w	#1,$30(a0)
000122A6 6A00                       		bpl.s	Obj16_ChkDel
000122A8 317C 003C 0030             		move.w	#60,$30(a0)
000122AE 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000122B2 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000122B8                            
000122B8                            Obj16_ChkDel:
000122B8 6000 D74C                  		bra.w	MarkObjGone
000122BC                            ; ===========================================================================
000122BC                            Ani_obj16:
000122BC                            	include "_anim\obj16.asm"
000122BC                            ; ---------------------------------------------------------------------------
000122BC                            ; Animation script - harpoon (LZ)
000122BC                            ; ---------------------------------------------------------------------------
000122BC 0000                       		dc.w byte_11F8A-Ani_obj16
000122BE 0000                       		dc.w byte_11F8E-Ani_obj16
000122C0 0000                       		dc.w byte_11F92-Ani_obj16
000122C2 0000                       		dc.w byte_11F96-Ani_obj16
000122C4 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000122C8 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000122CC 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000122D0 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000122D4                            		even
000122D4                            		even
000122D4                            
000122D4                            ; ---------------------------------------------------------------------------
000122D4                            ; Sprite mappings - harpoon (LZ)
000122D4                            ; ---------------------------------------------------------------------------
000122D4                            Map_obj16:
000122D4                            	include "_maps\obj16.asm"
000122D4                            ; ---------------------------------------------------------------------------
000122D4                            ; Sprite mappings - harpoon (LZ)
000122D4                            ; ---------------------------------------------------------------------------
000122D4 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000122D8 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000122DC 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000122E0 01                         byte_11FA6:	dc.b 1
000122E1 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000122E6 01                         byte_11FAC:	dc.b 1
000122E7 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000122EC 02                         byte_11FB2:	dc.b 2
000122ED FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000122F2 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000122F7 01                         byte_11FBD:	dc.b 1
000122F8 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000122FD 01                         byte_11FC3:	dc.b 1
000122FE E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012303 02                         byte_11FC9:	dc.b 2
00012304 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012309 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
0001230E                            		even
0001230E                            		even
0001230E                            
0001230E                            ; ===========================================================================
0001230E                            ; ---------------------------------------------------------------------------
0001230E                            ; Object 61 - blocks (LZ)
0001230E                            ; ---------------------------------------------------------------------------
0001230E                            
0001230E                            Obj61:					; XREF: Obj_Index
0001230E 7000                       		moveq	#0,d0
00012310 1028 0024                  		move.b	$24(a0),d0
00012314 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012318 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001231C                            ; ===========================================================================
0001231C 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
0001231E 0000                       		dc.w Obj61_Action-Obj61_Index
00012320                            
00012320 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012322 200C                       		dc.b $20, $C
00012324 1010                       		dc.b $10, $10
00012326 1010                       		dc.b $10, $10
00012328                            ; ===========================================================================
00012328                            
00012328                            Obj61_Main:				; XREF: Obj61_Index
00012328 5428 0024                  		addq.b	#2,$24(a0)
0001232C 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012334 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001233A 117C 0004 0001             		move.b	#4,1(a0)
00012340 117C 0003 0018             		move.b	#3,$18(a0)
00012346 7000                       		moveq	#0,d0
00012348 1028 0028                  		move.b	$28(a0),d0
0001234C E648                       		lsr.w	#3,d0
0001234E 0240 000E                  		andi.w	#$E,d0
00012352 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012356 115A 0019                  		move.b	(a2)+,$19(a0)
0001235A 1152 0016                  		move.b	(a2),$16(a0)
0001235E E248                       		lsr.w	#1,d0
00012360 1140 001A                  		move.b	d0,$1A(a0)
00012364 3168 0008 0034             		move.w	8(a0),$34(a0)
0001236A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012370 1028 0028                  		move.b	$28(a0),d0
00012374 0200 000F                  		andi.b	#$F,d0
00012378 6700                       		beq.s	Obj61_Action
0001237A 0C00 0007                  		cmpi.b	#7,d0
0001237E 6700                       		beq.s	Obj61_Action
00012380 117C 0001 0038             		move.b	#1,$38(a0)
00012386                            
00012386                            Obj61_Action:				; XREF: Obj61_Index
00012386 3F28 0008                  		move.w	8(a0),-(sp)
0001238A 7000                       		moveq	#0,d0
0001238C 1028 0028                  		move.b	$28(a0),d0
00012390 0240 000F                  		andi.w	#$F,d0
00012394 D040                       		add.w	d0,d0
00012396 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
0001239A 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
0001239E 381F                       		move.w	(sp)+,d4
000123A0 4A28 0001                  		tst.b	1(a0)
000123A4 6A00                       		bpl.s	Obj61_ChkDel
000123A6 7200                       		moveq	#0,d1
000123A8 1228 0019                  		move.b	$19(a0),d1
000123AC 0641 000B                  		addi.w	#$B,d1
000123B0 7400                       		moveq	#0,d2
000123B2 1428 0016                  		move.b	$16(a0),d2
000123B6 3602                       		move.w	d2,d3
000123B8 5243                       		addq.w	#1,d3
000123BA 6100 D972                  		bsr.w	SolidObject
000123BE 1144 003F                  		move.b	d4,$3F(a0)
000123C2 6100 0000                  		bsr.w	loc_12180
000123C6                            
000123C6                            Obj61_ChkDel:
000123C6 3028 0034                  		move.w	$34(a0),d0
000123CA 0240 FF80                  		andi.w	#$FF80,d0
000123CE 3238 F700                  		move.w	($FFFFF700).w,d1
000123D2 0441 0080                  		subi.w	#$80,d1
000123D6 0241 FF80                  		andi.w	#$FF80,d1
000123DA 9041                       		sub.w	d1,d0
000123DC 0C40 0280                  		cmpi.w	#$280,d0
000123E0 6200 B5B8                  		bhi.w	DeleteObject
000123E4 6000 B578                  		bra.w	DisplaySprite
000123E8                            ; ===========================================================================
000123E8 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000123EC 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000123F0 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000123F4 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000123F8                            ; ===========================================================================
000123F8                            
000123F8                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000123F8 4E75                       		rts	
000123FA                            ; ===========================================================================
000123FA                            
000123FA                            Obj61_Type01:				; XREF: Obj61_TypeIndex
000123FA 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
000123FE 6600                       		bne.s	loc_120D6	; if yes, branch
00012400 0828 0003 0022             		btst	#3,$22(a0)
00012406 6700                       		beq.s	locret_120D4
00012408 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
0001240E                            
0001240E                            locret_120D4:
0001240E 4E75                       		rts	
00012410                            ; ===========================================================================
00012410                            
00012410                            loc_120D6:
00012410 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012414 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012416 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001241A 4228 0038                  		clr.b	$38(a0)
0001241E 4E75                       		rts	
00012420                            ; ===========================================================================
00012420                            
00012420                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012420 6100 B516                  		bsr.w	SpeedToPos
00012424 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012428 6100 0000                  		bsr.w	ObjHitFloor
0001242C 4A41                       		tst.w	d1
0001242E 6A00 0000                  		bpl.w	locret_12106
00012432 5241                       		addq.w	#1,d1
00012434 D368 000C                  		add.w	d1,$C(a0)
00012438 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
0001243C 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012440                            
00012440                            locret_12106:
00012440 4E75                       		rts	
00012442                            ; ===========================================================================
00012442                            
00012442                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012442 6100 B4F4                  		bsr.w	SpeedToPos
00012446 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
0001244A 6100 0000                  		bsr.w	ObjHitCeiling
0001244E 4A41                       		tst.w	d1
00012450 6A00 0000                  		bpl.w	locret_12126
00012454 9368 000C                  		sub.w	d1,$C(a0)
00012458 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
0001245C 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012460                            
00012460                            locret_12126:
00012460 4E75                       		rts	
00012462                            ; ===========================================================================
00012462                            
00012462                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012462 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012468 6600                       		bne.s	locret_12138	; if not, branch
0001246A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001246E 4228 0038                  		clr.b	$38(a0)
00012472                            
00012472                            locret_12138:
00012472 4E75                       		rts	
00012474                            ; ===========================================================================
00012474                            
00012474                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012474 3038 F646                  		move.w	($FFFFF646).w,d0
00012478 9068 000C                  		sub.w	$C(a0),d0
0001247C 6700                       		beq.s	locret_1217E
0001247E 6400                       		bcc.s	loc_12162
00012480 0C40 FFFE                  		cmpi.w	#-2,d0
00012484 6C00                       		bge.s	loc_1214E
00012486 70FE                       		moveq	#-2,d0
00012488                            
00012488                            loc_1214E:
00012488 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
0001248C 6100 0000                  		bsr.w	ObjHitCeiling
00012490 4A41                       		tst.w	d1
00012492 6A00 0000                  		bpl.w	locret_12160
00012496 9368 000C                  		sub.w	d1,$C(a0)
0001249A                            
0001249A                            locret_12160:
0001249A 4E75                       		rts	
0001249C                            ; ===========================================================================
0001249C                            
0001249C                            loc_12162:				; XREF: Obj61_Type07
0001249C 0C40 0002                  		cmpi.w	#2,d0
000124A0 6F00                       		ble.s	loc_1216A
000124A2 7002                       		moveq	#2,d0
000124A4                            
000124A4                            loc_1216A:
000124A4 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000124A8 6100 0000                  		bsr.w	ObjHitFloor
000124AC 4A41                       		tst.w	d1
000124AE 6A00 0000                  		bpl.w	locret_1217E
000124B2 5241                       		addq.w	#1,d1
000124B4 D368 000C                  		add.w	d1,$C(a0)
000124B8                            
000124B8                            locret_1217E:
000124B8 4E75                       		rts	
000124BA                            ; ===========================================================================
000124BA                            
000124BA                            loc_12180:				; XREF: Obj61_Action
000124BA 4A28 0038                  		tst.b	$38(a0)
000124BE 6700                       		beq.s	locret_121C0
000124C0 0828 0003 0022             		btst	#3,$22(a0)
000124C6 6600                       		bne.s	loc_1219A
000124C8 4A28 003E                  		tst.b	$3E(a0)
000124CC 6700                       		beq.s	locret_121C0
000124CE 5928 003E                  		subq.b	#4,$3E(a0)
000124D2 6000                       		bra.s	loc_121A6
000124D4                            ; ===========================================================================
000124D4                            
000124D4                            loc_1219A:
000124D4 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000124DA 6700                       		beq.s	locret_121C0
000124DC 5828 003E                  		addq.b	#4,$3E(a0)
000124E0                            
000124E0                            loc_121A6:
000124E0 1028 003E                  		move.b	$3E(a0),d0
000124E4 4EB9 0000 2BFA             		jsr	(CalcSine).l
000124EA 323C 0400                  		move.w	#$400,d1
000124EE C1C1                       		muls.w	d1,d0
000124F0 4840                       		swap	d0
000124F2 D068 0030                  		add.w	$30(a0),d0
000124F6 3140 000C                  		move.w	d0,$C(a0)
000124FA                            
000124FA                            locret_121C0:
000124FA 4E75                       		rts	
000124FC                            ; ===========================================================================
000124FC                            ; ---------------------------------------------------------------------------
000124FC                            ; Sprite mappings - blocks (LZ)
000124FC                            ; ---------------------------------------------------------------------------
000124FC                            Map_obj61:
000124FC                            	include "_maps\obj61.asm"
000124FC                            ; ---------------------------------------------------------------------------
000124FC                            ; Sprite mappings - blocks (LZ)
000124FC                            ; ---------------------------------------------------------------------------
000124FC 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012500 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012504 01                         byte_121CA:	dc.b 1
00012505 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001250A 02                         byte_121D0:	dc.b 2
0001250B F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012510 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012515 01                         byte_121DB:	dc.b 1
00012516 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
0001251B 01                         byte_121E1:	dc.b 1
0001251C F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012522 00                         		even
00012522 00                         		even
00012522                            
00012522                            ; ===========================================================================
00012522                            ; ---------------------------------------------------------------------------
00012522                            ; Object 62 - gargoyle head (LZ)
00012522                            ; ---------------------------------------------------------------------------
00012522                            
00012522                            Obj62:					; XREF: Obj_Index
00012522 7000                       		moveq	#0,d0
00012524 1028 0024                  		move.b	$24(a0),d0
00012528 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001252C 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012530 6000 D4D4                  		bra.w	MarkObjGone
00012534                            ; ===========================================================================
00012534 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012536 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012538 0000                       		dc.w Obj62_FireBall-Obj62_Index
0001253A 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001253C                            
0001253C 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012544                            ; ===========================================================================
00012544                            
00012544                            Obj62_Main:				; XREF: Obj62_Index
00012544 5428 0024                  		addq.b	#2,$24(a0)
00012548 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012550 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012556 0028 0004 0001             		ori.b	#4,1(a0)
0001255C 117C 0003 0018             		move.b	#3,$18(a0)
00012562 117C 0010 0019             		move.b	#$10,$19(a0)
00012568 1028 0028                  		move.b	$28(a0),d0	; get object type
0001256C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012570 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012576 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001257C 0228 000F 0028             		andi.b	#$F,$28(a0)
00012582                            
00012582                            Obj62_MakeFire:				; XREF: Obj62_Index
00012582 5328 001E                  		subq.b	#1,$1E(a0)
00012586 6600                       		bne.s	Obj62_NoFire
00012588 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001258E 6100 B648                  		bsr.w	ChkObjOnScreen
00012592 6600                       		bne.s	Obj62_NoFire
00012594 6100 B84E                  		bsr.w	SingleObjLoad
00012598 6600                       		bne.s	Obj62_NoFire
0001259A 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
0001259E 5829 0024                  		addq.b	#4,$24(a1)
000125A2 3368 0008 0008             		move.w	8(a0),8(a1)
000125A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000125AE 1368 0001 0001             		move.b	1(a0),1(a1)
000125B4 1368 0022 0022             		move.b	$22(a0),$22(a1)
000125BA                            
000125BA                            Obj62_NoFire:
000125BA 4E75                       		rts	
000125BC                            ; ===========================================================================
000125BC                            
000125BC                            Obj62_FireBall:				; XREF: Obj62_Index
000125BC 5428 0024                  		addq.b	#2,$24(a0)
000125C0 117C 0008 0016             		move.b	#8,$16(a0)
000125C6 117C 0008 0017             		move.b	#8,$17(a0)
000125CC 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000125D4 317C 02E9 0002             		move.w	#$2E9,2(a0)
000125DA 0028 0004 0001             		ori.b	#4,1(a0)
000125E0 117C 0004 0018             		move.b	#4,$18(a0)
000125E6 117C 0098 0020             		move.b	#$98,$20(a0)
000125EC 117C 0008 0019             		move.b	#8,$19(a0)
000125F2 117C 0002 001A             		move.b	#2,$1A(a0)
000125F8 5068 000C                  		addq.w	#8,$C(a0)
000125FC 317C 0200 0010             		move.w	#$200,$10(a0)
00012602 0828 0000 0022             		btst	#0,$22(a0)
00012608 6600                       		bne.s	Obj62_Sound
0001260A 4468 0010                  		neg.w	$10(a0)
0001260E                            
0001260E                            Obj62_Sound:
0001260E 303C 00AE                  		move.w	#$AE,d0
00012612 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012618                            
00012618                            Obj62_AniFire:				; XREF: Obj62_Index
00012618 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001261C 0200 0007                  		andi.b	#7,d0
00012620 6600                       		bne.s	Obj62_StopFire
00012622 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012628                            
00012628                            Obj62_StopFire:
00012628 6100 B30E                  		bsr.w	SpeedToPos
0001262C 0828 0000 0022             		btst	#0,$22(a0)
00012632 6600                       		bne.s	Obj62_StopFire2
00012634 76F8                       		moveq	#-8,d3
00012636 6100 0000                  		bsr.w	ObjHitWallLeft
0001263A 4A41                       		tst.w	d1
0001263C 6B00 B35C                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012640 4E75                       		rts	
00012642                            ; ===========================================================================
00012642                            
00012642                            Obj62_StopFire2:
00012642 7608                       		moveq	#8,d3
00012644 6100 0000                  		bsr.w	ObjHitWallRight
00012648 4A41                       		tst.w	d1
0001264A 6B00 B34E                  		bmi.w	DeleteObject
0001264E 4E75                       		rts	
00012650                            ; ===========================================================================
00012650                            ; ---------------------------------------------------------------------------
00012650                            ; Sprite mappings - gargoyle head (LZ)
00012650                            ; ---------------------------------------------------------------------------
00012650                            Map_obj62:
00012650                            	include "_maps\obj62.asm"
00012650                            ; ---------------------------------------------------------------------------
00012650                            ; Sprite mappings - gargoyle head (LZ)
00012650                            ; ---------------------------------------------------------------------------
00012650 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012654 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012658 03                         byte_12320:	dc.b 3
00012659 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001265E F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012663 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012668 01                         byte_12330:	dc.b 1
00012669 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
0001266E 01                         byte_12336:	dc.b 1
0001266F FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012674                            		even
00012674                            		even
00012674                            
00012674                            ; ===========================================================================
00012674                            ; ---------------------------------------------------------------------------
00012674                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012674                            ; ---------------------------------------------------------------------------
00012674                            
00012674                            Obj63:					; XREF: Obj_Index
00012674 7000                       		moveq	#0,d0
00012676 1028 0024                  		move.b	$24(a0),d0
0001267A 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
0001267E 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012682 3028 0030                  		move.w	$30(a0),d0
00012686 0240 FF80                  		andi.w	#$FF80,d0
0001268A 3238 F700                  		move.w	($FFFFF700).w,d1
0001268E 0441 0080                  		subi.w	#$80,d1
00012692 0241 FF80                  		andi.w	#$FF80,d1
00012696 9041                       		sub.w	d1,d0
00012698 0C40 0280                  		cmpi.w	#$280,d0
0001269C 6200                       		bhi.s	loc_1236A
0001269E                            
0001269E                            Obj63_Display:				; XREF: loc_1236A
0001269E 6000 B2BE                  		bra.w	DisplaySprite
000126A2                            ; ===========================================================================
000126A2                            
000126A2                            loc_1236A:				; XREF: Obj63
000126A2 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
000126A8 6600                       		bne.s	loc_12378
000126AA 0C40 FF80                  		cmpi.w	#-$80,d0
000126AE 64EE                       		bcc.s	Obj63_Display
000126B0                            
000126B0                            loc_12378:
000126B0 1028 002F                  		move.b	$2F(a0),d0
000126B4 6A00 B2E4                  		bpl.w	DeleteObject
000126B8 0240 007F                  		andi.w	#$7F,d0
000126BC 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000126C0 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000126C6 6000 B2D2                  		bra.w	DeleteObject
000126CA                            ; ===========================================================================
000126CA 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000126CC 0000                       		dc.w loc_124B2-Obj63_Index
000126CE 0000                       		dc.w loc_124C2-Obj63_Index
000126D0 0000                       		dc.w loc_124DE-Obj63_Index
000126D2                            ; ===========================================================================
000126D2                            
000126D2                            Obj63_Main:				; XREF: Obj63_Index
000126D2 1028 0028                  		move.b	$28(a0),d0
000126D6 6B00 0000                  		bmi.w	loc_12460
000126DA 5428 0024                  		addq.b	#2,$24(a0)
000126DE 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
000126E6 317C 43F6 0002             		move.w	#$43F6,2(a0)
000126EC 0028 0004 0001             		ori.b	#4,1(a0)
000126F2 117C 0010 0019             		move.b	#$10,$19(a0)
000126F8 117C 0004 0018             		move.b	#4,$18(a0)
000126FE 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012704 6600                       		bne.s	loc_123E2
00012706 5828 0024                  		addq.b	#4,$24(a0)
0001270A 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012710 117C 0001 0018             		move.b	#1,$18(a0)
00012716 6000 0000                  		bra.w	loc_124DE
0001271A                            ; ===========================================================================
0001271A                            
0001271A                            loc_123E2:
0001271A 117C 0004 001A             		move.b	#4,$1A(a0)
00012720 7000                       		moveq	#0,d0
00012722 1028 0028                  		move.b	$28(a0),d0
00012726 3200                       		move.w	d0,d1
00012728 E648                       		lsr.w	#3,d0
0001272A 0240 001E                  		andi.w	#$1E,d0
0001272E 45FA 0000                  		lea	Obj63_Data(pc),a2
00012732 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012736 315A 0038                  		move.w	(a2)+,$38(a0)
0001273A 315A 0030                  		move.w	(a2)+,$30(a0)
0001273E 214A 003C                  		move.l	a2,$3C(a0)
00012742 0241 000F                  		andi.w	#$F,d1
00012746 E549                       		lsl.w	#2,d1
00012748 1141 0038                  		move.b	d1,$38(a0)
0001274C 117C 0004 003A             		move.b	#4,$3A(a0)
00012752 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012756 6700                       		beq.s	loc_1244C
00012758 117C 0001 003B             		move.b	#1,$3B(a0)
0001275E 4428 003A                  		neg.b	$3A(a0)
00012762 7200                       		moveq	#0,d1
00012764 1228 0038                  		move.b	$38(a0),d1
00012768 D228 003A                  		add.b	$3A(a0),d1
0001276C B228 0039                  		cmp.b	$39(a0),d1
00012770 6500                       		bcs.s	loc_12448
00012772 1001                       		move.b	d1,d0
00012774 7200                       		moveq	#0,d1
00012776 4A00                       		tst.b	d0
00012778 6A00                       		bpl.s	loc_12448
0001277A 1228 0039                  		move.b	$39(a0),d1
0001277E 5901                       		subq.b	#4,d1
00012780                            
00012780                            loc_12448:
00012780 1141 0038                  		move.b	d1,$38(a0)
00012784                            
00012784                            loc_1244C:
00012784 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001278A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012790 6100 0000                  		bsr.w	Obj63_ChangeDir
00012794 6000 0000                  		bra.w	loc_124B2
00012798                            ; ===========================================================================
00012798                            
00012798                            loc_12460:				; XREF: Obj63_Main
00012798 1140 002F                  		move.b	d0,$2F(a0)
0001279C 0240 007F                  		andi.w	#$7F,d0
000127A0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000127A4 08F2 0000 0000             		bset	#0,(a2,d0.w)
000127AA 6600 B1EE                  		bne.w	DeleteObject
000127AE D040                       		add.w	d0,d0
000127B0 0240 001E                  		andi.w	#$1E,d0
000127B4 0640 0070                  		addi.w	#$70,d0
000127B8 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000127BE D4F2 0000                  		adda.w	(a2,d0.w),a2
000127C2 321A                       		move.w	(a2)+,d1
000127C4 2248                       		movea.l	a0,a1
000127C6 6000                       		bra.s	Obj63_MakePtfms
000127C8                            ; ===========================================================================
000127C8                            
000127C8                            Obj63_Loop:
000127C8 6100 B61A                  		bsr.w	SingleObjLoad
000127CC 6600                       		bne.s	loc_124AA
000127CE                            
000127CE                            Obj63_MakePtfms:			; XREF: loc_12460
000127CE 12BC 0063                  		move.b	#$63,0(a1)
000127D2 335A 0008                  		move.w	(a2)+,8(a1)
000127D6 335A 000C                  		move.w	(a2)+,$C(a1)
000127DA 301A                       		move.w	(a2)+,d0
000127DC 1340 0028                  		move.b	d0,$28(a1)
000127E0                            
000127E0                            loc_124AA:
000127E0 51C9 FFE6                  		dbf	d1,Obj63_Loop
000127E4                            
000127E4 588F                       		addq.l	#4,sp
000127E6 4E75                       		rts	
000127E8                            ; ===========================================================================
000127E8                            
000127E8                            loc_124B2:				; XREF: Obj63_Index
000127E8 7200                       		moveq	#0,d1
000127EA 1228 0019                  		move.b	$19(a0),d1
000127EE 4EB9 0000 7774             		jsr	(PlatformObject).l
000127F4 6000 0000                  		bra.w	sub_12502
000127F8                            ; ===========================================================================
000127F8                            
000127F8                            loc_124C2:				; XREF: Obj63_Index
000127F8 7200                       		moveq	#0,d1
000127FA 1228 0019                  		move.b	$19(a0),d1
000127FE 4EB9 0000 78E8             		jsr	(ExitPlatform).l
00012804 3F28 0008                  		move.w	8(a0),-(sp)
00012808 6100 0000                  		bsr.w	sub_12502
0001280C 341F                       		move.w	(sp)+,d2
0001280E 4EF9 0000 7E52             		jmp	(MvSonicOnPtfm2).l
00012814                            ; ===========================================================================
00012814                            
00012814                            loc_124DE:				; XREF: Obj63_Index
00012814 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012818 0240 0003                  		andi.w	#3,d0
0001281C 6600                       		bne.s	loc_124FC
0001281E 7201                       		moveq	#1,d1
00012820 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012824 6700                       		beq.s	loc_124F2
00012826 4401                       		neg.b	d1
00012828                            
00012828                            loc_124F2:
00012828 D328 001A                  		add.b	d1,$1A(a0)
0001282C 0228 0003 001A             		andi.b	#3,$1A(a0)
00012832                            
00012832                            loc_124FC:
00012832 588F                       		addq.l	#4,sp
00012834 6000 D1D0                  		bra.w	MarkObjGone
00012838                            
00012838                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012838                            
00012838                            
00012838                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012838 4A38 F7EE                  		tst.b	($FFFFF7EE).w
0001283C 6700                       		beq.s	loc_12520
0001283E 4A28 003B                  		tst.b	$3B(a0)
00012842 6600                       		bne.s	loc_12520
00012844 117C 0001 003B             		move.b	#1,$3B(a0)
0001284A 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012850 4428 003A                  		neg.b	$3A(a0)
00012854 6000                       		bra.s	loc_12534
00012856                            ; ===========================================================================
00012856                            
00012856                            loc_12520:
00012856 3028 0008                  		move.w	8(a0),d0
0001285A B068 0034                  		cmp.w	$34(a0),d0
0001285E 6600                       		bne.s	loc_1256A
00012860 3028 000C                  		move.w	$C(a0),d0
00012864 B068 0036                  		cmp.w	$36(a0),d0
00012868 6600                       		bne.s	loc_1256A
0001286A                            
0001286A                            loc_12534:
0001286A 7200                       		moveq	#0,d1
0001286C 1228 0038                  		move.b	$38(a0),d1
00012870 D228 003A                  		add.b	$3A(a0),d1
00012874 B228 0039                  		cmp.b	$39(a0),d1
00012878 6500                       		bcs.s	loc_12552
0001287A 1001                       		move.b	d1,d0
0001287C 7200                       		moveq	#0,d1
0001287E 4A00                       		tst.b	d0
00012880 6A00                       		bpl.s	loc_12552
00012882 1228 0039                  		move.b	$39(a0),d1
00012886 5901                       		subq.b	#4,d1
00012888                            
00012888                            loc_12552:
00012888 1141 0038                  		move.b	d1,$38(a0)
0001288C 2268 003C                  		movea.l	$3C(a0),a1
00012890 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012896 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001289C 6100 0000                  		bsr.w	Obj63_ChangeDir
000128A0                            
000128A0                            loc_1256A:
000128A0 6100 B096                  		bsr.w	SpeedToPos
000128A4 4E75                       		rts	
000128A6                            ; End of function sub_12502
000128A6                            
000128A6                            
000128A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000128A6                            
000128A6                            
000128A6                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
000128A6 7000                       		moveq	#0,d0
000128A8 343C FF00                  		move.w	#-$100,d2
000128AC 3028 0008                  		move.w	8(a0),d0
000128B0 9068 0034                  		sub.w	$34(a0),d0
000128B4 6400                       		bcc.s	loc_12584
000128B6 4440                       		neg.w	d0
000128B8 4442                       		neg.w	d2
000128BA                            
000128BA                            loc_12584:
000128BA 7200                       		moveq	#0,d1
000128BC 363C FF00                  		move.w	#-$100,d3
000128C0 3228 000C                  		move.w	$C(a0),d1
000128C4 9268 0036                  		sub.w	$36(a0),d1
000128C8 6400                       		bcc.s	loc_12598
000128CA 4441                       		neg.w	d1
000128CC 4443                       		neg.w	d3
000128CE                            
000128CE                            loc_12598:
000128CE B240                       		cmp.w	d0,d1
000128D0 6500                       		bcs.s	loc_125C2
000128D2 3028 0008                  		move.w	8(a0),d0
000128D6 9068 0034                  		sub.w	$34(a0),d0
000128DA 6700                       		beq.s	loc_125AE
000128DC 48C0                       		ext.l	d0
000128DE E180                       		asl.l	#8,d0
000128E0 81C1                       		divs.w	d1,d0
000128E2 4440                       		neg.w	d0
000128E4                            
000128E4                            loc_125AE:
000128E4 3140 0010                  		move.w	d0,$10(a0)
000128E8 3143 0012                  		move.w	d3,$12(a0)
000128EC 4840                       		swap	d0
000128EE 3140 000A                  		move.w	d0,$A(a0)
000128F2 4268 000E                  		clr.w	$E(a0)
000128F6 4E75                       		rts	
000128F8                            ; ===========================================================================
000128F8                            
000128F8                            loc_125C2:				; XREF: Obj63_ChangeDir
000128F8 3228 000C                  		move.w	$C(a0),d1
000128FC 9268 0036                  		sub.w	$36(a0),d1
00012900 6700                       		beq.s	loc_125D4
00012902 48C1                       		ext.l	d1
00012904 E181                       		asl.l	#8,d1
00012906 83C0                       		divs.w	d0,d1
00012908 4441                       		neg.w	d1
0001290A                            
0001290A                            loc_125D4:
0001290A 3141 0012                  		move.w	d1,$12(a0)
0001290E 3142 0010                  		move.w	d2,$10(a0)
00012912 4841                       		swap	d1
00012914 3141 000E                  		move.w	d1,$E(a0)
00012918 4268 000A                  		clr.w	$A(a0)
0001291C 4E75                       		rts	
0001291E                            ; End of function Obj63_ChangeDir
0001291E                            
0001291E                            ; ===========================================================================
0001291E 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012920 0000                       		dc.w word_12610-Obj63_Data
00012922 0000                       		dc.w word_12628-Obj63_Data
00012924 0000                       		dc.w word_1263C-Obj63_Data
00012926 0000                       		dc.w word_12650-Obj63_Data
00012928 0000                       		dc.w word_12668-Obj63_Data
0001292A 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
0001293A 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012946 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012956 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001295E 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012972 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012986 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
0001299E 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000129B2                            
000129B2                            ; ---------------------------------------------------------------------------
000129B2                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000129B2                            ; ---------------------------------------------------------------------------
000129B2                            Map_obj63:
000129B2                            	include "_maps\obj63.asm"
000129B2                            ; ---------------------------------------------------------------------------
000129B2                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000129B2                            ; ---------------------------------------------------------------------------
000129B2 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
000129B6 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
000129BA 0000                       		dc.w byte_1269E-Map_obj63
000129BC 01                         byte_12686:	dc.b 1
000129BD F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000129C2 01                         byte_1268C:	dc.b 1
000129C3 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000129C8 01                         byte_12692:	dc.b 1
000129C9 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000129CE 01                         byte_12698:	dc.b 1
000129CF F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000129D4 01                         byte_1269E:	dc.b 1
000129D5 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000129DA                            		even
000129DA                            		even
000129DA                            
000129DA                            ; ===========================================================================
000129DA                            ; ---------------------------------------------------------------------------
000129DA                            ; Object 64 - bubbles (LZ)
000129DA                            ; ---------------------------------------------------------------------------
000129DA                            
000129DA                            Obj64:					; XREF: Obj_Index
000129DA 7000                       		moveq	#0,d0
000129DC 1028 0024                  		move.b	$24(a0),d0
000129E0 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000129E4 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000129E8                            ; ===========================================================================
000129E8 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000129EA 0000                       		dc.w Obj64_Animate-Obj64_Index
000129EC 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000129EE 0000                       		dc.w Obj64_Display2-Obj64_Index
000129F0 0000                       		dc.w Obj64_Delete3-Obj64_Index
000129F2 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000129F4                            ; ===========================================================================
000129F4                            
000129F4                            Obj64_Main:				; XREF: Obj64_Index
000129F4 5428 0024                  		addq.b	#2,$24(a0)
000129F8 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012A00 317C 8348 0002             		move.w	#$8348,2(a0)
00012A06 117C 0084 0001             		move.b	#$84,1(a0)
00012A0C 117C 0010 0019             		move.b	#$10,$19(a0)
00012A12 117C 0001 0018             		move.b	#1,$18(a0)
00012A18 1028 0028                  		move.b	$28(a0),d0	; get object type
00012A1C 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012A1E 5028 0024                  		addq.b	#8,$24(a0)
00012A22 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012A26 1140 0032                  		move.b	d0,$32(a0)
00012A2A 1140 0033                  		move.b	d0,$33(a0)
00012A2E 117C 0006 001C             		move.b	#6,$1C(a0)
00012A34 6000 0000                  		bra.w	Obj64_BblMaker
00012A38                            ; ===========================================================================
00012A38                            
00012A38                            Obj64_Bubble:				; XREF: Obj64_Main
00012A38 1140 001C                  		move.b	d0,$1C(a0)
00012A3C 3168 0008 0030             		move.w	8(a0),$30(a0)
00012A42 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012A48 4EB9 0000 2BD4             		jsr	(RandomNumber).l
00012A4E 1140 0026                  		move.b	d0,$26(a0)
00012A52                            
00012A52                            Obj64_Animate:				; XREF: Obj64_Index
00012A52 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012A58 4EB9 0000 AA10             		jsr	AnimateSprite
00012A5E 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012A64 6600                       		bne.s	Obj64_ChkWater
00012A66 117C 0001 002E             		move.b	#1,$2E(a0)
00012A6C                            
00012A6C                            Obj64_ChkWater:				; XREF: Obj64_Index
00012A6C 3038 F646                  		move.w	($FFFFF646).w,d0
00012A70 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012A74 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012A76                            
00012A76                            Obj64_Burst:				; XREF: Obj64_Wobble
00012A76 117C 0006 0024             		move.b	#6,$24(a0)
00012A7C 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012A80 6000 0000                  		bra.w	Obj64_Display2
00012A84                            ; ===========================================================================
00012A84                            
00012A84                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012A84 1028 0026                  		move.b	$26(a0),d0
00012A88 5228 0026                  		addq.b	#1,$26(a0)
00012A8C 0240 007F                  		andi.w	#$7F,d0
00012A90 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012A96 1031 0000                  		move.b	(a1,d0.w),d0
00012A9A 4880                       		ext.w	d0
00012A9C D068 0030                  		add.w	$30(a0),d0
00012AA0 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012AA4 4A28 002E                  		tst.b	$2E(a0)
00012AA8 6700                       		beq.s	Obj64_Display
00012AAA 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012AAE 6700                       		beq.s	Obj64_Display	; if not, branch
00012AB0                            
00012AB0 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012AB4 303C 00AD                  		move.w	#$AD,d0
00012AB8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012ABE 43F8 D000                  		lea	($FFFFD000).w,a1
00012AC2 4269 0010                  		clr.w	$10(a1)
00012AC6 4269 0012                  		clr.w	$12(a1)
00012ACA 4269 0014                  		clr.w	$14(a1)
00012ACE 137C 0015 001C             		move.b	#$15,$1C(a1)
00012AD4 337C 0023 003E             		move.w	#$23,$3E(a1)
00012ADA 137C 0000 003C             		move.b	#0,$3C(a1)
00012AE0 08A9 0005 0022             		bclr	#5,$22(a1)
00012AE6 08A9 0004 0022             		bclr	#4,$22(a1)
00012AEC 0829 0002 0022             		btst	#2,$22(a1)
00012AF2 6700 FF82                  		beq.w	Obj64_Burst
00012AF6 08A9 0002 0022             		bclr	#2,$22(a1)
00012AFC 137C 0013 0016             		move.b	#$13,$16(a1)
00012B02 137C 0009 0017             		move.b	#9,$17(a1)
00012B08 5B69 000C                  		subq.w	#5,$C(a1)
00012B0C 6000 FF68                  		bra.w	Obj64_Burst
00012B10                            ; ===========================================================================
00012B10                            
00012B10                            Obj64_Display:				; XREF: Obj64_Wobble
00012B10 6100 AE26                  		bsr.w	SpeedToPos
00012B14 4A28 0001                  		tst.b	1(a0)
00012B18 6A00                       		bpl.s	Obj64_Delete
00012B1A 4EFA AE42                  		jmp	DisplaySprite
00012B1E                            ; ===========================================================================
00012B1E                            
00012B1E                            Obj64_Delete:
00012B1E 4EFA AE7A                  		jmp	DeleteObject
00012B22                            ; ===========================================================================
00012B22                            
00012B22                            Obj64_Display2:				; XREF: Obj64_Index
00012B22 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012B28 4EB9 0000 AA10             		jsr	AnimateSprite
00012B2E 4A28 0001                  		tst.b	1(a0)
00012B32 6A00                       		bpl.s	Obj64_Delete2
00012B34 4EFA AE28                  		jmp	DisplaySprite
00012B38                            ; ===========================================================================
00012B38                            
00012B38                            Obj64_Delete2:
00012B38 4EFA AE60                  		jmp	DeleteObject
00012B3C                            ; ===========================================================================
00012B3C                            
00012B3C                            Obj64_Delete3:				; XREF: Obj64_Index
00012B3C 6000 AE5C                  		bra.w	DeleteObject
00012B40                            ; ===========================================================================
00012B40                            
00012B40                            Obj64_BblMaker:				; XREF: Obj64_Index
00012B40 4A68 0036                  		tst.w	$36(a0)
00012B44 6600                       		bne.s	loc_12874
00012B46 3038 F646                  		move.w	($FFFFF646).w,d0
00012B4A B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012B4E 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012B52 4A28 0001                  		tst.b	1(a0)
00012B56 6A00 0000                  		bpl.w	Obj64_ChkDel
00012B5A 5368 0038                  		subq.w	#1,$38(a0)
00012B5E 6A00 0000                  		bpl.w	loc_12914
00012B62 317C 0001 0036             		move.w	#1,$36(a0)
00012B68                            
00012B68                            loc_1283A:
00012B68 4EB9 0000 2BD4             		jsr	(RandomNumber).l
00012B6E 3200                       		move.w	d0,d1
00012B70 0240 0007                  		andi.w	#7,d0
00012B74 0C40 0006                  		cmpi.w	#6,d0
00012B78 64EE                       		bcc.s	loc_1283A
00012B7A                            
00012B7A 1140 0034                  		move.b	d0,$34(a0)
00012B7E 0241 000C                  		andi.w	#$C,d1
00012B82 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012B88 D2C1                       		adda.w	d1,a1
00012B8A 2149 003C                  		move.l	a1,$3C(a0)
00012B8E 5328 0032                  		subq.b	#1,$32(a0)
00012B92 6A00                       		bpl.s	loc_12872
00012B94 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012B9A 08E8 0007 0036             		bset	#7,$36(a0)
00012BA0                            
00012BA0                            loc_12872:
00012BA0 6000                       		bra.s	loc_1287C
00012BA2                            ; ===========================================================================
00012BA2                            
00012BA2                            loc_12874:				; XREF: Obj64_BblMaker
00012BA2 5368 0038                  		subq.w	#1,$38(a0)
00012BA6 6A00 0000                  		bpl.w	loc_12914
00012BAA                            
00012BAA                            loc_1287C:
00012BAA 4EB9 0000 2BD4             		jsr	(RandomNumber).l
00012BB0 0240 001F                  		andi.w	#$1F,d0
00012BB4 3140 0038                  		move.w	d0,$38(a0)
00012BB8 6100 B22A                  		bsr.w	SingleObjLoad
00012BBC 6600                       		bne.s	loc_128F8
00012BBE 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012BC2 3368 0008 0008             		move.w	8(a0),8(a1)
00012BC8 4EB9 0000 2BD4             		jsr	(RandomNumber).l
00012BCE 0240 000F                  		andi.w	#$F,d0
00012BD2 5140                       		subq.w	#8,d0
00012BD4 D169 0008                  		add.w	d0,8(a1)
00012BD8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012BDE 7000                       		moveq	#0,d0
00012BE0 1028 0034                  		move.b	$34(a0),d0
00012BE4 2468 003C                  		movea.l	$3C(a0),a2
00012BE8 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012BEE 0828 0007 0036             		btst	#7,$36(a0)
00012BF4 6700                       		beq.s	loc_128F8
00012BF6 4EB9 0000 2BD4             		jsr	(RandomNumber).l
00012BFC 0240 0003                  		andi.w	#3,d0
00012C00 6600                       		bne.s	loc_128E4
00012C02 08E8 0006 0036             		bset	#6,$36(a0)
00012C08 6600                       		bne.s	loc_128F8
00012C0A 137C 0002 0028             		move.b	#2,$28(a1)
00012C10                            
00012C10                            loc_128E4:
00012C10 4A28 0034                  		tst.b	$34(a0)
00012C14 6600                       		bne.s	loc_128F8
00012C16 08E8 0006 0036             		bset	#6,$36(a0)
00012C1C 6600                       		bne.s	loc_128F8
00012C1E 137C 0002 0028             		move.b	#2,$28(a1)
00012C24                            
00012C24                            loc_128F8:
00012C24 5328 0034                  		subq.b	#1,$34(a0)
00012C28 6A00                       		bpl.s	loc_12914
00012C2A 4EB9 0000 2BD4             		jsr	(RandomNumber).l
00012C30 0240 007F                  		andi.w	#$7F,d0
00012C34 0640 0080                  		addi.w	#$80,d0
00012C38 D168 0038                  		add.w	d0,$38(a0)
00012C3C 4268 0036                  		clr.w	$36(a0)
00012C40                            
00012C40                            loc_12914:
00012C40 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012C46 4EB9 0000 AA10             		jsr	AnimateSprite
00012C4C                            
00012C4C                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012C4C 3028 0008                  		move.w	8(a0),d0
00012C50 0240 FF80                  		andi.w	#$FF80,d0
00012C54 3238 F700                  		move.w	($FFFFF700).w,d1
00012C58 0441 0080                  		subi.w	#$80,d1
00012C5C 0241 FF80                  		andi.w	#$FF80,d1
00012C60 9041                       		sub.w	d1,d0
00012C62 0C40 0280                  		cmpi.w	#$280,d0
00012C66 6200 AD32                  		bhi.w	DeleteObject
00012C6A 3038 F646                  		move.w	($FFFFF646).w,d0
00012C6E B068 000C                  		cmp.w	$C(a0),d0
00012C72 6500 ACEA                  		bcs.w	DisplaySprite
00012C76 4E75                       		rts	
00012C78                            ; ===========================================================================
00012C78                            ; bubble production sequence
00012C78                            
00012C78                            ; 0 = small bubble, 1 =	large bubble
00012C78                            
00012C78 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012C8A                            
00012C8A                            ; ===========================================================================
00012C8A                            
00012C8A                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012C8A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012C8E 6B00                       		bmi.s	loc_12998
00012C90 43F8 D000                  		lea	($FFFFD000).w,a1
00012C94 3029 0008                  		move.w	8(a1),d0
00012C98 3228 0008                  		move.w	8(a0),d1
00012C9C 0441 0010                  		subi.w	#$10,d1
00012CA0 B240                       		cmp.w	d0,d1
00012CA2 6400                       		bcc.s	loc_12998
00012CA4 0641 0020                  		addi.w	#$20,d1
00012CA8 B240                       		cmp.w	d0,d1
00012CAA 6500                       		bcs.s	loc_12998
00012CAC 3029 000C                  		move.w	$C(a1),d0
00012CB0 3228 000C                  		move.w	$C(a0),d1
00012CB4 B240                       		cmp.w	d0,d1
00012CB6 6400                       		bcc.s	loc_12998
00012CB8 0641 0010                  		addi.w	#$10,d1
00012CBC B240                       		cmp.w	d0,d1
00012CBE 6500                       		bcs.s	loc_12998
00012CC0 7001                       		moveq	#1,d0
00012CC2 4E75                       		rts	
00012CC4                            ; ===========================================================================
00012CC4                            
00012CC4                            loc_12998:
00012CC4 7000                       		moveq	#0,d0
00012CC6 4E75                       		rts	
00012CC8                            ; ===========================================================================
00012CC8                            Ani_obj64:
00012CC8                            	include "_anim\obj64.asm"
00012CC8                            ; ---------------------------------------------------------------------------
00012CC8                            ; Animation script - bubbles (LZ)
00012CC8                            ; ---------------------------------------------------------------------------
00012CC8 0000                       		dc.w byte_129AA-Ani_obj64
00012CCA 0000                       		dc.w byte_129B0-Ani_obj64
00012CCC 0000                       		dc.w byte_129B6-Ani_obj64
00012CCE 0000                       		dc.w byte_129BE-Ani_obj64
00012CD0 0000                       		dc.w byte_129BE-Ani_obj64
00012CD2 0000                       		dc.w byte_129C0-Ani_obj64
00012CD4 0000                       		dc.w byte_129C6-Ani_obj64
00012CD6 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012CDC 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012CE2 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012CEA 04FC                       byte_129BE:	dc.b 4,	$FC
00012CEC 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012CF2 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012CF8 00                         		even
00012CF8 00                         		even
00012CF8                            
00012CF8                            ; ---------------------------------------------------------------------------
00012CF8                            ; Sprite mappings - bubbles (LZ)
00012CF8                            ; ---------------------------------------------------------------------------
00012CF8                            Map_obj64:
00012CF8                            	include "_maps\obj64.asm"
00012CF8                            ; ---------------------------------------------------------------------------
00012CF8                            ; Sprite mappings - bubbles (LZ)
00012CF8                            ; ---------------------------------------------------------------------------
00012CF8 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012CFC 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012D00 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012D04 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012D08 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012D0C 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012D10 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012D14 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012D18 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012D1C 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012D20 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012D24 0000                       		dc.w byte_12A9C-Map_obj64
00012D26 01                         byte_129FA:	dc.b 1
00012D27 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012D2C 01                         byte_12A00:	dc.b 1
00012D2D FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012D32 01                         byte_12A06:	dc.b 1
00012D33 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012D38 01                         byte_12A0C:	dc.b 1
00012D39 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012D3E 01                         byte_12A12:	dc.b 1
00012D3F F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012D44 01                         byte_12A18:	dc.b 1
00012D45 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012D4A 01                         byte_12A1E:	dc.b 1
00012D4B F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012D50 04                         byte_12A24:	dc.b 4
00012D51 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012D56 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012D5B 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012D60 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012D65 04                         byte_12A39:	dc.b 4
00012D66 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012D6B F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00012D70 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00012D75 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012D7A 01                         byte_12A4E:	dc.b 1
00012D7B F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00012D80 01                         byte_12A54:	dc.b 1
00012D81 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00012D86 01                         byte_12A5A:	dc.b 1
00012D87 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00012D8C 01                         byte_12A60:	dc.b 1
00012D8D F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00012D92 01                         byte_12A66:	dc.b 1
00012D93 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00012D98 01                         byte_12A6C:	dc.b 1
00012D99 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00012D9E 01                         byte_12A72:	dc.b 1
00012D9F F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00012DA4 01                         byte_12A78:	dc.b 1
00012DA5 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00012DAA 01                         byte_12A7E:	dc.b 1
00012DAB F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00012DB0 01                         byte_12A84:	dc.b 1
00012DB1 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00012DB6 01                         byte_12A8A:	dc.b 1
00012DB7 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00012DBC 01                         byte_12A90:	dc.b 1
00012DBD F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00012DC2 01                         byte_12A96:	dc.b 1
00012DC3 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00012DC8 00                         byte_12A9C:	dc.b 0
00012DCA 00                         		even
00012DCA 00                         		even
00012DCA                            
00012DCA                            ; ===========================================================================
00012DCA                            ; ---------------------------------------------------------------------------
00012DCA                            ; Object 65 - waterfalls (LZ)
00012DCA                            ; ---------------------------------------------------------------------------
00012DCA                            
00012DCA                            Obj65:					; XREF: Obj_Index
00012DCA 7000                       		moveq	#0,d0
00012DCC 1028 0024                  		move.b	$24(a0),d0
00012DD0 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00012DD4 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00012DD8                            ; ===========================================================================
00012DD8 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00012DDA 0000                       		dc.w Obj65_Animate-Obj65_Index
00012DDC 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00012DDE 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00012DE0 0000                       		dc.w loc_12B36-Obj65_Index
00012DE2                            ; ===========================================================================
00012DE2                            
00012DE2                            Obj65_Main:				; XREF: Obj65_Index
00012DE2 5828 0024                  		addq.b	#4,$24(a0)
00012DE6 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00012DEE 317C 4259 0002             		move.w	#$4259,2(a0)
00012DF4 0028 0004 0001             		ori.b	#4,1(a0)
00012DFA 117C 0018 0019             		move.b	#$18,$19(a0)
00012E00 117C 0001 0018             		move.b	#1,$18(a0)
00012E06 1028 0028                  		move.b	$28(a0),d0	; get object type
00012E0A 6A00                       		bpl.s	loc_12AE6
00012E0C 08E8 0007 0002             		bset	#7,2(a0)
00012E12                            
00012E12                            loc_12AE6:
00012E12 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00012E16 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00012E1A 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00012E1E 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00012E20 4228 0018                  		clr.b	$18(a0)
00012E24 5528 0024                  		subq.b	#2,$24(a0)
00012E28 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00012E2E 6700                       		beq.s	loc_12B0A	; if not, branch
00012E30 117C 0006 0024             		move.b	#6,$24(a0)
00012E36                            
00012E36                            loc_12B0A:
00012E36 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00012E3C 6700                       		beq.s	Obj65_Animate	; if not, branch
00012E3E 117C 0008 0024             		move.b	#8,$24(a0)
00012E44                            
00012E44                            Obj65_Animate:				; XREF: Obj65_Index
00012E44 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00012E4A 4EB9 0000 AA10             		jsr	AnimateSprite
00012E50                            
00012E50                            Obj65_ChkDel:				; XREF: Obj65_Index
00012E50 6000 CBB4                  		bra.w	MarkObjGone
00012E54                            ; ===========================================================================
00012E54                            
00012E54                            Obj65_FixHeight:			; XREF: Obj65_Index
00012E54 3038 F646                  		move.w	($FFFFF646).w,d0
00012E58 0440 0010                  		subi.w	#$10,d0
00012E5C 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00012E60 60E2                       		bra.s	Obj65_Animate
00012E62                            ; ===========================================================================
00012E62                            
00012E62                            loc_12B36:				; XREF: Obj65_Index
00012E62 08A8 0007 0002             		bclr	#7,2(a0)
00012E68 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00012E6E 6600                       		bne.s	Obj65_Animate2
00012E70 08E8 0007 0002             		bset	#7,2(a0)
00012E76                            
00012E76                            Obj65_Animate2:
00012E76 60CC                       		bra.s	Obj65_Animate
00012E78                            ; ===========================================================================
00012E78                            Ani_obj65:
00012E78                            	include "_anim\obj65.asm"
00012E78                            ; ---------------------------------------------------------------------------
00012E78                            ; Animation script - waterfall (LZ)
00012E78                            ; ---------------------------------------------------------------------------
00012E78 0000                       		dc.w byte_12B4E-Ani_obj65
00012E7A 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00012E80 00                         		even
00012E80 00                         		even
00012E80                            
00012E80                            ; ---------------------------------------------------------------------------
00012E80                            ; Sprite mappings - waterfalls (LZ)
00012E80                            ; ---------------------------------------------------------------------------
00012E80                            Map_obj65:
00012E80                            	include "_maps\obj65.asm"
00012E80                            ; ---------------------------------------------------------------------------
00012E80                            ; Sprite mappings - waterfalls (LZ)
00012E80                            ; ---------------------------------------------------------------------------
00012E80 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00012E84 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00012E88 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00012E8C 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00012E90 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00012E94 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00012E98 01                         byte_12B6C:	dc.b 1
00012E99 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00012E9E 02                         byte_12B72:	dc.b 2
00012E9F F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00012EA4 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00012EA9 02                         byte_12B7D:	dc.b 2
00012EAA F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012EAF 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012EB4 01                         byte_12B88:	dc.b 1
00012EB5 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00012EBA 02                         byte_12B8E:	dc.b 2
00012EBB F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012EC0 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012EC5 01                         byte_12B99:	dc.b 1
00012EC6 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00012ECB 01                         byte_12B9F:	dc.b 1
00012ECC F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00012ED1 01                         byte_12BA5:	dc.b 1
00012ED2 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00012ED7 02                         byte_12BAB:	dc.b 2
00012ED8 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00012EDD 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00012EE2 02                         byte_12BB6:	dc.b 2
00012EE3 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00012EE8 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00012EED 02                         byte_12BC1:	dc.b 2
00012EEE F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00012EF3 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00012EF8 02                         byte_12BCC:	dc.b 2
00012EF9 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00012EFE F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00012F04 00                         		even
00012F04 00                         		even
00012F04                            
00012F04                            ; ===========================================================================
00012F04                            ; ---------------------------------------------------------------------------
00012F04                            ; Object 01 - Sonic
00012F04                            ; ---------------------------------------------------------------------------
00012F04                            
00012F04                            Obj01:					; XREF: Obj_Index
00012F04 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00012F08 6700                       		beq.s	Obj01_Normal	; if not, branch
00012F0A 4EF9 0000 0000             		jmp	DebugMode
00012F10                            ; ===========================================================================
00012F10                            
00012F10                            Obj01_Normal:
00012F10 7000                       		moveq	#0,d0
00012F12 1028 0024                  		move.b	$24(a0),d0
00012F16 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00012F1A 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00012F1E                            ; ===========================================================================
00012F1E 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00012F20 0000                       		dc.w Obj01_Control-Obj01_Index
00012F22 0000                       		dc.w Obj01_Hurt-Obj01_Index
00012F24 0000                       		dc.w Obj01_Death-Obj01_Index
00012F26 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00012F28                            ; ===========================================================================
00012F28                            
00012F28                            Obj01_Main:				; XREF: Obj01_Index
00012F28 5428 0024                  		addq.b	#2,$24(a0)
00012F2C 117C 0013 0016             		move.b	#$13,$16(a0)
00012F32 117C 0009 0017             		move.b	#9,$17(a0)
00012F38 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00012F40 317C 0780 0002             		move.w	#$780,2(a0)
00012F46 117C 0002 0018             		move.b	#2,$18(a0)
00012F4C 117C 0018 0019             		move.b	#$18,$19(a0)
00012F52 117C 0004 0001             		move.b	#4,1(a0)
00012F58 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00012F5E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00012F64 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00012F6A                            
00012F6A                            Obj01_Control:				; XREF: Obj01_Index
00012F6A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00012F6E 6700                       		beq.s	loc_12C58	; if not, branch
00012F70 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00012F76 6700                       		beq.s	loc_12C58	; if not, branch
00012F78 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00012F7E 4238 F7CC                  		clr.b	($FFFFF7CC).w
00012F82 4E75                       		rts	
00012F84                            ; ===========================================================================
00012F84                            
00012F84                            loc_12C58:
00012F84 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00012F88 6600                       		bne.s	loc_12C64	; if yes, branch
00012F8A 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00012F90                            
00012F90                            loc_12C64:
00012F90 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00012F96 6600                       		bne.s	loc_12C7E	; if yes, branch
00012F98 7000                       		moveq	#0,d0
00012F9A 1028 0022                  		move.b	$22(a0),d0
00012F9E 0240 0006                  		andi.w	#6,d0
00012FA2 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00012FA6 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00012FAA                            
00012FAA                            loc_12C7E:
00012FAA 6100                       		bsr.s	Sonic_Display
00012FAC 6100 0000                  		bsr.w	Sonic_RecordPos
00012FB0 6100 0000                  		bsr.w	Sonic_Water
00012FB4 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00012FBA 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00012FC0 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00012FC4 6700                       		beq.s	loc_12CA6
00012FC6 4A28 001C                  		tst.b	$1C(a0)
00012FCA 6600                       		bne.s	loc_12CA6
00012FCC 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00012FD2                            
00012FD2                            loc_12CA6:
00012FD2 6100 0000                  		bsr.w	Sonic_Animate
00012FD6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012FDA 6B00                       		bmi.s	loc_12CB6
00012FDC 4EB9 0000 0000             		jsr	TouchResponse
00012FE2                            
00012FE2                            loc_12CB6:
00012FE2 6100 0000                  		bsr.w	Sonic_Loops
00012FE6 6100 0000                  		bsr.w	LoadSonicDynPLC
00012FEA 4E75                       		rts	
00012FEC                            ; ===========================================================================
00012FEC 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00012FEE 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00012FF0 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00012FF2 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00012FF4                            ; ---------------------------------------------------------------------------
00012FF4                            ; Music	to play	after invincibility wears off
00012FF4                            ; ---------------------------------------------------------------------------
00012FF4                            ; ===========================================================================
00012FF4                            
00012FF4                            Sonic_Display:				; XREF: loc_12C7E
00012FF4 3028 0030                  		move.w	$30(a0),d0
00012FF8 6700                       		beq.s	Obj01_Display
00012FFA 5368 0030                  		subq.w	#1,$30(a0)
00012FFE E648                       		lsr.w	#3,d0
00013000 6400                       		bcc.s	Obj01_ChkInvin
00013002                            
00013002                            Obj01_Display:
00013002 4EBA A95A                  		jsr	DisplaySprite
00013006                            
00013006                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013006                             
00013006                            Obj01_ChkInvin:
00013006 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001300A 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
0001300E 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013012 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013016 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
0001301A 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
0001301E 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013022 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013026 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001302C 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013030 7000                       		moveq	#0,d0
00013032 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013036                             
00013036 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001303C 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
0001303E 43F9 0000 3982             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013044 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013046                             
00013046                            Obj01_GetBgm2:
00013046 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001304C 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
0001304E 43F9 0000 398A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013054 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013056                             
00013056                            Obj01_GetBgm3:
00013056 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001305C 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
0001305E 43F9 0000 3990             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013064 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013066                             
00013066                            Obj01_GetBgm4:
00013066 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001306C 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
0001306E 43F9 0000 3996             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013074                             
00013074                            Obj01_PlayMusic:
00013074 1031 0000                  		move.b	(a1,d0.w),d0
00013078 4EB9 0000 15B6             		jsr	(PlaySound).l	; play normal music
0001307E                             
0001307E                            ; NineKode ends here.
0001307E                            
0001307E                            Obj01_RmvInvin:
0001307E 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013084                            
00013084                            Obj01_ChkShoes:
00013084 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013088 6700                       		beq.s	Obj01_ExitChk	; if not, branch
0001308A 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
0001308E 6700                       		beq.s	Obj01_ExitChk
00013090 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013094 6600                       		bne.s	Obj01_ExitChk
00013096 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001309C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000130A2 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000130A8 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000130AE 303C 00E3                  		move.w	#$E3,d0
000130B2 4EF9 0000 15B6             		jmp	(PlaySound).l	; run music at normal speed
000130B8                            ; ===========================================================================
000130B8                            
000130B8                            Obj01_ExitChk:
000130B8 4E75                       		rts	
000130BA                            
000130BA                            ; ---------------------------------------------------------------------------
000130BA                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000130BA                            ; ---------------------------------------------------------------------------
000130BA                            
000130BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000130BA                            
000130BA                            
000130BA                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000130BA 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000130BE 43F8 CB00                  		lea	($FFFFCB00).w,a1
000130C2 43F1 0000                  		lea	(a1,d0.w),a1
000130C6 32E8 0008                  		move.w	8(a0),(a1)+
000130CA 32E8 000C                  		move.w	$C(a0),(a1)+
000130CE 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000130D2 4E75                       		rts	
000130D4                            ; End of function Sonic_RecordPos
000130D4                            
000130D4                            ; ---------------------------------------------------------------------------
000130D4                            ; Subroutine for Sonic when he's underwater
000130D4                            ; ---------------------------------------------------------------------------
000130D4                            
000130D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000130D4                            
000130D4                            
000130D4                            Sonic_Water:				; XREF: loc_12C7E
000130D4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000130DA 6700                       		beq.s	Obj01_InWater	; if yes, branch
000130DC                            
000130DC                            locret_12D80:
000130DC 4E75                       		rts	
000130DE                            ; ===========================================================================
000130DE                            
000130DE                            Obj01_InWater:
000130DE 3038 F646                  		move.w	($FFFFF646).w,d0
000130E2 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000130E6 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000130E8 08E8 0006 0022             		bset	#6,$22(a0)
000130EE 66EC                       		bne.s	locret_12D80
000130F0 6100 0000                  		bsr.w	ResumeMusic
000130F4 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000130FA 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013100 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013106 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001310C 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013112 E0E8 0010                  		asr	$10(a0)
00013116 E0E8 0012                  		asr	$12(a0)
0001311A E0E8 0012                  		asr	$12(a0)
0001311E 67BC                       		beq.s	locret_12D80
00013120 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013126 303C 00AA                  		move.w	#$AA,d0
0001312A 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
00013130                            ; ===========================================================================
00013130                            
00013130                            Obj01_OutWater:
00013130 08A8 0006 0022             		bclr	#6,$22(a0)
00013136 67A4                       		beq.s	locret_12D80
00013138 6100 0000                  		bsr.w	ResumeMusic
0001313C 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013142 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013148 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001314E E1E8 0012                  		asl	$12(a0)
00013152 6700 FF88                  		beq.w	locret_12D80
00013156 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001315C 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013162 6E00                       		bgt.s	loc_12E0E
00013164 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001316A                            
0001316A                            loc_12E0E:
0001316A 303C 00AA                  		move.w	#$AA,d0
0001316E 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
00013174                            ; End of function Sonic_Water
00013174                            
00013174                            ; ===========================================================================
00013174                            ; ---------------------------------------------------------------------------
00013174                            ; Modes	for controlling	Sonic
00013174                            ; ---------------------------------------------------------------------------
00013174                            
00013174                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013174 6100 0000                  		bsr.w	Sonic_Jump
00013178 6100 0000                  		bsr.w	Sonic_SlopeResist
0001317C 6100 0000                  		bsr.w	Sonic_Move
00013180 6100 0000                  		bsr.w	Sonic_Roll
00013184 6100 0000                  		bsr.w	Sonic_LevelBound
00013188 4EBA A7AE                  		jsr	SpeedToPos
0001318C 6100 0000                  		bsr.w	Sonic_AnglePos
00013190 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013194 4E75                       		rts	
00013196                            ; ===========================================================================
00013196                            
00013196                            Obj01_MdJump:				; XREF: Obj01_Modes
00013196 6100 0000                  		bsr.w	Sonic_JumpHeight
0001319A 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001319E 6100 0000                  		bsr.w	Sonic_LevelBound
000131A2 4EBA A768                  		jsr	ObjectFall
000131A6 0828 0006 0022             		btst	#6,$22(a0)
000131AC 6700                       		beq.s	loc_12E5C
000131AE 0468 0028 0012             		subi.w	#$28,$12(a0)
000131B4                            
000131B4                            loc_12E5C:
000131B4 6100 0000                  		bsr.w	Sonic_JumpAngle
000131B8 6100 0000                  		bsr.w	Sonic_Floor
000131BC 4E75                       		rts	
000131BE                            ; ===========================================================================
000131BE                            
000131BE                            Obj01_MdRoll:				; XREF: Obj01_Modes
000131BE 6100 0000                  		bsr.w	Sonic_Jump
000131C2 6100 0000                  		bsr.w	Sonic_RollRepel
000131C6 6100 0000                  		bsr.w	Sonic_RollSpeed
000131CA 6100 0000                  		bsr.w	Sonic_LevelBound
000131CE 4EBA A768                  		jsr	SpeedToPos
000131D2 6100 0000                  		bsr.w	Sonic_AnglePos
000131D6 6100 0000                  		bsr.w	Sonic_SlopeRepel
000131DA 4E75                       		rts	
000131DC                            ; ===========================================================================
000131DC                            
000131DC                            Obj01_MdJump2:				; XREF: Obj01_Modes
000131DC 6100 0000                  		bsr.w	Sonic_JumpHeight
000131E0 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000131E4 6100 0000                  		bsr.w	Sonic_LevelBound
000131E8 4EBA A722                  		jsr	ObjectFall
000131EC 0828 0006 0022             		btst	#6,$22(a0)
000131F2 6700                       		beq.s	loc_12EA6
000131F4 0468 0028 0012             		subi.w	#$28,$12(a0)
000131FA                            
000131FA                            loc_12EA6:
000131FA 6100 0000                  		bsr.w	Sonic_JumpAngle
000131FE 6100 0000                  		bsr.w	Sonic_Floor
00013202 4E75                       		rts	
00013204                            ; ---------------------------------------------------------------------------
00013204                            ; Subroutine to	make Sonic walk/run
00013204                            ; ---------------------------------------------------------------------------
00013204                            
00013204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013204                            
00013204                            
00013204                            Sonic_Move:				; XREF: Obj01_MdNormal
00013204 3C38 F760                  		move.w	($FFFFF760).w,d6
00013208 3A38 F762                  		move.w	($FFFFF762).w,d5
0001320C 3838 F764                  		move.w	($FFFFF764).w,d4
00013210 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013214 6600 0000                  		bne.w	loc_12FEE
00013218 4A68 003E                  		tst.w	$3E(a0)
0001321C 6600 0000                  		bne.w	Obj01_ResetScr
00013220 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013226 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013228 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001322E 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013230 6100 0000                  		bsr.w	Sonic_MoveLeft
00013234                            
00013234                            Obj01_NotLeft:
00013234 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001323A 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001323C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013242 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013244 6100 0000                  		bsr.w	Sonic_MoveLeft
00013248 6000                       		bra.s	Obj01_NotRight
0001324A                            
0001324A                            Obj01_MoveRight:
0001324A 6100 0000                  		bsr.w	Sonic_MoveRight
0001324E                            
0001324E                            Obj01_NotRight:
0001324E 1028 0026                  		move.b	$26(a0),d0
00013252 0600 0020                  		addi.b	#$20,d0
00013256 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001325A 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001325E 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013262 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013266 08A8 0005 0022             		bclr	#5,$22(a0)
0001326C 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013272 0828 0003 0022             		btst	#3,$22(a0)
00013278 6700                       		beq.s	Sonic_Balance
0001327A 7000                       		moveq	#0,d0
0001327C 1028 003D                  		move.b	$3D(a0),d0
00013280 ED48                       		lsl.w	#6,d0
00013282 43F8 D000                  		lea	($FFFFD000).w,a1
00013286 43F1 0000                  		lea	(a1,d0.w),a1
0001328A 4A29 0022                  		tst.b	$22(a1)
0001328E 6B00                       		bmi.s	Sonic_LookUp
00013290 7200                       		moveq	#0,d1
00013292 1229 0019                  		move.b	$19(a1),d1
00013296 3401                       		move.w	d1,d2
00013298 D442                       		add.w	d2,d2
0001329A 5942                       		subq.w	#4,d2
0001329C D268 0008                  		add.w	8(a0),d1
000132A0 9269 0008                  		sub.w	8(a1),d1
000132A4 0C41 0004                  		cmpi.w	#4,d1
000132A8 6D00                       		blt.s	loc_12F6A
000132AA B242                       		cmp.w	d2,d1
000132AC 6C00                       		bge.s	loc_12F5A
000132AE 6000                       		bra.s	Sonic_LookUp
000132B0                            ; ===========================================================================
000132B0                            
000132B0                            Sonic_Balance:
000132B0 4EB9 0000 0000             		jsr	ObjHitFloor
000132B6 0C41 000C                  		cmpi.w	#$C,d1
000132BA 6D00                       		blt.s	Sonic_LookUp
000132BC 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000132C2 6600                       		bne.s	loc_12F62
000132C4                            
000132C4                            loc_12F5A:
000132C4 08A8 0000 0022             		bclr	#0,$22(a0)
000132CA 6000                       		bra.s	loc_12F70
000132CC                            ; ===========================================================================
000132CC                            
000132CC                            loc_12F62:
000132CC 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000132D2 6600                       		bne.s	Sonic_LookUp
000132D4                            
000132D4                            loc_12F6A:
000132D4 08E8 0000 0022             		bset	#0,$22(a0)
000132DA                            
000132DA                            loc_12F70:
000132DA 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000132E0 6000                       		bra.s	Obj01_ResetScr
000132E2                            ; ===========================================================================
000132E2                            
000132E2                            Sonic_LookUp:
000132E2 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000132E8 6700                       		beq.s	Sonic_Duck	; if not, branch
000132EA 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000132F0 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000132F6 6700                       		beq.s	loc_12FC2
000132F8 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000132FC 6000                       		bra.s	loc_12FC2
000132FE                            ; ===========================================================================
000132FE                            
000132FE                            Sonic_Duck:
000132FE 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013304 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013306 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001330C 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013312 6700                       		beq.s	loc_12FC2
00013314 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013318 6000                       		bra.s	loc_12FC2
0001331A                            ; ===========================================================================
0001331A                            
0001331A                            Obj01_ResetScr:
0001331A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013320 6700                       		beq.s	loc_12FC2	; if yes, branch
00013322 6400                       		bcc.s	loc_12FBE
00013324 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013328                            
00013328                            loc_12FBE:
00013328 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001332C                            
0001332C                            loc_12FC2:
0001332C 1038 F602                  		move.b	($FFFFF602).w,d0
00013330 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013334 6600                       		bne.s	loc_12FEE	; if yes, branch
00013336 3028 0014                  		move.w	$14(a0),d0
0001333A 6700                       		beq.s	loc_12FEE
0001333C 6B00                       		bmi.s	loc_12FE2
0001333E 9045                       		sub.w	d5,d0
00013340 6400                       		bcc.s	loc_12FDC
00013342 303C 0000                  		move.w	#0,d0
00013346                            
00013346                            loc_12FDC:
00013346 3140 0014                  		move.w	d0,$14(a0)
0001334A 6000                       		bra.s	loc_12FEE
0001334C                            ; ===========================================================================
0001334C                            
0001334C                            loc_12FE2:
0001334C D045                       		add.w	d5,d0
0001334E 6400                       		bcc.s	loc_12FEA
00013350 303C 0000                  		move.w	#0,d0
00013354                            
00013354                            loc_12FEA:
00013354 3140 0014                  		move.w	d0,$14(a0)
00013358                            
00013358                            loc_12FEE:
00013358 1028 0026                  		move.b	$26(a0),d0
0001335C 4EB9 0000 2BFA             		jsr	(CalcSine).l
00013362 C3E8 0014                  		muls.w	$14(a0),d1
00013366 E081                       		asr.l	#8,d1
00013368 3141 0010                  		move.w	d1,$10(a0)
0001336C C1E8 0014                  		muls.w	$14(a0),d0
00013370 E080                       		asr.l	#8,d0
00013372 3140 0012                  		move.w	d0,$12(a0)
00013376                            
00013376                            loc_1300C:
00013376 1028 0026                  		move.b	$26(a0),d0
0001337A 0600 0040                  		addi.b	#$40,d0
0001337E 6B00                       		bmi.s	locret_1307C
00013380 123C 0040                  		move.b	#$40,d1
00013384 4A68 0014                  		tst.w	$14(a0)
00013388 6700                       		beq.s	locret_1307C
0001338A 6B00                       		bmi.s	loc_13024
0001338C 4441                       		neg.w	d1
0001338E                            
0001338E                            loc_13024:
0001338E 1028 0026                  		move.b	$26(a0),d0
00013392 D001                       		add.b	d1,d0
00013394 3F00                       		move.w	d0,-(sp)
00013396 6100 0000                  		bsr.w	Sonic_WalkSpeed
0001339A 301F                       		move.w	(sp)+,d0
0001339C 4A41                       		tst.w	d1
0001339E 6A00                       		bpl.s	locret_1307C
000133A0 E141                       		asl.w	#8,d1
000133A2 0600 0020                  		addi.b	#$20,d0
000133A6 0200 00C0                  		andi.b	#$C0,d0
000133AA 6700                       		beq.s	loc_13078
000133AC 0C00 0040                  		cmpi.b	#$40,d0
000133B0 6700                       		beq.s	loc_13066
000133B2 0C00 0080                  		cmpi.b	#$80,d0
000133B6 6700                       		beq.s	loc_13060
000133B8 D368 0010                  		add.w	d1,$10(a0)
000133BC 08E8 0005 0022             		bset	#5,$22(a0)
000133C2 317C 0000 0014             		move.w	#0,$14(a0)
000133C8 4E75                       		rts	
000133CA                            ; ===========================================================================
000133CA                            
000133CA                            loc_13060:
000133CA 9368 0012                  		sub.w	d1,$12(a0)
000133CE 4E75                       		rts	
000133D0                            ; ===========================================================================
000133D0                            
000133D0                            loc_13066:
000133D0 9368 0010                  		sub.w	d1,$10(a0)
000133D4 08E8 0005 0022             		bset	#5,$22(a0)
000133DA 317C 0000 0014             		move.w	#0,$14(a0)
000133E0 4E75                       		rts	
000133E2                            ; ===========================================================================
000133E2                            
000133E2                            loc_13078:
000133E2 D368 0012                  		add.w	d1,$12(a0)
000133E6                            
000133E6                            locret_1307C:
000133E6 4E75                       		rts	
000133E8                            ; End of function Sonic_Move
000133E8                            
000133E8                            
000133E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000133E8                            
000133E8                            
000133E8                            Sonic_MoveLeft:				; XREF: Sonic_Move
000133E8 3028 0014                  		move.w	$14(a0),d0
000133EC 6700                       		beq.s	loc_13086
000133EE 6A00                       		bpl.s	loc_130B2
000133F0                            
000133F0                            loc_13086:
000133F0 08E8 0000 0022             		bset	#0,$22(a0)
000133F6 6600                       		bne.s	loc_1309A
000133F8 08A8 0005 0022             		bclr	#5,$22(a0)
000133FE 117C 0001 001D             		move.b	#1,$1D(a0)
00013404                            
00013404                            loc_1309A:
00013404 9045                       		sub.w	d5,d0
00013406 3206                       		move.w	d6,d1
00013408 4441                       		neg.w	d1
0001340A B041                       		cmp.w	d1,d0
0001340C 6E00                       		bgt.s	loc_130A6
0001340E 3001                       		move.w	d1,d0
00013410                            
00013410                            loc_130A6:
00013410 3140 0014                  		move.w	d0,$14(a0)
00013414 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001341A 4E75                       		rts	
0001341C                            ; ===========================================================================
0001341C                            
0001341C                            loc_130B2:				; XREF: Sonic_MoveLeft
0001341C 9044                       		sub.w	d4,d0
0001341E 6400                       		bcc.s	loc_130BA
00013420 303C FF80                  		move.w	#-$80,d0
00013424                            
00013424                            loc_130BA:
00013424 3140 0014                  		move.w	d0,$14(a0)
00013428 1028 0026                  		move.b	$26(a0),d0
0001342C 0600 0020                  		addi.b	#$20,d0
00013430 0200 00C0                  		andi.b	#$C0,d0
00013434 6600                       		bne.s	locret_130E8
00013436 0C40 0400                  		cmpi.w	#$400,d0
0001343A 6D00                       		blt.s	locret_130E8
0001343C 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013442 08A8 0000 0022             		bclr	#0,$22(a0)
00013448 303C 00A4                  		move.w	#$A4,d0
0001344C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
00013452                            
00013452                            locret_130E8:
00013452 4E75                       		rts	
00013454                            ; End of function Sonic_MoveLeft
00013454                            
00013454                            
00013454                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013454                            
00013454                            
00013454                            Sonic_MoveRight:			; XREF: Sonic_Move
00013454 3028 0014                  		move.w	$14(a0),d0
00013458 6B00                       		bmi.s	loc_13118
0001345A 08A8 0000 0022             		bclr	#0,$22(a0)
00013460 6700                       		beq.s	loc_13104
00013462 08A8 0005 0022             		bclr	#5,$22(a0)
00013468 117C 0001 001D             		move.b	#1,$1D(a0)
0001346E                            
0001346E                            loc_13104:
0001346E D045                       		add.w	d5,d0
00013470 B046                       		cmp.w	d6,d0
00013472 6D00                       		blt.s	loc_1310C
00013474 3006                       		move.w	d6,d0
00013476                            
00013476                            loc_1310C:
00013476 3140 0014                  		move.w	d0,$14(a0)
0001347A 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013480 4E75                       		rts	
00013482                            ; ===========================================================================
00013482                            
00013482                            loc_13118:				; XREF: Sonic_MoveRight
00013482 D044                       		add.w	d4,d0
00013484 6400                       		bcc.s	loc_13120
00013486 303C 0080                  		move.w	#$80,d0
0001348A                            
0001348A                            loc_13120:
0001348A 3140 0014                  		move.w	d0,$14(a0)
0001348E 1028 0026                  		move.b	$26(a0),d0
00013492 0600 0020                  		addi.b	#$20,d0
00013496 0200 00C0                  		andi.b	#$C0,d0
0001349A 6600                       		bne.s	locret_1314E
0001349C 0C40 FC00                  		cmpi.w	#-$400,d0
000134A0 6E00                       		bgt.s	locret_1314E
000134A2 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000134A8 08E8 0000 0022             		bset	#0,$22(a0)
000134AE 303C 00A4                  		move.w	#$A4,d0
000134B2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
000134B8                            
000134B8                            locret_1314E:
000134B8 4E75                       		rts	
000134BA                            ; End of function Sonic_MoveRight
000134BA                            
000134BA                            ; ---------------------------------------------------------------------------
000134BA                            ; Subroutine to	change Sonic's speed as he rolls
000134BA                            ; ---------------------------------------------------------------------------
000134BA                            
000134BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134BA                            
000134BA                            
000134BA                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000134BA 3C38 F760                  		move.w	($FFFFF760).w,d6
000134BE E346                       		asl.w	#1,d6
000134C0 3A38 F762                  		move.w	($FFFFF762).w,d5
000134C4 E245                       		asr.w	#1,d5
000134C6 3838 F764                  		move.w	($FFFFF764).w,d4
000134CA E444                       		asr.w	#2,d4
000134CC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000134D0 6600 0000                  		bne.w	loc_131CC
000134D4 4A68 003E                  		tst.w	$3E(a0)
000134D8 6600                       		bne.s	loc_13188
000134DA 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000134E0 6700                       		beq.s	loc_1317C	; if not, branch
000134E2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000134E8 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
000134EA 6100 0000                  		bsr.w	Sonic_RollLeft
000134EE                            
000134EE                            loc_1317C:
000134EE 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000134F4 6700                       		beq.s	loc_13188	; if not, branch
000134F6 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000134FC 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
000134FE 6100 0000                  		bsr.w	Sonic_RollLeft
00013502 6000                       		bra.s	loc_13188
00013504                            
00013504                            SonicRS_RollRight:
00013504 6100 0000                  		bsr.w	Sonic_RollRight
00013508                            
00013508                            loc_13188:
00013508 3028 0014                  		move.w	$14(a0),d0
0001350C 6700                       		beq.s	loc_131AA
0001350E 6B00                       		bmi.s	loc_1319E
00013510 9045                       		sub.w	d5,d0
00013512 6400                       		bcc.s	loc_13198
00013514 303C 0000                  		move.w	#0,d0
00013518                            
00013518                            loc_13198:
00013518 3140 0014                  		move.w	d0,$14(a0)
0001351C 6000                       		bra.s	loc_131AA
0001351E                            ; ===========================================================================
0001351E                            
0001351E                            loc_1319E:				; XREF: Sonic_RollSpeed
0001351E D045                       		add.w	d5,d0
00013520 6400                       		bcc.s	loc_131A6
00013522 303C 0000                  		move.w	#0,d0
00013526                            
00013526                            loc_131A6:
00013526 3140 0014                  		move.w	d0,$14(a0)
0001352A                            
0001352A                            loc_131AA:
0001352A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001352E 6600                       		bne.s	loc_131CC	; if yes, branch
00013530 08A8 0002 0022             		bclr	#2,$22(a0)
00013536 117C 0013 0016             		move.b	#$13,$16(a0)
0001353C 117C 0009 0017             		move.b	#9,$17(a0)
00013542 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013548 5B68 000C                  		subq.w	#5,$C(a0)
0001354C                            
0001354C                            loc_131CC:
0001354C 1028 0026                  		move.b	$26(a0),d0
00013550 4EB9 0000 2BFA             		jsr	(CalcSine).l
00013556 C1E8 0014                  		muls.w	$14(a0),d0
0001355A E080                       		asr.l	#8,d0
0001355C 3140 0012                  		move.w	d0,$12(a0)
00013560 C3E8 0014                  		muls.w	$14(a0),d1
00013564 E081                       		asr.l	#8,d1
00013566 0C41 1000                  		cmpi.w	#$1000,d1
0001356A 6F00                       		ble.s	loc_131F0
0001356C 323C 1000                  		move.w	#$1000,d1
00013570                            
00013570                            loc_131F0:
00013570 0C41 F000                  		cmpi.w	#-$1000,d1
00013574 6C00                       		bge.s	loc_131FA
00013576 323C F000                  		move.w	#-$1000,d1
0001357A                            
0001357A                            loc_131FA:
0001357A 3141 0010                  		move.w	d1,$10(a0)
0001357E 6000 FDF6                  		bra.w	loc_1300C
00013582                            ; End of function Sonic_RollSpeed
00013582                            
00013582                            
00013582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013582                            
00013582                            
00013582                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013582 3028 0014                  		move.w	$14(a0),d0
00013586 6700                       		beq.s	loc_1320A
00013588 6A00                       		bpl.s	loc_13218
0001358A                            
0001358A                            loc_1320A:
0001358A 08E8 0000 0022             		bset	#0,$22(a0)
00013590 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013596 4E75                       		rts	
00013598                            ; ===========================================================================
00013598                            
00013598                            loc_13218:
00013598 9044                       		sub.w	d4,d0
0001359A 6400                       		bcc.s	loc_13220
0001359C 303C FF80                  		move.w	#-$80,d0
000135A0                            
000135A0                            loc_13220:
000135A0 3140 0014                  		move.w	d0,$14(a0)
000135A4 4E75                       		rts	
000135A6                            ; End of function Sonic_RollLeft
000135A6                            
000135A6                            
000135A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135A6                            
000135A6                            
000135A6                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000135A6 3028 0014                  		move.w	$14(a0),d0
000135AA 6B00                       		bmi.s	loc_1323A
000135AC 08A8 0000 0022             		bclr	#0,$22(a0)
000135B2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000135B8 4E75                       		rts	
000135BA                            ; ===========================================================================
000135BA                            
000135BA                            loc_1323A:
000135BA D044                       		add.w	d4,d0
000135BC 6400                       		bcc.s	loc_13242
000135BE 303C 0080                  		move.w	#$80,d0
000135C2                            
000135C2                            loc_13242:
000135C2 3140 0014                  		move.w	d0,$14(a0)
000135C6 4E75                       		rts	
000135C8                            ; End of function Sonic_RollRight
000135C8                            
000135C8                            ; ---------------------------------------------------------------------------
000135C8                            ; Subroutine to	change Sonic's direction while jumping
000135C8                            ; ---------------------------------------------------------------------------
000135C8                            
000135C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135C8                            
000135C8                            
000135C8                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
000135C8 3C38 F760                  		move.w	($FFFFF760).w,d6
000135CC 3A38 F762                  		move.w	($FFFFF762).w,d5
000135D0 E345                       		asl.w	#1,d5
000135D2 0828 0004 0022             		btst	#4,$22(a0)
000135D8 6600                       		bne.s	Obj01_ResetScr2
000135DA 3028 0010                  		move.w	$10(a0),d0
000135DE 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000135E4 6700                       		beq.s	loc_13278	; if not, branch
000135E6 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000135EC 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
000135EE 6100 0000                  		bsr.w	SonicCJD_JumpLeft
000135F2 6E00                       		bgt.s	loc_13278
000135F4 3001                       		move.w	d1,d0
000135F6                            
000135F6                            loc_13278:
000135F6 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000135FC 6700                       		beq.s	Obj01_JumpMove	; if not, branch
000135FE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013604 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013606 6100 0000                  		bsr.w	SonicCJD_JumpLeft
0001360A 6E00                       		bgt.s	Obj01_JumpMove
0001360C 3001                       		move.w	d1,d0
0001360E 6000                       		bra.s	Obj01_JumpMove
00013610                            
00013610                            SonicCJD_JumpLeft:
00013610 08E8 0000 0022             		bset	#0,$22(a0)
00013616 9045                       		sub.w	d5,d0
00013618 3206                       		move.w	d6,d1
0001361A 4441                       		neg.w	d1
0001361C B041                       		cmp.w	d1,d0
0001361E                            		; bgt.s	loc_13278
0001361E                            		; move.w	d1,d0
0001361E 4E75                       		rts
00013620                            
00013620                            SonicCJD_JumpRight:
00013620 08A8 0000 0022             		bclr	#0,$22(a0)
00013626 D045                       		add.w	d5,d0
00013628 B046                       		cmp.w	d6,d0
0001362A 6D00                       		blt.s	Obj01_JumpMove
0001362C 3006                       		move.w	d6,d0
0001362E                            
0001362E                            Obj01_JumpMove:
0001362E 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013632                            
00013632                            Obj01_ResetScr2:
00013632 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013638 6700                       		beq.s	loc_132A4	; if yes, branch
0001363A 6400                       		bcc.s	loc_132A0
0001363C 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013640                            
00013640                            loc_132A0:
00013640 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013644                            
00013644                            loc_132A4:
00013644 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
0001364A 6500                       		bcs.s	locret_132D2	; if yes, branch
0001364C 3028 0010                  		move.w	$10(a0),d0
00013650 3200                       		move.w	d0,d1
00013652 EA41                       		asr.w	#5,d1
00013654 6700                       		beq.s	locret_132D2
00013656 6B00                       		bmi.s	loc_132C6
00013658 9041                       		sub.w	d1,d0
0001365A 6400                       		bcc.s	loc_132C0
0001365C 303C 0000                  		move.w	#0,d0
00013660                            
00013660                            loc_132C0:
00013660 3140 0010                  		move.w	d0,$10(a0)
00013664 4E75                       		rts	
00013666                            ; ===========================================================================
00013666                            
00013666                            loc_132C6:
00013666 9041                       		sub.w	d1,d0
00013668 6500                       		bcs.s	loc_132CE
0001366A 303C 0000                  		move.w	#0,d0
0001366E                            
0001366E                            loc_132CE:
0001366E 3140 0010                  		move.w	d0,$10(a0)
00013672                            
00013672                            locret_132D2:
00013672 4E75                       		rts	
00013674                            ; End of function Sonic_ChgJumpDir
00013674                            
00013674                            ; ===========================================================================
00013674                            ; ---------------------------------------------------------------------------
00013674                            ; Unused subroutine to squash Sonic
00013674                            ; ---------------------------------------------------------------------------
00013674 1028 0026                  		move.b	$26(a0),d0
00013678 0600 0020                  		addi.b	#$20,d0
0001367C 0200 00C0                  		andi.b	#$C0,d0
00013680 6600                       		bne.s	locret_13302
00013682 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013686 4A41                       		tst.w	d1
00013688 6A00                       		bpl.s	locret_13302
0001368A 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013690 317C 0000 0010             		move.w	#0,$10(a0)
00013696 317C 0000 0012             		move.w	#0,$12(a0)
0001369C 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000136A2                            
000136A2                            locret_13302:
000136A2 4E75                       		rts	
000136A4                            ; ---------------------------------------------------------------------------
000136A4                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000136A4                            ; ---------------------------------------------------------------------------
000136A4                            
000136A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136A4                            
000136A4                            
000136A4                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000136A4 2228 0008                  		move.l	8(a0),d1
000136A8 3028 0010                  		move.w	$10(a0),d0
000136AC 48C0                       		ext.l	d0
000136AE E180                       		asl.l	#8,d0
000136B0 D280                       		add.l	d0,d1
000136B2 4841                       		swap	d1
000136B4 3038 F728                  		move.w	($FFFFF728).w,d0
000136B8 0640 0010                  		addi.w	#$10,d0
000136BC B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000136BE 6200                       		bhi.s	Boundary_Sides	; if yes, branch
000136C0 3038 F72A                  		move.w	($FFFFF72A).w,d0
000136C4 0640 0128                  		addi.w	#$128,d0
000136C8 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000136CC 6600                       		bne.s	loc_13332
000136CE 0640 0040                  		addi.w	#$40,d0
000136D2                            
000136D2                            loc_13332:
000136D2 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000136D4 6300                       		bls.s	Boundary_Sides	; if yes, branch
000136D6                            
000136D6                            loc_13336:
000136D6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000136DA 0640 00E0                  		addi.w	#$E0,d0
000136DE B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
000136E2 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
000136E4 4E75                       		rts	
000136E6                            ; ===========================================================================
000136E6                            
000136E6                            Boundary_Bottom:
000136E6 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
000136EC 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
000136F0 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
000136F6 6500 0000                  		bcs.w	KillSonic
000136FA 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
000136FE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013704 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
0001370A 4E75                       		rts	
0001370C                            ; ===========================================================================
0001370C                            
0001370C                            Boundary_Sides:
0001370C 3140 0008                  		move.w	d0,8(a0)
00013710 317C 0000 000A             		move.w	#0,$A(a0)
00013716 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
0001371C 317C 0000 0014             		move.w	#0,$14(a0)
00013722 60B2                       		bra.s	loc_13336
00013724                            ; End of function Sonic_LevelBound
00013724                            
00013724                            ; ---------------------------------------------------------------------------
00013724                            ; Subroutine allowing Sonic to roll when he's moving
00013724                            ; ---------------------------------------------------------------------------
00013724                            
00013724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013724                            
00013724                            
00013724                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013724 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013728 6600                       		bne.s	Obj01_NoRoll
0001372A 3028 0014                  		move.w	$14(a0),d0
0001372E 6A00                       		bpl.s	loc_13392
00013730 4440                       		neg.w	d0
00013732                            
00013732                            loc_13392:
00013732 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013736 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013738 1038 F602                  		move.b	($FFFFF602).w,d0
0001373C 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013740 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013742 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013748 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
0001374A                            
0001374A                            Obj01_NoRoll:
0001374A 4E75                       		rts	
0001374C                            ; ===========================================================================
0001374C                            
0001374C                            Obj01_ChkRoll:
0001374C 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013752 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013754 4E75                       		rts	
00013756                            ; ===========================================================================
00013756                            
00013756                            Obj01_DoRoll:
00013756 08E8 0002 0022             		bset	#2,$22(a0)
0001375C 117C 000E 0016             		move.b	#$E,$16(a0)
00013762 117C 0007 0017             		move.b	#7,$17(a0)
00013768 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
0001376E 5A68 000C                  		addq.w	#5,$C(a0)
00013772 303C 00BE                  		move.w	#$BE,d0
00013776 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rolling sound
0001377C 4A68 0014                  		tst.w	$14(a0)
00013780 6600                       		bne.s	locret_133E8
00013782 317C 0200 0014             		move.w	#$200,$14(a0)
00013788                            
00013788                            locret_133E8:
00013788 4E75                       		rts	
0001378A                            ; End of function Sonic_Roll
0001378A                            
0001378A                            ; ---------------------------------------------------------------------------
0001378A                            ; Subroutine allowing Sonic to jump
0001378A                            ; ---------------------------------------------------------------------------
0001378A                            
0001378A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001378A                            
0001378A                            
0001378A                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001378A 1038 F603                  		move.b	($FFFFF603).w,d0
0001378E 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013792 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013796 7000                       		moveq	#0,d0
00013798 1028 0026                  		move.b	$26(a0),d0
0001379C 0600 0080                  		addi.b	#$80,d0
000137A0 6100 0000                  		bsr.w	sub_14D48
000137A4 0C41 0006                  		cmpi.w	#6,d1
000137A8 6D00 0000                  		blt.w	locret_1348E
000137AC 343C 0680                  		move.w	#$680,d2
000137B0 0828 0006 0022             		btst	#6,$22(a0)
000137B6 6700                       		beq.s	loc_1341C
000137B8 343C 0380                  		move.w	#$380,d2
000137BC                            
000137BC                            loc_1341C:
000137BC 7000                       		moveq	#0,d0
000137BE 1028 0026                  		move.b	$26(a0),d0
000137C2 0400 0040                  		subi.b	#$40,d0
000137C6 4EB9 0000 2BFA             		jsr	(CalcSine).l
000137CC C3C2                       		muls.w	d2,d1
000137CE E081                       		asr.l	#8,d1
000137D0 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
000137D4 C1C2                       		muls.w	d2,d0
000137D6 E080                       		asr.l	#8,d0
000137D8 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
000137DC 08E8 0001 0022             		bset	#1,$22(a0)
000137E2 08A8 0005 0022             		bclr	#5,$22(a0)
000137E8 588F                       		addq.l	#4,sp
000137EA 117C 0001 003C             		move.b	#1,$3C(a0)
000137F0 4228 0038                  		clr.b	$38(a0)
000137F4 303C 00A0                  		move.w	#$A0,d0
000137F8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
000137FE 117C 0013 0016             		move.b	#$13,$16(a0)
00013804 117C 0009 0017             		move.b	#9,$17(a0)
0001380A 0828 0002 0022             		btst	#2,$22(a0)
00013810 6600                       		bne.s	loc_13490
00013812 117C 000E 0016             		move.b	#$E,$16(a0)
00013818 117C 0007 0017             		move.b	#7,$17(a0)
0001381E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013824 08E8 0002 0022             		bset	#2,$22(a0)
0001382A 5A68 000C                  		addq.w	#5,$C(a0)
0001382E                            
0001382E                            locret_1348E:
0001382E 4E75                       		rts	
00013830                            ; ===========================================================================
00013830                            
00013830                            loc_13490:
00013830 08E8 0004 0022             		bset	#4,$22(a0)
00013836 4E75                       		rts	
00013838                            ; End of function Sonic_Jump
00013838                            
00013838                            
00013838                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013838                            
00013838                            
00013838                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013838 4A28 003C                  		tst.b	$3C(a0)
0001383C 6700                       		beq.s	loc_134C4
0001383E 323C FC00                  		move.w	#-$400,d1
00013842 0828 0006 0022             		btst	#6,$22(a0)
00013848 6700                       		beq.s	loc_134AE
0001384A 323C FE00                  		move.w	#-$200,d1
0001384E                            
0001384E                            loc_134AE:
0001384E B268 0012                  		cmp.w	$12(a0),d1
00013852 6F00                       		ble.s	locret_134C2
00013854 1038 F602                  		move.b	($FFFFF602).w,d0
00013858 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001385C 6600                       		bne.s	locret_134C2	; if yes, branch
0001385E 3141 0012                  		move.w	d1,$12(a0)
00013862                            
00013862                            locret_134C2:
00013862 4E75                       		rts	
00013864                            ; ===========================================================================
00013864                            
00013864                            loc_134C4:
00013864 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
0001386A 6C00                       		bge.s	locret_134D2
0001386C 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013872                            
00013872                            locret_134D2:
00013872 4E75                       		rts	
00013874                            ; End of function Sonic_JumpHeight
00013874                            
00013874                            ; ---------------------------------------------------------------------------
00013874                            ; Subroutine to	slow Sonic walking up a	slope
00013874                            ; ---------------------------------------------------------------------------
00013874                            
00013874                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013874                            
00013874                            
00013874                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013874 1028 0026                  		move.b	$26(a0),d0
00013878 0600 0060                  		addi.b	#$60,d0
0001387C 0C00 00C0                  		cmpi.b	#$C0,d0
00013880 6400                       		bcc.s	locret_13508
00013882 1028 0026                  		move.b	$26(a0),d0
00013886 4EB9 0000 2BFA             		jsr	(CalcSine).l
0001388C C1FC 0020                  		muls.w	#$20,d0
00013890 E080                       		asr.l	#8,d0
00013892 4A68 0014                  		tst.w	$14(a0)
00013896 6700                       		beq.s	locret_13508
00013898 6B00                       		bmi.s	loc_13504
0001389A 4A40                       		tst.w	d0
0001389C 6700                       		beq.s	locret_13502
0001389E D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
000138A2                            
000138A2                            locret_13502:
000138A2 4E75                       		rts	
000138A4                            ; ===========================================================================
000138A4                            
000138A4                            loc_13504:
000138A4 D168 0014                  		add.w	d0,$14(a0)
000138A8                            
000138A8                            locret_13508:
000138A8 4E75                       		rts	
000138AA                            ; End of function Sonic_SlopeResist
000138AA                            
000138AA                            ; ---------------------------------------------------------------------------
000138AA                            ; Subroutine to	push Sonic down	a slope	while he's rolling
000138AA                            ; ---------------------------------------------------------------------------
000138AA                            
000138AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138AA                            
000138AA                            
000138AA                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
000138AA 1028 0026                  		move.b	$26(a0),d0
000138AE 0600 0060                  		addi.b	#$60,d0
000138B2 0C00 00C0                  		cmpi.b	#-$40,d0
000138B6 6400                       		bcc.s	locret_13544
000138B8 1028 0026                  		move.b	$26(a0),d0
000138BC 4EB9 0000 2BFA             		jsr	(CalcSine).l
000138C2 C1FC 0050                  		muls.w	#$50,d0
000138C6 E080                       		asr.l	#8,d0
000138C8 4A68 0014                  		tst.w	$14(a0)
000138CC 6B00                       		bmi.s	loc_1353A
000138CE 4A40                       		tst.w	d0
000138D0 6A00                       		bpl.s	loc_13534
000138D2 E480                       		asr.l	#2,d0
000138D4                            
000138D4                            loc_13534:
000138D4 D168 0014                  		add.w	d0,$14(a0)
000138D8 4E75                       		rts	
000138DA                            ; ===========================================================================
000138DA                            
000138DA                            loc_1353A:
000138DA 4A40                       		tst.w	d0
000138DC 6B00                       		bmi.s	loc_13540
000138DE E480                       		asr.l	#2,d0
000138E0                            
000138E0                            loc_13540:
000138E0 D168 0014                  		add.w	d0,$14(a0)
000138E4                            
000138E4                            locret_13544:
000138E4 4E75                       		rts	
000138E6                            ; End of function Sonic_RollRepel
000138E6                            
000138E6                            ; ---------------------------------------------------------------------------
000138E6                            ; Subroutine to	push Sonic down	a slope
000138E6                            ; ---------------------------------------------------------------------------
000138E6                            
000138E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138E6                            
000138E6                            
000138E6                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
000138E6 4E71                       		nop	
000138E8 4A28 0038                  		tst.b	$38(a0)
000138EC 6600                       		bne.s	locret_13580
000138EE 4A68 003E                  		tst.w	$3E(a0)
000138F2 6600                       		bne.s	loc_13582
000138F4 1028 0026                  		move.b	$26(a0),d0
000138F8 0600 0020                  		addi.b	#$20,d0
000138FC 0200 00C0                  		andi.b	#$C0,d0
00013900 6700                       		beq.s	locret_13580
00013902 3028 0014                  		move.w	$14(a0),d0
00013906 6A00                       		bpl.s	loc_1356A
00013908 4440                       		neg.w	d0
0001390A                            
0001390A                            loc_1356A:
0001390A 0C40 0280                  		cmpi.w	#$280,d0
0001390E 6400                       		bcc.s	locret_13580
00013910 4268 0014                  		clr.w	$14(a0)
00013914 08E8 0001 0022             		bset	#1,$22(a0)
0001391A 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013920                            
00013920                            locret_13580:
00013920 4E75                       		rts	
00013922                            ; ===========================================================================
00013922                            
00013922                            loc_13582:
00013922 5368 003E                  		subq.w	#1,$3E(a0)
00013926 4E75                       		rts	
00013928                            ; End of function Sonic_SlopeRepel
00013928                            
00013928                            ; ---------------------------------------------------------------------------
00013928                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013928                            ; ---------------------------------------------------------------------------
00013928                            
00013928                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013928                            
00013928                            
00013928                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013928 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001392C 6700                       		beq.s	locret_135A2	; if already 0,	branch
0001392E 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013930                            
00013930 5400                       		addq.b	#2,d0		; increase angle
00013932 6400                       		bcc.s	loc_13596
00013934 7000                       		moveq	#0,d0
00013936                            
00013936                            loc_13596:
00013936 6000                       		bra.s	loc_1359E
00013938                            ; ===========================================================================
00013938                            
00013938                            loc_13598:
00013938 5500                       		subq.b	#2,d0		; decrease angle
0001393A 6400                       		bcc.s	loc_1359E
0001393C 7000                       		moveq	#0,d0
0001393E                            
0001393E                            loc_1359E:
0001393E 1140 0026                  		move.b	d0,$26(a0)
00013942                            
00013942                            locret_135A2:
00013942 4E75                       		rts	
00013944                            ; End of function Sonic_JumpAngle
00013944                            
00013944                            ; ---------------------------------------------------------------------------
00013944                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013944                            ; ---------------------------------------------------------------------------
00013944                            
00013944                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013944                            
00013944                            
00013944                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013944 3228 0010                  		move.w	$10(a0),d1
00013948 3428 0012                  		move.w	$12(a0),d2
0001394C 4EB9 0000 2EC8             		jsr	(CalcAngle).l
00013952 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013956 0400 0020                  		subi.b	#$20,d0
0001395A 11C0 FFED                  		move.b	d0,($FFFFFFED).w
0001395E 0200 00C0                  		andi.b	#$C0,d0
00013962 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013966 0C00 0040                  		cmpi.b	#$40,d0
0001396A 6700 0000                  		beq.w	loc_13680
0001396E 0C00 0080                  		cmpi.b	#$80,d0
00013972 6700 0000                  		beq.w	loc_136E2
00013976 0C00 00C0                  		cmpi.b	#-$40,d0
0001397A 6700 0000                  		beq.w	loc_1373E
0001397E 6100 0000                  		bsr.w	Sonic_HitWall
00013982 4A41                       		tst.w	d1
00013984 6A00                       		bpl.s	loc_135F0
00013986 9368 0008                  		sub.w	d1,8(a0)
0001398A 317C 0000 0010             		move.w	#0,$10(a0)
00013990                            
00013990                            loc_135F0:
00013990 6100 0000                  		bsr.w	sub_14EB4
00013994 4A41                       		tst.w	d1
00013996 6A00                       		bpl.s	loc_13602
00013998 D368 0008                  		add.w	d1,8(a0)
0001399C 317C 0000 0010             		move.w	#0,$10(a0)
000139A2                            
000139A2                            loc_13602:
000139A2 6100 0000                  		bsr.w	Sonic_HitFloor
000139A6 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000139AA 4A41                       		tst.w	d1
000139AC 6A00                       		bpl.s	locret_1367E
000139AE 1428 0012                  		move.b	$12(a0),d2
000139B2 5002                       		addq.b	#8,d2
000139B4 4402                       		neg.b	d2
000139B6 B202                       		cmp.b	d2,d1
000139B8 6C00                       		bge.s	loc_1361E
000139BA B002                       		cmp.b	d2,d0
000139BC 6D00                       		blt.s	locret_1367E
000139BE                            
000139BE                            loc_1361E:
000139BE D368 000C                  		add.w	d1,$C(a0)
000139C2 1143 0026                  		move.b	d3,$26(a0)
000139C6 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000139CA 117C 0000 001C             		move.b	#0,$1C(a0)
000139D0 1003                       		move.b	d3,d0
000139D2 0600 0020                  		addi.b	#$20,d0
000139D6 0200 0040                  		andi.b	#$40,d0
000139DA 6600                       		bne.s	loc_1365C
000139DC 1003                       		move.b	d3,d0
000139DE 0600 0010                  		addi.b	#$10,d0
000139E2 0200 0020                  		andi.b	#$20,d0
000139E6 6700                       		beq.s	loc_1364E
000139E8 E0E8 0012                  		asr	$12(a0)
000139EC 6000                       		bra.s	loc_13670
000139EE                            ; ===========================================================================
000139EE                            
000139EE                            loc_1364E:
000139EE 317C 0000 0012             		move.w	#0,$12(a0)
000139F4 3168 0010 0014             		move.w	$10(a0),$14(a0)
000139FA 4E75                       		rts	
000139FC                            ; ===========================================================================
000139FC                            
000139FC                            loc_1365C:
000139FC 317C 0000 0010             		move.w	#0,$10(a0)
00013A02 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013A08 6F00                       		ble.s	loc_13670
00013A0A 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013A10                            
00013A10                            loc_13670:
00013A10 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013A16 4A03                       		tst.b	d3
00013A18 6A00                       		bpl.s	locret_1367E
00013A1A 4468 0014                  		neg.w	$14(a0)
00013A1E                            
00013A1E                            locret_1367E:
00013A1E 4E75                       		rts	
00013A20                            ; ===========================================================================
00013A20                            
00013A20                            loc_13680:
00013A20 6100 0000                  		bsr.w	Sonic_HitWall
00013A24 4A41                       		tst.w	d1
00013A26 6A00                       		bpl.s	loc_1369A
00013A28 9368 0008                  		sub.w	d1,8(a0)
00013A2C 317C 0000 0010             		move.w	#0,$10(a0)
00013A32 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013A38 4E75                       		rts	
00013A3A                            ; ===========================================================================
00013A3A                            
00013A3A                            loc_1369A:
00013A3A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013A3E 4A41                       		tst.w	d1
00013A40 6A00                       		bpl.s	loc_136B4
00013A42 9368 000C                  		sub.w	d1,$C(a0)
00013A46 4A68 0012                  		tst.w	$12(a0)
00013A4A 6A00                       		bpl.s	locret_136B2
00013A4C 317C 0000 0012             		move.w	#0,$12(a0)
00013A52                            
00013A52                            locret_136B2:
00013A52 4E75                       		rts	
00013A54                            ; ===========================================================================
00013A54                            
00013A54                            loc_136B4:
00013A54 4A68 0012                  		tst.w	$12(a0)
00013A58 6B00                       		bmi.s	locret_136E0
00013A5A 6100 0000                  		bsr.w	Sonic_HitFloor
00013A5E 4A41                       		tst.w	d1
00013A60 6A00                       		bpl.s	locret_136E0
00013A62 D368 000C                  		add.w	d1,$C(a0)
00013A66 1143 0026                  		move.b	d3,$26(a0)
00013A6A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013A6E 117C 0000 001C             		move.b	#0,$1C(a0)
00013A74 317C 0000 0012             		move.w	#0,$12(a0)
00013A7A 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013A80                            
00013A80                            locret_136E0:
00013A80 4E75                       		rts	
00013A82                            ; ===========================================================================
00013A82                            
00013A82                            loc_136E2:
00013A82 6100 0000                  		bsr.w	Sonic_HitWall
00013A86 4A41                       		tst.w	d1
00013A88 6A00                       		bpl.s	loc_136F4
00013A8A 9368 0008                  		sub.w	d1,8(a0)
00013A8E 317C 0000 0010             		move.w	#0,$10(a0)
00013A94                            
00013A94                            loc_136F4:
00013A94 6100 0000                  		bsr.w	sub_14EB4
00013A98 4A41                       		tst.w	d1
00013A9A 6A00                       		bpl.s	loc_13706
00013A9C D368 0008                  		add.w	d1,8(a0)
00013AA0 317C 0000 0010             		move.w	#0,$10(a0)
00013AA6                            
00013AA6                            loc_13706:
00013AA6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013AAA 4A41                       		tst.w	d1
00013AAC 6A00                       		bpl.s	locret_1373C
00013AAE 9368 000C                  		sub.w	d1,$C(a0)
00013AB2 1003                       		move.b	d3,d0
00013AB4 0600 0020                  		addi.b	#$20,d0
00013AB8 0200 0040                  		andi.b	#$40,d0
00013ABC 6600                       		bne.s	loc_13726
00013ABE 317C 0000 0012             		move.w	#0,$12(a0)
00013AC4 4E75                       		rts	
00013AC6                            ; ===========================================================================
00013AC6                            
00013AC6                            loc_13726:
00013AC6 1143 0026                  		move.b	d3,$26(a0)
00013ACA 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013ACE 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013AD4 4A03                       		tst.b	d3
00013AD6 6A00                       		bpl.s	locret_1373C
00013AD8 4468 0014                  		neg.w	$14(a0)
00013ADC                            
00013ADC                            locret_1373C:
00013ADC 4E75                       		rts	
00013ADE                            ; ===========================================================================
00013ADE                            
00013ADE                            loc_1373E:
00013ADE 6100 0000                  		bsr.w	sub_14EB4
00013AE2 4A41                       		tst.w	d1
00013AE4 6A00                       		bpl.s	loc_13758
00013AE6 D368 0008                  		add.w	d1,8(a0)
00013AEA 317C 0000 0010             		move.w	#0,$10(a0)
00013AF0 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013AF6 4E75                       		rts	
00013AF8                            ; ===========================================================================
00013AF8                            
00013AF8                            loc_13758:
00013AF8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013AFC 4A41                       		tst.w	d1
00013AFE 6A00                       		bpl.s	loc_13772
00013B00 9368 000C                  		sub.w	d1,$C(a0)
00013B04 4A68 0012                  		tst.w	$12(a0)
00013B08 6A00                       		bpl.s	locret_13770
00013B0A 317C 0000 0012             		move.w	#0,$12(a0)
00013B10                            
00013B10                            locret_13770:
00013B10 4E75                       		rts	
00013B12                            ; ===========================================================================
00013B12                            
00013B12                            loc_13772:
00013B12 4A68 0012                  		tst.w	$12(a0)
00013B16 6B00                       		bmi.s	locret_1379E
00013B18 6100 0000                  		bsr.w	Sonic_HitFloor
00013B1C 4A41                       		tst.w	d1
00013B1E 6A00                       		bpl.s	locret_1379E
00013B20 D368 000C                  		add.w	d1,$C(a0)
00013B24 1143 0026                  		move.b	d3,$26(a0)
00013B28 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013B2C 117C 0000 001C             		move.b	#0,$1C(a0)
00013B32 317C 0000 0012             		move.w	#0,$12(a0)
00013B38 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013B3E                            
00013B3E                            locret_1379E:
00013B3E 4E75                       		rts	
00013B40                            ; End of function Sonic_Floor
00013B40                            
00013B40                            ; ---------------------------------------------------------------------------
00013B40                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013B40                            ; ---------------------------------------------------------------------------
00013B40                            
00013B40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B40                            
00013B40                            
00013B40                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013B40 0828 0004 0022             		btst	#4,$22(a0)
00013B46 6700                       		beq.s	loc_137AE
00013B48 4E71                       		nop	
00013B4A 4E71                       		nop	
00013B4C 4E71                       		nop	
00013B4E                            
00013B4E                            loc_137AE:
00013B4E 08A8 0005 0022             		bclr	#5,$22(a0)
00013B54 08A8 0001 0022             		bclr	#1,$22(a0)
00013B5A 08A8 0004 0022             		bclr	#4,$22(a0)
00013B60 0828 0002 0022             		btst	#2,$22(a0)
00013B66 6700                       		beq.s	loc_137E4
00013B68 08A8 0002 0022             		bclr	#2,$22(a0)
00013B6E 117C 0013 0016             		move.b	#$13,$16(a0)
00013B74 117C 0009 0017             		move.b	#9,$17(a0)
00013B7A 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013B80 5B68 000C                  		subq.w	#5,$C(a0)
00013B84                            
00013B84                            loc_137E4:
00013B84 117C 0000 003C             		move.b	#0,$3C(a0)
00013B8A 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013B90 4E75                       		rts	
00013B92                            ; End of function Sonic_ResetOnFloor
00013B92                            
00013B92                            ; ===========================================================================
00013B92                            ; ---------------------------------------------------------------------------
00013B92                            ; Sonic	when he	gets hurt
00013B92                            ; ---------------------------------------------------------------------------
00013B92                            
00013B92                            Obj01_Hurt:				; XREF: Obj01_Index
00013B92 4EBA 9DA4                  		jsr	SpeedToPos
00013B96 0668 0030 0012             		addi.w	#$30,$12(a0)
00013B9C 0828 0006 0022             		btst	#6,$22(a0)
00013BA2 6700                       		beq.s	loc_1380C
00013BA4 0468 0020 0012             		subi.w	#$20,$12(a0)
00013BAA                            
00013BAA                            loc_1380C:
00013BAA 6100 0000                  		bsr.w	Sonic_HurtStop
00013BAE 6100 FAF4                  		bsr.w	Sonic_LevelBound
00013BB2 6100 F506                  		bsr.w	Sonic_RecordPos
00013BB6 6100 0000                  		bsr.w	Sonic_Animate
00013BBA 6100 0000                  		bsr.w	LoadSonicDynPLC
00013BBE 4EFA 9D9E                  		jmp	DisplaySprite
00013BC2                            
00013BC2                            ; ---------------------------------------------------------------------------
00013BC2                            ; Subroutine to	stop Sonic falling after he's been hurt
00013BC2                            ; ---------------------------------------------------------------------------
00013BC2                            
00013BC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BC2                            
00013BC2                            
00013BC2                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013BC2 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013BC6 0640 00E0                  		addi.w	#$E0,d0
00013BCA B068 000C                  		cmp.w	$C(a0),d0
00013BCE 6500 0000                  		bcs.w	KillSonic
00013BD2 6100 FD70                  		bsr.w	Sonic_Floor
00013BD6 0828 0001 0022             		btst	#1,$22(a0)
00013BDC 6600                       		bne.s	locret_13860
00013BDE 7000                       		moveq	#0,d0
00013BE0 3140 0012                  		move.w	d0,$12(a0)
00013BE4 3140 0010                  		move.w	d0,$10(a0)
00013BE8 3140 0014                  		move.w	d0,$14(a0)
00013BEC 117C 0000 001C             		move.b	#0,$1C(a0)
00013BF2 5528 0024                  		subq.b	#2,$24(a0)
00013BF6 317C 0078 0030             		move.w	#$78,$30(a0)
00013BFC                            
00013BFC                            locret_13860:
00013BFC 4E75                       		rts	
00013BFE                            ; End of function Sonic_HurtStop
00013BFE                            
00013BFE                            ; ===========================================================================
00013BFE                            ; ---------------------------------------------------------------------------
00013BFE                            ; Sonic	when he	dies
00013BFE                            ; ---------------------------------------------------------------------------
00013BFE                            
00013BFE                            Obj01_Death:				; XREF: Obj01_Index
00013BFE 6100 0000                  		bsr.w	GameOver
00013C02 4EBA 9D08                  		jsr	ObjectFall
00013C06 6100 F4B2                  		bsr.w	Sonic_RecordPos
00013C0A 6100 0000                  		bsr.w	Sonic_Animate
00013C0E 6100 0000                  		bsr.w	LoadSonicDynPLC
00013C12 4EFA 9D4A                  		jmp	DisplaySprite
00013C16                            
00013C16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C16                            
00013C16                            
00013C16                            GameOver:				; XREF: Obj01_Death
00013C16 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013C1A 0640 0100                  		addi.w	#$100,d0
00013C1E B068 000C                  		cmp.w	$C(a0),d0
00013C22 6400 0000                  		bcc.w	locret_13900
00013C26 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013C2C 5428 0024                  		addq.b	#2,$24(a0)
00013C30 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013C34 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013C38 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013C3C 6600                       		bne.s	loc_138D4
00013C3E 317C 0000 003A             		move.w	#0,$3A(a0)
00013C44 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013C4A 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013C50 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013C56 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013C5A                            
00013C5A                            loc_138C2:
00013C5A 303C 008F                  		move.w	#$8F,d0
00013C5E 4EB9 0000 15B6             		jsr	(PlaySound).l	; play game over music
00013C64 7003                       		moveq	#3,d0
00013C66 4EF9 0000 17A0             		jmp	(LoadPLC).l	; load game over patterns
00013C6C                            ; ===========================================================================
00013C6C                            
00013C6C                            loc_138D4:
00013C6C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013C72 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013C76 6700                       		beq.s	locret_13900	; if not, branch
00013C78 317C 0000 003A             		move.w	#0,$3A(a0)
00013C7E 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013C84 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013C8A 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013C90 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013C96 60C2                       		bra.s	loc_138C2
00013C98                            ; ===========================================================================
00013C98                            
00013C98                            locret_13900:
00013C98 4E75                       		rts	
00013C9A                            ; End of function GameOver
00013C9A                            
00013C9A                            ; ===========================================================================
00013C9A                            ; ---------------------------------------------------------------------------
00013C9A                            ; Sonic	when the level is restarted
00013C9A                            ; ---------------------------------------------------------------------------
00013C9A                            
00013C9A                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013C9A 4A68 003A                  		tst.w	$3A(a0)
00013C9E 6700                       		beq.s	locret_13914
00013CA0 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013CA4 6600                       		bne.s	locret_13914
00013CA6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013CAC                            
00013CAC                            locret_13914:
00013CAC 4E75                       		rts	
00013CAE                            
00013CAE                            ; ---------------------------------------------------------------------------
00013CAE                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013CAE                            ; ---------------------------------------------------------------------------
00013CAE                            
00013CAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CAE                            
00013CAE                            
00013CAE                            Sonic_Loops:				; XREF: Obj01_Control
00013CAE 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013CB4 6700                       		beq.s	loc_13926	; if yes, branch
00013CB6 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013CBA 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013CBE                            
00013CBE                            loc_13926:
00013CBE 3028 000C                  		move.w	$C(a0),d0
00013CC2 E248                       		lsr.w	#1,d0
00013CC4 0240 0380                  		andi.w	#$380,d0
00013CC8 1228 0008                  		move.b	8(a0),d1
00013CCC 0241 007F                  		andi.w	#$7F,d1
00013CD0 D041                       		add.w	d1,d0
00013CD2 43F8 A400                  		lea	($FFFFA400).w,a1
00013CD6 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013CDA B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013CDE 6700 FA6C                  		beq.w	Obj01_ChkRoll
00013CE2 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013CE6 6700 FA64                  		beq.w	Obj01_ChkRoll
00013CEA B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013CEE 6700                       		beq.s	loc_13976
00013CF0 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013CF4 6700                       		beq.s	loc_13966
00013CF6 08A8 0006 0001             		bclr	#6,1(a0)
00013CFC 4E75                       		rts	
00013CFE                            ; ===========================================================================
00013CFE                            
00013CFE                            loc_13966:
00013CFE 0828 0001 0022             		btst	#1,$22(a0)
00013D04 6700                       		beq.s	loc_13976
00013D06 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013D0C 4E75                       		rts	
00013D0E                            ; ===========================================================================
00013D0E                            
00013D0E                            loc_13976:
00013D0E 3428 0008                  		move.w	8(a0),d2
00013D12 0C02 002C                  		cmpi.b	#$2C,d2
00013D16 6400                       		bcc.s	loc_13988
00013D18 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013D1E 4E75                       		rts	
00013D20                            ; ===========================================================================
00013D20                            
00013D20                            loc_13988:
00013D20 0C02 00E0                  		cmpi.b	#-$20,d2
00013D24 6500                       		bcs.s	loc_13996
00013D26 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013D2C 4E75                       		rts	
00013D2E                            ; ===========================================================================
00013D2E                            
00013D2E                            loc_13996:
00013D2E 0828 0006 0001             		btst	#6,1(a0)
00013D34 6600                       		bne.s	loc_139B2
00013D36 1228 0026                  		move.b	$26(a0),d1
00013D3A 6700                       		beq.s	locret_139C2
00013D3C 0C01 0080                  		cmpi.b	#-$80,d1
00013D40 6200                       		bhi.s	locret_139C2
00013D42 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013D48 4E75                       		rts	
00013D4A                            ; ===========================================================================
00013D4A                            
00013D4A                            loc_139B2:
00013D4A 1228 0026                  		move.b	$26(a0),d1
00013D4E 0C01 0080                  		cmpi.b	#-$80,d1
00013D52 6300                       		bls.s	locret_139C2
00013D54 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013D5A                            
00013D5A                            locret_139C2:
00013D5A 4E75                       		rts	
00013D5C                            ; End of function Sonic_Loops
00013D5C                            
00013D5C                            ; ---------------------------------------------------------------------------
00013D5C                            ; Subroutine to	animate	Sonic's sprites
00013D5C                            ; ---------------------------------------------------------------------------
00013D5C                            
00013D5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D5C                            
00013D5C                            
00013D5C                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013D5C 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013D62 7000                       		moveq	#0,d0
00013D64 1028 001C                  		move.b	$1C(a0),d0
00013D68 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013D6C 6700                       		beq.s	SAnim_Do	; if not, branch
00013D6E 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013D72 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013D78 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00013D7E                            
00013D7E                            SAnim_Do:
00013D7E D040                       		add.w	d0,d0
00013D80 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013D84 1011                       		move.b	(a1),d0
00013D86 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013D88 1228 0022                  		move.b	$22(a0),d1
00013D8C 0201 0001                  		andi.b	#1,d1
00013D90 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013D96 8328 0001                  		or.b	d1,1(a0)
00013D9A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013D9E 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00013DA0 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00013DA4                            
00013DA4                            SAnim_Do2:
00013DA4 7200                       		moveq	#0,d1
00013DA6 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00013DAA 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00013DAE 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00013DB0                            
00013DB0                            SAnim_Next:
00013DB0 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00013DB4 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00013DB8                            
00013DB8                            SAnim_Delay:
00013DB8 4E75                       		rts	
00013DBA                            ; ===========================================================================
00013DBA                            
00013DBA                            SAnim_End_FF:
00013DBA 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00013DBC 6600                       		bne.s	SAnim_End_FE	; if not, branch
00013DBE 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00013DC4 1029 0001                  		move.b	1(a1),d0	; read sprite number
00013DC8 60E6                       		bra.s	SAnim_Next
00013DCA                            ; ===========================================================================
00013DCA                            
00013DCA                            SAnim_End_FE:
00013DCA 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00013DCC 6600                       		bne.s	SAnim_End_FD	; if not, branch
00013DCE 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00013DD2 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00013DD6 9200                       		sub.b	d0,d1
00013DD8 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00013DDC 60D2                       		bra.s	SAnim_Next
00013DDE                            ; ===========================================================================
00013DDE                            
00013DDE                            SAnim_End_FD:
00013DDE 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00013DE0 6600                       		bne.s	SAnim_End	; if not, branch
00013DE2 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00013DE8                            
00013DE8                            SAnim_End:
00013DE8 4E75                       		rts	
00013DEA                            ; ===========================================================================
00013DEA                            
00013DEA                            SAnim_WalkRun:				; XREF: SAnim_Do
00013DEA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013DEE 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00013DF0 5200                       		addq.b	#1,d0		; is animation walking/running?
00013DF2 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00013DF6 7200                       		moveq	#0,d1
00013DF8 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013DFC 1428 0022                  		move.b	$22(a0),d2
00013E00 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00013E04 6600                       		bne.s	loc_13A70	; if yes, branch
00013E06 4600                       		not.b	d0		; reverse angle
00013E08                            
00013E08                            loc_13A70:
00013E08 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00013E0C 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00013E0E 7203                       		moveq	#3,d1
00013E10                            
00013E10                            loc_13A78:
00013E10 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013E16 B302                       		eor.b	d1,d2
00013E18 8528 0001                  		or.b	d2,1(a0)
00013E1C 0828 0005 0022             		btst	#5,$22(a0)
00013E22 6600 0000                  		bne.w	SAnim_Push
00013E26 E808                       		lsr.b	#4,d0		; divide angle by $10
00013E28 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00013E2C 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013E30 6A00                       		bpl.s	loc_13A9C
00013E32 4442                       		neg.w	d2
00013E34                            
00013E34                            loc_13A9C:
00013E34 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00013E3A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00013E3E 6400                       		bcc.s	loc_13AB4	; if yes, branch
00013E40 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00013E46 1200                       		move.b	d0,d1
00013E48 E209                       		lsr.b	#1,d1
00013E4A D001                       		add.b	d1,d0
00013E4C                            
00013E4C                            loc_13AB4:
00013E4C D000                       		add.b	d0,d0
00013E4E 1600                       		move.b	d0,d3
00013E50 4442                       		neg.w	d2
00013E52 0642 0800                  		addi.w	#$800,d2
00013E56 6A00                       		bpl.s	loc_13AC2
00013E58 7400                       		moveq	#0,d2
00013E5A                            
00013E5A                            loc_13AC2:
00013E5A E04A                       		lsr.w	#8,d2
00013E5C 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013E60 6100 FF42                  		bsr.w	SAnim_Do2
00013E64 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00013E68 4E75                       		rts	
00013E6A                            ; ===========================================================================
00013E6A                            
00013E6A                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00013E6A 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00013E6C 6600                       		bne.s	SAnim_Push	; if not, branch
00013E6E 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013E72 6A00                       		bpl.s	loc_13ADE
00013E74 4442                       		neg.w	d2
00013E76                            
00013E76                            loc_13ADE:
00013E76 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00013E7C 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00013E80 6400                       		bcc.s	loc_13AF0	; if yes, branch
00013E82 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00013E88                            
00013E88                            loc_13AF0:
00013E88 4442                       		neg.w	d2
00013E8A 0642 0400                  		addi.w	#$400,d2
00013E8E 6A00                       		bpl.s	loc_13AFA
00013E90 7400                       		moveq	#0,d2
00013E92                            
00013E92                            loc_13AFA:
00013E92 E04A                       		lsr.w	#8,d2
00013E94 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013E98 1228 0022                  		move.b	$22(a0),d1
00013E9C 0201 0001                  		andi.b	#1,d1
00013EA0 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013EA6 8328 0001                  		or.b	d1,1(a0)
00013EAA 6000 FEF8                  		bra.w	SAnim_Do2
00013EAE                            ; ===========================================================================
00013EAE                            
00013EAE                            SAnim_Push:				; XREF: SAnim_RollJump
00013EAE 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013EB2 6B00                       		bmi.s	loc_13B1E
00013EB4 4442                       		neg.w	d2
00013EB6                            
00013EB6                            loc_13B1E:
00013EB6 0642 0800                  		addi.w	#$800,d2
00013EBA 6A00                       		bpl.s	loc_13B26
00013EBC 7400                       		moveq	#0,d2
00013EBE                            
00013EBE                            loc_13B26:
00013EBE EC4A                       		lsr.w	#6,d2
00013EC0 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013EC4 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00013ECA 1228 0022                  		move.b	$22(a0),d1
00013ECE 0201 0001                  		andi.b	#1,d1
00013ED2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013ED8 8328 0001                  		or.b	d1,1(a0)
00013EDC 6000 FEC6                  		bra.w	SAnim_Do2
00013EE0                            ; End of function Sonic_Animate
00013EE0                            
00013EE0                            ; ===========================================================================
00013EE0                            SonicAniData:
00013EE0                            	include "_anim\Sonic.asm"
00013EE0                            ; ---------------------------------------------------------------------------
00013EE0                            ; Animation script - Sonic
00013EE0                            ; ---------------------------------------------------------------------------
00013EE0 0000                       		dc.w SonAni_Walk-SonicAniData
00013EE2 0000                       		dc.w SonAni_Run-SonicAniData
00013EE4 0000                       		dc.w SonAni_Roll-SonicAniData
00013EE6 0000                       		dc.w SonAni_Roll2-SonicAniData
00013EE8 0000                       		dc.w SonAni_Push-SonicAniData
00013EEA 0000                       		dc.w SonAni_Wait-SonicAniData
00013EEC 0000                       		dc.w SonAni_Balance-SonicAniData
00013EEE 0000                       		dc.w SonAni_LookUp-SonicAniData
00013EF0 0000                       		dc.w SonAni_Duck-SonicAniData
00013EF2 0000                       		dc.w SonAni_Warp1-SonicAniData
00013EF4 0000                       		dc.w SonAni_Warp2-SonicAniData
00013EF6 0000                       		dc.w SonAni_Warp3-SonicAniData
00013EF8 0000                       		dc.w SonAni_Warp4-SonicAniData
00013EFA 0000                       		dc.w SonAni_Stop-SonicAniData
00013EFC 0000                       		dc.w SonAni_Float1-SonicAniData
00013EFE 0000                       		dc.w SonAni_Float2-SonicAniData
00013F00 0000                       		dc.w SonAni_Spring-SonicAniData
00013F02 0000                       		dc.w SonAni_LZHang-SonicAniData
00013F04 0000                       		dc.w SonAni_Leap1-SonicAniData
00013F06 0000                       		dc.w SonAni_Leap2-SonicAniData
00013F08 0000                       		dc.w SonAni_Surf-SonicAniData
00013F0A 0000                       		dc.w SonAni_Bubble-SonicAniData
00013F0C 0000                       		dc.w SonAni_Death1-SonicAniData
00013F0E 0000                       		dc.w SonAni_Drown-SonicAniData
00013F10 0000                       		dc.w SonAni_Death2-SonicAniData
00013F12 0000                       		dc.w SonAni_Shrink-SonicAniData
00013F14 0000                       		dc.w SonAni_Hurt-SonicAniData
00013F16 0000                       		dc.w SonAni_LZSlide-SonicAniData
00013F18 0000                       		dc.w SonAni_Blank-SonicAniData
00013F1A 0000                       		dc.w SonAni_Float3-SonicAniData
00013F1C 0000                       		dc.w SonAni_Float4-SonicAniData
00013F1E FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00013F26 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00013F2E FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00013F36 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00013F3E FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00013F46 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00013F5C 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
00013F60 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00013F64 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00013F68 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00013F6C 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00013F70 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00013F74 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00013F78 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00013F7C 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00013F80 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00013F88 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00013F8C 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00013F90 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00013F96 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00013F9C 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00013FA0 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00013FA8 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00013FAC 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00013FB0 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00013FB4 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00013FBE 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00013FC2 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00013FC6 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00013FCA 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00013FD2 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00013FD6                            		even
00013FD6                            		even
00013FD6                            
00013FD6                            ; ---------------------------------------------------------------------------
00013FD6                            ; Sonic	pattern	loading	subroutine
00013FD6                            ; ---------------------------------------------------------------------------
00013FD6                            
00013FD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FD6                            
00013FD6                            
00013FD6                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00013FD6 7000                       		moveq	#0,d0
00013FD8 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00013FDC B038 F766                  		cmp.b	($FFFFF766).w,d0
00013FE0 6700                       		beq.s	locret_13C96
00013FE2 11C0 F766                  		move.b	d0,($FFFFF766).w
00013FE6 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00013FEC D040                       		add.w	d0,d0
00013FEE D4F2 0000                  		adda.w	(a2,d0.w),a2
00013FF2 7200                       		moveq	#0,d1
00013FF4 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00013FF6 5301                       		subq.b	#1,d1
00013FF8 6B00                       		bmi.s	locret_13C96
00013FFA 47F8 C800                  		lea	($FFFFC800).w,a3
00013FFE 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014004                            
00014004                            SPLC_ReadEntry:
00014004 7400                       		moveq	#0,d2
00014006 141A                       		move.b	(a2)+,d2
00014008 3002                       		move.w	d2,d0
0001400A E808                       		lsr.b	#4,d0
0001400C E14A                       		lsl.w	#8,d2
0001400E 141A                       		move.b	(a2)+,d2
00014010 EB4A                       		lsl.w	#5,d2
00014012 43F9 0000 0000             		lea	(Art_Sonic).l,a1
00014018 D3C2                       		adda.l	d2,a1
0001401A                            
0001401A                            SPLC_LoadTile:
0001401A 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
0001401E 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014022 47EB 0020                  		lea	$20(a3),a3	; next tile
00014026 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
0001402A                            
0001402A 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
0001402E                            
0001402E                            locret_13C96:
0001402E 4E75                       		rts	
00014030                            ; End of function LoadSonicDynPLC
00014030                            
00014030                            ; ===========================================================================
00014030                            ; ---------------------------------------------------------------------------
00014030                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014030                            ; ---------------------------------------------------------------------------
00014030                            
00014030                            Obj0A:					; XREF: Obj_Index
00014030 7000                       		moveq	#0,d0
00014032 1028 0024                  		move.b	$24(a0),d0
00014036 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
0001403A 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
0001403E                            ; ===========================================================================
0001403E 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014042 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014046 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
0001404A 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
0001404E 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014050                            ; ===========================================================================
00014050                            
00014050                            Obj0A_Main:				; XREF: Obj0A_Index
00014050 5428 0024                  		addq.b	#2,$24(a0)
00014054 217C 0001 2CF8 0004        		move.l	#Map_obj64,4(a0)
0001405C 317C 8348 0002             		move.w	#$8348,2(a0)
00014062 117C 0084 0001             		move.b	#$84,1(a0)
00014068 117C 0010 0019             		move.b	#$10,$19(a0)
0001406E 117C 0001 0018             		move.b	#1,$18(a0)
00014074 1028 0028                  		move.b	$28(a0),d0
00014078 6A00                       		bpl.s	loc_13D00
0001407A 5028 0024                  		addq.b	#8,$24(a0)
0001407E 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014086 317C 0440 0002             		move.w	#$440,2(a0)
0001408C 0240 007F                  		andi.w	#$7F,d0
00014090 1140 0033                  		move.b	d0,$33(a0)
00014094 6000 0000                  		bra.w	Obj0A_Countdown
00014098                            ; ===========================================================================
00014098                            
00014098                            loc_13D00:
00014098 1140 001C                  		move.b	d0,$1C(a0)
0001409C 3168 0008 0030             		move.w	8(a0),$30(a0)
000140A2 317C FF78 0012             		move.w	#-$88,$12(a0)
000140A8                            
000140A8                            Obj0A_Animate:				; XREF: Obj0A_Index
000140A8 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000140AE 4EB9 0000 AA10             		jsr	AnimateSprite
000140B4                            
000140B4                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000140B4 3038 F646                  		move.w	($FFFFF646).w,d0
000140B8 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000140BC 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000140BE 117C 0006 0024             		move.b	#6,$24(a0)
000140C4 5E28 001C                  		addq.b	#7,$1C(a0)
000140C8 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000140CE 6700                       		beq.s	Obj0A_Display
000140D0 6000                       		bra.s	Obj0A_Display
000140D2                            ; ===========================================================================
000140D2                            
000140D2                            Obj0A_Wobble:
000140D2 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000140D6 6700                       		beq.s	loc_13D44
000140D8 5868 0030                  		addq.w	#4,$30(a0)
000140DC                            
000140DC                            loc_13D44:
000140DC 1028 0026                  		move.b	$26(a0),d0
000140E0 5228 0026                  		addq.b	#1,$26(a0)
000140E4 0240 007F                  		andi.w	#$7F,d0
000140E8 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000140EE 1031 0000                  		move.b	(a1,d0.w),d0
000140F2 4880                       		ext.w	d0
000140F4 D068 0030                  		add.w	$30(a0),d0
000140F8 3140 0008                  		move.w	d0,8(a0)
000140FC 6100                       		bsr.s	Obj0A_ShowNumber
000140FE 4EBA 9838                  		jsr	SpeedToPos
00014102 4A28 0001                  		tst.b	1(a0)
00014106 6A00                       		bpl.s	Obj0A_Delete
00014108 4EFA 9854                  		jmp	DisplaySprite
0001410C                            ; ===========================================================================
0001410C                            
0001410C                            Obj0A_Delete:
0001410C 4EFA 988C                  		jmp	DeleteObject
00014110                            ; ===========================================================================
00014110                            
00014110                            Obj0A_Display:				; XREF: Obj0A_Index
00014110 6100                       		bsr.s	Obj0A_ShowNumber
00014112 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014118 4EB9 0000 AA10             		jsr	AnimateSprite
0001411E 4EFA 983E                  		jmp	DisplaySprite
00014122                            ; ===========================================================================
00014122                            
00014122                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014122 4EFA 9876                  		jmp	DeleteObject
00014126                            ; ===========================================================================
00014126                            
00014126                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014126 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
0001412C 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
0001412E 5368 0038                  		subq.w	#1,$38(a0)
00014132 6600                       		bne.s	Obj0A_Display2
00014134 117C 000E 0024             		move.b	#$E,$24(a0)
0001413A 5E28 001C                  		addq.b	#7,$1C(a0)
0001413E 60D0                       		bra.s	Obj0A_Display
00014140                            ; ===========================================================================
00014140                            
00014140                            Obj0A_Display2:
00014140 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014146 4EB9 0000 AA10             		jsr	AnimateSprite
0001414C 4A28 0001                  		tst.b	1(a0)
00014150 6A00                       		bpl.s	Obj0A_Delete3
00014152 4EFA 980A                  		jmp	DisplaySprite
00014156                            ; ===========================================================================
00014156                            
00014156                            Obj0A_Delete3:
00014156 4EFA 9842                  		jmp	DeleteObject
0001415A                            ; ===========================================================================
0001415A                            
0001415A                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
0001415A 4A68 0038                  		tst.w	$38(a0)
0001415E 6700                       		beq.s	locret_13E1A
00014160 5368 0038                  		subq.w	#1,$38(a0)
00014164 6600                       		bne.s	locret_13E1A
00014166 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
0001416C 6400                       		bcc.s	locret_13E1A
0001416E 317C 000F 0038             		move.w	#$F,$38(a0)
00014174 4268 0012                  		clr.w	$12(a0)
00014178 117C 0080 0001             		move.b	#$80,1(a0)
0001417E 3028 0008                  		move.w	8(a0),d0
00014182 9078 F700                  		sub.w	($FFFFF700).w,d0
00014186 0640 0080                  		addi.w	#$80,d0
0001418A 3140 0008                  		move.w	d0,8(a0)
0001418E 3028 000C                  		move.w	$C(a0),d0
00014192 9078 F704                  		sub.w	($FFFFF704).w,d0
00014196 0640 0080                  		addi.w	#$80,d0
0001419A 3140 000A                  		move.w	d0,$A(a0)
0001419E 117C 000C 0024             		move.b	#$C,$24(a0)
000141A4                            
000141A4                            locret_13E1A:
000141A4 4E75                       		rts	
000141A6                            ; ===========================================================================
000141A6                            Obj0A_WobbleData:
000141A6 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000141B7 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000141C8 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000141D9 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000141E9 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000141F6 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014203 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014210 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001421D FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014226                            ; ===========================================================================
00014226                            
00014226                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014226 4A68 002C                  		tst.w	$2C(a0)
0001422A 6600 0000                  		bne.w	loc_13F86
0001422E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014234 6400 0000                  		bcc.w	locret_1408C
00014238 0838 0006 D022             		btst	#6,($FFFFD022).w
0001423E 6700 0000                  		beq.w	locret_1408C
00014242 5368 0038                  		subq.w	#1,$38(a0)
00014246 6A00 0000                  		bpl.w	loc_13FAC
0001424A 317C 003B 0038             		move.w	#59,$38(a0)
00014250 317C 0001 0036             		move.w	#1,$36(a0)
00014256 4EB9 0000 2BD4             		jsr	(RandomNumber).l
0001425C 0240 0001                  		andi.w	#1,d0
00014260 1140 0034                  		move.b	d0,$34(a0)
00014264 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014268 0C40 0019                  		cmpi.w	#$19,d0
0001426C 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
0001426E 0C40 0014                  		cmpi.w	#$14,d0
00014272 6700                       		beq.s	Obj0A_WarnSound
00014274 0C40 000F                  		cmpi.w	#$F,d0
00014278 6700                       		beq.s	Obj0A_WarnSound
0001427A 0C40 000C                  		cmpi.w	#$C,d0
0001427E 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014280 6600                       		bne.s	loc_13F02
00014282 303C 0092                  		move.w	#$92,d0
00014286 4EB9 0000 15B6             		jsr	(PlaySound).l	; play countdown music
0001428C                            
0001428C                            loc_13F02:
0001428C 5328 0032                  		subq.b	#1,$32(a0)
00014290 6A00                       		bpl.s	Obj0A_ReduceAir
00014292 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014298 08E8 0007 0036             		bset	#7,$36(a0)
0001429E 6000                       		bra.s	Obj0A_ReduceAir
000142A0                            ; ===========================================================================
000142A0                            
000142A0                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000142A0 303C 00C2                  		move.w	#$C2,d0
000142A4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000142AA                            
000142AA                            Obj0A_ReduceAir:
000142AA 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000142AE 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000142B2 6100 0000                  		bsr.w	ResumeMusic
000142B6 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000142BC 303C 00B2                  		move.w	#$B2,d0
000142C0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play drowning sound
000142C6 117C 000A 0034             		move.b	#$A,$34(a0)
000142CC 317C 0001 0036             		move.w	#1,$36(a0)
000142D2 317C 0078 002C             		move.w	#$78,$2C(a0)
000142D8 2F08                       		move.l	a0,-(sp)
000142DA 41F8 D000                  		lea	($FFFFD000).w,a0
000142DE 6100 F860                  		bsr.w	Sonic_ResetOnFloor
000142E2 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000142E8 08E8 0001 0022             		bset	#1,$22(a0)
000142EE 08E8 0007 0002             		bset	#7,2(a0)
000142F4 317C 0000 0012             		move.w	#0,$12(a0)
000142FA 317C 0000 0010             		move.w	#0,$10(a0)
00014300 317C 0000 0014             		move.w	#0,$14(a0)
00014306 11FC 0001 F744             		move.b	#1,($FFFFF744).w
0001430C 205F                       		movea.l	(sp)+,a0
0001430E 4E75                       		rts	
00014310                            ; ===========================================================================
00014310                            
00014310                            loc_13F86:
00014310 5368 002C                  		subq.w	#1,$2C(a0)
00014314 6600                       		bne.s	loc_13F94
00014316 11FC 0006 D024             		move.b	#6,($FFFFD024).w
0001431C 4E75                       		rts	
0001431E                            ; ===========================================================================
0001431E                            
0001431E                            loc_13F94:
0001431E 2F08                       		move.l	a0,-(sp)
00014320 41F8 D000                  		lea	($FFFFD000).w,a0
00014324 4EBA 9612                  		jsr	SpeedToPos
00014328 0668 0010 0012             		addi.w	#$10,$12(a0)
0001432E 205F                       		movea.l	(sp)+,a0
00014330 6000                       		bra.s	loc_13FAC
00014332                            ; ===========================================================================
00014332                            
00014332                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014332 6000                       		bra.s	Obj0A_MakeItem
00014334                            ; ===========================================================================
00014334                            
00014334                            loc_13FAC:
00014334 4A68 0036                  		tst.w	$36(a0)
00014338 6700 0000                  		beq.w	locret_1408C
0001433C 5368 003A                  		subq.w	#1,$3A(a0)
00014340 6A00 0000                  		bpl.w	locret_1408C
00014344                            
00014344                            Obj0A_MakeItem:
00014344 4EB9 0000 2BD4             		jsr	(RandomNumber).l
0001434A 0240 000F                  		andi.w	#$F,d0
0001434E 3140 003A                  		move.w	d0,$3A(a0)
00014352 4EBA 9A90                  		jsr	SingleObjLoad
00014356 6600 0000                  		bne.w	locret_1408C
0001435A 12BC 000A                  		move.b	#$A,0(a1)	; load object
0001435E 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014364 7006                       		moveq	#6,d0
00014366 0838 0000 D022             		btst	#0,($FFFFD022).w
0001436C 6700                       		beq.s	loc_13FF2
0001436E 4440                       		neg.w	d0
00014370 137C 0040 0026             		move.b	#$40,$26(a1)
00014376                            
00014376                            loc_13FF2:
00014376 D169 0008                  		add.w	d0,8(a1)
0001437A 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014380 137C 0006 0028             		move.b	#6,$28(a1)
00014386 4A68 002C                  		tst.w	$2C(a0)
0001438A 6700 0000                  		beq.w	loc_1403E
0001438E 0268 0007 003A             		andi.w	#7,$3A(a0)
00014394 0668 0000 003A             		addi.w	#0,$3A(a0)
0001439A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001439E 0440 000C                  		subi.w	#$C,d0
000143A2 3340 000C                  		move.w	d0,$C(a1)
000143A6 4EB9 0000 2BD4             		jsr	(RandomNumber).l
000143AC 1340 0026                  		move.b	d0,$26(a1)
000143B0 3038 FE04                  		move.w	($FFFFFE04).w,d0
000143B4 0200 0003                  		andi.b	#3,d0
000143B8 6600                       		bne.s	loc_14082
000143BA 137C 000E 0028             		move.b	#$E,$28(a1)
000143C0 6000                       		bra.s	loc_14082
000143C2                            ; ===========================================================================
000143C2                            
000143C2                            loc_1403E:
000143C2 0828 0007 0036             		btst	#7,$36(a0)
000143C8 6700                       		beq.s	loc_14082
000143CA 3438 FE14                  		move.w	($FFFFFE14).w,d2
000143CE E24A                       		lsr.w	#1,d2
000143D0 4EB9 0000 2BD4             		jsr	(RandomNumber).l
000143D6 0240 0003                  		andi.w	#3,d0
000143DA 6600                       		bne.s	loc_1406A
000143DC 08E8 0006 0036             		bset	#6,$36(a0)
000143E2 6600                       		bne.s	loc_14082
000143E4 1342 0028                  		move.b	d2,$28(a1)
000143E8 337C 001C 0038             		move.w	#$1C,$38(a1)
000143EE                            
000143EE                            loc_1406A:
000143EE 4A28 0034                  		tst.b	$34(a0)
000143F2 6600                       		bne.s	loc_14082
000143F4 08E8 0006 0036             		bset	#6,$36(a0)
000143FA 6600                       		bne.s	loc_14082
000143FC 1342 0028                  		move.b	d2,$28(a1)
00014400 337C 001C 0038             		move.w	#$1C,$38(a1)
00014406                            
00014406                            loc_14082:
00014406 5328 0034                  		subq.b	#1,$34(a0)
0001440A 6A00                       		bpl.s	locret_1408C
0001440C 4268 0036                  		clr.w	$36(a0)
00014410                            
00014410                            locret_1408C:
00014410 4E75                       		rts	
00014412                            
00014412                            ; ---------------------------------------------------------------------------
00014412                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014412                            ; ---------------------------------------------------------------------------
00014412                            
00014412                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014412                            
00014412                            
00014412                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014412 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014418                             
00014418                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014418                             
00014418 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
0001441C                             
0001441C 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014422 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014424 43F9 0000 3982             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001442A 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001442C                             
0001442C                            Air_GetBgm2:
0001442C 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014432 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014434 43F9 0000 398A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001443A 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001443C                             
0001443C                            Air_GetBgm3:
0001443C 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014442 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014444 43F9 0000 3990             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
0001444A 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001444C                             
0001444C                            Air_GetBgm4:
0001444C 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014452 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014454 43F9 0000 3996             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001445A                             
0001445A                            Air_PlayMusic:
0001445A 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
0001445E                             
0001445E                            loc_140A6:
0001445E 4EB9 0000 15B6             		jsr	(PlaySound).l
00014464                             
00014464                            ; NineKode ends here
00014464                            
00014464                            loc_140AC:
00014464 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0001446A 4238 D372                  		clr.b	($FFFFD372).w
0001446E 4E75                       		rts	
00014470                            ; End of function ResumeMusic
00014470                            
00014470                            ; ===========================================================================
00014470                            Ani_obj0A:
00014470                            	include "_anim\obj0A.asm"
00014470                            ; ---------------------------------------------------------------------------
00014470                            ; Animation script - countdown numbers and bubbles (LZ)
00014470                            ; ---------------------------------------------------------------------------
00014470 0000                       		dc.w byte_140D6-Ani_obj0A
00014472 0000                       		dc.w byte_140E0-Ani_obj0A
00014474 0000                       		dc.w byte_140EA-Ani_obj0A
00014476 0000                       		dc.w byte_140F4-Ani_obj0A
00014478 0000                       		dc.w byte_140FE-Ani_obj0A
0001447A 0000                       		dc.w byte_14108-Ani_obj0A
0001447C 0000                       		dc.w byte_14112-Ani_obj0A
0001447E 0000                       		dc.w byte_14118-Ani_obj0A
00014480 0000                       		dc.w byte_14120-Ani_obj0A
00014482 0000                       		dc.w byte_14128-Ani_obj0A
00014484 0000                       		dc.w byte_14130-Ani_obj0A
00014486 0000                       		dc.w byte_14138-Ani_obj0A
00014488 0000                       		dc.w byte_14140-Ani_obj0A
0001448A 0000                       		dc.w byte_14148-Ani_obj0A
0001448C 0000                       		dc.w byte_1414A-Ani_obj0A
0001448E 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014498 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000144A2 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000144AC 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000144B6 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000144C0 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000144CA 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000144D0 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000144D8 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000144E0 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000144E8 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
000144F0 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000144F8 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014500 0EFC                       byte_14148:	dc.b $E, $FC
00014502 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014508                            		even
00014508                            		even
00014508                            
00014508                            ; ---------------------------------------------------------------------------
00014508                            ; Sprite mappings - drowning countdown numbers (LZ)
00014508                            ; ---------------------------------------------------------------------------
00014508                            Map_obj0A:
00014508                            	include "_maps\obj0A.asm"
00014508                            ; ---------------------------------------------------------------------------
00014508                            ; Sprite mappings - drowning countdown numbers (LZ)
00014508                            ; ---------------------------------------------------------------------------
00014508 0000                       		dc.w byte_14152-Map_obj0A
0001450A 01                         byte_14152:	dc.b 1
0001450B E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014510                            		even
00014510                            		even
00014510                            
00014510                            ; ===========================================================================
00014510                            ; ---------------------------------------------------------------------------
00014510                            ; Object 38 - shield and invincibility stars
00014510                            ; ---------------------------------------------------------------------------
00014510                            
00014510                            Obj38:					; XREF: Obj_Index
00014510 7000                       		moveq	#0,d0
00014512 1028 0024                  		move.b	$24(a0),d0
00014516 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
0001451A 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
0001451E                            ; ===========================================================================
0001451E 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014520 0000                       		dc.w Obj38_Shield-Obj38_Index
00014522 0000                       		dc.w Obj38_Stars-Obj38_Index
00014524                            ; ===========================================================================
00014524                            
00014524                            Obj38_Main:				; XREF: Obj38_Index
00014524 5428 0024                  		addq.b	#2,$24(a0)
00014528 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014530 117C 0004 0001             		move.b	#4,1(a0)
00014536 117C 0001 0018             		move.b	#1,$18(a0)
0001453C 117C 0010 0019             		move.b	#$10,$19(a0)
00014542 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014546 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014548 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
0001454E 4E75                       		rts	
00014550                            ; ===========================================================================
00014550                            
00014550                            Obj38_DoStars:
00014550 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014554 317C 055C 0002             		move.w	#$55C,2(a0)
0001455A 4E75                       		rts	
0001455C                            ; ===========================================================================
0001455C                            
0001455C                            Obj38_Shield:				; XREF: Obj38_Index
0001455C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014560 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014562 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014566 6700                       		beq.s	Obj38_Delete	; if not, branch
00014568 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
0001456E 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014574 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001457A 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014580 4EB9 0000 AA10             		jsr	AnimateSprite
00014586 4EFA 93D6                  		jmp	DisplaySprite
0001458A                            ; ===========================================================================
0001458A                            
0001458A                            Obj38_RmvShield:
0001458A 4E75                       		rts	
0001458C                            ; ===========================================================================
0001458C                            
0001458C                            Obj38_Delete:
0001458C 4EFA 940C                  		jmp	DeleteObject
00014590                            ; ===========================================================================
00014590                            
00014590                            Obj38_Stars:				; XREF: Obj38_Index
00014590 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014594 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014596 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0001459A 1228 001C                  		move.b	$1C(a0),d1
0001459E 5301                       		subq.b	#1,d1
000145A0 6000                       		bra.s	Obj38_StarTrail
000145A2                            ; ===========================================================================
000145A2 E909                       		lsl.b	#4,d1
000145A4 5801                       		addq.b	#4,d1
000145A6 9001                       		sub.b	d1,d0
000145A8 1228 0030                  		move.b	$30(a0),d1
000145AC 9001                       		sub.b	d1,d0
000145AE 5801                       		addq.b	#4,d1
000145B0 0201 000F                  		andi.b	#$F,d1
000145B4 1141 0030                  		move.b	d1,$30(a0)
000145B8 6000                       		bra.s	Obj38_StarTrail2a
000145BA                            ; ===========================================================================
000145BA                            
000145BA                            Obj38_StarTrail:			; XREF: Obj38_Stars
000145BA E709                       		lsl.b	#3,d1
000145BC 1401                       		move.b	d1,d2
000145BE D201                       		add.b	d1,d1
000145C0 D202                       		add.b	d2,d1
000145C2 5801                       		addq.b	#4,d1
000145C4 9001                       		sub.b	d1,d0
000145C6 1228 0030                  		move.b	$30(a0),d1
000145CA 9001                       		sub.b	d1,d0
000145CC 5801                       		addq.b	#4,d1
000145CE 0C01 0018                  		cmpi.b	#$18,d1
000145D2 6500                       		bcs.s	Obj38_StarTrail2
000145D4 7200                       		moveq	#0,d1
000145D6                            
000145D6                            Obj38_StarTrail2:
000145D6 1141 0030                  		move.b	d1,$30(a0)
000145DA                            
000145DA                            Obj38_StarTrail2a:
000145DA 43F8 CB00                  		lea	($FFFFCB00).w,a1
000145DE 43F1 0000                  		lea	(a1,d0.w),a1
000145E2 3159 0008                  		move.w	(a1)+,8(a0)
000145E6 3159 000C                  		move.w	(a1)+,$C(a0)
000145EA 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000145F0 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000145F6 4EB9 0000 AA10             		jsr	AnimateSprite
000145FC 4EFA 9360                  		jmp	DisplaySprite
00014600                            ; ===========================================================================
00014600                            
00014600                            Obj38_Delete2:				; XREF: Obj38_Stars
00014600 4EFA 9398                  		jmp	DeleteObject
00014604                            ; ===========================================================================
00014604                            ; ---------------------------------------------------------------------------
00014604                            ; Object 4A - special stage entry from beta
00014604                            ; ---------------------------------------------------------------------------
00014604                            
00014604                            Obj4A:					; XREF: Obj_Index
00014604 7000                       		moveq	#0,d0
00014606 1028 0024                  		move.b	$24(a0),d0
0001460A 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
0001460E 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014612                            ; ===========================================================================
00014612 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014614 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014616 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014618                            ; ===========================================================================
00014618                            
00014618                            Obj4A_Main:				; XREF: Obj4A_Index
00014618 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
0001461C 6700                       		beq.s	Obj4A_Main2	; if yes, branch
0001461E 4E75                       		rts	
00014620                            ; ===========================================================================
00014620                            
00014620                            Obj4A_Main2:
00014620 5428 0024                  		addq.b	#2,$24(a0)
00014624 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
0001462C 117C 0004 0001             		move.b	#4,1(a0)
00014632 117C 0001 0018             		move.b	#1,$18(a0)
00014638 117C 0038 0019             		move.b	#$38,$19(a0)
0001463E 317C 0541 0002             		move.w	#$541,2(a0)
00014644 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
0001464A                            
0001464A                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
0001464A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014650 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014656 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001465C 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014662 4EB9 0000 AA10             		jsr	AnimateSprite
00014668 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001466E 6600                       		bne.s	Obj4A_Display
00014670 4A38 D000                  		tst.b	($FFFFD000).w
00014674 6700                       		beq.s	Obj4A_Display
00014676 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
0001467C 303C 00A8                  		move.w	#$A8,d0
00014680 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014686                            
00014686                            Obj4A_Display:
00014686 4EFA 92D6                  		jmp	DisplaySprite
0001468A                            ; ===========================================================================
0001468A                            
0001468A                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
0001468A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0001468E 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014690 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014696 4EFA 9302                  		jmp	DeleteObject
0001469A                            ; ===========================================================================
0001469A                            
0001469A                            Obj4A_Wait:
0001469A 4E75                       		rts	
0001469C                            ; ===========================================================================
0001469C                            ; ---------------------------------------------------------------------------
0001469C                            ; Object 08 - water splash (LZ)
0001469C                            ; ---------------------------------------------------------------------------
0001469C                            
0001469C                            Obj08:					; XREF: Obj_Index
0001469C 7000                       		moveq	#0,d0
0001469E 1028 0024                  		move.b	$24(a0),d0
000146A2 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000146A6 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000146AA                            ; ===========================================================================
000146AA 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000146AC 0000                       		dc.w Obj08_Display-Obj08_Index
000146AE 0000                       		dc.w Obj08_Delete-Obj08_Index
000146B0                            ; ===========================================================================
000146B0                            
000146B0                            Obj08_Main:				; XREF: Obj08_Index
000146B0 5428 0024                  		addq.b	#2,$24(a0)
000146B4 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000146BC 0028 0004 0001             		ori.b	#4,1(a0)
000146C2 117C 0001 0018             		move.b	#1,$18(a0)
000146C8 117C 0010 0019             		move.b	#$10,$19(a0)
000146CE 317C 4259 0002             		move.w	#$4259,2(a0)
000146D4 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
000146DA                            
000146DA                            Obj08_Display:				; XREF: Obj08_Index
000146DA 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
000146E0 43F9 0000 0000             		lea	(Ani_obj08).l,a1
000146E6 4EB9 0000 AA10             		jsr	AnimateSprite
000146EC 4EFA 9270                  		jmp	DisplaySprite
000146F0                            ; ===========================================================================
000146F0                            
000146F0                            Obj08_Delete:				; XREF: Obj08_Index
000146F0 4EFA 92A8                  		jmp	DeleteObject	; delete when animation	is complete
000146F4                            ; ===========================================================================
000146F4                            Ani_obj38:
000146F4                            	include "_anim\obj38.asm"
000146F4                            ; ---------------------------------------------------------------------------
000146F4                            ; Animation script - shield and invincibility stars
000146F4                            ; ---------------------------------------------------------------------------
000146F4 0000                       		dc.w byte_14356-Ani_obj38
000146F6 0000                       		dc.w byte_1435E-Ani_obj38
000146F8 0000                       		dc.w byte_14364-Ani_obj38
000146FA 0000                       		dc.w byte_1437E-Ani_obj38
000146FC 0000                       		dc.w byte_14398-Ani_obj38
000146FE 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014706 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
0001470C 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
0001471D 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014726 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014737 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014740 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014751 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
0001475A                            		even
0001475A                            		even
0001475A                            
0001475A                            ; ---------------------------------------------------------------------------
0001475A                            ; Sprite mappings - shield and invincibility stars
0001475A                            ; ---------------------------------------------------------------------------
0001475A                            Map_obj38:
0001475A                            	include "_maps\obj38.asm"
0001475A                            ; ---------------------------------------------------------------------------
0001475A                            ; Sprite mappings - shield and invincibility stars
0001475A                            ; ---------------------------------------------------------------------------
0001475A 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
0001475E 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014762 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014766 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
0001476A 04                         byte_143C2:	dc.b 4
0001476B E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014770 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014775 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
0001477A 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
0001477F 04                         byte_143D7:	dc.b 4
00014780 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014785 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
0001478A 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
0001478F 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014794 04                         byte_143EC:	dc.b 4
00014795 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
0001479A E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0001479F 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000147A4 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000147A9 04                         byte_14401:	dc.b 4
000147AA E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000147AF E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000147B4 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000147B9 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000147BE 04                         byte_14416:	dc.b 4
000147BF E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000147C4 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000147C9 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000147CE 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000147D3 04                         byte_1442B:	dc.b 4
000147D4 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000147D9 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000147DE 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000147E3 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000147E8 04                         byte_14440:	dc.b 4
000147E9 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000147EE E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000147F3 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000147F8 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000147FE 00                         		even
000147FE 00                         		even
000147FE                            
000147FE                            Ani_obj4A:
000147FE                            	include "_anim\obj4A.asm"
000147FE                            ; ---------------------------------------------------------------------------
000147FE                            ; Animation script - special stage entry effect from beta
000147FE                            ; ---------------------------------------------------------------------------
000147FE 0000                       		dc.w byte_14458-Ani_obj4A
00014800 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014814                            		even
00014814                            		even
00014814                            
00014814                            ; ---------------------------------------------------------------------------
00014814                            ; Sprite mappings - special stage entry	from beta
00014814                            ; ---------------------------------------------------------------------------
00014814                            Map_obj4A:
00014814                            	include "_maps\obj4A.asm"
00014814                            ; ---------------------------------------------------------------------------
00014814                            ; Sprite mappings - special stage entry	from beta
00014814                            ; ---------------------------------------------------------------------------
00014814 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014818 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
0001481C 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014820 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014824 03                         byte_1447C:	dc.b 3
00014825 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
0001482A 0004 0001 00               		dc.b 0,	4, 0, 1, 0
0001482F 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014834 03                         byte_1448C:	dc.b 3
00014835 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
0001483A 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
0001483F 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014844 05                         byte_1449C:	dc.b 5
00014845 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
0001484A EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
0001484F FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014854 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014859 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
0001485E 09                         byte_144B6:	dc.b 9
0001485F F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014864 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014869 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
0001486E 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014873 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014878 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
0001487D F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014882 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014887 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
0001488C 12                         byte_144E4:	dc.b $12
0001488D 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014892 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014897 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
0001489C 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000148A1 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000148A6 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000148AB 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000148B0 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000148B5 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000148BA 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
000148BF 0800 0826 18               		dc.b 8,	0, 8, $26, $18
000148C4 0800 0029 20               		dc.b 8,	0, 0, $29, $20
000148C9 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
000148CE F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
000148D3 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
000148D8 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
000148DD 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
000148E2 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
000148E7 11                         byte_1453F:	dc.b $11
000148E8 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
000148ED F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
000148F2 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
000148F7 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000148FC 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014901 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014906 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
0001490B F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014910 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014915 0800 0825 30               		dc.b 8,	0, 8, $25, $30
0001491A 0000 0826 38               		dc.b 0,	0, 8, $26, $38
0001491F 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014924 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014929 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
0001492E F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014933 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014938 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
0001493D 09                         byte_14595:	dc.b 9
0001493E FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014943 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014948 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
0001494D 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014952 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014957 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
0001495C 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014961 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014966 04                         		dc.b 4
00014967 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
0001496C                            		even
0001496C                            		even
0001496C                            
0001496C                            Ani_obj08:
0001496C                            	include "_anim\obj08.asm"
0001496C                            ; ---------------------------------------------------------------------------
0001496C                            ; Animation script - water splash (LZ)
0001496C                            ; ---------------------------------------------------------------------------
0001496C 0000                       		dc.w byte_145C6-Ani_obj08
0001496E 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014974                            		even
00014974                            		even
00014974                            
00014974                            ; ---------------------------------------------------------------------------
00014974                            ; Sprite mappings - water splash (LZ)
00014974                            ; ---------------------------------------------------------------------------
00014974                            Map_obj08:
00014974                            	include "_maps\obj08.asm"
00014974                            ; ---------------------------------------------------------------------------
00014974                            ; Sprite mappings - water splash (LZ)
00014974                            ; ---------------------------------------------------------------------------
00014974 0000                       		dc.w byte_145D2-Map_obj08
00014976 0000                       		dc.w byte_145DD-Map_obj08
00014978 0000                       		dc.w byte_145E8-Map_obj08
0001497A 02                         byte_145D2:	dc.b 2
0001497B F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014980 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014985 02                         byte_145DD:	dc.b 2
00014986 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
0001498B EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014990 01                         byte_145E8:	dc.b 1
00014991 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014996                            		even
00014996                            		even
00014996                            
00014996                            ; ---------------------------------------------------------------------------
00014996                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014996                            ; ---------------------------------------------------------------------------
00014996                            
00014996                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014996                            
00014996                            
00014996                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014996 0828 0003 0022             		btst	#3,$22(a0)
0001499C 6700                       		beq.s	loc_14602
0001499E 7000                       		moveq	#0,d0
000149A0 11C0 F768                  		move.b	d0,($FFFFF768).w
000149A4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000149A8 4E75                       		rts	
000149AA                            ; ===========================================================================
000149AA                            
000149AA                            loc_14602:
000149AA 7003                       		moveq	#3,d0
000149AC 11C0 F768                  		move.b	d0,($FFFFF768).w
000149B0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000149B4 1028 0026                  		move.b	$26(a0),d0
000149B8 0600 0020                  		addi.b	#$20,d0
000149BC 6A00                       		bpl.s	loc_14624
000149BE 1028 0026                  		move.b	$26(a0),d0
000149C2 6A00                       		bpl.s	loc_1461E
000149C4 5300                       		subq.b	#1,d0
000149C6                            
000149C6                            loc_1461E:
000149C6 0600 0020                  		addi.b	#$20,d0
000149CA 6000                       		bra.s	loc_14630
000149CC                            ; ===========================================================================
000149CC                            
000149CC                            loc_14624:
000149CC 1028 0026                  		move.b	$26(a0),d0
000149D0 6A00                       		bpl.s	loc_1462C
000149D2 5200                       		addq.b	#1,d0
000149D4                            
000149D4                            loc_1462C:
000149D4 0600 001F                  		addi.b	#$1F,d0
000149D8                            
000149D8                            loc_14630:
000149D8 0200 00C0                  		andi.b	#$C0,d0
000149DC 0C00 0040                  		cmpi.b	#$40,d0
000149E0 6700 0000                  		beq.w	Sonic_WalkVertL
000149E4 0C00 0080                  		cmpi.b	#$80,d0
000149E8 6700 0000                  		beq.w	Sonic_WalkCeiling
000149EC 0C00 00C0                  		cmpi.b	#$C0,d0
000149F0 6700 0000                  		beq.w	Sonic_WalkVertR
000149F4 3428 000C                  		move.w	$C(a0),d2
000149F8 3628 0008                  		move.w	8(a0),d3
000149FC 7000                       		moveq	#0,d0
000149FE 1028 0016                  		move.b	$16(a0),d0
00014A02 4880                       		ext.w	d0
00014A04 D440                       		add.w	d0,d2
00014A06 1028 0017                  		move.b	$17(a0),d0
00014A0A 4880                       		ext.w	d0
00014A0C D640                       		add.w	d0,d3
00014A0E 49F8 F768                  		lea	($FFFFF768).w,a4
00014A12 367C 0010                  		movea.w	#$10,a3
00014A16 3C3C 0000                  		move.w	#0,d6
00014A1A 7A0D                       		moveq	#$D,d5
00014A1C 6100 0000                  		bsr.w	FindFloor
00014A20 3F01                       		move.w	d1,-(sp)
00014A22 3428 000C                  		move.w	$C(a0),d2
00014A26 3628 0008                  		move.w	8(a0),d3
00014A2A 7000                       		moveq	#0,d0
00014A2C 1028 0016                  		move.b	$16(a0),d0
00014A30 4880                       		ext.w	d0
00014A32 D440                       		add.w	d0,d2
00014A34 1028 0017                  		move.b	$17(a0),d0
00014A38 4880                       		ext.w	d0
00014A3A 4440                       		neg.w	d0
00014A3C D640                       		add.w	d0,d3
00014A3E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014A42 367C 0010                  		movea.w	#$10,a3
00014A46 3C3C 0000                  		move.w	#0,d6
00014A4A 7A0D                       		moveq	#$D,d5
00014A4C 6100 0000                  		bsr.w	FindFloor
00014A50 301F                       		move.w	(sp)+,d0
00014A52 6100 0000                  		bsr.w	Sonic_Angle
00014A56 4A41                       		tst.w	d1
00014A58 6700                       		beq.s	locret_146BE
00014A5A 6A00                       		bpl.s	loc_146C0
00014A5C 0C41 FFF2                  		cmpi.w	#-$E,d1
00014A60 6D00                       		blt.s	locret_146E6
00014A62 D368 000C                  		add.w	d1,$C(a0)
00014A66                            
00014A66                            locret_146BE:
00014A66 4E75                       		rts	
00014A68                            ; ===========================================================================
00014A68                            
00014A68                            loc_146C0:
00014A68 0C41 000E                  		cmpi.w	#$E,d1
00014A6C 6E00                       		bgt.s	loc_146CC
00014A6E                            
00014A6E                            loc_146C6:
00014A6E D368 000C                  		add.w	d1,$C(a0)
00014A72 4E75                       		rts	
00014A74                            ; ===========================================================================
00014A74                            
00014A74                            loc_146CC:
00014A74 4A28 0038                  		tst.b	$38(a0)
00014A78 66F4                       		bne.s	loc_146C6
00014A7A 08E8 0001 0022             		bset	#1,$22(a0)
00014A80 08A8 0005 0022             		bclr	#5,$22(a0)
00014A86 117C 0001 001D             		move.b	#1,$1D(a0)
00014A8C 4E75                       		rts	
00014A8E                            ; ===========================================================================
00014A8E                            
00014A8E                            locret_146E6:
00014A8E 4E75                       		rts	
00014A90                            ; End of function Sonic_AnglePos
00014A90                            
00014A90                            ; ===========================================================================
00014A90 2428 0008                  		move.l	8(a0),d2
00014A94 3028 0010                  		move.w	$10(a0),d0
00014A98 48C0                       		ext.l	d0
00014A9A E180                       		asl.l	#8,d0
00014A9C 9480                       		sub.l	d0,d2
00014A9E 2142 0008                  		move.l	d2,8(a0)
00014AA2 303C 0038                  		move.w	#$38,d0
00014AA6 48C0                       		ext.l	d0
00014AA8 E180                       		asl.l	#8,d0
00014AAA 9680                       		sub.l	d0,d3
00014AAC 2143 000C                  		move.l	d3,$C(a0)
00014AB0 4E75                       		rts	
00014AB2                            ; ===========================================================================
00014AB2                            
00014AB2                            locret_1470A:
00014AB2 4E75                       		rts	
00014AB4                            ; ===========================================================================
00014AB4 2628 000C                  		move.l	$C(a0),d3
00014AB8 3028 0012                  		move.w	$12(a0),d0
00014ABC 0440 0038                  		subi.w	#$38,d0
00014AC0 3140 0012                  		move.w	d0,$12(a0)
00014AC4 48C0                       		ext.l	d0
00014AC6 E180                       		asl.l	#8,d0
00014AC8 9680                       		sub.l	d0,d3
00014ACA 2143 000C                  		move.l	d3,$C(a0)
00014ACE 4E75                       		rts	
00014AD0 4E75                       		rts	
00014AD2                            ; ===========================================================================
00014AD2 2428 0008                  		move.l	8(a0),d2
00014AD6 2628 000C                  		move.l	$C(a0),d3
00014ADA 3028 0010                  		move.w	$10(a0),d0
00014ADE 48C0                       		ext.l	d0
00014AE0 E180                       		asl.l	#8,d0
00014AE2 9480                       		sub.l	d0,d2
00014AE4 3028 0012                  		move.w	$12(a0),d0
00014AE8 48C0                       		ext.l	d0
00014AEA E180                       		asl.l	#8,d0
00014AEC 9680                       		sub.l	d0,d3
00014AEE 2142 0008                  		move.l	d2,8(a0)
00014AF2 2143 000C                  		move.l	d3,$C(a0)
00014AF6 4E75                       		rts	
00014AF8                            
00014AF8                            ; ---------------------------------------------------------------------------
00014AF8                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014AF8                            ; ---------------------------------------------------------------------------
00014AF8                            
00014AF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AF8                            
00014AF8                            
00014AF8                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014AF8 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014AFC B240                       		cmp.w	d0,d1
00014AFE 6F00                       		ble.s	loc_1475E
00014B00 1438 F768                  		move.b	($FFFFF768).w,d2
00014B04 3200                       		move.w	d0,d1
00014B06                            
00014B06                            loc_1475E:
00014B06 0802 0000                  		btst	#0,d2
00014B0A 6600                       		bne.s	loc_1476A
00014B0C 1142 0026                  		move.b	d2,$26(a0)
00014B10 4E75                       		rts	
00014B12                            ; ===========================================================================
00014B12                            
00014B12                            loc_1476A:
00014B12 1428 0026                  		move.b	$26(a0),d2
00014B16 0602 0020                  		addi.b	#$20,d2
00014B1A 0202 00C0                  		andi.b	#$C0,d2
00014B1E 1142 0026                  		move.b	d2,$26(a0)
00014B22 4E75                       		rts	
00014B24                            ; End of function Sonic_Angle
00014B24                            
00014B24                            ; ---------------------------------------------------------------------------
00014B24                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014B24                            ; ---------------------------------------------------------------------------
00014B24                            
00014B24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B24                            
00014B24                            
00014B24                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014B24 3428 000C                  		move.w	$C(a0),d2
00014B28 3628 0008                  		move.w	8(a0),d3
00014B2C 7000                       		moveq	#0,d0
00014B2E 1028 0017                  		move.b	$17(a0),d0
00014B32 4880                       		ext.w	d0
00014B34 4440                       		neg.w	d0
00014B36 D440                       		add.w	d0,d2
00014B38 1028 0016                  		move.b	$16(a0),d0
00014B3C 4880                       		ext.w	d0
00014B3E D640                       		add.w	d0,d3
00014B40 49F8 F768                  		lea	($FFFFF768).w,a4
00014B44 367C 0010                  		movea.w	#$10,a3
00014B48 3C3C 0000                  		move.w	#0,d6
00014B4C 7A0D                       		moveq	#$D,d5
00014B4E 6100 0000                  		bsr.w	FindWall
00014B52 3F01                       		move.w	d1,-(sp)
00014B54 3428 000C                  		move.w	$C(a0),d2
00014B58 3628 0008                  		move.w	8(a0),d3
00014B5C 7000                       		moveq	#0,d0
00014B5E 1028 0017                  		move.b	$17(a0),d0
00014B62 4880                       		ext.w	d0
00014B64 D440                       		add.w	d0,d2
00014B66 1028 0016                  		move.b	$16(a0),d0
00014B6A 4880                       		ext.w	d0
00014B6C D640                       		add.w	d0,d3
00014B6E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014B72 367C 0010                  		movea.w	#$10,a3
00014B76 3C3C 0000                  		move.w	#0,d6
00014B7A 7A0D                       		moveq	#$D,d5
00014B7C 6100 0000                  		bsr.w	FindWall
00014B80 301F                       		move.w	(sp)+,d0
00014B82 6100 FF74                  		bsr.w	Sonic_Angle
00014B86 4A41                       		tst.w	d1
00014B88 6700                       		beq.s	locret_147F0
00014B8A 6A00                       		bpl.s	loc_147F2
00014B8C 0C41 FFF2                  		cmpi.w	#-$E,d1
00014B90 6D00 FF20                  		blt.w	locret_1470A
00014B94 D368 0008                  		add.w	d1,8(a0)
00014B98                            
00014B98                            locret_147F0:
00014B98 4E75                       		rts	
00014B9A                            ; ===========================================================================
00014B9A                            
00014B9A                            loc_147F2:
00014B9A 0C41 000E                  		cmpi.w	#$E,d1
00014B9E 6E00                       		bgt.s	loc_147FE
00014BA0                            
00014BA0                            loc_147F8:
00014BA0 D368 0008                  		add.w	d1,8(a0)
00014BA4 4E75                       		rts	
00014BA6                            ; ===========================================================================
00014BA6                            
00014BA6                            loc_147FE:
00014BA6 4A28 0038                  		tst.b	$38(a0)
00014BAA 66F4                       		bne.s	loc_147F8
00014BAC 08E8 0001 0022             		bset	#1,$22(a0)
00014BB2 08A8 0005 0022             		bclr	#5,$22(a0)
00014BB8 117C 0001 001D             		move.b	#1,$1D(a0)
00014BBE 4E75                       		rts	
00014BC0                            ; End of function Sonic_WalkVertR
00014BC0                            
00014BC0                            ; ---------------------------------------------------------------------------
00014BC0                            ; Subroutine allowing Sonic to walk upside-down
00014BC0                            ; ---------------------------------------------------------------------------
00014BC0                            
00014BC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BC0                            
00014BC0                            
00014BC0                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014BC0 3428 000C                  		move.w	$C(a0),d2
00014BC4 3628 0008                  		move.w	8(a0),d3
00014BC8 7000                       		moveq	#0,d0
00014BCA 1028 0016                  		move.b	$16(a0),d0
00014BCE 4880                       		ext.w	d0
00014BD0 9440                       		sub.w	d0,d2
00014BD2 0A42 000F                  		eori.w	#$F,d2
00014BD6 1028 0017                  		move.b	$17(a0),d0
00014BDA 4880                       		ext.w	d0
00014BDC D640                       		add.w	d0,d3
00014BDE 49F8 F768                  		lea	($FFFFF768).w,a4
00014BE2 367C FFF0                  		movea.w	#-$10,a3
00014BE6 3C3C 1000                  		move.w	#$1000,d6
00014BEA 7A0D                       		moveq	#$D,d5
00014BEC 6100 0000                  		bsr.w	FindFloor
00014BF0 3F01                       		move.w	d1,-(sp)
00014BF2 3428 000C                  		move.w	$C(a0),d2
00014BF6 3628 0008                  		move.w	8(a0),d3
00014BFA 7000                       		moveq	#0,d0
00014BFC 1028 0016                  		move.b	$16(a0),d0
00014C00 4880                       		ext.w	d0
00014C02 9440                       		sub.w	d0,d2
00014C04 0A42 000F                  		eori.w	#$F,d2
00014C08 1028 0017                  		move.b	$17(a0),d0
00014C0C 4880                       		ext.w	d0
00014C0E 9640                       		sub.w	d0,d3
00014C10 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014C14 367C FFF0                  		movea.w	#-$10,a3
00014C18 3C3C 1000                  		move.w	#$1000,d6
00014C1C 7A0D                       		moveq	#$D,d5
00014C1E 6100 0000                  		bsr.w	FindFloor
00014C22 301F                       		move.w	(sp)+,d0
00014C24 6100 FED2                  		bsr.w	Sonic_Angle
00014C28 4A41                       		tst.w	d1
00014C2A 6700                       		beq.s	locret_14892
00014C2C 6A00                       		bpl.s	loc_14894
00014C2E 0C41 FFF2                  		cmpi.w	#-$E,d1
00014C32 6D00 FE5A                  		blt.w	locret_146E6
00014C36 9368 000C                  		sub.w	d1,$C(a0)
00014C3A                            
00014C3A                            locret_14892:
00014C3A 4E75                       		rts	
00014C3C                            ; ===========================================================================
00014C3C                            
00014C3C                            loc_14894:
00014C3C 0C41 000E                  		cmpi.w	#$E,d1
00014C40 6E00                       		bgt.s	loc_148A0
00014C42                            
00014C42                            loc_1489A:
00014C42 9368 000C                  		sub.w	d1,$C(a0)
00014C46 4E75                       		rts	
00014C48                            ; ===========================================================================
00014C48                            
00014C48                            loc_148A0:
00014C48 4A28 0038                  		tst.b	$38(a0)
00014C4C 66F4                       		bne.s	loc_1489A
00014C4E 08E8 0001 0022             		bset	#1,$22(a0)
00014C54 08A8 0005 0022             		bclr	#5,$22(a0)
00014C5A 117C 0001 001D             		move.b	#1,$1D(a0)
00014C60 4E75                       		rts	
00014C62                            ; End of function Sonic_WalkCeiling
00014C62                            
00014C62                            ; ---------------------------------------------------------------------------
00014C62                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014C62                            ; ---------------------------------------------------------------------------
00014C62                            
00014C62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C62                            
00014C62                            
00014C62                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014C62 3428 000C                  		move.w	$C(a0),d2
00014C66 3628 0008                  		move.w	8(a0),d3
00014C6A 7000                       		moveq	#0,d0
00014C6C 1028 0017                  		move.b	$17(a0),d0
00014C70 4880                       		ext.w	d0
00014C72 9440                       		sub.w	d0,d2
00014C74 1028 0016                  		move.b	$16(a0),d0
00014C78 4880                       		ext.w	d0
00014C7A 9640                       		sub.w	d0,d3
00014C7C 0A43 000F                  		eori.w	#$F,d3
00014C80 49F8 F768                  		lea	($FFFFF768).w,a4
00014C84 367C FFF0                  		movea.w	#-$10,a3
00014C88 3C3C 0800                  		move.w	#$800,d6
00014C8C 7A0D                       		moveq	#$D,d5
00014C8E 6100 0000                  		bsr.w	FindWall
00014C92 3F01                       		move.w	d1,-(sp)
00014C94 3428 000C                  		move.w	$C(a0),d2
00014C98 3628 0008                  		move.w	8(a0),d3
00014C9C 7000                       		moveq	#0,d0
00014C9E 1028 0017                  		move.b	$17(a0),d0
00014CA2 4880                       		ext.w	d0
00014CA4 D440                       		add.w	d0,d2
00014CA6 1028 0016                  		move.b	$16(a0),d0
00014CAA 4880                       		ext.w	d0
00014CAC 9640                       		sub.w	d0,d3
00014CAE 0A43 000F                  		eori.w	#$F,d3
00014CB2 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014CB6 367C FFF0                  		movea.w	#-$10,a3
00014CBA 3C3C 0800                  		move.w	#$800,d6
00014CBE 7A0D                       		moveq	#$D,d5
00014CC0 6100 0000                  		bsr.w	FindWall
00014CC4 301F                       		move.w	(sp)+,d0
00014CC6 6100 FE30                  		bsr.w	Sonic_Angle
00014CCA 4A41                       		tst.w	d1
00014CCC 6700                       		beq.s	locret_14934
00014CCE 6A00                       		bpl.s	loc_14936
00014CD0 0C41 FFF2                  		cmpi.w	#-$E,d1
00014CD4 6D00 FDDC                  		blt.w	locret_1470A
00014CD8 9368 0008                  		sub.w	d1,8(a0)
00014CDC                            
00014CDC                            locret_14934:
00014CDC 4E75                       		rts	
00014CDE                            ; ===========================================================================
00014CDE                            
00014CDE                            loc_14936:
00014CDE 0C41 000E                  		cmpi.w	#$E,d1
00014CE2 6E00                       		bgt.s	loc_14942
00014CE4                            
00014CE4                            loc_1493C:
00014CE4 9368 0008                  		sub.w	d1,8(a0)
00014CE8 4E75                       		rts	
00014CEA                            ; ===========================================================================
00014CEA                            
00014CEA                            loc_14942:
00014CEA 4A28 0038                  		tst.b	$38(a0)
00014CEE 66F4                       		bne.s	loc_1493C
00014CF0 08E8 0001 0022             		bset	#1,$22(a0)
00014CF6 08A8 0005 0022             		bclr	#5,$22(a0)
00014CFC 117C 0001 001D             		move.b	#1,$1D(a0)
00014D02 4E75                       		rts	
00014D04                            ; End of function Sonic_WalkVertL
00014D04                            
00014D04                            ; ---------------------------------------------------------------------------
00014D04                            ; Subroutine to	find which tile	the object is standing on
00014D04                            ; ---------------------------------------------------------------------------
00014D04                            
00014D04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D04                            
00014D04                            
00014D04                            Floor_ChkTile:				; XREF: FindFloor; et al
00014D04 3002                       		move.w	d2,d0
00014D06 E248                       		lsr.w	#1,d0
00014D08 0240 0380                  		andi.w	#$380,d0
00014D0C 3203                       		move.w	d3,d1
00014D0E E049                       		lsr.w	#8,d1
00014D10 0241 007F                  		andi.w	#$7F,d1
00014D14 D041                       		add.w	d1,d0
00014D16 72FF                       		moveq	#-1,d1
00014D18 43F8 A400                  		lea	($FFFFA400).w,a1
00014D1C 1231 0000                  		move.b	(a1,d0.w),d1
00014D20 6700                       		beq.s	loc_14996
00014D22 6B00                       		bmi.s	loc_1499A
00014D24 5301                       		subq.b	#1,d1
00014D26 4881                       		ext.w	d1
00014D28 EE59                       		ror.w	#7,d1
00014D2A 3002                       		move.w	d2,d0
00014D2C D040                       		add.w	d0,d0
00014D2E 0240 01E0                  		andi.w	#$1E0,d0
00014D32 D240                       		add.w	d0,d1
00014D34 3003                       		move.w	d3,d0
00014D36 E648                       		lsr.w	#3,d0
00014D38 0240 001E                  		andi.w	#$1E,d0
00014D3C D240                       		add.w	d0,d1
00014D3E                            
00014D3E                            loc_14996:
00014D3E 2241                       		movea.l	d1,a1
00014D40 4E75                       		rts	
00014D42                            ; ===========================================================================
00014D42                            
00014D42                            loc_1499A:
00014D42 0241 007F                  		andi.w	#$7F,d1
00014D46 0828 0006 0001             		btst	#6,1(a0)
00014D4C 6700                       		beq.s	loc_149B2
00014D4E 5241                       		addq.w	#1,d1
00014D50 0C41 0029                  		cmpi.w	#$29,d1
00014D54 6600                       		bne.s	loc_149B2
00014D56 323C 0051                  		move.w	#$51,d1
00014D5A                            
00014D5A                            loc_149B2:
00014D5A 5301                       		subq.b	#1,d1
00014D5C EE59                       		ror.w	#7,d1
00014D5E 3002                       		move.w	d2,d0
00014D60 D040                       		add.w	d0,d0
00014D62 0240 01E0                  		andi.w	#$1E0,d0
00014D66 D240                       		add.w	d0,d1
00014D68 3003                       		move.w	d3,d0
00014D6A E648                       		lsr.w	#3,d0
00014D6C 0240 001E                  		andi.w	#$1E,d0
00014D70 D240                       		add.w	d0,d1
00014D72 2241                       		movea.l	d1,a1
00014D74 4E75                       		rts	
00014D76                            ; End of function Floor_ChkTile
00014D76                            
00014D76                            
00014D76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D76                            
00014D76                            
00014D76                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014D76 618C                       		bsr.s	Floor_ChkTile
00014D78 3011                       		move.w	(a1),d0
00014D7A 3800                       		move.w	d0,d4
00014D7C 0240 07FF                  		andi.w	#$7FF,d0
00014D80 6700                       		beq.s	loc_149DE
00014D82 0B04                       		btst	d5,d4
00014D84 6600                       		bne.s	loc_149EC
00014D86                            
00014D86                            loc_149DE:
00014D86 D44B                       		add.w	a3,d2
00014D88 6100 0000                  		bsr.w	FindFloor2
00014D8C 944B                       		sub.w	a3,d2
00014D8E 0641 0010                  		addi.w	#$10,d1
00014D92 4E75                       		rts	
00014D94                            ; ===========================================================================
00014D94                            
00014D94                            loc_149EC:
00014D94 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014D98 1032 0000                  		move.b	(a2,d0.w),d0
00014D9C 0240 00FF                  		andi.w	#$FF,d0
00014DA0 67E4                       		beq.s	loc_149DE
00014DA2 45F9 0000 0000             		lea	(AngleMap).l,a2
00014DA8 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014DAC E948                       		lsl.w	#4,d0
00014DAE 3203                       		move.w	d3,d1
00014DB0 0804 000B                  		btst	#$B,d4
00014DB4 6700                       		beq.s	loc_14A12
00014DB6 4641                       		not.w	d1
00014DB8 4414                       		neg.b	(a4)
00014DBA                            
00014DBA                            loc_14A12:
00014DBA 0804 000C                  		btst	#$C,d4
00014DBE 6700                       		beq.s	loc_14A22
00014DC0 0614 0040                  		addi.b	#$40,(a4)
00014DC4 4414                       		neg.b	(a4)
00014DC6 0414 0040                  		subi.b	#$40,(a4)
00014DCA                            
00014DCA                            loc_14A22:
00014DCA 0241 000F                  		andi.w	#$F,d1
00014DCE D240                       		add.w	d0,d1
00014DD0 45F9 0000 0000             		lea	(CollArray1).l,a2
00014DD6 1032 1000                  		move.b	(a2,d1.w),d0
00014DDA 4880                       		ext.w	d0
00014DDC BD44                       		eor.w	d6,d4
00014DDE 0804 000C                  		btst	#$C,d4
00014DE2 6700                       		beq.s	loc_14A3E
00014DE4 4440                       		neg.w	d0
00014DE6                            
00014DE6                            loc_14A3E:
00014DE6 4A40                       		tst.w	d0
00014DE8 679C                       		beq.s	loc_149DE
00014DEA 6B00                       		bmi.s	loc_14A5A
00014DEC 0C00 0010                  		cmpi.b	#$10,d0
00014DF0 6700                       		beq.s	loc_14A66
00014DF2 3202                       		move.w	d2,d1
00014DF4 0241 000F                  		andi.w	#$F,d1
00014DF8 D041                       		add.w	d1,d0
00014DFA 323C 000F                  		move.w	#$F,d1
00014DFE 9240                       		sub.w	d0,d1
00014E00 4E75                       		rts	
00014E02                            ; ===========================================================================
00014E02                            
00014E02                            loc_14A5A:
00014E02 3202                       		move.w	d2,d1
00014E04 0241 000F                  		andi.w	#$F,d1
00014E08 D041                       		add.w	d1,d0
00014E0A 6A00 FF7A                  		bpl.w	loc_149DE
00014E0E                            
00014E0E                            loc_14A66:
00014E0E 944B                       		sub.w	a3,d2
00014E10 6100 0000                  		bsr.w	FindFloor2
00014E14 D44B                       		add.w	a3,d2
00014E16 0441 0010                  		subi.w	#$10,d1
00014E1A 4E75                       		rts	
00014E1C                            ; End of function FindFloor
00014E1C                            
00014E1C                            
00014E1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E1C                            
00014E1C                            
00014E1C                            FindFloor2:				; XREF: FindFloor
00014E1C 6100 FEE6                  		bsr.w	Floor_ChkTile
00014E20 3011                       		move.w	(a1),d0
00014E22 3800                       		move.w	d0,d4
00014E24 0240 07FF                  		andi.w	#$7FF,d0
00014E28 6700                       		beq.s	loc_14A86
00014E2A 0B04                       		btst	d5,d4
00014E2C 6600                       		bne.s	loc_14A94
00014E2E                            
00014E2E                            loc_14A86:
00014E2E 323C 000F                  		move.w	#$F,d1
00014E32 3002                       		move.w	d2,d0
00014E34 0240 000F                  		andi.w	#$F,d0
00014E38 9240                       		sub.w	d0,d1
00014E3A 4E75                       		rts	
00014E3C                            ; ===========================================================================
00014E3C                            
00014E3C                            loc_14A94:
00014E3C 2478 F796                  		movea.l	($FFFFF796).w,a2
00014E40 1032 0000                  		move.b	(a2,d0.w),d0
00014E44 0240 00FF                  		andi.w	#$FF,d0
00014E48 67E4                       		beq.s	loc_14A86
00014E4A 45F9 0000 0000             		lea	(AngleMap).l,a2
00014E50 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014E54 E948                       		lsl.w	#4,d0
00014E56 3203                       		move.w	d3,d1
00014E58 0804 000B                  		btst	#$B,d4
00014E5C 6700                       		beq.s	loc_14ABA
00014E5E 4641                       		not.w	d1
00014E60 4414                       		neg.b	(a4)
00014E62                            
00014E62                            loc_14ABA:
00014E62 0804 000C                  		btst	#$C,d4
00014E66 6700                       		beq.s	loc_14ACA
00014E68 0614 0040                  		addi.b	#$40,(a4)
00014E6C 4414                       		neg.b	(a4)
00014E6E 0414 0040                  		subi.b	#$40,(a4)
00014E72                            
00014E72                            loc_14ACA:
00014E72 0241 000F                  		andi.w	#$F,d1
00014E76 D240                       		add.w	d0,d1
00014E78 45F9 0000 0000             		lea	(CollArray1).l,a2
00014E7E 1032 1000                  		move.b	(a2,d1.w),d0
00014E82 4880                       		ext.w	d0
00014E84 BD44                       		eor.w	d6,d4
00014E86 0804 000C                  		btst	#$C,d4
00014E8A 6700                       		beq.s	loc_14AE6
00014E8C 4440                       		neg.w	d0
00014E8E                            
00014E8E                            loc_14AE6:
00014E8E 4A40                       		tst.w	d0
00014E90 679C                       		beq.s	loc_14A86
00014E92 6B00                       		bmi.s	loc_14AFC
00014E94 3202                       		move.w	d2,d1
00014E96 0241 000F                  		andi.w	#$F,d1
00014E9A D041                       		add.w	d1,d0
00014E9C 323C 000F                  		move.w	#$F,d1
00014EA0 9240                       		sub.w	d0,d1
00014EA2 4E75                       		rts	
00014EA4                            ; ===========================================================================
00014EA4                            
00014EA4                            loc_14AFC:
00014EA4 3202                       		move.w	d2,d1
00014EA6 0241 000F                  		andi.w	#$F,d1
00014EAA D041                       		add.w	d1,d0
00014EAC 6A00 FF80                  		bpl.w	loc_14A86
00014EB0 4641                       		not.w	d1
00014EB2 4E75                       		rts	
00014EB4                            ; End of function FindFloor2
00014EB4                            
00014EB4                            
00014EB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EB4                            
00014EB4                            
00014EB4                            FindWall:				; XREF: Sonic_WalkVertR; et al
00014EB4 6100 FE4E                  		bsr.w	Floor_ChkTile
00014EB8 3011                       		move.w	(a1),d0
00014EBA 3800                       		move.w	d0,d4
00014EBC 0240 07FF                  		andi.w	#$7FF,d0
00014EC0 6700                       		beq.s	loc_14B1E
00014EC2 0B04                       		btst	d5,d4
00014EC4 6600                       		bne.s	loc_14B2C
00014EC6                            
00014EC6                            loc_14B1E:
00014EC6 D64B                       		add.w	a3,d3
00014EC8 6100 0000                  		bsr.w	FindWall2
00014ECC 964B                       		sub.w	a3,d3
00014ECE 0641 0010                  		addi.w	#$10,d1
00014ED2 4E75                       		rts	
00014ED4                            ; ===========================================================================
00014ED4                            
00014ED4                            loc_14B2C:
00014ED4 2478 F796                  		movea.l	($FFFFF796).w,a2
00014ED8 1032 0000                  		move.b	(a2,d0.w),d0
00014EDC 0240 00FF                  		andi.w	#$FF,d0
00014EE0 67E4                       		beq.s	loc_14B1E
00014EE2 45F9 0000 0000             		lea	(AngleMap).l,a2
00014EE8 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014EEC E948                       		lsl.w	#4,d0
00014EEE 3202                       		move.w	d2,d1
00014EF0 0804 000C                  		btst	#$C,d4
00014EF4 6700                       		beq.s	loc_14B5A
00014EF6 4641                       		not.w	d1
00014EF8 0614 0040                  		addi.b	#$40,(a4)
00014EFC 4414                       		neg.b	(a4)
00014EFE 0414 0040                  		subi.b	#$40,(a4)
00014F02                            
00014F02                            loc_14B5A:
00014F02 0804 000B                  		btst	#$B,d4
00014F06 6700                       		beq.s	loc_14B62
00014F08 4414                       		neg.b	(a4)
00014F0A                            
00014F0A                            loc_14B62:
00014F0A 0241 000F                  		andi.w	#$F,d1
00014F0E D240                       		add.w	d0,d1
00014F10 45F9 0000 0000             		lea	(CollArray2).l,a2
00014F16 1032 1000                  		move.b	(a2,d1.w),d0
00014F1A 4880                       		ext.w	d0
00014F1C BD44                       		eor.w	d6,d4
00014F1E 0804 000B                  		btst	#$B,d4
00014F22 6700                       		beq.s	loc_14B7E
00014F24 4440                       		neg.w	d0
00014F26                            
00014F26                            loc_14B7E:
00014F26 4A40                       		tst.w	d0
00014F28 679C                       		beq.s	loc_14B1E
00014F2A 6B00                       		bmi.s	loc_14B9A
00014F2C 0C00 0010                  		cmpi.b	#$10,d0
00014F30 6700                       		beq.s	loc_14BA6
00014F32 3203                       		move.w	d3,d1
00014F34 0241 000F                  		andi.w	#$F,d1
00014F38 D041                       		add.w	d1,d0
00014F3A 323C 000F                  		move.w	#$F,d1
00014F3E 9240                       		sub.w	d0,d1
00014F40 4E75                       		rts	
00014F42                            ; ===========================================================================
00014F42                            
00014F42                            loc_14B9A:
00014F42 3203                       		move.w	d3,d1
00014F44 0241 000F                  		andi.w	#$F,d1
00014F48 D041                       		add.w	d1,d0
00014F4A 6A00 FF7A                  		bpl.w	loc_14B1E
00014F4E                            
00014F4E                            loc_14BA6:
00014F4E 964B                       		sub.w	a3,d3
00014F50 6100 0000                  		bsr.w	FindWall2
00014F54 D64B                       		add.w	a3,d3
00014F56 0441 0010                  		subi.w	#$10,d1
00014F5A 4E75                       		rts	
00014F5C                            ; End of function FindWall
00014F5C                            
00014F5C                            
00014F5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F5C                            
00014F5C                            
00014F5C                            FindWall2:				; XREF: FindWall
00014F5C 6100 FDA6                  		bsr.w	Floor_ChkTile
00014F60 3011                       		move.w	(a1),d0
00014F62 3800                       		move.w	d0,d4
00014F64 0240 07FF                  		andi.w	#$7FF,d0
00014F68 6700                       		beq.s	loc_14BC6
00014F6A 0B04                       		btst	d5,d4
00014F6C 6600                       		bne.s	loc_14BD4
00014F6E                            
00014F6E                            loc_14BC6:
00014F6E 323C 000F                  		move.w	#$F,d1
00014F72 3003                       		move.w	d3,d0
00014F74 0240 000F                  		andi.w	#$F,d0
00014F78 9240                       		sub.w	d0,d1
00014F7A 4E75                       		rts	
00014F7C                            ; ===========================================================================
00014F7C                            
00014F7C                            loc_14BD4:
00014F7C 2478 F796                  		movea.l	($FFFFF796).w,a2
00014F80 1032 0000                  		move.b	(a2,d0.w),d0
00014F84 0240 00FF                  		andi.w	#$FF,d0
00014F88 67E4                       		beq.s	loc_14BC6
00014F8A 45F9 0000 0000             		lea	(AngleMap).l,a2
00014F90 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014F94 E948                       		lsl.w	#4,d0
00014F96 3202                       		move.w	d2,d1
00014F98 0804 000C                  		btst	#$C,d4
00014F9C 6700                       		beq.s	loc_14C02
00014F9E 4641                       		not.w	d1
00014FA0 0614 0040                  		addi.b	#$40,(a4)
00014FA4 4414                       		neg.b	(a4)
00014FA6 0414 0040                  		subi.b	#$40,(a4)
00014FAA                            
00014FAA                            loc_14C02:
00014FAA 0804 000B                  		btst	#$B,d4
00014FAE 6700                       		beq.s	loc_14C0A
00014FB0 4414                       		neg.b	(a4)
00014FB2                            
00014FB2                            loc_14C0A:
00014FB2 0241 000F                  		andi.w	#$F,d1
00014FB6 D240                       		add.w	d0,d1
00014FB8 45F9 0000 0000             		lea	(CollArray2).l,a2
00014FBE 1032 1000                  		move.b	(a2,d1.w),d0
00014FC2 4880                       		ext.w	d0
00014FC4 BD44                       		eor.w	d6,d4
00014FC6 0804 000B                  		btst	#$B,d4
00014FCA 6700                       		beq.s	loc_14C26
00014FCC 4440                       		neg.w	d0
00014FCE                            
00014FCE                            loc_14C26:
00014FCE 4A40                       		tst.w	d0
00014FD0 679C                       		beq.s	loc_14BC6
00014FD2 6B00                       		bmi.s	loc_14C3C
00014FD4 3203                       		move.w	d3,d1
00014FD6 0241 000F                  		andi.w	#$F,d1
00014FDA D041                       		add.w	d1,d0
00014FDC 323C 000F                  		move.w	#$F,d1
00014FE0 9240                       		sub.w	d0,d1
00014FE2 4E75                       		rts	
00014FE4                            ; ===========================================================================
00014FE4                            
00014FE4                            loc_14C3C:
00014FE4 3203                       		move.w	d3,d1
00014FE6 0241 000F                  		andi.w	#$F,d1
00014FEA D041                       		add.w	d1,d0
00014FEC 6A00 FF80                  		bpl.w	loc_14BC6
00014FF0 4641                       		not.w	d1
00014FF2 4E75                       		rts	
00014FF4                            ; End of function FindWall2
00014FF4                            
00014FF4                            ; ---------------------------------------------------------------------------
00014FF4                            ; Unused floor/wall subroutine - logs something	to do with collision
00014FF4                            ; ---------------------------------------------------------------------------
00014FF4                            
00014FF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FF4                            
00014FF4                            
00014FF4                            FloorLog_Unk:				; XREF: Level
00014FF4 4E75                       		rts	
00014FF6                            
00014FF6 43F9 0000 0000             		lea	(CollArray1).l,a1
00014FFC 45F9 0000 0000             		lea	(CollArray1).l,a2
00015002 363C 00FF                  		move.w	#$FF,d3
00015006                            
00015006                            loc_14C5E:
00015006 7A10                       		moveq	#$10,d5
00015008 343C 000F                  		move.w	#$F,d2
0001500C                            
0001500C                            loc_14C64:
0001500C 7800                       		moveq	#0,d4
0001500E 323C 000F                  		move.w	#$F,d1
00015012                            
00015012                            loc_14C6A:
00015012 3019                       		move.w	(a1)+,d0
00015014 EAA8                       		lsr.l	d5,d0
00015016 D944                       		addx.w	d4,d4
00015018 51C9 FFF8                  		dbf	d1,loc_14C6A
0001501C                            
0001501C 34C4                       		move.w	d4,(a2)+
0001501E 92FC 0020                  		suba.w	#$20,a1
00015022 5345                       		subq.w	#1,d5
00015024 51CA FFE6                  		dbf	d2,loc_14C64
00015028                            
00015028 D2FC 0020                  		adda.w	#$20,a1
0001502C 51CB FFD8                  		dbf	d3,loc_14C5E
00015030                            
00015030 43F9 0000 0000             		lea	(CollArray1).l,a1
00015036 45F9 0000 0000             		lea	(CollArray2).l,a2
0001503C 6100                       		bsr.s	FloorLog_Unk2
0001503E 43F9 0000 0000             		lea	(CollArray1).l,a1
00015044 45F9 0000 0000             		lea	(CollArray1).l,a2
0001504A                            
0001504A                            ; End of function FloorLog_Unk
0001504A                            
0001504A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001504A                            
0001504A                            
0001504A                            FloorLog_Unk2:				; XREF: FloorLog_Unk
0001504A 363C 0FFF                  		move.w	#$FFF,d3
0001504E                            
0001504E                            loc_14CA6:
0001504E 7400                       		moveq	#0,d2
00015050 323C 000F                  		move.w	#$F,d1
00015054 3019                       		move.w	(a1)+,d0
00015056 6700                       		beq.s	loc_14CD4
00015058 6B00                       		bmi.s	loc_14CBE
0001505A                            
0001505A                            loc_14CB2:
0001505A E248                       		lsr.w	#1,d0
0001505C 6400                       		bcc.s	loc_14CB8
0001505E 5202                       		addq.b	#1,d2
00015060                            
00015060                            loc_14CB8:
00015060 51C9 FFF8                  		dbf	d1,loc_14CB2
00015064                            
00015064 6000                       		bra.s	loc_14CD6
00015066                            ; ===========================================================================
00015066                            
00015066                            loc_14CBE:
00015066 0C40 FFFF                  		cmpi.w	#-1,d0
0001506A 6700                       		beq.s	loc_14CD0
0001506C                            
0001506C                            loc_14CC4:
0001506C E348                       		lsl.w	#1,d0
0001506E 6400                       		bcc.s	loc_14CCA
00015070 5302                       		subq.b	#1,d2
00015072                            
00015072                            loc_14CCA:
00015072 51C9 FFF8                  		dbf	d1,loc_14CC4
00015076                            
00015076 6000                       		bra.s	loc_14CD6
00015078                            ; ===========================================================================
00015078                            
00015078                            loc_14CD0:
00015078 303C 0010                  		move.w	#$10,d0
0001507C                            
0001507C                            loc_14CD4:
0001507C 3400                       		move.w	d0,d2
0001507E                            
0001507E                            loc_14CD6:
0001507E 14C2                       		move.b	d2,(a2)+
00015080 51CB FFCC                  		dbf	d3,loc_14CA6
00015084                            
00015084 4E75                       		rts	
00015086                            
00015086                            ; End of function FloorLog_Unk2
00015086                            
00015086                            
00015086                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015086                            
00015086                            
00015086                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015086 2628 0008                  		move.l	8(a0),d3
0001508A 2428 000C                  		move.l	$C(a0),d2
0001508E 3228 0010                  		move.w	$10(a0),d1
00015092 48C1                       		ext.l	d1
00015094 E181                       		asl.l	#8,d1
00015096 D681                       		add.l	d1,d3
00015098 3228 0012                  		move.w	$12(a0),d1
0001509C 48C1                       		ext.l	d1
0001509E E181                       		asl.l	#8,d1
000150A0 D481                       		add.l	d1,d2
000150A2 4842                       		swap	d2
000150A4 4843                       		swap	d3
000150A6 11C0 F768                  		move.b	d0,($FFFFF768).w
000150AA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000150AE 1200                       		move.b	d0,d1
000150B0 0600 0020                  		addi.b	#$20,d0
000150B4 6A00                       		bpl.s	loc_14D1A
000150B6 1001                       		move.b	d1,d0
000150B8 6A00                       		bpl.s	loc_14D14
000150BA 5300                       		subq.b	#1,d0
000150BC                            
000150BC                            loc_14D14:
000150BC 0600 0020                  		addi.b	#$20,d0
000150C0 6000                       		bra.s	loc_14D24
000150C2                            ; ===========================================================================
000150C2                            
000150C2                            loc_14D1A:
000150C2 1001                       		move.b	d1,d0
000150C4 6A00                       		bpl.s	loc_14D20
000150C6 5200                       		addq.b	#1,d0
000150C8                            
000150C8                            loc_14D20:
000150C8 0600 001F                  		addi.b	#$1F,d0
000150CC                            
000150CC                            loc_14D24:
000150CC 0200 00C0                  		andi.b	#$C0,d0
000150D0 6700 0000                  		beq.w	loc_14DF0
000150D4 0C00 0080                  		cmpi.b	#$80,d0
000150D8 6700 0000                  		beq.w	loc_14F7C
000150DC 0201 0038                  		andi.b	#$38,d1
000150E0 6600                       		bne.s	loc_14D3C
000150E2 5042                       		addq.w	#8,d2
000150E4                            
000150E4                            loc_14D3C:
000150E4 0C00 0040                  		cmpi.b	#$40,d0
000150E8 6700 0000                  		beq.w	loc_1504A
000150EC 6000 0000                  		bra.w	loc_14EBC
000150F0                            
000150F0                            ; End of function Sonic_WalkSpeed
000150F0                            
000150F0                            
000150F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150F0                            
000150F0                            
000150F0                            sub_14D48:				; XREF: Sonic_Jump
000150F0 11C0 F768                  		move.b	d0,($FFFFF768).w
000150F4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000150F8 0600 0020                  		addi.b	#$20,d0
000150FC 0200 00C0                  		andi.b	#$C0,d0
00015100 0C00 0040                  		cmpi.b	#$40,d0
00015104 6700 0000                  		beq.w	loc_14FD6
00015108 0C00 0080                  		cmpi.b	#$80,d0
0001510C 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015110 0C00 00C0                  		cmpi.b	#$C0,d0
00015114 6700 0000                  		beq.w	sub_14E50
00015118                            
00015118                            ; End of function sub_14D48
00015118                            
00015118                            ; ---------------------------------------------------------------------------
00015118                            ; Subroutine to	make Sonic land	on the floor after jumping
00015118                            ; ---------------------------------------------------------------------------
00015118                            
00015118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015118                            
00015118                            
00015118                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015118 3428 000C                  		move.w	$C(a0),d2
0001511C 3628 0008                  		move.w	8(a0),d3
00015120 7000                       		moveq	#0,d0
00015122 1028 0016                  		move.b	$16(a0),d0
00015126 4880                       		ext.w	d0
00015128 D440                       		add.w	d0,d2
0001512A 1028 0017                  		move.b	$17(a0),d0
0001512E 4880                       		ext.w	d0
00015130 D640                       		add.w	d0,d3
00015132 49F8 F768                  		lea	($FFFFF768).w,a4
00015136 367C 0010                  		movea.w	#$10,a3
0001513A 3C3C 0000                  		move.w	#0,d6
0001513E 7A0D                       		moveq	#$D,d5
00015140 6100 FC34                  		bsr.w	FindFloor
00015144 3F01                       		move.w	d1,-(sp)
00015146 3428 000C                  		move.w	$C(a0),d2
0001514A 3628 0008                  		move.w	8(a0),d3
0001514E 7000                       		moveq	#0,d0
00015150 1028 0016                  		move.b	$16(a0),d0
00015154 4880                       		ext.w	d0
00015156 D440                       		add.w	d0,d2
00015158 1028 0017                  		move.b	$17(a0),d0
0001515C 4880                       		ext.w	d0
0001515E 9640                       		sub.w	d0,d3
00015160 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015164 367C 0010                  		movea.w	#$10,a3
00015168 3C3C 0000                  		move.w	#0,d6
0001516C 7A0D                       		moveq	#$D,d5
0001516E 6100 FC06                  		bsr.w	FindFloor
00015172 301F                       		move.w	(sp)+,d0
00015174 143C 0000                  		move.b	#0,d2
00015178                            
00015178                            loc_14DD0:
00015178 1638 F76A                  		move.b	($FFFFF76A).w,d3
0001517C B240                       		cmp.w	d0,d1
0001517E 6F00                       		ble.s	loc_14DDE
00015180 1638 F768                  		move.b	($FFFFF768).w,d3
00015184 C141                       		exg	d0,d1
00015186                            
00015186                            loc_14DDE:
00015186 0803 0000                  		btst	#0,d3
0001518A 6700                       		beq.s	locret_14DE6
0001518C 1602                       		move.b	d2,d3
0001518E                            
0001518E                            locret_14DE6:
0001518E 4E75                       		rts	
00015190                            
00015190                            ; End of function Sonic_HitFloor
00015190                            
00015190                            ; ===========================================================================
00015190 3428 000C                  		move.w	$C(a0),d2
00015194 3628 0008                  		move.w	8(a0),d3
00015198                            
00015198                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015198 0642 000A                  		addi.w	#$A,d2
0001519C 49F8 F768                  		lea	($FFFFF768).w,a4
000151A0 367C 0010                  		movea.w	#$10,a3
000151A4 3C3C 0000                  		move.w	#0,d6
000151A8 7A0E                       		moveq	#$E,d5
000151AA 6100 FBCA                  		bsr.w	FindFloor
000151AE 143C 0000                  		move.b	#0,d2
000151B2                            
000151B2                            loc_14E0A:				; XREF: sub_14EB4
000151B2 1638 F768                  		move.b	($FFFFF768).w,d3
000151B6 0803 0000                  		btst	#0,d3
000151BA 6700                       		beq.s	locret_14E16
000151BC 1602                       		move.b	d2,d3
000151BE                            
000151BE                            locret_14E16:
000151BE 4E75                       		rts	
000151C0                            
000151C0                            ; ---------------------------------------------------------------------------
000151C0                            ; Subroutine allowing objects to interact with the floor
000151C0                            ; ---------------------------------------------------------------------------
000151C0                            
000151C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151C0                            
000151C0                            
000151C0                            ObjHitFloor:
000151C0 3628 0008                  		move.w	8(a0),d3
000151C4                            
000151C4                            ; End of function ObjHitFloor
000151C4                            
000151C4                            
000151C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151C4                            
000151C4                            
000151C4                            ObjHitFloor2:
000151C4 3428 000C                  		move.w	$C(a0),d2
000151C8 7000                       		moveq	#0,d0
000151CA 1028 0016                  		move.b	$16(a0),d0
000151CE 4880                       		ext.w	d0
000151D0 D440                       		add.w	d0,d2
000151D2 49F8 F768                  		lea	($FFFFF768).w,a4
000151D6 18BC 0000                  		move.b	#0,(a4)
000151DA 367C 0010                  		movea.w	#$10,a3
000151DE 3C3C 0000                  		move.w	#0,d6
000151E2 7A0D                       		moveq	#$D,d5
000151E4 6100 FB90                  		bsr.w	FindFloor
000151E8 1638 F768                  		move.b	($FFFFF768).w,d3
000151EC 0803 0000                  		btst	#0,d3
000151F0 6700                       		beq.s	locret_14E4E
000151F2 163C 0000                  		move.b	#0,d3
000151F6                            
000151F6                            locret_14E4E:
000151F6 4E75                       		rts	
000151F8                            ; End of function ObjHitFloor2
000151F8                            
000151F8                            
000151F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151F8                            
000151F8                            
000151F8                            sub_14E50:				; XREF: sub_14D48
000151F8 3428 000C                  		move.w	$C(a0),d2
000151FC 3628 0008                  		move.w	8(a0),d3
00015200 7000                       		moveq	#0,d0
00015202 1028 0017                  		move.b	$17(a0),d0
00015206 4880                       		ext.w	d0
00015208 9440                       		sub.w	d0,d2
0001520A 1028 0016                  		move.b	$16(a0),d0
0001520E 4880                       		ext.w	d0
00015210 D640                       		add.w	d0,d3
00015212 49F8 F768                  		lea	($FFFFF768).w,a4
00015216 367C 0010                  		movea.w	#$10,a3
0001521A 3C3C 0000                  		move.w	#0,d6
0001521E 7A0E                       		moveq	#$E,d5
00015220 6100 FC92                  		bsr.w	FindWall
00015224 3F01                       		move.w	d1,-(sp)
00015226 3428 000C                  		move.w	$C(a0),d2
0001522A 3628 0008                  		move.w	8(a0),d3
0001522E 7000                       		moveq	#0,d0
00015230 1028 0017                  		move.b	$17(a0),d0
00015234 4880                       		ext.w	d0
00015236 D440                       		add.w	d0,d2
00015238 1028 0016                  		move.b	$16(a0),d0
0001523C 4880                       		ext.w	d0
0001523E D640                       		add.w	d0,d3
00015240 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015244 367C 0010                  		movea.w	#$10,a3
00015248 3C3C 0000                  		move.w	#0,d6
0001524C 7A0E                       		moveq	#$E,d5
0001524E 6100 FC64                  		bsr.w	FindWall
00015252 301F                       		move.w	(sp)+,d0
00015254 143C 00C0                  		move.b	#-$40,d2
00015258 6000 FF1E                  		bra.w	loc_14DD0
0001525C                            
0001525C                            ; End of function sub_14E50
0001525C                            
0001525C                            
0001525C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001525C                            
0001525C                            
0001525C                            sub_14EB4:				; XREF: Sonic_Floor
0001525C 3428 000C                  		move.w	$C(a0),d2
00015260 3628 0008                  		move.w	8(a0),d3
00015264                            
00015264                            loc_14EBC:
00015264 0643 000A                  		addi.w	#$A,d3
00015268 49F8 F768                  		lea	($FFFFF768).w,a4
0001526C 367C 0010                  		movea.w	#$10,a3
00015270 3C3C 0000                  		move.w	#0,d6
00015274 7A0E                       		moveq	#$E,d5
00015276 6100 FC3C                  		bsr.w	FindWall
0001527A 143C 00C0                  		move.b	#-$40,d2
0001527E 6000 FF32                  		bra.w	loc_14E0A
00015282                            
00015282                            ; End of function sub_14EB4
00015282                            
00015282                            ; ---------------------------------------------------------------------------
00015282                            ; Subroutine to	detect when an object hits a wall to its right
00015282                            ; ---------------------------------------------------------------------------
00015282                            
00015282                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015282                            
00015282                            
00015282                            ObjHitWallRight:
00015282 D668 0008                  		add.w	8(a0),d3
00015286 3428 000C                  		move.w	$C(a0),d2
0001528A 49F8 F768                  		lea	($FFFFF768).w,a4
0001528E 18BC 0000                  		move.b	#0,(a4)
00015292 367C 0010                  		movea.w	#$10,a3
00015296 3C3C 0000                  		move.w	#0,d6
0001529A 7A0E                       		moveq	#$E,d5
0001529C 6100 FC16                  		bsr.w	FindWall
000152A0 1638 F768                  		move.b	($FFFFF768).w,d3
000152A4 0803 0000                  		btst	#0,d3
000152A8 6700                       		beq.s	locret_14F06
000152AA 163C 00C0                  		move.b	#-$40,d3
000152AE                            
000152AE                            locret_14F06:
000152AE 4E75                       		rts	
000152B0                            
000152B0                            ; End of function ObjHitWallRight
000152B0                            
000152B0                            ; ---------------------------------------------------------------------------
000152B0                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000152B0                            ; touches them
000152B0                            ; ---------------------------------------------------------------------------
000152B0                            
000152B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152B0                            
000152B0                            
000152B0                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000152B0 3428 000C                  		move.w	$C(a0),d2
000152B4 3628 0008                  		move.w	8(a0),d3
000152B8 7000                       		moveq	#0,d0
000152BA 1028 0016                  		move.b	$16(a0),d0
000152BE 4880                       		ext.w	d0
000152C0 9440                       		sub.w	d0,d2
000152C2 0A42 000F                  		eori.w	#$F,d2
000152C6 1028 0017                  		move.b	$17(a0),d0
000152CA 4880                       		ext.w	d0
000152CC D640                       		add.w	d0,d3
000152CE 49F8 F768                  		lea	($FFFFF768).w,a4
000152D2 367C FFF0                  		movea.w	#-$10,a3
000152D6 3C3C 1000                  		move.w	#$1000,d6
000152DA 7A0E                       		moveq	#$E,d5
000152DC 6100 FA98                  		bsr.w	FindFloor
000152E0 3F01                       		move.w	d1,-(sp)
000152E2 3428 000C                  		move.w	$C(a0),d2
000152E6 3628 0008                  		move.w	8(a0),d3
000152EA 7000                       		moveq	#0,d0
000152EC 1028 0016                  		move.b	$16(a0),d0
000152F0 4880                       		ext.w	d0
000152F2 9440                       		sub.w	d0,d2
000152F4 0A42 000F                  		eori.w	#$F,d2
000152F8 1028 0017                  		move.b	$17(a0),d0
000152FC 4880                       		ext.w	d0
000152FE 9640                       		sub.w	d0,d3
00015300 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015304 367C FFF0                  		movea.w	#-$10,a3
00015308 3C3C 1000                  		move.w	#$1000,d6
0001530C 7A0E                       		moveq	#$E,d5
0001530E 6100 FA66                  		bsr.w	FindFloor
00015312 301F                       		move.w	(sp)+,d0
00015314 143C 0080                  		move.b	#-$80,d2
00015318 6000 FE5E                  		bra.w	loc_14DD0
0001531C                            ; End of function Sonic_DontRunOnWalls
0001531C                            
0001531C                            ; ===========================================================================
0001531C 3428 000C                  		move.w	$C(a0),d2
00015320 3628 0008                  		move.w	8(a0),d3
00015324                            
00015324                            loc_14F7C:
00015324 0442 000A                  		subi.w	#$A,d2
00015328 0A42 000F                  		eori.w	#$F,d2
0001532C 49F8 F768                  		lea	($FFFFF768).w,a4
00015330 367C FFF0                  		movea.w	#-$10,a3
00015334 3C3C 1000                  		move.w	#$1000,d6
00015338 7A0E                       		moveq	#$E,d5
0001533A 6100 FA3A                  		bsr.w	FindFloor
0001533E 143C 0080                  		move.b	#-$80,d2
00015342 6000 FE6E                  		bra.w	loc_14E0A
00015346                            
00015346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015346                            
00015346                            
00015346                            ObjHitCeiling:
00015346 3428 000C                  		move.w	$C(a0),d2
0001534A 3628 0008                  		move.w	8(a0),d3
0001534E 7000                       		moveq	#0,d0
00015350 1028 0016                  		move.b	$16(a0),d0
00015354 4880                       		ext.w	d0
00015356 9440                       		sub.w	d0,d2
00015358 0A42 000F                  		eori.w	#$F,d2
0001535C 49F8 F768                  		lea	($FFFFF768).w,a4
00015360 367C FFF0                  		movea.w	#-$10,a3
00015364 3C3C 1000                  		move.w	#$1000,d6
00015368 7A0E                       		moveq	#$E,d5
0001536A 6100 FA0A                  		bsr.w	FindFloor
0001536E 1638 F768                  		move.b	($FFFFF768).w,d3
00015372 0803 0000                  		btst	#0,d3
00015376 6700                       		beq.s	locret_14FD4
00015378 163C 0080                  		move.b	#-$80,d3
0001537C                            
0001537C                            locret_14FD4:
0001537C 4E75                       		rts	
0001537E                            ; End of function ObjHitCeiling
0001537E                            
0001537E                            ; ===========================================================================
0001537E                            
0001537E                            loc_14FD6:				; XREF: sub_14D48
0001537E 3428 000C                  		move.w	$C(a0),d2
00015382 3628 0008                  		move.w	8(a0),d3
00015386 7000                       		moveq	#0,d0
00015388 1028 0017                  		move.b	$17(a0),d0
0001538C 4880                       		ext.w	d0
0001538E 9440                       		sub.w	d0,d2
00015390 1028 0016                  		move.b	$16(a0),d0
00015394 4880                       		ext.w	d0
00015396 9640                       		sub.w	d0,d3
00015398 0A43 000F                  		eori.w	#$F,d3
0001539C 49F8 F768                  		lea	($FFFFF768).w,a4
000153A0 367C FFF0                  		movea.w	#-$10,a3
000153A4 3C3C 0800                  		move.w	#$800,d6
000153A8 7A0E                       		moveq	#$E,d5
000153AA 6100 FB08                  		bsr.w	FindWall
000153AE 3F01                       		move.w	d1,-(sp)
000153B0 3428 000C                  		move.w	$C(a0),d2
000153B4 3628 0008                  		move.w	8(a0),d3
000153B8 7000                       		moveq	#0,d0
000153BA 1028 0017                  		move.b	$17(a0),d0
000153BE 4880                       		ext.w	d0
000153C0 D440                       		add.w	d0,d2
000153C2 1028 0016                  		move.b	$16(a0),d0
000153C6 4880                       		ext.w	d0
000153C8 9640                       		sub.w	d0,d3
000153CA 0A43 000F                  		eori.w	#$F,d3
000153CE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153D2 367C FFF0                  		movea.w	#-$10,a3
000153D6 3C3C 0800                  		move.w	#$800,d6
000153DA 7A0E                       		moveq	#$E,d5
000153DC 6100 FAD6                  		bsr.w	FindWall
000153E0 301F                       		move.w	(sp)+,d0
000153E2 143C 0040                  		move.b	#$40,d2
000153E6 6000 FD90                  		bra.w	loc_14DD0
000153EA                            
000153EA                            ; ---------------------------------------------------------------------------
000153EA                            ; Subroutine to	stop Sonic when	he jumps at a wall
000153EA                            ; ---------------------------------------------------------------------------
000153EA                            
000153EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153EA                            
000153EA                            
000153EA                            Sonic_HitWall:				; XREF: Sonic_Floor
000153EA 3428 000C                  		move.w	$C(a0),d2
000153EE 3628 0008                  		move.w	8(a0),d3
000153F2                            
000153F2                            loc_1504A:
000153F2 0443 000A                  		subi.w	#$A,d3
000153F6 0A43 000F                  		eori.w	#$F,d3
000153FA 49F8 F768                  		lea	($FFFFF768).w,a4
000153FE 367C FFF0                  		movea.w	#-$10,a3
00015402 3C3C 0800                  		move.w	#$800,d6
00015406 7A0E                       		moveq	#$E,d5
00015408 6100 FAAA                  		bsr.w	FindWall
0001540C 143C 0040                  		move.b	#$40,d2
00015410 6000 FDA0                  		bra.w	loc_14E0A
00015414                            ; End of function Sonic_HitWall
00015414                            
00015414                            ; ---------------------------------------------------------------------------
00015414                            ; Subroutine to	detect when an object hits a wall to its left
00015414                            ; ---------------------------------------------------------------------------
00015414                            
00015414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015414                            
00015414                            
00015414                            ObjHitWallLeft:
00015414 D668 0008                  		add.w	8(a0),d3
00015418 3428 000C                  		move.w	$C(a0),d2
0001541C 49F8 F768                  		lea	($FFFFF768).w,a4
00015420 18BC 0000                  		move.b	#0,(a4)
00015424 367C FFF0                  		movea.w	#-$10,a3
00015428 3C3C 0800                  		move.w	#$800,d6
0001542C 7A0E                       		moveq	#$E,d5
0001542E 6100 FA84                  		bsr.w	FindWall
00015432 1638 F768                  		move.b	($FFFFF768).w,d3
00015436 0803 0000                  		btst	#0,d3
0001543A 6700                       		beq.s	locret_15098
0001543C 163C 0040                  		move.b	#$40,d3
00015440                            
00015440                            locret_15098:
00015440 4E75                       		rts	
00015442                            ; End of function ObjHitWallLeft
00015442                            
00015442                            ; ===========================================================================
00015442                            ; ---------------------------------------------------------------------------
00015442                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015442                            ; ---------------------------------------------------------------------------
00015442                            
00015442                            Obj66:					; XREF: Obj_Index
00015442 7000                       		moveq	#0,d0
00015444 1028 0024                  		move.b	$24(a0),d0
00015448 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
0001544C 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015450                            ; ===========================================================================
00015450 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015452 0000                       		dc.w Obj66_Action-Obj66_Index
00015454 0000                       		dc.w Obj66_Display-Obj66_Index
00015456 0000                       		dc.w Obj66_Release-Obj66_Index
00015458                            ; ===========================================================================
00015458                            
00015458                            Obj66_Main:				; XREF: Obj66_Index
00015458 5428 0024                  		addq.b	#2,$24(a0)
0001545C 323C 0001                  		move.w	#1,d1
00015460 2248                       		movea.l	a0,a1
00015462 6000                       		bra.s	Obj66_MakeItem
00015464                            ; ===========================================================================
00015464                            
00015464                            Obj66_Loop:
00015464 6100 897E                  		bsr.w	SingleObjLoad
00015468 6600                       		bne.s	loc_150FE
0001546A 12BC 0066                  		move.b	#$66,0(a1)
0001546E 5829 0024                  		addq.b	#4,$24(a1)
00015472 3368 0008 0008             		move.w	8(a0),8(a1)
00015478 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001547E 137C 0003 0018             		move.b	#3,$18(a1)
00015484 137C 0010 001A             		move.b	#$10,$1A(a1)
0001548A                            
0001548A                            Obj66_MakeItem:				; XREF: Obj66_Main
0001548A 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015492 337C 4348 0002             		move.w	#$4348,2(a1)
00015498 0029 0004 0001             		ori.b	#4,1(a1)
0001549E 137C 0038 0019             		move.b	#$38,$19(a1)
000154A4                            
000154A4                            loc_150FE:
000154A4 51C9 FFBE                  		dbf	d1,Obj66_Loop
000154A8                            
000154A8 117C 0030 0019             		move.b	#$30,$19(a0)
000154AE 117C 0004 0018             		move.b	#4,$18(a0)
000154B4 317C 003C 0030             		move.w	#$3C,$30(a0)
000154BA 117C 0001 0034             		move.b	#1,$34(a0)
000154C0 1168 0028 0038             		move.b	$28(a0),$38(a0)
000154C6                            
000154C6                            Obj66_Action:				; XREF: Obj66_Index
000154C6 6100 0000                  		bsr.w	Obj66_ChkSwitch
000154CA 4A28 0001                  		tst.b	1(a0)
000154CE 6A00 0000                  		bpl.w	Obj66_Display
000154D2 323C 0030                  		move.w	#$30,d1
000154D6 3401                       		move.w	d1,d2
000154D8 3602                       		move.w	d2,d3
000154DA 5243                       		addq.w	#1,d3
000154DC 3828 0008                  		move.w	8(a0),d4
000154E0 6100 A84C                  		bsr.w	SolidObject
000154E4 0828 0005 0022             		btst	#5,$22(a0)
000154EA 6700 0000                  		beq.w	Obj66_Display
000154EE 43F8 D000                  		lea	($FFFFD000).w,a1
000154F2 720E                       		moveq	#$E,d1
000154F4 3029 0008                  		move.w	8(a1),d0
000154F8 B068 0008                  		cmp.w	8(a0),d0
000154FC 6500                       		bcs.s	Obj66_GrabSonic
000154FE 7207                       		moveq	#7,d1
00015500                            
00015500                            Obj66_GrabSonic:
00015500 B228 001A                  		cmp.b	$1A(a0),d1
00015504 6600                       		bne.s	Obj66_Display
00015506 1141 0032                  		move.b	d1,$32(a0)
0001550A 5828 0024                  		addq.b	#4,$24(a0)
0001550E 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015514 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
0001551A 337C 0800 0014             		move.w	#$800,$14(a1)
00015520 337C 0000 0010             		move.w	#0,$10(a1)
00015526 337C 0000 0012             		move.w	#0,$12(a1)
0001552C 08A8 0005 0022             		bclr	#5,$22(a0)
00015532 08A9 0005 0022             		bclr	#5,$22(a1)
00015538 08E9 0001 0022             		bset	#1,$22(a1)
0001553E 3429 0008                  		move.w	8(a1),d2
00015542 3629 000C                  		move.w	$C(a1),d3
00015546 6100 0000                  		bsr.w	Obj66_ChgPos
0001554A D569 0008                  		add.w	d2,8(a1)
0001554E D769 000C                  		add.w	d3,$C(a1)
00015552 E0E9 0008                  		asr	8(a1)
00015556 E0E9 000C                  		asr	$C(a1)
0001555A                            
0001555A                            Obj66_Display:				; XREF: Obj66_Index
0001555A 6000 A4AA                  		bra.w	MarkObjGone
0001555E                            ; ===========================================================================
0001555E                            
0001555E                            Obj66_Release:				; XREF: Obj66_Index
0001555E 1028 001A                  		move.b	$1A(a0),d0
00015562 0C00 0004                  		cmpi.b	#4,d0
00015566 6700                       		beq.s	loc_151C8
00015568 0C00 0007                  		cmpi.b	#7,d0
0001556C 6600                       		bne.s	loc_151F8
0001556E                            
0001556E                            loc_151C8:
0001556E B028 0032                  		cmp.b	$32(a0),d0
00015572 6700                       		beq.s	loc_151F8
00015574 43F8 D000                  		lea	($FFFFD000).w,a1
00015578 337C 0000 0010             		move.w	#0,$10(a1)
0001557E 337C 0800 0012             		move.w	#$800,$12(a1)
00015584 0C00 0004                  		cmpi.b	#4,d0
00015588 6700                       		beq.s	loc_151F0
0001558A 337C 0800 0010             		move.w	#$800,$10(a1)
00015590 337C 0800 0012             		move.w	#$800,$12(a1)
00015596                            
00015596                            loc_151F0:
00015596 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
0001559A 5928 0024                  		subq.b	#4,$24(a0)
0001559E                            
0001559E                            loc_151F8:
0001559E 6100                       		bsr.s	Obj66_ChkSwitch
000155A0 6100                       		bsr.s	Obj66_ChgPos
000155A2 6000 A462                  		bra.w	MarkObjGone
000155A6                            
000155A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155A6                            
000155A6                            
000155A6                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000155A6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000155AA 7000                       		moveq	#0,d0
000155AC 1028 0038                  		move.b	$38(a0),d0
000155B0 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000155B6 6700                       		beq.s	loc_15224	; if not, branch
000155B8 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
000155BC 6600                       		bne.s	Obj66_Animate	; if yes, branch
000155BE 4428 0034                  		neg.b	$34(a0)
000155C2 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
000155C8 6000                       		bra.s	Obj66_Animate
000155CA                            ; ===========================================================================
000155CA                            
000155CA                            loc_15224:
000155CA 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
000155CE                            
000155CE                            Obj66_Animate:
000155CE 5328 001E                  		subq.b	#1,$1E(a0)
000155D2 6A00                       		bpl.s	locret_15246
000155D4 117C 0007 001E             		move.b	#7,$1E(a0)
000155DA 1228 0034                  		move.b	$34(a0),d1
000155DE 1028 001A                  		move.b	$1A(a0),d0
000155E2 D001                       		add.b	d1,d0
000155E4 0200 000F                  		andi.b	#$F,d0
000155E8 1140 001A                  		move.b	d0,$1A(a0)
000155EC                            
000155EC                            locret_15246:
000155EC 4E75                       		rts	
000155EE                            ; End of function Obj66_ChkSwitch
000155EE                            
000155EE                            
000155EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155EE                            
000155EE                            
000155EE                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
000155EE 43F8 D000                  		lea	($FFFFD000).w,a1
000155F2 7000                       		moveq	#0,d0
000155F4 1028 001A                  		move.b	$1A(a0),d0
000155F8 D040                       		add.w	d0,d0
000155FA 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
000155FE 101A                       		move.b	(a2)+,d0
00015600 4880                       		ext.w	d0
00015602 D068 0008                  		add.w	8(a0),d0
00015606 3340 0008                  		move.w	d0,8(a1)
0001560A 101A                       		move.b	(a2)+,d0
0001560C 4880                       		ext.w	d0
0001560E D068 000C                  		add.w	$C(a0),d0
00015612 3340 000C                  		move.w	d0,$C(a1)
00015616 4E75                       		rts	
00015618                            ; End of function Obj66_ChgPos
00015618                            
00015618                            ; ===========================================================================
00015618 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
0001561C E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015620 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015624 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015628 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
0001562C 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015630 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015634 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015638                            ; ---------------------------------------------------------------------------
00015638                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015638                            ; ---------------------------------------------------------------------------
00015638                            Map_obj66:
00015638                            	include "_maps\obj66.asm"
00015638                            ; ---------------------------------------------------------------------------
00015638                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015638                            ; ---------------------------------------------------------------------------
00015638 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
0001563C 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015640 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015644 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015648 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
0001564C 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015650 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015654 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015658 0000                       		dc.w byte_154A4-Map_obj66
0001565A 06                         byte_152B4:	dc.b 6
0001565B E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015660 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015665 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001566A E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
0001566F 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015674 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015679 06                         byte_152D3:	dc.b 6
0001567A F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
0001567F 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015684 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015689 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
0001568E 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015693 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015698 06                         byte_152F2:	dc.b 6
00015699 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
0001569E 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000156A3 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000156A8 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000156AD 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000156B2 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000156B7 06                         byte_15311:	dc.b 6
000156B8 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000156BD 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000156C2 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000156C7 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000156CC 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
000156D1 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
000156D6 06                         byte_15330:	dc.b 6
000156D7 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
000156DC 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
000156E1 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
000156E6 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
000156EB 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
000156F0 200A 1800 00               		dc.b $20, $A, $18, 0, 0
000156F5 06                         byte_1534F:	dc.b 6
000156F6 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
000156FB 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015700 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015705 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
0001570A 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
0001570F 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015714 06                         byte_1536E:	dc.b 6
00015715 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
0001571A 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
0001571F 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015724 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015729 180A 1000 00               		dc.b $18, $A, $10, 0, 0
0001572E 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015733 06                         byte_1538D:	dc.b 6
00015734 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015739 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
0001573E F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015743 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015748 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
0001574D 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015752 06                         byte_153AC:	dc.b 6
00015753 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015758 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
0001575D E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015762 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015767 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
0001576C 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015771 06                         byte_153CB:	dc.b 6
00015772 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015777 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
0001577C DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015781 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015786 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
0001578B F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015790 06                         byte_153EA:	dc.b 6
00015791 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015796 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
0001579B D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000157A0 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000157A5 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000157AA E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000157AF 06                         byte_15409:	dc.b 6
000157B0 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000157B5 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000157BA CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000157BF CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000157C4 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000157C9 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
000157CE 06                         byte_15428:	dc.b 6
000157CF D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
000157D4 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
000157D9 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
000157DE C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
000157E3 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
000157E8 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
000157ED 06                         byte_15447:	dc.b 6
000157EE D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
000157F3 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000157F8 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000157FD CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015802 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015807 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
0001580C 06                         byte_15466:	dc.b 6
0001580D E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015812 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015817 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
0001581C D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015821 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015826 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
0001582B 06                         byte_15485:	dc.b 6
0001582C E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015831 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015836 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
0001583B DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015840 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015845 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
0001584A 0C                         byte_154A4:	dc.b $C
0001584B C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015850 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015855 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
0001585A C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
0001585F D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015864 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015869 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
0001586E 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015873 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015878 280D 1809 00               		dc.b $28, $D, $18, 9, 0
0001587D 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015882 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015888 00                         		even
00015888 00                         		even
00015888                            
00015888                            ; ===========================================================================
00015888                            ; ---------------------------------------------------------------------------
00015888                            ; Object 67 - disc that	you run	around (SBZ)
00015888                            ; ---------------------------------------------------------------------------
00015888                            
00015888                            Obj67:					; XREF: Obj_Index
00015888 7000                       		moveq	#0,d0
0001588A 1028 0024                  		move.b	$24(a0),d0
0001588E 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015892 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015896                            ; ===========================================================================
00015896 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015898 0000                       		dc.w Obj67_Action-Obj67_Index
0001589A                            ; ===========================================================================
0001589A                            
0001589A                            Obj67_Main:				; XREF: Obj67_Index
0001589A 5428 0024                  		addq.b	#2,$24(a0)
0001589E 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
000158A6 317C C344 0002             		move.w	#$C344,2(a0)
000158AC 117C 0004 0001             		move.b	#4,1(a0)
000158B2 117C 0004 0018             		move.b	#4,$18(a0)
000158B8 117C 0008 0019             		move.b	#8,$19(a0)
000158BE 3168 0008 0032             		move.w	8(a0),$32(a0)
000158C4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000158CA 117C 0018 0034             		move.b	#$18,$34(a0)
000158D0 117C 0048 0038             		move.b	#$48,$38(a0)
000158D6 1228 0028                  		move.b	$28(a0),d1	; get object type
000158DA 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000158DE 6700                       		beq.s	loc_15546
000158E0 117C 0010 0034             		move.b	#$10,$34(a0)
000158E6 117C 0038 0038             		move.b	#$38,$38(a0)
000158EC                            
000158EC                            loc_15546:
000158EC 1228 0028                  		move.b	$28(a0),d1	; get object type
000158F0 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000158F4 4881                       		ext.w	d1
000158F6 E741                       		asl.w	#3,d1
000158F8 3141 0036                  		move.w	d1,$36(a0)
000158FC 1028 0022                  		move.b	$22(a0),d0
00015900 E418                       		ror.b	#2,d0
00015902 0200 00C0                  		andi.b	#-$40,d0
00015906 1140 0026                  		move.b	d0,$26(a0)
0001590A                            
0001590A                            Obj67_Action:				; XREF: Obj67_Index
0001590A 6100 0000                  		bsr.w	Obj67_MoveSonic
0001590E 6100 0000                  		bsr.w	Obj67_MoveSpot
00015912 6000 0000                  		bra.w	Obj67_ChkDel
00015916                            ; ===========================================================================
00015916                            
00015916                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015916 7400                       		moveq	#0,d2
00015918 1428 0038                  		move.b	$38(a0),d2
0001591C 3602                       		move.w	d2,d3
0001591E D643                       		add.w	d3,d3
00015920 43F8 D000                  		lea	($FFFFD000).w,a1
00015924 3029 0008                  		move.w	8(a1),d0
00015928 9068 0032                  		sub.w	$32(a0),d0
0001592C D042                       		add.w	d2,d0
0001592E B043                       		cmp.w	d3,d0
00015930 6400                       		bcc.s	loc_155A8
00015932 3229 000C                  		move.w	$C(a1),d1
00015936 9268 0030                  		sub.w	$30(a0),d1
0001593A D242                       		add.w	d2,d1
0001593C B243                       		cmp.w	d3,d1
0001593E 6400                       		bcc.s	loc_155A8
00015940 0829 0001 0022             		btst	#1,$22(a1)
00015946 6700                       		beq.s	loc_155B8
00015948 4228 003A                  		clr.b	$3A(a0)
0001594C 4E75                       		rts	
0001594E                            ; ===========================================================================
0001594E                            
0001594E                            loc_155A8:
0001594E 4A28 003A                  		tst.b	$3A(a0)
00015952 6700                       		beq.s	locret_155B6
00015954 4229 0038                  		clr.b	$38(a1)
00015958 4228 003A                  		clr.b	$3A(a0)
0001595C                            
0001595C                            locret_155B6:
0001595C 4E75                       		rts	
0001595E                            ; ===========================================================================
0001595E                            
0001595E                            loc_155B8:
0001595E 4A28 003A                  		tst.b	$3A(a0)
00015962 6600                       		bne.s	loc_155E2
00015964 117C 0001 003A             		move.b	#1,$3A(a0)
0001596A 0829 0002 0022             		btst	#2,$22(a1)
00015970 6600                       		bne.s	loc_155D0
00015972 4229 001C                  		clr.b	$1C(a1)
00015976                            
00015976                            loc_155D0:
00015976 08A9 0005 0022             		bclr	#5,$22(a1)
0001597C 137C 0001 001D             		move.b	#1,$1D(a1)
00015982 137C 0001 0038             		move.b	#1,$38(a1)
00015988                            
00015988                            loc_155E2:
00015988 3029 0014                  		move.w	$14(a1),d0
0001598C 4A68 0036                  		tst.w	$36(a0)
00015990 6A00                       		bpl.s	loc_15608
00015992 0C40 FC00                  		cmpi.w	#-$400,d0
00015996 6F00                       		ble.s	loc_155FA
00015998 337C FC00 0014             		move.w	#-$400,$14(a1)
0001599E 4E75                       		rts	
000159A0                            ; ===========================================================================
000159A0                            
000159A0                            loc_155FA:
000159A0 0C40 F100                  		cmpi.w	#-$F00,d0
000159A4 6C00                       		bge.s	locret_15606
000159A6 337C F100 0014             		move.w	#-$F00,$14(a1)
000159AC                            
000159AC                            locret_15606:
000159AC 4E75                       		rts	
000159AE                            ; ===========================================================================
000159AE                            
000159AE                            loc_15608:
000159AE 0C40 0400                  		cmpi.w	#$400,d0
000159B2 6C00                       		bge.s	loc_15616
000159B4 337C 0400 0014             		move.w	#$400,$14(a1)
000159BA 4E75                       		rts	
000159BC                            ; ===========================================================================
000159BC                            
000159BC                            loc_15616:
000159BC 0C40 0F00                  		cmpi.w	#$F00,d0
000159C0 6F00                       		ble.s	locret_15622
000159C2 337C 0F00 0014             		move.w	#$F00,$14(a1)
000159C8                            
000159C8                            locret_15622:
000159C8 4E75                       		rts	
000159CA                            ; ===========================================================================
000159CA                            
000159CA                            Obj67_MoveSpot:				; XREF: Obj67_Action
000159CA 3028 0036                  		move.w	$36(a0),d0
000159CE D168 0026                  		add.w	d0,$26(a0)
000159D2 1028 0026                  		move.b	$26(a0),d0
000159D6 4EB9 0000 2BFA             		jsr	(CalcSine).l
000159DC 3428 0030                  		move.w	$30(a0),d2
000159E0 3628 0032                  		move.w	$32(a0),d3
000159E4 7800                       		moveq	#0,d4
000159E6 1828 0034                  		move.b	$34(a0),d4
000159EA E14C                       		lsl.w	#8,d4
000159EC 2A04                       		move.l	d4,d5
000159EE C9C0                       		muls.w	d0,d4
000159F0 4844                       		swap	d4
000159F2 CBC1                       		muls.w	d1,d5
000159F4 4845                       		swap	d5
000159F6 D842                       		add.w	d2,d4
000159F8 DA43                       		add.w	d3,d5
000159FA 3144 000C                  		move.w	d4,$C(a0)
000159FE 3145 0008                  		move.w	d5,8(a0)
00015A02 4E75                       		rts	
00015A04                            ; ===========================================================================
00015A04                            
00015A04                            Obj67_ChkDel:				; XREF: Obj67_Action
00015A04 3028 0032                  		move.w	$32(a0),d0
00015A08 0240 FF80                  		andi.w	#-$80,d0
00015A0C 3238 F700                  		move.w	($FFFFF700).w,d1
00015A10 0441 0080                  		subi.w	#$80,d1
00015A14 0241 FF80                  		andi.w	#-$80,d1
00015A18 9041                       		sub.w	d1,d0
00015A1A 0C40 0280                  		cmpi.w	#$280,d0
00015A1E 6200                       		bhi.s	Obj67_Delete
00015A20 4EF9 0000 D95E             		jmp	DisplaySprite
00015A26                            ; ===========================================================================
00015A26                            
00015A26                            Obj67_Delete:
00015A26 4EF9 0000 D99A             		jmp	DeleteObject
00015A2C                            ; ===========================================================================
00015A2C                            ; ---------------------------------------------------------------------------
00015A2C                            ; Sprite mappings - disc that you run around (SBZ)
00015A2C                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015A2C                            ; part of the level tiles.)
00015A2C                            ; ---------------------------------------------------------------------------
00015A2C                            Map_obj67:
00015A2C                            	include "_maps\obj67.asm"
00015A2C                            ; ---------------------------------------------------------------------------
00015A2C                            ; Sprite mappings - disc that you run around (SBZ)
00015A2C                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015A2C                            ; part of the level tiles.)
00015A2C                            ; ---------------------------------------------------------------------------
00015A2C 0000                       		dc.w byte_15688-Map_obj67
00015A2E 01                         byte_15688:	dc.b 1
00015A2F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015A34                            		even
00015A34                            		even
00015A34                            
00015A34                            ; ===========================================================================
00015A34                            ; ---------------------------------------------------------------------------
00015A34                            ; Object 68 - conveyor belts (SBZ)
00015A34                            ; ---------------------------------------------------------------------------
00015A34                            
00015A34                            Obj68:					; XREF: Obj_Index
00015A34 7000                       		moveq	#0,d0
00015A36 1028 0024                  		move.b	$24(a0),d0
00015A3A 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015A3E 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015A42                            ; ===========================================================================
00015A42 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015A44 0000                       		dc.w Obj68_Action-Obj68_Index
00015A46                            ; ===========================================================================
00015A46                            
00015A46                            Obj68_Main:				; XREF: Obj68_Index
00015A46 5428 0024                  		addq.b	#2,$24(a0)
00015A4A 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015A50 1228 0028                  		move.b	$28(a0),d1	; get object type
00015A54 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015A58 6700                       		beq.s	loc_156BA	; if zero, branch
00015A5A 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015A60                            
00015A60                            loc_156BA:
00015A60 1228 0028                  		move.b	$28(a0),d1	; get object type
00015A64 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015A68 4881                       		ext.w	d1
00015A6A E841                       		asr.w	#4,d1
00015A6C 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015A70                            
00015A70                            Obj68_Action:				; XREF: Obj68_Index
00015A70 6100                       		bsr.s	Obj68_MoveSonic
00015A72 3028 0008                  		move.w	8(a0),d0
00015A76 0240 FF80                  		andi.w	#$FF80,d0
00015A7A 3238 F700                  		move.w	($FFFFF700).w,d1
00015A7E 0441 0080                  		subi.w	#$80,d1
00015A82 0241 FF80                  		andi.w	#$FF80,d1
00015A86 9041                       		sub.w	d1,d0
00015A88 0C40 0280                  		cmpi.w	#$280,d0
00015A8C 6200                       		bhi.s	Obj68_Delete
00015A8E 4E75                       		rts	
00015A90                            ; ===========================================================================
00015A90                            
00015A90                            Obj68_Delete:
00015A90 4EF9 0000 D99A             		jmp	DeleteObject
00015A96                            ; ===========================================================================
00015A96                            
00015A96                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015A96 7400                       		moveq	#0,d2
00015A98 1428 0038                  		move.b	$38(a0),d2
00015A9C 3602                       		move.w	d2,d3
00015A9E D643                       		add.w	d3,d3
00015AA0 43F8 D000                  		lea	($FFFFD000).w,a1
00015AA4 3029 0008                  		move.w	8(a1),d0
00015AA8 9068 0008                  		sub.w	8(a0),d0
00015AAC D042                       		add.w	d2,d0
00015AAE B043                       		cmp.w	d3,d0
00015AB0 6400                       		bcc.s	locret_1572E
00015AB2 3229 000C                  		move.w	$C(a1),d1
00015AB6 9268 000C                  		sub.w	$C(a0),d1
00015ABA 0641 0030                  		addi.w	#$30,d1
00015ABE 0C41 0030                  		cmpi.w	#$30,d1
00015AC2 6400                       		bcc.s	locret_1572E
00015AC4 0829 0001 0022             		btst	#1,$22(a1)
00015ACA 6600                       		bne.s	locret_1572E
00015ACC 3028 0036                  		move.w	$36(a0),d0
00015AD0 D169 0008                  		add.w	d0,8(a1)
00015AD4                            
00015AD4                            locret_1572E:
00015AD4 4E75                       		rts	
00015AD6                            
00015AD6                            ; ===========================================================================
00015AD6                            ; ---------------------------------------------------------------------------
00015AD6                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015AD6                            ; ---------------------------------------------------------------------------
00015AD6                            
00015AD6                            Obj69:					; XREF: Obj_Index
00015AD6 7000                       		moveq	#0,d0
00015AD8 1028 0024                  		move.b	$24(a0),d0
00015ADC 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015AE0 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015AE4                            ; ===========================================================================
00015AE4 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015AE6 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015AE8 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015AEA                            ; ===========================================================================
00015AEA                            
00015AEA                            Obj69_Main:				; XREF: Obj69_Index
00015AEA 5428 0024                  		addq.b	#2,$24(a0)
00015AEE 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015AF6 317C 4492 0002             		move.w	#$4492,2(a0)
00015AFC 0028 0004 0001             		ori.b	#4,1(a0)
00015B02 117C 0080 0019             		move.b	#$80,$19(a0)
00015B08 7000                       		moveq	#0,d0
00015B0A 1028 0028                  		move.b	$28(a0),d0
00015B0E 0240 000F                  		andi.w	#$F,d0
00015B12 C0FC 003C                  		mulu.w	#$3C,d0
00015B16 3140 0032                  		move.w	d0,$32(a0)
00015B1A 4A28 0028                  		tst.b	$28(a0)
00015B1E 6A00                       		bpl.s	Obj69_Trapdoor
00015B20 5428 0024                  		addq.b	#2,$24(a0)
00015B24 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015B2C 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015B32 117C 0010 0019             		move.b	#$10,$19(a0)
00015B38 117C 0002 001C             		move.b	#2,$1C(a0)
00015B3E 7000                       		moveq	#0,d0
00015B40 1028 0028                  		move.b	$28(a0),d0	; get object type
00015B44 3200                       		move.w	d0,d1
00015B46 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015B4A C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015B4E 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015B52 3140 0032                  		move.w	d0,$32(a0)
00015B56 0241 0070                  		andi.w	#$70,d1
00015B5A 0641 0010                  		addi.w	#$10,d1
00015B5E E549                       		lsl.w	#2,d1
00015B60 5341                       		subq.w	#1,d1
00015B62 3141 0036                  		move.w	d1,$36(a0)
00015B66 6000                       		bra.s	Obj69_Spinner
00015B68                            ; ===========================================================================
00015B68                            
00015B68                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015B68 5368 0030                  		subq.w	#1,$30(a0)
00015B6C 6A00                       		bpl.s	Obj69_Animate
00015B6E 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015B74 0868 0000 001C             		bchg	#0,$1C(a0)
00015B7A 4A28 0001                  		tst.b	1(a0)
00015B7E 6A00                       		bpl.s	Obj69_Animate
00015B80 303C 00BB                  		move.w	#$BB,d0
00015B84 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00015B8A                            
00015B8A                            Obj69_Animate:
00015B8A 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015B90 4EB9 0000 AA10             		jsr	AnimateSprite
00015B96 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015B9A 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015B9C 323C 004B                  		move.w	#$4B,d1
00015BA0 343C 000C                  		move.w	#$C,d2
00015BA4 3602                       		move.w	d2,d3
00015BA6 5243                       		addq.w	#1,d3
00015BA8 3828 0008                  		move.w	8(a0),d4
00015BAC 6100 A180                  		bsr.w	SolidObject
00015BB0 6000 9E54                  		bra.w	MarkObjGone
00015BB4                            ; ===========================================================================
00015BB4                            
00015BB4                            Obj69_NotSolid:
00015BB4 0828 0003 0022             		btst	#3,$22(a0)
00015BBA 6700                       		beq.s	Obj69_Display
00015BBC 43F8 D000                  		lea	($FFFFD000).w,a1
00015BC0 08A9 0003 0022             		bclr	#3,$22(a1)
00015BC6 08A8 0003 0022             		bclr	#3,$22(a0)
00015BCC 4228 0025                  		clr.b	$25(a0)
00015BD0                            
00015BD0                            Obj69_Display:
00015BD0 6000 9E34                  		bra.w	MarkObjGone
00015BD4                            ; ===========================================================================
00015BD4                            
00015BD4                            Obj69_Spinner:				; XREF: Obj69_Index
00015BD4 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015BD8 C068 0036                  		and.w	$36(a0),d0
00015BDC 6600                       		bne.s	Obj69_Delay
00015BDE 117C 0001 0034             		move.b	#1,$34(a0)
00015BE4                            
00015BE4                            Obj69_Delay:
00015BE4 4A28 0034                  		tst.b	$34(a0)
00015BE8 6700                       		beq.s	Obj69_Animate2
00015BEA 5368 0030                  		subq.w	#1,$30(a0)
00015BEE 6A00                       		bpl.s	Obj69_Animate2
00015BF0 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015BF6 4228 0034                  		clr.b	$34(a0)
00015BFA 0868 0000 001C             		bchg	#0,$1C(a0)
00015C00                            
00015C00                            Obj69_Animate2:
00015C00 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015C06 4EB9 0000 AA10             		jsr	AnimateSprite
00015C0C 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015C10 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015C12 323C 001B                  		move.w	#$1B,d1
00015C16 343C 0007                  		move.w	#7,d2
00015C1A 3602                       		move.w	d2,d3
00015C1C 5243                       		addq.w	#1,d3
00015C1E 3828 0008                  		move.w	8(a0),d4
00015C22 6100 A10A                  		bsr.w	SolidObject
00015C26 6000 9DDE                  		bra.w	MarkObjGone
00015C2A                            ; ===========================================================================
00015C2A                            
00015C2A                            Obj69_NotSolid2:
00015C2A 0828 0003 0022             		btst	#3,$22(a0)
00015C30 6700                       		beq.s	Obj69_Display2
00015C32 43F8 D000                  		lea	($FFFFD000).w,a1
00015C36 08A9 0003 0022             		bclr	#3,$22(a1)
00015C3C 08A8 0003 0022             		bclr	#3,$22(a0)
00015C42 4228 0025                  		clr.b	$25(a0)
00015C46                            
00015C46                            Obj69_Display2:
00015C46 6000 9DBE                  		bra.w	MarkObjGone
00015C4A                            ; ===========================================================================
00015C4A                            Ani_obj69:
00015C4A                            	include "_anim\obj69.asm"
00015C4A                            ; ---------------------------------------------------------------------------
00015C4A                            ; Animation script - trapdoor (SBZ)
00015C4A                            ; ---------------------------------------------------------------------------
00015C4A 0000                       		dc.w byte_158AC-Ani_obj69
00015C4C 0000                       		dc.w byte_158B2-Ani_obj69
00015C4E 0000                       		dc.w byte_158B8-Ani_obj69
00015C50 0000                       		dc.w byte_158CC-Ani_obj69
00015C52 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015C58 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015C5E 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015C6B 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015C72 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015C7F 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015C86                            		even
00015C86                            		even
00015C86                            
00015C86                            ; ---------------------------------------------------------------------------
00015C86                            ; Sprite mappings - trapdoor (SBZ)
00015C86                            ; ---------------------------------------------------------------------------
00015C86                            Map_obj69:
00015C86                            	include "_maps\obj69.asm"
00015C86                            ; ---------------------------------------------------------------------------
00015C86                            ; Sprite mappings - trapdoor (SBZ)
00015C86                            ; ---------------------------------------------------------------------------
00015C86 0000                       		dc.w byte_158E6-Map_obj69
00015C88 0000                       		dc.w byte_158FB-Map_obj69
00015C8A 0000                       		dc.w byte_15924-Map_obj69
00015C8C 04                         byte_158E6:	dc.b 4
00015C8D F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015C92 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015C97 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015C9C F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015CA1 08                         byte_158FB:	dc.b 8
00015CA2 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015CA7 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015CAC 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015CB1 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015CB6 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015CBB 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015CC0 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015CC5 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015CCA 04                         byte_15924:	dc.b 4
00015CCB 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015CD0 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015CD5 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015CDA 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015CE0 00                         		even
00015CE0 00                         		even
00015CE0                            
00015CE0                            ; ---------------------------------------------------------------------------
00015CE0                            ; Sprite mappings - spinning platforms (SBZ)
00015CE0                            ; ---------------------------------------------------------------------------
00015CE0                            Map_obj69a:
00015CE0                            	include "_maps\obj69a.asm"
00015CE0                            ; ---------------------------------------------------------------------------
00015CE0                            ; Sprite mappings - spinning platforms (SBZ)
00015CE0                            ; ---------------------------------------------------------------------------
00015CE0 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00015CE4 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00015CE8 0000                       		dc.w byte_15970-Map_obj69a
00015CEA 02                         byte_15944:	dc.b 2
00015CEB F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015CF0 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00015CF5 02                         byte_1594F:	dc.b 2
00015CF6 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015CFB 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015D00 02                         byte_1595A:	dc.b 2
00015D01 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00015D06 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015D0B 02                         byte_15965:	dc.b 2
00015D0C F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015D11 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00015D16 02                         byte_15970:	dc.b 2
00015D17 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015D1C 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015D22 00                         		even
00015D22 00                         		even
00015D22                            
00015D22                            ; ===========================================================================
00015D22                            ; ---------------------------------------------------------------------------
00015D22                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015D22                            ; ---------------------------------------------------------------------------
00015D22                            
00015D22                            Obj6A:					; XREF: Obj_Index
00015D22 7000                       		moveq	#0,d0
00015D24 1028 0024                  		move.b	$24(a0),d0
00015D28 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015D2C 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015D30                            ; ===========================================================================
00015D30 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015D32 0000                       		dc.w Obj6A_Action-Obj6A_Index
00015D34                            ; ===========================================================================
00015D34                            
00015D34                            Obj6A_Main:				; XREF: Obj6A_Index
00015D34 5428 0024                  		addq.b	#2,$24(a0)
00015D38 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00015D40 317C 43B5 0002             		move.w	#$43B5,2(a0)
00015D46 117C 0004 0001             		move.b	#4,1(a0)
00015D4C 117C 0004 0018             		move.b	#4,$18(a0)
00015D52 117C 0020 0019             		move.b	#$20,$19(a0)
00015D58 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015D5E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015D64 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015D6A 6400                       		bcc.s	Obj6A_Action
00015D6C 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015D72                            
00015D72                            Obj6A_Action:				; XREF: Obj6A_Index
00015D72 7000                       		moveq	#0,d0
00015D74 1028 0028                  		move.b	$28(a0),d0
00015D78 0240 0007                  		andi.w	#7,d0
00015D7C D040                       		add.w	d0,d0
00015D7E 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00015D82 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00015D86 3028 003A                  		move.w	$3A(a0),d0
00015D8A 0240 FF80                  		andi.w	#$FF80,d0
00015D8E 3238 F700                  		move.w	($FFFFF700).w,d1
00015D92 0441 0080                  		subi.w	#$80,d1
00015D96 0241 FF80                  		andi.w	#$FF80,d1
00015D9A 9041                       		sub.w	d1,d0
00015D9C 0C40 0280                  		cmpi.w	#$280,d0
00015DA0 6200                       		bhi.s	Obj6A_Delete
00015DA2 4EF9 0000 D95E             		jmp	DisplaySprite
00015DA8                            ; ===========================================================================
00015DA8                            
00015DA8                            Obj6A_Delete:
00015DA8 4EF9 0000 D99A             		jmp	DeleteObject
00015DAE                            ; ===========================================================================
00015DAE 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00015DB2 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00015DB6 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00015DB8                            ; ===========================================================================
00015DB8                            
00015DB8                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00015DB8 4E75                       		rts	
00015DBA                            ; ===========================================================================
00015DBA                            
00015DBA                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00015DBA 323C 0060                  		move.w	#$60,d1
00015DBE 7000                       		moveq	#0,d0
00015DC0 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00015DC4 0828 0000 0022             		btst	#0,$22(a0)
00015DCA 6700                       		beq.s	Obj6A_Animate01
00015DCC 4440                       		neg.w	d0
00015DCE D041                       		add.w	d1,d0
00015DD0                            
00015DD0                            Obj6A_Animate01:
00015DD0 3228 003A                  		move.w	$3A(a0),d1
00015DD4 9240                       		sub.w	d0,d1
00015DD6 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00015DDA 5328 001E                  		subq.b	#1,$1E(a0)
00015DDE 6A00                       		bpl.s	loc_15A46
00015DE0 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00015DE6 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00015DEC                            
00015DEC                            loc_15A46:
00015DEC 4A28 0001                  		tst.b	1(a0)
00015DF0 6A00                       		bpl.s	locret_15A60
00015DF2 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015DF6 0240 000F                  		andi.w	#$F,d0
00015DFA 6600                       		bne.s	locret_15A60
00015DFC 303C 00B0                  		move.w	#$B0,d0
00015E00 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00015E06                            
00015E06                            locret_15A60:
00015E06 4E75                       		rts	
00015E08                            ; ===========================================================================
00015E08                            
00015E08                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00015E08 323C 0030                  		move.w	#$30,d1
00015E0C 7000                       		moveq	#0,d0
00015E0E 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015E12 0828 0000 0022             		btst	#0,$22(a0)
00015E18 6700                       		beq.s	Obj6A_Animate02
00015E1A 4440                       		neg.w	d0
00015E1C 0640 0080                  		addi.w	#$80,d0
00015E20                            
00015E20                            Obj6A_Animate02:
00015E20 3228 0038                  		move.w	$38(a0),d1
00015E24 9240                       		sub.w	d0,d1
00015E26 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00015E2A 5328 001E                  		subq.b	#1,$1E(a0)
00015E2E 6A00                       		bpl.s	loc_15A96
00015E30 117C 0002 001E             		move.b	#2,$1E(a0)
00015E36 0868 0000 001A             		bchg	#0,$1A(a0)
00015E3C                            
00015E3C                            loc_15A96:
00015E3C 4A28 0001                  		tst.b	1(a0)
00015E40 6A00                       		bpl.s	locret_15AB0
00015E42 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015E46 0C00 0018                  		cmpi.b	#$18,d0
00015E4A 6600                       		bne.s	locret_15AB0
00015E4C 303C 00B0                  		move.w	#$B0,d0
00015E50 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00015E56                            
00015E56                            locret_15AB0:
00015E56 4E75                       		rts	
00015E58                            ; ===========================================================================
00015E58                            
00015E58                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00015E58 4A28 003D                  		tst.b	$3D(a0)
00015E5C 6600                       		bne.s	Obj6A_Animate03
00015E5E 3038 D008                  		move.w	($FFFFD008).w,d0
00015E62 0440 00C0                  		subi.w	#$C0,d0
00015E66 6500                       		bcs.s	loc_15B02
00015E68 9068 0008                  		sub.w	8(a0),d0
00015E6C 6500                       		bcs.s	loc_15B02
00015E6E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015E72 0440 0080                  		subi.w	#$80,d0
00015E76 B068 000C                  		cmp.w	$C(a0),d0
00015E7A 6400                       		bcc.s	locret_15B04
00015E7C 0640 0100                  		addi.w	#$100,d0
00015E80 B068 000C                  		cmp.w	$C(a0),d0
00015E84 6500                       		bcs.s	locret_15B04
00015E86 117C 0001 003D             		move.b	#1,$3D(a0)
00015E8C 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00015E92 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015E98 117C 0002 001A             		move.b	#2,$1A(a0)
00015E9E 303C 00B0                  		move.w	#$B0,d0
00015EA2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00015EA8                            
00015EA8                            loc_15B02:
00015EA8 588F                       		addq.l	#4,sp
00015EAA                            
00015EAA                            locret_15B04:
00015EAA 4E75                       		rts	
00015EAC                            ; ===========================================================================
00015EAC                            
00015EAC                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00015EAC 4EB9 0000 D938             		jsr	SpeedToPos
00015EB2 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015EB8 5328 001E                  		subq.b	#1,$1E(a0)
00015EBC 6A00                       		bpl.s	locret_15B24
00015EBE 117C 0002 001E             		move.b	#2,$1E(a0)
00015EC4 0868 0000 001A             		bchg	#0,$1A(a0)
00015ECA                            
00015ECA                            locret_15B24:
00015ECA 4E75                       		rts	
00015ECC                            ; ===========================================================================
00015ECC                            
00015ECC                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00015ECC 4A28 003D                  		tst.b	$3D(a0)
00015ED0 6600                       		bne.s	Obj6A_Animate04
00015ED2 3038 D008                  		move.w	($FFFFD008).w,d0
00015ED6 0640 00E0                  		addi.w	#$E0,d0
00015EDA 9068 0008                  		sub.w	8(a0),d0
00015EDE 6400                       		bcc.s	loc_15B74
00015EE0 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015EE4 0440 0080                  		subi.w	#$80,d0
00015EE8 B068 000C                  		cmp.w	$C(a0),d0
00015EEC 6400                       		bcc.s	locret_15B76
00015EEE 0640 0100                  		addi.w	#$100,d0
00015EF2 B068 000C                  		cmp.w	$C(a0),d0
00015EF6 6500                       		bcs.s	locret_15B76
00015EF8 117C 0001 003D             		move.b	#1,$3D(a0)
00015EFE 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00015F04 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015F0A 117C 0002 001A             		move.b	#2,$1A(a0)
00015F10 303C 00B0                  		move.w	#$B0,d0
00015F14 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00015F1A                            
00015F1A                            loc_15B74:
00015F1A 588F                       		addq.l	#4,sp
00015F1C                            
00015F1C                            locret_15B76:
00015F1C 4E75                       		rts	
00015F1E                            ; ===========================================================================
00015F1E                            
00015F1E                            Obj6A_Animate04:
00015F1E 4EB9 0000 D938             		jsr	SpeedToPos
00015F24 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015F2A 5328 001E                  		subq.b	#1,$1E(a0)
00015F2E 6A00                       		bpl.s	locret_15B96
00015F30 117C 0002 001E             		move.b	#2,$1E(a0)
00015F36 0868 0000 001A             		bchg	#0,$1A(a0)
00015F3C                            
00015F3C                            locret_15B96:
00015F3C 4E75                       		rts	
00015F3E                            ; ===========================================================================
00015F3E                            ; ---------------------------------------------------------------------------
00015F3E                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015F3E                            ; ---------------------------------------------------------------------------
00015F3E                            Map_obj6A:
00015F3E                            	include "_maps\obj6A.asm"
00015F3E                            ; ---------------------------------------------------------------------------
00015F3E                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015F3E                            ; ---------------------------------------------------------------------------
00015F3E 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00015F42 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00015F46 07                         byte_15BA0:	dc.b 7
00015F47 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015F4C D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015F51 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015F56 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015F5B E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015F60 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015F65 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015F6A 07                         byte_15BC4:	dc.b 7
00015F6B C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015F70 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015F75 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015F7A E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015F7F E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015F84 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015F89 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015F8E 04                         byte_15BE8:	dc.b 4
00015F8F E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015F94 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015F99 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015F9E 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015FA3 04                         byte_15BFD:	dc.b 4
00015FA4 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015FA9 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015FAE 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015FB3 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015FB8                            		even
00015FB8                            		even
00015FB8                            
00015FB8                            ; ===========================================================================
00015FB8                            ; ---------------------------------------------------------------------------
00015FB8                            ; Object 6B - stomper (SBZ)
00015FB8                            ; ---------------------------------------------------------------------------
00015FB8                            
00015FB8                            Obj6B:					; XREF: Obj_Index
00015FB8 7000                       		moveq	#0,d0
00015FBA 1028 0024                  		move.b	$24(a0),d0
00015FBE 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00015FC2 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00015FC6                            ; ===========================================================================
00015FC6 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00015FC8 0000                       		dc.w Obj6B_Action-Obj6B_Index
00015FCA                            
00015FCA 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00015FCE 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00015FD2 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00015FD6 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00015FDA 8040 0005                  		dc.b  $80, $40,	  0,   5
00015FDE                            ; ===========================================================================
00015FDE                            
00015FDE                            Obj6B_Main:				; XREF: Obj6B_Index
00015FDE 5428 0024                  		addq.b	#2,$24(a0)
00015FE2 7000                       		moveq	#0,d0
00015FE4 1028 0028                  		move.b	$28(a0),d0
00015FE8 E448                       		lsr.w	#2,d0
00015FEA 0240 001C                  		andi.w	#$1C,d0
00015FEE 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00015FF2 115B 0019                  		move.b	(a3)+,$19(a0)
00015FF6 115B 0016                  		move.b	(a3)+,$16(a0)
00015FFA E448                       		lsr.w	#2,d0
00015FFC 1140 001A                  		move.b	d0,$1A(a0)
00016000 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016008 317C 22C0 0002             		move.w	#$22C0,2(a0)
0001600E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016014 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00016016 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
0001601C 6700                       		beq.s	Obj6B_SBZ3
0001601E                            
0001601E                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
0001601E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016022 7000                       		moveq	#0,d0
00016024 1028 0023                  		move.b	$23(a0),d0
00016028 6700                       		beq.s	Obj6B_Delete
0001602A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016030                            
00016030                            Obj6B_Delete:
00016030 4EF9 0000 D99A             		jmp	DeleteObject
00016036                            ; ===========================================================================
00016036                            
00016036                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00016036 317C 41F0 0002             		move.w	#$41F0,2(a0)
0001603C 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016042 6600                       		bne.s	Obj6B_SBZ12
00016044 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016048 7000                       		moveq	#0,d0
0001604A 1028 0023                  		move.b	$23(a0),d0
0001604E 6700                       		beq.s	Obj6B_SBZ12
00016050 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016056 6700                       		beq.s	Obj6B_SBZ12
00016058 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001605C 60C0                       		bra.s	Obj6B_ChkGone
0001605E                            ; ===========================================================================
0001605E                            
0001605E                            Obj6B_SBZ12:				; XREF: Obj6B_Main
0001605E 0028 0004 0001             		ori.b	#4,1(a0)
00016064 117C 0004 0018             		move.b	#4,$18(a0)
0001606A 3168 0008 0034             		move.w	8(a0),$34(a0)
00016070 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016076 7000                       		moveq	#0,d0
00016078 101B                       		move.b	(a3)+,d0
0001607A 3140 003C                  		move.w	d0,$3C(a0)
0001607E 7000                       		moveq	#0,d0
00016080 1028 0028                  		move.b	$28(a0),d0
00016084 6A00                       		bpl.s	Obj6B_Action
00016086 0200 000F                  		andi.b	#$F,d0
0001608A 1140 003E                  		move.b	d0,$3E(a0)
0001608E 1153 0028                  		move.b	(a3),$28(a0)
00016092 0C13 0005                  		cmpi.b	#5,(a3)
00016096 6600                       		bne.s	Obj6B_ChkGone2
00016098 08E8 0004 0001             		bset	#4,1(a0)
0001609E                            
0001609E                            Obj6B_ChkGone2:
0001609E 45F8 FC00                  		lea	($FFFFFC00).w,a2
000160A2 7000                       		moveq	#0,d0
000160A4 1028 0023                  		move.b	$23(a0),d0
000160A8 6700                       		beq.s	Obj6B_Action
000160AA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000160B0                            
000160B0                            Obj6B_Action:				; XREF: Obj6B_Index
000160B0 3F28 0008                  		move.w	8(a0),-(sp)
000160B4 7000                       		moveq	#0,d0
000160B6 1028 0028                  		move.b	$28(a0),d0
000160BA 0240 000F                  		andi.w	#$F,d0
000160BE D040                       		add.w	d0,d0
000160C0 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000160C4 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000160C8 381F                       		move.w	(sp)+,d4
000160CA 4A28 0001                  		tst.b	1(a0)
000160CE 6A00                       		bpl.s	Obj6B_ChkDel
000160D0 7200                       		moveq	#0,d1
000160D2 1228 0019                  		move.b	$19(a0),d1
000160D6 0641 000B                  		addi.w	#$B,d1
000160DA 7400                       		moveq	#0,d2
000160DC 1428 0016                  		move.b	$16(a0),d2
000160E0 3602                       		move.w	d2,d3
000160E2 5243                       		addq.w	#1,d3
000160E4 6100 9C48                  		bsr.w	SolidObject
000160E8                            
000160E8                            Obj6B_ChkDel:
000160E8 3028 0034                  		move.w	$34(a0),d0
000160EC 0240 FF80                  		andi.w	#$FF80,d0
000160F0 3238 F700                  		move.w	($FFFFF700).w,d1
000160F4 0441 0080                  		subi.w	#$80,d1
000160F8 0241 FF80                  		andi.w	#$FF80,d1
000160FC 9041                       		sub.w	d1,d0
000160FE 0C40 0280                  		cmpi.w	#$280,d0
00016102 6200                       		bhi.s	loc_15D64
00016104 4EF9 0000 D95E             		jmp	DisplaySprite
0001610A                            ; ===========================================================================
0001610A                            
0001610A                            loc_15D64:
0001610A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016110 6600                       		bne.s	Obj6B_Delete2
00016112 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016116 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001611A 7000                       		moveq	#0,d0
0001611C 1028 0023                  		move.b	$23(a0),d0
00016120 6700                       		beq.s	Obj6B_Delete2
00016122 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016128                            
00016128                            Obj6B_Delete2:
00016128 4EF9 0000 D99A             		jmp	DeleteObject
0001612E                            ; ===========================================================================
0001612E 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016132 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00016136 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
0001613A                            ; ===========================================================================
0001613A                            
0001613A                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
0001613A 4E75                       		rts	
0001613C                            ; ===========================================================================
0001613C                            
0001613C                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
0001613C 4A28 0038                  		tst.b	$38(a0)
00016140 6600                       		bne.s	loc_15DB4
00016142 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016146 7000                       		moveq	#0,d0
00016148 1028 003E                  		move.b	$3E(a0),d0
0001614C 0832 0000 0000             		btst	#0,(a2,d0.w)
00016152 6700                       		beq.s	loc_15DC2
00016154 117C 0001 0038             		move.b	#1,$38(a0)
0001615A                            
0001615A                            loc_15DB4:
0001615A 3028 003C                  		move.w	$3C(a0),d0
0001615E B068 003A                  		cmp.w	$3A(a0),d0
00016162 6700                       		beq.s	loc_15DE0
00016164 5468 003A                  		addq.w	#2,$3A(a0)
00016168                            
00016168                            loc_15DC2:
00016168 3028 003A                  		move.w	$3A(a0),d0
0001616C 0828 0000 0022             		btst	#0,$22(a0)
00016172 6700                       		beq.s	loc_15DD4
00016174 4440                       		neg.w	d0
00016176 0640 0080                  		addi.w	#$80,d0
0001617A                            
0001617A                            loc_15DD4:
0001617A 3228 0034                  		move.w	$34(a0),d1
0001617E 9240                       		sub.w	d0,d1
00016180 3141 0008                  		move.w	d1,8(a0)
00016184 4E75                       		rts	
00016186                            ; ===========================================================================
00016186                            
00016186                            loc_15DE0:
00016186 5228 0028                  		addq.b	#1,$28(a0)
0001618A 317C 00B4 0036             		move.w	#$B4,$36(a0)
00016190 4228 0038                  		clr.b	$38(a0)
00016194 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016198 7000                       		moveq	#0,d0
0001619A 1028 0023                  		move.b	$23(a0),d0
0001619E 67C8                       		beq.s	loc_15DC2
000161A0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000161A6 60C0                       		bra.s	loc_15DC2
000161A8                            ; ===========================================================================
000161A8                            
000161A8                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000161A8 4A28 0038                  		tst.b	$38(a0)
000161AC 6600                       		bne.s	loc_15E14
000161AE 5368 0036                  		subq.w	#1,$36(a0)
000161B2 6600                       		bne.s	loc_15E1E
000161B4 117C 0001 0038             		move.b	#1,$38(a0)
000161BA                            
000161BA                            loc_15E14:
000161BA 4A68 003A                  		tst.w	$3A(a0)
000161BE 6700                       		beq.s	loc_15E3C
000161C0 5568 003A                  		subq.w	#2,$3A(a0)
000161C4                            
000161C4                            loc_15E1E:
000161C4 3028 003A                  		move.w	$3A(a0),d0
000161C8 0828 0000 0022             		btst	#0,$22(a0)
000161CE 6700                       		beq.s	loc_15E30
000161D0 4440                       		neg.w	d0
000161D2 0640 0080                  		addi.w	#$80,d0
000161D6                            
000161D6                            loc_15E30:
000161D6 3228 0034                  		move.w	$34(a0),d1
000161DA 9240                       		sub.w	d0,d1
000161DC 3141 0008                  		move.w	d1,8(a0)
000161E0 4E75                       		rts	
000161E2                            ; ===========================================================================
000161E2                            
000161E2                            loc_15E3C:
000161E2 5328 0028                  		subq.b	#1,$28(a0)
000161E6 4228 0038                  		clr.b	$38(a0)
000161EA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000161EE 7000                       		moveq	#0,d0
000161F0 1028 0023                  		move.b	$23(a0),d0
000161F4 67CE                       		beq.s	loc_15E1E
000161F6 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000161FC 60C6                       		bra.s	loc_15E1E
000161FE                            ; ===========================================================================
000161FE                            
000161FE                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
000161FE 4A28 0038                  		tst.b	$38(a0)
00016202 6600                       		bne.s	loc_15E7C
00016204 4A68 003A                  		tst.w	$3A(a0)
00016208 6700                       		beq.s	loc_15E6A
0001620A 5368 003A                  		subq.w	#1,$3A(a0)
0001620E 6000                       		bra.s	loc_15E8E
00016210                            ; ===========================================================================
00016210                            
00016210                            loc_15E6A:
00016210 5368 0036                  		subq.w	#1,$36(a0)
00016214 6A00                       		bpl.s	loc_15E8E
00016216 317C 003C 0036             		move.w	#$3C,$36(a0)
0001621C 117C 0001 0038             		move.b	#1,$38(a0)
00016222                            
00016222                            loc_15E7C:
00016222 5068 003A                  		addq.w	#8,$3A(a0)
00016226 3028 003A                  		move.w	$3A(a0),d0
0001622A B068 003C                  		cmp.w	$3C(a0),d0
0001622E 6600                       		bne.s	loc_15E8E
00016230 4228 0038                  		clr.b	$38(a0)
00016234                            
00016234                            loc_15E8E:
00016234 3028 003A                  		move.w	$3A(a0),d0
00016238 0828 0000 0022             		btst	#0,$22(a0)
0001623E 6700                       		beq.s	loc_15EA0
00016240 4440                       		neg.w	d0
00016242 0640 0038                  		addi.w	#$38,d0
00016246                            
00016246                            loc_15EA0:
00016246 3228 0030                  		move.w	$30(a0),d1
0001624A D240                       		add.w	d0,d1
0001624C 3141 000C                  		move.w	d1,$C(a0)
00016250 4E75                       		rts	
00016252                            ; ===========================================================================
00016252                            
00016252                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016252 4A28 0038                  		tst.b	$38(a0)
00016256 6600                       		bne.s	loc_15ED0
00016258 4A68 003A                  		tst.w	$3A(a0)
0001625C 6700                       		beq.s	loc_15EBE
0001625E 5168 003A                  		subq.w	#8,$3A(a0)
00016262 6000                       		bra.s	loc_15EF0
00016264                            ; ===========================================================================
00016264                            
00016264                            loc_15EBE:
00016264 5368 0036                  		subq.w	#1,$36(a0)
00016268 6A00                       		bpl.s	loc_15EF0
0001626A 317C 003C 0036             		move.w	#$3C,$36(a0)
00016270 117C 0001 0038             		move.b	#1,$38(a0)
00016276                            
00016276                            loc_15ED0:
00016276 3028 003A                  		move.w	$3A(a0),d0
0001627A B068 003C                  		cmp.w	$3C(a0),d0
0001627E 6700                       		beq.s	loc_15EE0
00016280 5068 003A                  		addq.w	#8,$3A(a0)
00016284 6000                       		bra.s	loc_15EF0
00016286                            ; ===========================================================================
00016286                            
00016286                            loc_15EE0:
00016286 5368 0036                  		subq.w	#1,$36(a0)
0001628A 6A00                       		bpl.s	loc_15EF0
0001628C 317C 003C 0036             		move.w	#$3C,$36(a0)
00016292 4228 0038                  		clr.b	$38(a0)
00016296                            
00016296                            loc_15EF0:
00016296 3028 003A                  		move.w	$3A(a0),d0
0001629A 0828 0000 0022             		btst	#0,$22(a0)
000162A0 6700                       		beq.s	loc_15F02
000162A2 4440                       		neg.w	d0
000162A4 0640 0038                  		addi.w	#$38,d0
000162A8                            
000162A8                            loc_15F02:
000162A8 3228 0030                  		move.w	$30(a0),d1
000162AC D240                       		add.w	d0,d1
000162AE 3141 000C                  		move.w	d1,$C(a0)
000162B2 4E75                       		rts	
000162B4                            ; ===========================================================================
000162B4                            
000162B4                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000162B4 4A28 0038                  		tst.b	$38(a0)
000162B8 6600                       		bne.s	loc_15F3E
000162BA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000162BE 7000                       		moveq	#0,d0
000162C0 1028 003E                  		move.b	$3E(a0),d0
000162C4 0832 0000 0000             		btst	#0,(a2,d0.w)
000162CA 6700                       		beq.s	locret_15F5C
000162CC 117C 0001 0038             		move.b	#1,$38(a0)
000162D2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000162D6 7000                       		moveq	#0,d0
000162D8 1028 0023                  		move.b	$23(a0),d0
000162DC 6700                       		beq.s	loc_15F3E
000162DE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000162E4                            
000162E4                            loc_15F3E:
000162E4 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000162EC 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
000162F4 3168 0008 0034             		move.w	8(a0),$34(a0)
000162FA 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016300 6700                       		beq.s	loc_15F5E
00016302                            
00016302                            locret_15F5C:
00016302 4E75                       		rts	
00016304                            ; ===========================================================================
00016304                            
00016304                            loc_15F5E:
00016304 4228 0028                  		clr.b	$28(a0)
00016308 4228 0038                  		clr.b	$38(a0)
0001630C 4E75                       		rts	
0001630E                            ; ===========================================================================
0001630E                            ; ---------------------------------------------------------------------------
0001630E                            ; Sprite mappings - stomper and	platforms (SBZ)
0001630E                            ; ---------------------------------------------------------------------------
0001630E                            Map_obj6B:
0001630E                            	include "_maps\obj6B.asm"
0001630E                            ; ---------------------------------------------------------------------------
0001630E                            ; Sprite mappings - stomper and	platforms (SBZ)
0001630E                            ; ---------------------------------------------------------------------------
0001630E 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016312 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016316 0000                       		dc.w byte_15FB0-Map_obj6B
00016318 04                         byte_15F72:	dc.b 4
00016319 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
0001631E F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016323 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016328 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
0001632D 08                         byte_15F87:	dc.b 8
0001632E E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016333 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016338 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
0001633D E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016342 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016347 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001634C 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016351 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016356 0E                         byte_15FB0:	dc.b $E
00016357 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
0001635C C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016361 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016366 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001636B C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016370 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016375 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0001637A C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
0001637F E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016384 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016389 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
0001638E 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016393 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016398 200F 0058 80               		dc.b $20, $F, 0, $58, $80
0001639E 00                         		even
0001639E 00                         		even
0001639E                            
0001639E                            ; ===========================================================================
0001639E                            ; ---------------------------------------------------------------------------
0001639E                            ; Object 6C - vanishing	platforms (SBZ)
0001639E                            ; ---------------------------------------------------------------------------
0001639E                            
0001639E                            Obj6C:					; XREF: Obj_Index
0001639E 7000                       		moveq	#0,d0
000163A0 1028 0024                  		move.b	$24(a0),d0
000163A4 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000163A8 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000163AC                            ; ===========================================================================
000163AC 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000163AE 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000163B0 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000163B2 0000                       		dc.w loc_16068-Obj6C_Index
000163B4                            ; ===========================================================================
000163B4                            
000163B4                            Obj6C_Main:				; XREF: Obj6C_Index
000163B4 5C28 0024                  		addq.b	#6,$24(a0)
000163B8 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000163C0 317C 44C3 0002             		move.w	#$44C3,2(a0)
000163C6 0028 0004 0001             		ori.b	#4,1(a0)
000163CC 117C 0010 0019             		move.b	#$10,$19(a0)
000163D2 117C 0004 0018             		move.b	#4,$18(a0)
000163D8 7000                       		moveq	#0,d0
000163DA 1028 0028                  		move.b	$28(a0),d0	; get object type
000163DE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000163E2 5240                       		addq.w	#1,d0		; add 1
000163E4 EF48                       		lsl.w	#7,d0		; multiply by $80
000163E6 3200                       		move.w	d0,d1
000163E8 5340                       		subq.w	#1,d0
000163EA 3140 0030                  		move.w	d0,$30(a0)
000163EE 3140 0032                  		move.w	d0,$32(a0)
000163F2 7000                       		moveq	#0,d0
000163F4 1028 0028                  		move.b	$28(a0),d0	; get object type
000163F8 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000163FC 0641 0080                  		addi.w	#$80,d1
00016400 C0C1                       		mulu.w	d1,d0
00016402 E088                       		lsr.l	#8,d0
00016404 3140 0036                  		move.w	d0,$36(a0)
00016408 5341                       		subq.w	#1,d1
0001640A 3141 0038                  		move.w	d1,$38(a0)
0001640E                            
0001640E                            loc_16068:				; XREF: Obj6C_Index
0001640E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016412 9068 0036                  		sub.w	$36(a0),d0
00016416 C068 0038                  		and.w	$38(a0),d0
0001641A 6600                       		bne.s	Obj6C_Animate
0001641C 5928 0024                  		subq.b	#4,$24(a0)
00016420 6000                       		bra.s	Obj6C_Vanish
00016422                            ; ===========================================================================
00016422                            
00016422                            Obj6C_Animate:
00016422 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016428 4EB9 0000 AA10             		jsr	AnimateSprite
0001642E 6000 95D6                  		bra.w	MarkObjGone
00016432                            ; ===========================================================================
00016432                            
00016432                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016432 5368 0030                  		subq.w	#1,$30(a0)
00016436 6A00                       		bpl.s	loc_160AA
00016438 317C 007F 0030             		move.w	#127,$30(a0)
0001643E 4A28 001C                  		tst.b	$1C(a0)
00016442 6700                       		beq.s	loc_160A4
00016444 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001644A                            
0001644A                            loc_160A4:
0001644A 0868 0000 001C             		bchg	#0,$1C(a0)
00016450                            
00016450                            loc_160AA:
00016450 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016456 4EB9 0000 AA10             		jsr	AnimateSprite
0001645C 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016462 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016464 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0001646A 6600                       		bne.s	loc_160D6
0001646C 7200                       		moveq	#0,d1
0001646E 1228 0019                  		move.b	$19(a0),d1
00016472 4EB9 0000 7774             		jsr	(PlatformObject).l
00016478 6000 958C                  		bra.w	MarkObjGone
0001647C                            ; ===========================================================================
0001647C                            
0001647C                            loc_160D6:
0001647C 7200                       		moveq	#0,d1
0001647E 1228 0019                  		move.b	$19(a0),d1
00016482 4EB9 0000 78E8             		jsr	(ExitPlatform).l
00016488 3428 0008                  		move.w	8(a0),d2
0001648C 4EB9 0000 7E52             		jsr	(MvSonicOnPtfm2).l
00016492 6000 9572                  		bra.w	MarkObjGone
00016496                            ; ===========================================================================
00016496                            
00016496                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016496 0828 0003 0022             		btst	#3,$22(a0)
0001649C 6700                       		beq.s	Obj6C_Display
0001649E 43F8 D000                  		lea	($FFFFD000).w,a1
000164A2 08A9 0003 0022             		bclr	#3,$22(a1)
000164A8 08A8 0003 0022             		bclr	#3,$22(a0)
000164AE 117C 0002 0024             		move.b	#2,$24(a0)
000164B4 4228 0025                  		clr.b	$25(a0)
000164B8                            
000164B8                            Obj6C_Display:
000164B8 6000 954C                  		bra.w	MarkObjGone
000164BC                            ; ===========================================================================
000164BC                            Ani_obj6C:
000164BC                            	include "_anim\obj6C.asm"
000164BC                            ; ---------------------------------------------------------------------------
000164BC                            ; Animation script - vanishing platforms (SBZ)
000164BC                            ; ---------------------------------------------------------------------------
000164BC 0000                       		dc.w byte_1611A-Ani_obj6C
000164BE 0000                       		dc.w byte_16122-Ani_obj6C
000164C0 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
000164C8 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
000164D0                            		even
000164D0                            		even
000164D0                            
000164D0                            ; ---------------------------------------------------------------------------
000164D0                            ; Sprite mappings - vanishing platforms	(SBZ)
000164D0                            ; ---------------------------------------------------------------------------
000164D0                            Map_obj6C:
000164D0                            	include "_maps\obj6C.asm"
000164D0                            ; ---------------------------------------------------------------------------
000164D0                            ; Sprite mappings - vanishing platforms	(SBZ)
000164D0                            ; ---------------------------------------------------------------------------
000164D0 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
000164D4 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
000164D8 01                         byte_16132:	dc.b 1
000164D9 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
000164DE 01                         byte_16138:	dc.b 1
000164DF F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000164E4 01                         byte_1613E:	dc.b 1
000164E5 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000164EA 00                         byte_16144:	dc.b 0
000164EC 00                         		even
000164EC 00                         		even
000164EC                            
000164EC                            ; ===========================================================================
000164EC                            ; ---------------------------------------------------------------------------
000164EC                            ; Object 6E - electrocution orbs (SBZ)
000164EC                            ; ---------------------------------------------------------------------------
000164EC                            
000164EC                            Obj6E:					; XREF: Obj_Index
000164EC 7000                       		moveq	#0,d0
000164EE 1028 0024                  		move.b	$24(a0),d0
000164F2 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
000164F6 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
000164FA                            ; ===========================================================================
000164FA 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
000164FC 0000                       		dc.w Obj6E_Shock-Obj6E_Index
000164FE                            ; ===========================================================================
000164FE                            
000164FE                            Obj6E_Main:				; XREF: Obj6E_Index
000164FE 5428 0024                  		addq.b	#2,$24(a0)
00016502 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
0001650A 317C 047E 0002             		move.w	#$47E,2(a0)
00016510 0028 0004 0001             		ori.b	#4,1(a0)
00016516 117C 0028 0019             		move.b	#$28,$19(a0)
0001651C 7000                       		moveq	#0,d0
0001651E 1028 0028                  		move.b	$28(a0),d0	; read object type
00016522 E948                       		lsl.w	#4,d0		; multiply by $10
00016524 5340                       		subq.w	#1,d0
00016526 3140 0034                  		move.w	d0,$34(a0)
0001652A                            
0001652A                            Obj6E_Shock:				; XREF: Obj6E_Index
0001652A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001652E C068 0034                  		and.w	$34(a0),d0
00016532 6600                       		bne.s	Obj6E_Animate
00016534 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
0001653A 4A28 0001                  		tst.b	1(a0)
0001653E 6A00                       		bpl.s	Obj6E_Animate
00016540 303C 00B1                  		move.w	#$B1,d0
00016544 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play electricity sound
0001654A                            
0001654A                            Obj6E_Animate:
0001654A 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016550 4EB9 0000 AA10             		jsr	AnimateSprite
00016556 117C 0000 0020             		move.b	#0,$20(a0)
0001655C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016562 6600                       		bne.s	Obj6E_Display	; if not, branch
00016564 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
0001656A                            
0001656A                            Obj6E_Display:
0001656A 6000 949A                  		bra.w	MarkObjGone
0001656E                            ; ===========================================================================
0001656E                            Ani_obj6E:
0001656E                            	include "_anim\obj6E.asm"
0001656E                            ; ---------------------------------------------------------------------------
0001656E                            ; Animation script - electrocution orbs (SBZ)
0001656E                            ; ---------------------------------------------------------------------------
0001656E 0000                       		dc.w byte_161CC-Ani_obj6E
00016570 0000                       		dc.w byte_161D0-Ani_obj6E
00016572 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016576 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016586                            		even
00016586                            		even
00016586                            
00016586                            ; ---------------------------------------------------------------------------
00016586                            ; Sprite mappings - electrocution orbs (SBZ)
00016586                            ; ---------------------------------------------------------------------------
00016586                            Map_obj6E:
00016586                            	include "_maps\obj6E.asm"
00016586                            ; ---------------------------------------------------------------------------
00016586                            ; Sprite mappings - electrocution orbs (SBZ)
00016586                            ; ---------------------------------------------------------------------------
00016586 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
0001658A 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
0001658E 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00016592 02                         byte_161EC:	dc.b 2
00016593 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016598 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001659D 03                         byte_161F7:	dc.b 3
0001659E F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000165A3 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000165A8 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000165AD 05                         byte_16207:	dc.b 5
000165AE F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000165B3 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000165B8 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000165BD F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000165C2 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000165C7 04                         byte_16221:	dc.b 4
000165C8 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000165CD 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000165D2 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000165D7 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000165DC 06                         byte_16236:	dc.b 6
000165DD F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000165E2 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000165E7 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
000165EC F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
000165F1 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
000165F6 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
000165FB 04                         byte_16255:	dc.b 4
000165FC F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016601 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016606 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
0001660B F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00016610                            		even
00016610                            		even
00016610                            
00016610                            ; ===========================================================================
00016610                            ; ---------------------------------------------------------------------------
00016610                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016610                            ; ---------------------------------------------------------------------------
00016610                            
00016610                            Obj6F:					; XREF: Obj_Index
00016610 7000                       		moveq	#0,d0
00016612 1028 0024                  		move.b	$24(a0),d0
00016616 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
0001661A 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
0001661E 3028 0030                  		move.w	$30(a0),d0
00016622 0240 FF80                  		andi.w	#$FF80,d0
00016626 3238 F700                  		move.w	($FFFFF700).w,d1
0001662A 0441 0080                  		subi.w	#$80,d1
0001662E 0241 FF80                  		andi.w	#$FF80,d1
00016632 9041                       		sub.w	d1,d0
00016634 0C40 0280                  		cmpi.w	#$280,d0
00016638 6200                       		bhi.s	loc_1629A
0001663A                            
0001663A                            Obj6F_Display:
0001663A 4EF9 0000 D95E             		jmp	DisplaySprite
00016640                            ; ===========================================================================
00016640                            
00016640                            loc_1629A:
00016640 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016646 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016648 0C40 FF80                  		cmpi.w	#-$80,d0
0001664C 64EC                       		bcc.s	Obj6F_Display
0001664E                            
0001664E                            Obj6F_Act1or2:
0001664E 1028 002F                  		move.b	$2F(a0),d0
00016652 6A00                       		bpl.s	Obj6F_Delete
00016654 0240 007F                  		andi.w	#$7F,d0
00016658 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001665C 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016662                            
00016662                            Obj6F_Delete:
00016662 4EF9 0000 D99A             		jmp	DeleteObject
00016668                            ; ===========================================================================
00016668 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
0001666A 0000                       		dc.w loc_163D8-Obj6F_Index
0001666C                            ; ===========================================================================
0001666C                            
0001666C                            Obj6F_Main:				; XREF: Obj6F_Index
0001666C 1028 0028                  		move.b	$28(a0),d0
00016670 6B00 0000                  		bmi.w	loc_16380
00016674 5428 0024                  		addq.b	#2,$24(a0)
00016678 217C 0001 5CE0 0004        		move.l	#Map_obj69a,4(a0)
00016680 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016686 117C 0010 0019             		move.b	#$10,$19(a0)
0001668C 0028 0004 0001             		ori.b	#4,1(a0)
00016692 117C 0004 0018             		move.b	#4,$18(a0)
00016698 7000                       		moveq	#0,d0
0001669A 1028 0028                  		move.b	$28(a0),d0
0001669E 3200                       		move.w	d0,d1
000166A0 E648                       		lsr.w	#3,d0
000166A2 0240 001E                  		andi.w	#$1E,d0
000166A6 45FA 0000                  		lea	off_164A6(pc),a2
000166AA D4F2 0000                  		adda.w	(a2,d0.w),a2
000166AE 315A 0038                  		move.w	(a2)+,$38(a0)
000166B2 315A 0030                  		move.w	(a2)+,$30(a0)
000166B6 214A 003C                  		move.l	a2,$3C(a0)
000166BA 0241 000F                  		andi.w	#$F,d1
000166BE E549                       		lsl.w	#2,d1
000166C0 1141 0038                  		move.b	d1,$38(a0)
000166C4 117C 0004 003A             		move.b	#4,$3A(a0)
000166CA 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000166CE 6700                       		beq.s	loc_16356
000166D0 117C 0001 003B             		move.b	#1,$3B(a0)
000166D6 4428 003A                  		neg.b	$3A(a0)
000166DA 7200                       		moveq	#0,d1
000166DC 1228 0038                  		move.b	$38(a0),d1
000166E0 D228 003A                  		add.b	$3A(a0),d1
000166E4 B228 0039                  		cmp.b	$39(a0),d1
000166E8 6500                       		bcs.s	loc_16352
000166EA 1001                       		move.b	d1,d0
000166EC 7200                       		moveq	#0,d1
000166EE 4A00                       		tst.b	d0
000166F0 6A00                       		bpl.s	loc_16352
000166F2 1228 0039                  		move.b	$39(a0),d1
000166F6 5901                       		subq.b	#4,d1
000166F8                            
000166F8                            loc_16352:
000166F8 1141 0038                  		move.b	d1,$38(a0)
000166FC                            
000166FC                            loc_16356:
000166FC 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016702 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016708 4A41                       		tst.w	d1
0001670A 6600                       		bne.s	loc_1636C
0001670C 117C 0001 001C             		move.b	#1,$1C(a0)
00016712                            
00016712                            loc_1636C:
00016712 0C41 0008                  		cmpi.w	#8,d1
00016716 6600                       		bne.s	loc_16378
00016718 117C 0000 001C             		move.b	#0,$1C(a0)
0001671E                            
0001671E                            loc_16378:
0001671E 6100 C186                  		bsr.w	Obj63_ChangeDir
00016722 6000 0000                  		bra.w	loc_163D8
00016726                            ; ===========================================================================
00016726                            
00016726                            loc_16380:				; XREF: Obj6F_Main
00016726 1140 002F                  		move.b	d0,$2F(a0)
0001672A 0240 007F                  		andi.w	#$7F,d0
0001672E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016732 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016738 6700                       		beq.s	loc_1639A
0001673A 4EF9 0000 D99A             		jmp	DeleteObject
00016740                            ; ===========================================================================
00016740                            
00016740                            loc_1639A:
00016740 D040                       		add.w	d0,d0
00016742 0240 001E                  		andi.w	#$1E,d0
00016746 0640 0080                  		addi.w	#$80,d0
0001674A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016750 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016754 321A                       		move.w	(a2)+,d1
00016756 2248                       		movea.l	a0,a1
00016758 6000                       		bra.s	Obj6F_LoadPform
0001675A                            ; ===========================================================================
0001675A                            
0001675A                            Obj6F_Loop:
0001675A 4EB9 0000 DDE4             		jsr	SingleObjLoad
00016760 6600                       		bne.s	loc_163D0
00016762                            
00016762                            Obj6F_LoadPform:			; XREF: loc_1639A
00016762 12BC 006F                  		move.b	#$6F,0(a1)
00016766 335A 0008                  		move.w	(a2)+,8(a1)
0001676A 335A 000C                  		move.w	(a2)+,$C(a1)
0001676E 301A                       		move.w	(a2)+,d0
00016770 1340 0028                  		move.b	d0,$28(a1)
00016774                            
00016774                            loc_163D0:
00016774 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016778                            
00016778 588F                       		addq.l	#4,sp
0001677A 4E75                       		rts	
0001677C                            ; ===========================================================================
0001677C                            
0001677C                            loc_163D8:				; XREF: Obj6F_Index
0001677C 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016782 4EB9 0000 AA10             		jsr	AnimateSprite
00016788 4A28 001A                  		tst.b	$1A(a0)
0001678C 6600                       		bne.s	loc_16404
0001678E 3F28 0008                  		move.w	8(a0),-(sp)
00016792 6100 0000                  		bsr.w	loc_16424
00016796 323C 001B                  		move.w	#$1B,d1
0001679A 343C 0007                  		move.w	#7,d2
0001679E 3602                       		move.w	d2,d3
000167A0 5243                       		addq.w	#1,d3
000167A2 381F                       		move.w	(sp)+,d4
000167A4 6000 9588                  		bra.w	SolidObject
000167A8                            ; ===========================================================================
000167A8                            
000167A8                            loc_16404:
000167A8 0828 0003 0022             		btst	#3,$22(a0)
000167AE 6700                       		beq.s	loc_16420
000167B0 43F8 D000                  		lea	($FFFFD000).w,a1
000167B4 08A9 0003 0022             		bclr	#3,$22(a1)
000167BA 08A8 0003 0022             		bclr	#3,$22(a0)
000167C0 4228 0025                  		clr.b	$25(a0)
000167C4                            
000167C4                            loc_16420:
000167C4 6000 0002                  		bra.w	*+4
000167C8                            
000167C8                            loc_16424:
000167C8 3028 0008                  		move.w	8(a0),d0
000167CC B068 0034                  		cmp.w	$34(a0),d0
000167D0 6600                       		bne.s	loc_16484
000167D2 3028 000C                  		move.w	$C(a0),d0
000167D6 B068 0036                  		cmp.w	$36(a0),d0
000167DA 6600                       		bne.s	loc_16484
000167DC 7200                       		moveq	#0,d1
000167DE 1228 0038                  		move.b	$38(a0),d1
000167E2 D228 003A                  		add.b	$3A(a0),d1
000167E6 B228 0039                  		cmp.b	$39(a0),d1
000167EA 6500                       		bcs.s	loc_16456
000167EC 1001                       		move.b	d1,d0
000167EE 7200                       		moveq	#0,d1
000167F0 4A00                       		tst.b	d0
000167F2 6A00                       		bpl.s	loc_16456
000167F4 1228 0039                  		move.b	$39(a0),d1
000167F8 5901                       		subq.b	#4,d1
000167FA                            
000167FA                            loc_16456:
000167FA 1141 0038                  		move.b	d1,$38(a0)
000167FE 2268 003C                  		movea.l	$3C(a0),a1
00016802 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016808 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001680E 4A41                       		tst.w	d1
00016810 6600                       		bne.s	loc_16474
00016812 117C 0001 001C             		move.b	#1,$1C(a0)
00016818                            
00016818                            loc_16474:
00016818 0C41 0008                  		cmpi.w	#8,d1
0001681C 6600                       		bne.s	loc_16480
0001681E 117C 0000 001C             		move.b	#0,$1C(a0)
00016824                            
00016824                            loc_16480:
00016824 6100 C080                  		bsr.w	Obj63_ChangeDir
00016828                            
00016828                            loc_16484:
00016828 4EF9 0000 D938             		jmp	SpeedToPos
0001682E                            ; ===========================================================================
0001682E                            Ani_obj6F:
0001682E                            	include "_anim\obj6F.asm"
0001682E                            ; ---------------------------------------------------------------------------
0001682E                            ; Animation script - platform on conveyor belt (SBZ)
0001682E                            ; ---------------------------------------------------------------------------
0001682E 0000                       		dc.w byte_1648E-Ani_obj6F
00016830 0000                       		dc.w byte_164A2-Ani_obj6F
00016832 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001683F 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016846 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
0001684A 00                         		even
0001684A 00                         		even
0001684A                            
0001684A 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016850 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016856 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001686A 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001687E 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016892 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
000168A6 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
000168BA 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
000168CE                            ; ===========================================================================
000168CE                            ; ---------------------------------------------------------------------------
000168CE                            ; Object 70 - large girder block (SBZ)
000168CE                            ; ---------------------------------------------------------------------------
000168CE                            
000168CE                            Obj70:					; XREF: Obj_Index
000168CE 7000                       		moveq	#0,d0
000168D0 1028 0024                  		move.b	$24(a0),d0
000168D4 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
000168D8 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
000168DC                            ; ===========================================================================
000168DC 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
000168DE 0000                       		dc.w Obj70_Action-Obj70_Index
000168E0                            ; ===========================================================================
000168E0                            
000168E0                            Obj70_Main:				; XREF: Obj70_Index
000168E0 5428 0024                  		addq.b	#2,$24(a0)
000168E4 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
000168EC 317C 42F0 0002             		move.w	#$42F0,2(a0)
000168F2 0028 0004 0001             		ori.b	#4,1(a0)
000168F8 117C 0004 0018             		move.b	#4,$18(a0)
000168FE 117C 0060 0019             		move.b	#$60,$19(a0)
00016904 117C 0018 0016             		move.b	#$18,$16(a0)
0001690A 3168 0008 0032             		move.w	8(a0),$32(a0)
00016910 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016916 6100 0000                  		bsr.w	Obj70_Move2
0001691A                            
0001691A                            Obj70_Action:				; XREF: Obj70_Index
0001691A 3F28 0008                  		move.w	8(a0),-(sp)
0001691E 4A68 003A                  		tst.w	$3A(a0)
00016922 6700                       		beq.s	Obj70_Move
00016924 5368 003A                  		subq.w	#1,$3A(a0)
00016928 6600                       		bne.s	Obj70_Solid
0001692A                            
0001692A                            Obj70_Move:
0001692A 4EB9 0000 D938             		jsr	SpeedToPos
00016930 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016934 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016936 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
0001693A                            
0001693A                            Obj70_Solid:
0001693A 381F                       		move.w	(sp)+,d4
0001693C 4A28 0001                  		tst.b	1(a0)
00016940 6A00                       		bpl.s	Obj70_ChkDel
00016942 7200                       		moveq	#0,d1
00016944 1228 0019                  		move.b	$19(a0),d1
00016948 0641 000B                  		addi.w	#$B,d1
0001694C 7400                       		moveq	#0,d2
0001694E 1428 0016                  		move.b	$16(a0),d2
00016952 3602                       		move.w	d2,d3
00016954 5243                       		addq.w	#1,d3
00016956 6100 93D6                  		bsr.w	SolidObject
0001695A                            
0001695A                            Obj70_ChkDel:
0001695A 3028 0032                  		move.w	$32(a0),d0
0001695E 0240 FF80                  		andi.w	#$FF80,d0
00016962 3238 F700                  		move.w	($FFFFF700).w,d1
00016966 0441 0080                  		subi.w	#$80,d1
0001696A 0241 FF80                  		andi.w	#$FF80,d1
0001696E 9041                       		sub.w	d1,d0
00016970 0C40 0280                  		cmpi.w	#$280,d0
00016974 6200                       		bhi.s	Obj70_Delete
00016976 4EF9 0000 D95E             		jmp	DisplaySprite
0001697C                            ; ===========================================================================
0001697C                            
0001697C                            Obj70_Delete:
0001697C 4EF9 0000 D99A             		jmp	DeleteObject
00016982                            ; ===========================================================================
00016982                            
00016982                            Obj70_Move2:				; XREF: Obj70_Main
00016982 1028 0038                  		move.b	$38(a0),d0
00016986 0240 0018                  		andi.w	#$18,d0
0001698A 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016990 43F1 0000                  		lea	(a1,d0.w),a1
00016994 3159 0010                  		move.w	(a1)+,$10(a0)
00016998 3159 0012                  		move.w	(a1)+,$12(a0)
0001699C 3159 0034                  		move.w	(a1)+,$34(a0)
000169A0 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
000169A4 317C 0007 003A             		move.w	#7,$3A(a0)
000169AA 4E75                       		rts	
000169AC                            ; ===========================================================================
000169AC 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
000169B4 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
000169BC FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
000169C4 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
000169CC                            ; ---------------------------------------------------------------------------
000169CC                            ; Sprite mappings - large girder block (SBZ)
000169CC                            ; ---------------------------------------------------------------------------
000169CC                            Map_obj70:
000169CC                            	include "_maps\obj70.asm"
000169CC                            ; ---------------------------------------------------------------------------
000169CC                            ; Sprite mappings - large girder block (SBZ)
000169CC                            ; ---------------------------------------------------------------------------
000169CC 0000                       		dc.w byte_1662A-Map_obj70
000169CE 0C                         byte_1662A:	dc.b $C
000169CF E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
000169D4 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
000169D9 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
000169DE 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
000169E3 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000169E8 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
000169ED E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
000169F2 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
000169F7 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000169FC 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016A01 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016A06 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016A0C 00                         		even
00016A0C 00                         		even
00016A0C                            
00016A0C                            ; ===========================================================================
00016A0C                            ; ---------------------------------------------------------------------------
00016A0C                            ; Object 72 - teleporter (SBZ)
00016A0C                            ; ---------------------------------------------------------------------------
00016A0C                            
00016A0C                            Obj72:					; XREF: Obj_Index
00016A0C 7000                       		moveq	#0,d0
00016A0E 1028 0024                  		move.b	$24(a0),d0
00016A12 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016A16 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016A1A 3028 0008                  		move.w	8(a0),d0
00016A1E 0240 FF80                  		andi.w	#$FF80,d0
00016A22 3238 F700                  		move.w	($FFFFF700).w,d1
00016A26 0441 0080                  		subi.w	#$80,d1
00016A2A 0241 FF80                  		andi.w	#$FF80,d1
00016A2E 9041                       		sub.w	d1,d0
00016A30 0C40 0280                  		cmpi.w	#$280,d0
00016A34 6200                       		bhi.s	Obj72_Delete
00016A36 4E75                       		rts	
00016A38                            ; ===========================================================================
00016A38                            
00016A38                            Obj72_Delete:
00016A38 4EF9 0000 D99A             		jmp	DeleteObject
00016A3E                            ; ===========================================================================
00016A3E 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016A40 0000                       		dc.w loc_166C8-Obj72_Index
00016A42 0000                       		dc.w loc_1675E-Obj72_Index
00016A44 0000                       		dc.w loc_16798-Obj72_Index
00016A46                            ; ===========================================================================
00016A46                            
00016A46                            Obj72_Main:				; XREF: Obj72_Index
00016A46 5428 0024                  		addq.b	#2,$24(a0)
00016A4A 1028 0028                  		move.b	$28(a0),d0
00016A4E D040                       		add.w	d0,d0
00016A50 0240 001E                  		andi.w	#$1E,d0
00016A54 45FA 0000                  		lea	Obj72_Data(pc),a2
00016A58 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016A5C 315A 003A                  		move.w	(a2)+,$3A(a0)
00016A60 214A 003C                  		move.l	a2,$3C(a0)
00016A64 315A 0036                  		move.w	(a2)+,$36(a0)
00016A68 315A 0038                  		move.w	(a2)+,$38(a0)
00016A6C                            
00016A6C                            loc_166C8:				; XREF: Obj72_Index
00016A6C 43F8 D000                  		lea	($FFFFD000).w,a1
00016A70 3029 0008                  		move.w	8(a1),d0
00016A74 9068 0008                  		sub.w	8(a0),d0
00016A78 0828 0000 0022             		btst	#0,$22(a0)
00016A7E 6700                       		beq.s	loc_166E0
00016A80 0640 000F                  		addi.w	#$F,d0
00016A84                            
00016A84                            loc_166E0:
00016A84 0C40 0010                  		cmpi.w	#$10,d0
00016A88 6400                       		bcc.s	locret_1675C
00016A8A 3229 000C                  		move.w	$C(a1),d1
00016A8E 9268 000C                  		sub.w	$C(a0),d1
00016A92 0641 0020                  		addi.w	#$20,d1
00016A96 0C41 0040                  		cmpi.w	#$40,d1
00016A9A 6400                       		bcc.s	locret_1675C
00016A9C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016AA0 6600                       		bne.s	locret_1675C
00016AA2 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016AA8 6600                       		bne.s	loc_1670E
00016AAA 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016AB0 6500                       		bcs.s	locret_1675C
00016AB2                            
00016AB2                            loc_1670E:
00016AB2 5428 0024                  		addq.b	#2,$24(a0)
00016AB6 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016ABC 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016AC2 337C 0800 0014             		move.w	#$800,$14(a1)
00016AC8 337C 0000 0010             		move.w	#0,$10(a1)
00016ACE 337C 0000 0012             		move.w	#0,$12(a1)
00016AD4 08A8 0005 0022             		bclr	#5,$22(a0)
00016ADA 08A9 0005 0022             		bclr	#5,$22(a1)
00016AE0 08E9 0001 0022             		bset	#1,$22(a1)
00016AE6 3368 0008 0008             		move.w	8(a0),8(a1)
00016AEC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016AF2 4228 0032                  		clr.b	$32(a0)
00016AF6 303C 00BE                  		move.w	#$BE,d0
00016AFA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016B00                            
00016B00                            locret_1675C:
00016B00 4E75                       		rts	
00016B02                            ; ===========================================================================
00016B02                            
00016B02                            loc_1675E:				; XREF: Obj72_Index
00016B02 43F8 D000                  		lea	($FFFFD000).w,a1
00016B06 1028 0032                  		move.b	$32(a0),d0
00016B0A 5428 0032                  		addq.b	#2,$32(a0)
00016B0E 4EB9 0000 2BFA             		jsr	(CalcSine).l
00016B14 EA40                       		asr.w	#5,d0
00016B16 3428 000C                  		move.w	$C(a0),d2
00016B1A 9440                       		sub.w	d0,d2
00016B1C 3342 000C                  		move.w	d2,$C(a1)
00016B20 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016B26 6600                       		bne.s	locret_16796
00016B28 6100 0000                  		bsr.w	sub_1681C
00016B2C 5428 0024                  		addq.b	#2,$24(a0)
00016B30 303C 00BC                  		move.w	#$BC,d0
00016B34 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play teleport sound
00016B3A                            
00016B3A                            locret_16796:
00016B3A 4E75                       		rts	
00016B3C                            ; ===========================================================================
00016B3C                            
00016B3C                            loc_16798:				; XREF: Obj72_Index
00016B3C 588F                       		addq.l	#4,sp
00016B3E 43F8 D000                  		lea	($FFFFD000).w,a1
00016B42 5328 002E                  		subq.b	#1,$2E(a0)
00016B46 6A00                       		bpl.s	loc_167DA
00016B48 3368 0036 0008             		move.w	$36(a0),8(a1)
00016B4E 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016B54 7200                       		moveq	#0,d1
00016B56 1228 003A                  		move.b	$3A(a0),d1
00016B5A 5801                       		addq.b	#4,d1
00016B5C B228 003B                  		cmp.b	$3B(a0),d1
00016B60 6500                       		bcs.s	loc_167C2
00016B62 7200                       		moveq	#0,d1
00016B64 6000                       		bra.s	loc_16800
00016B66                            ; ===========================================================================
00016B66                            
00016B66                            loc_167C2:
00016B66 1141 003A                  		move.b	d1,$3A(a0)
00016B6A 2468 003C                  		movea.l	$3C(a0),a2
00016B6E 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016B74 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016B7A 6000 0000                  		bra.w	sub_1681C
00016B7E                            ; ===========================================================================
00016B7E                            
00016B7E                            loc_167DA:
00016B7E 2429 0008                  		move.l	8(a1),d2
00016B82 2629 000C                  		move.l	$C(a1),d3
00016B86 3029 0010                  		move.w	$10(a1),d0
00016B8A 48C0                       		ext.l	d0
00016B8C E180                       		asl.l	#8,d0
00016B8E D480                       		add.l	d0,d2
00016B90 3029 0012                  		move.w	$12(a1),d0
00016B94 48C0                       		ext.l	d0
00016B96 E180                       		asl.l	#8,d0
00016B98 D680                       		add.l	d0,d3
00016B9A 2342 0008                  		move.l	d2,8(a1)
00016B9E 2343 000C                  		move.l	d3,$C(a1)
00016BA2 4E75                       		rts	
00016BA4                            ; ===========================================================================
00016BA4                            
00016BA4                            loc_16800:
00016BA4 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016BAA 4228 0024                  		clr.b	$24(a0)
00016BAE 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016BB2 337C 0000 0010             		move.w	#0,$10(a1)
00016BB8 337C 0200 0012             		move.w	#$200,$12(a1)
00016BBE 4E75                       		rts	
00016BC0                            
00016BC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BC0                            
00016BC0                            
00016BC0                            sub_1681C:
00016BC0 7000                       		moveq	#0,d0
00016BC2 343C 1000                  		move.w	#$1000,d2
00016BC6 3028 0036                  		move.w	$36(a0),d0
00016BCA 9069 0008                  		sub.w	8(a1),d0
00016BCE 6C00                       		bge.s	loc_16830
00016BD0 4440                       		neg.w	d0
00016BD2 4442                       		neg.w	d2
00016BD4                            
00016BD4                            loc_16830:
00016BD4 7200                       		moveq	#0,d1
00016BD6 363C 1000                  		move.w	#$1000,d3
00016BDA 3228 0038                  		move.w	$38(a0),d1
00016BDE 9269 000C                  		sub.w	$C(a1),d1
00016BE2 6C00                       		bge.s	loc_16844
00016BE4 4441                       		neg.w	d1
00016BE6 4443                       		neg.w	d3
00016BE8                            
00016BE8                            loc_16844:
00016BE8 B240                       		cmp.w	d0,d1
00016BEA 6500                       		bcs.s	loc_1687A
00016BEC 7200                       		moveq	#0,d1
00016BEE 3228 0038                  		move.w	$38(a0),d1
00016BF2 9269 000C                  		sub.w	$C(a1),d1
00016BF6 4841                       		swap	d1
00016BF8 83C3                       		divs.w	d3,d1
00016BFA 7000                       		moveq	#0,d0
00016BFC 3028 0036                  		move.w	$36(a0),d0
00016C00 9069 0008                  		sub.w	8(a1),d0
00016C04 6700                       		beq.s	loc_16866
00016C06 4840                       		swap	d0
00016C08 81C1                       		divs.w	d1,d0
00016C0A                            
00016C0A                            loc_16866:
00016C0A 3340 0010                  		move.w	d0,$10(a1)
00016C0E 3343 0012                  		move.w	d3,$12(a1)
00016C12 4A41                       		tst.w	d1
00016C14 6A00                       		bpl.s	loc_16874
00016C16 4441                       		neg.w	d1
00016C18                            
00016C18                            loc_16874:
00016C18 3141 002E                  		move.w	d1,$2E(a0)
00016C1C 4E75                       		rts	
00016C1E                            ; ===========================================================================
00016C1E                            
00016C1E                            loc_1687A:
00016C1E 7000                       		moveq	#0,d0
00016C20 3028 0036                  		move.w	$36(a0),d0
00016C24 9069 0008                  		sub.w	8(a1),d0
00016C28 4840                       		swap	d0
00016C2A 81C2                       		divs.w	d2,d0
00016C2C 7200                       		moveq	#0,d1
00016C2E 3228 0038                  		move.w	$38(a0),d1
00016C32 9269 000C                  		sub.w	$C(a1),d1
00016C36 6700                       		beq.s	loc_16898
00016C38 4841                       		swap	d1
00016C3A 83C0                       		divs.w	d0,d1
00016C3C                            
00016C3C                            loc_16898:
00016C3C 3341 0012                  		move.w	d1,$12(a1)
00016C40 3342 0010                  		move.w	d2,$10(a1)
00016C44 4A40                       		tst.w	d0
00016C46 6A00                       		bpl.s	loc_168A6
00016C48 4440                       		neg.w	d0
00016C4A                            
00016C4A                            loc_168A6:
00016C4A 3140 002E                  		move.w	d0,$2E(a0)
00016C4E 4E75                       		rts	
00016C50                            ; End of function sub_1681C
00016C50                            
00016C50                            ; ===========================================================================
00016C50 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016C56 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016C5C 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016C60 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016C66 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016C6C 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016C72 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016C78 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016C7E 0884 0298 0894             		dc.w $884, $298, $894
00016C84 0270 0894 0190             		dc.w $270, $894, $190
00016C8A 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016C90 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016C96 1184 0498 1158             		dc.w $1184, $498, $1158
00016C9C 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016CA2 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016CA8 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016CAE 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016CB4 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016CBA 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016CC0 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00016CC6 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016CCC FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016CD2 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00016CD8                            ; ===========================================================================
00016CD8                            ; ---------------------------------------------------------------------------
00016CD8                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00016CD8                            ; ---------------------------------------------------------------------------
00016CD8                            
00016CD8                            Obj78:					; XREF: Obj_Index
00016CD8 7000                       		moveq	#0,d0
00016CDA 1028 0024                  		move.b	$24(a0),d0
00016CDE 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016CE2 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00016CE6                            ; ===========================================================================
00016CE6 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00016CE8 0000                       		dc.w Obj78_Action-Obj78_Index
00016CEA 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016CEC 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016CEE 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016CF0 0000                       		dc.w Obj78_Delete-Obj78_Index
00016CF2 0000                       		dc.w loc_16CC0-Obj78_Index
00016CF4                            ; ===========================================================================
00016CF4                            
00016CF4                            locret_16950:
00016CF4 4E75                       		rts	
00016CF6                            ; ===========================================================================
00016CF6                            
00016CF6                            Obj78_Main:				; XREF: Obj78_Index
00016CF6 117C 0007 0016             		move.b	#7,$16(a0)
00016CFC 117C 0008 0017             		move.b	#8,$17(a0)
00016D02 4EB9 0000 D90C             		jsr	ObjectFall
00016D08 4EBA E4B6                  		jsr	ObjHitFloor
00016D0C 4A41                       		tst.w	d1
00016D0E 6AE4                       		bpl.s	locret_16950
00016D10 D368 000C                  		add.w	d1,$C(a0)
00016D14 4268 0012                  		clr.w	$12(a0)
00016D18 5428 0024                  		addq.b	#2,$24(a0)
00016D1C 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00016D24 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016D2A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016D30 6700                       		beq.s	loc_16996
00016D32 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00016D38                            
00016D38                            loc_16996:
00016D38 0228 0003 0001             		andi.b	#3,1(a0)
00016D3E 0028 0004 0001             		ori.b	#4,1(a0)
00016D44 1168 0001 0022             		move.b	1(a0),$22(a0)
00016D4A 117C 0004 0018             		move.b	#4,$18(a0)
00016D50 117C 0008 0019             		move.b	#8,$19(a0)
00016D56 117C 000B 0020             		move.b	#$B,$20(a0)
00016D5C 3428 0008                  		move.w	8(a0),d2
00016D60 7A0C                       		moveq	#$C,d5
00016D62 0828 0000 0022             		btst	#0,$22(a0)
00016D68 6700                       		beq.s	loc_169CA
00016D6A 4445                       		neg.w	d5
00016D6C                            
00016D6C                            loc_169CA:
00016D6C 1C3C 0004                  		move.b	#4,d6
00016D70 7600                       		moveq	#0,d3
00016D72 7804                       		moveq	#4,d4
00016D74 2448                       		movea.l	a0,a2
00016D76 7202                       		moveq	#2,d1
00016D78                            
00016D78                            Obj78_LoadBody:
00016D78 4EB9 0000 DDFA             		jsr	SingleObjLoad2
00016D7E 6600                       		bne.s	Obj78_QuitLoad
00016D80 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00016D84 1346 0024                  		move.b	d6,$24(a1)
00016D88 5406                       		addq.b	#2,d6
00016D8A 2368 0004 0004             		move.l	4(a0),4(a1)
00016D90 3368 0002 0002             		move.w	2(a0),2(a1)
00016D96 137C 0005 0018             		move.b	#5,$18(a1)
00016D9C 137C 0008 0019             		move.b	#8,$19(a1)
00016DA2 137C 00CB 0020             		move.b	#$CB,$20(a1)
00016DA8 D445                       		add.w	d5,d2
00016DAA 3342 0008                  		move.w	d2,8(a1)
00016DAE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016DB4 1368 0022 0022             		move.b	$22(a0),$22(a1)
00016DBA 1368 0022 0001             		move.b	$22(a0),1(a1)
00016DC0 137C 0008 001A             		move.b	#8,$1A(a1)
00016DC6 234A 003C                  		move.l	a2,$3C(a1)
00016DCA 1344 003C                  		move.b	d4,$3C(a1)
00016DCE 5804                       		addq.b	#4,d4
00016DD0 2449                       		movea.l	a1,a2
00016DD2                            
00016DD2                            Obj78_QuitLoad:
00016DD2 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00016DD6                            
00016DD6 117C 0007 002A             		move.b	#7,$2A(a0)
00016DDC 4228 003C                  		clr.b	$3C(a0)
00016DE0                            
00016DE0                            Obj78_Action:				; XREF: Obj78_Index
00016DE0 4A28 0022                  		tst.b	$22(a0)
00016DE4 6B00 0000                  		bmi.w	loc_16C96
00016DE8 7000                       		moveq	#0,d0
00016DEA 1028 0025                  		move.b	$25(a0),d0
00016DEE 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00016DF2 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00016DF6 1228 002B                  		move.b	$2B(a0),d1
00016DFA 6A00                       		bpl.s	Obj78_Display
00016DFC 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016E02 1028 0026                  		move.b	$26(a0),d0
00016E06 0240 007F                  		andi.w	#$7F,d0
00016E0A 5828 0026                  		addq.b	#4,$26(a0)
00016E0E 1031 0000                  		move.b	(a1,d0.w),d0
00016E12 6A00                       		bpl.s	Obj78_AniHead
00016E14 08A8 0007 002B             		bclr	#7,$2B(a0)
00016E1A 6000                       		bra.s	Obj78_Display
00016E1C                            ; ===========================================================================
00016E1C                            
00016E1C                            Obj78_AniHead:
00016E1C 0201 0010                  		andi.b	#$10,d1
00016E20 D001                       		add.b	d1,d0
00016E22 1140 001A                  		move.b	d0,$1A(a0)
00016E26                            
00016E26                            Obj78_Display:
00016E26 3028 0008                  		move.w	8(a0),d0
00016E2A 0240 FF80                  		andi.w	#$FF80,d0
00016E2E 3238 F700                  		move.w	($FFFFF700).w,d1
00016E32 0441 0080                  		subi.w	#$80,d1
00016E36 0241 FF80                  		andi.w	#$FF80,d1
00016E3A 9041                       		sub.w	d1,d0
00016E3C 0C40 0280                  		cmpi.w	#$280,d0
00016E40 6200 0000                  		bhi.w	Obj78_ChkGone
00016E44 4EF9 0000 D95E             		jmp	DisplaySprite
00016E4A                            ; ===========================================================================
00016E4A                            
00016E4A                            Obj78_ChkGone:
00016E4A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016E4E 7000                       		moveq	#0,d0
00016E50 1028 0023                  		move.b	$23(a0),d0
00016E54 6700                       		beq.s	loc_16ABC
00016E56 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016E5C                            
00016E5C                            loc_16ABC:
00016E5C 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00016E62 4E75                       		rts	
00016E64                            ; ===========================================================================
00016E64                            
00016E64                            Obj78_Delete:				; XREF: Obj78_Index
00016E64 4EF9 0000 D99A             		jmp	DeleteObject
00016E6A                            ; ===========================================================================
00016E6A 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00016E6C 0000                       		dc.w loc_16B02-Obj78_Index2
00016E6E                            ; ===========================================================================
00016E6E                            
00016E6E                            Obj78_Move:				; XREF: Obj78_Index2
00016E6E 5328 002A                  		subq.b	#1,$2A(a0)
00016E72 6B00                       		bmi.s	Obj78_Move2
00016E74 4E75                       		rts	
00016E76                            ; ===========================================================================
00016E76                            
00016E76                            Obj78_Move2:
00016E76 5428 0025                  		addq.b	#2,$25(a0)
00016E7A 117C 0010 002A             		move.b	#$10,$2A(a0)
00016E80 317C FF40 0010             		move.w	#-$C0,$10(a0)
00016E86 317C 0040 0014             		move.w	#$40,$14(a0)
00016E8C 0868 0004 002B             		bchg	#4,$2B(a0)
00016E92 6600                       		bne.s	loc_16AFC
00016E94 4268 0010                  		clr.w	$10(a0)
00016E98 4468 0014                  		neg.w	$14(a0)
00016E9C                            
00016E9C                            loc_16AFC:
00016E9C 08E8 0007 002B             		bset	#7,$2B(a0)
00016EA2                            
00016EA2                            loc_16B02:				; XREF: Obj78_Index2
00016EA2 5328 002A                  		subq.b	#1,$2A(a0)
00016EA6 6B00                       		bmi.s	loc_16B5E
00016EA8 2F28 0008                  		move.l	8(a0),-(sp)
00016EAC 2428 0008                  		move.l	8(a0),d2
00016EB0 3028 0010                  		move.w	$10(a0),d0
00016EB4 0828 0000 0022             		btst	#0,$22(a0)
00016EBA 6700                       		beq.s	loc_16B1E
00016EBC 4440                       		neg.w	d0
00016EBE                            
00016EBE                            loc_16B1E:
00016EBE 48C0                       		ext.l	d0
00016EC0 E180                       		asl.l	#8,d0
00016EC2 D480                       		add.l	d0,d2
00016EC4 2142 0008                  		move.l	d2,8(a0)
00016EC8 4EBA E2F6                  		jsr	ObjHitFloor
00016ECC 241F                       		move.l	(sp)+,d2
00016ECE 0C41 FFF8                  		cmpi.w	#-8,d1
00016ED2 6D00                       		blt.s	loc_16B70
00016ED4 0C41 000C                  		cmpi.w	#$C,d1
00016ED8 6C00                       		bge.s	loc_16B70
00016EDA D368 000C                  		add.w	d1,$C(a0)
00016EDE 4842                       		swap	d2
00016EE0 B468 0008                  		cmp.w	8(a0),d2
00016EE4 6700                       		beq.s	locret_16B5C
00016EE6 7000                       		moveq	#0,d0
00016EE8 1028 003C                  		move.b	$3C(a0),d0
00016EEC 5228 003C                  		addq.b	#1,$3C(a0)
00016EF0 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016EF6 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016EFA                            
00016EFA                            locret_16B5C:
00016EFA 4E75                       		rts	
00016EFC                            ; ===========================================================================
00016EFC                            
00016EFC                            loc_16B5E:
00016EFC 5528 0025                  		subq.b	#2,$25(a0)
00016F00 117C 0007 002A             		move.b	#7,$2A(a0)
00016F06 317C 0000 0010             		move.w	#0,$10(a0)
00016F0C 4E75                       		rts	
00016F0E                            ; ===========================================================================
00016F0E                            
00016F0E                            loc_16B70:
00016F0E 2142 0008                  		move.l	d2,8(a0)
00016F12 0868 0000 0022             		bchg	#0,$22(a0)
00016F18 1168 0022 0001             		move.b	$22(a0),1(a0)
00016F1E 7000                       		moveq	#0,d0
00016F20 1028 003C                  		move.b	$3C(a0),d0
00016F24 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00016F2A 5228 003C                  		addq.b	#1,$3C(a0)
00016F2E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016F34 4E75                       		rts	
00016F36                            ; ===========================================================================
00016F36                            
00016F36                            Obj78_BodySeg2:				; XREF: Obj78_Index
00016F36 2268 003C                  		movea.l	$3C(a0),a1
00016F3A 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016F40 6A00                       		bpl.s	Obj78_BodySeg1
00016F42 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016F48 1028 0026                  		move.b	$26(a0),d0
00016F4C 0240 007F                  		andi.w	#$7F,d0
00016F50 5828 0026                  		addq.b	#4,$26(a0)
00016F54 4A31 0004                  		tst.b	4(a1,d0.w)
00016F58 6A00                       		bpl.s	Obj78_AniBody
00016F5A 5828 0026                  		addq.b	#4,$26(a0)
00016F5E                            
00016F5E                            Obj78_AniBody:
00016F5E 1031 0000                  		move.b	(a1,d0.w),d0
00016F62 5000                       		addq.b	#8,d0
00016F64 1140 001A                  		move.b	d0,$1A(a0)
00016F68                            
00016F68                            Obj78_BodySeg1:				; XREF: Obj78_Index
00016F68 2268 003C                  		movea.l	$3C(a0),a1
00016F6C 4A28 0022                  		tst.b	$22(a0)
00016F70 6B00 0000                  		bmi.w	loc_16C90
00016F74 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016F7A 1169 0025 0025             		move.b	$25(a1),$25(a0)
00016F80 6700 0000                  		beq.w	loc_16C64
00016F84 3169 0014 0014             		move.w	$14(a1),$14(a0)
00016F8A 3029 0010                  		move.w	$10(a1),d0
00016F8E D069 0014                  		add.w	$14(a1),d0
00016F92 3140 0010                  		move.w	d0,$10(a0)
00016F96 2428 0008                  		move.l	8(a0),d2
00016F9A 2602                       		move.l	d2,d3
00016F9C 3028 0010                  		move.w	$10(a0),d0
00016FA0 0828 0000 0022             		btst	#0,$22(a0)
00016FA6 6700                       		beq.s	loc_16C0C
00016FA8 4440                       		neg.w	d0
00016FAA                            
00016FAA                            loc_16C0C:
00016FAA 48C0                       		ext.l	d0
00016FAC E180                       		asl.l	#8,d0
00016FAE D480                       		add.l	d0,d2
00016FB0 2142 0008                  		move.l	d2,8(a0)
00016FB4 4843                       		swap	d3
00016FB6 B668 0008                  		cmp.w	8(a0),d3
00016FBA 6700                       		beq.s	loc_16C64
00016FBC 7000                       		moveq	#0,d0
00016FBE 1028 003C                  		move.b	$3C(a0),d0
00016FC2 1231 002C                  		move.b	$2C(a1,d0.w),d1
00016FC6 0C01 0080                  		cmpi.b	#-$80,d1
00016FCA 6600                       		bne.s	loc_16C50
00016FCC 4843                       		swap	d3
00016FCE 2143 0008                  		move.l	d3,8(a0)
00016FD2 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016FD6 0868 0000 0022             		bchg	#0,$22(a0)
00016FDC 1168 0022 0001             		move.b	$22(a0),1(a0)
00016FE2 5228 003C                  		addq.b	#1,$3C(a0)
00016FE6 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016FEC 6000                       		bra.s	loc_16C64
00016FEE                            ; ===========================================================================
00016FEE                            
00016FEE                            loc_16C50:
00016FEE 4881                       		ext.w	d1
00016FF0 D368 000C                  		add.w	d1,$C(a0)
00016FF4 5228 003C                  		addq.b	#1,$3C(a0)
00016FF8 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016FFE 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017002                            
00017002                            loc_16C64:
00017002 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017008 6700                       		beq.s	loc_16C90
0001700A 0C11 0027                  		cmpi.b	#$27,0(a1)
0001700E 6700                       		beq.s	loc_16C7C
00017010 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00017016 6600                       		bne.s	loc_16C82
00017018                            
00017018                            loc_16C7C:
00017018 117C 000A 0024             		move.b	#$A,$24(a0)
0001701E                            
0001701E                            loc_16C82:
0001701E 4EF9 0000 D95E             		jmp	DisplaySprite
00017024                            
00017024                            ; ===========================================================================
00017024 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
0001702C                            ; ===========================================================================
0001702C                            
0001702C                            loc_16C90:
0001702C 08E9 0007 0022             		bset	#7,$22(a1)
00017032                            
00017032                            loc_16C96:
00017032 7000                       		moveq	#0,d0
00017034 1028 0024                  		move.b	$24(a0),d0
00017038 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
0001703C 0828 0000 0022             		btst	#0,$22(a0)
00017042 6700                       		beq.s	loc_16CAA
00017044 4440                       		neg.w	d0
00017046                            
00017046                            loc_16CAA:
00017046 3140 0010                  		move.w	d0,$10(a0)
0001704A 317C FC00 0012             		move.w	#-$400,$12(a0)
00017050 117C 000C 0024             		move.b	#$C,$24(a0)
00017056 0228 00F8 001A             		andi.b	#-8,$1A(a0)
0001705C                            
0001705C                            loc_16CC0:				; XREF: Obj78_Index
0001705C 4EB9 0000 D90C             		jsr	ObjectFall
00017062 4A68 0012                  		tst.w	$12(a0)
00017066 6B00                       		bmi.s	loc_16CE0
00017068 4EBA E156                  		jsr	ObjHitFloor
0001706C 4A41                       		tst.w	d1
0001706E 6A00                       		bpl.s	loc_16CE0
00017070 D368 000C                  		add.w	d1,$C(a0)
00017074 317C FC00 0012             		move.w	#-$400,$12(a0)
0001707A                            
0001707A                            loc_16CE0:
0001707A 4A28 0001                  		tst.b	1(a0)
0001707E 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00017082 4EF9 0000 D95E             		jmp	DisplaySprite
00017088                            ; ===========================================================================
00017088                            Ani_obj78:
00017088                            	include "_anim\obj78.asm"
00017088                            ; ---------------------------------------------------------------------------
00017088                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017088                            ; ---------------------------------------------------------------------------
00017088 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017098 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000170A8 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000170B8 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
000170C8 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
000170D8 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
000170E8 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
000170F8 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017108                            	even
00017108                            	even
00017108                            
00017108                            ; ---------------------------------------------------------------------------
00017108                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017108                            ; ---------------------------------------------------------------------------
00017108                            Map_obj78:
00017108                            	include "_maps\obj78.asm"
00017108                            ; ---------------------------------------------------------------------------
00017108                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017108                            ; ---------------------------------------------------------------------------
00017108 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
0001710C 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017110 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017114 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017118 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
0001711C 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017120 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017124 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017128 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
0001712C 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017130 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017134 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017138 01                         byte_16D9E:	dc.b 1
00017139 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001713E 01                         byte_16DA4:	dc.b 1
0001713F F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017144 01                         byte_16DAA:	dc.b 1
00017145 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001714A 01                         byte_16DB0:	dc.b 1
0001714B EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017150 01                         byte_16DB6:	dc.b 1
00017151 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017156 01                         byte_16DBC:	dc.b 1
00017157 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001715C 01                         byte_16DC2:	dc.b 1
0001715D EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00017162 01                         byte_16DC8:	dc.b 1
00017163 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017168 01                         byte_16DCE:	dc.b 1
00017169 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001716E 01                         byte_16DD4:	dc.b 1
0001716F F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017174 01                         byte_16DDA:	dc.b 1
00017175 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001717A 01                         byte_16DE0:	dc.b 1
0001717B F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00017180 01                         byte_16DE6:	dc.b 1
00017181 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017186 01                         byte_16DEC:	dc.b 1
00017187 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001718C 01                         byte_16DF2:	dc.b 1
0001718D F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00017192 01                         byte_16DF8:	dc.b 1
00017193 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017198 01                         byte_16DFE:	dc.b 1
00017199 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001719E 01                         byte_16E04:	dc.b 1
0001719F F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000171A4 01                         byte_16E0A:	dc.b 1
000171A5 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000171AA 01                         byte_16E10:	dc.b 1
000171AB EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000171B0 01                         byte_16E16:	dc.b 1
000171B1 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000171B6 01                         byte_16E1C:	dc.b 1
000171B7 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000171BC 01                         byte_16E22:	dc.b 1
000171BD EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000171C2 01                         byte_16E28:	dc.b 1
000171C3 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000171C8                            		even
000171C8                            		even
000171C8                            
000171C8                            ; ===========================================================================
000171C8                            ; ---------------------------------------------------------------------------
000171C8                            ; Object 79 - lamppost
000171C8                            ; ---------------------------------------------------------------------------
000171C8                            
000171C8                            Obj79:					; XREF: Obj_Index
000171C8 7000                       		moveq	#0,d0
000171CA 1028 0024                  		move.b	$24(a0),d0
000171CE 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
000171D2 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
000171D6 4EFA 882E                  		jmp	MarkObjGone
000171DA                            ; ===========================================================================
000171DA 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
000171DC 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
000171DE 0000                       		dc.w Obj79_AfterHit-Obj79_Index
000171E0 0000                       		dc.w Obj79_Twirl-Obj79_Index
000171E2                            ; ===========================================================================
000171E2                            
000171E2                            Obj79_Main:				; XREF: Obj79_Index
000171E2 5428 0024                  		addq.b	#2,$24(a0)
000171E6 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
000171EE 317C 07A0 0002             		move.w	#$7A0,2(a0)
000171F4 117C 0004 0001             		move.b	#4,1(a0)
000171FA 117C 0008 0019             		move.b	#8,$19(a0)
00017200 117C 0005 0018             		move.b	#5,$18(a0)
00017206 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001720A 7000                       		moveq	#0,d0
0001720C 1028 0023                  		move.b	$23(a0),d0
00017210 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017216 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001721C 6600                       		bne.s	Obj79_RedLamp
0001721E 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017222 0201 007F                  		andi.b	#$7F,d1
00017226 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001722A 0202 007F                  		andi.b	#$7F,d2
0001722E B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017230 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017232                            
00017232                            Obj79_RedLamp:
00017232 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017238 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
0001723E 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017244 4E75                       		rts	
00017246                            ; ===========================================================================
00017246                            
00017246                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017246 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001724A 6600 0000                  		bne.w	locret_16F90	; if yes, branch
0001724E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017252 6B00 0000                  		bmi.w	locret_16F90
00017256 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001725A 0201 007F                  		andi.b	#$7F,d1
0001725E 1428 0028                  		move.b	$28(a0),d2
00017262 0202 007F                  		andi.b	#$7F,d2
00017266 B202                       		cmp.b	d2,d1
00017268 6500                       		bcs.s	Obj79_HitLamp
0001726A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001726E 7000                       		moveq	#0,d0
00017270 1028 0023                  		move.b	$23(a0),d0
00017274 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001727A 117C 0004 0024             		move.b	#4,$24(a0)
00017280 117C 0003 001A             		move.b	#3,$1A(a0)
00017286 6000 0000                  		bra.w	locret_16F90
0001728A                            ; ===========================================================================
0001728A                            
0001728A                            Obj79_HitLamp:
0001728A 3038 D008                  		move.w	($FFFFD008).w,d0
0001728E 9068 0008                  		sub.w	8(a0),d0
00017292 5040                       		addq.w	#8,d0
00017294 0C40 0010                  		cmpi.w	#$10,d0
00017298 6400 0000                  		bcc.w	locret_16F90
0001729C 3038 D00C                  		move.w	($FFFFD00C).w,d0
000172A0 9068 000C                  		sub.w	$C(a0),d0
000172A4 0640 0040                  		addi.w	#$40,d0
000172A8 0C40 0068                  		cmpi.w	#$68,d0
000172AC 6400                       		bcc.s	locret_16F90
000172AE 303C 00A1                  		move.w	#$A1,d0
000172B2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lamppost sound
000172B8 5428 0024                  		addq.b	#2,$24(a0)
000172BC 4EB9 0000 DDE4             		jsr	SingleObjLoad
000172C2 6600                       		bne.s	loc_16F76
000172C4 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
000172C8 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
000172CE 3368 0008 0030             		move.w	8(a0),$30(a1)
000172D4 3368 000C 0032             		move.w	$C(a0),$32(a1)
000172DA 0469 0018 0032             		subi.w	#$18,$32(a1)
000172E0 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000172E8 337C 07A0 0002             		move.w	#$7A0,2(a1)
000172EE 137C 0004 0001             		move.b	#4,1(a1)
000172F4 137C 0008 0019             		move.b	#8,$19(a1)
000172FA 137C 0004 0018             		move.b	#4,$18(a1)
00017300 137C 0002 001A             		move.b	#2,$1A(a1)
00017306 337C 0020 0036             		move.w	#$20,$36(a1)
0001730C                            
0001730C                            loc_16F76:
0001730C 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017312 6100 0000                  		bsr.w	Obj79_StoreInfo
00017316 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001731A 7000                       		moveq	#0,d0
0001731C 1028 0023                  		move.b	$23(a0),d0
00017320 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017326                            
00017326                            locret_16F90:
00017326 4E75                       		rts	
00017328                            ; ===========================================================================
00017328                            
00017328                            Obj79_AfterHit:				; XREF: Obj79_Index
00017328 4E75                       		rts	
0001732A                            ; ===========================================================================
0001732A                            
0001732A                            Obj79_Twirl:				; XREF: Obj79_Index
0001732A 5368 0036                  		subq.w	#1,$36(a0)
0001732E 6A00                       		bpl.s	loc_16FA0
00017330 117C 0004 0024             		move.b	#4,$24(a0)
00017336                            
00017336                            loc_16FA0:
00017336 1028 0026                  		move.b	$26(a0),d0
0001733A 0428 0010 0026             		subi.b	#$10,$26(a0)
00017340 0400 0040                  		subi.b	#$40,d0
00017344 4EB9 0000 2BFA             		jsr	(CalcSine).l
0001734A C3FC 0C00                  		muls.w	#$C00,d1
0001734E 4841                       		swap	d1
00017350 D268 0030                  		add.w	$30(a0),d1
00017354 3141 0008                  		move.w	d1,8(a0)
00017358 C1FC 0C00                  		muls.w	#$C00,d0
0001735C 4840                       		swap	d0
0001735E D068 0032                  		add.w	$32(a0),d0
00017362 3140 000C                  		move.w	d0,$C(a0)
00017366 4E75                       		rts	
00017368                            ; ===========================================================================
00017368                            ; ---------------------------------------------------------------------------
00017368                            ; Subroutine to	store information when you hit a lamppost
00017368                            ; ---------------------------------------------------------------------------
00017368                            
00017368                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017368 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
0001736E 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017374 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
0001737A 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017380 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017386 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
0001738C 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017392 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017398 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
0001739E 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000173A4 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000173AA 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000173B0 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000173B6 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000173BC 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000173C2 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000173C8 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
000173CE 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
000173D4 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
000173DA 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
000173E0 4E75                       		rts	
000173E2                            
000173E2                            ; ---------------------------------------------------------------------------
000173E2                            ; Subroutine to	load stored info when you start	a level	from a lamppost
000173E2                            ; ---------------------------------------------------------------------------
000173E2                            
000173E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000173E2                            
000173E2                            
000173E2                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
000173E2 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000173E8 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000173EE 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000173F4 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
000173FA 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017400 4278 FE20                  		clr.w	($FFFFFE20).w
00017404 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017408 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
0001740E 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017414 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017418 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
0001741E 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017424 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
0001742A 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017430 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017436 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
0001743C 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017442 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017448 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
0001744E 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017454 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
0001745A 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017460 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017466 6600                       		bne.s	loc_170E4
00017468 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
0001746E 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017474 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0001747A                            
0001747A                            loc_170E4:
0001747A 4A38 FE30                  		tst.b	($FFFFFE30).w
0001747E 6A00                       		bpl.s	locret_170F6
00017480 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017484 0440 00A0                  		subi.w	#$A0,d0
00017488 31C0 F728                  		move.w	d0,($FFFFF728).w
0001748C                            
0001748C                            locret_170F6:
0001748C 4E75                       		rts	
0001748E                            ; End of function Obj79_LoadInfo
0001748E                            
0001748E                            ; ===========================================================================
0001748E                            ; ---------------------------------------------------------------------------
0001748E                            ; Sprite mappings - lamppost
0001748E                            ; ---------------------------------------------------------------------------
0001748E                            Map_obj79:
0001748E                            	include "_maps\obj79.asm"
0001748E                            ; ---------------------------------------------------------------------------
0001748E                            ; Sprite mappings - lamppost
0001748E                            ; ---------------------------------------------------------------------------
0001748E 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017492 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017496 06                         byte_17100:	dc.b 6
00017497 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001749C E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000174A1 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000174A6 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000174AB D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000174B0 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000174B5 04                         byte_1711F:	dc.b 4
000174B6 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000174BB E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000174C0 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000174C5 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000174CA 02                         byte_17134:	dc.b 2
000174CB F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
000174D0 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
000174D5 06                         byte_1713F:	dc.b 6
000174D6 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000174DB E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000174E0 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000174E5 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000174EA D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
000174EF D401 0808 00               		dc.b $D4, 1, 8,	8, 0
000174F4                            		even
000174F4                            		even
000174F4                            
000174F4                            ; ===========================================================================
000174F4                            ; ---------------------------------------------------------------------------
000174F4                            ; Object 7D - hidden points at the end of a level
000174F4                            ; ---------------------------------------------------------------------------
000174F4                            
000174F4                            Obj7D:					; XREF: Obj_Index
000174F4 7000                       		moveq	#0,d0
000174F6 1028 0024                  		move.b	$24(a0),d0
000174FA 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
000174FE 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017502                            ; ===========================================================================
00017502 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017504 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017506                            ; ===========================================================================
00017506                            
00017506                            Obj7D_Main:				; XREF: Obj7D_Index
00017506 7410                       		moveq	#$10,d2
00017508 3602                       		move.w	d2,d3
0001750A D643                       		add.w	d3,d3
0001750C 43F8 D000                  		lea	($FFFFD000).w,a1
00017510 3029 0008                  		move.w	8(a1),d0
00017514 9068 0008                  		sub.w	8(a0),d0
00017518 D042                       		add.w	d2,d0
0001751A B043                       		cmp.w	d3,d0
0001751C 6400                       		bcc.s	Obj7D_ChkDel
0001751E 3229 000C                  		move.w	$C(a1),d1
00017522 9268 000C                  		sub.w	$C(a0),d1
00017526 D242                       		add.w	d2,d1
00017528 B243                       		cmp.w	d3,d1
0001752A 6400                       		bcc.s	Obj7D_ChkDel
0001752C 4A78 FE08                  		tst.w	($FFFFFE08).w
00017530 6600                       		bne.s	Obj7D_ChkDel
00017532 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017536 6600                       		bne.s	Obj7D_ChkDel
00017538 5428 0024                  		addq.b	#2,$24(a0)
0001753C 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017544 317C 84B6 0002             		move.w	#$84B6,2(a0)
0001754A 0028 0004 0001             		ori.b	#4,1(a0)
00017550 117C 0000 0018             		move.b	#0,$18(a0)
00017556 117C 0010 0019             		move.b	#$10,$19(a0)
0001755C 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017562 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017568 303C 00C9                  		move.w	#$C9,d0
0001756C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bonus sound
00017572 7000                       		moveq	#0,d0
00017574 1028 0028                  		move.b	$28(a0),d0
00017578 D040                       		add.w	d0,d0
0001757A 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
0001757E 4EB9 0000 0000             		jsr	AddPoints
00017584                            
00017584                            Obj7D_ChkDel:
00017584 3028 0008                  		move.w	8(a0),d0
00017588 0240 FF80                  		andi.w	#$FF80,d0
0001758C 3238 F700                  		move.w	($FFFFF700).w,d1
00017590 0441 0080                  		subi.w	#$80,d1
00017594 0241 FF80                  		andi.w	#$FF80,d1
00017598 9041                       		sub.w	d1,d0
0001759A 0C40 0280                  		cmpi.w	#$280,d0
0001759E 6200                       		bhi.s	Obj7D_Delete
000175A0 4E75                       		rts	
000175A2                            ; ===========================================================================
000175A2                            
000175A2                            Obj7D_Delete:
000175A2 4EF9 0000 D99A             		jmp	DeleteObject
000175A8                            ; ===========================================================================
000175A8 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
000175AA 03E8                       		dc.w 1000
000175AC 0064                       		dc.w 100
000175AE 0001                       		dc.w 1
000175B0                            ; ===========================================================================
000175B0                            
000175B0                            Obj7D_DelayDel:				; XREF: Obj7D_Index
000175B0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
000175B4 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
000175B6 3028 0008                  		move.w	8(a0),d0
000175BA 0240 FF80                  		andi.w	#-$80,d0
000175BE 3238 F700                  		move.w	($FFFFF700).w,d1
000175C2 0441 0080                  		subi.w	#$80,d1
000175C6 0241 FF80                  		andi.w	#-$80,d1
000175CA 9041                       		sub.w	d1,d0
000175CC 0C40 0280                  		cmpi.w	#$280,d0
000175D0 6200                       		bhi.s	Obj7D_Delete2
000175D2 4EF9 0000 D95E             		jmp	DisplaySprite
000175D8                            ; ===========================================================================
000175D8                            
000175D8                            Obj7D_Delete2:
000175D8 4EF9 0000 D99A             		jmp	DeleteObject
000175DE                            ; ===========================================================================
000175DE                            ; ---------------------------------------------------------------------------
000175DE                            ; Sprite mappings - hidden points at the end of	a level
000175DE                            ; ---------------------------------------------------------------------------
000175DE                            Map_obj7D:
000175DE                            	include "_maps\obj7D.asm"
000175DE                            ; ---------------------------------------------------------------------------
000175DE                            ; Sprite mappings - hidden points at the end of	a level
000175DE                            ; ---------------------------------------------------------------------------
000175DE 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
000175E2 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
000175E6 00                         byte_17250:	dc.b 0
000175E7 01                         byte_17251:	dc.b 1
000175E8 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
000175ED 01                         byte_17257:	dc.b 1
000175EE F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
000175F3 01                         byte_1725D:	dc.b 1
000175F4 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
000175FA 00                         		even
000175FA 00                         		even
000175FA                            
000175FA                            ; ===========================================================================
000175FA                            ; ---------------------------------------------------------------------------
000175FA                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
000175FA                            ; ---------------------------------------------------------------------------
000175FA                            
000175FA                            Obj8A:					; XREF: Obj_Index
000175FA 7000                       		moveq	#0,d0
000175FC 1028 0024                  		move.b	$24(a0),d0
00017600 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017604 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017608                            ; ===========================================================================
00017608 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
0001760A 0000                       		dc.w Obj8A_Display-Obj8A_Index
0001760C                            ; ===========================================================================
0001760C                            
0001760C                            Obj8A_Main:				; XREF: Obj8A_Index
0001760C 5428 0024                  		addq.b	#2,$24(a0)
00017610 317C 0120 0008             		move.w	#$120,8(a0)
00017616 317C 00F0 000A             		move.w	#$F0,$A(a0)
0001761C 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017624 317C 05A0 0002             		move.w	#$5A0,2(a0)
0001762A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
0001762E 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017632 117C 0000 0001             		move.b	#0,1(a0)
00017638 117C 0000 0018             		move.b	#0,$18(a0)
0001763E 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017644 6600                       		bne.s	Obj8A_Display	; if not, branch
00017646 317C 00A6 0002             		move.w	#$A6,2(a0)
0001764C 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017652 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017656 6700                       		beq.s	Obj8A_Display	; if not, branch
00017658 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
0001765E 6600                       		bne.s	Obj8A_Display	; if not, branch
00017660 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017666 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
0001766C 4EF9 0000 D99A             		jmp	DeleteObject
00017672                            ; ===========================================================================
00017672                            
00017672                            Obj8A_Display:				; XREF: Obj8A_Index
00017672 4EF9 0000 D95E             		jmp	DisplaySprite
00017678                            ; ===========================================================================
00017678                            ; ---------------------------------------------------------------------------
00017678                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017678                            ; ---------------------------------------------------------------------------
00017678                            Map_obj8A:
00017678                            	include "_maps\obj8A.asm"
00017678                            ; --------------------------------------------------------------------------------
00017678                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017678                            ; --------------------------------------------------------------------------------
00017678                            
00017678                            SME_MD8yg:	
00017678 0000 0000                  		dc.w SME_MD8yg_16-SME_MD8yg, SME_MD8yg_5D-SME_MD8yg	
0001767C 0000 0000                  		dc.w SME_MD8yg_AE-SME_MD8yg, SME_MD8yg_E1-SME_MD8yg	
00017680 0000 0000                  		dc.w SME_MD8yg_15A-SME_MD8yg, SME_MD8yg_1BF-SME_MD8yg	
00017684 0000 0000                  		dc.w SME_MD8yg_242-SME_MD8yg, SME_MD8yg_2B6-SME_MD8yg	
00017688 0000 0000                  		dc.w SME_MD8yg_352-SME_MD8yg, SME_MD8yg_39E-SME_MD8yg	
0001768C 0000                       		dc.w SME_MD8yg_3C7-SME_MD8yg	
0001768E 0E                         SME_MD8yg_16:	dc.b $E	
0001768F F805 802E 88               		dc.b $F8, 5, $80, $2E, $88	
00017694 F805 8026 98               		dc.b $F8, 5, $80, $26, $98	
00017699 F805 801A A8               		dc.b $F8, 5, $80, $1A, $A8	
0001769E F801 8046 B8               		dc.b $F8, 1, $80, $46, $B8	
000176A3 F805 801E C0               		dc.b $F8, 5, $80, $1E, $C0	
000176A8 F805 803E D8               		dc.b $F8, 5, $80, $3E, $D8	
000176AD F805 800E E8               		dc.b $F8, 5, $80, $E, $E8	
000176B2 F805 8004 F8               		dc.b $F8, 5, $80, 4, $F8	
000176B7 F809 8008 08               		dc.b $F8, 9, $80, 8, 8	
000176BC F805 802E 28               		dc.b $F8, 5, $80, $2E, $28	
000176C1 F805 803E 38               		dc.b $F8, 5, $80, $3E, $38	
000176C6 F805 8004 48               		dc.b $F8, 5, $80, 4, $48	
000176CB F805 805C 58               		dc.b $F8, 5, $80, $5C, $58	
000176D0 F805 805C 68               		dc.b $F8, 5, $80, $5C, $68	
000176D5 10                         SME_MD8yg_5D:	dc.b $10	
000176D6 D805 0000 80               		dc.b $D8, 5, 0, 0, $80	
000176DB D805 0004 90               		dc.b $D8, 5, 0, 4, $90	
000176E0 D809 0008 A0               		dc.b $D8, 9, 0, 8, $A0	
000176E5 D805 000E B4               		dc.b $D8, 5, 0, $E, $B4	
000176EA D805 0012 D0               		dc.b $D8, 5, 0, $12, $D0	
000176EF D805 0016 E0               		dc.b $D8, 5, 0, $16, $E0	
000176F4 D805 0004 F0               		dc.b $D8, 5, 0, 4, $F0	
000176F9 D805 001A 00               		dc.b $D8, 5, 0, $1A, 0	
000176FE 0805 001E C8               		dc.b 8, 5, 0, $1E, $C8	
00017703 0805 0004 D8               		dc.b 8, 5, 0, 4, $D8	
00017708 0805 0022 E8               		dc.b 8, 5, 0, $22, $E8	
0001770D 0805 0026 F8               		dc.b 8, 5, 0, $26, $F8	
00017712 0805 0016 08               		dc.b 8, 5, 0, $16, 8	
00017717 0805 002A 20               		dc.b 8, 5, 0, $2A, $20	
0001771C 0805 0004 30               		dc.b 8, 5, 0, 4, $30	
00017721 0805 002E 44               		dc.b 8, 5, 0, $2E, $44	
00017726 0A                         SME_MD8yg_AE:	dc.b $A	
00017727 D805 0012 80               		dc.b $D8, 5, 0, $12, $80	
0001772C D805 0022 90               		dc.b $D8, 5, 0, $22, $90	
00017731 D805 0026 A0               		dc.b $D8, 5, 0, $26, $A0	
00017736 D805 0000 B0               		dc.b $D8, 5, 0, 0, $B0	
0001773B D805 0022 C0               		dc.b $D8, 5, 0, $22, $C0	
00017740 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0	
00017745 D809 0008 E0               		dc.b $D8, 9, 0, 8, $E0	
0001774A 0805 002A E8               		dc.b 8, 5, 0, $2A, $E8	
0001774F 0805 0032 F8               		dc.b 8, 5, 0, $32, $F8	
00017754 0805 0036 08               		dc.b 8, 5, 0, $36, 8	
00017759 18                         SME_MD8yg_E1:	dc.b $18	
0001775A D805 001E 88               		dc.b $D8, 5, 0, $1E, $88	
0001775F D805 003A 98               		dc.b $D8, 5, 0, $3A, $98	
00017764 D805 0004 A8               		dc.b $D8, 5, 0, 4, $A8	
00017769 D805 0022 B8               		dc.b $D8, 5, 0, $22, $B8	
0001776E D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017773 D805 001E D8               		dc.b $D8, 5, 0, $1E, $D8	
00017778 D805 003E E8               		dc.b $D8, 5, 0, $3E, $E8	
0001777D D805 000E F8               		dc.b $D8, 5, 0, $E, $F8	
00017782 D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
00017787 D805 0042 20               		dc.b $D8, 5, 0, $42, $20	
0001778C D805 000E 30               		dc.b $D8, 5, 0, $E, $30	
00017791 D805 002E 40               		dc.b $D8, 5, 0, $2E, $40	
00017796 D801 0046 50               		dc.b $D8, 1, 0, $46, $50	
0001779B D805 0000 58               		dc.b $D8, 5, 0, 0, $58	
000177A0 D805 001A 68               		dc.b $D8, 5, 0, $1A, $68	
000177A5 0805 0048 C0               		dc.b 8, 5, 0, $48, $C0	
000177AA 0801 0046 D0               		dc.b 8, 1, 0, $46, $D0	
000177AF 0805 0000 D8               		dc.b 8, 5, 0, 0, $D8	
000177B4 0801 0046 E8               		dc.b 8, 1, 0, $46, $E8	
000177B9 0805 002E F0               		dc.b 8, 5, 0, $2E, $F0	
000177BE 0805 0016 00               		dc.b 8, 5, 0, $16, 0	
000177C3 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
000177C8 0805 001A 20               		dc.b 8, 5, 0, $1A, $20	
000177CD 0805 0042 30               		dc.b 8, 5, 0, $42, $30	
000177D2 14                         SME_MD8yg_15A:	dc.b $14	
000177D3 D005 0042 A0               		dc.b $D0, 5, 0, $42, $A0	
000177D8 D005 000E B0               		dc.b $D0, 5, 0, $E, $B0	
000177DD D005 002E C0               		dc.b $D0, 5, 0, $2E, $C0	
000177E2 D001 0046 D0               		dc.b $D0, 1, 0, $46, $D0	
000177E7 D005 0000 D8               		dc.b $D0, 5, 0, 0, $D8	
000177EC D005 001A E8               		dc.b $D0, 5, 0, $1A, $E8	
000177F1 0005 004C E8               		dc.b 0, 5, 0, $4C, $E8	
000177F6 0001 0046 F8               		dc.b 0, 1, 0, $46, $F8	
000177FB 0005 001A 04               		dc.b 0, 5, 0, $1A, 4	
00017800 0005 002A 14               		dc.b 0, 5, 0, $2A, $14	
00017805 0005 0004 24               		dc.b 0, 5, 0, 4, $24	
0001780A 2005 0012 D0               		dc.b $20, 5, 0, $12, $D0	
0001780F 2005 003A E0               		dc.b $20, 5, 0, $3A, $E0	
00017814 2005 000E F0               		dc.b $20, 5, 0, $E, $F0	
00017819 2005 001A 00               		dc.b $20, 5, 0, $1A, 0	
0001781E 2001 0046 10               		dc.b $20, 1, 0, $46, $10	
00017823 2005 0050 18               		dc.b $20, 5, 0, $50, $18	
00017828 2005 0022 30               		dc.b $20, 5, 0, $22, $30	
0001782D 2001 0046 40               		dc.b $20, 1, 0, $46, $40	
00017832 2005 000E 48               		dc.b $20, 5, 0, $E, $48	
00017837 1A                         SME_MD8yg_1BF:	dc.b $1A	
00017838 D805 002E 98               		dc.b $D8, 5, 0, $2E, $98	
0001783D D805 0026 A8               		dc.b $D8, 5, 0, $26, $A8	
00017842 D805 0032 B8               		dc.b $D8, 5, 0, $32, $B8	
00017847 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	
0001784C D805 0054 D8               		dc.b $D8, 5, 0, $54, $D8	
00017851 D805 0012 F8               		dc.b $D8, 5, 0, $12, $F8	
00017856 D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
0001785B D805 0026 18               		dc.b $D8, 5, 0, $26, $18	
00017860 D805 0042 28               		dc.b $D8, 5, 0, $42, $28	
00017865 D805 0032 38               		dc.b $D8, 5, 0, $32, $38	
0001786A D805 001E 48               		dc.b $D8, 5, 0, $1E, $48	
0001786F D805 000E 58               		dc.b $D8, 5, 0, $E, $58	
00017874 0809 0008 88               		dc.b 8, 9, 0, 8, $88	
00017879 0805 0004 9C               		dc.b 8, 5, 0, 4, $9C	
0001787E 0805 002E AC               		dc.b 8, 5, 0, $2E, $AC	
00017883 0805 0004 BC               		dc.b 8, 5, 0, 4, $BC	
00017888 0805 003E CC               		dc.b 8, 5, 0, $3E, $CC	
0001788D 0805 0026 DC               		dc.b 8, 5, 0, $26, $DC	
00017892 0805 001A F8               		dc.b 8, 5, 0, $1A, $F8	
00017897 0805 0004 08               		dc.b 8, 5, 0, 4, 8	
0001789C 0805 0058 18               		dc.b 8, 5, 0, $58, $18	
000178A1 0805 0004 28               		dc.b 8, 5, 0, 4, $28	
000178A6 0809 0008 38               		dc.b 8, 9, 0, 8, $38	
000178AB 0805 0032 4C               		dc.b 8, 5, 0, $32, $4C	
000178B0 0805 0022 5C               		dc.b 8, 5, 0, $22, $5C	
000178B5 0805 0004 6C               		dc.b 8, 5, 0, 4, $6C	
000178BA 17                         SME_MD8yg_242:	dc.b $17	
000178BB D005 002E 98               		dc.b $D0, 5, 0, $2E, $98	
000178C0 D005 0026 A8               		dc.b $D0, 5, 0, $26, $A8	
000178C5 D005 0032 B8               		dc.b $D0, 5, 0, $32, $B8	
000178CA D005 001A C8               		dc.b $D0, 5, 0, $1A, $C8	
000178CF D005 0054 D8               		dc.b $D0, 5, 0, $54, $D8	
000178D4 D005 0012 F8               		dc.b $D0, 5, 0, $12, $F8	
000178D9 D005 0022 08               		dc.b $D0, 5, 0, $22, 8	
000178DE D005 0026 18               		dc.b $D0, 5, 0, $26, $18	
000178E3 D005 0000 28               		dc.b $D0, 5, 0, 0, $28	
000178E8 D005 0022 38               		dc.b $D0, 5, 0, $22, $38	
000178ED D005 0004 48               		dc.b $D0, 5, 0, 4, $48	
000178F2 D009 0008 58               		dc.b $D0, 9, 0, 8, $58	
000178F7 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
000178FC 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017901 0009 0008 E8               		dc.b 0, 9, 0, 8, $E8	
00017906 0001 0046 FC               		dc.b 0, 1, 0, $46, $FC	
0001790B 0005 003E 04               		dc.b 0, 5, 0, $3E, 4	
00017910 0005 0004 14               		dc.b 0, 5, 0, 4, $14	
00017915 2009 0008 D0               		dc.b $20, 9, 0, 8, $D0	
0001791A 2005 0004 E4               		dc.b $20, 5, 0, 4, $E4	
0001791F 2005 001E F4               		dc.b $20, 5, 0, $1E, $F4	
00017924 2005 0058 04               		dc.b $20, 5, 0, $58, 4	
00017929 2005 002A 14               		dc.b $20, 5, 0, $2A, $14	
0001792E 1F                         SME_MD8yg_2B6:	dc.b $1F	
0001792F D805 002E 80               		dc.b $D8, 5, 0, $2E, $80	
00017934 D805 0012 90               		dc.b $D8, 5, 0, $12, $90	
00017939 D805 000E A0               		dc.b $D8, 5, 0, $E, $A0	
0001793E D805 001E B0               		dc.b $D8, 5, 0, $1E, $B0	
00017943 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	
00017948 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
0001794D D805 0016 D8               		dc.b $D8, 5, 0, $16, $D8	
00017952 D805 003E F8               		dc.b $D8, 5, 0, $3E, $F8	
00017957 D805 003A 08               		dc.b $D8, 5, 0, $3A, 8	
0001795C D805 0004 18               		dc.b $D8, 5, 0, 4, $18	
00017961 D805 001A 28               		dc.b $D8, 5, 0, $1A, $28	
00017966 D805 0058 38               		dc.b $D8, 5, 0, $58, $38	
0001796B D805 002E 48               		dc.b $D8, 5, 0, $2E, $48	
00017970 0005 005C B0               		dc.b 0, 5, 0, $5C, $B0	
00017975 0005 0032 C0               		dc.b 0, 5, 0, $32, $C0	
0001797A 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
0001797F 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017984 0005 0026 E8               		dc.b 0, 5, 0, $26, $E8	
00017989 0009 0008 00               		dc.b 0, 9, 0, 8, 0	
0001798E 0001 0046 14               		dc.b 0, 1, 0, $46, $14	
00017993 0005 001A 1C               		dc.b 0, 5, 0, $1A, $1C	
00017998 0005 000E 2C               		dc.b 0, 5, 0, $E, $2C	
0001799D 0005 0000 3C               		dc.b 0, 5, 0, 0, $3C	
000179A2 0001 0046 4C               		dc.b 0, 1, 0, $46, $4C	
000179A7 0005 002E 54               		dc.b 0, 5, 0, $2E, $54	
000179AC 0005 003A 64               		dc.b 0, 5, 0, $3A, $64	
000179B1 0001 0046 74               		dc.b 0, 1, 0, $46, $74	
000179B6 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	
000179BB 2005 0004 08               		dc.b $20, 5, 0, 4, 8	
000179C0 2005 0012 18               		dc.b $20, 5, 0, $12, $18	
000179C5 2005 0004 28               		dc.b $20, 5, 0, 4, $28	
000179CA 0F                         SME_MD8yg_352:	dc.b $F	
000179CB F805 0012 80               		dc.b $F8, 5, 0, $12, $80	
000179D0 F805 0022 90               		dc.b $F8, 5, 0, $22, $90	
000179D5 F805 000E A0               		dc.b $F8, 5, 0, $E, $A0	
000179DA F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	
000179DF F805 000E C0               		dc.b $F8, 5, 0, $E, $C0	
000179E4 F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	
000179E9 F805 003E E0               		dc.b $F8, 5, 0, $3E, $E0	
000179EE F805 000E F0               		dc.b $F8, 5, 0, $E, $F0	
000179F3 F805 0042 00               		dc.b $F8, 5, 0, $42, 0	
000179F8 F805 0048 18               		dc.b $F8, 5, 0, $48, $18	
000179FD F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	
00017A02 F805 002E 40               		dc.b $F8, 5, 0, $2E, $40	
00017A07 F805 000E 50               		dc.b $F8, 5, 0, $E, $50	
00017A0C F805 0000 60               		dc.b $F8, 5, 0, 0, $60	
00017A11 F805 0004 70               		dc.b $F8, 5, 0, 4, $70	
00017A16 08                         SME_MD8yg_39E:	dc.b 8	
00017A17 3005 003E C0               		dc.b $30, 5, 0, $3E, $C0	
00017A1C 3005 0022 D0               		dc.b $30, 5, 0, $22, $D0	
00017A21 3005 002A E0               		dc.b $30, 5, 0, $2A, $E0	
00017A26 3005 0004 F8               		dc.b $30, 5, 0, 4, $F8	
00017A2B 3005 0000 08               		dc.b $30, 5, 0, 0, 8	
00017A30 3005 0004 18               		dc.b $30, 5, 0, 4, $18	
00017A35 3001 0046 28               		dc.b $30, 1, 0, $46, $28	
00017A3A 3005 001A 30               		dc.b $30, 5, 0, $1A, $30	
00017A3F 17                         SME_MD8yg_3C7:	dc.b $17	
00017A40 E805 002E B4               		dc.b $E8, 5, 0, $2E, $B4	
00017A45 D805 0026 C4               		dc.b $D8, 5, 0, $26, $C4	
00017A4A E801 0046 44               		dc.b $E8, 1, 0, $46, $44	
00017A4F E805 001E 4C               		dc.b $E8, 5, 0, $1E, $4C	
00017A54 D805 003E 34               		dc.b $D8, 5, 0, $3E, $34	
00017A59 D805 000E 1C               		dc.b $D8, 5, 0, $E, $1C	
00017A5E D805 0004 FC               		dc.b $D8, 5, 0, 4, $FC	
00017A63 E809 0008 0C               		dc.b $E8, 9, 0, 8, $C	
00017A68 D805 002A B4               		dc.b $D8, 5, 0, $2A, $B4	
00017A6D D805 0032 D4               		dc.b $D8, 5, 0, $32, $D4	
00017A72 D805 103A EC               		dc.b $D8, 5, $10, $3A, $EC	
00017A77 D805 0032 0C               		dc.b $D8, 5, 0, $32, $C	
00017A7C D805 003A 44               		dc.b $D8, 5, 0, $3A, $44	
00017A81 E805 0004 C4               		dc.b $E8, 5, 0, 4, $C4	
00017A86 E805 0032 24               		dc.b $E8, 5, 0, $32, $24	
00017A8B E809 0008 D4               		dc.b $E8, 9, 0, 8, $D4	
00017A90 E805 000E EC               		dc.b $E8, 5, 0, $E, $EC	
00017A95 E805 002E 34               		dc.b $E8, 5, 0, $2E, $34	
00017A9A F805 001E D4               		dc.b $F8, 5, 0, $1E, $D4	
00017A9F F805 0004 E4               		dc.b $F8, 5, 0, 4, $E4	
00017AA4 F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
00017AA9 D805 000E 54               		dc.b $D8, 5, 0, $E, $54	
00017AAE F805 000E 04               		dc.b $F8, 5, 0, $E, 4	
00017AB4 00                         		even
00017AB4 00                         		even
00017AB4                            
00017AB4                            ; ===========================================================================
00017AB4                            ; ---------------------------------------------------------------------------
00017AB4                            ; Object 3D - Eggman (GHZ)
00017AB4                            ; ---------------------------------------------------------------------------
00017AB4                            
00017AB4                            Obj3D:					; XREF: Obj_Index
00017AB4 7000                       		moveq	#0,d0
00017AB6 1028 0024                  		move.b	$24(a0),d0
00017ABA 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017ABE 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017AC2                            ; ===========================================================================
00017AC2 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017AC4 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017AC6 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017AC8 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017ACA                            
00017ACA 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017ACC 0401                       		dc.b 4,	1
00017ACE 0607                       		dc.b 6,	7
00017AD0                            ; ===========================================================================
00017AD0                            
00017AD0                            Obj3D_Main:				; XREF: Obj3D_Index
00017AD0 45F9 0001 7ACA             		lea	(Obj3D_ObjData).l,a2
00017AD6 2248                       		movea.l	a0,a1
00017AD8 7202                       		moveq	#2,d1
00017ADA 6000                       		bra.s	Obj3D_LoadBoss
00017ADC                            ; ===========================================================================
00017ADC                            
00017ADC                            Obj3D_Loop:
00017ADC 4EB9 0000 DDFA             		jsr	SingleObjLoad2
00017AE2 6600                       		bne.s	loc_17772
00017AE4                            
00017AE4                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017AE4 135A 0024                  		move.b	(a2)+,$24(a1)
00017AE8 12BC 003D                  		move.b	#$3D,0(a1)
00017AEC 3368 0008 0008             		move.w	8(a0),8(a1)
00017AF2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017AF8 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017B00 337C 0400 0002             		move.w	#$400,2(a1)
00017B06 137C 0004 0001             		move.b	#4,1(a1)
00017B0C 137C 0020 0019             		move.b	#$20,$19(a1)
00017B12 137C 0003 0018             		move.b	#3,$18(a1)
00017B18 135A 001C                  		move.b	(a2)+,$1C(a1)
00017B1C 2348 0034                  		move.l	a0,$34(a1)
00017B20 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017B24                            
00017B24                            loc_17772:
00017B24 3168 0008 0030             		move.w	8(a0),$30(a0)
00017B2A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017B30 117C 000F 0020             		move.b	#$F,$20(a0)
00017B36 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017B3C                            
00017B3C                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017B3C 7000                       		moveq	#0,d0
00017B3E 1028 0025                  		move.b	$25(a0),d0
00017B42 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017B46 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017B4A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017B50 4EB9 0000 AA10             		jsr	AnimateSprite
00017B56 1028 0022                  		move.b	$22(a0),d0
00017B5A 0200 0003                  		andi.b	#3,d0
00017B5E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017B64 8128 0001                  		or.b	d0,1(a0)
00017B68 4EF9 0000 D95E             		jmp	DisplaySprite
00017B6E                            ; ===========================================================================
00017B6E 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017B70 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017B72 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017B74 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017B76 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017B78 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017B7A 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017B7C                            ; ===========================================================================
00017B7C                            
00017B7C                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017B7C 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00017B82 6100 0000                  		bsr.w	BossMove
00017B86 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017B8C 6600                       		bne.s	loc_177E6
00017B8E 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017B94 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017B98                            
00017B98                            loc_177E6:
00017B98 1028 003F                  		move.b	$3F(a0),d0
00017B9C 4EB9 0000 2BFA             		jsr	(CalcSine).l
00017BA2 EC40                       		asr.w	#6,d0
00017BA4 D068 0038                  		add.w	$38(a0),d0
00017BA8 3140 000C                  		move.w	d0,$C(a0)
00017BAC 3168 0030 0008             		move.w	$30(a0),8(a0)
00017BB2 5428 003F                  		addq.b	#2,$3F(a0)
00017BB6 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017BBC 6400                       		bcc.s	locret_1784A
00017BBE 4A28 0022                  		tst.b	$22(a0)
00017BC2 6B00                       		bmi.s	loc_1784C
00017BC4 4A28 0020                  		tst.b	$20(a0)
00017BC8 6600                       		bne.s	locret_1784A
00017BCA 4A28 003E                  		tst.b	$3E(a0)
00017BCE 6600                       		bne.s	Obj3D_ShipFlash
00017BD0 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017BD6 303C 00AC                  		move.w	#$AC,d0
00017BDA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017BE0                            
00017BE0                            Obj3D_ShipFlash:
00017BE0 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017BE4 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017BE6 4A51                       		tst.w	(a1)
00017BE8 6600                       		bne.s	loc_1783C
00017BEA 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017BEE                            
00017BEE                            loc_1783C:
00017BEE 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017BF0 5328 003E                  		subq.b	#1,$3E(a0)
00017BF4 6600                       		bne.s	locret_1784A
00017BF6 117C 000F 0020             		move.b	#$F,$20(a0)
00017BFC                            
00017BFC                            locret_1784A:
00017BFC 4E75                       		rts	
00017BFE                            ; ===========================================================================
00017BFE                            
00017BFE                            loc_1784C:				; XREF: loc_177E6
00017BFE 7064                       		moveq	#100,d0
00017C00 6100 0000                  		bsr.w	AddPoints
00017C04 117C 0008 0025             		move.b	#8,$25(a0)
00017C0A 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017C10 4E75                       		rts	
00017C12                            
00017C12                            ; ---------------------------------------------------------------------------
00017C12                            ; Defeated boss	subroutine
00017C12                            ; ---------------------------------------------------------------------------
00017C12                            
00017C12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C12                            
00017C12                            
00017C12                            BossDefeated:
00017C12 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017C16 0200 0007                  		andi.b	#7,d0
00017C1A 6600                       		bne.s	locret_178A2
00017C1C 4EB9 0000 DDE4             		jsr	SingleObjLoad
00017C22 6600                       		bne.s	locret_178A2
00017C24 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017C28 3368 0008 0008             		move.w	8(a0),8(a1)
00017C2E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017C34 4EB9 0000 2BD4             		jsr	(RandomNumber).l
00017C3A 3200                       		move.w	d0,d1
00017C3C 7200                       		moveq	#0,d1
00017C3E 1200                       		move.b	d0,d1
00017C40 E409                       		lsr.b	#2,d1
00017C42 0441 0020                  		subi.w	#$20,d1
00017C46 D369 0008                  		add.w	d1,8(a1)
00017C4A E048                       		lsr.w	#8,d0
00017C4C E608                       		lsr.b	#3,d0
00017C4E D169 000C                  		add.w	d0,$C(a1)
00017C52                            
00017C52                            locret_178A2:
00017C52 4E75                       		rts	
00017C54                            ; End of function BossDefeated
00017C54                            
00017C54                            ; ---------------------------------------------------------------------------
00017C54                            ; Subroutine to	move a boss
00017C54                            ; ---------------------------------------------------------------------------
00017C54                            
00017C54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C54                            
00017C54                            
00017C54                            BossMove:
00017C54 2428 0030                  		move.l	$30(a0),d2
00017C58 2628 0038                  		move.l	$38(a0),d3
00017C5C 3028 0010                  		move.w	$10(a0),d0
00017C60 48C0                       		ext.l	d0
00017C62 E180                       		asl.l	#8,d0
00017C64 D480                       		add.l	d0,d2
00017C66 3028 0012                  		move.w	$12(a0),d0
00017C6A 48C0                       		ext.l	d0
00017C6C E180                       		asl.l	#8,d0
00017C6E D680                       		add.l	d0,d3
00017C70 2142 0030                  		move.l	d2,$30(a0)
00017C74 2143 0038                  		move.l	d3,$38(a0)
00017C78 4E75                       		rts	
00017C7A                            ; End of function BossMove
00017C7A                            
00017C7A                            ; ===========================================================================
00017C7A                            
00017C7A                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00017C7A 317C FF00 0010             		move.w	#-$100,$10(a0)
00017C80 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017C86 6100 FFCC                  		bsr.w	BossMove
00017C8A 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017C90 6600                       		bne.s	loc_17916
00017C92 317C 0000 0010             		move.w	#0,$10(a0)
00017C98 317C 0000 0012             		move.w	#0,$12(a0)
00017C9E 5428 0025                  		addq.b	#2,$25(a0)
00017CA2 4EB9 0000 DDFA             		jsr	SingleObjLoad2
00017CA8 6600                       		bne.s	loc_17910
00017CAA 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017CAE 3368 0030 0008             		move.w	$30(a0),8(a1)
00017CB4 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017CBA 2348 0034                  		move.l	a0,$34(a1)
00017CBE                            
00017CBE                            loc_17910:
00017CBE 317C 0077 003C             		move.w	#$77,$3C(a0)
00017CC4                            
00017CC4                            loc_17916:
00017CC4 6000 FED2                  		bra.w	loc_177E6
00017CC8                            ; ===========================================================================
00017CC8                            
00017CC8                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00017CC8 5368 003C                  		subq.w	#1,$3C(a0)
00017CCC 6A00                       		bpl.s	Obj3D_Reverse
00017CCE 5428 0025                  		addq.b	#2,$25(a0)
00017CD2 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017CD8 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017CDE 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017CE4 6600                       		bne.s	Obj3D_Reverse
00017CE6 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017CEC 317C 0040 0010             		move.w	#$40,$10(a0)
00017CF2                            
00017CF2                            Obj3D_Reverse:
00017CF2 0828 0000 0022             		btst	#0,$22(a0)
00017CF8 6600                       		bne.s	loc_17950
00017CFA 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017CFE                            
00017CFE                            loc_17950:
00017CFE 6000 FE98                  		bra.w	loc_177E6
00017D02                            ; ===========================================================================
00017D02                            
00017D02                            loc_17954:				; XREF: Obj3D_ShipIndex
00017D02 5368 003C                  		subq.w	#1,$3C(a0)
00017D06 6B00                       		bmi.s	loc_17960
00017D08 6100 FF4A                  		bsr.w	BossMove
00017D0C 6000                       		bra.s	loc_17976
00017D0E                            ; ===========================================================================
00017D0E                            
00017D0E                            loc_17960:
00017D0E 0868 0000 0022             		bchg	#0,$22(a0)
00017D14 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017D1A 5528 0025                  		subq.b	#2,$25(a0)
00017D1E 317C 0000 0010             		move.w	#0,$10(a0)
00017D24                            
00017D24                            loc_17976:
00017D24 6000 FE72                  		bra.w	loc_177E6
00017D28                            ; ===========================================================================
00017D28                            
00017D28                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017D28 5368 003C                  		subq.w	#1,$3C(a0)
00017D2C 6B00                       		bmi.s	loc_17984
00017D2E 6000 FEE2                  		bra.w	BossDefeated
00017D32                            ; ===========================================================================
00017D32                            
00017D32                            loc_17984:
00017D32 08E8 0000 0022             		bset	#0,$22(a0)
00017D38 08A8 0007 0022             		bclr	#7,$22(a0)
00017D3E 4268 0010                  		clr.w	$10(a0)
00017D42 5428 0025                  		addq.b	#2,$25(a0)
00017D46 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017D4C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017D50 6600                       		bne.s	locret_179AA
00017D52 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017D58                            
00017D58                            locret_179AA:
00017D58 4E75                       		rts	
00017D5A                            ; ===========================================================================
00017D5A                            
00017D5A                            loc_179AC:				; XREF: Obj3D_ShipIndex
00017D5A 5268 003C                  		addq.w	#1,$3C(a0)
00017D5E 6700                       		beq.s	loc_179BC
00017D60 6A00                       		bpl.s	loc_179C2
00017D62 0668 0018 0012             		addi.w	#$18,$12(a0)
00017D68 6000                       		bra.s	loc_179EE
00017D6A                            ; ===========================================================================
00017D6A                            
00017D6A                            loc_179BC:
00017D6A 4268 0012                  		clr.w	$12(a0)
00017D6E 6000                       		bra.s	loc_179EE
00017D70                            ; ===========================================================================
00017D70                            
00017D70                            loc_179C2:
00017D70 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00017D76 6500                       		bcs.s	loc_179DA
00017D78 6700                       		beq.s	loc_179E0
00017D7A 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00017D80 6500                       		bcs.s	loc_179EE
00017D82 5428 0025                  		addq.b	#2,$25(a0)
00017D86 6000                       		bra.s	loc_179EE
00017D88                            ; ===========================================================================
00017D88                            
00017D88                            loc_179DA:
00017D88 5168 0012                  		subq.w	#8,$12(a0)
00017D8C 6000                       		bra.s	loc_179EE
00017D8E                            ; ===========================================================================
00017D8E                            
00017D8E                            loc_179E0:
00017D8E 4268 0012                  		clr.w	$12(a0)
00017D92 303C 0081                  		move.w	#$81,d0
00017D96 4EB9 0000 15B6             		jsr	(PlaySound).l	; play GHZ music
00017D9C                            
00017D9C                            loc_179EE:
00017D9C 6100 FEB6                  		bsr.w	BossMove
00017DA0 6000 FDF6                  		bra.w	loc_177E6
00017DA4                            ; ===========================================================================
00017DA4                            
00017DA4                            loc_179F6:				; XREF: Obj3D_ShipIndex
00017DA4 317C 0400 0010             		move.w	#$400,$10(a0)
00017DAA 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017DB0 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00017DB6 6700                       		beq.s	loc_17A10
00017DB8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00017DBC 6000                       		bra.s	loc_17A16
00017DBE                            ; ===========================================================================
00017DBE                            
00017DBE                            loc_17A10:
00017DBE 4A28 0001                  		tst.b	1(a0)
00017DC2 6A00                       		bpl.s	Obj3D_ShipDel
00017DC4                            
00017DC4                            loc_17A16:
00017DC4 6100 FE8E                  		bsr.w	BossMove
00017DC8 6000 FDCE                  		bra.w	loc_177E6
00017DCC                            ; ===========================================================================
00017DCC                            
00017DCC                            Obj3D_ShipDel:
00017DCC 4EF9 0000 D99A             		jmp	DeleteObject
00017DD2                            ; ===========================================================================
00017DD2                            
00017DD2                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00017DD2 7000                       		moveq	#0,d0
00017DD4 7201                       		moveq	#1,d1
00017DD6 2268 0034                  		movea.l	$34(a0),a1
00017DDA 1029 0025                  		move.b	$25(a1),d0
00017DDE 5900                       		subq.b	#4,d0
00017DE0 6600                       		bne.s	loc_17A3E
00017DE2 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00017DE8 6600                       		bne.s	loc_17A46
00017DEA 7204                       		moveq	#4,d1
00017DEC                            
00017DEC                            loc_17A3E:
00017DEC 5D00                       		subq.b	#6,d0
00017DEE 6B00                       		bmi.s	loc_17A46
00017DF0 720A                       		moveq	#$A,d1
00017DF2 6000                       		bra.s	loc_17A5A
00017DF4                            ; ===========================================================================
00017DF4                            
00017DF4                            loc_17A46:
00017DF4 4A29 0020                  		tst.b	$20(a1)
00017DF8 6600                       		bne.s	loc_17A50
00017DFA 7205                       		moveq	#5,d1
00017DFC 6000                       		bra.s	loc_17A5A
00017DFE                            ; ===========================================================================
00017DFE                            
00017DFE                            loc_17A50:
00017DFE 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00017E04 6500                       		bcs.s	loc_17A5A
00017E06 7204                       		moveq	#4,d1
00017E08                            
00017E08                            loc_17A5A:
00017E08 1141 001C                  		move.b	d1,$1C(a0)
00017E0C 5500                       		subq.b	#2,d0
00017E0E 6600                       		bne.s	Obj3D_FaceDisp
00017E10 117C 0006 001C             		move.b	#6,$1C(a0)
00017E16 4A28 0001                  		tst.b	1(a0)
00017E1A 6A00                       		bpl.s	Obj3D_FaceDel
00017E1C                            
00017E1C                            Obj3D_FaceDisp:
00017E1C 6000                       		bra.s	Obj3D_Display
00017E1E                            ; ===========================================================================
00017E1E                            
00017E1E                            Obj3D_FaceDel:
00017E1E 4EF9 0000 D99A             		jmp	DeleteObject
00017E24                            ; ===========================================================================
00017E24                            
00017E24                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00017E24 117C 0007 001C             		move.b	#7,$1C(a0)
00017E2A 2268 0034                  		movea.l	$34(a0),a1
00017E2E 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00017E34 6600                       		bne.s	loc_17A96
00017E36 117C 000B 001C             		move.b	#$B,$1C(a0)
00017E3C 4A28 0001                  		tst.b	1(a0)
00017E40 6A00                       		bpl.s	Obj3D_FlameDel
00017E42 6000                       		bra.s	Obj3D_FlameDisp
00017E44                            ; ===========================================================================
00017E44                            
00017E44                            loc_17A96:
00017E44 3029 0010                  		move.w	$10(a1),d0
00017E48 6700                       		beq.s	Obj3D_FlameDisp
00017E4A 117C 0008 001C             		move.b	#8,$1C(a0)
00017E50                            
00017E50                            Obj3D_FlameDisp:
00017E50 6000                       		bra.s	Obj3D_Display
00017E52                            ; ===========================================================================
00017E52                            
00017E52                            Obj3D_FlameDel:
00017E52 4EF9 0000 D99A             		jmp	DeleteObject
00017E58                            ; ===========================================================================
00017E58                            
00017E58                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00017E58 2268 0034                  		movea.l	$34(a0),a1
00017E5C 3169 0008 0008             		move.w	8(a1),8(a0)
00017E62 3169 000C 000C             		move.w	$C(a1),$C(a0)
00017E68 1169 0022 0022             		move.b	$22(a1),$22(a0)
00017E6E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017E74 4EB9 0000 AA10             		jsr	AnimateSprite
00017E7A 1028 0022                  		move.b	$22(a0),d0
00017E7E 0200 0003                  		andi.b	#3,d0
00017E82 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017E88 8128 0001                  		or.b	d0,1(a0)
00017E8C 4EF9 0000 D95E             		jmp	DisplaySprite
00017E92                            ; ===========================================================================
00017E92                            ; ---------------------------------------------------------------------------
00017E92                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00017E92                            ; ---------------------------------------------------------------------------
00017E92                            
00017E92                            Obj48:					; XREF: Obj_Index
00017E92 7000                       		moveq	#0,d0
00017E94 1028 0024                  		move.b	$24(a0),d0
00017E98 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00017E9C 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00017EA0                            ; ===========================================================================
00017EA0 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00017EA2 0000                       		dc.w Obj48_Base-Obj48_Index
00017EA4 0000                       		dc.w Obj48_Display2-Obj48_Index
00017EA6 0000                       		dc.w loc_17C68-Obj48_Index
00017EA8 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00017EAA                            ; ===========================================================================
00017EAA                            
00017EAA                            Obj48_Main:				; XREF: Obj48_Index
00017EAA 5428 0024                  		addq.b	#2,$24(a0)
00017EAE 317C 4080 0026             		move.w	#$4080,$26(a0)
00017EB4 317C FE00 003E             		move.w	#-$200,$3E(a0)
00017EBA 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00017EC2 317C 046C 0002             		move.w	#$46C,2(a0)
00017EC8 45E8 0028                  		lea	$28(a0),a2
00017ECC 14FC 0000                  		move.b	#0,(a2)+
00017ED0 7205                       		moveq	#5,d1
00017ED2 2248                       		movea.l	a0,a1
00017ED4 6000                       		bra.s	loc_17B60
00017ED6                            ; ===========================================================================
00017ED6                            
00017ED6                            Obj48_MakeLinks:
00017ED6 4EB9 0000 DDFA             		jsr	SingleObjLoad2
00017EDC 6600                       		bne.s	Obj48_MakeBall
00017EDE 3368 0008 0008             		move.w	8(a0),8(a1)
00017EE4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017EEA 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00017EEE 137C 0006 0024             		move.b	#6,$24(a1)
00017EF4 237C 0000 7F6C 0004        		move.l	#Map_obj15,4(a1)
00017EFC 337C 0380 0002             		move.w	#$380,2(a1)
00017F02 137C 0001 001A             		move.b	#1,$1A(a1)
00017F08 5228 0028                  		addq.b	#1,$28(a0)
00017F0C                            
00017F0C                            loc_17B60:				; XREF: Obj48_Main
00017F0C 3A09                       		move.w	a1,d5
00017F0E 0445 D000                  		subi.w	#$D000,d5
00017F12 EC4D                       		lsr.w	#6,d5
00017F14 0245 007F                  		andi.w	#$7F,d5
00017F18 14C5                       		move.b	d5,(a2)+
00017F1A 137C 0004 0001             		move.b	#4,1(a1)
00017F20 137C 0008 0019             		move.b	#8,$19(a1)
00017F26 137C 0006 0018             		move.b	#6,$18(a1)
00017F2C 2368 0034 0034             		move.l	$34(a0),$34(a1)
00017F32 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00017F36                            
00017F36                            Obj48_MakeBall:
00017F36 137C 0008 0024             		move.b	#8,$24(a1)
00017F3C 237C 0000 84CA 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00017F44 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00017F4A 137C 0001 001A             		move.b	#1,$1A(a1)
00017F50 137C 0005 0018             		move.b	#5,$18(a1)
00017F56 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00017F5C 4E75                       		rts	
00017F5E                            ; ===========================================================================
00017F5E                            
00017F5E 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00017F64                            
00017F64                            ; ===========================================================================
00017F64                            
00017F64                            Obj48_Base:				; XREF: Obj48_Index
00017F64 47F9 0001 7F5E             		lea	(Obj48_PosData).l,a3
00017F6A 45E8 0028                  		lea	$28(a0),a2
00017F6E 7C00                       		moveq	#0,d6
00017F70 1C1A                       		move.b	(a2)+,d6
00017F72                            
00017F72                            loc_17BC6:
00017F72 7800                       		moveq	#0,d4
00017F74 181A                       		move.b	(a2)+,d4
00017F76 ED4C                       		lsl.w	#6,d4
00017F78 0684 00FF D000             		addi.l	#$FFD000,d4
00017F7E 2244                       		movea.l	d4,a1
00017F80 101B                       		move.b	(a3)+,d0
00017F82 B029 003C                  		cmp.b	$3C(a1),d0
00017F86 6700                       		beq.s	loc_17BE0
00017F88 5229 003C                  		addq.b	#1,$3C(a1)
00017F8C                            
00017F8C                            loc_17BE0:
00017F8C 51CE FFE4                  		dbf	d6,loc_17BC6
00017F90                            
00017F90 B029 003C                  		cmp.b	$3C(a1),d0
00017F94 6600                       		bne.s	loc_17BFA
00017F96 2268 0034                  		movea.l	$34(a0),a1
00017F9A 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00017FA0 6600                       		bne.s	loc_17BFA
00017FA2 5428 0024                  		addq.b	#2,$24(a0)
00017FA6                            
00017FA6                            loc_17BFA:
00017FA6 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00017FAC 6700                       		beq.s	Obj48_Display
00017FAE 5268 0032                  		addq.w	#1,$32(a0)
00017FB2                            
00017FB2                            Obj48_Display:
00017FB2 6100 0000                  		bsr.w	sub_17C2A
00017FB6 1028 0026                  		move.b	$26(a0),d0
00017FBA 4EB9 0000 7EDE             		jsr	(Obj15_Move2).l
00017FC0 4EF9 0000 D95E             		jmp	DisplaySprite
00017FC6                            ; ===========================================================================
00017FC6                            
00017FC6                            Obj48_Display2:				; XREF: Obj48_Index
00017FC6 6100 0000                  		bsr.w	sub_17C2A
00017FCA 4EB9 0000 7E9E             		jsr	(Obj48_Move).l
00017FD0 4EF9 0000 D95E             		jmp	DisplaySprite
00017FD6                            
00017FD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FD6                            
00017FD6                            
00017FD6                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00017FD6 2268 0034                  		movea.l	$34(a0),a1
00017FDA 0628 0020 001B             		addi.b	#$20,$1B(a0)
00017FE0 6400                       		bcc.s	loc_17C3C
00017FE2 0868 0000 001A             		bchg	#0,$1A(a0)
00017FE8                            
00017FE8                            loc_17C3C:
00017FE8 3169 0008 003A             		move.w	8(a1),$3A(a0)
00017FEE 3029 000C                  		move.w	$C(a1),d0
00017FF2 D068 0032                  		add.w	$32(a0),d0
00017FF6 3140 0038                  		move.w	d0,$38(a0)
00017FFA 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018000 4A29 0022                  		tst.b	$22(a1)
00018004 6A00                       		bpl.s	locret_17C66
00018006 10BC 003F                  		move.b	#$3F,0(a0)
0001800A 117C 0000 0024             		move.b	#0,$24(a0)
00018010                            
00018010                            locret_17C66:
00018010 4E75                       		rts	
00018012                            ; End of function sub_17C2A
00018012                            
00018012                            ; ===========================================================================
00018012                            
00018012                            loc_17C68:				; XREF: Obj48_Index
00018012 2268 0034                  		movea.l	$34(a0),a1
00018016 4A29 0022                  		tst.b	$22(a1)
0001801A 6A00                       		bpl.s	Obj48_Display3
0001801C 10BC 003F                  		move.b	#$3F,0(a0)
00018020 117C 0000 0024             		move.b	#0,$24(a0)
00018026                            
00018026                            Obj48_Display3:
00018026 4EF9 0000 D95E             		jmp	DisplaySprite
0001802C                            ; ===========================================================================
0001802C                            
0001802C                            Obj48_ChkVanish:			; XREF: Obj48_Index
0001802C 7000                       		moveq	#0,d0
0001802E 4A28 001A                  		tst.b	$1A(a0)
00018032 6600                       		bne.s	Obj48_Vanish
00018034 5200                       		addq.b	#1,d0
00018036                            
00018036                            Obj48_Vanish:
00018036 1140 001A                  		move.b	d0,$1A(a0)
0001803A 2268 0034                  		movea.l	$34(a0),a1
0001803E 4A29 0022                  		tst.b	$22(a1)
00018042 6A00                       		bpl.s	Obj48_Display4
00018044 117C 0000 0020             		move.b	#0,$20(a0)
0001804A 6100 FBC6                  		bsr.w	BossDefeated
0001804E 5328 003C                  		subq.b	#1,$3C(a0)
00018052 6A00                       		bpl.s	Obj48_Display4
00018054 10BC 003F                  		move.b	#$3F,(a0)
00018058 117C 0000 0024             		move.b	#0,$24(a0)
0001805E                            
0001805E                            Obj48_Display4:
0001805E 4EF9 0000 D95E             		jmp	DisplaySprite
00018064                            ; ===========================================================================
00018064                            Ani_Eggman:
00018064                            	include "_anim\Eggman.asm"
00018064                            ; ---------------------------------------------------------------------------
00018064                            ; Animation script - Eggman (bosses)
00018064                            ; ---------------------------------------------------------------------------
00018064 0000                       		dc.w byte_17CD4-Ani_Eggman
00018066 0000                       		dc.w byte_17CD8-Ani_Eggman
00018068 0000                       		dc.w byte_17CDC-Ani_Eggman
0001806A 0000                       		dc.w byte_17CE0-Ani_Eggman
0001806C 0000                       		dc.w byte_17CE4-Ani_Eggman
0001806E 0000                       		dc.w byte_17CE8-Ani_Eggman
00018070 0000                       		dc.w byte_17CEC-Ani_Eggman
00018072 0000                       		dc.w byte_17CF0-Ani_Eggman
00018074 0000                       		dc.w byte_17CF4-Ani_Eggman
00018076 0000                       		dc.w byte_17CF8-Ani_Eggman
00018078 0000                       		dc.w byte_17CFC-Ani_Eggman
0001807A 0000                       		dc.w byte_17D00-Ani_Eggman
0001807C 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018080 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00018084 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018088 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
0001808C 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018090 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018094 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018098 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
0001809C 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000180A0 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000180A4 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000180A8 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
000180B4                            		even
000180B4                            		even
000180B4                            
000180B4                            ; ---------------------------------------------------------------------------
000180B4                            ; Sprite mappings - Eggman (boss levels)
000180B4                            ; ---------------------------------------------------------------------------
000180B4                            Map_Eggman:
000180B4                            	include "_maps\Eggman.asm"
000180B4                            Map_dc7e:
000180B4 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
000180B6 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
000180B8 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
000180BA 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
000180BC 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
000180BE 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
000180C0 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
000180C2 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
000180C4 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
000180C6 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
000180C8 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
000180CA 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
000180CC 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
000180CE 06                         Map_dc7e_1A: 	dc.b $6
000180CF EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
000180D4 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
000180D9 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
000180DE FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
000180E3 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
000180E8 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
000180ED 02                         Map_dc7e_39: 	dc.b $2
000180EE E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000180F3 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
000180F8 02                         Map_dc7e_44: 	dc.b $2
000180F9 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000180FE EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018103 03                         Map_dc7e_4F: 	dc.b $3
00018104 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018109 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
0001810E EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018113 03                         Map_dc7e_5F: 	dc.b $3
00018114 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00018119 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
0001811E EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018123 03                         Map_dc7e_6F: 	dc.b $3
00018124 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018129 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
0001812E EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018133 03                         Map_dc7e_7F: 	dc.b $3
00018134 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00018139 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001813E EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018143 04                         Map_dc7e_8F: 	dc.b $4
00018144 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00018149 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001814E EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018153 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018158 01                         Map_dc7e_A4: 	dc.b $1
00018159 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
0001815E 01                         Map_dc7e_AA: 	dc.b $1
0001815F 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00018164 00                         Map_dc7e_B0: 	dc.b $0
00018165 02                         Map_dc7e_B1: 	dc.b $2
00018166 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
0001816B 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00018170 02                         Map_dc7e_BC: 	dc.b $2
00018171 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00018176 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
0001817C 00                         	even
0001817C 00                         	even
0001817C                            
0001817C                            ; ---------------------------------------------------------------------------
0001817C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001817C                            ; ---------------------------------------------------------------------------
0001817C                            Map_BossItems:
0001817C                            	include "_maps\Boss items.asm"
0001817C                            ; ---------------------------------------------------------------------------
0001817C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001817C                            ; ---------------------------------------------------------------------------
0001817C 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018180 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018184 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018188 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
0001818C 01                         byte_17DE4:	dc.b 1
0001818D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018192 02                         byte_17DEA:	dc.b 2
00018193 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018198 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001819D 00                         		dc.b 0
0001819E 01                         byte_17DF6:	dc.b 1
0001819F FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000181A4 01                         byte_17DFC:	dc.b 1
000181A5 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000181AA 01                         byte_17E02:	dc.b 1
000181AB 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000181B0 04                         byte_17E08:	dc.b 4
000181B1 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000181B6 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000181BB F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000181C0 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000181C5 00                         		dc.b 0
000181C6 02                         byte_17E1E:	dc.b 2
000181C7 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000181CC 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000181D1 00                         		dc.b 0
000181D2 02                         byte_17E2A:	dc.b 2
000181D3 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000181D8 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000181DE 00                         		even
000181DE 00                         		even
000181DE                            
000181DE                            ; ===========================================================================
000181DE                            ; ---------------------------------------------------------------------------
000181DE                            ; Object 77 - Eggman (LZ)
000181DE                            ; ---------------------------------------------------------------------------
000181DE                            
000181DE                            Obj77:					; XREF: Obj_Index
000181DE 7000                       		moveq	#0,d0
000181E0 1028 0024                  		move.b	$24(a0),d0
000181E4 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
000181E8 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
000181EC                            ; ===========================================================================
000181EC 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
000181EE 0000                       		dc.w Obj77_ShipMain-Obj77_Index
000181F0 0000                       		dc.w Obj77_FaceMain-Obj77_Index
000181F2 0000                       		dc.w Obj77_FlameMain-Obj77_Index
000181F4                            
000181F4 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
000181F6 0401                       		dc.b 4,	1
000181F8 0607                       		dc.b 6,	7
000181FA                            ; ===========================================================================
000181FA                            
000181FA                            Obj77_Main:				; XREF: Obj77_Index
000181FA 317C 1E10 0008             		move.w	#$1E10,8(a0)
00018200 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00018206 3168 0008 0030             		move.w	8(a0),$30(a0)
0001820C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018212 117C 000F 0020             		move.b	#$F,$20(a0)
00018218 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001821E 117C 0004 0018             		move.b	#4,$18(a0)
00018224 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00018228 2248                       		movea.l	a0,a1
0001822A 7202                       		moveq	#2,d1
0001822C 6000                       		bra.s	Obj77_LoadBoss
0001822E                            ; ===========================================================================
0001822E                            
0001822E                            Obj77_Loop:
0001822E 4EB9 0000 DDFA             		jsr	SingleObjLoad2
00018234 6600                       		bne.s	Obj77_ShipMain
00018236 12BC 0077                  		move.b	#$77,0(a1)
0001823A 3368 0008 0008             		move.w	8(a0),8(a1)
00018240 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018246                            
00018246                            Obj77_LoadBoss:				; XREF: Obj77_Main
00018246 08A8 0000 0022             		bclr	#0,$22(a0)
0001824C 4229 0025                  		clr.b	$25(a1)
00018250 135A 0024                  		move.b	(a2)+,$24(a1)
00018254 135A 001C                  		move.b	(a2)+,$1C(a1)
00018258 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001825E 237C 0001 80B4 0004        		move.l	#Map_Eggman,4(a1)
00018266 337C 0400 0002             		move.w	#$400,2(a1)
0001826C 137C 0004 0001             		move.b	#4,1(a1)
00018272 137C 0020 0019             		move.b	#$20,$19(a1)
00018278 2348 0034                  		move.l	a0,$34(a1)
0001827C 51C9 FFB0                  		dbf	d1,Obj77_Loop
00018280                            
00018280                            Obj77_ShipMain:
00018280 43F8 D000                  		lea	($FFFFD000).w,a1
00018284 7000                       		moveq	#0,d0
00018286 1028 0025                  		move.b	$25(a0),d0
0001828A 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001828E 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00018292 43F9 0001 8064             		lea	(Ani_Eggman).l,a1
00018298 4EB9 0000 AA10             		jsr	AnimateSprite
0001829E 7003                       		moveq	#3,d0
000182A0 C028 0022                  		and.b	$22(a0),d0
000182A4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000182AA 8128 0001                  		or.b	d0,1(a0)
000182AE 4EF9 0000 D95E             		jmp	DisplaySprite
000182B4                            ; ===========================================================================
000182B4 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
000182B8 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
000182BC 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
000182C0 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
000182C4                            ; ===========================================================================
000182C4                            
000182C4                            loc_17F1E:				; XREF: Obj77_ShipIndex
000182C4 3029 0008                  		move.w	8(a1),d0
000182C8 0C40 1DA0                  		cmpi.w	#$1DA0,d0
000182CC 6500                       		bcs.s	loc_17F38
000182CE 317C FE80 0012             		move.w	#-$180,$12(a0)
000182D4 317C 0060 0010             		move.w	#$60,$10(a0)
000182DA 5428 0025                  		addq.b	#2,$25(a0)
000182DE                            
000182DE                            loc_17F38:
000182DE 6100 F974                  		bsr.w	BossMove
000182E2 3168 0038 000C             		move.w	$38(a0),$C(a0)
000182E8 3168 0030 0008             		move.w	$30(a0),8(a0)
000182EE                            
000182EE                            loc_17F48:
000182EE 4A28 003D                  		tst.b	$3D(a0)
000182F2 6600                       		bne.s	loc_17F8E
000182F4 4A28 0022                  		tst.b	$22(a0)
000182F8 6B00                       		bmi.s	loc_17F92
000182FA 4A28 0020                  		tst.b	$20(a0)
000182FE 6600                       		bne.s	locret_17F8C
00018300 4A28 003E                  		tst.b	$3E(a0)
00018304 6600                       		bne.s	loc_17F70
00018306 117C 0020 003E             		move.b	#$20,$3E(a0)
0001830C 303C 00AC                  		move.w	#$AC,d0
00018310 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
00018316                            
00018316                            loc_17F70:
00018316 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001831A 7000                       		moveq	#0,d0
0001831C 4A51                       		tst.w	(a1)
0001831E 6600                       		bne.s	loc_17F7E
00018320 303C 0EEE                  		move.w	#$EEE,d0
00018324                            
00018324                            loc_17F7E:
00018324 3280                       		move.w	d0,(a1)
00018326 5328 003E                  		subq.b	#1,$3E(a0)
0001832A 6600                       		bne.s	locret_17F8C
0001832C 117C 000F 0020             		move.b	#$F,$20(a0)
00018332                            
00018332                            locret_17F8C:
00018332 4E75                       		rts	
00018334                            ; ===========================================================================
00018334                            
00018334                            loc_17F8E:				; XREF: loc_17F48
00018334 6000 F8DC                  		bra.w	BossDefeated
00018338                            ; ===========================================================================
00018338                            
00018338                            loc_17F92:				; XREF: loc_17F48
00018338 7064                       		moveq	#100,d0
0001833A 6100 0000                  		bsr.w	AddPoints
0001833E 117C 00FF 003D             		move.b	#-1,$3D(a0)
00018344 4E75                       		rts	
00018346                            ; ===========================================================================
00018346                            
00018346                            loc_17FA0:				; XREF: Obj77_ShipIndex
00018346 70FE                       		moveq	#-2,d0
00018348 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001834E 6500                       		bcs.s	loc_17FB6
00018350 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00018356 4268 0010                  		clr.w	$10(a0)
0001835A 5240                       		addq.w	#1,d0
0001835C                            
0001835C                            loc_17FB6:
0001835C 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00018362 6E00                       		bgt.s	loc_17FCA
00018364 317C 0500 0038             		move.w	#$500,$38(a0)
0001836A 4268 0012                  		clr.w	$12(a0)
0001836E 5240                       		addq.w	#1,d0
00018370                            
00018370                            loc_17FCA:
00018370 6600                       		bne.s	loc_17FDC
00018372 317C 0140 0010             		move.w	#$140,$10(a0)
00018378 317C FE00 0012             		move.w	#-$200,$12(a0)
0001837E 5428 0025                  		addq.b	#2,$25(a0)
00018382                            
00018382                            loc_17FDC:
00018382 6000 FF5A                  		bra.w	loc_17F38
00018386                            ; ===========================================================================
00018386                            
00018386                            loc_17FE0:				; XREF: Obj77_ShipIndex
00018386 70FE                       		moveq	#-2,d0
00018388 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001838E 6500                       		bcs.s	loc_17FF6
00018390 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00018396 4268 0010                  		clr.w	$10(a0)
0001839A 5240                       		addq.w	#1,d0
0001839C                            
0001839C                            loc_17FF6:
0001839C 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
000183A2 6E00                       		bgt.s	loc_1800A
000183A4 317C 04C0 0038             		move.w	#$4C0,$38(a0)
000183AA 4268 0012                  		clr.w	$12(a0)
000183AE 5240                       		addq.w	#1,d0
000183B0                            
000183B0                            loc_1800A:
000183B0 6600                       		bne.s	loc_1801A
000183B2 317C FE80 0012             		move.w	#-$180,$12(a0)
000183B8 5428 0025                  		addq.b	#2,$25(a0)
000183BC 4228 003F                  		clr.b	$3F(a0)
000183C0                            
000183C0                            loc_1801A:
000183C0 6000 FF1C                  		bra.w	loc_17F38
000183C4                            ; ===========================================================================
000183C4                            
000183C4                            loc_1801E:				; XREF: Obj77_ShipIndex
000183C4 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
000183CA 6E00                       		bgt.s	loc_1804E
000183CC 317C 0100 0038             		move.w	#$100,$38(a0)
000183D2 317C 0140 0010             		move.w	#$140,$10(a0)
000183D8 317C FF80 0012             		move.w	#-$80,$12(a0)
000183DE 4A28 003D                  		tst.b	$3D(a0)
000183E2 6700                       		beq.s	loc_18046
000183E4 E1E8 0010                  		asl	$10(a0)
000183E8 E1E8 0012                  		asl	$12(a0)
000183EC                            
000183EC                            loc_18046:
000183EC 5428 0025                  		addq.b	#2,$25(a0)
000183F0 6000 FEEC                  		bra.w	loc_17F38
000183F4                            ; ===========================================================================
000183F4                            
000183F4                            loc_1804E:
000183F4 08E8 0000 0022             		bset	#0,$22(a0)
000183FA 5428 003F                  		addq.b	#2,$3F(a0)
000183FE 1028 003F                  		move.b	$3F(a0),d0
00018402 4EB9 0000 2BFA             		jsr	(CalcSine).l
00018408 4A41                       		tst.w	d1
0001840A 6A00                       		bpl.s	loc_1806C
0001840C 08A8 0000 0022             		bclr	#0,$22(a0)
00018412                            
00018412                            loc_1806C:
00018412 E840                       		asr.w	#4,d0
00018414 4840                       		swap	d0
00018416 4240                       		clr.w	d0
00018418 D0A8 0030                  		add.l	$30(a0),d0
0001841C 4840                       		swap	d0
0001841E 3140 0008                  		move.w	d0,8(a0)
00018422 3028 0012                  		move.w	$12(a0),d0
00018426 3238 D00C                  		move.w	($FFFFD00C).w,d1
0001842A 9268 000C                  		sub.w	$C(a0),d1
0001842E 6500                       		bcs.s	loc_180A2
00018430 0441 0048                  		subi.w	#$48,d1
00018434 6500                       		bcs.s	loc_180A2
00018436 E240                       		asr.w	#1,d0
00018438 0441 0028                  		subi.w	#$28,d1
0001843C 6500                       		bcs.s	loc_180A2
0001843E E240                       		asr.w	#1,d0
00018440 0441 0028                  		subi.w	#$28,d1
00018444 6500                       		bcs.s	loc_180A2
00018446 7000                       		moveq	#0,d0
00018448                            
00018448                            loc_180A2:
00018448 48C0                       		ext.l	d0
0001844A E180                       		asl.l	#8,d0
0001844C 4A28 003D                  		tst.b	$3D(a0)
00018450 6700                       		beq.s	loc_180AE
00018452 D080                       		add.l	d0,d0
00018454                            
00018454                            loc_180AE:
00018454 D1A8 0038                  		add.l	d0,$38(a0)
00018458 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001845E 6000 FE8E                  		bra.w	loc_17F48
00018462                            ; ===========================================================================
00018462                            
00018462                            loc_180BC:				; XREF: Obj77_ShipIndex
00018462 70FE                       		moveq	#-2,d0
00018464 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001846A 6500                       		bcs.s	loc_180D2
0001846C 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00018472 4268 0010                  		clr.w	$10(a0)
00018476 5240                       		addq.w	#1,d0
00018478                            
00018478                            loc_180D2:
00018478 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001847E 6E00                       		bgt.s	loc_180E6
00018480 317C 00C0 0038             		move.w	#$C0,$38(a0)
00018486 4268 0012                  		clr.w	$12(a0)
0001848A 5240                       		addq.w	#1,d0
0001848C                            
0001848C                            loc_180E6:
0001848C 6600                       		bne.s	loc_180F2
0001848E 5428 0025                  		addq.b	#2,$25(a0)
00018492 08A8 0000 0022             		bclr	#0,$22(a0)
00018498                            
00018498                            loc_180F2:
00018498 6000 FE44                  		bra.w	loc_17F38
0001849C                            ; ===========================================================================
0001849C                            
0001849C                            loc_180F6:				; XREF: Obj77_ShipIndex
0001849C 4A28 003D                  		tst.b	$3D(a0)
000184A0 6600                       		bne.s	loc_18112
000184A2 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
000184A8 6D00                       		blt.s	loc_18126
000184AA 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
000184B0 6E00                       		bgt.s	loc_18126
000184B2 117C 0032 003C             		move.b	#$32,$3C(a0)
000184B8                            
000184B8                            loc_18112:
000184B8 303C 0082                  		move.w	#$82,d0
000184BC 4EB9 0000 15B6             		jsr	(PlaySound).l	; play LZ music
000184C2 08E8 0000 0022             		bset	#0,$22(a0)
000184C8 5428 0025                  		addq.b	#2,$25(a0)
000184CC                            
000184CC                            loc_18126:
000184CC 6000 FE10                  		bra.w	loc_17F38
000184D0                            ; ===========================================================================
000184D0                            
000184D0                            loc_1812A:				; XREF: Obj77_ShipIndex
000184D0 4A28 003D                  		tst.b	$3D(a0)
000184D4 6600                       		bne.s	loc_18136
000184D6 5328 003C                  		subq.b	#1,$3C(a0)
000184DA 6600                       		bne.s	loc_1814E
000184DC                            
000184DC                            loc_18136:
000184DC 4228 003C                  		clr.b	$3C(a0)
000184E0 317C 0400 0010             		move.w	#$400,$10(a0)
000184E6 317C FFC0 0012             		move.w	#-$40,$12(a0)
000184EC 4228 003D                  		clr.b	$3D(a0)
000184F0 5428 0025                  		addq.b	#2,$25(a0)
000184F4                            
000184F4                            loc_1814E:
000184F4 6000 FDE8                  		bra.w	loc_17F38
000184F8                            ; ===========================================================================
000184F8                            
000184F8                            loc_18152:				; XREF: Obj77_ShipIndex
000184F8 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
000184FE 6400                       		bcc.s	loc_18160
00018500 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018504 6000                       		bra.s	loc_18166
00018506                            ; ===========================================================================
00018506                            
00018506                            loc_18160:
00018506 4A28 0001                  		tst.b	1(a0)
0001850A 6A00                       		bpl.s	Obj77_ShipDel
0001850C                            
0001850C                            loc_18166:
0001850C 6000 FDD0                  		bra.w	loc_17F38
00018510                            ; ===========================================================================
00018510                            
00018510                            Obj77_ShipDel:
00018510 4EF9 0000 D99A             		jmp	DeleteObject
00018516                            ; ===========================================================================
00018516                            
00018516                            Obj77_FaceMain:				; XREF: Obj77_Index
00018516 2268 0034                  		movea.l	$34(a0),a1
0001851A 1011                       		move.b	(a1),d0
0001851C B010                       		cmp.b	(a0),d0
0001851E 6600                       		bne.s	Obj77_FaceDel
00018520 7000                       		moveq	#0,d0
00018522 1029 0025                  		move.b	$25(a1),d0
00018526 7201                       		moveq	#1,d1
00018528 4A28 003D                  		tst.b	$3D(a0)
0001852C 6700                       		beq.s	loc_1818C
0001852E 720A                       		moveq	#$A,d1
00018530 6000                       		bra.s	loc_181A0
00018532                            ; ===========================================================================
00018532                            
00018532                            loc_1818C:
00018532 4A29 0020                  		tst.b	$20(a1)
00018536 6600                       		bne.s	loc_18196
00018538 7205                       		moveq	#5,d1
0001853A 6000                       		bra.s	loc_181A0
0001853C                            ; ===========================================================================
0001853C                            
0001853C                            loc_18196:
0001853C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018542 6500                       		bcs.s	loc_181A0
00018544 7204                       		moveq	#4,d1
00018546                            
00018546                            loc_181A0:
00018546 1141 001C                  		move.b	d1,$1C(a0)
0001854A 0C00 000E                  		cmpi.b	#$E,d0
0001854E 6600                       		bne.s	loc_181B6
00018550 117C 0006 001C             		move.b	#6,$1C(a0)
00018556 4A28 0001                  		tst.b	1(a0)
0001855A 6A00                       		bpl.s	Obj77_FaceDel
0001855C                            
0001855C                            loc_181B6:
0001855C 6000                       		bra.s	Obj77_Display
0001855E                            ; ===========================================================================
0001855E                            
0001855E                            Obj77_FaceDel:
0001855E 4EF9 0000 D99A             		jmp	DeleteObject
00018564                            ; ===========================================================================
00018564                            
00018564                            Obj77_FlameMain:			; XREF: Obj77_Index
00018564 117C 0007 001C             		move.b	#7,$1C(a0)
0001856A 2268 0034                  		movea.l	$34(a0),a1
0001856E 1011                       		move.b	(a1),d0
00018570 B010                       		cmp.b	(a0),d0
00018572 6600                       		bne.s	Obj77_FlameDel
00018574 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
0001857A 6600                       		bne.s	loc_181F0
0001857C 117C 000B 001C             		move.b	#$B,$1C(a0)
00018582 4A28 0001                  		tst.b	1(a0)
00018586 6A00                       		bpl.s	Obj77_FlameDel
00018588 6000                       		bra.s	loc_181F0
0001858A                            ; ===========================================================================
0001858A 4A69 0010                  		tst.w	$10(a1)
0001858E 6700                       		beq.s	loc_181F0
00018590 117C 0008 001C             		move.b	#8,$1C(a0)
00018596                            
00018596                            loc_181F0:
00018596 6000                       		bra.s	Obj77_Display
00018598                            ; ===========================================================================
00018598                            
00018598                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00018598 4EF9 0000 D99A             		jmp	DeleteObject
0001859E                            ; ===========================================================================
0001859E                            
0001859E                            Obj77_Display:
0001859E 43F9 0001 8064             		lea	(Ani_Eggman).l,a1
000185A4 4EB9 0000 AA10             		jsr	AnimateSprite
000185AA 2268 0034                  		movea.l	$34(a0),a1
000185AE 3169 0008 0008             		move.w	8(a1),8(a0)
000185B4 3169 000C 000C             		move.w	$C(a1),$C(a0)
000185BA 1169 0022 0022             		move.b	$22(a1),$22(a0)
000185C0 7003                       		moveq	#3,d0
000185C2 C028 0022                  		and.b	$22(a0),d0
000185C6 0228 00FC 0001             		andi.b	#-4,1(a0)
000185CC 8128 0001                  		or.b	d0,1(a0)
000185D0 4EF9 0000 D95E             		jmp	DisplaySprite
000185D6                            ; ===========================================================================
000185D6                            ; ---------------------------------------------------------------------------
000185D6                            ; Object 73 - Eggman (MZ)
000185D6                            ; ---------------------------------------------------------------------------
000185D6                            
000185D6                            Obj73:					; XREF: Obj_Index
000185D6 7000                       		moveq	#0,d0
000185D8 1028 0024                  		move.b	$24(a0),d0
000185DC 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
000185E0 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
000185E4                            ; ===========================================================================
000185E4 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
000185E6 0000                       		dc.w Obj73_ShipMain-Obj73_Index
000185E8 0000                       		dc.w Obj73_FaceMain-Obj73_Index
000185EA 0000                       		dc.w Obj73_FlameMain-Obj73_Index
000185EC 0000                       		dc.w Obj73_TubeMain-Obj73_Index
000185EE                            
000185EE 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000185F1 0401 04                    		dc.b 4,	1, 4
000185F4 0607 04                    		dc.b 6,	7, 4
000185F7 0800 03                    		dc.b 8,	0, 3
000185FA                            ; ===========================================================================
000185FA                            
000185FA                            Obj73_Main:				; XREF: Obj73_Index
000185FA 3168 0008 0030             		move.w	8(a0),$30(a0)
00018600 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018606 117C 000F 0020             		move.b	#$F,$20(a0)
0001860C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018612 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018616 2248                       		movea.l	a0,a1
00018618 7203                       		moveq	#3,d1
0001861A 6000                       		bra.s	Obj73_LoadBoss
0001861C                            ; ===========================================================================
0001861C                            
0001861C                            Obj73_Loop:
0001861C 4EB9 0000 DDFA             		jsr	SingleObjLoad2
00018622 6600                       		bne.s	Obj73_ShipMain
00018624 12BC 0073                  		move.b	#$73,0(a1)
00018628 3368 0008 0008             		move.w	8(a0),8(a1)
0001862E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018634                            
00018634                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018634 08A8 0000 0022             		bclr	#0,$22(a0)
0001863A 4229 0025                  		clr.b	$25(a1)
0001863E 135A 0024                  		move.b	(a2)+,$24(a1)
00018642 135A 001C                  		move.b	(a2)+,$1C(a1)
00018646 135A 0018                  		move.b	(a2)+,$18(a1)
0001864A 237C 0001 80B4 0004        		move.l	#Map_Eggman,4(a1)
00018652 337C 0400 0002             		move.w	#$400,2(a1)
00018658 137C 0004 0001             		move.b	#4,1(a1)
0001865E 137C 0020 0019             		move.b	#$20,$19(a1)
00018664 2348 0034                  		move.l	a0,$34(a1)
00018668 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001866C                            
0001866C                            Obj73_ShipMain:
0001866C 7000                       		moveq	#0,d0
0001866E 1028 0025                  		move.b	$25(a0),d0
00018672 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018676 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001867A 43F9 0001 8064             		lea	(Ani_Eggman).l,a1
00018680 4EB9 0000 AA10             		jsr	AnimateSprite
00018686 7003                       		moveq	#3,d0
00018688 C028 0022                  		and.b	$22(a0),d0
0001868C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018692 8128 0001                  		or.b	d0,1(a0)
00018696 4EF9 0000 D95E             		jmp	DisplaySprite
0001869C                            ; ===========================================================================
0001869C 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001869E 0000                       		dc.w loc_183AA-Obj73_ShipIndex
000186A0 0000                       		dc.w loc_184F6-Obj73_ShipIndex
000186A2 0000                       		dc.w loc_1852C-Obj73_ShipIndex
000186A4 0000                       		dc.w loc_18582-Obj73_ShipIndex
000186A6                            ; ===========================================================================
000186A6                            
000186A6                            loc_18302:				; XREF: Obj73_ShipIndex
000186A6 1028 003F                  		move.b	$3F(a0),d0
000186AA 5428 003F                  		addq.b	#2,$3F(a0)
000186AE 4EB9 0000 2BFA             		jsr	(CalcSine).l
000186B4 E440                       		asr.w	#2,d0
000186B6 3140 0012                  		move.w	d0,$12(a0)
000186BA 317C FF00 0010             		move.w	#-$100,$10(a0)
000186C0 6100 F592                  		bsr.w	BossMove
000186C4 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
000186CA 6600                       		bne.s	loc_18334
000186CC 5428 0025                  		addq.b	#2,$25(a0)
000186D0 4228 0028                  		clr.b	$28(a0)
000186D4 42A8 0010                  		clr.l	$10(a0)
000186D8                            
000186D8                            loc_18334:
000186D8 4EB9 0000 2BD4             		jsr	(RandomNumber).l
000186DE 1140 0034                  		move.b	d0,$34(a0)
000186E2                            
000186E2                            loc_1833E:
000186E2 3168 0038 000C             		move.w	$38(a0),$C(a0)
000186E8 3168 0030 0008             		move.w	$30(a0),8(a0)
000186EE 0C28 0004 0025             		cmpi.b	#4,$25(a0)
000186F4 6400                       		bcc.s	locret_18390
000186F6 4A28 0022                  		tst.b	$22(a0)
000186FA 6B00                       		bmi.s	loc_18392
000186FC 4A28 0020                  		tst.b	$20(a0)
00018700 6600                       		bne.s	locret_18390
00018702 4A28 003E                  		tst.b	$3E(a0)
00018706 6600                       		bne.s	loc_18374
00018708 117C 0028 003E             		move.b	#$28,$3E(a0)
0001870E 303C 00AC                  		move.w	#$AC,d0
00018712 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018718                            
00018718                            loc_18374:
00018718 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001871C 7000                       		moveq	#0,d0
0001871E 4A51                       		tst.w	(a1)
00018720 6600                       		bne.s	loc_18382
00018722 303C 0EEE                  		move.w	#$EEE,d0
00018726                            
00018726                            loc_18382:
00018726 3280                       		move.w	d0,(a1)
00018728 5328 003E                  		subq.b	#1,$3E(a0)
0001872C 6600                       		bne.s	locret_18390
0001872E 117C 000F 0020             		move.b	#$F,$20(a0)
00018734                            
00018734                            locret_18390:
00018734 4E75                       		rts	
00018736                            ; ===========================================================================
00018736                            
00018736                            loc_18392:				; XREF: loc_1833E
00018736 7064                       		moveq	#100,d0
00018738 6100 0000                  		bsr.w	AddPoints
0001873C 117C 0004 0025             		move.b	#4,$25(a0)
00018742 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018748 4268 0010                  		clr.w	$10(a0)
0001874C 4E75                       		rts	
0001874E                            ; ===========================================================================
0001874E                            
0001874E                            loc_183AA:				; XREF: Obj73_ShipIndex
0001874E 7000                       		moveq	#0,d0
00018750 1028 0028                  		move.b	$28(a0),d0
00018754 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018758 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001875C 0228 0006 0028             		andi.b	#6,$28(a0)
00018762 6000 FF7E                  		bra.w	loc_1833E
00018766                            ; ===========================================================================
00018766 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018768 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001876A 0000                       		dc.w loc_183CA-off_183C2
0001876C 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001876E                            ; ===========================================================================
0001876E                            
0001876E                            loc_183CA:				; XREF: off_183C2
0001876E 4A68 0010                  		tst.w	$10(a0)
00018772 6600                       		bne.s	loc_183FE
00018774 7040                       		moveq	#$40,d0
00018776 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001877C 6700                       		beq.s	loc_183E6
0001877E 6500                       		bcs.s	loc_183DE
00018780 4440                       		neg.w	d0
00018782                            
00018782                            loc_183DE:
00018782 3140 0012                  		move.w	d0,$12(a0)
00018786 6000 F4CC                  		bra.w	BossMove
0001878A                            ; ===========================================================================
0001878A                            
0001878A                            loc_183E6:
0001878A 317C 0200 0010             		move.w	#$200,$10(a0)
00018790 317C 0100 0012             		move.w	#$100,$12(a0)
00018796 0828 0000 0022             		btst	#0,$22(a0)
0001879C 6600                       		bne.s	loc_183FE
0001879E 4468 0010                  		neg.w	$10(a0)
000187A2                            
000187A2                            loc_183FE:
000187A2 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
000187A8 6400                       		bcc.s	Obj73_MakeLava
000187AA 6100 F4A8                  		bsr.w	BossMove
000187AE 5968 0012                  		subq.w	#4,$12(a0)
000187B2                            
000187B2                            Obj73_MakeLava:
000187B2 5328 0034                  		subq.b	#1,$34(a0)
000187B6 6400                       		bcc.s	loc_1845C
000187B8 4EB9 0000 DDE4             		jsr	SingleObjLoad
000187BE 6600                       		bne.s	loc_1844A
000187C0 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
000187C4 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
000187CA 4EB9 0000 2BD4             		jsr	(RandomNumber).l
000187D0 0280 0000 FFFF             		andi.l	#$FFFF,d0
000187D6 80FC 0050                  		divu.w	#$50,d0
000187DA 4840                       		swap	d0
000187DC 0640 1878                  		addi.w	#$1878,d0
000187E0 3340 0008                  		move.w	d0,8(a1)
000187E4 EE09                       		lsr.b	#7,d1
000187E6 337C 00FF 0028             		move.w	#$FF,$28(a1)
000187EC                            
000187EC                            loc_1844A:
000187EC 4EB9 0000 2BD4             		jsr	(RandomNumber).l
000187F2 0200 001F                  		andi.b	#$1F,d0
000187F6 0600 0040                  		addi.b	#$40,d0
000187FA 1140 0034                  		move.b	d0,$34(a0)
000187FE                            
000187FE                            loc_1845C:
000187FE 0828 0000 0022             		btst	#0,$22(a0)
00018804 6700                       		beq.s	loc_18474
00018806 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001880C 6D00                       		blt.s	locret_1849C
0001880E 317C 1910 0030             		move.w	#$1910,$30(a0)
00018814 6000                       		bra.s	loc_18482
00018816                            ; ===========================================================================
00018816                            
00018816                            loc_18474:
00018816 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001881C 6E00                       		bgt.s	locret_1849C
0001881E 317C 1830 0030             		move.w	#$1830,$30(a0)
00018824                            
00018824                            loc_18482:
00018824 4268 0010                  		clr.w	$10(a0)
00018828 317C FE80 0012             		move.w	#-$180,$12(a0)
0001882E 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018834 6400                       		bcc.s	loc_18498
00018836 4468 0012                  		neg.w	$12(a0)
0001883A                            
0001883A                            loc_18498:
0001883A 5428 0028                  		addq.b	#2,$28(a0)
0001883E                            
0001883E                            locret_1849C:
0001883E 4E75                       		rts	
00018840                            ; ===========================================================================
00018840                            
00018840                            Obj73_MakeLava2:			; XREF: off_183C2
00018840 6100 F412                  		bsr.w	BossMove
00018844 3028 0038                  		move.w	$38(a0),d0
00018848 0440 022C                  		subi.w	#$22C,d0
0001884C 6E00                       		bgt.s	locret_184F4
0001884E 303C 022C                  		move.w	#$22C,d0
00018852 4A68 0012                  		tst.w	$12(a0)
00018856 6700                       		beq.s	loc_184EA
00018858 4268 0012                  		clr.w	$12(a0)
0001885C 317C 0050 003C             		move.w	#$50,$3C(a0)
00018862 0868 0000 0022             		bchg	#0,$22(a0)
00018868 4EB9 0000 DDE4             		jsr	SingleObjLoad
0001886E 6600                       		bne.s	loc_184EA
00018870 3368 0030 0008             		move.w	$30(a0),8(a1)
00018876 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001887C 0669 0018 000C             		addi.w	#$18,$C(a1)
00018882 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018886 137C 0001 0028             		move.b	#1,$28(a1)
0001888C                            
0001888C                            loc_184EA:
0001888C 5368 003C                  		subq.w	#1,$3C(a0)
00018890 6600                       		bne.s	locret_184F4
00018892 5428 0028                  		addq.b	#2,$28(a0)
00018896                            
00018896                            locret_184F4:
00018896 4E75                       		rts	
00018898                            ; ===========================================================================
00018898                            
00018898                            loc_184F6:				; XREF: Obj73_ShipIndex
00018898 5368 003C                  		subq.w	#1,$3C(a0)
0001889C 6B00                       		bmi.s	loc_18500
0001889E 6000 F372                  		bra.w	BossDefeated
000188A2                            ; ===========================================================================
000188A2                            
000188A2                            loc_18500:
000188A2 08E8 0000 0022             		bset	#0,$22(a0)
000188A8 08A8 0007 0022             		bclr	#7,$22(a0)
000188AE 4268 0010                  		clr.w	$10(a0)
000188B2 5428 0025                  		addq.b	#2,$25(a0)
000188B6 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000188BC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000188C0 6600                       		bne.s	locret_1852A
000188C2 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000188C8 4268 0012                  		clr.w	$12(a0)
000188CC                            
000188CC                            locret_1852A:
000188CC 4E75                       		rts	
000188CE                            ; ===========================================================================
000188CE                            
000188CE                            loc_1852C:				; XREF: Obj73_ShipIndex
000188CE 5268 003C                  		addq.w	#1,$3C(a0)
000188D2 6700                       		beq.s	loc_18544
000188D4 6A00                       		bpl.s	loc_1854E
000188D6 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
000188DC 6400                       		bcc.s	loc_18544
000188DE 0668 0018 0012             		addi.w	#$18,$12(a0)
000188E4 6000                       		bra.s	loc_1857A
000188E6                            ; ===========================================================================
000188E6                            
000188E6                            loc_18544:
000188E6 4268 0012                  		clr.w	$12(a0)
000188EA 4268 003C                  		clr.w	$3C(a0)
000188EE 6000                       		bra.s	loc_1857A
000188F0                            ; ===========================================================================
000188F0                            
000188F0                            loc_1854E:
000188F0 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000188F6 6500                       		bcs.s	loc_18566
000188F8 6700                       		beq.s	loc_1856C
000188FA 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018900 6500                       		bcs.s	loc_1857A
00018902 5428 0025                  		addq.b	#2,$25(a0)
00018906 6000                       		bra.s	loc_1857A
00018908                            ; ===========================================================================
00018908                            
00018908                            loc_18566:
00018908 5168 0012                  		subq.w	#8,$12(a0)
0001890C 6000                       		bra.s	loc_1857A
0001890E                            ; ===========================================================================
0001890E                            
0001890E                            loc_1856C:
0001890E 4268 0012                  		clr.w	$12(a0)
00018912 303C 0083                  		move.w	#$83,d0
00018916 4EB9 0000 15B6             		jsr	(PlaySound).l	; play MZ music
0001891C                            
0001891C                            loc_1857A:
0001891C 6100 F336                  		bsr.w	BossMove
00018920 6000 FDC0                  		bra.w	loc_1833E
00018924                            ; ===========================================================================
00018924                            
00018924                            loc_18582:				; XREF: Obj73_ShipIndex
00018924 317C 0500 0010             		move.w	#$500,$10(a0)
0001892A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018930 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018936 6400                       		bcc.s	loc_1859C
00018938 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001893C 6000                       		bra.s	loc_185A2
0001893E                            ; ===========================================================================
0001893E                            
0001893E                            loc_1859C:
0001893E 4A28 0001                  		tst.b	1(a0)
00018942 6A00                       		bpl.s	Obj73_ShipDel
00018944                            
00018944                            loc_185A2:
00018944 6100 F30E                  		bsr.w	BossMove
00018948 6000 FD98                  		bra.w	loc_1833E
0001894C                            ; ===========================================================================
0001894C                            
0001894C                            Obj73_ShipDel:
0001894C 4EF9 0000 D99A             		jmp	DeleteObject
00018952                            ; ===========================================================================
00018952                            
00018952                            Obj73_FaceMain:				; XREF: Obj73_Index
00018952 7000                       		moveq	#0,d0
00018954 7201                       		moveq	#1,d1
00018956 2268 0034                  		movea.l	$34(a0),a1
0001895A 1029 0025                  		move.b	$25(a1),d0
0001895E 5540                       		subq.w	#2,d0
00018960 6600                       		bne.s	loc_185D2
00018962 0829 0001 0028             		btst	#1,$28(a1)
00018968 6700                       		beq.s	loc_185DA
0001896A 4A69 0012                  		tst.w	$12(a1)
0001896E 6600                       		bne.s	loc_185DA
00018970 7204                       		moveq	#4,d1
00018972 6000                       		bra.s	loc_185EE
00018974                            ; ===========================================================================
00018974                            
00018974                            loc_185D2:
00018974 5500                       		subq.b	#2,d0
00018976 6B00                       		bmi.s	loc_185DA
00018978 720A                       		moveq	#$A,d1
0001897A 6000                       		bra.s	loc_185EE
0001897C                            ; ===========================================================================
0001897C                            
0001897C                            loc_185DA:
0001897C 4A29 0020                  		tst.b	$20(a1)
00018980 6600                       		bne.s	loc_185E4
00018982 7205                       		moveq	#5,d1
00018984 6000                       		bra.s	loc_185EE
00018986                            ; ===========================================================================
00018986                            
00018986                            loc_185E4:
00018986 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001898C 6500                       		bcs.s	loc_185EE
0001898E 7204                       		moveq	#4,d1
00018990                            
00018990                            loc_185EE:
00018990 1141 001C                  		move.b	d1,$1C(a0)
00018994 5900                       		subq.b	#4,d0
00018996 6600                       		bne.s	loc_18602
00018998 117C 0006 001C             		move.b	#6,$1C(a0)
0001899E 4A28 0001                  		tst.b	1(a0)
000189A2 6A00                       		bpl.s	Obj73_FaceDel
000189A4                            
000189A4                            loc_18602:
000189A4 6000                       		bra.s	Obj73_Display
000189A6                            ; ===========================================================================
000189A6                            
000189A6                            Obj73_FaceDel:
000189A6 4EF9 0000 D99A             		jmp	DeleteObject
000189AC                            ; ===========================================================================
000189AC                            
000189AC                            Obj73_FlameMain:			; XREF: Obj73_Index
000189AC 117C 0007 001C             		move.b	#7,$1C(a0)
000189B2 2268 0034                  		movea.l	$34(a0),a1
000189B6 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000189BC 6D00                       		blt.s	loc_1862A
000189BE 117C 000B 001C             		move.b	#$B,$1C(a0)
000189C4 4A28 0001                  		tst.b	1(a0)
000189C8 6A00                       		bpl.s	Obj73_FlameDel
000189CA 6000                       		bra.s	loc_18636
000189CC                            ; ===========================================================================
000189CC                            
000189CC                            loc_1862A:
000189CC 4A69 0010                  		tst.w	$10(a1)
000189D0 6700                       		beq.s	loc_18636
000189D2 117C 0008 001C             		move.b	#8,$1C(a0)
000189D8                            
000189D8                            loc_18636:
000189D8 6000                       		bra.s	Obj73_Display
000189DA                            ; ===========================================================================
000189DA                            
000189DA                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
000189DA 4EF9 0000 D99A             		jmp	DeleteObject
000189E0                            ; ===========================================================================
000189E0                            
000189E0                            Obj73_Display:
000189E0 43F9 0001 8064             		lea	(Ani_Eggman).l,a1
000189E6 4EB9 0000 AA10             		jsr	AnimateSprite
000189EC                            
000189EC                            loc_1864A:
000189EC 2268 0034                  		movea.l	$34(a0),a1
000189F0 3169 0008 0008             		move.w	8(a1),8(a0)
000189F6 3169 000C 000C             		move.w	$C(a1),$C(a0)
000189FC 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018A02 7003                       		moveq	#3,d0
00018A04 C028 0022                  		and.b	$22(a0),d0
00018A08 0228 00FC 0001             		andi.b	#-4,1(a0)
00018A0E 8128 0001                  		or.b	d0,1(a0)
00018A12 4EF9 0000 D95E             		jmp	DisplaySprite
00018A18                            ; ===========================================================================
00018A18                            
00018A18                            Obj73_TubeMain:				; XREF: Obj73_Index
00018A18 2268 0034                  		movea.l	$34(a0),a1
00018A1C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018A22 6600                       		bne.s	loc_18688
00018A24 4A28 0001                  		tst.b	1(a0)
00018A28 6A00                       		bpl.s	Obj73_TubeDel
00018A2A                            
00018A2A                            loc_18688:
00018A2A 217C 0001 817C 0004        		move.l	#Map_BossItems,4(a0)
00018A32 317C 246C 0002             		move.w	#$246C,2(a0)
00018A38 117C 0004 001A             		move.b	#4,$1A(a0)
00018A3E 60AC                       		bra.s	loc_1864A
00018A40                            ; ===========================================================================
00018A40                            
00018A40                            Obj73_TubeDel:
00018A40 4EF9 0000 D99A             		jmp	DeleteObject
00018A46                            ; ===========================================================================
00018A46                            ; ---------------------------------------------------------------------------
00018A46                            ; Object 74 - lava that	Eggman drops (MZ)
00018A46                            ; ---------------------------------------------------------------------------
00018A46                            
00018A46                            Obj74:					; XREF: Obj_Index
00018A46 7000                       		moveq	#0,d0
00018A48 1028 0024                  		move.b	$24(a0),d0
00018A4C 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018A50 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018A54 4EF9 0000 D95E             		jmp	DisplaySprite
00018A5A                            ; ===========================================================================
00018A5A 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018A5C 0000                       		dc.w Obj74_Action-Obj74_Index
00018A5E 0000                       		dc.w loc_18886-Obj74_Index
00018A60 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018A62                            ; ===========================================================================
00018A62                            
00018A62                            Obj74_Main:				; XREF: Obj74_Index
00018A62 117C 0008 0016             		move.b	#8,$16(a0)
00018A68 117C 0008 0017             		move.b	#8,$17(a0)
00018A6E 217C 0000 B622 0004        		move.l	#Map_obj14,4(a0)
00018A76 317C 0345 0002             		move.w	#$345,2(a0)
00018A7C 117C 0004 0001             		move.b	#4,1(a0)
00018A82 117C 0005 0018             		move.b	#5,$18(a0)
00018A88 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018A8E 117C 0008 0019             		move.b	#8,$19(a0)
00018A94 5428 0024                  		addq.b	#2,$24(a0)
00018A98 4A28 0028                  		tst.b	$28(a0)
00018A9C 6600                       		bne.s	loc_1870A
00018A9E 117C 008B 0020             		move.b	#$8B,$20(a0)
00018AA4 5428 0024                  		addq.b	#2,$24(a0)
00018AA8 6000 0000                  		bra.w	loc_18886
00018AAC                            ; ===========================================================================
00018AAC                            
00018AAC                            loc_1870A:
00018AAC 117C 001E 0029             		move.b	#$1E,$29(a0)
00018AB2 303C 00AE                  		move.w	#$AE,d0
00018AB6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava sound
00018ABC                            
00018ABC                            Obj74_Action:				; XREF: Obj74_Index
00018ABC 7000                       		moveq	#0,d0
00018ABE 1028 0025                  		move.b	$25(a0),d0
00018AC2 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018AC6 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018ACA 4EB9 0000 D938             		jsr	SpeedToPos
00018AD0 43F9 0000 E818             		lea	(Ani_obj14).l,a1
00018AD6 4EB9 0000 AA10             		jsr	AnimateSprite
00018ADC 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018AE2 6200                       		bhi.s	Obj74_Delete
00018AE4 4E75                       		rts	
00018AE6                            ; ===========================================================================
00018AE6                            
00018AE6                            Obj74_Delete:
00018AE6 4EF9 0000 D99A             		jmp	DeleteObject
00018AEC                            ; ===========================================================================
00018AEC 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018AEE 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018AF0 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018AF2 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018AF4                            ; ===========================================================================
00018AF4                            
00018AF4                            Obj74_Drop:				; XREF: Obj74_Index2
00018AF4 08E8 0001 0022             		bset	#1,$22(a0)
00018AFA 5328 0029                  		subq.b	#1,$29(a0)
00018AFE 6A00                       		bpl.s	locret_18780
00018B00 117C 008B 0020             		move.b	#$8B,$20(a0)
00018B06 4228 0028                  		clr.b	$28(a0)
00018B0A 0668 0018 0012             		addi.w	#$18,$12(a0)
00018B10 08A8 0001 0022             		bclr	#1,$22(a0)
00018B16 6100 C6A8                  		bsr.w	ObjHitFloor
00018B1A 4A41                       		tst.w	d1
00018B1C 6A00                       		bpl.s	locret_18780
00018B1E 5428 0025                  		addq.b	#2,$25(a0)
00018B22                            
00018B22                            locret_18780:
00018B22 4E75                       		rts	
00018B24                            ; ===========================================================================
00018B24                            
00018B24                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018B24 5568 000C                  		subq.w	#2,$C(a0)
00018B28 08E8 0007 0002             		bset	#7,2(a0)
00018B2E 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018B34 4268 0012                  		clr.w	$12(a0)
00018B38 3168 0008 0030             		move.w	8(a0),$30(a0)
00018B3E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018B44 117C 0003 0029             		move.b	#3,$29(a0)
00018B4A 4EB9 0000 DDFA             		jsr	SingleObjLoad2
00018B50 6600                       		bne.s	loc_187CA
00018B52 47D1                       		lea	(a1),a3
00018B54 45D0                       		lea	(a0),a2
00018B56 7003                       		moveq	#3,d0
00018B58                            
00018B58                            Obj74_Loop:
00018B58 26DA                       		move.l	(a2)+,(a3)+
00018B5A 26DA                       		move.l	(a2)+,(a3)+
00018B5C 26DA                       		move.l	(a2)+,(a3)+
00018B5E 26DA                       		move.l	(a2)+,(a3)+
00018B60 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018B64                            
00018B64 4469 0010                  		neg.w	$10(a1)
00018B68 5429 0025                  		addq.b	#2,$25(a1)
00018B6C                            
00018B6C                            loc_187CA:
00018B6C 5428 0025                  		addq.b	#2,$25(a0)
00018B70 4E75                       		rts	
00018B72                            
00018B72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018B72                            
00018B72                            
00018B72                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018B72 4EB9 0000 DDFA             		jsr	SingleObjLoad2
00018B78 6600                       		bne.s	locret_187EE
00018B7A 3368 0008 0008             		move.w	8(a0),8(a1)
00018B80 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018B86 12BC 0074                  		move.b	#$74,(a1)
00018B8A 337C 0067 0028             		move.w	#$67,$28(a1)
00018B90                            
00018B90                            locret_187EE:
00018B90 4E75                       		rts	
00018B92                            ; End of function Obj74_Duplicate2
00018B92                            
00018B92                            ; ===========================================================================
00018B92                            
00018B92                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018B92 6100 C62C                  		bsr.w	ObjHitFloor
00018B96 4A41                       		tst.w	d1
00018B98 6A00                       		bpl.s	loc_18826
00018B9A 3028 0008                  		move.w	8(a0),d0
00018B9E 0C40 1940                  		cmpi.w	#$1940,d0
00018BA2 6E00                       		bgt.s	loc_1882C
00018BA4 3228 0030                  		move.w	$30(a0),d1
00018BA8 B240                       		cmp.w	d0,d1
00018BAA 6700                       		beq.s	loc_1881E
00018BAC 0240 0010                  		andi.w	#$10,d0
00018BB0 0241 0010                  		andi.w	#$10,d1
00018BB4 B240                       		cmp.w	d0,d1
00018BB6 6700                       		beq.s	loc_1881E
00018BB8 61B8                       		bsr.s	Obj74_Duplicate2
00018BBA 3168 0008 0032             		move.w	8(a0),$32(a0)
00018BC0                            
00018BC0                            loc_1881E:
00018BC0 3168 0008 0030             		move.w	8(a0),$30(a0)
00018BC6 4E75                       		rts	
00018BC8                            ; ===========================================================================
00018BC8                            
00018BC8                            loc_18826:
00018BC8 5428 0025                  		addq.b	#2,$25(a0)
00018BCC 4E75                       		rts	
00018BCE                            ; ===========================================================================
00018BCE                            
00018BCE                            loc_1882C:
00018BCE 5428 0024                  		addq.b	#2,$24(a0)
00018BD2 4E75                       		rts	
00018BD4                            ; ===========================================================================
00018BD4                            
00018BD4                            Obj74_FallEdge:				; XREF: Obj74_Index2
00018BD4 08A8 0001 0022             		bclr	#1,$22(a0)
00018BDA 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018BE0 3028 0008                  		move.w	8(a0),d0
00018BE4 9068 0032                  		sub.w	$32(a0),d0
00018BE8 6A00                       		bpl.s	loc_1884A
00018BEA 4440                       		neg.w	d0
00018BEC                            
00018BEC                            loc_1884A:
00018BEC 0C40 0012                  		cmpi.w	#$12,d0
00018BF0 6600                       		bne.s	loc_18856
00018BF2 08A8 0007 0002             		bclr	#7,2(a0)
00018BF8                            
00018BF8                            loc_18856:
00018BF8 6100 C5C6                  		bsr.w	ObjHitFloor
00018BFC 4A41                       		tst.w	d1
00018BFE 6A00                       		bpl.s	locret_1887E
00018C00 5328 0029                  		subq.b	#1,$29(a0)
00018C04 6700                       		beq.s	Obj74_Delete2
00018C06 4268 0012                  		clr.w	$12(a0)
00018C0A 3168 0032 0008             		move.w	$32(a0),8(a0)
00018C10 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018C16 08E8 0007 0002             		bset	#7,2(a0)
00018C1C 5528 0025                  		subq.b	#2,$25(a0)
00018C20                            
00018C20                            locret_1887E:
00018C20 4E75                       		rts	
00018C22                            ; ===========================================================================
00018C22                            
00018C22                            Obj74_Delete2:
00018C22 4EF9 0000 D99A             		jmp	DeleteObject
00018C28                            ; ===========================================================================
00018C28                            
00018C28                            loc_18886:				; XREF: Obj74_Index
00018C28 08E8 0007 0002             		bset	#7,2(a0)
00018C2E 5328 0029                  		subq.b	#1,$29(a0)
00018C32 6600                       		bne.s	Obj74_Animate
00018C34 117C 0001 001C             		move.b	#1,$1C(a0)
00018C3A 5968 000C                  		subq.w	#4,$C(a0)
00018C3E 4228 0020                  		clr.b	$20(a0)
00018C42                            
00018C42                            Obj74_Animate:
00018C42 43F9 0000 E818             		lea	(Ani_obj14).l,a1
00018C48 4EF9 0000 AA10             		jmp	AnimateSprite
00018C4E                            ; ===========================================================================
00018C4E                            
00018C4E                            Obj74_Delete3:				; XREF: Obj74_Index
00018C4E 4EF9 0000 D99A             		jmp	DeleteObject
00018C54                            ; ===========================================================================
00018C54                            
00018C54                            Obj7A_Delete:
00018C54 4EF9 0000 D99A             		jmp	DeleteObject
00018C5A                            ; ===========================================================================
00018C5A                            ; ---------------------------------------------------------------------------
00018C5A                            ; Object 7A - Eggman (SLZ)
00018C5A                            ; ---------------------------------------------------------------------------
00018C5A                            
00018C5A                            Obj7A:					; XREF: Obj_Index
00018C5A 7000                       		moveq	#0,d0
00018C5C 1028 0024                  		move.b	$24(a0),d0
00018C60 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00018C64 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018C68                            ; ===========================================================================
00018C68 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018C6A 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018C6C 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018C6E 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018C70 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00018C72                            
00018C72 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018C75 0401 04                    		dc.b 4,	1, 4
00018C78 0607 04                    		dc.b 6,	7, 4
00018C7B 0800 03                    		dc.b 8,	0, 3
00018C7E                            ; ===========================================================================
00018C7E                            
00018C7E                            Obj7A_Main:				; XREF: Obj7A_Index
00018C7E 317C 2188 0008             		move.w	#$2188,8(a0)
00018C84 317C 0228 000C             		move.w	#$228,$C(a0)
00018C8A 3168 0008 0030             		move.w	8(a0),$30(a0)
00018C90 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018C96 117C 000F 0020             		move.b	#$F,$20(a0)
00018C9C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018CA2 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00018CA6 2248                       		movea.l	a0,a1
00018CA8 7203                       		moveq	#3,d1
00018CAA 6000                       		bra.s	Obj7A_LoadBoss
00018CAC                            ; ===========================================================================
00018CAC                            
00018CAC                            Obj7A_Loop:
00018CAC 4EB9 0000 DDFA             		jsr	SingleObjLoad2
00018CB2 6600                       		bne.s	loc_1895C
00018CB4 12BC 007A                  		move.b	#$7A,0(a1)
00018CB8 3368 0008 0008             		move.w	8(a0),8(a1)
00018CBE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018CC4                            
00018CC4                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00018CC4 08A8 0000 0022             		bclr	#0,$22(a0)
00018CCA 4229 0025                  		clr.b	$25(a1)
00018CCE 135A 0024                  		move.b	(a2)+,$24(a1)
00018CD2 135A 001C                  		move.b	(a2)+,$1C(a1)
00018CD6 135A 0018                  		move.b	(a2)+,$18(a1)
00018CDA 237C 0001 80B4 0004        		move.l	#Map_Eggman,4(a1)
00018CE2 337C 0400 0002             		move.w	#$400,2(a1)
00018CE8 137C 0004 0001             		move.b	#4,1(a1)
00018CEE 137C 0020 0019             		move.b	#$20,$19(a1)
00018CF4 2348 0034                  		move.l	a0,$34(a1)
00018CF8 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018CFC                            
00018CFC                            loc_1895C:
00018CFC 43F8 D040                  		lea	($FFFFD040).w,a1
00018D00 45E8 002A                  		lea	$2A(a0),a2
00018D04 705E                       		moveq	#$5E,d0
00018D06 723E                       		moveq	#$3E,d1
00018D08                            
00018D08                            loc_18968:
00018D08 B011                       		cmp.b	(a1),d0
00018D0A 6600                       		bne.s	loc_18974
00018D0C 4A29 0028                  		tst.b	$28(a1)
00018D10 6700                       		beq.s	loc_18974
00018D12 34C9                       		move.w	a1,(a2)+
00018D14                            
00018D14                            loc_18974:
00018D14 D2FC 0040                  		adda.w	#$40,a1
00018D18 51C9 FFEE                  		dbf	d1,loc_18968
00018D1C                            
00018D1C                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018D1C 7000                       		moveq	#0,d0
00018D1E 1028 0025                  		move.b	$25(a0),d0
00018D22 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018D26 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018D2A 43F9 0001 8064             		lea	(Ani_Eggman).l,a1
00018D30 4EB9 0000 AA10             		jsr	AnimateSprite
00018D36 7003                       		moveq	#3,d0
00018D38 C028 0022                  		and.b	$22(a0),d0
00018D3C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018D42 8128 0001                  		or.b	d0,1(a0)
00018D46 4EF9 0000 D95E             		jmp	DisplaySprite
00018D4C                            ; ===========================================================================
00018D4C 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018D4E 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018D50 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00018D52 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00018D54 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00018D56 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00018D58                            ; ===========================================================================
00018D58                            
00018D58                            loc_189B8:				; XREF: Obj7A_ShipIndex
00018D58 317C FF00 0010             		move.w	#-$100,$10(a0)
00018D5E 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00018D64 6400                       		bcc.s	loc_189CA
00018D66 5428 0025                  		addq.b	#2,$25(a0)
00018D6A                            
00018D6A                            loc_189CA:
00018D6A 6100 EEE8                  		bsr.w	BossMove
00018D6E 1028 003F                  		move.b	$3F(a0),d0
00018D72 5428 003F                  		addq.b	#2,$3F(a0)
00018D76 4EB9 0000 2BFA             		jsr	(CalcSine).l
00018D7C EC40                       		asr.w	#6,d0
00018D7E D068 0038                  		add.w	$38(a0),d0
00018D82 3140 000C                  		move.w	d0,$C(a0)
00018D86 3168 0030 0008             		move.w	$30(a0),8(a0)
00018D8C 6000                       		bra.s	loc_189FE
00018D8E                            ; ===========================================================================
00018D8E                            
00018D8E                            loc_189EE:
00018D8E 6100 EEC4                  		bsr.w	BossMove
00018D92 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018D98 3168 0030 0008             		move.w	$30(a0),8(a0)
00018D9E                            
00018D9E                            loc_189FE:
00018D9E 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00018DA4 6400                       		bcc.s	locret_18A44
00018DA6 4A28 0022                  		tst.b	$22(a0)
00018DAA 6B00                       		bmi.s	loc_18A46
00018DAC 4A28 0020                  		tst.b	$20(a0)
00018DB0 6600                       		bne.s	locret_18A44
00018DB2 4A28 003E                  		tst.b	$3E(a0)
00018DB6 6600                       		bne.s	loc_18A28
00018DB8 117C 0020 003E             		move.b	#$20,$3E(a0)
00018DBE 303C 00AC                  		move.w	#$AC,d0
00018DC2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018DC8                            
00018DC8                            loc_18A28:
00018DC8 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018DCC 7000                       		moveq	#0,d0
00018DCE 4A51                       		tst.w	(a1)
00018DD0 6600                       		bne.s	loc_18A36
00018DD2 303C 0EEE                  		move.w	#$EEE,d0
00018DD6                            
00018DD6                            loc_18A36:
00018DD6 3280                       		move.w	d0,(a1)
00018DD8 5328 003E                  		subq.b	#1,$3E(a0)
00018DDC 6600                       		bne.s	locret_18A44
00018DDE 117C 000F 0020             		move.b	#$F,$20(a0)
00018DE4                            
00018DE4                            locret_18A44:
00018DE4 4E75                       		rts	
00018DE6                            ; ===========================================================================
00018DE6                            
00018DE6                            loc_18A46:
00018DE6 7064                       		moveq	#100,d0
00018DE8 6100 0000                  		bsr.w	AddPoints
00018DEC 117C 0006 0025             		move.b	#6,$25(a0)
00018DF2 117C 0078 003C             		move.b	#$78,$3C(a0)
00018DF8 4268 0010                  		clr.w	$10(a0)
00018DFC 4E75                       		rts	
00018DFE                            ; ===========================================================================
00018DFE                            
00018DFE                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00018DFE 3028 0030                  		move.w	$30(a0),d0
00018E02 317C 0200 0010             		move.w	#$200,$10(a0)
00018E08 0828 0000 0022             		btst	#0,$22(a0)
00018E0E 6600                       		bne.s	loc_18A7C
00018E10 4468 0010                  		neg.w	$10(a0)
00018E14 0C40 2008                  		cmpi.w	#$2008,d0
00018E18 6E00                       		bgt.s	loc_18A88
00018E1A 6000                       		bra.s	loc_18A82
00018E1C                            ; ===========================================================================
00018E1C                            
00018E1C                            loc_18A7C:
00018E1C 0C40 2138                  		cmpi.w	#$2138,d0
00018E20 6D00                       		blt.s	loc_18A88
00018E22                            
00018E22                            loc_18A82:
00018E22 0868 0000 0022             		bchg	#0,$22(a0)
00018E28                            
00018E28                            loc_18A88:
00018E28 3028 0008                  		move.w	8(a0),d0
00018E2C 72FF                       		moveq	#-1,d1
00018E2E 7402                       		moveq	#2,d2
00018E30 45E8 002A                  		lea	$2A(a0),a2
00018E34 7828                       		moveq	#$28,d4
00018E36 4A68 0010                  		tst.w	$10(a0)
00018E3A 6A00                       		bpl.s	loc_18A9E
00018E3C 4444                       		neg.w	d4
00018E3E                            
00018E3E                            loc_18A9E:
00018E3E 321A                       		move.w	(a2)+,d1
00018E40 2641                       		movea.l	d1,a3
00018E42 082B 0003 0022             		btst	#3,$22(a3)
00018E48 6600                       		bne.s	loc_18AB4
00018E4A 362B 0008                  		move.w	8(a3),d3
00018E4E D644                       		add.w	d4,d3
00018E50 9640                       		sub.w	d0,d3
00018E52 6700                       		beq.s	loc_18AC0
00018E54                            
00018E54                            loc_18AB4:
00018E54 51CA FFE8                  		dbf	d2,loc_18A9E
00018E58                            
00018E58 1142 0028                  		move.b	d2,$28(a0)
00018E5C 6000 FF0C                  		bra.w	loc_189CA
00018E60                            ; ===========================================================================
00018E60                            
00018E60                            loc_18AC0:
00018E60 1142 0028                  		move.b	d2,$28(a0)
00018E64 5428 0025                  		addq.b	#2,$25(a0)
00018E68 117C 0028 003C             		move.b	#$28,$3C(a0)
00018E6E 6000 FEFA                  		bra.w	loc_189CA
00018E72                            ; ===========================================================================
00018E72                            
00018E72                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00018E72 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00018E78 6600                       		bne.s	loc_18B36
00018E7A 70FF                       		moveq	#-1,d0
00018E7C 1028 0028                  		move.b	$28(a0),d0
00018E80 4880                       		ext.w	d0
00018E82 6B00                       		bmi.s	loc_18B40
00018E84 5540                       		subq.w	#2,d0
00018E86 4440                       		neg.w	d0
00018E88 D040                       		add.w	d0,d0
00018E8A 43E8 002A                  		lea	$2A(a0),a1
00018E8E 3031 0000                  		move.w	(a1,d0.w),d0
00018E92 2440                       		movea.l	d0,a2
00018E94 43F8 D040                  		lea	($FFFFD040).w,a1
00018E98 723E                       		moveq	#$3E,d1
00018E9A                            
00018E9A                            loc_18AFA:
00018E9A B0A9 003C                  		cmp.l	$3C(a1),d0
00018E9E 6700                       		beq.s	loc_18B40
00018EA0 D2FC 0040                  		adda.w	#$40,a1
00018EA4 51C9 FFF4                  		dbf	d1,loc_18AFA
00018EA8                            
00018EA8 2F08                       		move.l	a0,-(sp)
00018EAA 41D2                       		lea	(a2),a0
00018EAC 4EB9 0000 DDFA             		jsr	SingleObjLoad2
00018EB2 205F                       		movea.l	(sp)+,a0
00018EB4 6600                       		bne.s	loc_18B40
00018EB6 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00018EBA 3368 0008 0008             		move.w	8(a0),8(a1)
00018EC0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018EC6 0669 0020 000C             		addi.w	#$20,$C(a1)
00018ECC 136A 0022 0022             		move.b	$22(a2),$22(a1)
00018ED2 234A 003C                  		move.l	a2,$3C(a1)
00018ED6                            
00018ED6                            loc_18B36:
00018ED6 5328 003C                  		subq.b	#1,$3C(a0)
00018EDA 6700                       		beq.s	loc_18B40
00018EDC 6000 FEC0                  		bra.w	loc_189FE
00018EE0                            ; ===========================================================================
00018EE0                            
00018EE0                            loc_18B40:
00018EE0 5528 0025                  		subq.b	#2,$25(a0)
00018EE4 6000 FE84                  		bra.w	loc_189CA
00018EE8                            ; ===========================================================================
00018EE8                            
00018EE8                            loc_18B48:				; XREF: Obj7A_ShipIndex
00018EE8 5328 003C                  		subq.b	#1,$3C(a0)
00018EEC 6B00                       		bmi.s	loc_18B52
00018EEE 6000 ED22                  		bra.w	BossDefeated
00018EF2                            ; ===========================================================================
00018EF2                            
00018EF2                            loc_18B52:
00018EF2 5428 0025                  		addq.b	#2,$25(a0)
00018EF6 4268 0012                  		clr.w	$12(a0)
00018EFA 08E8 0000 0022             		bset	#0,$22(a0)
00018F00 08A8 0007 0022             		bclr	#7,$22(a0)
00018F06 4268 0010                  		clr.w	$10(a0)
00018F0A 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00018F10 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018F14 6600                       		bne.s	loc_18B7C
00018F16 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018F1C                            
00018F1C                            loc_18B7C:
00018F1C 6000 FE80                  		bra.w	loc_189FE
00018F20                            ; ===========================================================================
00018F20                            
00018F20                            loc_18B80:				; XREF: Obj7A_ShipIndex
00018F20 5228 003C                  		addq.b	#1,$3C(a0)
00018F24 6700                       		beq.s	loc_18B90
00018F26 6A00                       		bpl.s	loc_18B96
00018F28 0668 0018 0012             		addi.w	#$18,$12(a0)
00018F2E 6000                       		bra.s	loc_18BC2
00018F30                            ; ===========================================================================
00018F30                            
00018F30                            loc_18B90:
00018F30 4268 0012                  		clr.w	$12(a0)
00018F34 6000                       		bra.s	loc_18BC2
00018F36                            ; ===========================================================================
00018F36                            
00018F36                            loc_18B96:
00018F36 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00018F3C 6500                       		bcs.s	loc_18BAE
00018F3E 6700                       		beq.s	loc_18BB4
00018F40 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00018F46 6500                       		bcs.s	loc_18BC2
00018F48 5428 0025                  		addq.b	#2,$25(a0)
00018F4C 6000                       		bra.s	loc_18BC2
00018F4E                            ; ===========================================================================
00018F4E                            
00018F4E                            loc_18BAE:
00018F4E 5168 0012                  		subq.w	#8,$12(a0)
00018F52 6000                       		bra.s	loc_18BC2
00018F54                            ; ===========================================================================
00018F54                            
00018F54                            loc_18BB4:
00018F54 4268 0012                  		clr.w	$12(a0)
00018F58 303C 0084                  		move.w	#$84,d0
00018F5C 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SLZ music
00018F62                            
00018F62                            loc_18BC2:
00018F62 6000 FE2A                  		bra.w	loc_189EE
00018F66                            ; ===========================================================================
00018F66                            
00018F66                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00018F66 317C 0400 0010             		move.w	#$400,$10(a0)
00018F6C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018F72 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00018F78 6400                       		bcc.s	loc_18BE0
00018F7A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018F7E 6000                       		bra.s	loc_18BE8
00018F80                            ; ===========================================================================
00018F80                            
00018F80                            loc_18BE0:
00018F80 4A28 0001                  		tst.b	1(a0)
00018F84 6A00 FCCE                  		bpl.w	Obj7A_Delete
00018F88                            
00018F88                            loc_18BE8:
00018F88 6100 ECCA                  		bsr.w	BossMove
00018F8C 6000 FDDC                  		bra.w	loc_189CA
00018F90                            ; ===========================================================================
00018F90                            
00018F90                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00018F90 7000                       		moveq	#0,d0
00018F92 7201                       		moveq	#1,d1
00018F94 2268 0034                  		movea.l	$34(a0),a1
00018F98 1029 0025                  		move.b	$25(a1),d0
00018F9C 0C00 0006                  		cmpi.b	#6,d0
00018FA0 6B00                       		bmi.s	loc_18C06
00018FA2 720A                       		moveq	#$A,d1
00018FA4 6000                       		bra.s	loc_18C1A
00018FA6                            ; ===========================================================================
00018FA6                            
00018FA6                            loc_18C06:
00018FA6 4A29 0020                  		tst.b	$20(a1)
00018FAA 6600                       		bne.s	loc_18C10
00018FAC 7205                       		moveq	#5,d1
00018FAE 6000                       		bra.s	loc_18C1A
00018FB0                            ; ===========================================================================
00018FB0                            
00018FB0                            loc_18C10:
00018FB0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018FB6 6500                       		bcs.s	loc_18C1A
00018FB8 7204                       		moveq	#4,d1
00018FBA                            
00018FBA                            loc_18C1A:
00018FBA 1141 001C                  		move.b	d1,$1C(a0)
00018FBE 0C00 000A                  		cmpi.b	#$A,d0
00018FC2 6600                       		bne.s	loc_18C32
00018FC4 117C 0006 001C             		move.b	#6,$1C(a0)
00018FCA 4A28 0001                  		tst.b	1(a0)
00018FCE 6A00 FC84                  		bpl.w	Obj7A_Delete
00018FD2                            
00018FD2                            loc_18C32:
00018FD2 6000                       		bra.s	loc_18C6C
00018FD4                            ; ===========================================================================
00018FD4                            
00018FD4                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00018FD4 117C 0008 001C             		move.b	#8,$1C(a0)
00018FDA 2268 0034                  		movea.l	$34(a0),a1
00018FDE 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00018FE4 6600                       		bne.s	loc_18C56
00018FE6 4A28 0001                  		tst.b	1(a0)
00018FEA 6A00 FC68                  		bpl.w	Obj7A_Delete
00018FEE 117C 000B 001C             		move.b	#$B,$1C(a0)
00018FF4 6000                       		bra.s	loc_18C6C
00018FF6                            ; ===========================================================================
00018FF6                            
00018FF6                            loc_18C56:
00018FF6 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018FFC 6E00                       		bgt.s	loc_18C6C
00018FFE 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019004 6D00                       		blt.s	loc_18C6C
00019006 117C 0007 001C             		move.b	#7,$1C(a0)
0001900C                            
0001900C                            loc_18C6C:
0001900C 43F9 0001 8064             		lea	(Ani_Eggman).l,a1
00019012 4EB9 0000 AA10             		jsr	AnimateSprite
00019018                            
00019018                            loc_18C78:
00019018 2268 0034                  		movea.l	$34(a0),a1
0001901C 3169 0008 0008             		move.w	8(a1),8(a0)
00019022 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019028 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001902E 7003                       		moveq	#3,d0
00019030 C028 0022                  		and.b	$22(a0),d0
00019034 0228 00FC 0001             		andi.b	#-4,1(a0)
0001903A 8128 0001                  		or.b	d0,1(a0)
0001903E 4EF9 0000 D95E             		jmp	DisplaySprite
00019044                            ; ===========================================================================
00019044                            
00019044                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019044 2268 0034                  		movea.l	$34(a0),a1
00019048 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001904E 6600                       		bne.s	loc_18CB8
00019050 4A28 0001                  		tst.b	1(a0)
00019054 6A00 FBFE                  		bpl.w	Obj7A_Delete
00019058                            
00019058                            loc_18CB8:
00019058 217C 0001 817C 0004        		move.l	#Map_BossItems,4(a0)
00019060 317C 246C 0002             		move.w	#$246C,2(a0)
00019066 117C 0003 001A             		move.b	#3,$1A(a0)
0001906C 60AA                       		bra.s	loc_18C78
0001906E                            ; ===========================================================================
0001906E                            ; ---------------------------------------------------------------------------
0001906E                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001906E                            ; ---------------------------------------------------------------------------
0001906E                            
0001906E                            Obj7B:					; XREF: Obj_Index
0001906E 7000                       		moveq	#0,d0
00019070 1028 0024                  		move.b	$24(a0),d0
00019074 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019078 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001907C 3028 0030                  		move.w	$30(a0),d0
00019080 0240 FF80                  		andi.w	#$FF80,d0
00019084 3238 F700                  		move.w	($FFFFF700).w,d1
00019088 0441 0080                  		subi.w	#$80,d1
0001908C 0241 FF80                  		andi.w	#$FF80,d1
00019090 9041                       		sub.w	d1,d0
00019092 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019096 0C40 0280                  		cmpi.w	#$280,d0
0001909A 6200 FBB8                  		bhi.w	Obj7A_Delete
0001909E 4EF9 0000 D95E             		jmp	DisplaySprite
000190A4                            ; ===========================================================================
000190A4 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000190A6 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000190A8 0000                       		dc.w loc_18DC6-Obj7B_Index
000190AA 0000                       		dc.w loc_18EAA-Obj7B_Index
000190AC 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000190AE 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000190B0                            ; ===========================================================================
000190B0                            
000190B0                            Obj7B_Main:				; XREF: Obj7B_Index
000190B0 217C 0001 1D2C 0004        		move.l	#Map_obj5Ea,4(a0)
000190B8 317C 0518 0002             		move.w	#$518,2(a0)
000190BE 117C 0001 001A             		move.b	#1,$1A(a0)
000190C4 0028 0004 0001             		ori.b	#4,1(a0)
000190CA 117C 0004 0018             		move.b	#4,$18(a0)
000190D0 117C 008B 0020             		move.b	#$8B,$20(a0)
000190D6 117C 000C 0019             		move.b	#$C,$19(a0)
000190DC 2268 003C                  		movea.l	$3C(a0),a1
000190E0 3169 0008 0030             		move.w	8(a1),$30(a0)
000190E6 3169 000C 0034             		move.w	$C(a1),$34(a0)
000190EC 08E8 0000 0022             		bset	#0,$22(a0)
000190F2 3028 0008                  		move.w	8(a0),d0
000190F6 B069 0008                  		cmp.w	8(a1),d0
000190FA 6E00                       		bgt.s	loc_18D68
000190FC 08A8 0000 0022             		bclr	#0,$22(a0)
00019102 117C 0002 003A             		move.b	#2,$3A(a0)
00019108                            
00019108                            loc_18D68:
00019108 5428 0024                  		addq.b	#2,$24(a0)
0001910C                            
0001910C                            Obj7B_Fall:				; XREF: Obj7B_Index
0001910C 4EB9 0000 D90C             		jsr	ObjectFall
00019112 2268 003C                  		movea.l	$3C(a0),a1
00019116 45F9 0000 0000             		lea	(word_19018).l,a2
0001911C 7000                       		moveq	#0,d0
0001911E 1029 001A                  		move.b	$1A(a1),d0
00019122 3228 0008                  		move.w	8(a0),d1
00019126 9268 0030                  		sub.w	$30(a0),d1
0001912A 6400                       		bcc.s	loc_18D8E
0001912C 5440                       		addq.w	#2,d0
0001912E                            
0001912E                            loc_18D8E:
0001912E D040                       		add.w	d0,d0
00019130 3228 0034                  		move.w	$34(a0),d1
00019134 D272 0000                  		add.w	(a2,d0.w),d1
00019138 B268 000C                  		cmp.w	$C(a0),d1
0001913C 6E00                       		bgt.s	locret_18DC4
0001913E 2268 003C                  		movea.l	$3C(a0),a1
00019142 7202                       		moveq	#2,d1
00019144 0828 0000 0022             		btst	#0,$22(a0)
0001914A 6700                       		beq.s	loc_18DAE
0001914C 7200                       		moveq	#0,d1
0001914E                            
0001914E                            loc_18DAE:
0001914E 317C 00F0 0028             		move.w	#$F0,$28(a0)
00019154 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001915A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019160 6000 0000                  		bra.w	loc_18FA2
00019164                            ; ===========================================================================
00019164                            
00019164                            locret_18DC4:
00019164 4E75                       		rts	
00019166                            ; ===========================================================================
00019166                            
00019166                            loc_18DC6:				; XREF: Obj7B_Index
00019166 2268 003C                  		movea.l	$3C(a0),a1
0001916A 7000                       		moveq	#0,d0
0001916C 1028 003A                  		move.b	$3A(a0),d0
00019170 9029 003A                  		sub.b	$3A(a1),d0
00019174 6700                       		beq.s	loc_18E2A
00019176 6400                       		bcc.s	loc_18DDA
00019178 4400                       		neg.b	d0
0001917A                            
0001917A                            loc_18DDA:
0001917A 323C F7E8                  		move.w	#-$818,d1
0001917E 343C FEEC                  		move.w	#-$114,d2
00019182 0C00 0001                  		cmpi.b	#1,d0
00019186 6700                       		beq.s	loc_18E00
00019188 323C F6A0                  		move.w	#-$960,d1
0001918C 343C FF0C                  		move.w	#-$F4,d2
00019190 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00019196 6D00                       		blt.s	loc_18E00
00019198 323C F5E0                  		move.w	#-$A20,d1
0001919C 343C FF80                  		move.w	#-$80,d2
000191A0                            
000191A0                            loc_18E00:
000191A0 3141 0012                  		move.w	d1,$12(a0)
000191A4 3142 0010                  		move.w	d2,$10(a0)
000191A8 3028 0008                  		move.w	8(a0),d0
000191AC 9068 0030                  		sub.w	$30(a0),d0
000191B0 6400                       		bcc.s	loc_18E16
000191B2 4468 0010                  		neg.w	$10(a0)
000191B6                            
000191B6                            loc_18E16:
000191B6 117C 0001 001A             		move.b	#1,$1A(a0)
000191BC 317C 0020 0028             		move.w	#$20,$28(a0)
000191C2 5428 0024                  		addq.b	#2,$24(a0)
000191C6 6000 0000                  		bra.w	loc_18EAA
000191CA                            ; ===========================================================================
000191CA                            
000191CA                            loc_18E2A:				; XREF: loc_18DC6
000191CA 45F9 0000 0000             		lea	(word_19018).l,a2
000191D0 7000                       		moveq	#0,d0
000191D2 1029 001A                  		move.b	$1A(a1),d0
000191D6 343C 0028                  		move.w	#$28,d2
000191DA 3228 0008                  		move.w	8(a0),d1
000191DE 9268 0030                  		sub.w	$30(a0),d1
000191E2 6400                       		bcc.s	loc_18E48
000191E4 4442                       		neg.w	d2
000191E6 5440                       		addq.w	#2,d0
000191E8                            
000191E8                            loc_18E48:
000191E8 D040                       		add.w	d0,d0
000191EA 3228 0034                  		move.w	$34(a0),d1
000191EE D272 0000                  		add.w	(a2,d0.w),d1
000191F2 3141 000C                  		move.w	d1,$C(a0)
000191F6 D468 0030                  		add.w	$30(a0),d2
000191FA 3142 0008                  		move.w	d2,8(a0)
000191FE 4268 000E                  		clr.w	$E(a0)
00019202 4268 000A                  		clr.w	$A(a0)
00019206 5368 0028                  		subq.w	#1,$28(a0)
0001920A 6600                       		bne.s	loc_18E7A
0001920C 317C 0020 0028             		move.w	#$20,$28(a0)
00019212 117C 0008 0024             		move.b	#8,$24(a0)
00019218 4E75                       		rts	
0001921A                            ; ===========================================================================
0001921A                            
0001921A                            loc_18E7A:
0001921A 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019220 6600                       		bne.s	loc_18E88
00019222 117C 0005 001F             		move.b	#5,$1F(a0)
00019228                            
00019228                            loc_18E88:
00019228 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001922E 6600                       		bne.s	loc_18E96
00019230 117C 0002 001F             		move.b	#2,$1F(a0)
00019236                            
00019236                            loc_18E96:
00019236 5328 001E                  		subq.b	#1,$1E(a0)
0001923A 6E00                       		bgt.s	locret_18EA8
0001923C 0868 0000 001A             		bchg	#0,$1A(a0)
00019242 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019248                            
00019248                            locret_18EA8:
00019248 4E75                       		rts	
0001924A                            ; ===========================================================================
0001924A                            
0001924A                            loc_18EAA:				; XREF: Obj7B_Index
0001924A 43F8 D040                  		lea	($FFFFD040).w,a1
0001924E 707A                       		moveq	#$7A,d0
00019250 7240                       		moveq	#$40,d1
00019252 743E                       		moveq	#$3E,d2
00019254                            
00019254                            loc_18EB4:
00019254 B011                       		cmp.b	(a1),d0
00019256 6700                       		beq.s	loc_18EC0
00019258 D2C1                       		adda.w	d1,a1
0001925A 51CA FFF8                  		dbf	d2,loc_18EB4
0001925E                            
0001925E 6000                       		bra.s	loc_18F38
00019260                            ; ===========================================================================
00019260                            
00019260                            loc_18EC0:
00019260 3029 0008                  		move.w	8(a1),d0
00019264 3229 000C                  		move.w	$C(a1),d1
00019268 3428 0008                  		move.w	8(a0),d2
0001926C 3628 000C                  		move.w	$C(a0),d3
00019270 45FA 0000                  		lea	byte_19022(pc),a2
00019274 47FA 0000                  		lea	byte_19026(pc),a3
00019278 181A                       		move.b	(a2)+,d4
0001927A 4884                       		ext.w	d4
0001927C D044                       		add.w	d4,d0
0001927E 181B                       		move.b	(a3)+,d4
00019280 4884                       		ext.w	d4
00019282 D444                       		add.w	d4,d2
00019284 B440                       		cmp.w	d0,d2
00019286 6500                       		bcs.s	loc_18F38
00019288 181A                       		move.b	(a2)+,d4
0001928A 4884                       		ext.w	d4
0001928C D044                       		add.w	d4,d0
0001928E 181B                       		move.b	(a3)+,d4
00019290 4884                       		ext.w	d4
00019292 D444                       		add.w	d4,d2
00019294 B042                       		cmp.w	d2,d0
00019296 6500                       		bcs.s	loc_18F38
00019298 181A                       		move.b	(a2)+,d4
0001929A 4884                       		ext.w	d4
0001929C D244                       		add.w	d4,d1
0001929E 181B                       		move.b	(a3)+,d4
000192A0 4884                       		ext.w	d4
000192A2 D644                       		add.w	d4,d3
000192A4 B641                       		cmp.w	d1,d3
000192A6 6500                       		bcs.s	loc_18F38
000192A8 181A                       		move.b	(a2)+,d4
000192AA 4884                       		ext.w	d4
000192AC D244                       		add.w	d4,d1
000192AE 181B                       		move.b	(a3)+,d4
000192B0 4884                       		ext.w	d4
000192B2 D644                       		add.w	d4,d3
000192B4 B243                       		cmp.w	d3,d1
000192B6 6500                       		bcs.s	loc_18F38
000192B8 5428 0024                  		addq.b	#2,$24(a0)
000192BC 4268 0028                  		clr.w	$28(a0)
000192C0 4229 0020                  		clr.b	$20(a1)
000192C4 5329 0021                  		subq.b	#1,$21(a1)
000192C8 6600                       		bne.s	loc_18F38
000192CA 08E9 0007 0022             		bset	#7,$22(a1)
000192D0 4268 0010                  		clr.w	$10(a0)
000192D4 4268 0012                  		clr.w	$12(a0)
000192D8                            
000192D8                            loc_18F38:
000192D8 4A68 0012                  		tst.w	$12(a0)
000192DC 6A00                       		bpl.s	loc_18F5C
000192DE 4EB9 0000 D90C             		jsr	ObjectFall
000192E4 3028 0034                  		move.w	$34(a0),d0
000192E8 0440 002F                  		subi.w	#$2F,d0
000192EC B068 000C                  		cmp.w	$C(a0),d0
000192F0 6E00                       		bgt.s	loc_18F58
000192F2 4EB9 0000 D90C             		jsr	ObjectFall
000192F8                            
000192F8                            loc_18F58:
000192F8 6000 FF20                  		bra.w	loc_18E7A
000192FC                            ; ===========================================================================
000192FC                            
000192FC                            loc_18F5C:
000192FC 4EB9 0000 D90C             		jsr	ObjectFall
00019302 2268 003C                  		movea.l	$3C(a0),a1
00019306 45F9 0000 0000             		lea	(word_19018).l,a2
0001930C 7000                       		moveq	#0,d0
0001930E 1029 001A                  		move.b	$1A(a1),d0
00019312 3228 0008                  		move.w	8(a0),d1
00019316 9268 0030                  		sub.w	$30(a0),d1
0001931A 6400                       		bcc.s	loc_18F7E
0001931C 5440                       		addq.w	#2,d0
0001931E                            
0001931E                            loc_18F7E:
0001931E D040                       		add.w	d0,d0
00019320 3228 0034                  		move.w	$34(a0),d1
00019324 D272 0000                  		add.w	(a2,d0.w),d1
00019328 B268 000C                  		cmp.w	$C(a0),d1
0001932C 6ECA                       		bgt.s	loc_18F58
0001932E 2268 003C                  		movea.l	$3C(a0),a1
00019332 7202                       		moveq	#2,d1
00019334 4A68 0010                  		tst.w	$10(a0)
00019338 6B00                       		bmi.s	loc_18F9C
0001933A 7200                       		moveq	#0,d1
0001933C                            
0001933C                            loc_18F9C:
0001933C 317C 0000 0028             		move.w	#0,$28(a0)
00019342                            
00019342                            loc_18FA2:
00019342 1341 003A                  		move.b	d1,$3A(a1)
00019346 1141 003A                  		move.b	d1,$3A(a0)
0001934A B229 001A                  		cmp.b	$1A(a1),d1
0001934E 6700                       		beq.s	loc_19008
00019350 08A9 0003 0022             		bclr	#3,$22(a1)
00019356 6700                       		beq.s	loc_19008
00019358 4229 0025                  		clr.b	$25(a1)
0001935C 137C 0002 0024             		move.b	#2,$24(a1)
00019362 45F8 D000                  		lea	($FFFFD000).w,a2
00019366 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001936C 446A 0012                  		neg.w	$12(a2)
00019370 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019376 6600                       		bne.s	loc_18FDC
00019378 E0EA 0012                  		asr	$12(a2)
0001937C                            
0001937C                            loc_18FDC:
0001937C 08EA 0001 0022             		bset	#1,$22(a2)
00019382 08AA 0003 0022             		bclr	#3,$22(a2)
00019388 422A 003C                  		clr.b	$3C(a2)
0001938C 2F08                       		move.l	a0,-(sp)
0001938E 41D2                       		lea	(a2),a0
00019390 4EBA A3BA                  		jsr	Obj01_ChkRoll
00019394 205F                       		movea.l	(sp)+,a0
00019396 157C 0002 0024             		move.b	#2,$24(a2)
0001939C 303C 00CC                  		move.w	#$CC,d0
000193A0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spring" sound
000193A6                            
000193A6                            loc_19008:
000193A6 4268 0010                  		clr.w	$10(a0)
000193AA 4268 0012                  		clr.w	$12(a0)
000193AE 5428 0024                  		addq.b	#2,$24(a0)
000193B2 6000 FE66                  		bra.w	loc_18E7A
000193B6                            ; ===========================================================================
000193B6 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000193C0                            		even
000193C0 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
000193C4                            		even
000193C4 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
000193C8                            		even
000193C8                            ; ===========================================================================
000193C8                            
000193C8                            Obj7B_Explode:				; XREF: Obj7B_Index
000193C8 10BC 003F                  		move.b	#$3F,(a0)
000193CC 4228 0024                  		clr.b	$24(a0)
000193D0 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
000193D6 6700                       		beq.s	Obj7B_MakeFrag
000193D8 4E75                       		rts	
000193DA                            ; ===========================================================================
000193DA                            
000193DA                            Obj7B_MakeFrag:
000193DA 3168 0034 000C             		move.w	$34(a0),$C(a0)
000193E0 7203                       		moveq	#3,d1
000193E2 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
000193E6                            
000193E6                            Obj7B_Loop:
000193E6 4EB9 0000 DDE4             		jsr	SingleObjLoad
000193EC 6600                       		bne.s	loc_1909A
000193EE 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
000193F2 137C 000A 0024             		move.b	#$A,$24(a1)
000193F8 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019400 137C 0003 0018             		move.b	#3,$18(a1)
00019406 337C 0518 0002             		move.w	#$518,2(a1)
0001940C 3368 0008 0008             		move.w	8(a0),8(a1)
00019412 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019418 335A 0010                  		move.w	(a2)+,$10(a1)
0001941C 335A 0012                  		move.w	(a2)+,$12(a1)
00019420 137C 0098 0020             		move.b	#$98,$20(a1)
00019426 0029 0004 0001             		ori.b	#4,1(a1)
0001942C 08E9 0007 0001             		bset	#7,1(a1)
00019432 137C 000C 0019             		move.b	#$C,$19(a1)
00019438                            
00019438                            loc_1909A:
00019438 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001943C                            
0001943C 4E75                       		rts	
0001943E                            ; ===========================================================================
0001943E FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019442 FF60 FDC0                  		dc.w $FF60, $FDC0
00019446 0100 FCC0                  		dc.w $100, $FCC0
0001944A 00A0 FDC0                  		dc.w $A0, $FDC0
0001944E                            ; ===========================================================================
0001944E                            
0001944E                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001944E 4EB9 0000 D938             		jsr	SpeedToPos
00019454 3168 0008 0030             		move.w	8(a0),$30(a0)
0001945A 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019460 0668 0018 0012             		addi.w	#$18,$12(a0)
00019466 7004                       		moveq	#4,d0
00019468 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001946C E448                       		lsr.w	#2,d0
0001946E 1140 001A                  		move.b	d0,$1A(a0)
00019472 4A28 0001                  		tst.b	1(a0)
00019476 6A00 F7DC                  		bpl.w	Obj7A_Delete
0001947A 4E75                       		rts	
0001947C                            ; ===========================================================================
0001947C                            ; ---------------------------------------------------------------------------
0001947C                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001947C                            ; ---------------------------------------------------------------------------
0001947C                            Map_obj7B:
0001947C                            	include "_maps\obj7B.asm"
0001947C                            ; ---------------------------------------------------------------------------
0001947C                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001947C                            ; ---------------------------------------------------------------------------
0001947C 0000                       		dc.w byte_190E2-Map_obj7B
0001947E 0000                       		dc.w byte_190E8-Map_obj7B
00019480 01                         byte_190E2:	dc.b 1
00019481 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019486 01                         byte_190E8:	dc.b 1
00019487 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001948C                            		even
0001948C                            		even
0001948C                            
0001948C                            ; ===========================================================================
0001948C                            ; ---------------------------------------------------------------------------
0001948C                            ; Object 75 - Eggman (SYZ)
0001948C                            ; ---------------------------------------------------------------------------
0001948C                            
0001948C                            Obj75:					; XREF: Obj_Index
0001948C 7000                       		moveq	#0,d0
0001948E 1028 0024                  		move.b	$24(a0),d0
00019492 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019496 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001949A                            ; ===========================================================================
0001949A 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001949C 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001949E 0000                       		dc.w Obj75_FaceMain-Obj75_Index
000194A0 0000                       		dc.w Obj75_FlameMain-Obj75_Index
000194A2 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
000194A4                            
000194A4 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
000194A7 0401 05                    		dc.b 4,	1, 5
000194AA 0607 05                    		dc.b 6,	7, 5
000194AD 0800 05                    		dc.b 8,	0, 5
000194B0                            ; ===========================================================================
000194B0                            
000194B0                            Obj75_Main:				; XREF: Obj75_Index
000194B0 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
000194B6 317C 04DA 000C             		move.w	#$4DA,$C(a0)
000194BC 3168 0008 0030             		move.w	8(a0),$30(a0)
000194C2 3168 000C 0038             		move.w	$C(a0),$38(a0)
000194C8 117C 000F 0020             		move.b	#$F,$20(a0)
000194CE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000194D4 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
000194D8 2248                       		movea.l	a0,a1
000194DA 7203                       		moveq	#3,d1
000194DC 6000                       		bra.s	Obj75_LoadBoss
000194DE                            ; ===========================================================================
000194DE                            
000194DE                            Obj75_Loop:
000194DE 4EB9 0000 DDFA             		jsr	SingleObjLoad2
000194E4 6600                       		bne.s	Obj75_ShipMain
000194E6 12BC 0075                  		move.b	#$75,(a1)
000194EA 3368 0008 0008             		move.w	8(a0),8(a1)
000194F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000194F6                            
000194F6                            Obj75_LoadBoss:				; XREF: Obj75_Main
000194F6 08A8 0000 0022             		bclr	#0,$22(a0)
000194FC 4229 0025                  		clr.b	$25(a1)
00019500 135A 0024                  		move.b	(a2)+,$24(a1)
00019504 135A 001C                  		move.b	(a2)+,$1C(a1)
00019508 135A 0018                  		move.b	(a2)+,$18(a1)
0001950C 237C 0001 80B4 0004        		move.l	#Map_Eggman,4(a1)
00019514 337C 0400 0002             		move.w	#$400,2(a1)
0001951A 137C 0004 0001             		move.b	#4,1(a1)
00019520 137C 0020 0019             		move.b	#$20,$19(a1)
00019526 2348 0034                  		move.l	a0,$34(a1)
0001952A 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001952E                            
0001952E                            Obj75_ShipMain:				; XREF: Obj75_Index
0001952E 7000                       		moveq	#0,d0
00019530 1028 0025                  		move.b	$25(a0),d0
00019534 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019538 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001953C 43F9 0001 8064             		lea	(Ani_Eggman).l,a1
00019542 4EB9 0000 AA10             		jsr	AnimateSprite
00019548 7003                       		moveq	#3,d0
0001954A C028 0022                  		and.b	$22(a0),d0
0001954E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019554 8128 0001                  		or.b	d0,1(a0)
00019558 4EF9 0000 D95E             		jmp	DisplaySprite
0001955E                            ; ===========================================================================
0001955E 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019562 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019566 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001956A                            ; ===========================================================================
0001956A                            
0001956A                            loc_191CC:				; XREF: Obj75_ShipIndex
0001956A 317C FF00 0010             		move.w	#-$100,$10(a0)
00019570 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019576 6400                       		bcc.s	loc_191DE
00019578 5428 0025                  		addq.b	#2,$25(a0)
0001957C                            
0001957C                            loc_191DE:
0001957C 1028 003F                  		move.b	$3F(a0),d0
00019580 5428 003F                  		addq.b	#2,$3F(a0)
00019584 4EB9 0000 2BFA             		jsr	(CalcSine).l
0001958A E440                       		asr.w	#2,d0
0001958C 3140 0012                  		move.w	d0,$12(a0)
00019590                            
00019590                            loc_191F2:
00019590 6100 E6C2                  		bsr.w	BossMove
00019594 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001959A 3168 0030 0008             		move.w	$30(a0),8(a0)
000195A0                            
000195A0                            loc_19202:
000195A0 3028 0008                  		move.w	8(a0),d0
000195A4 0440 2C00                  		subi.w	#$2C00,d0
000195A8 EA48                       		lsr.w	#5,d0
000195AA 1140 0034                  		move.b	d0,$34(a0)
000195AE 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000195B4 6400                       		bcc.s	locret_19256
000195B6 4A28 0022                  		tst.b	$22(a0)
000195BA 6B00                       		bmi.s	loc_19258
000195BC 4A28 0020                  		tst.b	$20(a0)
000195C0 6600                       		bne.s	locret_19256
000195C2 4A28 003E                  		tst.b	$3E(a0)
000195C6 6600                       		bne.s	loc_1923A
000195C8 117C 0020 003E             		move.b	#$20,$3E(a0)
000195CE 303C 00AC                  		move.w	#$AC,d0
000195D2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
000195D8                            
000195D8                            loc_1923A:
000195D8 43F8 FB22                  		lea	($FFFFFB22).w,a1
000195DC 7000                       		moveq	#0,d0
000195DE 4A51                       		tst.w	(a1)
000195E0 6600                       		bne.s	loc_19248
000195E2 303C 0EEE                  		move.w	#$EEE,d0
000195E6                            
000195E6                            loc_19248:
000195E6 3280                       		move.w	d0,(a1)
000195E8 5328 003E                  		subq.b	#1,$3E(a0)
000195EC 6600                       		bne.s	locret_19256
000195EE 117C 000F 0020             		move.b	#$F,$20(a0)
000195F4                            
000195F4                            locret_19256:
000195F4 4E75                       		rts	
000195F6                            ; ===========================================================================
000195F6                            
000195F6                            loc_19258:				; XREF: loc_19202
000195F6 7064                       		moveq	#100,d0
000195F8 6100 0000                  		bsr.w	AddPoints
000195FC 117C 0006 0025             		move.b	#6,$25(a0)
00019602 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019608 4268 0010                  		clr.w	$10(a0)
0001960C 4E75                       		rts	
0001960E                            ; ===========================================================================
0001960E                            
0001960E                            loc_19270:				; XREF: Obj75_ShipIndex
0001960E 3028 0030                  		move.w	$30(a0),d0
00019612 317C 0140 0010             		move.w	#$140,$10(a0)
00019618 0828 0000 0022             		btst	#0,$22(a0)
0001961E 6600                       		bne.s	loc_1928E
00019620 4468 0010                  		neg.w	$10(a0)
00019624 0C40 2C08                  		cmpi.w	#$2C08,d0
00019628 6E00                       		bgt.s	loc_1929E
0001962A 6000                       		bra.s	loc_19294
0001962C                            ; ===========================================================================
0001962C                            
0001962C                            loc_1928E:
0001962C 0C40 2D38                  		cmpi.w	#$2D38,d0
00019630 6D00                       		blt.s	loc_1929E
00019632                            
00019632                            loc_19294:
00019632 0868 0000 0022             		bchg	#0,$22(a0)
00019638 4228 003D                  		clr.b	$3D(a0)
0001963C                            
0001963C                            loc_1929E:
0001963C 0440 2C10                  		subi.w	#$2C10,d0
00019640 0240 001F                  		andi.w	#$1F,d0
00019644 0440 001F                  		subi.w	#$1F,d0
00019648 6A00                       		bpl.s	loc_192AE
0001964A 4440                       		neg.w	d0
0001964C                            
0001964C                            loc_192AE:
0001964C 5340                       		subq.w	#1,d0
0001964E 6E00                       		bgt.s	loc_192E8
00019650 4A28 003D                  		tst.b	$3D(a0)
00019654 6600                       		bne.s	loc_192E8
00019656 3238 D008                  		move.w	($FFFFD008).w,d1
0001965A 0441 2C00                  		subi.w	#$2C00,d1
0001965E EA41                       		asr.w	#5,d1
00019660 B228 0034                  		cmp.b	$34(a0),d1
00019664 6600                       		bne.s	loc_192E8
00019666 7000                       		moveq	#0,d0
00019668 1028 0034                  		move.b	$34(a0),d0
0001966C EB40                       		asl.w	#5,d0
0001966E 0640 2C10                  		addi.w	#$2C10,d0
00019672 3140 0030                  		move.w	d0,$30(a0)
00019676 6100 0000                  		bsr.w	Obj75_FindBlocks
0001967A 5428 0025                  		addq.b	#2,$25(a0)
0001967E 4268 0028                  		clr.w	$28(a0)
00019682 4268 0010                  		clr.w	$10(a0)
00019686                            
00019686                            loc_192E8:
00019686 6000 FEF4                  		bra.w	loc_191DE
0001968A                            ; ===========================================================================
0001968A                            
0001968A                            loc_192EC:				; XREF: Obj75_ShipIndex
0001968A 7000                       		moveq	#0,d0
0001968C 1028 0028                  		move.b	$28(a0),d0
00019690 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019694 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019698                            ; ===========================================================================
00019698 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001969A 0000                       		dc.w loc_19348-off_192FA
0001969C 0000                       		dc.w loc_1938E-off_192FA
0001969E 0000                       		dc.w loc_193D0-off_192FA
000196A0                            ; ===========================================================================
000196A0                            
000196A0                            loc_19302:				; XREF: off_192FA
000196A0 317C 0180 0012             		move.w	#$180,$12(a0)
000196A6 3028 0038                  		move.w	$38(a0),d0
000196AA 0C40 0556                  		cmpi.w	#$556,d0
000196AE 6500                       		bcs.s	loc_19344
000196B0 317C 0556 0038             		move.w	#$556,$38(a0)
000196B6 4268 003C                  		clr.w	$3C(a0)
000196BA 70FF                       		moveq	#-1,d0
000196BC 3028 0036                  		move.w	$36(a0),d0
000196C0 6700                       		beq.s	loc_1933C
000196C2 2240                       		movea.l	d0,a1
000196C4 137C 00FF 0029             		move.b	#-1,$29(a1)
000196CA 117C 00FF 0029             		move.b	#-1,$29(a0)
000196D0 2348 0034                  		move.l	a0,$34(a1)
000196D4 317C 0032 003C             		move.w	#$32,$3C(a0)
000196DA                            
000196DA                            loc_1933C:
000196DA 4268 0012                  		clr.w	$12(a0)
000196DE 5428 0028                  		addq.b	#2,$28(a0)
000196E2                            
000196E2                            loc_19344:
000196E2 6000 FEAC                  		bra.w	loc_191F2
000196E6                            ; ===========================================================================
000196E6                            
000196E6                            loc_19348:				; XREF: off_192FA
000196E6 5368 003C                  		subq.w	#1,$3C(a0)
000196EA 6A00                       		bpl.s	loc_19366
000196EC 5428 0028                  		addq.b	#2,$28(a0)
000196F0 317C F800 0012             		move.w	#-$800,$12(a0)
000196F6 4A68 0036                  		tst.w	$36(a0)
000196FA 6600                       		bne.s	loc_19362
000196FC E0E8 0012                  		asr	$12(a0)
00019700                            
00019700                            loc_19362:
00019700 7000                       		moveq	#0,d0
00019702 6000                       		bra.s	loc_1937C
00019704                            ; ===========================================================================
00019704                            
00019704                            loc_19366:
00019704 7000                       		moveq	#0,d0
00019706 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001970C 6E00                       		bgt.s	loc_1937C
0001970E 7002                       		moveq	#2,d0
00019710 0828 0001 003D             		btst	#1,$3D(a0)
00019716 6700                       		beq.s	loc_1937C
00019718 4440                       		neg.w	d0
0001971A                            
0001971A                            loc_1937C:
0001971A D068 0038                  		add.w	$38(a0),d0
0001971E 3140 000C                  		move.w	d0,$C(a0)
00019722 3168 0030 0008             		move.w	$30(a0),8(a0)
00019728 6000 FE76                  		bra.w	loc_19202
0001972C                            ; ===========================================================================
0001972C                            
0001972C                            loc_1938E:				; XREF: off_192FA
0001972C 303C 04DA                  		move.w	#$4DA,d0
00019730 4A68 0036                  		tst.w	$36(a0)
00019734 6700                       		beq.s	loc_1939C
00019736 0440 0018                  		subi.w	#$18,d0
0001973A                            
0001973A                            loc_1939C:
0001973A B068 0038                  		cmp.w	$38(a0),d0
0001973E 6D00                       		blt.s	loc_193BE
00019740 317C 0008 003C             		move.w	#8,$3C(a0)
00019746 4A68 0036                  		tst.w	$36(a0)
0001974A 6700                       		beq.s	loc_193B4
0001974C 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019752                            
00019752                            loc_193B4:
00019752 5428 0028                  		addq.b	#2,$28(a0)
00019756 4268 0012                  		clr.w	$12(a0)
0001975A 6000                       		bra.s	loc_193CC
0001975C                            ; ===========================================================================
0001975C                            
0001975C                            loc_193BE:
0001975C 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019762 6C00                       		bge.s	loc_193CC
00019764 0668 000C 0012             		addi.w	#$C,$12(a0)
0001976A                            
0001976A                            loc_193CC:
0001976A 6000 FE24                  		bra.w	loc_191F2
0001976E                            ; ===========================================================================
0001976E                            
0001976E                            loc_193D0:				; XREF: off_192FA
0001976E 5368 003C                  		subq.w	#1,$3C(a0)
00019772 6E00                       		bgt.s	loc_19406
00019774 6B00                       		bmi.s	loc_193EE
00019776 70FF                       		moveq	#-1,d0
00019778 3028 0036                  		move.w	$36(a0),d0
0001977C 6700                       		beq.s	loc_193E8
0001977E 2240                       		movea.l	d0,a1
00019780 137C 000A 0029             		move.b	#$A,$29(a1)
00019786                            
00019786                            loc_193E8:
00019786 4268 0036                  		clr.w	$36(a0)
0001978A 6000                       		bra.s	loc_19406
0001978C                            ; ===========================================================================
0001978C                            
0001978C                            loc_193EE:
0001978C 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019792 6600                       		bne.s	loc_19406
00019794 4228 0029                  		clr.b	$29(a0)
00019798 5528 0025                  		subq.b	#2,$25(a0)
0001979C 117C 00FF 003D             		move.b	#-1,$3D(a0)
000197A2 6000                       		bra.s	loc_19446
000197A4                            ; ===========================================================================
000197A4                            
000197A4                            loc_19406:
000197A4 7001                       		moveq	#1,d0
000197A6 4A68 0036                  		tst.w	$36(a0)
000197AA 6700                       		beq.s	loc_19410
000197AC 7002                       		moveq	#2,d0
000197AE                            
000197AE                            loc_19410:
000197AE 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
000197B4 6700                       		beq.s	loc_19424
000197B6 6D00                       		blt.s	loc_1941C
000197B8 4440                       		neg.w	d0
000197BA                            
000197BA                            loc_1941C:
000197BA 4A68 0036                  		tst.w	$36(a0)
000197BE D168 0038                  		add.w	d0,$38(a0)
000197C2                            
000197C2                            loc_19424:
000197C2 7000                       		moveq	#0,d0
000197C4 4A68 0036                  		tst.w	$36(a0)
000197C8 6700                       		beq.s	loc_19438
000197CA 7002                       		moveq	#2,d0
000197CC 0828 0000 003D             		btst	#0,$3D(a0)
000197D2 6700                       		beq.s	loc_19438
000197D4 4440                       		neg.w	d0
000197D6                            
000197D6                            loc_19438:
000197D6 D068 0038                  		add.w	$38(a0),d0
000197DA 3140 000C                  		move.w	d0,$C(a0)
000197DE 3168 0030 0008             		move.w	$30(a0),8(a0)
000197E4                            
000197E4                            loc_19446:
000197E4 6000 FDBA                  		bra.w	loc_19202
000197E8                            
000197E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000197E8                            
000197E8                            
000197E8                            Obj75_FindBlocks:			; XREF: loc_192AE
000197E8 4268 0036                  		clr.w	$36(a0)
000197EC 43F8 D040                  		lea	($FFFFD040).w,a1
000197F0 703E                       		moveq	#$3E,d0
000197F2 7276                       		moveq	#$76,d1
000197F4 1428 0034                  		move.b	$34(a0),d2
000197F8                            
000197F8                            Obj75_FindLoop:
000197F8 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
000197FA 6600                       		bne.s	loc_1946A	; if not, branch
000197FC B429 0028                  		cmp.b	$28(a1),d2
00019800 6600                       		bne.s	loc_1946A
00019802 3149 0036                  		move.w	a1,$36(a0)
00019806 6000                       		bra.s	locret_19472
00019808                            ; ===========================================================================
00019808                            
00019808                            loc_1946A:
00019808 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001980C 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019810                            
00019810                            locret_19472:
00019810 4E75                       		rts	
00019812                            ; End of function Obj75_FindBlocks
00019812                            
00019812                            ; ===========================================================================
00019812                            
00019812                            loc_19474:				; XREF: Obj75_ShipIndex
00019812 5368 003C                  		subq.w	#1,$3C(a0)
00019816 6B00                       		bmi.s	loc_1947E
00019818 6000 E3F8                  		bra.w	BossDefeated
0001981C                            ; ===========================================================================
0001981C                            
0001981C                            loc_1947E:
0001981C 5428 0025                  		addq.b	#2,$25(a0)
00019820 4268 0012                  		clr.w	$12(a0)
00019824 08E8 0000 0022             		bset	#0,$22(a0)
0001982A 08A8 0007 0022             		bclr	#7,$22(a0)
00019830 4268 0010                  		clr.w	$10(a0)
00019834 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001983A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001983E 6600                       		bne.s	loc_194A8
00019840 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019846                            
00019846                            loc_194A8:
00019846 6000 FD58                  		bra.w	loc_19202
0001984A                            ; ===========================================================================
0001984A                            
0001984A                            loc_194AC:				; XREF: Obj75_ShipIndex
0001984A 5268 003C                  		addq.w	#1,$3C(a0)
0001984E 6700                       		beq.s	loc_194BC
00019850 6A00                       		bpl.s	loc_194C2
00019852 0668 0018 0012             		addi.w	#$18,$12(a0)
00019858 6000                       		bra.s	loc_194EE
0001985A                            ; ===========================================================================
0001985A                            
0001985A                            loc_194BC:
0001985A 4268 0012                  		clr.w	$12(a0)
0001985E 6000                       		bra.s	loc_194EE
00019860                            ; ===========================================================================
00019860                            
00019860                            loc_194C2:
00019860 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019866 6500                       		bcs.s	loc_194DA
00019868 6700                       		beq.s	loc_194E0
0001986A 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019870 6500                       		bcs.s	loc_194EE
00019872 5428 0025                  		addq.b	#2,$25(a0)
00019876 6000                       		bra.s	loc_194EE
00019878                            ; ===========================================================================
00019878                            
00019878                            loc_194DA:
00019878 5168 0012                  		subq.w	#8,$12(a0)
0001987C 6000                       		bra.s	loc_194EE
0001987E                            ; ===========================================================================
0001987E                            
0001987E                            loc_194E0:
0001987E 4268 0012                  		clr.w	$12(a0)
00019882 303C 0085                  		move.w	#$85,d0
00019886 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SYZ music
0001988C                            
0001988C                            loc_194EE:
0001988C 6000 FD02                  		bra.w	loc_191F2
00019890                            ; ===========================================================================
00019890                            
00019890                            loc_194F2:				; XREF: Obj75_ShipIndex
00019890 317C 0400 0010             		move.w	#$400,$10(a0)
00019896 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001989C 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
000198A2 6400                       		bcc.s	loc_1950C
000198A4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000198A8 6000                       		bra.s	loc_19512
000198AA                            ; ===========================================================================
000198AA                            
000198AA                            loc_1950C:
000198AA 4A28 0001                  		tst.b	1(a0)
000198AE 6A00                       		bpl.s	Obj75_ShipDelete
000198B0                            
000198B0                            loc_19512:
000198B0 6100 E3A2                  		bsr.w	BossMove
000198B4 6000 FCC6                  		bra.w	loc_191DE
000198B8                            ; ===========================================================================
000198B8                            
000198B8                            Obj75_ShipDelete:
000198B8 4EF9 0000 D99A             		jmp	DeleteObject
000198BE                            ; ===========================================================================
000198BE                            
000198BE                            Obj75_FaceMain:				; XREF: Obj75_Index
000198BE 7201                       		moveq	#1,d1
000198C0 2268 0034                  		movea.l	$34(a0),a1
000198C4 7000                       		moveq	#0,d0
000198C6 1029 0025                  		move.b	$25(a1),d0
000198CA 303B 0000                  		move.w	off_19546(pc,d0.w),d0
000198CE 4EBB 0000                  		jsr	off_19546(pc,d0.w)
000198D2 1141 001C                  		move.b	d1,$1C(a0)
000198D6 1010                       		move.b	(a0),d0
000198D8 B011                       		cmp.b	(a1),d0
000198DA 6600                       		bne.s	Obj75_FaceDelete
000198DC 6000                       		bra.s	loc_195BE
000198DE                            ; ===========================================================================
000198DE                            
000198DE                            Obj75_FaceDelete:
000198DE 4EF9 0000 D99A             		jmp	DeleteObject
000198E4                            ; ===========================================================================
000198E4 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
000198E8 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
000198EC 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
000198F0                            ; ===========================================================================
000198F0                            
000198F0                            loc_19552:				; XREF: off_19546
000198F0 720A                       		moveq	#$A,d1
000198F2 4E75                       		rts	
000198F4                            ; ===========================================================================
000198F4                            
000198F4                            loc_19556:				; XREF: off_19546
000198F4 7206                       		moveq	#6,d1
000198F6 4E75                       		rts	
000198F8                            ; ===========================================================================
000198F8                            
000198F8                            loc_1955A:				; XREF: off_19546
000198F8 7000                       		moveq	#0,d0
000198FA 1029 0028                  		move.b	$28(a1),d0
000198FE 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019902 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019906                            ; ===========================================================================
00019906 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001990A 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001990E                            ; ===========================================================================
0001990E                            
0001990E                            loc_19570:				; XREF: off_19568
0001990E 6000                       		bra.s	loc_19574
00019910                            ; ===========================================================================
00019910                            
00019910                            loc_19572:				; XREF: off_19568
00019910 7206                       		moveq	#6,d1
00019912                            
00019912                            loc_19574:				; XREF: off_19546
00019912 4A29 0020                  		tst.b	$20(a1)
00019916 6600                       		bne.s	loc_1957E
00019918 7205                       		moveq	#5,d1
0001991A 4E75                       		rts	
0001991C                            ; ===========================================================================
0001991C                            
0001991C                            loc_1957E:
0001991C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019922 6500                       		bcs.s	locret_19588
00019924 7204                       		moveq	#4,d1
00019926                            
00019926                            locret_19588:
00019926 4E75                       		rts	
00019928                            ; ===========================================================================
00019928                            
00019928                            Obj75_FlameMain:			; XREF: Obj75_Index
00019928 117C 0007 001C             		move.b	#7,$1C(a0)
0001992E 2268 0034                  		movea.l	$34(a0),a1
00019932 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019938 6600                       		bne.s	loc_195AA
0001993A 117C 000B 001C             		move.b	#$B,$1C(a0)
00019940 4A28 0001                  		tst.b	1(a0)
00019944 6A00                       		bpl.s	Obj75_FlameDelete
00019946 6000                       		bra.s	loc_195B6
00019948                            ; ===========================================================================
00019948                            
00019948                            loc_195AA:
00019948 4A69 0010                  		tst.w	$10(a1)
0001994C 6700                       		beq.s	loc_195B6
0001994E 117C 0008 001C             		move.b	#8,$1C(a0)
00019954                            
00019954                            loc_195B6:
00019954 6000                       		bra.s	loc_195BE
00019956                            ; ===========================================================================
00019956                            
00019956                            Obj75_FlameDelete:
00019956 4EF9 0000 D99A             		jmp	DeleteObject
0001995C                            ; ===========================================================================
0001995C                            
0001995C                            loc_195BE:
0001995C 43F9 0001 8064             		lea	(Ani_Eggman).l,a1
00019962 4EB9 0000 AA10             		jsr	AnimateSprite
00019968 2268 0034                  		movea.l	$34(a0),a1
0001996C 3169 0008 0008             		move.w	8(a1),8(a0)
00019972 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019978                            
00019978                            loc_195DA:
00019978 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001997E 7003                       		moveq	#3,d0
00019980 C028 0022                  		and.b	$22(a0),d0
00019984 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001998A 8128 0001                  		or.b	d0,1(a0)
0001998E 4EF9 0000 D95E             		jmp	DisplaySprite
00019994                            ; ===========================================================================
00019994                            
00019994                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019994 217C 0001 817C 0004        		move.l	#Map_BossItems,4(a0)
0001999C 317C 246C 0002             		move.w	#$246C,2(a0)
000199A2 117C 0005 001A             		move.b	#5,$1A(a0)
000199A8 2268 0034                  		movea.l	$34(a0),a1
000199AC 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000199B2 6600                       		bne.s	loc_1961C
000199B4 4A28 0001                  		tst.b	1(a0)
000199B8 6A00                       		bpl.s	Obj75_SpikeDelete
000199BA                            
000199BA                            loc_1961C:
000199BA 3169 0008 0008             		move.w	8(a1),8(a0)
000199C0 3169 000C 000C             		move.w	$C(a1),$C(a0)
000199C6 3028 003C                  		move.w	$3C(a0),d0
000199CA 0C29 0004 0025             		cmpi.b	#4,$25(a1)
000199D0 6600                       		bne.s	loc_19652
000199D2 0C29 0006 0028             		cmpi.b	#6,$28(a1)
000199D8 6700                       		beq.s	loc_1964C
000199DA 4A29 0028                  		tst.b	$28(a1)
000199DE 6600                       		bne.s	loc_19658
000199E0 0C40 0094                  		cmpi.w	#$94,d0
000199E4 6C00                       		bge.s	loc_19658
000199E6 5E40                       		addq.w	#7,d0
000199E8 6000                       		bra.s	loc_19658
000199EA                            ; ===========================================================================
000199EA                            
000199EA                            loc_1964C:
000199EA 4A69 003C                  		tst.w	$3C(a1)
000199EE 6A00                       		bpl.s	loc_19658
000199F0                            
000199F0                            loc_19652:
000199F0 4A40                       		tst.w	d0
000199F2 6F00                       		ble.s	loc_19658
000199F4 5B40                       		subq.w	#5,d0
000199F6                            
000199F6                            loc_19658:
000199F6 3140 003C                  		move.w	d0,$3C(a0)
000199FA E440                       		asr.w	#2,d0
000199FC D168 000C                  		add.w	d0,$C(a0)
00019A00 117C 0008 0019             		move.b	#8,$19(a0)
00019A06 117C 000C 0016             		move.b	#$C,$16(a0)
00019A0C 4228 0020                  		clr.b	$20(a0)
00019A10 2268 0034                  		movea.l	$34(a0),a1
00019A14 4A29 0020                  		tst.b	$20(a1)
00019A18 6700                       		beq.s	loc_19688
00019A1A 4A29 0029                  		tst.b	$29(a1)
00019A1E 6600                       		bne.s	loc_19688
00019A20 117C 0084 0020             		move.b	#$84,$20(a0)
00019A26                            
00019A26                            loc_19688:
00019A26 6000 FF50                  		bra.w	loc_195DA
00019A2A                            ; ===========================================================================
00019A2A                            
00019A2A                            Obj75_SpikeDelete:
00019A2A 4EF9 0000 D99A             		jmp	DeleteObject
00019A30                            ; ===========================================================================
00019A30                            ; ---------------------------------------------------------------------------
00019A30                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019A30                            ; ---------------------------------------------------------------------------
00019A30                            
00019A30                            Obj76:					; XREF: Obj_Index
00019A30 7000                       		moveq	#0,d0
00019A32 1028 0024                  		move.b	$24(a0),d0
00019A36 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019A3A 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019A3E                            ; ===========================================================================
00019A3E 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019A40 0000                       		dc.w Obj76_Action-Obj76_Index
00019A42 0000                       		dc.w loc_19762-Obj76_Index
00019A44                            ; ===========================================================================
00019A44                            
00019A44                            Obj76_Main:				; XREF: Obj76_Index
00019A44 7800                       		moveq	#0,d4
00019A46 3A3C 2C10                  		move.w	#$2C10,d5
00019A4A 7C09                       		moveq	#9,d6
00019A4C 43D0                       		lea	(a0),a1
00019A4E 6000                       		bra.s	Obj76_MakeBlock
00019A50                            ; ===========================================================================
00019A50                            
00019A50                            Obj76_Loop:
00019A50 4EB9 0000 DDE4             		jsr	SingleObjLoad
00019A56 6600                       		bne.s	Obj76_ExitLoop
00019A58                            
00019A58                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019A58 12BC 0076                  		move.b	#$76,(a1)
00019A5C 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019A64 337C 4000 0002             		move.w	#$4000,2(a1)
00019A6A 137C 0004 0001             		move.b	#4,1(a1)
00019A70 137C 0010 0019             		move.b	#$10,$19(a1)
00019A76 137C 0010 0016             		move.b	#$10,$16(a1)
00019A7C 137C 0003 0018             		move.b	#3,$18(a1)
00019A82 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019A86 337C 0582 000C             		move.w	#$582,$C(a1)
00019A8C 3344 0028                  		move.w	d4,$28(a1)
00019A90 0644 0101                  		addi.w	#$101,d4
00019A94 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019A98 5429 0024                  		addq.b	#2,$24(a1)
00019A9C 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019AA0                            
00019AA0                            Obj76_ExitLoop:
00019AA0 4E75                       		rts	
00019AA2                            ; ===========================================================================
00019AA2                            
00019AA2                            Obj76_Action:				; XREF: Obj76_Index
00019AA2 1028 0029                  		move.b	$29(a0),d0
00019AA6 B028 0028                  		cmp.b	$28(a0),d0
00019AAA 6700                       		beq.s	Obj76_Solid
00019AAC 4A00                       		tst.b	d0
00019AAE 6B00                       		bmi.s	loc_19718
00019AB0                            
00019AB0                            loc_19712:
00019AB0 6100 0000                  		bsr.w	Obj76_Break
00019AB4 6000                       		bra.s	Obj76_Display
00019AB6                            ; ===========================================================================
00019AB6                            
00019AB6                            loc_19718:
00019AB6 2268 0034                  		movea.l	$34(a0),a1
00019ABA 4A29 0021                  		tst.b	$21(a1)
00019ABE 67F0                       		beq.s	loc_19712
00019AC0 3169 0008 0008             		move.w	8(a1),8(a0)
00019AC6 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019ACC 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019AD2 B2C8                       		cmpa.w	a0,a1
00019AD4 6500                       		bcs.s	Obj76_Display
00019AD6 3029 0012                  		move.w	$12(a1),d0
00019ADA 48C0                       		ext.l	d0
00019ADC E080                       		asr.l	#8,d0
00019ADE D168 000C                  		add.w	d0,$C(a0)
00019AE2 6000                       		bra.s	Obj76_Display
00019AE4                            ; ===========================================================================
00019AE4                            
00019AE4                            Obj76_Solid:				; XREF: Obj76_Action
00019AE4 323C 001B                  		move.w	#$1B,d1
00019AE8 343C 0010                  		move.w	#$10,d2
00019AEC 363C 0011                  		move.w	#$11,d3
00019AF0 3828 0008                  		move.w	8(a0),d4
00019AF4 4EB9 0000 FD2E             		jsr	SolidObject
00019AFA                            
00019AFA                            Obj76_Display:				; XREF: Obj76_Action
00019AFA 4EF9 0000 D95E             		jmp	DisplaySprite
00019B00                            ; ===========================================================================
00019B00                            
00019B00                            loc_19762:				; XREF: Obj76_Index
00019B00 4A28 0001                  		tst.b	1(a0)
00019B04 6A00                       		bpl.s	Obj76_Delete
00019B06 4EB9 0000 D90C             		jsr	ObjectFall
00019B0C 4EF9 0000 D95E             		jmp	DisplaySprite
00019B12                            ; ===========================================================================
00019B12                            
00019B12                            Obj76_Delete:
00019B12 4EF9 0000 D99A             		jmp	DeleteObject
00019B18                            
00019B18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019B18                            
00019B18                            
00019B18                            Obj76_Break:				; XREF: Obj76_Action
00019B18 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019B1C 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019B20 7801                       		moveq	#1,d4
00019B22 7203                       		moveq	#3,d1
00019B24 7438                       		moveq	#$38,d2
00019B26 5428 0024                  		addq.b	#2,$24(a0)
00019B2A 117C 0008 0019             		move.b	#8,$19(a0)
00019B30 117C 0008 0016             		move.b	#8,$16(a0)
00019B36 43D0                       		lea	(a0),a1
00019B38 6000                       		bra.s	Obj76_MakeFrag
00019B3A                            ; ===========================================================================
00019B3A                            
00019B3A                            Obj76_LoopFrag:
00019B3A 4EB9 0000 DDFA             		jsr	SingleObjLoad2
00019B40 6600                       		bne.s	loc_197D4
00019B42                            
00019B42                            Obj76_MakeFrag:
00019B42 45D0                       		lea	(a0),a2
00019B44 47D1                       		lea	(a1),a3
00019B46 7603                       		moveq	#3,d3
00019B48                            
00019B48                            loc_197AA:
00019B48 26DA                       		move.l	(a2)+,(a3)+
00019B4A 26DA                       		move.l	(a2)+,(a3)+
00019B4C 26DA                       		move.l	(a2)+,(a3)+
00019B4E 26DA                       		move.l	(a2)+,(a3)+
00019B50 51CB FFF6                  		dbf	d3,loc_197AA
00019B54                            
00019B54 335C 0010                  		move.w	(a4)+,$10(a1)
00019B58 335C 0012                  		move.w	(a4)+,$12(a1)
00019B5C 361D                       		move.w	(a5)+,d3
00019B5E D769 0008                  		add.w	d3,8(a1)
00019B62 361D                       		move.w	(a5)+,d3
00019B64 D769 000C                  		add.w	d3,$C(a1)
00019B68 1344 001A                  		move.b	d4,$1A(a1)
00019B6C 5244                       		addq.w	#1,d4
00019B6E 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019B72                            
00019B72                            loc_197D4:
00019B72 303C 00CB                  		move.w	#$CB,d0
00019B76 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
00019B7C                            ; End of function Obj76_Break
00019B7C                            
00019B7C                            ; ===========================================================================
00019B7C FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019B80 0180 FE00                  		dc.w $180, $FE00
00019B84 FF00 FF00                  		dc.w $FF00, $FF00
00019B88 0100 FF00                  		dc.w $100, $FF00
00019B8C FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019B90 0010 0000                  		dc.w $10, 0
00019B94 0000 0010                  		dc.w 0,	$10
00019B98 0010 0010                  		dc.w $10, $10
00019B9C                            ; ---------------------------------------------------------------------------
00019B9C                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019B9C                            ; ---------------------------------------------------------------------------
00019B9C                            Map_obj76:
00019B9C                            	include "_maps\obj76.asm"
00019B9C                            ; ---------------------------------------------------------------------------
00019B9C                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019B9C                            ; ---------------------------------------------------------------------------
00019B9C 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019BA0 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019BA4 0000                       		dc.w byte_19826-Map_obj76
00019BA6 02                         byte_19808:	dc.b 2
00019BA7 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019BAC 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019BB1 00                         		dc.b 0
00019BB2 01                         byte_19814:	dc.b 1
00019BB3 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019BB8 01                         byte_1981A:	dc.b 1
00019BB9 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019BBE 01                         byte_19820:	dc.b 1
00019BBF F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019BC4 01                         byte_19826:	dc.b 1
00019BC5 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019BCA                            		even
00019BCA                            		even
00019BCA                            
00019BCA                            ; ===========================================================================
00019BCA                            
00019BCA                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019BCA 4EF9 0000 D99A             		jmp	DeleteObject
00019BD0                            ; ===========================================================================
00019BD0                            ; ---------------------------------------------------------------------------
00019BD0                            ; Object 82 - Eggman (SBZ2)
00019BD0                            ; ---------------------------------------------------------------------------
00019BD0                            
00019BD0                            Obj82:					; XREF: Obj_Index
00019BD0 7000                       		moveq	#0,d0
00019BD2 1028 0024                  		move.b	$24(a0),d0
00019BD6 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019BDA 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019BDE                            ; ===========================================================================
00019BDE 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019BE0 0000                       		dc.w Obj82_Eggman-Obj82_Index
00019BE2 0000                       		dc.w Obj82_Switch-Obj82_Index
00019BE4                            
00019BE4 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00019BE7 0400 03                    		dc.b 4,	0, 3
00019BEA                            ; ===========================================================================
00019BEA                            
00019BEA                            Obj82_Main:				; XREF: Obj82_Index
00019BEA 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019BEE 317C 2160 0008             		move.w	#$2160,8(a0)
00019BF4 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019BFA 117C 000F 0020             		move.b	#$F,$20(a0)
00019C00 117C 0010 0021             		move.b	#$10,$21(a0)
00019C06 08A8 0000 0022             		bclr	#0,$22(a0)
00019C0C 4228 0025                  		clr.b	$25(a0)
00019C10 115A 0024                  		move.b	(a2)+,$24(a0)
00019C14 115A 001C                  		move.b	(a2)+,$1C(a0)
00019C18 115A 0018                  		move.b	(a2)+,$18(a0)
00019C1C 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00019C24 317C 0400 0002             		move.w	#$400,2(a0)
00019C2A 117C 0004 0001             		move.b	#4,1(a0)
00019C30 08E8 0007 0001             		bset	#7,1(a0)
00019C36 117C 0020 0019             		move.b	#$20,$19(a0)
00019C3C 4EB9 0000 DDFA             		jsr	SingleObjLoad2
00019C42 6600                       		bne.s	Obj82_Eggman
00019C44 2348 0034                  		move.l	a0,$34(a1)
00019C48 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019C4C 337C 2130 0008             		move.w	#$2130,8(a1)
00019C52 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019C58 4228 0025                  		clr.b	$25(a0)
00019C5C 135A 0024                  		move.b	(a2)+,$24(a1)
00019C60 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C64 135A 0018                  		move.b	(a2)+,$18(a1)
00019C68 237C 0000 C152 0004        		move.l	#Map_obj32,4(a1)
00019C70 337C 04A4 0002             		move.w	#$4A4,2(a1)
00019C76 137C 0004 0001             		move.b	#4,1(a1)
00019C7C 08E9 0007 0001             		bset	#7,1(a1)
00019C82 137C 0010 0019             		move.b	#$10,$19(a1)
00019C88 137C 0000 001A             		move.b	#0,$1A(a1)
00019C8E                            
00019C8E                            Obj82_Eggman:				; XREF: Obj82_Index
00019C8E 7000                       		moveq	#0,d0
00019C90 1028 0025                  		move.b	$25(a0),d0
00019C94 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019C98 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019C9C 43FA 0000                  		lea	Ani_obj82(pc),a1
00019CA0 4EB9 0000 AA10             		jsr	AnimateSprite
00019CA6 4EF9 0000 D95E             		jmp	DisplaySprite
00019CAC                            ; ===========================================================================
00019CAC 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019CAE 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019CB0 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00019CB2 0000                       		dc.w loc_19934-Obj82_EggIndex
00019CB4                            ; ===========================================================================
00019CB4                            
00019CB4                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00019CB4 3028 0008                  		move.w	8(a0),d0
00019CB8 9078 D008                  		sub.w	($FFFFD008).w,d0
00019CBC 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019CC0 6400                       		bcc.s	loc_19934	; if not, branch
00019CC2 5428 0025                  		addq.b	#2,$25(a0)
00019CC6 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019CCC 117C 0001 001C             		move.b	#1,$1C(a0)
00019CD2                            
00019CD2                            loc_19934:				; XREF: Obj82_EggIndex
00019CD2 4EF9 0000 D938             		jmp	SpeedToPos
00019CD8                            ; ===========================================================================
00019CD8                            
00019CD8                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019CD8 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019CDC 6600                       		bne.s	loc_19954	; if time remains, branch
00019CDE 5428 0025                  		addq.b	#2,$25(a0)
00019CE2 117C 0002 001C             		move.b	#2,$1C(a0)
00019CE8 5868 000C                  		addq.w	#4,$C(a0)
00019CEC 317C 000F 003C             		move.w	#15,$3C(a0)
00019CF2                            
00019CF2                            loc_19954:
00019CF2 60DE                       		bra.s	loc_19934
00019CF4                            ; ===========================================================================
00019CF4                            
00019CF4                            Obj82_Leap:				; XREF: Obj82_EggIndex
00019CF4 5368 003C                  		subq.w	#1,$3C(a0)
00019CF8 6E00                       		bgt.s	loc_199D0
00019CFA 6600                       		bne.s	loc_1996A
00019CFC 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00019D02 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019D08                            
00019D08                            loc_1996A:
00019D08 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019D0E 6E00                       		bgt.s	loc_19976
00019D10 4268 0010                  		clr.w	$10(a0)
00019D14                            
00019D14                            loc_19976:
00019D14 0668 0024 0012             		addi.w	#$24,$12(a0)
00019D1A 4A68 0012                  		tst.w	$12(a0)
00019D1E 6B00                       		bmi.s	Obj82_FindBlocks
00019D20 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019D26 6500                       		bcs.s	Obj82_FindBlocks
00019D28 317C 5357 0028             		move.w	#$5357,$28(a0)
00019D2E 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00019D34 6500                       		bcs.s	Obj82_FindBlocks
00019D36 317C 059B 000C             		move.w	#$59B,$C(a0)
00019D3C 4268 0012                  		clr.w	$12(a0)
00019D40                            
00019D40                            Obj82_FindBlocks:
00019D40 3028 0010                  		move.w	$10(a0),d0
00019D44 8068 0012                  		or.w	$12(a0),d0
00019D48 6600                       		bne.s	loc_199D0
00019D4A 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019D4E 703E                       		moveq	#$3E,d0
00019D50 7240                       		moveq	#$40,d1
00019D52                            
00019D52                            Obj82_FindLoop:	
00019D52 D2C1                       		adda.w	d1,a1		; jump to next object RAM
00019D54 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00019D58 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00019D5C                            
00019D5C 6600                       		bne.s	loc_199D0
00019D5E 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
00019D64 5428 0025                  		addq.b	#2,$25(a0)
00019D68 117C 0001 001C             		move.b	#1,$1C(a0)
00019D6E                            
00019D6E                            loc_199D0:
00019D6E 6000 FF62                  		bra.w	loc_19934
00019D72                            ; ===========================================================================
00019D72                            
00019D72                            Obj82_Switch:				; XREF: Obj82_Index
00019D72 7000                       		moveq	#0,d0
00019D74 1028 0025                  		move.b	$25(a0),d0
00019D78 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00019D7C 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00019D80                            ; ===========================================================================
00019D80 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00019D82 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00019D84                            ; ===========================================================================
00019D84                            
00019D84                            loc_199E6:				; XREF: Obj82_SwIndex
00019D84 2268 0034                  		movea.l	$34(a0),a1
00019D88 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00019D8E 6600                       		bne.s	Obj82_SwDisplay
00019D90 117C 0001 001A             		move.b	#1,$1A(a0)
00019D96 5428 0025                  		addq.b	#2,$25(a0)
00019D9A                            
00019D9A                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
00019D9A 4EF9 0000 D95E             		jmp	DisplaySprite
00019DA0                            ; ===========================================================================
00019DA0                            Ani_obj82:
00019DA0                            	include "_anim\obj82.asm"
00019DA0                            ; ---------------------------------------------------------------------------
00019DA0                            ; Animation script - Eggman (SBZ2)
00019DA0                            ; ---------------------------------------------------------------------------
00019DA0 0000                       		dc.w byte_19A10-Ani_obj82
00019DA2 0000                       		dc.w byte_19A14-Ani_obj82
00019DA4 0000                       		dc.w byte_19A18-Ani_obj82
00019DA6 0000                       		dc.w byte_19A20-Ani_obj82
00019DA8 0000                       		dc.w byte_19A24-Ani_obj82
00019DAA 0000                       		dc.w byte_19A2A-Ani_obj82
00019DAC 0000                       		dc.w byte_19A30-Ani_obj82
00019DAE 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
00019DB2 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
00019DB6 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
00019DBE 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
00019DC2 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
00019DC8 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
00019DCE 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
00019DD2                            		even
00019DD2                            		even
00019DD2                            
00019DD2                            ; ---------------------------------------------------------------------------
00019DD2                            ; Sprite mappings - Eggman (SBZ2)
00019DD2                            ; ---------------------------------------------------------------------------
00019DD2                            Map_obj82:
00019DD2                            	include "_maps\obj82.asm"
00019DD2                            ; ---------------------------------------------------------------------------
00019DD2                            ; Sprite mappings - Eggman (SBZ2)
00019DD2                            ; ---------------------------------------------------------------------------
00019DD2 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
00019DD6 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
00019DDA 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
00019DDE 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
00019DE2 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
00019DE6 0000                       		dc.w byte_19B4F-Map_obj82
00019DE8 03                         byte_19A4A:	dc.b 3
00019DE9 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019DEE E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019DF3 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019DF8 04                         byte_19A5A:	dc.b 4
00019DF9 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
00019DFE E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019E03 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019E08 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019E0D 00                         		dc.b 0
00019E0E 04                         byte_19A70:	dc.b 4
00019E0F E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
00019E14 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
00019E19 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
00019E1E FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
00019E23 00                         		dc.b 0
00019E24 04                         byte_19A86:	dc.b 4
00019E25 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
00019E2A F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
00019E2F 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
00019E34 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
00019E39 00                         		dc.b 0
00019E3A 04                         byte_19A9C:	dc.b 4
00019E3B F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019E40 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00019E45 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
00019E4A E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019E4F 00                         		dc.b 0
00019E50 04                         byte_19AB2:	dc.b 4
00019E51 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019E56 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019E5B E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019E60 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019E65 00                         		dc.b 0
00019E66 07                         byte_19AC8:	dc.b 7
00019E67 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019E6C E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019E71 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00019E76 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00019E7B F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019E80 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
00019E85 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
00019E8A 05                         byte_19AEC:	dc.b 5
00019E8B F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019E90 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00019E95 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00019E9A 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00019E9F E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019EA4 06                         byte_19B06:	dc.b 6
00019EA5 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
00019EAA EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
00019EAF 0905 0844 00               		dc.b 9,	5, 8, $44, 0
00019EB4 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
00019EB9 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
00019EBE E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
00019EC3 00                         		dc.b 0
00019EC4 08                         byte_19B26:	dc.b 8
00019EC5 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019ECA E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019ECF E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019ED4 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019ED9 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
00019EDE F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
00019EE3 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
00019EE8 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
00019EED 03                         byte_19B4F:	dc.b 3
00019EEE EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
00019EF3 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
00019EF8 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
00019EFE 00                         		even
00019EFE 00                         		even
00019EFE                            
00019EFE                            ; ===========================================================================
00019EFE                            ; ---------------------------------------------------------------------------
00019EFE                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
00019EFE                            ; ---------------------------------------------------------------------------
00019EFE                            
00019EFE                            Obj83:					; XREF: Obj_Index
00019EFE 7000                       		moveq	#0,d0
00019F00 1028 0024                  		move.b	$24(a0),d0
00019F04 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
00019F08 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
00019F0C                            ; ===========================================================================
00019F0C 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
00019F0E 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
00019F10 0000                       		dc.w loc_19C36-Obj83_Index
00019F12 0000                       		dc.w loc_19C62-Obj83_Index
00019F14 0000                       		dc.w loc_19C72-Obj83_Index
00019F16 0000                       		dc.w loc_19C80-Obj83_Index
00019F18                            ; ===========================================================================
00019F18                            
00019F18                            Obj83_Main:				; XREF: Obj83_Index
00019F18 317C 2080 0008             		move.w	#$2080,8(a0)
00019F1E 317C 05D0 000C             		move.w	#$5D0,$C(a0)
00019F24 117C 0080 0019             		move.b	#$80,$19(a0)
00019F2A 117C 0010 0016             		move.b	#$10,$16(a0)
00019F30 117C 0004 0001             		move.b	#4,1(a0)
00019F36 08E8 0007 0001             		bset	#7,1(a0)
00019F3C 7800                       		moveq	#0,d4
00019F3E 3A3C 2010                  		move.w	#$2010,d5
00019F42 7C07                       		moveq	#7,d6
00019F44 45E8 0030                  		lea	$30(a0),a2
00019F48                            
00019F48                            Obj83_MakeBlock:
00019F48 4EB9 0000 DDE4             		jsr	SingleObjLoad
00019F4E 6600                       		bne.s	Obj83_ExitMake
00019F50 34C9                       		move.w	a1,(a2)+
00019F52 12BC 0083                  		move.b	#$83,(a1)	; load block object
00019F56 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
00019F5E 337C 4518 0002             		move.w	#$4518,2(a1)
00019F64 137C 0004 0001             		move.b	#4,1(a1)
00019F6A 137C 0010 0019             		move.b	#$10,$19(a1)
00019F70 137C 0010 0016             		move.b	#$10,$16(a1)
00019F76 137C 0003 0018             		move.b	#3,$18(a1)
00019F7C 3345 0008                  		move.w	d5,8(a1)	; set X	position
00019F80 337C 05D0 000C             		move.w	#$5D0,$C(a1)
00019F86 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
00019F8A 137C 0008 0024             		move.b	#8,$24(a1)
00019F90 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
00019F94                            
00019F94                            Obj83_ExitMake:
00019F94 5428 0024                  		addq.b	#2,$24(a0)
00019F98 4E75                       		rts	
00019F9A                            ; ===========================================================================
00019F9A                            
00019F9A                            Obj83_ChkBreak:				; XREF: Obj83_Index
00019F9A 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00019FA0 6600                       		bne.s	Obj83_Solid	; if not, branch
00019FA2 4228 001A                  		clr.b	$1A(a0)
00019FA6 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
00019FAA                            
00019FAA                            Obj83_Solid:
00019FAA 7000                       		moveq	#0,d0
00019FAC 1028 001A                  		move.b	$1A(a0),d0
00019FB0 4400                       		neg.b	d0
00019FB2 4880                       		ext.w	d0
00019FB4 5040                       		addq.w	#8,d0
00019FB6 E940                       		asl.w	#4,d0
00019FB8 383C 2100                  		move.w	#$2100,d4
00019FBC 9840                       		sub.w	d0,d4
00019FBE 1140 0019                  		move.b	d0,$19(a0)
00019FC2 3144 0008                  		move.w	d4,8(a0)
00019FC6 720B                       		moveq	#$B,d1
00019FC8 D240                       		add.w	d0,d1
00019FCA 7410                       		moveq	#$10,d2
00019FCC 7611                       		moveq	#$11,d3
00019FCE 4EF9 0000 FD2E             		jmp	SolidObject
00019FD4                            ; ===========================================================================
00019FD4                            
00019FD4                            loc_19C36:				; XREF: Obj83_Index
00019FD4 0428 000E 001E             		subi.b	#$E,$1E(a0)
00019FDA 6400                       		bcc.s	Obj83_Solid2
00019FDC 70FF                       		moveq	#-1,d0
00019FDE 1028 001A                  		move.b	$1A(a0),d0
00019FE2 4880                       		ext.w	d0
00019FE4 D040                       		add.w	d0,d0
00019FE6 3030 0030                  		move.w	$30(a0,d0.w),d0
00019FEA 2240                       		movea.l	d0,a1
00019FEC 337C 474F 0028             		move.w	#$474F,$28(a1)
00019FF2 5228 001A                  		addq.b	#1,$1A(a0)
00019FF6 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
00019FFC 6700                       		beq.s	loc_19C62
00019FFE                            
00019FFE                            Obj83_Solid2:
00019FFE 60AA                       		bra.s	Obj83_Solid
0001A000                            ; ===========================================================================
0001A000                            
0001A000                            loc_19C62:				; XREF: Obj83_Index
0001A000 08A8 0003 0022             		bclr	#3,$22(a0)
0001A006 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A00C 6000 FBBC                  		bra.w	loc_1982C
0001A010                            ; ===========================================================================
0001A010                            
0001A010                            loc_19C72:				; XREF: Obj83_Index
0001A010 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A016 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A018 4EF9 0000 D95E             		jmp	DisplaySprite
0001A01E                            ; ===========================================================================
0001A01E                            
0001A01E                            loc_19C80:				; XREF: Obj83_Index
0001A01E 4A28 0001                  		tst.b	1(a0)
0001A022 6A00 FBA6                  		bpl.w	loc_1982C
0001A026 4EB9 0000 D90C             		jsr	ObjectFall
0001A02C 4EF9 0000 D95E             		jmp	DisplaySprite
0001A032                            ; ===========================================================================
0001A032                            
0001A032                            Obj83_Break:				; XREF: loc_19C72
0001A032 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A036 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A03A 7801                       		moveq	#1,d4
0001A03C 7203                       		moveq	#3,d1
0001A03E 7438                       		moveq	#$38,d2
0001A040 5428 0024                  		addq.b	#2,$24(a0)
0001A044 117C 0008 0019             		move.b	#8,$19(a0)
0001A04A 117C 0008 0016             		move.b	#8,$16(a0)
0001A050 43D0                       		lea	(a0),a1
0001A052 6000                       		bra.s	Obj83_MakeFrag
0001A054                            ; ===========================================================================
0001A054                            
0001A054                            Obj83_LoopFrag:
0001A054 4EB9 0000 DDFA             		jsr	SingleObjLoad2
0001A05A 6600                       		bne.s	Obj83_BreakSnd
0001A05C                            
0001A05C                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A05C 45D0                       		lea	(a0),a2
0001A05E 47D1                       		lea	(a1),a3
0001A060 7603                       		moveq	#3,d3
0001A062                            
0001A062                            loc_19CC4:
0001A062 26DA                       		move.l	(a2)+,(a3)+
0001A064 26DA                       		move.l	(a2)+,(a3)+
0001A066 26DA                       		move.l	(a2)+,(a3)+
0001A068 26DA                       		move.l	(a2)+,(a3)+
0001A06A 51CB FFF6                  		dbf	d3,loc_19CC4
0001A06E                            
0001A06E 335C 0012                  		move.w	(a4)+,$12(a1)
0001A072 361D                       		move.w	(a5)+,d3
0001A074 D769 0008                  		add.w	d3,8(a1)
0001A078 361D                       		move.w	(a5)+,d3
0001A07A D769 000C                  		add.w	d3,$C(a1)
0001A07E 1344 001A                  		move.b	d4,$1A(a1)
0001A082 5244                       		addq.w	#1,d4
0001A084 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A088                            
0001A088                            Obj83_BreakSnd:
0001A088 303C 00CB                  		move.w	#$CB,d0
0001A08C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A092 4EF9 0000 D95E             		jmp	DisplaySprite
0001A098                            ; ===========================================================================
0001A098 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A09C 0120 00C0                  		dc.w $120, $C0
0001A0A0 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A0A4 0010 0000                  		dc.w $10, 0
0001A0A8 0000 0010                  		dc.w 0,	$10
0001A0AC 0010 0010                  		dc.w $10, $10
0001A0B0                            ; ---------------------------------------------------------------------------
0001A0B0                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A0B0                            ; ---------------------------------------------------------------------------
0001A0B0                            Map_obj83:
0001A0B0                            	include "_maps\obj83.asm"
0001A0B0                            ; ---------------------------------------------------------------------------
0001A0B0                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A0B0                            ; ---------------------------------------------------------------------------
0001A0B0 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A0B4 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A0B8 0000                       		dc.w byte_19D46-Map_obj83
0001A0BA 01                         byte_19D1C:	dc.b 1
0001A0BB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A0C0 02                         byte_19D22:	dc.b 2
0001A0C1 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A0C6 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A0CB 00                         		dc.b 0
0001A0CC 02                         byte_19D2E:	dc.b 2
0001A0CD F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A0D2 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A0D7 00                         		dc.b 0
0001A0D8 02                         byte_19D3A:	dc.b 2
0001A0D9 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A0DE F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A0E3 00                         		dc.b 0
0001A0E4 02                         byte_19D46:	dc.b 2
0001A0E5 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A0EA F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A0F0 00                         		even
0001A0F0 00                         		even
0001A0F0                            
0001A0F0                            ; ===========================================================================
0001A0F0                            ; ---------------------------------------------------------------------------
0001A0F0                            ; Object 85 - Eggman (FZ)
0001A0F0                            ; ---------------------------------------------------------------------------
0001A0F0                            
0001A0F0                            Obj85_Delete:
0001A0F0 4EF9 0000 D99A             		jmp	DeleteObject
0001A0F6                            ; ===========================================================================
0001A0F6                            
0001A0F6                            Obj85:					; XREF: Obj_Index
0001A0F6 7000                       		moveq	#0,d0
0001A0F8 1028 0024                  		move.b	$24(a0),d0
0001A0FC 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A100 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A104                            ; ===========================================================================
0001A104 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A106 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A108 0000                       		dc.w loc_1A38E-Obj85_Index
0001A10A 0000                       		dc.w loc_1A346-Obj85_Index
0001A10C 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A10E 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A110 0000                       		dc.w loc_1A264-Obj85_Index
0001A112                            
0001A112 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A118 0001 9DD2                  		dc.l Map_obj82		; mappings pointer
0001A11C 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A122 0000 0000                  		dc.l Map_obj84
0001A126 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A12C 0000 0000                  		dc.l Map_FZBoss
0001A130 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A136 0001 9DD2                  		dc.l Map_obj82
0001A13A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A140 0001 80B4                  		dc.l Map_Eggman
0001A144 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A14A 0001 80B4                  		dc.l Map_Eggman
0001A14E                            
0001A14E 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A153 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A158 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A15D 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A162 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A167 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A16C                            ; ===========================================================================
0001A16C                            
0001A16C                            Obj85_Main:				; XREF: Obj85_Index
0001A16C 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A170 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A174 2248                       		movea.l	a0,a1
0001A176 7205                       		moveq	#5,d1
0001A178 6000                       		bra.s	Obj85_LoadBoss
0001A17A                            ; ===========================================================================
0001A17A                            
0001A17A                            Obj85_Loop:
0001A17A 4EB9 0000 DDFA             		jsr	SingleObjLoad2
0001A180 6600                       		bne.s	loc_19E20
0001A182                            
0001A182                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A182 12BC 0085                  		move.b	#$85,(a1)
0001A186 335A 0008                  		move.w	(a2)+,8(a1)
0001A18A 335A 000C                  		move.w	(a2)+,$C(a1)
0001A18E 335A 0002                  		move.w	(a2)+,2(a1)
0001A192 235A 0004                  		move.l	(a2)+,4(a1)
0001A196 135B 0024                  		move.b	(a3)+,$24(a1)
0001A19A 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A19E 135B 0018                  		move.b	(a3)+,$18(a1)
0001A1A2 135B 0017                  		move.b	(a3)+,$17(a1)
0001A1A6 135B 0016                  		move.b	(a3)+,$16(a1)
0001A1AA 137C 0004 0001             		move.b	#4,1(a1)
0001A1B0 08E8 0007 0001             		bset	#7,1(a0)
0001A1B6 2348 0034                  		move.l	a0,$34(a1)
0001A1BA 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A1BE                            
0001A1BE                            loc_19E20:
0001A1BE 45E8 0036                  		lea	$36(a0),a2
0001A1C2 4EB9 0000 DDE4             		jsr	SingleObjLoad
0001A1C8 6600                       		bne.s	loc_19E5A
0001A1CA 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A1CE 3489                       		move.w	a1,(a2)
0001A1D0 2348 0034                  		move.l	a0,$34(a1)
0001A1D4 45E8 0038                  		lea	$38(a0),a2
0001A1D8 7400                       		moveq	#0,d2
0001A1DA 7203                       		moveq	#3,d1
0001A1DC                            
0001A1DC                            loc_19E3E:
0001A1DC 4EB9 0000 DDFA             		jsr	SingleObjLoad2
0001A1E2 6600                       		bne.s	loc_19E5A
0001A1E4 34C9                       		move.w	a1,(a2)+
0001A1E6 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A1EA 2348 0034                  		move.l	a0,$34(a1)
0001A1EE 1342 0028                  		move.b	d2,$28(a1)
0001A1F2 5442                       		addq.w	#2,d2
0001A1F4 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A1F8                            
0001A1F8                            loc_19E5A:
0001A1F8 317C 0000 0034             		move.w	#0,$34(a0)
0001A1FE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A204 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A20A                            
0001A20A                            Obj85_Eggman:				; XREF: Obj85_Index
0001A20A 7000                       		moveq	#0,d0
0001A20C 1028 0034                  		move.b	$34(a0),d0
0001A210 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A214 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A218 4EF9 0000 D95E             		jmp	DisplaySprite
0001A21E                            ; ===========================================================================
0001A21E 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A222 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A226 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A22A 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A22E                            ; ===========================================================================
0001A22E                            
0001A22E                            loc_19E90:				; XREF: off_19E80
0001A22E 4AB8 F680                  		tst.l	($FFFFF680).w
0001A232 6600                       		bne.s	loc_19EA2
0001A234 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A23A 6500                       		bcs.s	loc_19EA2
0001A23C 5428 0034                  		addq.b	#2,$34(a0)
0001A240                            
0001A240                            loc_19EA2:
0001A240 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A244 4E75                       		rts	
0001A246                            ; ===========================================================================
0001A246                            
0001A246                            loc_19EA8:				; XREF: off_19E80
0001A246 4A68 0030                  		tst.w	$30(a0)
0001A24A 6A00                       		bpl.s	loc_19F10
0001A24C 4268 0030                  		clr.w	$30(a0)
0001A250 4EB9 0000 2BD4             		jsr	(RandomNumber).l
0001A256 0240 000C                  		andi.w	#$C,d0
0001A25A 3200                       		move.w	d0,d1
0001A25C 5441                       		addq.w	#2,d1
0001A25E 4A80                       		tst.l	d0
0001A260 6A00                       		bpl.s	loc_19EC6
0001A262 C141                       		exg	d1,d0
0001A264                            
0001A264                            loc_19EC6:
0001A264 43FA 0000                  		lea	word_19FD6(pc),a1
0001A268 3031 0000                  		move.w	(a1,d0.w),d0
0001A26C 3231 1000                  		move.w	(a1,d1.w),d1
0001A270 3140 0030                  		move.w	d0,$30(a0)
0001A274 74FF                       		moveq	#-1,d2
0001A276 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A27A 2242                       		movea.l	d2,a1
0001A27C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A282 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A288 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A28C 2242                       		movea.l	d2,a1
0001A28E 137C 0001 0029             		move.b	#1,$29(a1)
0001A294 337C 0000 0030             		move.w	#0,$30(a1)
0001A29A 317C 0001 0032             		move.w	#1,$32(a0)
0001A2A0 4228 0035                  		clr.b	$35(a0)
0001A2A4 303C 00B7                  		move.w	#$B7,d0
0001A2A8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A2AE                            
0001A2AE                            loc_19F10:
0001A2AE 4A68 0032                  		tst.w	$32(a0)
0001A2B2 6B00 0000                  		bmi.w	loc_19FA6
0001A2B6 08A8 0000 0022             		bclr	#0,$22(a0)
0001A2BC 3038 D008                  		move.w	($FFFFD008).w,d0
0001A2C0 9068 0008                  		sub.w	8(a0),d0
0001A2C4 6500                       		bcs.s	loc_19F2E
0001A2C6 08E8 0000 0022             		bset	#0,$22(a0)
0001A2CC                            
0001A2CC                            loc_19F2E:
0001A2CC 323C 002B                  		move.w	#$2B,d1
0001A2D0 343C 0014                  		move.w	#$14,d2
0001A2D4 363C 0014                  		move.w	#$14,d3
0001A2D8 3828 0008                  		move.w	8(a0),d4
0001A2DC 4EB9 0000 FD2E             		jsr	SolidObject
0001A2E2 4A44                       		tst.w	d4
0001A2E4 6E00                       		bgt.s	loc_19F50
0001A2E6                            
0001A2E6                            loc_19F48:
0001A2E6 4A28 0035                  		tst.b	$35(a0)
0001A2EA 6600                       		bne.s	loc_19F88
0001A2EC 6000                       		bra.s	loc_19F96
0001A2EE                            ; ===========================================================================
0001A2EE                            
0001A2EE                            loc_19F50:
0001A2EE 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A2F2 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A2F8 66EC                       		bne.s	loc_19F48
0001A2FA 303C 0300                  		move.w	#$300,d0
0001A2FE 0828 0000 0022             		btst	#0,$22(a0)
0001A304 6600                       		bne.s	loc_19F6A
0001A306 4440                       		neg.w	d0
0001A308                            
0001A308                            loc_19F6A:
0001A308 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A30C 4A28 0035                  		tst.b	$35(a0)
0001A310 6600                       		bne.s	loc_19F88
0001A312 5328 0021                  		subq.b	#1,$21(a0)
0001A316 117C 0064 0035             		move.b	#$64,$35(a0)
0001A31C 303C 00AC                  		move.w	#$AC,d0
0001A320 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A326                            
0001A326                            loc_19F88:
0001A326 5328 0035                  		subq.b	#1,$35(a0)
0001A32A 6700                       		beq.s	loc_19F96
0001A32C 117C 0003 001C             		move.b	#3,$1C(a0)
0001A332 6000                       		bra.s	loc_19F9C
0001A334                            ; ===========================================================================
0001A334                            
0001A334                            loc_19F96:
0001A334 117C 0001 001C             		move.b	#1,$1C(a0)
0001A33A                            
0001A33A                            loc_19F9C:
0001A33A 43FA FA64                  		lea	Ani_obj82(pc),a1
0001A33E 4EF9 0000 AA10             		jmp	AnimateSprite
0001A344                            ; ===========================================================================
0001A344                            
0001A344                            loc_19FA6:
0001A344 4A28 0021                  		tst.b	$21(a0)
0001A348 6700                       		beq.s	loc_19FBC
0001A34A 5428 0034                  		addq.b	#2,$34(a0)
0001A34E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A354 4268 0032                  		clr.w	$32(a0)
0001A358 4E75                       		rts	
0001A35A                            ; ===========================================================================
0001A35A                            
0001A35A                            loc_19FBC:
0001A35A 117C 0006 0034             		move.b	#6,$34(a0)
0001A360 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A366 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A36C 117C 0014 0016             		move.b	#$14,$16(a0)
0001A372 4E75                       		rts	
0001A374                            ; ===========================================================================
0001A374 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A384                            ; ===========================================================================
0001A384                            
0001A384                            loc_19FE6:				; XREF: off_19E80
0001A384 70FF                       		moveq	#-1,d0
0001A386 3028 0036                  		move.w	$36(a0),d0
0001A38A 2240                       		movea.l	d0,a1
0001A38C 4A68 0030                  		tst.w	$30(a0)
0001A390 6A00                       		bpl.s	loc_1A000
0001A392 4268 0030                  		clr.w	$30(a0)
0001A396 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A39C 6100                       		bsr.s	loc_1A020
0001A39E                            
0001A39E                            loc_1A000:
0001A39E 700F                       		moveq	#$F,d0
0001A3A0 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A3A4 6600                       		bne.s	loc_1A00A
0001A3A6 6100                       		bsr.s	loc_1A020
0001A3A8                            
0001A3A8                            loc_1A00A:
0001A3A8 4A68 0032                  		tst.w	$32(a0)
0001A3AC 6700                       		beq.s	locret_1A01E
0001A3AE 5528 0034                  		subq.b	#2,$34(a0)
0001A3B2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A3B8 4268 0032                  		clr.w	$32(a0)
0001A3BC                            
0001A3BC                            locret_1A01E:
0001A3BC 4E75                       		rts	
0001A3BE                            ; ===========================================================================
0001A3BE                            
0001A3BE                            loc_1A020:
0001A3BE 303C 00B1                  		move.w	#$B1,d0
0001A3C2 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A3C8                            ; ===========================================================================
0001A3C8                            
0001A3C8                            loc_1A02A:				; XREF: off_19E80
0001A3C8 117C 0030 0017             		move.b	#$30,$17(a0)
0001A3CE 08E8 0000 0022             		bset	#0,$22(a0)
0001A3D4 4EB9 0000 D938             		jsr	SpeedToPos
0001A3DA 117C 0006 001A             		move.b	#6,$1A(a0)
0001A3E0 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A3E6 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A3EC 6500                       		bcs.s	loc_1A070
0001A3EE 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A3F4 5428 0034                  		addq.b	#2,$34(a0)
0001A3F8 117C 0020 0017             		move.b	#$20,$17(a0)
0001A3FE 317C 0100 0010             		move.w	#$100,$10(a0)
0001A404 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A40A 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A40E                            
0001A40E                            loc_1A070:
0001A40E 6000 0000                  		bra.w	loc_1A166
0001A412                            ; ===========================================================================
0001A412                            
0001A412                            loc_1A074:				; XREF: off_19E80
0001A412 08E8 0000 0022             		bset	#0,$22(a0)
0001A418 117C 0004 001C             		move.b	#4,$1C(a0)
0001A41E 4EB9 0000 D938             		jsr	SpeedToPos
0001A424 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A42A 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A430 6500                       		bcs.s	loc_1A09A
0001A432 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A438                            
0001A438                            loc_1A09A:
0001A438 317C 0400 0010             		move.w	#$400,$10(a0)
0001A43E 3028 0008                  		move.w	8(a0),d0
0001A442 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A446 6A00                       		bpl.s	loc_1A0B4
0001A448 317C 0500 0010             		move.w	#$500,$10(a0)
0001A44E 6000 0000                  		bra.w	loc_1A0F2
0001A452                            ; ===========================================================================
0001A452                            
0001A452                            loc_1A0B4:
0001A452 0440 0070                  		subi.w	#$70,d0
0001A456 6500                       		bcs.s	loc_1A0F2
0001A458 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A45E 5140                       		subq.w	#8,d0
0001A460 6500                       		bcs.s	loc_1A0F2
0001A462 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A468 5140                       		subq.w	#8,d0
0001A46A 6500                       		bcs.s	loc_1A0F2
0001A46C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A472 5140                       		subq.w	#8,d0
0001A474 6500                       		bcs.s	loc_1A0F2
0001A476 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A47C 5140                       		subq.w	#8,d0
0001A47E 6500                       		bcs.s	loc_1A0F2
0001A480 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A486 0440 0038                  		subi.w	#$38,d0
0001A48A 6500                       		bcs.s	loc_1A0F2
0001A48C 4268 0010                  		clr.w	$10(a0)
0001A490                            
0001A490                            loc_1A0F2:
0001A490 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A496 6500                       		bcs.s	loc_1A110
0001A498 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A49E 317C 0240 0010             		move.w	#$240,$10(a0)
0001A4A4 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A4AA 5428 0034                  		addq.b	#2,$34(a0)
0001A4AE                            
0001A4AE                            loc_1A110:
0001A4AE 6000                       		bra.s	loc_1A15C
0001A4B0                            ; ===========================================================================
0001A4B0                            
0001A4B0                            loc_1A112:				; XREF: off_19E80
0001A4B0 4EB9 0000 D938             		jsr	SpeedToPos
0001A4B6 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A4BC 6500                       		bcs.s	loc_1A124
0001A4BE 4268 0010                  		clr.w	$10(a0)
0001A4C2                            
0001A4C2                            loc_1A124:
0001A4C2 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A4C8 4A68 0012                  		tst.w	$12(a0)
0001A4CC 6B00                       		bmi.s	loc_1A142
0001A4CE 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A4D4 6500                       		bcs.s	loc_1A142
0001A4D6 317C 0592 000C             		move.w	#$592,$C(a0)
0001A4DC 4268 0012                  		clr.w	$12(a0)
0001A4E0                            
0001A4E0                            loc_1A142:
0001A4E0 3028 0010                  		move.w	$10(a0),d0
0001A4E4 8068 0012                  		or.w	$12(a0),d0
0001A4E8 6600                       		bne.s	loc_1A15C
0001A4EA 5428 0034                  		addq.b	#2,$34(a0)
0001A4EE 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A4F4 117C 0001 0021             		move.b	#1,$21(a0)
0001A4FA                            
0001A4FA                            loc_1A15C:
0001A4FA 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001A4FE 4EB9 0000 AA10             		jsr	AnimateSprite
0001A504                            
0001A504                            loc_1A166:
0001A504 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A50A 6C00                       		bge.s	loc_1A172
0001A50C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A510                            
0001A510                            loc_1A172:
0001A510 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A516 6C00                       		bge.s	locret_1A190
0001A518 323C 001B                  		move.w	#$1B,d1
0001A51C 343C 0070                  		move.w	#$70,d2
0001A520 363C 0071                  		move.w	#$71,d3
0001A524 3828 0008                  		move.w	8(a0),d4
0001A528 4EF9 0000 FD2E             		jmp	SolidObject
0001A52E                            ; ===========================================================================
0001A52E                            
0001A52E                            locret_1A190:
0001A52E 4E75                       		rts	
0001A530                            ; ===========================================================================
0001A530                            
0001A530                            loc_1A192:				; XREF: off_19E80
0001A530 217C 0001 80B4 0004        		move.l	#Map_Eggman,4(a0)
0001A538 317C 0400 0002             		move.w	#$400,2(a0)
0001A53E 117C 0000 001C             		move.b	#0,$1C(a0)
0001A544 08E8 0000 0022             		bset	#0,$22(a0)
0001A54A 4EB9 0000 D938             		jsr	SpeedToPos
0001A550 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A556 6400                       		bcc.s	loc_1A1D0
0001A558 317C 0180 0010             		move.w	#$180,$10(a0)
0001A55E 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A564 117C 000F 0020             		move.b	#$F,$20(a0)
0001A56A 5428 0034                  		addq.b	#2,$34(a0)
0001A56E                            
0001A56E                            loc_1A1D0:
0001A56E 6000 FF8A                  		bra.w	loc_1A15C
0001A572                            ; ===========================================================================
0001A572                            
0001A572                            loc_1A1D4:				; XREF: off_19E80
0001A572 08E8 0000 0022             		bset	#0,$22(a0)
0001A578 4EB9 0000 D938             		jsr	SpeedToPos
0001A57E 4A68 0030                  		tst.w	$30(a0)
0001A582 6600                       		bne.s	loc_1A1FC
0001A584 4A28 0020                  		tst.b	$20(a0)
0001A588 6600                       		bne.s	loc_1A216
0001A58A 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A590 303C 00AC                  		move.w	#$AC,d0
0001A594 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A59A                            
0001A59A                            loc_1A1FC:
0001A59A 5368 0030                  		subq.w	#1,$30(a0)
0001A59E 6600                       		bne.s	loc_1A216
0001A5A0 4A28 0022                  		tst.b	$22(a0)
0001A5A4 6A00                       		bpl.s	loc_1A210
0001A5A6 317C 0060 0012             		move.w	#$60,$12(a0)
0001A5AC 6000                       		bra.s	loc_1A216
0001A5AE                            ; ===========================================================================
0001A5AE                            
0001A5AE                            loc_1A210:
0001A5AE 117C 000F 0020             		move.b	#$F,$20(a0)
0001A5B4                            
0001A5B4                            loc_1A216:
0001A5B4 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A5BA 6D00                       		blt.s	loc_1A23A
0001A5BC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A5C2 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A5C8 4278 D014                  		clr.w	($FFFFD014).w
0001A5CC 4A68 0012                  		tst.w	$12(a0)
0001A5D0 6A00                       		bpl.s	loc_1A248
0001A5D2 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A5D8                            
0001A5D8                            loc_1A23A:
0001A5D8 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A5DE 6D00                       		blt.s	loc_1A248
0001A5E0 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A5E6                            
0001A5E6                            loc_1A248:
0001A5E6 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A5EC 6500                       		bcs.s	loc_1A260
0001A5EE 4A28 0001                  		tst.b	1(a0)
0001A5F2 6B00                       		bmi.s	loc_1A260
0001A5F4 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A5FA 6000 FAF4                  		bra.w	Obj85_Delete
0001A5FE                            ; ===========================================================================
0001A5FE                            
0001A5FE                            loc_1A260:
0001A5FE 6000 FEFA                  		bra.w	loc_1A15C
0001A602                            ; ===========================================================================
0001A602                            
0001A602                            loc_1A264:				; XREF: Obj85_Index
0001A602 2268 0034                  		movea.l	$34(a0),a1
0001A606 1011                       		move.b	(a1),d0
0001A608 B010                       		cmp.b	(a0),d0
0001A60A 6600 FAE4                  		bne.w	Obj85_Delete
0001A60E 117C 0007 001C             		move.b	#7,$1C(a0)
0001A614 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A61A 6C00                       		bge.s	loc_1A280
0001A61C 6000                       		bra.s	loc_1A2A6
0001A61E                            ; ===========================================================================
0001A61E                            
0001A61E                            loc_1A280:
0001A61E 4A69 0010                  		tst.w	$10(a1)
0001A622 6700                       		beq.s	loc_1A28C
0001A624 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A62A                            
0001A62A                            loc_1A28C:
0001A62A 43FA DA38                  		lea	Ani_Eggman(pc),a1
0001A62E 4EB9 0000 AA10             		jsr	AnimateSprite
0001A634                            
0001A634                            loc_1A296:
0001A634 2268 0034                  		movea.l	$34(a0),a1
0001A638 3169 0008 0008             		move.w	8(a1),8(a0)
0001A63E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A644                            
0001A644                            loc_1A2A6:
0001A644 2268 0034                  		movea.l	$34(a0),a1
0001A648 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A64E 7003                       		moveq	#3,d0
0001A650 C028 0022                  		and.b	$22(a0),d0
0001A654 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A65A 8128 0001                  		or.b	d0,1(a0)
0001A65E 4EF9 0000 D95E             		jmp	DisplaySprite
0001A664                            ; ===========================================================================
0001A664                            
0001A664                            loc_1A2C6:				; XREF: Obj85_Index
0001A664 2268 0034                  		movea.l	$34(a0),a1
0001A668 1011                       		move.b	(a1),d0
0001A66A B010                       		cmp.b	(a0),d0
0001A66C 6600 FA82                  		bne.w	Obj85_Delete
0001A670 0CA9 0001 80B4 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A678 6700                       		beq.s	loc_1A2E4
0001A67A 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A680 60C2                       		bra.s	loc_1A2A6
0001A682                            ; ===========================================================================
0001A682                            
0001A682                            loc_1A2E4:
0001A682 117C 0001 001C             		move.b	#1,$1C(a0)
0001A688 4A29 0021                  		tst.b	$21(a1)
0001A68C 6F00                       		ble.s	loc_1A312
0001A68E 117C 0006 001C             		move.b	#6,$1C(a0)
0001A694 217C 0001 80B4 0004        		move.l	#Map_Eggman,4(a0)
0001A69C 317C 0400 0002             		move.w	#$400,2(a0)
0001A6A2 43FA D9C0                  		lea	Ani_Eggman(pc),a1
0001A6A6 4EB9 0000 AA10             		jsr	AnimateSprite
0001A6AC 6000 FF86                  		bra.w	loc_1A296
0001A6B0                            ; ===========================================================================
0001A6B0                            
0001A6B0                            loc_1A312:
0001A6B0 4A28 0001                  		tst.b	1(a0)
0001A6B4 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A6B8 6100 D558                  		bsr.w	BossDefeated
0001A6BC 117C 0002 0018             		move.b	#2,$18(a0)
0001A6C2 117C 0000 001C             		move.b	#0,$1C(a0)
0001A6C8 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A6D0 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A6D6 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A6DA 4EB9 0000 AA10             		jsr	AnimateSprite
0001A6E0 6000 FF52                  		bra.w	loc_1A296
0001A6E4                            ; ===========================================================================
0001A6E4                            
0001A6E4                            loc_1A346:				; XREF: Obj85_Index
0001A6E4 08E8 0000 0022             		bset	#0,$22(a0)
0001A6EA 2268 0034                  		movea.l	$34(a0),a1
0001A6EE 0CA9 0001 80B4 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A6F6 6700                       		beq.s	loc_1A35E
0001A6F8 6000 FF4A                  		bra.w	loc_1A2A6
0001A6FC                            ; ===========================================================================
0001A6FC                            
0001A6FC                            loc_1A35E:
0001A6FC 3169 0008 0008             		move.w	8(a1),8(a0)
0001A702 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A708 4A28 001E                  		tst.b	$1E(a0)
0001A70C 6600                       		bne.s	loc_1A376
0001A70E 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A714                            
0001A714                            loc_1A376:
0001A714 5328 001E                  		subq.b	#1,$1E(a0)
0001A718 6E00                       		bgt.s	loc_1A38A
0001A71A 5228 001A                  		addq.b	#1,$1A(a0)
0001A71E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A724 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A728                            
0001A728                            loc_1A38A:
0001A728 6000 FF0A                  		bra.w	loc_1A296
0001A72C                            ; ===========================================================================
0001A72C                            
0001A72C                            loc_1A38E:				; XREF: Obj85_Index
0001A72C 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A732 3038 D008                  		move.w	($FFFFD008).w,d0
0001A736 9068 0008                  		sub.w	8(a0),d0
0001A73A 6500                       		bcs.s	loc_1A3A6
0001A73C 4A28 0001                  		tst.b	1(a0)
0001A740 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A744                            
0001A744                            loc_1A3A6:
0001A744 4EF9 0000 D95E             		jmp	DisplaySprite
0001A74A                            ; ===========================================================================
0001A74A                            
0001A74A                            loc_1A3AC:				; XREF: Obj85_Index
0001A74A 117C 0000 001A             		move.b	#0,$1A(a0)
0001A750 08E8 0000 0022             		bset	#0,$22(a0)
0001A756 2268 0034                  		movea.l	$34(a0),a1
0001A75A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A760 6600                       		bne.s	loc_1A3D0
0001A762 0CA9 0001 80B4 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A76A 6700 F984                  		beq.w	Obj85_Delete
0001A76E                            
0001A76E                            loc_1A3D0:
0001A76E 6000 FED4                  		bra.w	loc_1A2A6
0001A772                            ; ===========================================================================
0001A772                            Ani_obj85:
0001A772                            	include "_anim\obj85.asm"
0001A772                            ; ---------------------------------------------------------------------------
0001A772                            ; Animation script - Eggman (FZ)
0001A772                            ; ---------------------------------------------------------------------------
0001A772 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A774 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A778                            		even
0001A778                            		even
0001A778                            
0001A778                            Map_Eggman2:
0001A778                            	include "_maps\Eggman2.asm"
0001A778                            ; ---------------------------------------------------------------------------
0001A778                            ; Sprite mappings - Eggman (FZ)
0001A778                            ; ---------------------------------------------------------------------------
0001A778 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A77A 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A77C 06                         byte_1A3DE:	dc.b 6
0001A77D E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A782 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A787 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A78C FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A791 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A796 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A79B 06                         byte_1A3FD:	dc.b 6
0001A79C E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A7A1 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A7A6 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A7AB FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A7B0 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A7B5 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A7BA                            		even
0001A7BA                            		even
0001A7BA                            
0001A7BA                            Map_FZBoss:
0001A7BA                            	include "_maps\FZ boss.asm"
0001A7BA                            ; ---------------------------------------------------------------------------
0001A7BA                            ; Sprite mappings - boss (FZ)
0001A7BA                            ; ---------------------------------------------------------------------------
0001A7BA 0000                       		dc.w byte_1A422-Map_FZBoss
0001A7BC 0000                       		dc.w byte_1A42D-Map_FZBoss
0001A7BE 0000                       		dc.w byte_1A43D-Map_FZBoss
0001A7C0 02                         byte_1A422:	dc.b 2
0001A7C1 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001A7C6 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001A7CB 03                         byte_1A42D:	dc.b 3
0001A7CC 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001A7D1 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001A7D6 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001A7DB 02                         byte_1A43D:	dc.b 2
0001A7DC 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001A7E1 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001A7E6                            		even
0001A7E6                            		even
0001A7E6                            
0001A7E6                            ; ===========================================================================
0001A7E6                            
0001A7E6                            Obj84_Delete:
0001A7E6 4EF9 0000 D99A             		jmp	DeleteObject
0001A7EC                            ; ===========================================================================
0001A7EC                            ; ---------------------------------------------------------------------------
0001A7EC                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001A7EC                            ; ---------------------------------------------------------------------------
0001A7EC                            
0001A7EC                            Obj84:					; XREF: Obj_Index
0001A7EC 7000                       		moveq	#0,d0
0001A7EE 1028 0024                  		move.b	$24(a0),d0
0001A7F2 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001A7F6 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001A7FA                            ; ===========================================================================
0001A7FA 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001A7FC 0000                       		dc.w loc_1A4CE-Obj84_Index
0001A7FE 0000                       		dc.w loc_1A57E-Obj84_Index
0001A800                            
0001A800 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001A804 2550 0620                  		dc.w $2550, $620
0001A808 2490 04C0                  		dc.w $2490, $4C0
0001A80C 2510 04C0                  		dc.w $2510, $4C0
0001A810                            ; ===========================================================================
0001A810                            
0001A810                            Obj84_Main:				; XREF: Obj84_Index
0001A810 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001A814 7000                       		moveq	#0,d0
0001A816 1028 0028                  		move.b	$28(a0),d0
0001A81A D040                       		add.w	d0,d0
0001A81C D2C0                       		adda.w	d0,a1
0001A81E 117C 0004 0001             		move.b	#4,1(a0)
0001A824 08E8 0007 0001             		bset	#7,1(a0)
0001A82A 08E8 0004 0001             		bset	#4,1(a0)
0001A830 317C 0300 0002             		move.w	#$300,2(a0)
0001A836 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001A83E 3159 0008                  		move.w	(a1)+,8(a0)
0001A842 3151 000C                  		move.w	(a1),$C(a0)
0001A846 3159 0038                  		move.w	(a1)+,$38(a0)
0001A84A 117C 0020 0016             		move.b	#$20,$16(a0)
0001A850 117C 0060 0017             		move.b	#$60,$17(a0)
0001A856 117C 0020 0019             		move.b	#$20,$19(a0)
0001A85C 117C 0060 0016             		move.b	#$60,$16(a0)
0001A862 117C 0003 0018             		move.b	#3,$18(a0)
0001A868 5428 0024                  		addq.b	#2,$24(a0)
0001A86C                            
0001A86C                            loc_1A4CE:				; XREF: Obj84_Index
0001A86C 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A872 6F00                       		ble.s	loc_1A4DC
0001A874 08E8 0001 0001             		bset	#1,1(a0)
0001A87A                            
0001A87A                            loc_1A4DC:
0001A87A 42A8 003C                  		clr.l	$3C(a0)
0001A87E 4A28 0029                  		tst.b	$29(a0)
0001A882 6700                       		beq.s	loc_1A4EA
0001A884 5428 0024                  		addq.b	#2,$24(a0)
0001A888                            
0001A888                            loc_1A4EA:
0001A888 2028 003C                  		move.l	$3C(a0),d0
0001A88C 2228 0038                  		move.l	$38(a0),d1
0001A890 D280                       		add.l	d0,d1
0001A892 4841                       		swap	d1
0001A894 3141 000C                  		move.w	d1,$C(a0)
0001A898 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001A89E 6600                       		bne.s	loc_1A524
0001A8A0 4A68 0030                  		tst.w	$30(a0)
0001A8A4 6A00                       		bpl.s	loc_1A524
0001A8A6 70F6                       		moveq	#-$A,d0
0001A8A8 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A8AE 6F00                       		ble.s	loc_1A514
0001A8B0 700E                       		moveq	#$E,d0
0001A8B2                            
0001A8B2                            loc_1A514:
0001A8B2 D240                       		add.w	d0,d1
0001A8B4 2268 0034                  		movea.l	$34(a0),a1
0001A8B8 3341 000C                  		move.w	d1,$C(a1)
0001A8BC 3368 0008 0008             		move.w	8(a0),8(a1)
0001A8C2                            
0001A8C2                            loc_1A524:
0001A8C2 323C 002B                  		move.w	#$2B,d1
0001A8C6 343C 0060                  		move.w	#$60,d2
0001A8CA 363C 0061                  		move.w	#$61,d3
0001A8CE 3828 0008                  		move.w	8(a0),d4
0001A8D2 4EB9 0000 FD2E             		jsr	SolidObject
0001A8D8 7000                       		moveq	#0,d0
0001A8DA 3228 003C                  		move.w	$3C(a0),d1
0001A8DE 6A00                       		bpl.s	loc_1A550
0001A8E0 4441                       		neg.w	d1
0001A8E2 5141                       		subq.w	#8,d1
0001A8E4 6500                       		bcs.s	loc_1A55C
0001A8E6 5200                       		addq.b	#1,d0
0001A8E8 E841                       		asr.w	#4,d1
0001A8EA D041                       		add.w	d1,d0
0001A8EC 6000                       		bra.s	loc_1A55C
0001A8EE                            ; ===========================================================================
0001A8EE                            
0001A8EE                            loc_1A550:
0001A8EE 0441 0027                  		subi.w	#$27,d1
0001A8F2 6500                       		bcs.s	loc_1A55C
0001A8F4 5200                       		addq.b	#1,d0
0001A8F6 E841                       		asr.w	#4,d1
0001A8F8 D041                       		add.w	d1,d0
0001A8FA                            
0001A8FA                            loc_1A55C:
0001A8FA 1140 001A                  		move.b	d0,$1A(a0)
0001A8FE 3038 D008                  		move.w	($FFFFD008).w,d0
0001A902 9068 0008                  		sub.w	8(a0),d0
0001A906 6B00                       		bmi.s	loc_1A578
0001A908 0440 0140                  		subi.w	#$140,d0
0001A90C 6B00                       		bmi.s	loc_1A578
0001A90E 4A28 0001                  		tst.b	1(a0)
0001A912 6A00 FED2                  		bpl.w	Obj84_Delete
0001A916                            
0001A916                            loc_1A578:
0001A916 4EF9 0000 D95E             		jmp	DisplaySprite
0001A91C                            ; ===========================================================================
0001A91C                            
0001A91C                            loc_1A57E:				; XREF: Obj84_Index
0001A91C 7000                       		moveq	#0,d0
0001A91E 1028 0028                  		move.b	$28(a0),d0
0001A922 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001A926 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001A92A 6000 FF5C                  		bra.w	loc_1A4EA
0001A92E                            ; ===========================================================================
0001A92E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001A930 0000                       		dc.w loc_1A598-off_1A590
0001A932 0000                       		dc.w loc_1A604-off_1A590
0001A934 0000                       		dc.w loc_1A604-off_1A590
0001A936                            ; ===========================================================================
0001A936                            
0001A936                            loc_1A598:				; XREF: off_1A590
0001A936 4A28 0029                  		tst.b	$29(a0)
0001A93A 6600                       		bne.s	loc_1A5D4
0001A93C 2268 0034                  		movea.l	$34(a0),a1
0001A940 4A29 0021                  		tst.b	$21(a1)
0001A944 6600                       		bne.s	loc_1A5B4
0001A946 6100 D2CA                  		bsr.w	BossDefeated
0001A94A 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001A952                            
0001A952                            loc_1A5B4:
0001A952 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001A95A 6400                       		bcc.s	locret_1A602
0001A95C 42A8 003C                  		clr.l	$3C(a0)
0001A960 2268 0034                  		movea.l	$34(a0),a1
0001A964 5369 0032                  		subq.w	#1,$32(a1)
0001A968 4269 0030                  		clr.w	$30(a1)
0001A96C 5528 0024                  		subq.b	#2,$24(a0)
0001A970 4E75                       		rts	
0001A972                            ; ===========================================================================
0001A972                            
0001A972                            loc_1A5D4:
0001A972 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001A978 6C00                       		bge.s	loc_1A5E4
0001A97A 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001A982                            
0001A982                            loc_1A5E4:
0001A982 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001A98A 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001A990 6E00                       		bgt.s	locret_1A602
0001A992 4268 003E                  		clr.w	$3E(a0)
0001A996 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001A99C 4228 0029                  		clr.b	$29(a0)
0001A9A0                            
0001A9A0                            locret_1A602:
0001A9A0 4E75                       		rts	
0001A9A2                            ; ===========================================================================
0001A9A2                            
0001A9A2                            loc_1A604:				; XREF: off_1A590
0001A9A2 08E8 0001 0001             		bset	#1,1(a0)
0001A9A8 4A28 0029                  		tst.b	$29(a0)
0001A9AC 6600                       		bne.s	loc_1A646
0001A9AE 2268 0034                  		movea.l	$34(a0),a1
0001A9B2 4A29 0021                  		tst.b	$21(a1)
0001A9B6 6600                       		bne.s	loc_1A626
0001A9B8 6100 D258                  		bsr.w	BossDefeated
0001A9BC 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001A9C4                            
0001A9C4                            loc_1A626:
0001A9C4 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001A9CC 6400                       		bcc.s	locret_1A674
0001A9CE 42A8 003C                  		clr.l	$3C(a0)
0001A9D2 2268 0034                  		movea.l	$34(a0),a1
0001A9D6 5369 0032                  		subq.w	#1,$32(a1)
0001A9DA 4269 0030                  		clr.w	$30(a1)
0001A9DE 5528 0024                  		subq.b	#2,$24(a0)
0001A9E2 4E75                       		rts	
0001A9E4                            ; ===========================================================================
0001A9E4                            
0001A9E4                            loc_1A646:
0001A9E4 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001A9EA 6D00                       		blt.s	loc_1A656
0001A9EC 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001A9F4                            
0001A9F4                            loc_1A656:
0001A9F4 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001A9FC 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AA02 6D00                       		blt.s	locret_1A674
0001AA04 4268 003E                  		clr.w	$3E(a0)
0001AA08 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AA0E 4228 0029                  		clr.b	$29(a0)
0001AA12                            
0001AA12                            locret_1A674:
0001AA12 4E75                       		rts	
0001AA14                            ; ===========================================================================
0001AA14                            ; ---------------------------------------------------------------------------
0001AA14                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AA14                            ; ---------------------------------------------------------------------------
0001AA14                            Map_obj84:
0001AA14                            	include "_maps\obj84.asm"
0001AA14                            ; ---------------------------------------------------------------------------
0001AA14                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AA14                            ; ---------------------------------------------------------------------------
0001AA14 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AA18 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AA1C 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AA20 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AA24 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AA28 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AA2C 06                         byte_1A68E:	dc.b 6
0001AA2D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AA32 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AA37 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AA3C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AA41 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AA46 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AA4B 08                         byte_1A6AD:	dc.b 8
0001AA4C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AA51 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AA56 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AA5B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AA60 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AA65 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AA6A D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AA6F D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AA74 0A                         byte_1A6D6:	dc.b $A
0001AA75 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AA7A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AA7F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AA84 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AA89 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AA8E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AA93 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AA98 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AA9D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AAA2 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AAA7 0C                         byte_1A709:	dc.b $C
0001AAA8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AAAD A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AAB2 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AAB7 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AABC B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AAC1 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AAC6 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AACB D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AAD0 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AAD5 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AADA 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AADF 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AAE4 0D                         byte_1A746:	dc.b $D
0001AAE5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AAEA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AAEF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AAF4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AAF9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AAFE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AB03 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AB08 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AB0D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AB12 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AB17 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AB1C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AB21 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AB26 0E                         byte_1A788:	dc.b $E
0001AB27 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AB2C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AB31 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AB36 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AB3B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AB40 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AB45 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AB4A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AB4F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AB54 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AB59 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AB5E 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AB63 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AB68 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001AB6D 02                         byte_1A7CF:	dc.b 2
0001AB6E F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001AB73 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001AB78                            		even
0001AB78                            		even
0001AB78                            
0001AB78                            ; ===========================================================================
0001AB78                            ; ---------------------------------------------------------------------------
0001AB78                            ; Object 86 - energy balls (FZ)
0001AB78                            ; ---------------------------------------------------------------------------
0001AB78                            
0001AB78                            Obj86:					; XREF: Obj_Index
0001AB78 7000                       		moveq	#0,d0
0001AB7A 1028 0024                  		move.b	$24(a0),d0
0001AB7E 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001AB82 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001AB86                            ; ===========================================================================
0001AB86 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001AB88 0000                       		dc.w Obj86_Generator-Obj86_Index
0001AB8A 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001AB8C 0000                       		dc.w loc_1A962-Obj86_Index
0001AB8E 0000                       		dc.w loc_1A982-Obj86_Index
0001AB90                            ; ===========================================================================
0001AB90                            
0001AB90                            Obj86_Main:				; XREF: Obj86_Index
0001AB90 317C 2588 0008             		move.w	#$2588,8(a0)
0001AB96 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AB9C 317C 0300 0002             		move.w	#$300,2(a0)
0001ABA2 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001ABAA 117C 0000 001C             		move.b	#0,$1C(a0)
0001ABB0 117C 0003 0018             		move.b	#3,$18(a0)
0001ABB6 117C 0008 0017             		move.b	#8,$17(a0)
0001ABBC 117C 0008 0016             		move.b	#8,$16(a0)
0001ABC2 117C 0004 0001             		move.b	#4,1(a0)
0001ABC8 08E8 0007 0001             		bset	#7,1(a0)
0001ABCE 5428 0024                  		addq.b	#2,$24(a0)
0001ABD2                            
0001ABD2                            Obj86_Generator:			; XREF: Obj86_Index
0001ABD2 2268 0034                  		movea.l	$34(a0),a1
0001ABD6 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001ABDC 6600                       		bne.s	loc_1A850
0001ABDE 10BC 003F                  		move.b	#$3F,(a0)
0001ABE2 117C 0000 0024             		move.b	#0,$24(a0)
0001ABE8 4EF9 0000 D95E             		jmp	DisplaySprite
0001ABEE                            ; ===========================================================================
0001ABEE                            
0001ABEE                            loc_1A850:
0001ABEE 117C 0000 001C             		move.b	#0,$1C(a0)
0001ABF4 4A28 0029                  		tst.b	$29(a0)
0001ABF8 6700                       		beq.s	loc_1A86C
0001ABFA 5428 0024                  		addq.b	#2,$24(a0)
0001ABFE 117C 0001 001C             		move.b	#1,$1C(a0)
0001AC04 117C 003E 0028             		move.b	#$3E,$28(a0)
0001AC0A                            
0001AC0A                            loc_1A86C:
0001AC0A 323C 0013                  		move.w	#$13,d1
0001AC0E 343C 0008                  		move.w	#8,d2
0001AC12 363C 0011                  		move.w	#$11,d3
0001AC16 3828 0008                  		move.w	8(a0),d4
0001AC1A 4EB9 0000 FD2E             		jsr	SolidObject
0001AC20 3038 D008                  		move.w	($FFFFD008).w,d0
0001AC24 9068 0008                  		sub.w	8(a0),d0
0001AC28 6B00                       		bmi.s	loc_1A89A
0001AC2A 0440 0140                  		subi.w	#$140,d0
0001AC2E 6B00                       		bmi.s	loc_1A89A
0001AC30 4A28 0001                  		tst.b	1(a0)
0001AC34 6A00 FBB0                  		bpl.w	Obj84_Delete
0001AC38                            
0001AC38                            loc_1A89A:
0001AC38 43FA 0000                  		lea	Ani_obj86(pc),a1
0001AC3C 4EB9 0000 AA10             		jsr	AnimateSprite
0001AC42 4EF9 0000 D95E             		jmp	DisplaySprite
0001AC48                            ; ===========================================================================
0001AC48                            
0001AC48                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001AC48 4A28 0029                  		tst.b	$29(a0)
0001AC4C 6700 0000                  		beq.w	loc_1A954
0001AC50 4228 0029                  		clr.b	$29(a0)
0001AC54 D068 0030                  		add.w	$30(a0),d0
0001AC58 0240 001E                  		andi.w	#$1E,d0
0001AC5C D4C0                       		adda.w	d0,a2
0001AC5E 5868 0030                  		addq.w	#4,$30(a0)
0001AC62 4268 0032                  		clr.w	$32(a0)
0001AC66 7403                       		moveq	#3,d2
0001AC68                            
0001AC68                            Obj86_Loop:
0001AC68 4EB9 0000 DDFA             		jsr	SingleObjLoad2
0001AC6E 6600 0000                  		bne.w	loc_1A954
0001AC72 12BC 0086                  		move.b	#$86,(a1)
0001AC76 3368 0008 0008             		move.w	8(a0),8(a1)
0001AC7C 337C 053C 000C             		move.w	#$53C,$C(a1)
0001AC82 137C 0008 0024             		move.b	#8,$24(a1)
0001AC88 337C 2300 0002             		move.w	#$2300,2(a1)
0001AC8E 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001AC96 137C 000C 0016             		move.b	#$C,$16(a1)
0001AC9C 137C 000C 0017             		move.b	#$C,$17(a1)
0001ACA2 137C 0000 0020             		move.b	#0,$20(a1)
0001ACA8 137C 0003 0018             		move.b	#3,$18(a1)
0001ACAE 337C 003E 0028             		move.w	#$3E,$28(a1)
0001ACB4 137C 0004 0001             		move.b	#4,1(a1)
0001ACBA 08E9 0007 0001             		bset	#7,1(a1)
0001ACC0 2348 0034                  		move.l	a0,$34(a1)
0001ACC4 4EB9 0000 2BD4             		jsr	(RandomNumber).l
0001ACCA 3228 0032                  		move.w	$32(a0),d1
0001ACCE C3FC FFB1                  		muls.w	#-$4F,d1
0001ACD2 0641 2578                  		addi.w	#$2578,d1
0001ACD6 0240 001F                  		andi.w	#$1F,d0
0001ACDA 0440 0010                  		subi.w	#$10,d0
0001ACDE D041                       		add.w	d1,d0
0001ACE0 3340 0030                  		move.w	d0,$30(a1)
0001ACE4 5268 0032                  		addq.w	#1,$32(a0)
0001ACE8 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001ACEE 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001ACF2                            
0001ACF2                            loc_1A954:
0001ACF2 4A68 0032                  		tst.w	$32(a0)
0001ACF6 6600                       		bne.s	loc_1A95E
0001ACF8 5428 0024                  		addq.b	#2,$24(a0)
0001ACFC                            
0001ACFC                            loc_1A95E:
0001ACFC 6000 FF0C                  		bra.w	loc_1A86C
0001AD00                            ; ===========================================================================
0001AD00                            
0001AD00                            loc_1A962:				; XREF: Obj86_Index
0001AD00 117C 0002 001C             		move.b	#2,$1C(a0)
0001AD06 4A68 0038                  		tst.w	$38(a0)
0001AD0A 6600                       		bne.s	loc_1A97E
0001AD0C 117C 0002 0024             		move.b	#2,$24(a0)
0001AD12 2268 0034                  		movea.l	$34(a0),a1
0001AD16 337C FFFF 0032             		move.w	#-1,$32(a1)
0001AD1C                            
0001AD1C                            loc_1A97E:
0001AD1C 6000 FEEC                  		bra.w	loc_1A86C
0001AD20                            ; ===========================================================================
0001AD20                            
0001AD20                            loc_1A982:				; XREF: Obj86_Index
0001AD20 7000                       		moveq	#0,d0
0001AD22 1028 0025                  		move.b	$25(a0),d0
0001AD26 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001AD2A 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001AD2E 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001AD32 4EB9 0000 AA10             		jsr	AnimateSprite
0001AD38 4EF9 0000 D95E             		jmp	DisplaySprite
0001AD3E                            ; ===========================================================================
0001AD3E 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001AD40 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001AD42 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001AD44                            ; ===========================================================================
0001AD44                            
0001AD44                            loc_1A9A6:				; XREF: Obj86_Index2
0001AD44 3028 0030                  		move.w	$30(a0),d0
0001AD48 9068 0008                  		sub.w	8(a0),d0
0001AD4C E940                       		asl.w	#4,d0
0001AD4E 3140 0010                  		move.w	d0,$10(a0)
0001AD52 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AD58 5428 0025                  		addq.b	#2,$25(a0)
0001AD5C 4E75                       		rts	
0001AD5E                            ; ===========================================================================
0001AD5E                            
0001AD5E                            loc_1A9C0:				; XREF: Obj86_Index2
0001AD5E 4A68 0010                  		tst.w	$10(a0)
0001AD62 6700                       		beq.s	loc_1A9E6
0001AD64 4EB9 0000 D938             		jsr	SpeedToPos
0001AD6A 3028 0008                  		move.w	8(a0),d0
0001AD6E 9068 0030                  		sub.w	$30(a0),d0
0001AD72 6400                       		bcc.s	loc_1A9E6
0001AD74 4268 0010                  		clr.w	$10(a0)
0001AD78 D168 0008                  		add.w	d0,8(a0)
0001AD7C 2268 0034                  		movea.l	$34(a0),a1
0001AD80 5369 0032                  		subq.w	#1,$32(a1)
0001AD84                            
0001AD84                            loc_1A9E6:
0001AD84 117C 0000 001C             		move.b	#0,$1C(a0)
0001AD8A 5368 0028                  		subq.w	#1,$28(a0)
0001AD8E 6600                       		bne.s	locret_1AA1C
0001AD90 5428 0025                  		addq.b	#2,$25(a0)
0001AD94 117C 0001 001C             		move.b	#1,$1C(a0)
0001AD9A 117C 009A 0020             		move.b	#$9A,$20(a0)
0001ADA0 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001ADA6 7000                       		moveq	#0,d0
0001ADA8 3038 D008                  		move.w	($FFFFD008).w,d0
0001ADAC 9068 0008                  		sub.w	8(a0),d0
0001ADB0 3140 0010                  		move.w	d0,$10(a0)
0001ADB4 317C 0140 0012             		move.w	#$140,$12(a0)
0001ADBA                            
0001ADBA                            locret_1AA1C:
0001ADBA 4E75                       		rts	
0001ADBC                            ; ===========================================================================
0001ADBC                            
0001ADBC                            loc_1AA1E:				; XREF: Obj86_Index2
0001ADBC 4EB9 0000 D938             		jsr	SpeedToPos
0001ADC2 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001ADC8 6400                       		bcc.s	loc_1AA34
0001ADCA 5368 0028                  		subq.w	#1,$28(a0)
0001ADCE 6700                       		beq.s	loc_1AA34
0001ADD0 4E75                       		rts	
0001ADD2                            ; ===========================================================================
0001ADD2                            
0001ADD2                            loc_1AA34:
0001ADD2 2268 0034                  		movea.l	$34(a0),a1
0001ADD6 5369 0038                  		subq.w	#1,$38(a1)
0001ADDA 6000 FA0A                  		bra.w	Obj84_Delete
0001ADDE                            ; ===========================================================================
0001ADDE                            Ani_obj86:
0001ADDE                            	include "_anim\obj86.asm"
0001ADDE                            ; ---------------------------------------------------------------------------
0001ADDE                            ; Animation script - energy ball launcher (FZ)
0001ADDE                            ; ---------------------------------------------------------------------------
0001ADDE 0000                       		dc.w byte_1AA46-Ani_obj86
0001ADE0 0000                       		dc.w byte_1AA4A-Ani_obj86
0001ADE2 0000                       		dc.w byte_1AA50-Ani_obj86
0001ADE4 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001ADE8 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001ADEE 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001ADF4                            		even
0001ADF4                            		even
0001ADF4                            
0001ADF4                            ; ---------------------------------------------------------------------------
0001ADF4                            ; Sprite mappings - energy ball	launcher (FZ)
0001ADF4                            ; ---------------------------------------------------------------------------
0001ADF4                            Map_obj86:
0001ADF4                            	include "_maps\obj86.asm"
0001ADF4                            ; ---------------------------------------------------------------------------
0001ADF4                            ; Sprite mappings - energy ball	launcher (FZ)
0001ADF4                            ; ---------------------------------------------------------------------------
0001ADF4 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001ADF8 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001ADFC 01                         byte_1AA5E:	dc.b 1
0001ADFD F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001AE02 01                         byte_1AA64:	dc.b 1
0001AE03 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001AE08 01                         byte_1AA6A:	dc.b 1
0001AE09 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001AE0E 01                         byte_1AA70:	dc.b 1
0001AE0F F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001AE14                            		even
0001AE14                            		even
0001AE14                            
0001AE14                            Ani_obj86a:
0001AE14                            	include "_anim\obj86a.asm"
0001AE14                            ; ---------------------------------------------------------------------------
0001AE14                            ; Animation script - energy balls (FZ)
0001AE14                            ; ---------------------------------------------------------------------------
0001AE14 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001AE16 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001AE18 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001AE27 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001AE36 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001AE3A 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001AE44                            		even
0001AE44                            		even
0001AE44                            
0001AE44                            ; ---------------------------------------------------------------------------
0001AE44                            ; Sprite mappings - energy balls (FZ)
0001AE44                            ; ---------------------------------------------------------------------------
0001AE44                            Map_obj86a:
0001AE44                            	include "_maps\obj86a.asm"
0001AE44                            ; ---------------------------------------------------------------------------
0001AE44                            ; Sprite mappings - energy balls (FZ)
0001AE44                            ; ---------------------------------------------------------------------------
0001AE44 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001AE48 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001AE4C 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001AE50 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001AE54 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001AE58 0000                       		dc.w byte_1AB20-Map_obj86a
0001AE5A 02                         byte_1AABC:	dc.b 2
0001AE5B F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001AE60 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001AE65 02                         byte_1AAC7:	dc.b 2
0001AE66 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001AE6B F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001AE70 02                         byte_1AAD2:	dc.b 2
0001AE71 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001AE76 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001AE7B 02                         byte_1AADD:	dc.b 2
0001AE7C F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001AE81 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001AE86 02                         byte_1AAE8:	dc.b 2
0001AE87 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001AE8C 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001AE91 02                         byte_1AAF3:	dc.b 2
0001AE92 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001AE97 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001AE9C 01                         byte_1AAFE:	dc.b 1
0001AE9D F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001AEA2 01                         byte_1AB04:	dc.b 1
0001AEA3 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001AEA8 02                         byte_1AB0A:	dc.b 2
0001AEA9 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001AEAE 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001AEB3 02                         byte_1AB15:	dc.b 2
0001AEB4 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001AEB9 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001AEBE 00                         byte_1AB20:	dc.b 0
0001AEC0 00                         		even
0001AEC0 00                         		even
0001AEC0                            
0001AEC0                            ; ===========================================================================
0001AEC0                            ; ---------------------------------------------------------------------------
0001AEC0                            ; Object 3E - prison capsule
0001AEC0                            ; ---------------------------------------------------------------------------
0001AEC0                            
0001AEC0                            Obj3E:					; XREF: Obj_Index
0001AEC0 7000                       		moveq	#0,d0
0001AEC2 1028 0024                  		move.b	$24(a0),d0
0001AEC6 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001AECA 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001AECE 3028 0008                  		move.w	8(a0),d0
0001AED2 0240 FF80                  		andi.w	#$FF80,d0
0001AED6 3238 F700                  		move.w	($FFFFF700).w,d1
0001AEDA 0441 0080                  		subi.w	#$80,d1
0001AEDE 0241 FF80                  		andi.w	#$FF80,d1
0001AEE2 9041                       		sub.w	d1,d0
0001AEE4 0C40 0280                  		cmpi.w	#$280,d0
0001AEE8 6200                       		bhi.s	Obj3E_Delete
0001AEEA 4EF9 0000 D95E             		jmp	DisplaySprite
0001AEF0                            ; ===========================================================================
0001AEF0                            
0001AEF0                            Obj3E_Delete:
0001AEF0 4EF9 0000 D99A             		jmp	DeleteObject
0001AEF6                            ; ===========================================================================
0001AEF6 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001AEF8 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001AEFA 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001AEFC 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AEFE 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AF00 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AF02 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001AF04 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001AF06                            
0001AF06 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001AF0A 040C 0501                  		dc.b 4,	$C, 5, 1
0001AF0E 0610 0403                  		dc.b 6,	$10, 4,	3
0001AF12 0810 0305                  		dc.b 8,	$10, 3,	5
0001AF16                            ; ===========================================================================
0001AF16                            
0001AF16                            Obj3E_Main:				; XREF: Obj3E_Index
0001AF16 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001AF1E 317C 049D 0002             		move.w	#$49D,2(a0)
0001AF24 117C 0004 0001             		move.b	#4,1(a0)
0001AF2A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001AF30 7000                       		moveq	#0,d0
0001AF32 1028 0028                  		move.b	$28(a0),d0
0001AF36 E548                       		lsl.w	#2,d0
0001AF38 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001AF3C 1159 0024                  		move.b	(a1)+,$24(a0)
0001AF40 1159 0019                  		move.b	(a1)+,$19(a0)
0001AF44 1159 0018                  		move.b	(a1)+,$18(a0)
0001AF48 1159 001A                  		move.b	(a1)+,$1A(a0)
0001AF4C 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001AF50 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001AF52 117C 0006 0020             		move.b	#6,$20(a0)
0001AF58 117C 0008 0021             		move.b	#8,$21(a0)
0001AF5E                            
0001AF5E                            Obj3E_Not02:
0001AF5E 4E75                       		rts	
0001AF60                            ; ===========================================================================
0001AF60                            
0001AF60                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001AF60 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001AF66 6700                       		beq.s	Obj3E_ChkOpened
0001AF68 323C 002B                  		move.w	#$2B,d1
0001AF6C 343C 0018                  		move.w	#$18,d2
0001AF70 363C 0018                  		move.w	#$18,d3
0001AF74 3828 0008                  		move.w	8(a0),d4
0001AF78 4EF9 0000 FD2E             		jmp	SolidObject
0001AF7E                            ; ===========================================================================
0001AF7E                            
0001AF7E                            Obj3E_ChkOpened:
0001AF7E 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001AF82 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001AF84 4228 0025                  		clr.b	$25(a0)
0001AF88 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AF8E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001AF94                            
0001AF94                            Obj3E_DoOpen:
0001AF94 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001AF9A 4E75                       		rts	
0001AF9C                            ; ===========================================================================
0001AF9C                            
0001AF9C                            Obj3E_Switched:				; XREF: Obj3E_Index
0001AF9C 323C 0017                  		move.w	#$17,d1
0001AFA0 343C 0008                  		move.w	#8,d2
0001AFA4 363C 0008                  		move.w	#8,d3
0001AFA8 3828 0008                  		move.w	8(a0),d4
0001AFAC 4EB9 0000 FD2E             		jsr	SolidObject
0001AFB2 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001AFB8 4EB9 0000 AA10             		jsr	AnimateSprite
0001AFBE 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001AFC4 4A28 0025                  		tst.b	$25(a0)
0001AFC8 6700                       		beq.s	locret_1AC60
0001AFCA 5068 000C                  		addq.w	#8,$C(a0)
0001AFCE 117C 000A 0024             		move.b	#$A,$24(a0)
0001AFD4 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001AFDA 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001AFDE 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001AFE2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001AFE8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001AFEE 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001AFF0 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001AFF6 6000                       		bra.s	Obj3E_ContinueCode
0001AFF8                            
0001AFF8                            Obj3E_MoveLeft:
0001AFF8 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001AFFE                            
0001AFFE                            Obj3E_ContinueCode:
0001AFFE 4228 0025                  		clr.b	$25(a0)
0001B002 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B008 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B00E                            
0001B00E                            locret_1AC60:
0001B00E 4E75                       		rts	
0001B010                            ; ===========================================================================
0001B010                            
0001B010                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B010 7007                       		moveq	#7,d0
0001B012 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B016 6600                       		bne.s	loc_1ACA0
0001B018 4EB9 0000 DDE4             		jsr	SingleObjLoad
0001B01E 6600                       		bne.s	loc_1ACA0
0001B020 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B024 3368 0008 0008             		move.w	8(a0),8(a1)
0001B02A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B030 4EB9 0000 2BD4             		jsr	(RandomNumber).l
0001B036 7200                       		moveq	#0,d1
0001B038 1200                       		move.b	d0,d1
0001B03A E409                       		lsr.b	#2,d1
0001B03C 0441 0020                  		subi.w	#$20,d1
0001B040 D369 0008                  		add.w	d1,8(a1)
0001B044 E048                       		lsr.w	#8,d0
0001B046 E608                       		lsr.b	#3,d0
0001B048 D169 000C                  		add.w	d0,$C(a1)
0001B04C                            
0001B04C                            loc_1ACA0:
0001B04C 5368 001E                  		subq.w	#1,$1E(a0)
0001B050 6700                       		beq.s	Obj3E_MakeAnimal
0001B052 4E75                       		rts	
0001B054                            ; ===========================================================================
0001B054                            
0001B054                            Obj3E_MakeAnimal:
0001B054 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B05A 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B060 117C 0006 001A             		move.b	#6,$1A(a0)
0001B066 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B06C 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B072 7C07                       		moveq	#7,d6
0001B074 3A3C 009A                  		move.w	#$9A,d5
0001B078 78E4                       		moveq	#-$1C,d4
0001B07A                            
0001B07A                            Obj3E_Loop:
0001B07A 4EB9 0000 DDE4             		jsr	SingleObjLoad
0001B080 6600                       		bne.s	locret_1ACF8
0001B082 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B086 3368 0008 0008             		move.w	8(a0),8(a1)
0001B08C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B092 D969 0008                  		add.w	d4,8(a1)
0001B096 5E44                       		addq.w	#7,d4
0001B098 3345 0036                  		move.w	d5,$36(a1)
0001B09C 5145                       		subq.w	#8,d5
0001B09E 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B0A2                            
0001B0A2                            locret_1ACF8:
0001B0A2 4E75                       		rts	
0001B0A4                            ; ===========================================================================
0001B0A4                            
0001B0A4                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B0A4 7007                       		moveq	#7,d0
0001B0A6 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B0AA 6600                       		bne.s	loc_1AD38
0001B0AC 4EB9 0000 DDE4             		jsr	SingleObjLoad
0001B0B2 6600                       		bne.s	loc_1AD38
0001B0B4 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B0B8 3368 0008 0008             		move.w	8(a0),8(a1)
0001B0BE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B0C4 4EB9 0000 2BD4             		jsr	(RandomNumber).l
0001B0CA 0240 001F                  		andi.w	#$1F,d0
0001B0CE 5D40                       		subq.w	#6,d0
0001B0D0 4A41                       		tst.w	d1
0001B0D2 6A00                       		bpl.s	loc_1AD2E
0001B0D4 4440                       		neg.w	d0
0001B0D6                            
0001B0D6                            loc_1AD2E:
0001B0D6 D169 0008                  		add.w	d0,8(a1)
0001B0DA 337C 000C 0036             		move.w	#$C,$36(a1)
0001B0E0                            
0001B0E0                            loc_1AD38:
0001B0E0 5368 001E                  		subq.w	#1,$1E(a0)
0001B0E4 6600                       		bne.s	locret_1AD48
0001B0E6 5428 0024                  		addq.b	#2,$24(a0)
0001B0EA 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B0F0                            
0001B0F0                            locret_1AD48:
0001B0F0 4E75                       		rts	
0001B0F2                            ; ===========================================================================
0001B0F2                            
0001B0F2                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B0F2 703E                       		moveq	#$3E,d0
0001B0F4 7228                       		moveq	#$28,d1
0001B0F6 7440                       		moveq	#$40,d2
0001B0F8 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B0FC                            
0001B0FC                            Obj3E_FindObj28:
0001B0FC B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B0FE 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B100 D2C2                       		adda.w	d2,a1		; next object RAM
0001B102 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B106                            
0001B106 4EB9 0000 EFEA             		jsr	GotThroughAct
0001B10C 4EF9 0000 D99A             		jmp	DeleteObject
0001B112                            ; ===========================================================================
0001B112                            
0001B112                            Obj3E_Obj28Found:
0001B112 4E75                       		rts	
0001B114                            ; ===========================================================================
0001B114                            Ani_obj3E:
0001B114                            	include "_anim\obj3E.asm"
0001B114                            ; ---------------------------------------------------------------------------
0001B114                            ; Animation script - prison capsule
0001B114                            ; ---------------------------------------------------------------------------
0001B114 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B116 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B118 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B11C                            		even
0001B11C                            		even
0001B11C                            
0001B11C                            ; ---------------------------------------------------------------------------
0001B11C                            ; Sprite mappings - prison capsule
0001B11C                            ; ---------------------------------------------------------------------------
0001B11C                            Map_obj3E:
0001B11C                            	include "_maps\obj3E.asm"
0001B11C                            ; ---------------------------------------------------------------------------
0001B11C                            ; Sprite mappings - prison capsule
0001B11C                            ; ---------------------------------------------------------------------------
0001B11C 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B120 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B124 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B128 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B12A 07                         byte_1AD82:	dc.b 7
0001B12B E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B130 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B135 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B13A F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B13F F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B144 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B149 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B14E 01                         byte_1ADA6:	dc.b 1
0001B14F F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B154 06                         byte_1ADAC:	dc.b 6
0001B155 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B15A 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B15F 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B164 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B169 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B16E 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B173 01                         byte_1ADCB:	dc.b 1
0001B174 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B179 02                         byte_1ADD1:	dc.b 2
0001B17A E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B17F 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B184 01                         byte_1ADDC:	dc.b 1
0001B185 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B18A 00                         byte_1ADE2:	dc.b 0
0001B18C 00                         		even
0001B18C 00                         		even
0001B18C                            
0001B18C                            ; ---------------------------------------------------------------------------
0001B18C                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B18C                            ; ---------------------------------------------------------------------------
0001B18C                            
0001B18C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B18C                            
0001B18C                            
0001B18C                            TouchResponse:				; XREF: Obj01
0001B18C 4E71                       		nop	
0001B18E 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B192 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B196 5142                       		subq.w	#8,d2
0001B198 7A00                       		moveq	#0,d5
0001B19A 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B19E 5705                       		subq.b	#3,d5
0001B1A0 9645                       		sub.w	d5,d3
0001B1A2 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B1A8 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B1AA 0643 000C                  		addi.w	#$C,d3
0001B1AE 7A0A                       		moveq	#$A,d5
0001B1B0                            
0001B1B0                            Touch_NoDuck:
0001B1B0 383C 0010                  		move.w	#$10,d4
0001B1B4 DA45                       		add.w	d5,d5
0001B1B6 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B1BA 3C3C 005F                  		move.w	#$5F,d6
0001B1BE                            
0001B1BE                            Touch_Loop:
0001B1BE 4A29 0001                  		tst.b	1(a1)
0001B1C2 6A00                       		bpl.s	Touch_NextObj
0001B1C4 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B1C8 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B1CA                            
0001B1CA                            Touch_NextObj:
0001B1CA 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B1CE 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B1D2                            
0001B1D2 7000                       		moveq	#0,d0
0001B1D4 4E75                       		rts	
0001B1D6                            ; ===========================================================================
0001B1D6 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B1D8 0C14                       		dc.b   $C, $14
0001B1DA 140C                       		dc.b  $14,  $C
0001B1DC 0410                       		dc.b	4, $10
0001B1DE 0C12                       		dc.b   $C, $12
0001B1E0 1010                       		dc.b  $10, $10
0001B1E2 0606                       		dc.b	6,   6
0001B1E4 180C                       		dc.b  $18,  $C
0001B1E6 0C10                       		dc.b   $C, $10
0001B1E8 100C                       		dc.b  $10,  $C
0001B1EA 0808                       		dc.b	8,   8
0001B1EC 1410                       		dc.b  $14, $10
0001B1EE 1408                       		dc.b  $14,   8
0001B1F0 0E0E                       		dc.b   $E,  $E
0001B1F2 1818                       		dc.b  $18, $18
0001B1F4 2810                       		dc.b  $28, $10
0001B1F6 1018                       		dc.b  $10, $18
0001B1F8 0810                       		dc.b	8, $10
0001B1FA 2070                       		dc.b  $20, $70
0001B1FC 4020                       		dc.b  $40, $20
0001B1FE 8020                       		dc.b  $80, $20
0001B200 2020                       		dc.b  $20, $20
0001B202 0808                       		dc.b	8,   8
0001B204 0404                       		dc.b	4,   4
0001B206 2008                       		dc.b  $20,   8
0001B208 0C0C                       		dc.b   $C,  $C
0001B20A 0804                       		dc.b	8,   4
0001B20C 1804                       		dc.b  $18,   4
0001B20E 2804                       		dc.b  $28,   4
0001B210 0408                       		dc.b	4,   8
0001B212 0418                       		dc.b	4, $18
0001B214 0428                       		dc.b	4, $28
0001B216 0420                       		dc.b	4, $20
0001B218 1818                       		dc.b  $18, $18
0001B21A 0C18                       		dc.b   $C, $18
0001B21C 4808                       		dc.b  $48,   8
0001B21E                            ; ===========================================================================
0001B21E                            
0001B21E                            Touch_Height:				; XREF: TouchResponse
0001B21E 0240 003F                  		andi.w	#$3F,d0
0001B222 D040                       		add.w	d0,d0
0001B224 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B228 7200                       		moveq	#0,d1
0001B22A 121A                       		move.b	(a2)+,d1
0001B22C 3029 0008                  		move.w	8(a1),d0
0001B230 9041                       		sub.w	d1,d0
0001B232 9042                       		sub.w	d2,d0
0001B234 6400                       		bcc.s	loc_1AE98
0001B236 D241                       		add.w	d1,d1
0001B238 D041                       		add.w	d1,d0
0001B23A 6500                       		bcs.s	Touch_Width
0001B23C 6000 FF8C                  		bra.w	Touch_NextObj
0001B240                            ; ===========================================================================
0001B240                            
0001B240                            loc_1AE98:
0001B240 B044                       		cmp.w	d4,d0
0001B242 6200 FF86                  		bhi.w	Touch_NextObj
0001B246                            
0001B246                            Touch_Width:
0001B246 7200                       		moveq	#0,d1
0001B248 121A                       		move.b	(a2)+,d1
0001B24A 3029 000C                  		move.w	$C(a1),d0
0001B24E 9041                       		sub.w	d1,d0
0001B250 9043                       		sub.w	d3,d0
0001B252 6400                       		bcc.s	loc_1AEB6
0001B254 D241                       		add.w	d1,d1
0001B256 D240                       		add.w	d0,d1
0001B258 6500                       		bcs.s	Touch_ChkValue
0001B25A 6000 FF6E                  		bra.w	Touch_NextObj
0001B25E                            ; ===========================================================================
0001B25E                            
0001B25E                            loc_1AEB6:
0001B25E B045                       		cmp.w	d5,d0
0001B260 6200 FF68                  		bhi.w	Touch_NextObj
0001B264                            
0001B264                            Touch_ChkValue:
0001B264 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B268 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B26C 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B270 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B274 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B278 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B27A 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B27E                            
0001B27E                            ; touch	response is $40-$7F
0001B27E                            
0001B27E 1029 0020                  		move.b	$20(a1),d0
0001B282 0200 003F                  		andi.b	#$3F,d0
0001B286 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B28A 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B28C 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B292 6400 0000                  		bcc.w	locret_1AEF2
0001B296 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B29A                            
0001B29A                            locret_1AEF2:
0001B29A 4E75                       		rts	
0001B29C                            ; ===========================================================================
0001B29C                            
0001B29C                            Touch_Monitor:
0001B29C 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B2A0 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B2A2 3028 000C                  		move.w	$C(a0),d0
0001B2A6 0440 0010                  		subi.w	#$10,d0
0001B2AA B069 000C                  		cmp.w	$C(a1),d0
0001B2AE 6500                       		bcs.s	locret_1AF2E
0001B2B0 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B2B4 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B2BA 4A29 0025                  		tst.b	$25(a1)
0001B2BE 6600                       		bne.s	locret_1AF2E
0001B2C0 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B2C4 4E75                       		rts	
0001B2C6                            ; ===========================================================================
0001B2C6                            
0001B2C6                            loc_1AF1E:
0001B2C6 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B2CC 6600                       		bne.s	locret_1AF2E
0001B2CE 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B2D2 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B2D6                            
0001B2D6                            locret_1AF2E:
0001B2D6 4E75                       		rts	
0001B2D8                            ; ===========================================================================
0001B2D8                            
0001B2D8                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B2D8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B2DC 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B2DE 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B2E4 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B2E8                            
0001B2E8                            loc_1AF40:
0001B2E8 4A29 0021                  		tst.b	$21(a1)
0001B2EC 6700                       		beq.s	Touch_KillEnemy
0001B2EE 4468 0010                  		neg.w	$10(a0)
0001B2F2 4468 0012                  		neg.w	$12(a0)
0001B2F6 E0E8 0010                  		asr	$10(a0)
0001B2FA E0E8 0012                  		asr	$12(a0)
0001B2FE 137C 0000 0020             		move.b	#0,$20(a1)
0001B304 5329 0021                  		subq.b	#1,$21(a1)
0001B308 6600                       		bne.s	locret_1AF68
0001B30A 08E9 0007 0022             		bset	#7,$22(a1)
0001B310                            
0001B310                            locret_1AF68:
0001B310 4E75                       		rts	
0001B312                            ; ===========================================================================
0001B312                            
0001B312                            Touch_KillEnemy:
0001B312 08E9 0007 0022             		bset	#7,$22(a1)
0001B318 7000                       		moveq	#0,d0
0001B31A 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B31E 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B322 0C40 0006                  		cmpi.w	#6,d0
0001B326 6500                       		bcs.s	loc_1AF82
0001B328 7006                       		moveq	#6,d0
0001B32A                            
0001B32A                            loc_1AF82:
0001B32A 3340 003E                  		move.w	d0,$3E(a1)
0001B32E 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B332 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B338 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B33A 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B33E 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B344                            
0001B344                            loc_1AF9C:
0001B344 6100 0000                  		bsr.w	AddPoints
0001B348 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B34C 137C 0000 0024             		move.b	#0,$24(a1)
0001B352 4A68 0012                  		tst.w	$12(a0)
0001B356 6B00                       		bmi.s	loc_1AFC2
0001B358 3028 000C                  		move.w	$C(a0),d0
0001B35C B069 000C                  		cmp.w	$C(a1),d0
0001B360 6400                       		bcc.s	loc_1AFCA
0001B362 4468 0012                  		neg.w	$12(a0)
0001B366 4E75                       		rts	
0001B368                            ; ===========================================================================
0001B368                            
0001B368                            loc_1AFC2:
0001B368 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B36E 4E75                       		rts	
0001B370                            ; ===========================================================================
0001B370                            
0001B370                            loc_1AFCA:
0001B370 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B376 4E75                       		rts	
0001B378                            ; ===========================================================================
0001B378 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B380                            ; ===========================================================================
0001B380                            
0001B380                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B380 08E9 0007 0022             		bset	#7,$22(a1)
0001B386                            
0001B386                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B386 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B38A 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B38C                            
0001B38C                            loc_1AFE6:				; XREF: Touch_Hurt
0001B38C 70FF                       		moveq	#-1,d0
0001B38E 4E75                       		rts	
0001B390                            ; ===========================================================================
0001B390                            
0001B390                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B390 4E71                       		nop	
0001B392 4A68 0030                  		tst.w	$30(a0)
0001B396 66F4                       		bne.s	loc_1AFE6
0001B398 2449                       		movea.l	a1,a2
0001B39A                            
0001B39A                            ; End of function TouchResponse
0001B39A                            ; continue straight to HurtSonic
0001B39A                            
0001B39A                            ; ---------------------------------------------------------------------------
0001B39A                            ; Hurting Sonic	subroutine
0001B39A                            ; ---------------------------------------------------------------------------
0001B39A                            
0001B39A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B39A                            
0001B39A                            
0001B39A                            HurtSonic:
0001B39A 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B39E 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B3A0 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B3A4 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B3A8 4EB9 0000 DDE4             		jsr	SingleObjLoad
0001B3AE 6600                       		bne.s	Hurt_Shield
0001B3B0 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B3B4 3368 0008 0008             		move.w	8(a0),8(a1)
0001B3BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B3C0                            
0001B3C0                            Hurt_Shield:
0001B3C0 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B3C6 117C 0004 0024             		move.b	#4,$24(a0)
0001B3CC 6100 8772                  		bsr.w	Sonic_ResetOnFloor
0001B3D0 08E8 0001 0022             		bset	#1,$22(a0)
0001B3D6 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B3DC 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B3E2 0828 0006 0022             		btst	#6,$22(a0)
0001B3E8 6700                       		beq.s	Hurt_Reverse
0001B3EA 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B3F0 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B3F6                            
0001B3F6                            Hurt_Reverse:
0001B3F6 3028 0008                  		move.w	8(a0),d0
0001B3FA B06A 0008                  		cmp.w	8(a2),d0
0001B3FE 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B400 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B404                            
0001B404                            Hurt_ChkSpikes:
0001B404 317C 0000 0014             		move.w	#0,$14(a0)
0001B40A 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B410 317C 0078 0030             		move.w	#$78,$30(a0)
0001B416 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B41A 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B41E 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B420 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B424 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B426 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B42A                            
0001B42A                            Hurt_Sound:
0001B42A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B430 70FF                       		moveq	#-1,d0
0001B432 4E75                       		rts	
0001B434                            ; ===========================================================================
0001B434                            
0001B434                            Hurt_NoRings:
0001B434 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B438 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B43C                            ; End of function HurtSonic
0001B43C                            
0001B43C                            ; ---------------------------------------------------------------------------
0001B43C                            ; Subroutine to	kill Sonic
0001B43C                            ; ---------------------------------------------------------------------------
0001B43C                            
0001B43C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B43C                            
0001B43C                            
0001B43C                            KillSonic:
0001B43C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B440 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B442 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B448 117C 0006 0024             		move.b	#6,$24(a0)
0001B44E 6100 86F0                  		bsr.w	Sonic_ResetOnFloor
0001B452 08E8 0001 0022             		bset	#1,$22(a0)
0001B458 317C F900 0012             		move.w	#-$700,$12(a0)
0001B45E 317C 0000 0010             		move.w	#0,$10(a0)
0001B464 317C 0000 0014             		move.w	#0,$14(a0)
0001B46A 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B470 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B476 08E8 0007 0002             		bset	#7,2(a0)
0001B47C 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B480 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B484 6600                       		bne.s	Kill_Sound
0001B486 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B48A                            
0001B48A                            Kill_Sound:
0001B48A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B490                            
0001B490                            Kill_NoDeath:
0001B490 70FF                       		moveq	#-1,d0
0001B492 4E75                       		rts	
0001B494                            ; End of function KillSonic
0001B494                            
0001B494                            
0001B494                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B494                            
0001B494                            
0001B494                            Touch_Special:				; XREF: Touch_ChkValue
0001B494 1229 0020                  		move.b	$20(a1),d1
0001B498 0201 003F                  		andi.b	#$3F,d1
0001B49C 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B4A0 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B4A2 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B4A6 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B4A8 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B4AC 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B4AE 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B4B2 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B4B4 4E75                       		rts	
0001B4B6                            ; ===========================================================================
0001B4B6                            
0001B4B6                            Touch_CatKiller:			; XREF: Touch_Special
0001B4B6 6000 FEC8                  		bra.w	loc_1AFDA
0001B4BA                            ; ===========================================================================
0001B4BA                            
0001B4BA                            Touch_Yadrin:				; XREF: Touch_Special
0001B4BA 9A40                       		sub.w	d0,d5
0001B4BC 0C45 0008                  		cmpi.w	#8,d5
0001B4C0 6400                       		bcc.s	loc_1B144
0001B4C2 3029 0008                  		move.w	8(a1),d0
0001B4C6 5940                       		subq.w	#4,d0
0001B4C8 0829 0000 0022             		btst	#0,$22(a1)
0001B4CE 6700                       		beq.s	loc_1B130
0001B4D0 0440 0010                  		subi.w	#$10,d0
0001B4D4                            
0001B4D4                            loc_1B130:
0001B4D4 9042                       		sub.w	d2,d0
0001B4D6 6400                       		bcc.s	loc_1B13C
0001B4D8 0640 0018                  		addi.w	#$18,d0
0001B4DC 6500                       		bcs.s	loc_1B140
0001B4DE 6000                       		bra.s	loc_1B144
0001B4E0                            ; ===========================================================================
0001B4E0                            
0001B4E0                            loc_1B13C:
0001B4E0 B044                       		cmp.w	d4,d0
0001B4E2 6200                       		bhi.s	loc_1B144
0001B4E4                            
0001B4E4                            loc_1B140:
0001B4E4 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B4E8                            ; ===========================================================================
0001B4E8                            
0001B4E8                            loc_1B144:
0001B4E8 6000 FDEE                  		bra.w	Touch_Enemy
0001B4EC                            ; ===========================================================================
0001B4EC                            
0001B4EC                            Touch_D7orE1:				; XREF: Touch_Special
0001B4EC 5229 0021                  		addq.b	#1,$21(a1)
0001B4F0 4E75                       		rts	
0001B4F2                            ; End of function Touch_Special
0001B4F2                            
0001B4F2                            ; ---------------------------------------------------------------------------
0001B4F2                            ; Subroutine to	show the special stage layout
0001B4F2                            ; ---------------------------------------------------------------------------
0001B4F2                            
0001B4F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B4F2                            
0001B4F2                            
0001B4F2                            SS_ShowLayout:				; XREF: SpecialStage
0001B4F2 6100 0000                  		bsr.w	SS_AniWallsRings
0001B4F6 6100 0000                  		bsr.w	SS_AniItems
0001B4FA 3F05                       		move.w	d5,-(sp)
0001B4FC 43F8 8000                  		lea	($FFFF8000).w,a1
0001B500 1038 F780                  		move.b	($FFFFF780).w,d0
0001B504 0200 00FC                  		andi.b	#$FC,d0
0001B508 4EB9 0000 2BFA             		jsr	(CalcSine).l
0001B50E 3800                       		move.w	d0,d4
0001B510 3A01                       		move.w	d1,d5
0001B512 C9FC 0018                  		muls.w	#$18,d4
0001B516 CBFC 0018                  		muls.w	#$18,d5
0001B51A 7400                       		moveq	#0,d2
0001B51C 3438 F700                  		move.w	($FFFFF700).w,d2
0001B520 84FC 0018                  		divu.w	#$18,d2
0001B524 4842                       		swap	d2
0001B526 4442                       		neg.w	d2
0001B528 0642 FF4C                  		addi.w	#-$B4,d2
0001B52C 7600                       		moveq	#0,d3
0001B52E 3638 F704                  		move.w	($FFFFF704).w,d3
0001B532 86FC 0018                  		divu.w	#$18,d3
0001B536 4843                       		swap	d3
0001B538 4443                       		neg.w	d3
0001B53A 0643 FF4C                  		addi.w	#-$B4,d3
0001B53E 3E3C 000F                  		move.w	#$F,d7
0001B542                            
0001B542                            loc_1B19E:
0001B542 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B546 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B54A 4440                       		neg.w	d0
0001B54C C3C2                       		muls.w	d2,d1
0001B54E C1C3                       		muls.w	d3,d0
0001B550 2C00                       		move.l	d0,d6
0001B552 DC81                       		add.l	d1,d6
0001B554 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B558 C1C2                       		muls.w	d2,d0
0001B55A C3C3                       		muls.w	d3,d1
0001B55C D280                       		add.l	d0,d1
0001B55E 2406                       		move.l	d6,d2
0001B560 3C3C 000F                  		move.w	#$F,d6
0001B564                            
0001B564                            loc_1B1C0:
0001B564 2002                       		move.l	d2,d0
0001B566 E080                       		asr.l	#8,d0
0001B568 32C0                       		move.w	d0,(a1)+
0001B56A 2001                       		move.l	d1,d0
0001B56C E080                       		asr.l	#8,d0
0001B56E 32C0                       		move.w	d0,(a1)+
0001B570 D485                       		add.l	d5,d2
0001B572 D284                       		add.l	d4,d1
0001B574 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B578                            
0001B578 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B57C 0643 0018                  		addi.w	#$18,d3
0001B580 51CF FFC0                  		dbf	d7,loc_1B19E
0001B584                            
0001B584 3A1F                       		move.w	(sp)+,d5
0001B586 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B58C 7000                       		moveq	#0,d0
0001B58E 3038 F704                  		move.w	($FFFFF704).w,d0
0001B592 80FC 0018                  		divu.w	#$18,d0
0001B596 C0FC 0080                  		mulu.w	#$80,d0
0001B59A D1C0                       		adda.l	d0,a0
0001B59C 7000                       		moveq	#0,d0
0001B59E 3038 F700                  		move.w	($FFFFF700).w,d0
0001B5A2 80FC 0018                  		divu.w	#$18,d0
0001B5A6 D0C0                       		adda.w	d0,a0
0001B5A8 49F8 8000                  		lea	($FFFF8000).w,a4
0001B5AC 3E3C 000F                  		move.w	#$F,d7
0001B5B0                            
0001B5B0                            loc_1B20C:
0001B5B0 3C3C 000F                  		move.w	#$F,d6
0001B5B4                            
0001B5B4                            loc_1B210:
0001B5B4 7000                       		moveq	#0,d0
0001B5B6 1018                       		move.b	(a0)+,d0
0001B5B8 6700                       		beq.s	loc_1B268
0001B5BA 0C00 004E                  		cmpi.b	#$4E,d0
0001B5BE 6200                       		bhi.s	loc_1B268
0001B5C0 3614                       		move.w	(a4),d3
0001B5C2 0643 0120                  		addi.w	#$120,d3
0001B5C6 0C43 0070                  		cmpi.w	#$70,d3
0001B5CA 6500                       		bcs.s	loc_1B268
0001B5CC 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B5D0 6400                       		bcc.s	loc_1B268
0001B5D2 342C 0002                  		move.w	2(a4),d2
0001B5D6 0642 00F0                  		addi.w	#$F0,d2
0001B5DA 0C42 0070                  		cmpi.w	#$70,d2
0001B5DE 6500                       		bcs.s	loc_1B268
0001B5E0 0C42 0170                  		cmpi.w	#$170,d2
0001B5E4 6400                       		bcc.s	loc_1B268
0001B5E6 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B5EC E748                       		lsl.w	#3,d0
0001B5EE 4BF5 0000                  		lea	(a5,d0.w),a5
0001B5F2 225D                       		movea.l	(a5)+,a1
0001B5F4 321D                       		move.w	(a5)+,d1
0001B5F6 D241                       		add.w	d1,d1
0001B5F8 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B5FC 365D                       		movea.w	(a5)+,a3
0001B5FE 7200                       		moveq	#0,d1
0001B600 1219                       		move.b	(a1)+,d1
0001B602 5301                       		subq.b	#1,d1
0001B604 6B00                       		bmi.s	loc_1B268
0001B606 4EB9 0000 DABC             		jsr	sub_D762
0001B60C                            
0001B60C                            loc_1B268:
0001B60C 584C                       		addq.w	#4,a4
0001B60E 51CE FFA4                  		dbf	d6,loc_1B210
0001B612                            
0001B612 41E8 0070                  		lea	$70(a0),a0
0001B616 51CF FF98                  		dbf	d7,loc_1B20C
0001B61A                            
0001B61A 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B61E 0C05 0050                  		cmpi.b	#$50,d5
0001B622 6700                       		beq.s	loc_1B288
0001B624 24BC 0000 0000             		move.l	#0,(a2)
0001B62A 4E75                       		rts	
0001B62C                            ; ===========================================================================
0001B62C                            
0001B62C                            loc_1B288:
0001B62C 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B632 4E75                       		rts	
0001B634                            ; End of function SS_ShowLayout
0001B634                            
0001B634                            ; ---------------------------------------------------------------------------
0001B634                            ; Subroutine to	animate	walls and rings	in the special stage
0001B634                            ; ---------------------------------------------------------------------------
0001B634                            
0001B634                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B634                            
0001B634                            
0001B634                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B634 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B63A 7000                       		moveq	#0,d0
0001B63C 1038 F780                  		move.b	($FFFFF780).w,d0
0001B640 E408                       		lsr.b	#2,d0
0001B642 0240 000F                  		andi.w	#$F,d0
0001B646 7223                       		moveq	#$23,d1
0001B648                            
0001B648                            loc_1B2A4:
0001B648 3280                       		move.w	d0,(a1)
0001B64A 5049                       		addq.w	#8,a1
0001B64C 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B650                            
0001B650 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B656 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B65A 6A00                       		bpl.s	loc_1B2C8
0001B65C 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B662 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B666 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B66C                            
0001B66C                            loc_1B2C8:
0001B66C 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B672 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B676 6A00                       		bpl.s	loc_1B2E4
0001B678 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B67E 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B682 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B688                            
0001B688                            loc_1B2E4:
0001B688 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B68C 1340 0138                  		move.b	d0,$138(a1)
0001B690 1340 0160                  		move.b	d0,$160(a1)
0001B694 1340 0148                  		move.b	d0,$148(a1)
0001B698 1340 0150                  		move.b	d0,$150(a1)
0001B69C 1340 01D8                  		move.b	d0,$1D8(a1)
0001B6A0 1340 01E0                  		move.b	d0,$1E0(a1)
0001B6A4 1340 01E8                  		move.b	d0,$1E8(a1)
0001B6A8 1340 01F0                  		move.b	d0,$1F0(a1)
0001B6AC 1340 01F8                  		move.b	d0,$1F8(a1)
0001B6B0 1340 0200                  		move.b	d0,$200(a1)
0001B6B4 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B6B8 6A00                       		bpl.s	loc_1B326
0001B6BA 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B6C0 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B6C4 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B6CA                            
0001B6CA                            loc_1B326:
0001B6CA 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B6CE 1340 0168                  		move.b	d0,$168(a1)
0001B6D2 1340 0170                  		move.b	d0,$170(a1)
0001B6D6 1340 0178                  		move.b	d0,$178(a1)
0001B6DA 1340 0180                  		move.b	d0,$180(a1)
0001B6DE 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B6E2 6A00                       		bpl.s	loc_1B350
0001B6E4 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B6EA 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B6EE 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B6F4                            
0001B6F4                            loc_1B350:
0001B6F4 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B6FA 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B700 7000                       		moveq	#0,d0
0001B702 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B706 D040                       		add.w	d0,d0
0001B708 41F0 0000                  		lea	(a0,d0.w),a0
0001B70C 3290                       		move.w	(a0),(a1)
0001B70E 3368 0002 0008             		move.w	2(a0),8(a1)
0001B714 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B71A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B720 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B726 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B72C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B732 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B738 D0FC 0020                  		adda.w	#$20,a0
0001B73C D2FC 0048                  		adda.w	#$48,a1
0001B740 3290                       		move.w	(a0),(a1)
0001B742 3368 0002 0008             		move.w	2(a0),8(a1)
0001B748 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B74E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B754 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B75A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B760 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B766 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B76C D0FC 0020                  		adda.w	#$20,a0
0001B770 D2FC 0048                  		adda.w	#$48,a1
0001B774 3290                       		move.w	(a0),(a1)
0001B776 3368 0002 0008             		move.w	2(a0),8(a1)
0001B77C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B782 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B788 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B78E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B794 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B79A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B7A0 D0FC 0020                  		adda.w	#$20,a0
0001B7A4 D2FC 0048                  		adda.w	#$48,a1
0001B7A8 3290                       		move.w	(a0),(a1)
0001B7AA 3368 0002 0008             		move.w	2(a0),8(a1)
0001B7B0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B7B6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B7BC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B7C2 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B7C8 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B7CE 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B7D4 D0FC 0020                  		adda.w	#$20,a0
0001B7D8 D2FC 0048                  		adda.w	#$48,a1
0001B7DC 4E75                       		rts	
0001B7DE                            ; End of function SS_AniWallsRings
0001B7DE                            
0001B7DE                            ; ===========================================================================
0001B7DE 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B7EE 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B7FE 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B80E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B81E 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B82E 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B83E 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B84E 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B85E                            ; ---------------------------------------------------------------------------
0001B85E                            ; Subroutine to	remove items when you collect them in the special stage
0001B85E                            ; ---------------------------------------------------------------------------
0001B85E                            
0001B85E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B85E                            
0001B85E                            
0001B85E                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001B85E 45F9 00FF 4400             		lea	($FF4400).l,a2
0001B864 303C 001F                  		move.w	#$1F,d0
0001B868                            
0001B868                            loc_1B4C4:
0001B868 4A12                       		tst.b	(a2)
0001B86A 6700                       		beq.s	locret_1B4CE
0001B86C 504A                       		addq.w	#8,a2
0001B86E 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001B872                            
0001B872                            locret_1B4CE:
0001B872 4E75                       		rts	
0001B874                            ; End of function SS_RemoveCollectedItem
0001B874                            
0001B874                            ; ---------------------------------------------------------------------------
0001B874                            ; Subroutine to	animate	special	stage items when you touch them
0001B874                            ; ---------------------------------------------------------------------------
0001B874                            
0001B874                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B874                            
0001B874                            
0001B874                            SS_AniItems:				; XREF: SS_ShowLayout
0001B874 41F9 00FF 4400             		lea	($FF4400).l,a0
0001B87A 3E3C 001F                  		move.w	#$1F,d7
0001B87E                            
0001B87E                            loc_1B4DA:
0001B87E 7000                       		moveq	#0,d0
0001B880 1010                       		move.b	(a0),d0
0001B882 6700                       		beq.s	loc_1B4E8
0001B884 E548                       		lsl.w	#2,d0
0001B886 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001B88A 4E91                       		jsr	(a1)
0001B88C                            
0001B88C                            loc_1B4E8:
0001B88C 5048                       		addq.w	#8,a0
0001B88E                            
0001B88E                            loc_1B4EA:
0001B88E 51CF FFEE                  		dbf	d7,loc_1B4DA
0001B892                            
0001B892 4E75                       		rts	
0001B894                            ; End of function SS_AniItems
0001B894                            
0001B894                            ; ===========================================================================
0001B894 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001B898 0000 0000                  		dc.l SS_AniBumper
0001B89C 0000 0000                  		dc.l SS_Ani1Up
0001B8A0 0000 0000                  		dc.l SS_AniReverse
0001B8A4 0000 0000                  		dc.l SS_AniEmeraldSparks
0001B8A8 0000 0000                  		dc.l SS_AniGlassBlock
0001B8AC                            ; ===========================================================================
0001B8AC                            
0001B8AC                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001B8AC 5328 0002                  		subq.b	#1,2(a0)
0001B8B0 6A00                       		bpl.s	locret_1B530
0001B8B2 117C 0005 0002             		move.b	#5,2(a0)
0001B8B8 7000                       		moveq	#0,d0
0001B8BA 1028 0003                  		move.b	3(a0),d0
0001B8BE 5228 0003                  		addq.b	#1,3(a0)
0001B8C2 2268 0004                  		movea.l	4(a0),a1
0001B8C6 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001B8CA 1280                       		move.b	d0,(a1)
0001B8CC 6600                       		bne.s	locret_1B530
0001B8CE 4290                       		clr.l	(a0)
0001B8D0 42A8 0004                  		clr.l	4(a0)
0001B8D4                            
0001B8D4                            locret_1B530:
0001B8D4 4E75                       		rts	
0001B8D6                            ; ===========================================================================
0001B8D6 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001B8DC                            ; ===========================================================================
0001B8DC                            
0001B8DC                            SS_AniBumper:				; XREF: SS_AniIndex
0001B8DC 5328 0002                  		subq.b	#1,2(a0)
0001B8E0 6A00                       		bpl.s	locret_1B566
0001B8E2 117C 0007 0002             		move.b	#7,2(a0)
0001B8E8 7000                       		moveq	#0,d0
0001B8EA 1028 0003                  		move.b	3(a0),d0
0001B8EE 5228 0003                  		addq.b	#1,3(a0)
0001B8F2 2268 0004                  		movea.l	4(a0),a1
0001B8F6 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001B8FA 6600                       		bne.s	loc_1B564
0001B8FC 4290                       		clr.l	(a0)
0001B8FE 42A8 0004                  		clr.l	4(a0)
0001B902 12BC 0025                  		move.b	#$25,(a1)
0001B906 4E75                       		rts	
0001B908                            ; ===========================================================================
0001B908                            
0001B908                            loc_1B564:
0001B908 1280                       		move.b	d0,(a1)
0001B90A                            
0001B90A                            locret_1B566:
0001B90A 4E75                       		rts	
0001B90C                            ; ===========================================================================
0001B90C 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001B912                            ; ===========================================================================
0001B912                            
0001B912                            SS_Ani1Up:				; XREF: SS_AniIndex
0001B912 5328 0002                  		subq.b	#1,2(a0)
0001B916 6A00                       		bpl.s	locret_1B596
0001B918 117C 0005 0002             		move.b	#5,2(a0)
0001B91E 7000                       		moveq	#0,d0
0001B920 1028 0003                  		move.b	3(a0),d0
0001B924 5228 0003                  		addq.b	#1,3(a0)
0001B928 2268 0004                  		movea.l	4(a0),a1
0001B92C 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001B930 1280                       		move.b	d0,(a1)
0001B932 6600                       		bne.s	locret_1B596
0001B934 4290                       		clr.l	(a0)
0001B936 42A8 0004                  		clr.l	4(a0)
0001B93A                            
0001B93A                            locret_1B596:
0001B93A 4E75                       		rts	
0001B93C                            ; ===========================================================================
0001B93C 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001B942                            ; ===========================================================================
0001B942                            
0001B942                            SS_AniReverse:				; XREF: SS_AniIndex
0001B942 5328 0002                  		subq.b	#1,2(a0)
0001B946 6A00                       		bpl.s	locret_1B5CC
0001B948 117C 0007 0002             		move.b	#7,2(a0)
0001B94E 7000                       		moveq	#0,d0
0001B950 1028 0003                  		move.b	3(a0),d0
0001B954 5228 0003                  		addq.b	#1,3(a0)
0001B958 2268 0004                  		movea.l	4(a0),a1
0001B95C 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001B960 6600                       		bne.s	loc_1B5CA
0001B962 4290                       		clr.l	(a0)
0001B964 42A8 0004                  		clr.l	4(a0)
0001B968 12BC 002B                  		move.b	#$2B,(a1)
0001B96C 4E75                       		rts	
0001B96E                            ; ===========================================================================
0001B96E                            
0001B96E                            loc_1B5CA:
0001B96E 1280                       		move.b	d0,(a1)
0001B970                            
0001B970                            locret_1B5CC:
0001B970 4E75                       		rts	
0001B972                            ; ===========================================================================
0001B972 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001B978                            ; ===========================================================================
0001B978                            
0001B978                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001B978 5328 0002                  		subq.b	#1,2(a0)
0001B97C 6A00                       		bpl.s	locret_1B60C
0001B97E 117C 0005 0002             		move.b	#5,2(a0)
0001B984 7000                       		moveq	#0,d0
0001B986 1028 0003                  		move.b	3(a0),d0
0001B98A 5228 0003                  		addq.b	#1,3(a0)
0001B98E 2268 0004                  		movea.l	4(a0),a1
0001B992 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001B996 1280                       		move.b	d0,(a1)
0001B998 6600                       		bne.s	locret_1B60C
0001B99A 4290                       		clr.l	(a0)
0001B99C 42A8 0004                  		clr.l	4(a0)
0001B9A0 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001B9A6 303C 00A8                  		move.w	#$A8,d0
0001B9AA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001B9B0                            
0001B9B0                            locret_1B60C:
0001B9B0 4E75                       		rts	
0001B9B2                            ; ===========================================================================
0001B9B2 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001B9B8                            ; ===========================================================================
0001B9B8                            
0001B9B8                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001B9B8 5328 0002                  		subq.b	#1,2(a0)
0001B9BC 6A00                       		bpl.s	locret_1B640
0001B9BE 117C 0001 0002             		move.b	#1,2(a0)
0001B9C4 7000                       		moveq	#0,d0
0001B9C6 1028 0003                  		move.b	3(a0),d0
0001B9CA 5228 0003                  		addq.b	#1,3(a0)
0001B9CE 2268 0004                  		movea.l	4(a0),a1
0001B9D2 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001B9D6 1280                       		move.b	d0,(a1)
0001B9D8 6600                       		bne.s	locret_1B640
0001B9DA 12A8 0004                  		move.b	4(a0),(a1)
0001B9DE 4290                       		clr.l	(a0)
0001B9E0 42A8 0004                  		clr.l	4(a0)
0001B9E4                            
0001B9E4                            locret_1B640:
0001B9E4 4E75                       		rts	
0001B9E6                            ; ===========================================================================
0001B9E6 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001B9F0                            ; ---------------------------------------------------------------------------
0001B9F0                            ; Special stage	layout pointers
0001B9F0                            ; ---------------------------------------------------------------------------
0001B9F0                            SS_LayoutIndex:
0001B9F0                            	include "_inc\Special stage layout pointers.asm"
0001B9F0                            ; ---------------------------------------------------------------------------
0001B9F0                            ; Special stage	layout pointers
0001B9F0                            ; ---------------------------------------------------------------------------
0001B9F0 0000 0000                  	dc.l SS_1
0001B9F4 0000 0000                  	dc.l SS_2
0001B9F8 0000 0000                  	dc.l SS_3
0001B9FC 0000 0000                  	dc.l SS_4
0001BA00 0000 0000                  	dc.l SS_5
0001BA04 0000 0000                  	dc.l SS_6
0001BA08                            	even
0001BA08                            	even
0001BA08                            
0001BA08                            ; ---------------------------------------------------------------------------
0001BA08                            ; Special stage	start locations
0001BA08                            ; ---------------------------------------------------------------------------
0001BA08                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BA20                            		even
0001BA20                            
0001BA20                            ; ---------------------------------------------------------------------------
0001BA20                            ; Subroutine to	load special stage layout
0001BA20                            ; ---------------------------------------------------------------------------
0001BA20                            
0001BA20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA20                            
0001BA20                            
0001BA20                            SS_Load:				; XREF: SpecialStage
0001BA20 7000                       		moveq	#0,d0
0001BA22 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BA26 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BA2A 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BA30 6500                       		bcs.s	SS_ChkEmldNum
0001BA32 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BA38                            
0001BA38                            SS_ChkEmldNum:
0001BA38 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BA3E 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BA40 7200                       		moveq	#0,d1
0001BA42 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BA46 5301                       		subq.b	#1,d1
0001BA48 6500                       		bcs.s	SS_LoadData
0001BA4A 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BA4E                            
0001BA4E                            SS_ChkEmldLoop:	
0001BA4E B033 1000                  		cmp.b	(a3,d1.w),d0
0001BA52 6600                       		bne.s	SS_ChkEmldRepeat
0001BA54 60CA                       		bra.s	SS_Load
0001BA56                            ; ===========================================================================
0001BA56                            
0001BA56                            SS_ChkEmldRepeat:
0001BA56 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BA5A                            
0001BA5A                            SS_LoadData:
0001BA5A E548                       		lsl.w	#2,d0
0001BA5C 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BA60 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BA64 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BA68 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BA6C 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BA72 303C 0000                  		move.w	#0,d0
0001BA76 4EB9 0000 193E             		jsr	(EniDec).l
0001BA7C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BA82 303C 0FFF                  		move.w	#$FFF,d0
0001BA86                            
0001BA86                            SS_ClrRAM3:
0001BA86 4299                       		clr.l	(a1)+
0001BA88 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BA8C                            
0001BA8C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BA92 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BA98 723F                       		moveq	#$3F,d1
0001BA9A                            
0001BA9A                            loc_1B6F6:
0001BA9A 743F                       		moveq	#$3F,d2
0001BA9C                            
0001BA9C                            loc_1B6F8:
0001BA9C 12D8                       		move.b	(a0)+,(a1)+
0001BA9E 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BAA2                            
0001BAA2 43E9 0040                  		lea	$40(a1),a1
0001BAA6 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BAAA                            
0001BAAA 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BAB0 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BAB6 724D                       		moveq	#$4D,d1
0001BAB8                            
0001BAB8                            loc_1B714:
0001BAB8 22D8                       		move.l	(a0)+,(a1)+
0001BABA 32FC 0000                  		move.w	#0,(a1)+
0001BABE 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BAC4 32D8                       		move.w	(a0)+,(a1)+
0001BAC6 51C9 FFF0                  		dbf	d1,loc_1B714
0001BACA                            
0001BACA 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BAD0 323C 003F                  		move.w	#$3F,d1
0001BAD4                            
0001BAD4                            loc_1B730:
0001BAD4                            
0001BAD4 4299                       		clr.l	(a1)+
0001BAD6 51C9 FFFC                  		dbf	d1,loc_1B730
0001BADA                            
0001BADA 4E75                       		rts	
0001BADC                            ; End of function SS_Load
0001BADC                            
0001BADC                            ; ===========================================================================
0001BADC                            ; ---------------------------------------------------------------------------
0001BADC                            ; Special stage	mappings and VRAM pointers
0001BADC                            ; ---------------------------------------------------------------------------
0001BADC                            SS_MapIndex:
0001BADC                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BADC                            ; ---------------------------------------------------------------------------
0001BADC                            ; Special stage	mappings and VRAM pointers
0001BADC                            ; ---------------------------------------------------------------------------
0001BADC 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BAE0 0142                       	dc.w $142		; VRAM setting
0001BAE2 0000 0000                  	dc.l Map_SSWalls
0001BAE6 0142                       	dc.w $142
0001BAE8 0000 0000                  	dc.l Map_SSWalls
0001BAEC 0142                       	dc.w $142
0001BAEE 0000 0000                  	dc.l Map_SSWalls
0001BAF2 0142                       	dc.w $142
0001BAF4 0000 0000                  	dc.l Map_SSWalls
0001BAF8 0142                       	dc.w $142
0001BAFA 0000 0000                  	dc.l Map_SSWalls
0001BAFE 0142                       	dc.w $142
0001BB00 0000 0000                  	dc.l Map_SSWalls
0001BB04 0142                       	dc.w $142
0001BB06 0000 0000                  	dc.l Map_SSWalls
0001BB0A 0142                       	dc.w $142
0001BB0C 0000 0000                  	dc.l Map_SSWalls
0001BB10 0142                       	dc.w $142
0001BB12 0000 0000                  	dc.l Map_SSWalls
0001BB16 2142                       	dc.w $2142
0001BB18 0000 0000                  	dc.l Map_SSWalls
0001BB1C 2142                       	dc.w $2142
0001BB1E 0000 0000                  	dc.l Map_SSWalls
0001BB22 2142                       	dc.w $2142
0001BB24 0000 0000                  	dc.l Map_SSWalls
0001BB28 2142                       	dc.w $2142
0001BB2A 0000 0000                  	dc.l Map_SSWalls
0001BB2E 2142                       	dc.w $2142
0001BB30 0000 0000                  	dc.l Map_SSWalls
0001BB34 2142                       	dc.w $2142
0001BB36 0000 0000                  	dc.l Map_SSWalls
0001BB3A 2142                       	dc.w $2142
0001BB3C 0000 0000                  	dc.l Map_SSWalls
0001BB40 2142                       	dc.w $2142
0001BB42 0000 0000                  	dc.l Map_SSWalls
0001BB46 2142                       	dc.w $2142
0001BB48 0000 0000                  	dc.l Map_SSWalls
0001BB4C 4142                       	dc.w $4142
0001BB4E 0000 0000                  	dc.l Map_SSWalls
0001BB52 4142                       	dc.w $4142
0001BB54 0000 0000                  	dc.l Map_SSWalls
0001BB58 4142                       	dc.w $4142
0001BB5A 0000 0000                  	dc.l Map_SSWalls
0001BB5E 4142                       	dc.w $4142
0001BB60 0000 0000                  	dc.l Map_SSWalls
0001BB64 4142                       	dc.w $4142
0001BB66 0000 0000                  	dc.l Map_SSWalls
0001BB6A 4142                       	dc.w $4142
0001BB6C 0000 0000                  	dc.l Map_SSWalls
0001BB70 4142                       	dc.w $4142
0001BB72 0000 0000                  	dc.l Map_SSWalls
0001BB76 4142                       	dc.w $4142
0001BB78 0000 0000                  	dc.l Map_SSWalls
0001BB7C 4142                       	dc.w $4142
0001BB7E 0000 0000                  	dc.l Map_SSWalls
0001BB82 6142                       	dc.w $6142
0001BB84 0000 0000                  	dc.l Map_SSWalls
0001BB88 6142                       	dc.w $6142
0001BB8A 0000 0000                  	dc.l Map_SSWalls
0001BB8E 6142                       	dc.w $6142
0001BB90 0000 0000                  	dc.l Map_SSWalls
0001BB94 6142                       	dc.w $6142
0001BB96 0000 0000                  	dc.l Map_SSWalls
0001BB9A 6142                       	dc.w $6142
0001BB9C 0000 0000                  	dc.l Map_SSWalls
0001BBA0 6142                       	dc.w $6142
0001BBA2 0000 0000                  	dc.l Map_SSWalls
0001BBA6 6142                       	dc.w $6142
0001BBA8 0000 0000                  	dc.l Map_SSWalls
0001BBAC 6142                       	dc.w $6142
0001BBAE 0000 0000                  	dc.l Map_SSWalls
0001BBB2 6142                       	dc.w $6142
0001BBB4 0000 EE52                  	dc.l Map_obj47
0001BBB8 023B                       	dc.w $23B
0001BBBA 0000 0000                  	dc.l Map_SS_R
0001BBBE 0570                       	dc.w $570
0001BBC0 0000 0000                  	dc.l Map_SS_R
0001BBC4 0251                       	dc.w $251
0001BBC6 0000 0000                  	dc.l Map_SS_R
0001BBCA 0370                       	dc.w $370
0001BBCC 0000 0000                  	dc.l Map_SS_Up
0001BBD0 0263                       	dc.w $263
0001BBD2 0000 0000                  	dc.l Map_SS_Down
0001BBD6 0263                       	dc.w $263
0001BBD8 0000 0000                  	dc.l Map_SS_R
0001BBDC 22F0                       	dc.w $22F0
0001BBDE 0000 0000                  	dc.l Map_SS_Glass
0001BBE2 0470                       	dc.w $470
0001BBE4 0000 0000                  	dc.l Map_SS_Glass
0001BBE8 05F0                       	dc.w $5F0
0001BBEA 0000 0000                  	dc.l Map_SS_Glass
0001BBEE 65F0                       	dc.w $65F0
0001BBF0 0000 0000                  	dc.l Map_SS_Glass
0001BBF4 25F0                       	dc.w $25F0
0001BBF6 0000 0000                  	dc.l Map_SS_Glass
0001BBFA 45F0                       	dc.w $45F0
0001BBFC 0000 0000                  	dc.l Map_SS_R
0001BC00 02F0                       	dc.w $2F0
0001BC02 0100 EE52                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001BC06 023B                       	dc.w $23B
0001BC08 0200 EE52                  	dc.l Map_obj47+$2000000
0001BC0C 023B                       	dc.w $23B
0001BC0E 0000 0000                  	dc.l Map_SS_R
0001BC12 0797                       	dc.w $797
0001BC14 0000 0000                  	dc.l Map_SS_R
0001BC18 07A0                       	dc.w $7A0
0001BC1A 0000 0000                  	dc.l Map_SS_R
0001BC1E 07A9                       	dc.w $7A9
0001BC20 0000 0000                  	dc.l Map_SS_R
0001BC24 0797                       	dc.w $797
0001BC26 0000 0000                  	dc.l Map_SS_R
0001BC2A 07A0                       	dc.w $7A0
0001BC2C 0000 0000                  	dc.l Map_SS_R
0001BC30 07A9                       	dc.w $7A9
0001BC32 0000 A28A                  	dc.l Map_obj25
0001BC36 27B2                       	dc.w $27B2
0001BC38 0000 0000                  	dc.l Map_SS_Chaos3
0001BC3C 0770                       	dc.w $770
0001BC3E 0000 0000                  	dc.l Map_SS_Chaos3
0001BC42 2770                       	dc.w $2770
0001BC44 0000 0000                  	dc.l Map_SS_Chaos3
0001BC48 4770                       	dc.w $4770
0001BC4A 0000 0000                  	dc.l Map_SS_Chaos3
0001BC4E 6770                       	dc.w $6770
0001BC50 0000 0000                  	dc.l Map_SS_Chaos1
0001BC54 0770                       	dc.w $770
0001BC56 0000 0000                  	dc.l Map_SS_Chaos2
0001BC5A 0770                       	dc.w $770
0001BC5C 0000 0000                  	dc.l Map_SS_R
0001BC60 04F0                       	dc.w $4F0
0001BC62 0400 A28A                  	dc.l Map_obj25+$4000000
0001BC66 27B2                       	dc.w $27B2
0001BC68 0500 A28A                  	dc.l Map_obj25+$5000000
0001BC6C 27B2                       	dc.w $27B2
0001BC6E 0600 A28A                  	dc.l Map_obj25+$6000000
0001BC72 27B2                       	dc.w $27B2
0001BC74 0700 A28A                  	dc.l Map_obj25+$7000000
0001BC78 27B2                       	dc.w $27B2
0001BC7A 0000 0000                  	dc.l Map_SS_Glass
0001BC7E 23F0                       	dc.w $23F0
0001BC80 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001BC84 23F0                       	dc.w $23F0
0001BC86 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001BC8A 23F0                       	dc.w $23F0
0001BC8C 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001BC90 23F0                       	dc.w $23F0
0001BC92 0000 0000                  	dc.l Map_SS_R+$2000000
0001BC96 04F0                       	dc.w $4F0
0001BC98 0000 0000                  	dc.l Map_SS_Glass
0001BC9C 05F0                       	dc.w $5F0
0001BC9E 0000 0000                  	dc.l Map_SS_Glass
0001BCA2 65F0                       	dc.w $65F0
0001BCA4 0000 0000                  	dc.l Map_SS_Glass
0001BCA8 25F0                       	dc.w $25F0
0001BCAA 0000 0000                  	dc.l Map_SS_Glass
0001BCAE 45F0                       	dc.w $45F0
0001BCAE 45F0                       	dc.w $45F0
0001BCB0                            
0001BCB0                            ; ---------------------------------------------------------------------------
0001BCB0                            ; Sprite mappings - special stage "R" block
0001BCB0                            ; ---------------------------------------------------------------------------
0001BCB0                            Map_SS_R:
0001BCB0                            	include "_maps\SSRblock.asm"
0001BCB0                            ; ---------------------------------------------------------------------------
0001BCB0                            ; Sprite mappings - special stage "R" block
0001BCB0                            ; ---------------------------------------------------------------------------
0001BCB0 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001BCB4 0000                       		dc.w byte_1B91E-Map_SS_R
0001BCB6 01                         byte_1B912:	dc.b 1
0001BCB7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BCBC 01                         byte_1B918:	dc.b 1
0001BCBD F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BCC2 00                         byte_1B91E:	dc.b 0
0001BCC4 00                         		even
0001BCC4 00                         		even
0001BCC4                            
0001BCC4                            ; ---------------------------------------------------------------------------
0001BCC4                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BCC4                            ; ---------------------------------------------------------------------------
0001BCC4                            Map_SS_Glass:
0001BCC4                            	include "_maps\SSglassblock.asm"
0001BCC4                            ; ---------------------------------------------------------------------------
0001BCC4                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BCC4                            ; ---------------------------------------------------------------------------
0001BCC4 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001BCC8 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001BCCC 01                         byte_1B928:	dc.b 1
0001BCCD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BCD2 01                         byte_1B92E:	dc.b 1
0001BCD3 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001BCD8 01                         byte_1B934:	dc.b 1
0001BCD9 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001BCDE 01                         byte_1B93A:	dc.b 1
0001BCDF F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001BCE4                            		even
0001BCE4                            		even
0001BCE4                            
0001BCE4                            ; ---------------------------------------------------------------------------
0001BCE4                            ; Sprite mappings - special stage "UP" block
0001BCE4                            ; ---------------------------------------------------------------------------
0001BCE4                            Map_SS_Up:
0001BCE4                            	include "_maps\SSUPblock.asm"
0001BCE4                            ; ---------------------------------------------------------------------------
0001BCE4                            ; Sprite mappings - special stage "UP" block
0001BCE4                            ; ---------------------------------------------------------------------------
0001BCE4 0000                       		dc.w byte_1B944-Map_SS_Up
0001BCE6 0000                       		dc.w byte_1B94A-Map_SS_Up
0001BCE8 01                         byte_1B944:	dc.b 1
0001BCE9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BCEE 01                         byte_1B94A:	dc.b 1
0001BCEF F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BCF4                            		even
0001BCF4                            		even
0001BCF4                            
0001BCF4                            ; ---------------------------------------------------------------------------
0001BCF4                            ; Sprite mappings - special stage "DOWN" block
0001BCF4                            ; ---------------------------------------------------------------------------
0001BCF4                            Map_SS_Down:
0001BCF4                            	include "_maps\SSDOWNblock.asm"
0001BCF4                            ; ---------------------------------------------------------------------------
0001BCF4                            ; Sprite mappings - special stage "DOWN" block
0001BCF4                            ; ---------------------------------------------------------------------------
0001BCF4 0000                       		dc.w byte_1B954-Map_SS_Down
0001BCF6 0000                       		dc.w byte_1B95A-Map_SS_Down
0001BCF8 01                         byte_1B954:	dc.b 1
0001BCF9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BCFE 01                         byte_1B95A:	dc.b 1
0001BCFF F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BD04                            		even
0001BD04                            		even
0001BD04                            
0001BD04                            ; ---------------------------------------------------------------------------
0001BD04                            ; Sprite mappings - special stage chaos	emeralds
0001BD04                            ; ---------------------------------------------------------------------------
0001BD04 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001BD06 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001BD08 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001BD0A 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001BD0C 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001BD0E 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001BD10 01                         byte_1B96C:	dc.b 1
0001BD11 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BD16 01                         byte_1B972:	dc.b 1
0001BD17 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001BD1C 01                         byte_1B978:	dc.b 1
0001BD1D F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001BD22 01                         byte_1B97E:	dc.b 1
0001BD23 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BD28                            		even
0001BD28                            ; ===========================================================================
0001BD28                            ; ---------------------------------------------------------------------------
0001BD28                            ; Object 09 - Sonic (special stage)
0001BD28                            ; ---------------------------------------------------------------------------
0001BD28                            
0001BD28                            Obj09:					; XREF: Obj_Index
0001BD28 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BD2C 6700                       		beq.s	Obj09_Normal	; if not, branch
0001BD2E 6100 0000                  		bsr.w	SS_FixCamera
0001BD32 6000 0000                  		bra.w	DebugMode
0001BD36                            ; ===========================================================================
0001BD36                            
0001BD36                            Obj09_Normal:
0001BD36 7000                       		moveq	#0,d0
0001BD38 1028 0024                  		move.b	$24(a0),d0
0001BD3C 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001BD40 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001BD44                            ; ===========================================================================
0001BD44 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001BD46 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001BD48 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001BD4A 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001BD4C                            ; ===========================================================================
0001BD4C                            
0001BD4C                            Obj09_Main:				; XREF: Obj09_Index
0001BD4C 5428 0024                  		addq.b	#2,$24(a0)
0001BD50 117C 000E 0016             		move.b	#$E,$16(a0)
0001BD56 117C 0007 0017             		move.b	#7,$17(a0)
0001BD5C 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001BD64 317C 0780 0002             		move.w	#$780,2(a0)
0001BD6A 117C 0004 0001             		move.b	#4,1(a0)
0001BD70 117C 0000 0018             		move.b	#0,$18(a0)
0001BD76 117C 0002 001C             		move.b	#2,$1C(a0)
0001BD7C 08E8 0002 0022             		bset	#2,$22(a0)
0001BD82 08E8 0001 0022             		bset	#1,$22(a0)
0001BD88                            
0001BD88                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001BD88 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001BD8C 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BD8E 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001BD94 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BD96 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001BD9C                            
0001BD9C                            Obj09_NoDebug:
0001BD9C 117C 0000 0030             		move.b	#0,$30(a0)
0001BDA2 7000                       		moveq	#0,d0
0001BDA4 1028 0022                  		move.b	$22(a0),d0
0001BDA8 0240 0002                  		andi.w	#2,d0
0001BDAC 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001BDB0 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001BDB4 4EBA 8220                  		jsr	LoadSonicDynPLC
0001BDB8 4EF9 0000 D95E             		jmp	DisplaySprite
0001BDBE                            ; ===========================================================================
0001BDBE 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001BDC0 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001BDC2                            ; ===========================================================================
0001BDC2                            
0001BDC2                            Obj09_OnWall:				; XREF: Obj09_Modes
0001BDC2 6100 0000                  		bsr.w	Obj09_Jump
0001BDC6 6100 0000                  		bsr.w	Obj09_Move
0001BDCA 6100 0000                  		bsr.w	Obj09_Fall
0001BDCE 6000                       		bra.s	Obj09_Display
0001BDD0                            ; ===========================================================================
0001BDD0                            
0001BDD0                            Obj09_InAir:				; XREF: Obj09_Modes
0001BDD0 6100 0000                  		bsr.w	nullsub_2
0001BDD4 6100 0000                  		bsr.w	Obj09_Move
0001BDD8 6100 0000                  		bsr.w	Obj09_Fall
0001BDDC                            
0001BDDC                            Obj09_Display:				; XREF: Obj09_OnWall
0001BDDC 6100 0000                  		bsr.w	Obj09_ChkItems
0001BDE0 6100 0000                  		bsr.w	Obj09_ChkItems2
0001BDE4 4EB9 0000 D938             		jsr	SpeedToPos
0001BDEA 6100 0000                  		bsr.w	SS_FixCamera
0001BDEE 3038 F780                  		move.w	($FFFFF780).w,d0
0001BDF2 D078 F782                  		add.w	($FFFFF782).w,d0
0001BDF6 31C0 F780                  		move.w	d0,($FFFFF780).w
0001BDFA 4EB9 0001 3D5C             		jsr	Sonic_Animate
0001BE00 4E75                       		rts	
0001BE02                            
0001BE02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE02                            
0001BE02                            
0001BE02                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001BE02 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001BE08 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001BE0A 6100 0000                  		bsr.w	Obj09_MoveLeft
0001BE0E                            
0001BE0E                            Obj09_ChkRight:
0001BE0E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001BE14 6700                       		beq.s	loc_1BA78	; if not, branch
0001BE16 6100 0000                  		bsr.w	Obj09_MoveRight
0001BE1A                            
0001BE1A                            loc_1BA78:
0001BE1A 1038 F602                  		move.b	($FFFFF602).w,d0
0001BE1E 0200 000C                  		andi.b	#$C,d0
0001BE22 6600                       		bne.s	loc_1BAA8
0001BE24 3028 0014                  		move.w	$14(a0),d0
0001BE28 6700                       		beq.s	loc_1BAA8
0001BE2A 6B00                       		bmi.s	loc_1BA9A
0001BE2C 0440 000C                  		subi.w	#$C,d0
0001BE30 6400                       		bcc.s	loc_1BA94
0001BE32 303C 0000                  		move.w	#0,d0
0001BE36                            
0001BE36                            loc_1BA94:
0001BE36 3140 0014                  		move.w	d0,$14(a0)
0001BE3A 6000                       		bra.s	loc_1BAA8
0001BE3C                            ; ===========================================================================
0001BE3C                            
0001BE3C                            loc_1BA9A:
0001BE3C 0640 000C                  		addi.w	#$C,d0
0001BE40 6400                       		bcc.s	loc_1BAA4
0001BE42 303C 0000                  		move.w	#0,d0
0001BE46                            
0001BE46                            loc_1BAA4:
0001BE46 3140 0014                  		move.w	d0,$14(a0)
0001BE4A                            
0001BE4A                            loc_1BAA8:
0001BE4A 1038 F780                  		move.b	($FFFFF780).w,d0
0001BE4E 0600 0020                  		addi.b	#$20,d0
0001BE52 0200 00C0                  		andi.b	#$C0,d0
0001BE56 4400                       		neg.b	d0
0001BE58 4EB9 0000 2BFA             		jsr	(CalcSine).l
0001BE5E C3E8 0014                  		muls.w	$14(a0),d1
0001BE62 D3A8 0008                  		add.l	d1,8(a0)
0001BE66 C1E8 0014                  		muls.w	$14(a0),d0
0001BE6A D1A8 000C                  		add.l	d0,$C(a0)
0001BE6E 48E7 C000                  		movem.l	d0-d1,-(sp)
0001BE72 2428 000C                  		move.l	$C(a0),d2
0001BE76 2628 0008                  		move.l	8(a0),d3
0001BE7A 6100 0000                  		bsr.w	sub_1BCE8
0001BE7E 6700                       		beq.s	loc_1BAF2
0001BE80 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BE84 93A8 0008                  		sub.l	d1,8(a0)
0001BE88 91A8 000C                  		sub.l	d0,$C(a0)
0001BE8C 317C 0000 0014             		move.w	#0,$14(a0)
0001BE92 4E75                       		rts	
0001BE94                            ; ===========================================================================
0001BE94                            
0001BE94                            loc_1BAF2:
0001BE94 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BE98 4E75                       		rts	
0001BE9A                            ; End of function Obj09_Move
0001BE9A                            
0001BE9A                            
0001BE9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE9A                            
0001BE9A                            
0001BE9A                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001BE9A 08E8 0000 0022             		bset	#0,$22(a0)
0001BEA0 3028 0014                  		move.w	$14(a0),d0
0001BEA4 6700                       		beq.s	loc_1BB06
0001BEA6 6A00                       		bpl.s	loc_1BB1A
0001BEA8                            
0001BEA8                            loc_1BB06:
0001BEA8 0440 000C                  		subi.w	#$C,d0
0001BEAC 0C40 F800                  		cmpi.w	#-$800,d0
0001BEB0 6E00                       		bgt.s	loc_1BB14
0001BEB2 303C F800                  		move.w	#-$800,d0
0001BEB6                            
0001BEB6                            loc_1BB14:
0001BEB6 3140 0014                  		move.w	d0,$14(a0)
0001BEBA 4E75                       		rts	
0001BEBC                            ; ===========================================================================
0001BEBC                            
0001BEBC                            loc_1BB1A:
0001BEBC 0440 0040                  		subi.w	#$40,d0
0001BEC0 6400                       		bcc.s	loc_1BB22
0001BEC2 4E71                       		nop	
0001BEC4                            
0001BEC4                            loc_1BB22:
0001BEC4 3140 0014                  		move.w	d0,$14(a0)
0001BEC8 4E75                       		rts	
0001BECA                            ; End of function Obj09_MoveLeft
0001BECA                            
0001BECA                            
0001BECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BECA                            
0001BECA                            
0001BECA                            Obj09_MoveRight:			; XREF: Obj09_Move
0001BECA 08A8 0000 0022             		bclr	#0,$22(a0)
0001BED0 3028 0014                  		move.w	$14(a0),d0
0001BED4 6B00                       		bmi.s	loc_1BB48
0001BED6 0640 000C                  		addi.w	#$C,d0
0001BEDA 0C40 0800                  		cmpi.w	#$800,d0
0001BEDE 6D00                       		blt.s	loc_1BB42
0001BEE0 303C 0800                  		move.w	#$800,d0
0001BEE4                            
0001BEE4                            loc_1BB42:
0001BEE4 3140 0014                  		move.w	d0,$14(a0)
0001BEE8 6000                       		bra.s	locret_1BB54
0001BEEA                            ; ===========================================================================
0001BEEA                            
0001BEEA                            loc_1BB48:
0001BEEA 0640 0040                  		addi.w	#$40,d0
0001BEEE 6400                       		bcc.s	loc_1BB50
0001BEF0 4E71                       		nop	
0001BEF2                            
0001BEF2                            loc_1BB50:
0001BEF2 3140 0014                  		move.w	d0,$14(a0)
0001BEF6                            
0001BEF6                            locret_1BB54:
0001BEF6 4E75                       		rts	
0001BEF8                            ; End of function Obj09_MoveRight
0001BEF8                            
0001BEF8                            
0001BEF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BEF8                            
0001BEF8                            
0001BEF8                            Obj09_Jump:				; XREF: Obj09_OnWall
0001BEF8 1038 F603                  		move.b	($FFFFF603).w,d0
0001BEFC 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001BF00 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001BF02 1038 F780                  		move.b	($FFFFF780).w,d0
0001BF06 0200 00FC                  		andi.b	#$FC,d0
0001BF0A 4400                       		neg.b	d0
0001BF0C 0400 0040                  		subi.b	#$40,d0
0001BF10 4EB9 0000 2BFA             		jsr	(CalcSine).l
0001BF16 C3FC 0680                  		muls.w	#$680,d1
0001BF1A E081                       		asr.l	#8,d1
0001BF1C 3141 0010                  		move.w	d1,$10(a0)
0001BF20 C1FC 0680                  		muls.w	#$680,d0
0001BF24 E080                       		asr.l	#8,d0
0001BF26 3140 0012                  		move.w	d0,$12(a0)
0001BF2A 08E8 0001 0022             		bset	#1,$22(a0)
0001BF30 303C 00A0                  		move.w	#$A0,d0
0001BF34 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
0001BF3A                            
0001BF3A                            Obj09_NoJump:
0001BF3A 4E75                       		rts	
0001BF3C                            ; End of function Obj09_Jump
0001BF3C                            
0001BF3C                            
0001BF3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF3C                            
0001BF3C                            
0001BF3C                            nullsub_2:				; XREF: Obj09_InAir
0001BF3C 4E75                       		rts	
0001BF3E                            ; End of function nullsub_2
0001BF3E                            
0001BF3E                            ; ===========================================================================
0001BF3E                            ; ---------------------------------------------------------------------------
0001BF3E                            ; unused subroutine to limit Sonic's upward vertical speed
0001BF3E                            ; ---------------------------------------------------------------------------
0001BF3E 323C FC00                  		move.w	#-$400,d1
0001BF42 B268 0012                  		cmp.w	$12(a0),d1
0001BF46 6F00                       		ble.s	locret_1BBB4
0001BF48 1038 F602                  		move.b	($FFFFF602).w,d0
0001BF4C 0200 0070                  		andi.b	#$70,d0
0001BF50 6600                       		bne.s	locret_1BBB4
0001BF52 3141 0012                  		move.w	d1,$12(a0)
0001BF56                            
0001BF56                            locret_1BBB4:
0001BF56 4E75                       		rts	
0001BF58                            ; ---------------------------------------------------------------------------
0001BF58                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001BF58                            ; ---------------------------------------------------------------------------
0001BF58                            
0001BF58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF58                            
0001BF58                            
0001BF58                            SS_FixCamera:				; XREF: Obj09
0001BF58 3428 000C                  		move.w	$C(a0),d2
0001BF5C 3628 0008                  		move.w	8(a0),d3
0001BF60 3038 F700                  		move.w	($FFFFF700).w,d0
0001BF64 0443 00A0                  		subi.w	#$A0,d3
0001BF68 6500                       		bcs.s	loc_1BBCE
0001BF6A 9043                       		sub.w	d3,d0
0001BF6C 9178 F700                  		sub.w	d0,($FFFFF700).w
0001BF70                            
0001BF70                            loc_1BBCE:
0001BF70 3038 F704                  		move.w	($FFFFF704).w,d0
0001BF74 0442 0070                  		subi.w	#$70,d2
0001BF78 6500                       		bcs.s	locret_1BBDE
0001BF7A 9042                       		sub.w	d2,d0
0001BF7C 9178 F704                  		sub.w	d0,($FFFFF704).w
0001BF80                            
0001BF80                            locret_1BBDE:
0001BF80 4E75                       		rts	
0001BF82                            ; End of function SS_FixCamera
0001BF82                            
0001BF82                            ; ===========================================================================
0001BF82                            
0001BF82                            Obj09_ExitStage:			; XREF: Obj09_Index
0001BF82 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001BF88 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001BF8E 6600                       		bne.s	loc_1BBF4
0001BF90 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001BF96                            
0001BF96                            loc_1BBF4:
0001BF96 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001BF9C 6D00                       		blt.s	loc_1BC12
0001BF9E 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001BFA4 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001BFAA 5428 0024                  		addq.b	#2,$24(a0)
0001BFAE 317C 003C 0038             		move.w	#$3C,$38(a0)
0001BFB4                            
0001BFB4                            loc_1BC12:
0001BFB4 3038 F780                  		move.w	($FFFFF780).w,d0
0001BFB8 D078 F782                  		add.w	($FFFFF782).w,d0
0001BFBC 31C0 F780                  		move.w	d0,($FFFFF780).w
0001BFC0 4EB9 0001 3D5C             		jsr	Sonic_Animate
0001BFC6 4EBA 800E                  		jsr	LoadSonicDynPLC
0001BFCA 6100 FF8C                  		bsr.w	SS_FixCamera
0001BFCE 4EF9 0000 D95E             		jmp	DisplaySprite
0001BFD4                            ; ===========================================================================
0001BFD4                            
0001BFD4                            Obj09_Exit2:				; XREF: Obj09_Index
0001BFD4 5368 0038                  		subq.w	#1,$38(a0)
0001BFD8 6600                       		bne.s	loc_1BC40
0001BFDA 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001BFE0                            
0001BFE0                            loc_1BC40:
0001BFE0 4EB9 0001 3D5C             		jsr	Sonic_Animate
0001BFE6 4EB9 0001 3FD6             		jsr	LoadSonicDynPLC
0001BFEC 6100 FF6A                  		bsr.w	SS_FixCamera
0001BFF0 4EF9 0000 D95E             		jmp	DisplaySprite
0001BFF6                            
0001BFF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFF6                            
0001BFF6                            
0001BFF6                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001BFF6 2428 000C                  		move.l	$C(a0),d2
0001BFFA 2628 0008                  		move.l	8(a0),d3
0001BFFE 1038 F780                  		move.b	($FFFFF780).w,d0
0001C002 0200 00FC                  		andi.b	#$FC,d0
0001C006 4EB9 0000 2BFA             		jsr	(CalcSine).l
0001C00C 3828 0010                  		move.w	$10(a0),d4
0001C010 48C4                       		ext.l	d4
0001C012 E184                       		asl.l	#8,d4
0001C014 C1FC 002A                  		muls.w	#$2A,d0
0001C018 D084                       		add.l	d4,d0
0001C01A 3828 0012                  		move.w	$12(a0),d4
0001C01E 48C4                       		ext.l	d4
0001C020 E184                       		asl.l	#8,d4
0001C022 C3FC 002A                  		muls.w	#$2A,d1
0001C026 D284                       		add.l	d4,d1
0001C028 D680                       		add.l	d0,d3
0001C02A 6100 0000                  		bsr.w	sub_1BCE8
0001C02E 6700                       		beq.s	loc_1BCB0
0001C030 9680                       		sub.l	d0,d3
0001C032 7000                       		moveq	#0,d0
0001C034 3140 0010                  		move.w	d0,$10(a0)
0001C038 08A8 0001 0022             		bclr	#1,$22(a0)
0001C03E D481                       		add.l	d1,d2
0001C040 6100 0000                  		bsr.w	sub_1BCE8
0001C044 6700                       		beq.s	loc_1BCC6
0001C046 9481                       		sub.l	d1,d2
0001C048 7200                       		moveq	#0,d1
0001C04A 3141 0012                  		move.w	d1,$12(a0)
0001C04E 4E75                       		rts	
0001C050                            ; ===========================================================================
0001C050                            
0001C050                            loc_1BCB0:
0001C050 D481                       		add.l	d1,d2
0001C052 6100 0000                  		bsr.w	sub_1BCE8
0001C056 6700                       		beq.s	loc_1BCD4
0001C058 9481                       		sub.l	d1,d2
0001C05A 7200                       		moveq	#0,d1
0001C05C 3141 0012                  		move.w	d1,$12(a0)
0001C060 08A8 0001 0022             		bclr	#1,$22(a0)
0001C066                            
0001C066                            loc_1BCC6:
0001C066 E080                       		asr.l	#8,d0
0001C068 E081                       		asr.l	#8,d1
0001C06A 3140 0010                  		move.w	d0,$10(a0)
0001C06E 3141 0012                  		move.w	d1,$12(a0)
0001C072 4E75                       		rts	
0001C074                            ; ===========================================================================
0001C074                            
0001C074                            loc_1BCD4:
0001C074 E080                       		asr.l	#8,d0
0001C076 E081                       		asr.l	#8,d1
0001C078 3140 0010                  		move.w	d0,$10(a0)
0001C07C 3141 0012                  		move.w	d1,$12(a0)
0001C080 08E8 0001 0022             		bset	#1,$22(a0)
0001C086 4E75                       		rts	
0001C088                            ; End of function Obj09_Fall
0001C088                            
0001C088                            
0001C088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C088                            
0001C088                            
0001C088                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C088 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C08E 7800                       		moveq	#0,d4
0001C090 4842                       		swap	d2
0001C092 3802                       		move.w	d2,d4
0001C094 4842                       		swap	d2
0001C096 0644 0044                  		addi.w	#$44,d4
0001C09A 88FC 0018                  		divu.w	#$18,d4
0001C09E C8FC 0080                  		mulu.w	#$80,d4
0001C0A2 D3C4                       		adda.l	d4,a1
0001C0A4 7800                       		moveq	#0,d4
0001C0A6 4843                       		swap	d3
0001C0A8 3803                       		move.w	d3,d4
0001C0AA 4843                       		swap	d3
0001C0AC 0644 0014                  		addi.w	#$14,d4
0001C0B0 88FC 0018                  		divu.w	#$18,d4
0001C0B4 D2C4                       		adda.w	d4,a1
0001C0B6 7A00                       		moveq	#0,d5
0001C0B8 1819                       		move.b	(a1)+,d4
0001C0BA 6100                       		bsr.s	sub_1BD30
0001C0BC 1819                       		move.b	(a1)+,d4
0001C0BE 6100                       		bsr.s	sub_1BD30
0001C0C0 D2FC 007E                  		adda.w	#$7E,a1
0001C0C4 1819                       		move.b	(a1)+,d4
0001C0C6 6100                       		bsr.s	sub_1BD30
0001C0C8 1819                       		move.b	(a1)+,d4
0001C0CA 6100                       		bsr.s	sub_1BD30
0001C0CC 4A05                       		tst.b	d5
0001C0CE 4E75                       		rts	
0001C0D0                            ; End of function sub_1BCE8
0001C0D0                            
0001C0D0                            
0001C0D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0D0                            
0001C0D0                            
0001C0D0                            sub_1BD30:				; XREF: sub_1BCE8
0001C0D0 6700                       		beq.s	locret_1BD44
0001C0D2 0C04 0028                  		cmpi.b	#$28,d4
0001C0D6 6700                       		beq.s	locret_1BD44
0001C0D8 0C04 003A                  		cmpi.b	#$3A,d4
0001C0DC 6500                       		bcs.s	loc_1BD46
0001C0DE 0C04 004B                  		cmpi.b	#$4B,d4
0001C0E2 6400                       		bcc.s	loc_1BD46
0001C0E4                            
0001C0E4                            locret_1BD44:
0001C0E4 4E75                       		rts	
0001C0E6                            ; ===========================================================================
0001C0E6                            
0001C0E6                            loc_1BD46:
0001C0E6 1144 0030                  		move.b	d4,$30(a0)
0001C0EA 2149 0032                  		move.l	a1,$32(a0)
0001C0EE 7AFF                       		moveq	#-1,d5
0001C0F0 4E75                       		rts	
0001C0F2                            ; End of function sub_1BD30
0001C0F2                            
0001C0F2                            
0001C0F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0F2                            
0001C0F2                            
0001C0F2                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C0F2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C0F8 7800                       		moveq	#0,d4
0001C0FA 3828 000C                  		move.w	$C(a0),d4
0001C0FE 0644 0050                  		addi.w	#$50,d4
0001C102 88FC 0018                  		divu.w	#$18,d4
0001C106 C8FC 0080                  		mulu.w	#$80,d4
0001C10A D3C4                       		adda.l	d4,a1
0001C10C 7800                       		moveq	#0,d4
0001C10E 3828 0008                  		move.w	8(a0),d4
0001C112 0644 0020                  		addi.w	#$20,d4
0001C116 88FC 0018                  		divu.w	#$18,d4
0001C11A D2C4                       		adda.w	d4,a1
0001C11C 1811                       		move.b	(a1),d4
0001C11E 6600                       		bne.s	Obj09_ChkCont
0001C120 4A28 003A                  		tst.b	$3A(a0)
0001C124 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C128 7800                       		moveq	#0,d4
0001C12A 4E75                       		rts	
0001C12C                            ; ===========================================================================
0001C12C                            
0001C12C                            Obj09_ChkCont:
0001C12C 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C130 6600                       		bne.s	Obj09_Chk1Up
0001C132 6100 F72A                  		bsr.w	SS_RemoveCollectedItem
0001C136 6600                       		bne.s	Obj09_GetCont
0001C138 14BC 0001                  		move.b	#1,(a2)
0001C13C 2549 0004                  		move.l	a1,4(a2)
0001C140                            
0001C140                            Obj09_GetCont:
0001C140 4EB9 0000 9F72             		jsr	CollectRing
0001C146 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C14C 6500                       		bcs.s	Obj09_NoCont
0001C14E 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C154 6600                       		bne.s	Obj09_NoCont
0001C156 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C15A 303C 00BF                  		move.w	#$BF,d0
0001C15E 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra continue sound
0001C164                            
0001C164                            Obj09_NoCont:
0001C164 7800                       		moveq	#0,d4
0001C166 4E75                       		rts	
0001C168                            ; ===========================================================================
0001C168                            
0001C168                            Obj09_Chk1Up:
0001C168 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C16C 6600                       		bne.s	Obj09_ChkEmer
0001C16E 6100 F6EE                  		bsr.w	SS_RemoveCollectedItem
0001C172 6600                       		bne.s	Obj09_Get1Up
0001C174 14BC 0003                  		move.b	#3,(a2)
0001C178 2549 0004                  		move.l	a1,4(a2)
0001C17C                            
0001C17C                            Obj09_Get1Up:
0001C17C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C180 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C184 303C 0088                  		move.w	#$88,d0
0001C188 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra life music
0001C18E 7800                       		moveq	#0,d4
0001C190 4E75                       		rts	
0001C192                            ; ===========================================================================
0001C192                            
0001C192                            Obj09_ChkEmer:
0001C192 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C196 6500                       		bcs.s	Obj09_ChkGhost
0001C198 0C04 0040                  		cmpi.b	#$40,d4
0001C19C 6200                       		bhi.s	Obj09_ChkGhost
0001C19E 6100 F6BE                  		bsr.w	SS_RemoveCollectedItem
0001C1A2 6600                       		bne.s	Obj09_GetEmer
0001C1A4 14BC 0005                  		move.b	#5,(a2)
0001C1A8 2549 0004                  		move.l	a1,4(a2)
0001C1AC                            
0001C1AC                            Obj09_GetEmer:
0001C1AC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C1B2 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C1B4 0404 003B                  		subi.b	#$3B,d4
0001C1B8 7000                       		moveq	#0,d0
0001C1BA 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C1BE 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C1C2 1584 0000                  		move.b	d4,(a2,d0.w)
0001C1C6 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C1CA                            
0001C1CA                            Obj09_NoEmer:
0001C1CA 303C 0093                  		move.w	#$93,d0
0001C1CE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play emerald music
0001C1D4 7800                       		moveq	#0,d4
0001C1D6 4E75                       		rts	
0001C1D8                            ; ===========================================================================
0001C1D8                            
0001C1D8                            Obj09_ChkGhost:
0001C1D8 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C1DC 6600                       		bne.s	Obj09_ChkGhostTag
0001C1DE 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C1E4                            
0001C1E4                            Obj09_ChkGhostTag:
0001C1E4 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C1E8 6600                       		bne.s	Obj09_NoGhost
0001C1EA 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C1F0 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C1F2 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C1F8                            
0001C1F8                            Obj09_NoGhost:
0001C1F8 78FF                       		moveq	#-1,d4
0001C1FA 4E75                       		rts	
0001C1FC                            ; ===========================================================================
0001C1FC                            
0001C1FC                            Obj09_MakeGhostSolid:
0001C1FC 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C202 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C204 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C20A 723F                       		moveq	#$3F,d1
0001C20C                            
0001C20C                            Obj09_GhostLoop2:
0001C20C 743F                       		moveq	#$3F,d2
0001C20E                            
0001C20E                            Obj09_GhostLoop:
0001C20E 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C212 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C214 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C218                            
0001C218                            Obj09_NoReplace:
0001C218 5249                       		addq.w	#1,a1
0001C21A 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C21E 43E9 0040                  		lea	$40(a1),a1
0001C222 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C226                            
0001C226                            Obj09_GhostNotSolid:
0001C226 4228 003A                  		clr.b	$3A(a0)
0001C22A 7800                       		moveq	#0,d4
0001C22C 4E75                       		rts	
0001C22E                            ; End of function Obj09_ChkItems
0001C22E                            
0001C22E                            
0001C22E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C22E                            
0001C22E                            
0001C22E                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C22E 1028 0030                  		move.b	$30(a0),d0
0001C232 6600                       		bne.s	Obj09_ChkBumper
0001C234 5328 0036                  		subq.b	#1,$36(a0)
0001C238 6A00                       		bpl.s	loc_1BEA0
0001C23A 117C 0000 0036             		move.b	#0,$36(a0)
0001C240                            
0001C240                            loc_1BEA0:
0001C240 5328 0037                  		subq.b	#1,$37(a0)
0001C244 6A00                       		bpl.s	locret_1BEAC
0001C246 117C 0000 0037             		move.b	#0,$37(a0)
0001C24C                            
0001C24C                            locret_1BEAC:
0001C24C 4E75                       		rts	
0001C24E                            ; ===========================================================================
0001C24E                            
0001C24E                            Obj09_ChkBumper:
0001C24E 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C252 6600                       		bne.s	Obj09_GOAL
0001C254 2228 0032                  		move.l	$32(a0),d1
0001C258 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C25E 3401                       		move.w	d1,d2
0001C260 0241 007F                  		andi.w	#$7F,d1
0001C264 C2FC 0018                  		mulu.w	#$18,d1
0001C268 0441 0014                  		subi.w	#$14,d1
0001C26C EE4A                       		lsr.w	#7,d2
0001C26E 0242 007F                  		andi.w	#$7F,d2
0001C272 C4FC 0018                  		mulu.w	#$18,d2
0001C276 0442 0044                  		subi.w	#$44,d2
0001C27A 9268 0008                  		sub.w	8(a0),d1
0001C27E 9468 000C                  		sub.w	$C(a0),d2
0001C282 4EB9 0000 2EC8             		jsr	(CalcAngle).l
0001C288 4EB9 0000 2BFA             		jsr	(CalcSine).l
0001C28E C3FC F900                  		muls.w	#-$700,d1
0001C292 E081                       		asr.l	#8,d1
0001C294 3141 0010                  		move.w	d1,$10(a0)
0001C298 C1FC F900                  		muls.w	#-$700,d0
0001C29C E080                       		asr.l	#8,d0
0001C29E 3140 0012                  		move.w	d0,$12(a0)
0001C2A2 08E8 0001 0022             		bset	#1,$22(a0)
0001C2A8 6100 F5B4                  		bsr.w	SS_RemoveCollectedItem
0001C2AC 6600                       		bne.s	Obj09_BumpSnd
0001C2AE 14BC 0002                  		move.b	#2,(a2)
0001C2B2 2028 0032                  		move.l	$32(a0),d0
0001C2B6 5380                       		subq.l	#1,d0
0001C2B8 2540 0004                  		move.l	d0,4(a2)
0001C2BC                            
0001C2BC                            Obj09_BumpSnd:
0001C2BC 303C 00B4                  		move.w	#$B4,d0
0001C2C0 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C2C6                            ; ===========================================================================
0001C2C6                            
0001C2C6                            Obj09_GOAL:
0001C2C6 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C2CA 6600                       		bne.s	Obj09_UPblock
0001C2CC 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C2D0 303C 00A8                  		move.w	#$A8,d0		; change item
0001C2D4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C2DA 4E75                       		rts	
0001C2DC                            ; ===========================================================================
0001C2DC                            
0001C2DC                            Obj09_UPblock:
0001C2DC 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C2E0 6600                       		bne.s	Obj09_DOWNblock
0001C2E2 4A28 0036                  		tst.b	$36(a0)
0001C2E6 6600 0000                  		bne.w	Obj09_NoGlass
0001C2EA 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C2F0 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C2F6 6700                       		beq.s	Obj09_UPsnd
0001C2F8 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C2FC 2268 0032                  		movea.l	$32(a0),a1
0001C300 5389                       		subq.l	#1,a1
0001C302 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C306                            
0001C306                            Obj09_UPsnd:
0001C306 303C 00A9                  		move.w	#$A9,d0
0001C30A 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C310                            ; ===========================================================================
0001C310                            
0001C310                            Obj09_DOWNblock:
0001C310 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C314 6600                       		bne.s	Obj09_Rblock
0001C316 4A28 0036                  		tst.b	$36(a0)
0001C31A 6600 0000                  		bne.w	Obj09_NoGlass
0001C31E 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C324 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C32A 6600                       		bne.s	Obj09_DOWNsnd
0001C32C E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C330 2268 0032                  		movea.l	$32(a0),a1
0001C334 5389                       		subq.l	#1,a1
0001C336 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C33A                            
0001C33A                            Obj09_DOWNsnd:
0001C33A 303C 00A9                  		move.w	#$A9,d0
0001C33E 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C344                            ; ===========================================================================
0001C344                            
0001C344                            Obj09_Rblock:
0001C344 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C348 6600                       		bne.s	Obj09_ChkGlass
0001C34A 4A28 0037                  		tst.b	$37(a0)
0001C34E 6600 0000                  		bne.w	Obj09_NoGlass
0001C352 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C358 6100 F504                  		bsr.w	SS_RemoveCollectedItem
0001C35C 6600                       		bne.s	Obj09_RevStage
0001C35E 14BC 0004                  		move.b	#4,(a2)
0001C362 2028 0032                  		move.l	$32(a0),d0
0001C366 5380                       		subq.l	#1,d0
0001C368 2540 0004                  		move.l	d0,4(a2)
0001C36C                            
0001C36C                            Obj09_RevStage:
0001C36C 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C370 303C 00A9                  		move.w	#$A9,d0
0001C374 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play sound
0001C37A                            ; ===========================================================================
0001C37A                            
0001C37A                            Obj09_ChkGlass:
0001C37A 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C37E 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C380 0C00 002E                  		cmpi.b	#$2E,d0
0001C384 6700                       		beq.s	Obj09_Glass
0001C386 0C00 002F                  		cmpi.b	#$2F,d0
0001C38A 6700                       		beq.s	Obj09_Glass
0001C38C 0C00 0030                  		cmpi.b	#$30,d0
0001C390 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C392                            
0001C392                            Obj09_Glass:
0001C392 6100 F4CA                  		bsr.w	SS_RemoveCollectedItem
0001C396 6600                       		bne.s	Obj09_GlassSnd
0001C398 14BC 0006                  		move.b	#6,(a2)
0001C39C 2268 0032                  		movea.l	$32(a0),a1
0001C3A0 5389                       		subq.l	#1,a1
0001C3A2 2549 0004                  		move.l	a1,4(a2)
0001C3A6 1011                       		move.b	(a1),d0
0001C3A8 5200                       		addq.b	#1,d0		; change glass type when touched
0001C3AA 0C00 0030                  		cmpi.b	#$30,d0
0001C3AE 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C3B0 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C3B2                            
0001C3B2                            Obj09_GlassUpdate:
0001C3B2 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C3B6                            
0001C3B6                            Obj09_GlassSnd:
0001C3B6 303C 00BA                  		move.w	#$BA,d0
0001C3BA 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C3C0                            ; ===========================================================================
0001C3C0                            
0001C3C0                            Obj09_NoGlass:
0001C3C0 4E75                       		rts	
0001C3C2                            ; End of function Obj09_ChkItems2
0001C3C2                            
0001C3C2                            ; ===========================================================================
0001C3C2                            ; ---------------------------------------------------------------------------
0001C3C2                            ; Object 10 - blank
0001C3C2                            ; ---------------------------------------------------------------------------
0001C3C2                            
0001C3C2                            Obj10:					; XREF: Obj_Index
0001C3C2 4E75                       		rts	
0001C3C4                            ; ---------------------------------------------------------------------------
0001C3C4                            ; Subroutine to	animate	level graphics
0001C3C4                            ; ---------------------------------------------------------------------------
0001C3C4                            
0001C3C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3C4                            
0001C3C4                            
0001C3C4                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C3C4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C3C8 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C3CA 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C3D0 6100 0000                  		bsr.w	AniArt_GiantRing
0001C3D4 7000                       		moveq	#0,d0
0001C3D6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C3DA D040                       		add.w	d0,d0
0001C3DC 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C3E0 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C3E4                            ; ===========================================================================
0001C3E4                            
0001C3E4                            AniArt_Pause:
0001C3E4 4E75                       		rts	
0001C3E6                            ; End of function AniArt_Load
0001C3E6                            
0001C3E6                            ; ===========================================================================
0001C3E6 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C3EA 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C3EE 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C3F2 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C3F4                            ; ===========================================================================
0001C3F4                            ; ---------------------------------------------------------------------------
0001C3F4                            ; Animated pattern routine - Green Hill
0001C3F4                            ; ---------------------------------------------------------------------------
0001C3F4                            
0001C3F4                            AniArt_GHZ:				; XREF: AniArt_Index
0001C3F4 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C3F8 6A00                       		bpl.s	loc_1C08A
0001C3FA 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C400 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C406 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C40A 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C40E 0240 0001                  		andi.w	#1,d0
0001C412 6700                       		beq.s	loc_1C078
0001C414 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C418                            
0001C418                            loc_1C078:
0001C418 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C422 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C426 6000 0000                  		bra.w	LoadTiles
0001C42A                            ; ===========================================================================
0001C42A                            
0001C42A                            loc_1C08A:
0001C42A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C42E 6A00                       		bpl.s	loc_1C0C0
0001C430 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C436 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C43C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C440 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C444 0240 0001                  		andi.w	#1,d0
0001C448 6700                       		beq.s	loc_1C0AE
0001C44A 43E9 0200                  		lea	$200(a1),a1
0001C44E                            
0001C44E                            loc_1C0AE:
0001C44E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C458 323C 000F                  		move.w	#$F,d1
0001C45C 6000 0000                  		bra.w	LoadTiles
0001C460                            ; ===========================================================================
0001C460                            
0001C460                            loc_1C0C0:
0001C460 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C464 6A00                       		bpl.s	locret_1C10C
0001C466 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C46C 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C470 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C474 0240 0003                  		andi.w	#3,d0
0001C478 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C47C 0800 0000                  		btst	#0,d0
0001C480 6600                       		bne.s	loc_1C0E8
0001C482 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C488                            
0001C488                            loc_1C0E8:
0001C488 EF48                       		lsl.w	#7,d0
0001C48A 3200                       		move.w	d0,d1
0001C48C D040                       		add.w	d0,d0
0001C48E D041                       		add.w	d1,d0
0001C490 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C49A 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C4A0 43F1 0000                  		lea	(a1,d0.w),a1
0001C4A4 323C 000B                  		move.w	#$B,d1
0001C4A8 6100 0000                  		bsr.w	LoadTiles
0001C4AC                            
0001C4AC                            locret_1C10C:
0001C4AC 4E75                       		rts	
0001C4AE                            ; ===========================================================================
0001C4AE 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C4B2                            ; ===========================================================================
0001C4B2                            ; ---------------------------------------------------------------------------
0001C4B2                            ; Animated pattern routine - Marble
0001C4B2                            ; ---------------------------------------------------------------------------
0001C4B2                            
0001C4B2                            AniArt_MZ:				; XREF: AniArt_Index
0001C4B2 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C4B6 6A00                       		bpl.s	loc_1C150
0001C4B8 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C4BE 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C4C4 7000                       		moveq	#0,d0
0001C4C6 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C4CA 5200                       		addq.b	#1,d0
0001C4CC 0C00 0003                  		cmpi.b	#3,d0
0001C4D0 6600                       		bne.s	loc_1C134
0001C4D2 7000                       		moveq	#0,d0
0001C4D4                            
0001C4D4                            loc_1C134:
0001C4D4 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C4D8 C0FC 0100                  		mulu.w	#$100,d0
0001C4DC D2C0                       		adda.w	d0,a1
0001C4DE 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C4E8 323C 0007                  		move.w	#7,d1
0001C4EC 6100 0000                  		bsr.w	LoadTiles
0001C4F0                            
0001C4F0                            loc_1C150:
0001C4F0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C4F4 6A00                       		bpl.s	loc_1C1AE
0001C4F6 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C4FC 7000                       		moveq	#0,d0
0001C4FE 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C502 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C508 EE58                       		ror.w	#7,d0
0001C50A D8C0                       		adda.w	d0,a4
0001C50C 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C516 7600                       		moveq	#0,d3
0001C518 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C51C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C520 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C524 343C 0003                  		move.w	#3,d2
0001C528                            
0001C528                            loc_1C188:
0001C528 3003                       		move.w	d3,d0
0001C52A D040                       		add.w	d0,d0
0001C52C 0240 001E                  		andi.w	#$1E,d0
0001C530 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C536 3033 0000                  		move.w	(a3,d0.w),d0
0001C53A 47F3 0000                  		lea	(a3,d0.w),a3
0001C53E 224C                       		movea.l	a4,a1
0001C540 323C 001F                  		move.w	#$1F,d1
0001C544 4E93                       		jsr	(a3)
0001C546 5843                       		addq.w	#4,d3
0001C548 51CA FFDE                  		dbf	d2,loc_1C188
0001C54C 4E75                       		rts	
0001C54E                            ; ===========================================================================
0001C54E                            
0001C54E                            loc_1C1AE:
0001C54E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C552 6A00 0000                  		bpl.w	locret_1C1EA
0001C556 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C55C 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C562 7000                       		moveq	#0,d0
0001C564 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C568 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C56C 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C572 C0FC 00C0                  		mulu.w	#$C0,d0
0001C576 D2C0                       		adda.w	d0,a1
0001C578 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C582 323C 0005                  		move.w	#5,d1
0001C586 6000 0000                  		bra.w	LoadTiles
0001C58A                            ; ===========================================================================
0001C58A                            
0001C58A                            locret_1C1EA:
0001C58A 4E75                       		rts	
0001C58C                            ; ===========================================================================
0001C58C                            ; ---------------------------------------------------------------------------
0001C58C                            ; Animated pattern routine - Scrap Brain
0001C58C                            ; ---------------------------------------------------------------------------
0001C58C                            
0001C58C                            AniArt_SBZ:				; XREF: AniArt_Index
0001C58C 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C590 6700                       		beq.s	loc_1C1F8
0001C592 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C596 6000                       		bra.s	loc_1C250
0001C598                            ; ===========================================================================
0001C598                            
0001C598                            loc_1C1F8:
0001C598 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C59C 6A00                       		bpl.s	loc_1C250
0001C59E 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C5A4 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C5AA 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C5B4 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C5B8 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C5BC 0240 0007                  		andi.w	#7,d0
0001C5C0 6700                       		beq.s	loc_1C234
0001C5C2 5340                       		subq.w	#1,d0
0001C5C4 C0FC 0180                  		mulu.w	#$180,d0
0001C5C8 43F1 0000                  		lea	(a1,d0.w),a1
0001C5CC 323C 000B                  		move.w	#$B,d1
0001C5D0 6000 0000                  		bra.w	LoadTiles
0001C5D4                            ; ===========================================================================
0001C5D4                            
0001C5D4                            loc_1C234:
0001C5D4 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C5DA                            
0001C5DA                            loc_1C23A:
0001C5DA 323C 0005                  		move.w	#5,d1
0001C5DE 6100 0000                  		bsr.w	LoadTiles
0001C5E2 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C5E8 323C 0005                  		move.w	#5,d1
0001C5EC 6000 0000                  		bra.w	LoadTiles
0001C5F0                            ; ===========================================================================
0001C5F0                            
0001C5F0                            loc_1C250:
0001C5F0 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C5F4 6700                       		beq.s	loc_1C25C
0001C5F6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C5FA 6000                       		bra.s	locret_1C2A0
0001C5FC                            ; ===========================================================================
0001C5FC                            
0001C5FC                            loc_1C25C:
0001C5FC 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C600 6A00                       		bpl.s	locret_1C2A0
0001C602 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C608 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C60E 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C618 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C61C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C620 0240 0007                  		andi.w	#7,d0
0001C624 6700                       		beq.s	loc_1C298
0001C626 5340                       		subq.w	#1,d0
0001C628 C0FC 0180                  		mulu.w	#$180,d0
0001C62C 43F1 0000                  		lea	(a1,d0.w),a1
0001C630 323C 000B                  		move.w	#$B,d1
0001C634 6000 0000                  		bra.w	LoadTiles
0001C638                            ; ===========================================================================
0001C638                            
0001C638                            loc_1C298:
0001C638 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C63E 609A                       		bra.s	loc_1C23A
0001C640                            ; ===========================================================================
0001C640                            
0001C640                            locret_1C2A0:
0001C640 4E75                       		rts	
0001C642                            ; ===========================================================================
0001C642                            ; ---------------------------------------------------------------------------
0001C642                            ; Animated pattern routine - ending sequence
0001C642                            ; ---------------------------------------------------------------------------
0001C642                            
0001C642                            AniArt_Ending:				; XREF: AniArt_Index
0001C642 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C646 6A00                       		bpl.s	loc_1C2F4
0001C648 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C64E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C654 45F8 9400                  		lea	($FFFF9400).w,a2
0001C658 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C65C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C660 0240 0001                  		andi.w	#1,d0
0001C664 6700                       		beq.s	loc_1C2CE
0001C666 43E9 0200                  		lea	$200(a1),a1
0001C66A 45EA 0200                  		lea	$200(a2),a2
0001C66E                            
0001C66E                            loc_1C2CE:
0001C66E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C678 323C 000F                  		move.w	#$F,d1
0001C67C 6100 0000                  		bsr.w	LoadTiles
0001C680 224A                       		movea.l	a2,a1
0001C682 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C68C 323C 000F                  		move.w	#$F,d1
0001C690 6000 0000                  		bra.w	LoadTiles
0001C694                            ; ===========================================================================
0001C694                            
0001C694                            loc_1C2F4:
0001C694 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C698 6A00                       		bpl.s	loc_1C33C
0001C69A 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C6A0 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C6A4 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C6A8 0240 0007                  		andi.w	#7,d0
0001C6AC 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C6B0 EF48                       		lsl.w	#7,d0
0001C6B2 3200                       		move.w	d0,d1
0001C6B4 D040                       		add.w	d0,d0
0001C6B6 D041                       		add.w	d1,d0
0001C6B8 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C6C2 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C6C8 43F1 0000                  		lea	(a1,d0.w),a1
0001C6CC 323C 000B                  		move.w	#$B,d1
0001C6D0 6000 0000                  		bra.w	LoadTiles
0001C6D4                            ; ===========================================================================
0001C6D4 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C6DC                            ; ===========================================================================
0001C6DC                            
0001C6DC                            loc_1C33C:
0001C6DC 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C6E0 6A00                       		bpl.s	loc_1C37A
0001C6E2 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C6E8 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C6EC 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C6F0 0240 0003                  		andi.w	#3,d0
0001C6F4 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C6F8 E148                       		lsl.w	#8,d0
0001C6FA D040                       		add.w	d0,d0
0001C6FC 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C706 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C70A 43F1 0000                  		lea	(a1,d0.w),a1
0001C70E 323C 000F                  		move.w	#$F,d1
0001C712 6000 0000                  		bra.w	LoadTiles
0001C716                            ; ===========================================================================
0001C716 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C71A                            ; ===========================================================================
0001C71A                            
0001C71A                            loc_1C37A:
0001C71A 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C71E 6A00                       		bpl.s	locret_1C3B4
0001C720 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C726 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C72A 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C72E 0240 0003                  		andi.w	#3,d0
0001C732 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C736 E148                       		lsl.w	#8,d0
0001C738 D040                       		add.w	d0,d0
0001C73A 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C744 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C748 43F1 0000                  		lea	(a1,d0.w),a1
0001C74C 323C 000F                  		move.w	#$F,d1
0001C750 6000 0000                  		bra.w	LoadTiles
0001C754                            ; ===========================================================================
0001C754                            
0001C754                            locret_1C3B4:
0001C754 4E75                       		rts	
0001C756                            ; ===========================================================================
0001C756                            
0001C756                            AniArt_none:				; XREF: AniArt_Index
0001C756 4E75                       		rts	
0001C758                            
0001C758                            ; ---------------------------------------------------------------------------
0001C758                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C758                            ; ---------------------------------------------------------------------------
0001C758                            
0001C758                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C758                            
0001C758                            
0001C758                            LoadTiles:
0001C758 2C99                       		move.l	(a1)+,(a6)
0001C75A 2C99                       		move.l	(a1)+,(a6)
0001C75C 2C99                       		move.l	(a1)+,(a6)
0001C75E 2C99                       		move.l	(a1)+,(a6)
0001C760 2C99                       		move.l	(a1)+,(a6)
0001C762 2C99                       		move.l	(a1)+,(a6)
0001C764 2C99                       		move.l	(a1)+,(a6)
0001C766 2C99                       		move.l	(a1)+,(a6)
0001C768 51C9 FFEE                  		dbf	d1,LoadTiles
0001C76C 4E75                       		rts	
0001C76E                            ; End of function LoadTiles
0001C76E                            
0001C76E                            ; ===========================================================================
0001C76E                            ; ---------------------------------------------------------------------------
0001C76E                            ; Animated pattern routine - more Marble Zone
0001C76E                            ; ---------------------------------------------------------------------------
0001C76E 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C772 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C776 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C77A 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C77E 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C782 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001C786 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001C78A 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001C78E                            ; ===========================================================================
0001C78E                            
0001C78E                            loc_1C3EE:				; XREF: AniArt_MZextra
0001C78E 2C91                       		move.l	(a1),(a6)
0001C790 43E9 0010                  		lea	$10(a1),a1
0001C794 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001C798 4E75                       		rts	
0001C79A                            ; ===========================================================================
0001C79A                            
0001C79A                            loc_1C3FA:				; XREF: AniArt_MZextra
0001C79A 2029 0002                  		move.l	2(a1),d0
0001C79E 1029 0001                  		move.b	1(a1),d0
0001C7A2 E098                       		ror.l	#8,d0
0001C7A4 2C80                       		move.l	d0,(a6)
0001C7A6 43E9 0010                  		lea	$10(a1),a1
0001C7AA 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001C7AE 4E75                       		rts	
0001C7B0                            ; ===========================================================================
0001C7B0                            
0001C7B0                            loc_1C410:				; XREF: AniArt_MZextra
0001C7B0 2CA9 0002                  		move.l	2(a1),(a6)
0001C7B4 43E9 0010                  		lea	$10(a1),a1
0001C7B8 51C9 FFF6                  		dbf	d1,loc_1C410
0001C7BC 4E75                       		rts	
0001C7BE                            ; ===========================================================================
0001C7BE                            
0001C7BE                            loc_1C41E:				; XREF: AniArt_MZextra
0001C7BE 2029 0004                  		move.l	4(a1),d0
0001C7C2 1029 0003                  		move.b	3(a1),d0
0001C7C6 E098                       		ror.l	#8,d0
0001C7C8 2C80                       		move.l	d0,(a6)
0001C7CA 43E9 0010                  		lea	$10(a1),a1
0001C7CE 51C9 FFEE                  		dbf	d1,loc_1C41E
0001C7D2 4E75                       		rts	
0001C7D4                            ; ===========================================================================
0001C7D4                            
0001C7D4                            loc_1C434:				; XREF: AniArt_MZextra
0001C7D4 2CA9 0004                  		move.l	4(a1),(a6)
0001C7D8 43E9 0010                  		lea	$10(a1),a1
0001C7DC 51C9 FFF6                  		dbf	d1,loc_1C434
0001C7E0 4E75                       		rts	
0001C7E2                            ; ===========================================================================
0001C7E2                            
0001C7E2                            loc_1C442:				; XREF: AniArt_MZextra
0001C7E2 2029 0006                  		move.l	6(a1),d0
0001C7E6 1029 0005                  		move.b	5(a1),d0
0001C7EA E098                       		ror.l	#8,d0
0001C7EC 2C80                       		move.l	d0,(a6)
0001C7EE 43E9 0010                  		lea	$10(a1),a1
0001C7F2 51C9 FFEE                  		dbf	d1,loc_1C442
0001C7F6 4E75                       		rts	
0001C7F8                            ; ===========================================================================
0001C7F8                            
0001C7F8                            loc_1C458:				; XREF: AniArt_MZextra
0001C7F8 2CA9 0006                  		move.l	6(a1),(a6)
0001C7FC 43E9 0010                  		lea	$10(a1),a1
0001C800 51C9 FFF6                  		dbf	d1,loc_1C458
0001C804 4E75                       		rts	
0001C806                            ; ===========================================================================
0001C806                            
0001C806                            loc_1C466:				; XREF: AniArt_MZextra
0001C806 2029 0008                  		move.l	8(a1),d0
0001C80A 1029 0007                  		move.b	7(a1),d0
0001C80E E098                       		ror.l	#8,d0
0001C810 2C80                       		move.l	d0,(a6)
0001C812 43E9 0010                  		lea	$10(a1),a1
0001C816 51C9 FFEE                  		dbf	d1,loc_1C466
0001C81A 4E75                       		rts	
0001C81C                            ; ===========================================================================
0001C81C                            
0001C81C                            loc_1C47C:				; XREF: AniArt_MZextra
0001C81C 2CA9 0008                  		move.l	8(a1),(a6)
0001C820 43E9 0010                  		lea	$10(a1),a1
0001C824 51C9 FFF6                  		dbf	d1,loc_1C47C
0001C828 4E75                       		rts	
0001C82A                            ; ===========================================================================
0001C82A                            
0001C82A                            loc_1C48A:				; XREF: AniArt_MZextra
0001C82A 2029 000A                  		move.l	$A(a1),d0
0001C82E 1029 0009                  		move.b	9(a1),d0
0001C832 E098                       		ror.l	#8,d0
0001C834 2C80                       		move.l	d0,(a6)
0001C836 43E9 0010                  		lea	$10(a1),a1
0001C83A 51C9 FFEE                  		dbf	d1,loc_1C48A
0001C83E 4E75                       		rts	
0001C840                            ; ===========================================================================
0001C840                            
0001C840                            loc_1C4A0:				; XREF: AniArt_MZextra
0001C840 2CA9 000A                  		move.l	$A(a1),(a6)
0001C844 43E9 0010                  		lea	$10(a1),a1
0001C848 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001C84C 4E75                       		rts	
0001C84E                            ; ===========================================================================
0001C84E                            
0001C84E                            loc_1C4AE:				; XREF: AniArt_MZextra
0001C84E 2029 000C                  		move.l	$C(a1),d0
0001C852 1029 000B                  		move.b	$B(a1),d0
0001C856 E098                       		ror.l	#8,d0
0001C858 2C80                       		move.l	d0,(a6)
0001C85A 43E9 0010                  		lea	$10(a1),a1
0001C85E 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001C862 4E75                       		rts	
0001C864                            ; ===========================================================================
0001C864                            
0001C864                            loc_1C4C4:				; XREF: AniArt_MZextra
0001C864 2CA9 000C                  		move.l	$C(a1),(a6)
0001C868 43E9 0010                  		lea	$10(a1),a1
0001C86C 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001C870 4E75                       		rts	
0001C872                            ; ===========================================================================
0001C872                            
0001C872                            loc_1C4D2:				; XREF: AniArt_MZextra
0001C872 2029 000C                  		move.l	$C(a1),d0
0001C876 E198                       		rol.l	#8,d0
0001C878 1011                       		move.b	0(a1),d0
0001C87A 2C80                       		move.l	d0,(a6)
0001C87C 43E9 0010                  		lea	$10(a1),a1
0001C880 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001C884 4E75                       		rts	
0001C886                            ; ===========================================================================
0001C886                            
0001C886                            loc_1C4E8:				; XREF: AniArt_MZextra
0001C886 3CA9 000E                  		move.w	$E(a1),(a6)
0001C88A 3C91                       		move.w	0(a1),(a6)
0001C88C 43E9 0010                  		lea	$10(a1),a1
0001C890 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001C894 4E75                       		rts	
0001C896                            ; ===========================================================================
0001C896                            
0001C896                            loc_1C4FA:				; XREF: AniArt_MZextra
0001C896 2011                       		move.l	0(a1),d0
0001C898 1029 000F                  		move.b	$F(a1),d0
0001C89C E098                       		ror.l	#8,d0
0001C89E 2C80                       		move.l	d0,(a6)
0001C8A0 43E9 0010                  		lea	$10(a1),a1
0001C8A4 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001C8A8 4E75                       		rts	
0001C8AA                            
0001C8AA                            ; ---------------------------------------------------------------------------
0001C8AA                            ; Animated pattern routine - giant ring
0001C8AA                            ; ---------------------------------------------------------------------------
0001C8AA                            
0001C8AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8AA                            
0001C8AA                            
0001C8AA                            AniArt_GiantRing:			; XREF: AniArt_Load
0001C8AA 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001C8AE 6600                       		bne.s	loc_1C518
0001C8B0 4E75                       		rts	
0001C8B2                            ; ===========================================================================
0001C8B2                            
0001C8B2                            loc_1C518:
0001C8B2 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001C8B8 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001C8BE 7000                       		moveq	#0,d0
0001C8C0 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001C8C4 43F1 0000                  		lea	(a1,d0.w),a1
0001C8C8 0640 8000                  		addi.w	#$8000,d0
0001C8CC E588                       		lsl.l	#2,d0
0001C8CE E448                       		lsr.w	#2,d0
0001C8D0 0040 4000                  		ori.w	#$4000,d0
0001C8D4 4840                       		swap	d0
0001C8D6 2D40 0004                  		move.l	d0,4(a6)
0001C8DA 323C 000D                  		move.w	#$D,d1
0001C8DE 6000 FE78                  		bra.w	LoadTiles
0001C8E2                            ; End of function AniArt_GiantRing
0001C8E2                            
0001C8E2                            ; ===========================================================================
0001C8E2                            ; ---------------------------------------------------------------------------
0001C8E2                            ; Object 21 - SCORE, TIME, RINGS
0001C8E2                            ; ---------------------------------------------------------------------------
0001C8E2                            
0001C8E2                            Obj21:					; XREF: Obj_Index
0001C8E2 7000                       		moveq	#0,d0
0001C8E4 1028 0024                  		move.b	$24(a0),d0
0001C8E8 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001C8EC 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001C8F0                            ; ===========================================================================
0001C8F0 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001C8F2 0000                       		dc.w Obj21_Flash-Obj21_Index
0001C8F4                            ; ===========================================================================
0001C8F4                            
0001C8F4                            Obj21_Main:				; XREF: Obj21_Main
0001C8F4 5428 0024                  		addq.b	#2,$24(a0)
0001C8F8 317C 0090 0008             		move.w	#$90,8(a0)
0001C8FE 317C 0108 000A             		move.w	#$108,$A(a0)
0001C904 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001C90C 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001C912 117C 0000 0001             		move.b	#0,1(a0)
0001C918 117C 0000 0018             		move.b	#0,$18(a0)
0001C91E                            
0001C91E                            Obj21_Flash:				; XREF: Obj21_Main
0001C91E 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001C922 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001C924 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001C928 4EF9 0000 D95E             		jmp	DisplaySprite
0001C92E                            ; ===========================================================================
0001C92E                            
0001C92E                            Obj21_Flash2:
0001C92E 7000                       		moveq	#0,d0
0001C930 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001C936 6600                       		bne.s	Obj21_Display
0001C938 5240                       		addq.w	#1,d0		; make ring counter flash red
0001C93A 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001C940 6600                       		bne.s	Obj21_Display	; if not, branch
0001C942 5440                       		addq.w	#2,d0		; make time counter flash red
0001C944                            
0001C944                            Obj21_Display:
0001C944 1140 001A                  		move.b	d0,$1A(a0)
0001C948 4EF9 0000 D95E             		jmp	DisplaySprite
0001C94E                            ; ===========================================================================
0001C94E                            ; ---------------------------------------------------------------------------
0001C94E                            ; Sprite mappings - SCORE, TIME, RINGS
0001C94E                            ; ---------------------------------------------------------------------------
0001C94E                            Map_obj21:
0001C94E                            	include "_maps\obj21.asm"
0001C94E                            ; ---------------------------------------------------------------------------
0001C94E                            ; Sprite mappings - SCORE, TIME, RINGS
0001C94E                            ; ---------------------------------------------------------------------------
0001C94E 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001C952 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001C956 0A                         byte_1C5BC:	dc.b $A
0001C957 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C95C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C961 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C966 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001C96B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C970 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001C975 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001C97A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C97F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C984 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C989 00                         		dc.b 0
0001C98A 0A                         byte_1C5F0:	dc.b $A
0001C98B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C990 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C995 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C99A 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001C99F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C9A4 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001C9A9 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001C9AE A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C9B3 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C9B8 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C9BD 00                         		dc.b 0
0001C9BE 0A                         byte_1C624:	dc.b $A
0001C9BF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C9C4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C9C9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C9CE 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001C9D3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C9D8 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001C9DD A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001C9E2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C9E7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C9EC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C9F1 00                         		dc.b 0
0001C9F2 0A                         byte_1C658:	dc.b $A
0001C9F3 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C9F8 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C9FD 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CA02 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CA07 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CA0C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CA11 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CA16 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CA1B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CA20 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CA26 00                         		even
0001CA26 00                         		even
0001CA26                            
0001CA26                            ; ---------------------------------------------------------------------------
0001CA26                            ; Add points subroutine
0001CA26                            ; ---------------------------------------------------------------------------
0001CA26                            
0001CA26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA26                            
0001CA26                            
0001CA26                            AddPoints:
0001CA26 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CA2C 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CA30 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CA34 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CA36 223C 000F 423F             		move.l	#999999,d1
0001CA3C B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CA3E 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CA42 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CA44 2481                       		move.l	d1,(a2)
0001CA46                            
0001CA46                            loc_1C6AC:
0001CA46 2013                       		move.l	(a3),d0
0001CA48 B092                       		cmp.l	(a2),d0
0001CA4A 6500 0000                  		bcs.w	locret_1C6B6
0001CA4E 2480                       		move.l	d0,(a2)
0001CA50                            
0001CA50                            locret_1C6B6:
0001CA50 4E75                       		rts	
0001CA52                            ; End of function AddPoints
0001CA52                            
0001CA52                            ; ---------------------------------------------------------------------------
0001CA52                            ; Subroutine to	update the HUD
0001CA52                            ; ---------------------------------------------------------------------------
0001CA52                            
0001CA52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA52                            
0001CA52                            
0001CA52                            HudUpdate:
0001CA52 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CA56 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CA5A 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CA5E 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CA60 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CA64 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CA6A 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CA6E 6100 0000                  		bsr.w	Hud_Score
0001CA72                            
0001CA72                            Hud_ChkRings:
0001CA72 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CA76 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CA78 6A00                       		bpl.s	loc_1C6E4
0001CA7A 6100 0000                  		bsr.w	Hud_LoadZero
0001CA7E                            
0001CA7E                            loc_1C6E4:
0001CA7E 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CA82 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CA88 7200                       		moveq	#0,d1
0001CA8A 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CA8E 6100 0000                  		bsr.w	Hud_Rings
0001CA92                            
0001CA92                            Hud_ChkTime:
0001CA92 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CA96 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CA98 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CA9C 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CA9E 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CAA2 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CAA8 6700                       		beq.s	TimeOver	; if yes, branch
0001CAAA 5221                       		addq.b	#1,-(a1)
0001CAAC 0C11 003C                  		cmpi.b	#60,(a1)
0001CAB0 6500                       		bcs.s	Hud_ChkLives
0001CAB2 12BC 0000                  		move.b	#0,(a1)
0001CAB6 5221                       		addq.b	#1,-(a1)
0001CAB8 0C11 003C                  		cmpi.b	#60,(a1)
0001CABC 6500                       		bcs.s	loc_1C734
0001CABE 12BC 0000                  		move.b	#0,(a1)
0001CAC2 5221                       		addq.b	#1,-(a1)
0001CAC4 0C11 0009                  		cmpi.b	#9,(a1)
0001CAC8 6500                       		bcs.s	loc_1C734
0001CACA 12BC 0009                  		move.b	#9,(a1)
0001CACE                            
0001CACE                            loc_1C734:
0001CACE 203C 5E40 0003             		move.l	#$5E400003,d0
0001CAD4 7200                       		moveq	#0,d1
0001CAD6 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CADA 6100 0000                  		bsr.w	Hud_Mins
0001CADE 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CAE4 7200                       		moveq	#0,d1
0001CAE6 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CAEA 6100 0000                  		bsr.w	Hud_Secs
0001CAEE                            
0001CAEE                            Hud_ChkLives:
0001CAEE 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CAF2 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CAF4 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CAF8 6100 0000                  		bsr.w	Hud_Lives
0001CAFC                            
0001CAFC                            Hud_ChkBonus:
0001CAFC 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CB00 6700                       		beq.s	Hud_End		; if not, branch
0001CB02 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CB06 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CB10 7200                       		moveq	#0,d1
0001CB12 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CB16 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CB1A 7200                       		moveq	#0,d1
0001CB1C 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CB20 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CB24                            
0001CB24                            Hud_End:
0001CB24 4E75                       		rts	
0001CB26                            ; ===========================================================================
0001CB26                            
0001CB26                            TimeOver:				; XREF: Hud_ChkTime
0001CB26 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CB2A 41F8 D000                  		lea	($FFFFD000).w,a0
0001CB2E 2448                       		movea.l	a0,a2
0001CB30 6100 E90A                  		bsr.w	KillSonic
0001CB34 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CB3A 4E75                       		rts	
0001CB3C                            ; ===========================================================================
0001CB3C                            
0001CB3C                            HudDebug:				; XREF: HudUpdate
0001CB3C 6100 0000                  		bsr.w	HudDb_XY
0001CB40 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CB44 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CB46 6A00                       		bpl.s	HudDb_Rings
0001CB48 6100 0000                  		bsr.w	Hud_LoadZero
0001CB4C                            
0001CB4C                            HudDb_Rings:
0001CB4C 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CB50 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CB56 7200                       		moveq	#0,d1
0001CB58 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CB5C 6100 0000                  		bsr.w	Hud_Rings
0001CB60                            
0001CB60                            HudDb_ObjCount:
0001CB60 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CB66 7200                       		moveq	#0,d1
0001CB68 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001CB6C 6100 0000                  		bsr.w	Hud_Secs
0001CB70 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CB74 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001CB76 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CB7A 6100 0000                  		bsr.w	Hud_Lives
0001CB7E                            
0001CB7E                            HudDb_ChkBonus:
0001CB7E 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001CB82 6700                       		beq.s	HudDb_End	; if not, branch
0001CB84 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CB88 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001CB92 7200                       		moveq	#0,d1
0001CB94 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CB98 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CB9C 7200                       		moveq	#0,d1
0001CB9E 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CBA2 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CBA6                            
0001CBA6                            HudDb_End:
0001CBA6 4E75                       		rts	
0001CBA8                            ; End of function HudUpdate
0001CBA8                            
0001CBA8                            ; ---------------------------------------------------------------------------
0001CBA8                            ; Subroutine to	load "0" on the	HUD
0001CBA8                            ; ---------------------------------------------------------------------------
0001CBA8                            
0001CBA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CBA8                            
0001CBA8                            
0001CBA8                            Hud_LoadZero:				; XREF: HudUpdate
0001CBA8 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001CBB2 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CBB6 343C 0002                  		move.w	#2,d2
0001CBBA 6000                       		bra.s	loc_1C83E
0001CBBC                            ; End of function Hud_LoadZero
0001CBBC                            
0001CBBC                            ; ---------------------------------------------------------------------------
0001CBBC                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CBBC                            ; ---------------------------------------------------------------------------
0001CBBC                            
0001CBBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CBBC                            
0001CBBC                            
0001CBBC                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001CBBC 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CBC2 6100 0000                  		bsr.w	Hud_Lives
0001CBC6 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001CBD0 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001CBD4 343C 000E                  		move.w	#$E,d2
0001CBD8                            
0001CBD8                            loc_1C83E:				; XREF: Hud_LoadZero
0001CBD8 43FA 0000                  		lea	Art_Hud(pc),a1
0001CBDC                            
0001CBDC                            loc_1C842:
0001CBDC 323C 000F                  		move.w	#$F,d1
0001CBE0 101A                       		move.b	(a2)+,d0
0001CBE2 6B00                       		bmi.s	loc_1C85E
0001CBE4 4880                       		ext.w	d0
0001CBE6 EB48                       		lsl.w	#5,d0
0001CBE8 47F1 0000                  		lea	(a1,d0.w),a3
0001CBEC                            
0001CBEC                            loc_1C852:
0001CBEC 2C9B                       		move.l	(a3)+,(a6)
0001CBEE 51C9 FFFC                  		dbf	d1,loc_1C852
0001CBF2                            
0001CBF2                            loc_1C858:
0001CBF2 51CA FFE8                  		dbf	d2,loc_1C842
0001CBF6                            
0001CBF6 4E75                       		rts	
0001CBF8                            ; ===========================================================================
0001CBF8                            
0001CBF8                            loc_1C85E:
0001CBF8 2CBC 0000 0000             		move.l	#0,(a6)
0001CBFE 51C9 FFF8                  		dbf	d1,loc_1C85E
0001CC02                            
0001CC02 60EE                       		bra.s	loc_1C858
0001CC04                            ; End of function Hud_Base
0001CC04                            
0001CC04                            ; ===========================================================================
0001CC04 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001CC10 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001CC14                            ; ---------------------------------------------------------------------------
0001CC14                            ; Subroutine to	load debug mode	numbers	patterns
0001CC14                            ; ---------------------------------------------------------------------------
0001CC14                            
0001CC14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC14                            
0001CC14                            
0001CC14                            HudDb_XY:				; XREF: HudDebug
0001CC14 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001CC1E 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001CC22 4841                       		swap	d1
0001CC24 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001CC28 6100                       		bsr.s	HudDb_XY2
0001CC2A 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001CC2E 4841                       		swap	d1
0001CC30 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001CC34                            ; End of function HudDb_XY
0001CC34                            
0001CC34                            
0001CC34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC34                            
0001CC34                            
0001CC34                            HudDb_XY2:
0001CC34 7C07                       		moveq	#7,d6
0001CC36 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001CC3C                            
0001CC3C                            HudDb_XYLoop:
0001CC3C E959                       		rol.w	#4,d1
0001CC3E 3401                       		move.w	d1,d2
0001CC40 0242 000F                  		andi.w	#$F,d2
0001CC44 0C42 000A                  		cmpi.w	#$A,d2
0001CC48 6500                       		bcs.s	loc_1C8B2
0001CC4A 5E42                       		addq.w	#7,d2
0001CC4C                            
0001CC4C                            loc_1C8B2:
0001CC4C EB4A                       		lsl.w	#5,d2
0001CC4E 47F1 2000                  		lea	(a1,d2.w),a3
0001CC52 2C9B                       		move.l	(a3)+,(a6)
0001CC54 2C9B                       		move.l	(a3)+,(a6)
0001CC56 2C9B                       		move.l	(a3)+,(a6)
0001CC58 2C9B                       		move.l	(a3)+,(a6)
0001CC5A 2C9B                       		move.l	(a3)+,(a6)
0001CC5C 2C9B                       		move.l	(a3)+,(a6)
0001CC5E 2C9B                       		move.l	(a3)+,(a6)
0001CC60 2C9B                       		move.l	(a3)+,(a6)
0001CC62 4841                       		swap	d1
0001CC64 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001CC68                            
0001CC68 4E75                       		rts	
0001CC6A                            ; End of function HudDb_XY2
0001CC6A                            
0001CC6A                            ; ---------------------------------------------------------------------------
0001CC6A                            ; Subroutine to	load rings numbers patterns
0001CC6A                            ; ---------------------------------------------------------------------------
0001CC6A                            
0001CC6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC6A                            
0001CC6A                            
0001CC6A                            Hud_Rings:				; XREF: HudUpdate
0001CC6A 45F9 0000 0000             		lea	(Hud_100).l,a2
0001CC70 7C02                       		moveq	#2,d6
0001CC72 6000                       		bra.s	Hud_LoadArt
0001CC74                            ; End of function Hud_Rings
0001CC74                            
0001CC74                            ; ---------------------------------------------------------------------------
0001CC74                            ; Subroutine to	load score numbers patterns
0001CC74                            ; ---------------------------------------------------------------------------
0001CC74                            
0001CC74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC74                            
0001CC74                            
0001CC74                            Hud_Score:				; XREF: HudUpdate
0001CC74 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001CC7A 7C05                       		moveq	#5,d6
0001CC7C                            
0001CC7C                            Hud_LoadArt:
0001CC7C 7800                       		moveq	#0,d4
0001CC7E 43FA 0000                  		lea	Art_Hud(pc),a1
0001CC82                            
0001CC82                            Hud_ScoreLoop:
0001CC82 7400                       		moveq	#0,d2
0001CC84 261A                       		move.l	(a2)+,d3
0001CC86                            
0001CC86                            loc_1C8EC:
0001CC86 9283                       		sub.l	d3,d1
0001CC88 6500                       		bcs.s	loc_1C8F4
0001CC8A 5242                       		addq.w	#1,d2
0001CC8C 60F8                       		bra.s	loc_1C8EC
0001CC8E                            ; ===========================================================================
0001CC8E                            
0001CC8E                            loc_1C8F4:
0001CC8E D283                       		add.l	d3,d1
0001CC90 4A42                       		tst.w	d2
0001CC92 6700                       		beq.s	loc_1C8FE
0001CC94 383C 0001                  		move.w	#1,d4
0001CC98                            
0001CC98                            loc_1C8FE:
0001CC98 4A44                       		tst.w	d4
0001CC9A 6700                       		beq.s	loc_1C92C
0001CC9C ED4A                       		lsl.w	#6,d2
0001CC9E 2D40 0004                  		move.l	d0,4(a6)
0001CCA2 47F1 2000                  		lea	(a1,d2.w),a3
0001CCA6 2C9B                       		move.l	(a3)+,(a6)
0001CCA8 2C9B                       		move.l	(a3)+,(a6)
0001CCAA 2C9B                       		move.l	(a3)+,(a6)
0001CCAC 2C9B                       		move.l	(a3)+,(a6)
0001CCAE 2C9B                       		move.l	(a3)+,(a6)
0001CCB0 2C9B                       		move.l	(a3)+,(a6)
0001CCB2 2C9B                       		move.l	(a3)+,(a6)
0001CCB4 2C9B                       		move.l	(a3)+,(a6)
0001CCB6 2C9B                       		move.l	(a3)+,(a6)
0001CCB8 2C9B                       		move.l	(a3)+,(a6)
0001CCBA 2C9B                       		move.l	(a3)+,(a6)
0001CCBC 2C9B                       		move.l	(a3)+,(a6)
0001CCBE 2C9B                       		move.l	(a3)+,(a6)
0001CCC0 2C9B                       		move.l	(a3)+,(a6)
0001CCC2 2C9B                       		move.l	(a3)+,(a6)
0001CCC4 2C9B                       		move.l	(a3)+,(a6)
0001CCC6                            
0001CCC6                            loc_1C92C:
0001CCC6 0680 0040 0000             		addi.l	#$400000,d0
0001CCCC 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001CCD0                            
0001CCD0 4E75                       		rts	
0001CCD2                            ; End of function Hud_Score
0001CCD2                            
0001CCD2                            ; ---------------------------------------------------------------------------
0001CCD2                            ; Subroutine to	load countdown numbers on the continue screen
0001CCD2                            ; ---------------------------------------------------------------------------
0001CCD2                            
0001CCD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCD2                            
0001CCD2                            
0001CCD2                            ContScrCounter:				; XREF: ContinueScreen
0001CCD2 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001CCDC 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CCE2 45F9 0000 0000             		lea	(Hud_10).l,a2
0001CCE8 7C01                       		moveq	#1,d6
0001CCEA 7800                       		moveq	#0,d4
0001CCEC 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001CCF0                            
0001CCF0                            ContScr_Loop:
0001CCF0 7400                       		moveq	#0,d2
0001CCF2 261A                       		move.l	(a2)+,d3
0001CCF4                            
0001CCF4                            loc_1C95A:
0001CCF4 9283                       		sub.l	d3,d1
0001CCF6 6500                       		bcs.s	loc_1C962
0001CCF8 5242                       		addq.w	#1,d2
0001CCFA 60F8                       		bra.s	loc_1C95A
0001CCFC                            ; ===========================================================================
0001CCFC                            
0001CCFC                            loc_1C962:
0001CCFC D283                       		add.l	d3,d1
0001CCFE ED4A                       		lsl.w	#6,d2
0001CD00 47F1 2000                  		lea	(a1,d2.w),a3
0001CD04 2C9B                       		move.l	(a3)+,(a6)
0001CD06 2C9B                       		move.l	(a3)+,(a6)
0001CD08 2C9B                       		move.l	(a3)+,(a6)
0001CD0A 2C9B                       		move.l	(a3)+,(a6)
0001CD0C 2C9B                       		move.l	(a3)+,(a6)
0001CD0E 2C9B                       		move.l	(a3)+,(a6)
0001CD10 2C9B                       		move.l	(a3)+,(a6)
0001CD12 2C9B                       		move.l	(a3)+,(a6)
0001CD14 2C9B                       		move.l	(a3)+,(a6)
0001CD16 2C9B                       		move.l	(a3)+,(a6)
0001CD18 2C9B                       		move.l	(a3)+,(a6)
0001CD1A 2C9B                       		move.l	(a3)+,(a6)
0001CD1C 2C9B                       		move.l	(a3)+,(a6)
0001CD1E 2C9B                       		move.l	(a3)+,(a6)
0001CD20 2C9B                       		move.l	(a3)+,(a6)
0001CD22 2C9B                       		move.l	(a3)+,(a6)
0001CD24 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001CD28                            
0001CD28 4E75                       		rts	
0001CD2A                            ; End of function ContScrCounter
0001CD2A                            
0001CD2A                            ; ===========================================================================
0001CD2A                            ; ---------------------------------------------------------------------------
0001CD2A                            ; HUD counter sizes
0001CD2A                            ; ---------------------------------------------------------------------------
0001CD2A 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001CD2E 0000 2710                  Hud_10000:	dc.l 10000
0001CD32 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001CD36 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001CD3A 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001CD3E 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001CD42                            
0001CD42                            ; ---------------------------------------------------------------------------
0001CD42                            ; Subroutine to	load time numbers patterns
0001CD42                            ; ---------------------------------------------------------------------------
0001CD42                            
0001CD42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD42                            
0001CD42                            
0001CD42                            Hud_Mins:				; XREF: Hud_ChkTime
0001CD42 45F9 0001 CD3E             		lea	(Hud_1).l,a2
0001CD48 7C00                       		moveq	#0,d6
0001CD4A 6000                       		bra.s	loc_1C9BA
0001CD4C                            ; End of function Hud_Mins
0001CD4C                            
0001CD4C                            
0001CD4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD4C                            
0001CD4C                            
0001CD4C                            Hud_Secs:				; XREF: Hud_ChkTime
0001CD4C 45F9 0001 CD3A             		lea	(Hud_10).l,a2
0001CD52 7C01                       		moveq	#1,d6
0001CD54                            
0001CD54                            loc_1C9BA:
0001CD54 7800                       		moveq	#0,d4
0001CD56 43FA 0000                  		lea	Art_Hud(pc),a1
0001CD5A                            
0001CD5A                            Hud_TimeLoop:
0001CD5A 7400                       		moveq	#0,d2
0001CD5C 261A                       		move.l	(a2)+,d3
0001CD5E                            
0001CD5E                            loc_1C9C4:
0001CD5E 9283                       		sub.l	d3,d1
0001CD60 6500                       		bcs.s	loc_1C9CC
0001CD62 5242                       		addq.w	#1,d2
0001CD64 60F8                       		bra.s	loc_1C9C4
0001CD66                            ; ===========================================================================
0001CD66                            
0001CD66                            loc_1C9CC:
0001CD66 D283                       		add.l	d3,d1
0001CD68 4A42                       		tst.w	d2
0001CD6A 6700                       		beq.s	loc_1C9D6
0001CD6C 383C 0001                  		move.w	#1,d4
0001CD70                            
0001CD70                            loc_1C9D6:
0001CD70 ED4A                       		lsl.w	#6,d2
0001CD72 2D40 0004                  		move.l	d0,4(a6)
0001CD76 47F1 2000                  		lea	(a1,d2.w),a3
0001CD7A 2C9B                       		move.l	(a3)+,(a6)
0001CD7C 2C9B                       		move.l	(a3)+,(a6)
0001CD7E 2C9B                       		move.l	(a3)+,(a6)
0001CD80 2C9B                       		move.l	(a3)+,(a6)
0001CD82 2C9B                       		move.l	(a3)+,(a6)
0001CD84 2C9B                       		move.l	(a3)+,(a6)
0001CD86 2C9B                       		move.l	(a3)+,(a6)
0001CD88 2C9B                       		move.l	(a3)+,(a6)
0001CD8A 2C9B                       		move.l	(a3)+,(a6)
0001CD8C 2C9B                       		move.l	(a3)+,(a6)
0001CD8E 2C9B                       		move.l	(a3)+,(a6)
0001CD90 2C9B                       		move.l	(a3)+,(a6)
0001CD92 2C9B                       		move.l	(a3)+,(a6)
0001CD94 2C9B                       		move.l	(a3)+,(a6)
0001CD96 2C9B                       		move.l	(a3)+,(a6)
0001CD98 2C9B                       		move.l	(a3)+,(a6)
0001CD9A 0680 0040 0000             		addi.l	#$400000,d0
0001CDA0 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001CDA4                            
0001CDA4 4E75                       		rts	
0001CDA6                            ; End of function Hud_Secs
0001CDA6                            
0001CDA6                            ; ---------------------------------------------------------------------------
0001CDA6                            ; Subroutine to	load time/ring bonus numbers patterns
0001CDA6                            ; ---------------------------------------------------------------------------
0001CDA6                            
0001CDA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDA6                            
0001CDA6                            
0001CDA6                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001CDA6 45F9 0001 CD32             		lea	(Hud_1000).l,a2
0001CDAC 7C03                       		moveq	#3,d6
0001CDAE 7800                       		moveq	#0,d4
0001CDB0 43FA 0000                  		lea	Art_Hud(pc),a1
0001CDB4                            
0001CDB4                            Hud_BonusLoop:
0001CDB4 7400                       		moveq	#0,d2
0001CDB6 261A                       		move.l	(a2)+,d3
0001CDB8                            
0001CDB8                            loc_1CA1E:
0001CDB8 9283                       		sub.l	d3,d1
0001CDBA 6500                       		bcs.s	loc_1CA26
0001CDBC 5242                       		addq.w	#1,d2
0001CDBE 60F8                       		bra.s	loc_1CA1E
0001CDC0                            ; ===========================================================================
0001CDC0                            
0001CDC0                            loc_1CA26:
0001CDC0 D283                       		add.l	d3,d1
0001CDC2 4A42                       		tst.w	d2
0001CDC4 6700                       		beq.s	loc_1CA30
0001CDC6 383C 0001                  		move.w	#1,d4
0001CDCA                            
0001CDCA                            loc_1CA30:
0001CDCA 4A44                       		tst.w	d4
0001CDCC 6700                       		beq.s	Hud_ClrBonus
0001CDCE ED4A                       		lsl.w	#6,d2
0001CDD0 47F1 2000                  		lea	(a1,d2.w),a3
0001CDD4 2C9B                       		move.l	(a3)+,(a6)
0001CDD6 2C9B                       		move.l	(a3)+,(a6)
0001CDD8 2C9B                       		move.l	(a3)+,(a6)
0001CDDA 2C9B                       		move.l	(a3)+,(a6)
0001CDDC 2C9B                       		move.l	(a3)+,(a6)
0001CDDE 2C9B                       		move.l	(a3)+,(a6)
0001CDE0 2C9B                       		move.l	(a3)+,(a6)
0001CDE2 2C9B                       		move.l	(a3)+,(a6)
0001CDE4 2C9B                       		move.l	(a3)+,(a6)
0001CDE6 2C9B                       		move.l	(a3)+,(a6)
0001CDE8 2C9B                       		move.l	(a3)+,(a6)
0001CDEA 2C9B                       		move.l	(a3)+,(a6)
0001CDEC 2C9B                       		move.l	(a3)+,(a6)
0001CDEE 2C9B                       		move.l	(a3)+,(a6)
0001CDF0 2C9B                       		move.l	(a3)+,(a6)
0001CDF2 2C9B                       		move.l	(a3)+,(a6)
0001CDF4                            
0001CDF4                            loc_1CA5A:
0001CDF4 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001CDF8                            
0001CDF8 4E75                       		rts	
0001CDFA                            ; ===========================================================================
0001CDFA                            
0001CDFA                            Hud_ClrBonus:
0001CDFA 7A0F                       		moveq	#$F,d5
0001CDFC                            
0001CDFC                            Hud_ClrBonusLoop:
0001CDFC 2CBC 0000 0000             		move.l	#0,(a6)
0001CE02 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001CE06                            
0001CE06 60EC                       		bra.s	loc_1CA5A
0001CE08                            ; End of function Hud_TimeRingBonus
0001CE08                            
0001CE08                            ; ---------------------------------------------------------------------------
0001CE08                            ; Subroutine to	load uncompressed lives	counter	patterns
0001CE08                            ; ---------------------------------------------------------------------------
0001CE08                            
0001CE08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE08                            
0001CE08                            
0001CE08                            Hud_Lives:				; XREF: Hud_ChkLives
0001CE08 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001CE0E 7200                       		moveq	#0,d1
0001CE10 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001CE14 45F9 0001 CD3A             		lea	(Hud_10).l,a2
0001CE1A 7C01                       		moveq	#1,d6
0001CE1C 7800                       		moveq	#0,d4
0001CE1E 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001CE22                            
0001CE22                            Hud_LivesLoop:
0001CE22 2D40 0004                  		move.l	d0,4(a6)
0001CE26 7400                       		moveq	#0,d2
0001CE28 261A                       		move.l	(a2)+,d3
0001CE2A                            
0001CE2A                            loc_1CA90:
0001CE2A 9283                       		sub.l	d3,d1
0001CE2C 6500                       		bcs.s	loc_1CA98
0001CE2E 5242                       		addq.w	#1,d2
0001CE30 60F8                       		bra.s	loc_1CA90
0001CE32                            ; ===========================================================================
0001CE32                            
0001CE32                            loc_1CA98:
0001CE32 D283                       		add.l	d3,d1
0001CE34 4A42                       		tst.w	d2
0001CE36 6700                       		beq.s	loc_1CAA2
0001CE38 383C 0001                  		move.w	#1,d4
0001CE3C                            
0001CE3C                            loc_1CAA2:
0001CE3C 4A44                       		tst.w	d4
0001CE3E 6700                       		beq.s	Hud_ClrLives
0001CE40                            
0001CE40                            loc_1CAA6:
0001CE40 EB4A                       		lsl.w	#5,d2
0001CE42 47F1 2000                  		lea	(a1,d2.w),a3
0001CE46 2C9B                       		move.l	(a3)+,(a6)
0001CE48 2C9B                       		move.l	(a3)+,(a6)
0001CE4A 2C9B                       		move.l	(a3)+,(a6)
0001CE4C 2C9B                       		move.l	(a3)+,(a6)
0001CE4E 2C9B                       		move.l	(a3)+,(a6)
0001CE50 2C9B                       		move.l	(a3)+,(a6)
0001CE52 2C9B                       		move.l	(a3)+,(a6)
0001CE54 2C9B                       		move.l	(a3)+,(a6)
0001CE56                            
0001CE56                            loc_1CABC:
0001CE56 0680 0040 0000             		addi.l	#$400000,d0
0001CE5C 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001CE60                            
0001CE60 4E75                       		rts	
0001CE62                            ; ===========================================================================
0001CE62                            
0001CE62                            Hud_ClrLives:
0001CE62 4A46                       		tst.w	d6
0001CE64 67DA                       		beq.s	loc_1CAA6
0001CE66 7A07                       		moveq	#7,d5
0001CE68                            
0001CE68                            Hud_ClrLivesLoop:
0001CE68 2CBC 0000 0000             		move.l	#0,(a6)
0001CE6E 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001CE72 60E2                       		bra.s	loc_1CABC
0001CE74                            ; End of function Hud_Lives
0001CE74                            
0001CE74                            ; ===========================================================================
0001CE74                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D174                            		even
0001D174                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D2B4                            		even
0001D2B4                            ; ===========================================================================
0001D2B4                            ; ---------------------------------------------------------------------------
0001D2B4                            ; When debug mode is currently in use
0001D2B4                            ; ---------------------------------------------------------------------------
0001D2B4                            
0001D2B4                            DebugMode:				; XREF: Obj01; Obj09
0001D2B4 7000                       		moveq	#0,d0
0001D2B6 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D2BA 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D2BE 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D2C2                            ; ===========================================================================
0001D2C2 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D2C4 0000                       		dc.w Debug_Skip-Debug_Index
0001D2C6                            ; ===========================================================================
0001D2C6                            
0001D2C6                            Debug_Main:				; XREF: Debug_Index
0001D2C6 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D2CA 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D2D0 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D2D6 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D2DC 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D2E2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D2E8 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D2EE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D2F4 117C 0000 001A             		move.b	#0,$1A(a0)
0001D2FA 117C 0000 001C             		move.b	#0,$1C(a0)
0001D300 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D306 6600                       		bne.s	Debug_Zone	; if not, branch
0001D308 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D30E 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D314 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D316 6000                       		bra.s	Debug_UseList
0001D318                            ; ===========================================================================
0001D318                            
0001D318                            Debug_Zone:
0001D318 7000                       		moveq	#0,d0
0001D31A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D31E                            
0001D31E                            Debug_UseList:
0001D31E 45F9 0000 0000             		lea	(DebugList).l,a2
0001D324 D040                       		add.w	d0,d0
0001D326 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D32A 3C1A                       		move.w	(a2)+,d6
0001D32C BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D330 6200                       		bhi.s	loc_1CF9E
0001D332 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D338                            
0001D338                            loc_1CF9E:
0001D338 6100 0000                  		bsr.w	Debug_ShowItem
0001D33C 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D342 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D348                            
0001D348                            Debug_Skip:				; XREF: Debug_Index
0001D348 7006                       		moveq	#6,d0
0001D34A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D350 6700                       		beq.s	loc_1CFBE
0001D352 7000                       		moveq	#0,d0
0001D354 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D358                            
0001D358                            loc_1CFBE:
0001D358 45F9 0000 0000             		lea	(DebugList).l,a2
0001D35E D040                       		add.w	d0,d0
0001D360 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D364 3C1A                       		move.w	(a2)+,d6
0001D366 6100 0000                  		bsr.w	Debug_Control
0001D36A 4EF9 0000 D95E             		jmp	DisplaySprite
0001D370                            
0001D370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D370                            
0001D370                            
0001D370                            Debug_Control:
0001D370 7800                       		moveq	#0,d4
0001D372 323C 0001                  		move.w	#1,d1
0001D376 1838 F605                  		move.b	($FFFFF605).w,d4
0001D37A 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D37E 6600                       		bne.s	loc_1D018	; if yes, branch
0001D380 1038 F604                  		move.b	($FFFFF604).w,d0
0001D384 0240 000F                  		andi.w	#$F,d0
0001D388 6600                       		bne.s	loc_1D000
0001D38A 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D390 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D396 6000 0000                  		bra.w	Debug_BackItem
0001D39A                            ; ===========================================================================
0001D39A                            
0001D39A                            loc_1D000:
0001D39A 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D39E 6600                       		bne.s	loc_1D01C
0001D3A0 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D3A6 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D3AA 6600                       		bne.s	loc_1D018
0001D3AC 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D3B2                            
0001D3B2                            loc_1D018:
0001D3B2 1838 F604                  		move.b	($FFFFF604).w,d4
0001D3B6                            
0001D3B6                            loc_1D01C:
0001D3B6 7200                       		moveq	#0,d1
0001D3B8 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D3BC 5241                       		addq.w	#1,d1
0001D3BE 4841                       		swap	d1
0001D3C0 E881                       		asr.l	#4,d1
0001D3C2 2428 000C                  		move.l	$C(a0),d2
0001D3C6 2628 0008                  		move.l	8(a0),d3
0001D3CA 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D3CE 6700                       		beq.s	loc_1D03C	; if not, branch
0001D3D0 9481                       		sub.l	d1,d2
0001D3D2 6400                       		bcc.s	loc_1D03C
0001D3D4 7400                       		moveq	#0,d2
0001D3D6                            
0001D3D6                            loc_1D03C:
0001D3D6 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D3DA 6700                       		beq.s	loc_1D052	; if not, branch
0001D3DC D481                       		add.l	d1,d2
0001D3DE 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D3E4 6500                       		bcs.s	loc_1D052
0001D3E6 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D3EC                            
0001D3EC                            loc_1D052:
0001D3EC 0804 0002                  		btst	#2,d4
0001D3F0 6700                       		beq.s	loc_1D05E
0001D3F2 9681                       		sub.l	d1,d3
0001D3F4 6400                       		bcc.s	loc_1D05E
0001D3F6 7600                       		moveq	#0,d3
0001D3F8                            
0001D3F8                            loc_1D05E:
0001D3F8 0804 0003                  		btst	#3,d4
0001D3FC 6700                       		beq.s	loc_1D066
0001D3FE D681                       		add.l	d1,d3
0001D400                            
0001D400                            loc_1D066:
0001D400 2142 000C                  		move.l	d2,$C(a0)
0001D404 2143 0008                  		move.l	d3,8(a0)
0001D408                            
0001D408                            Debug_BackItem:
0001D408 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D40E 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D410 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D416 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D418 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D41C 6400                       		bcc.s	Debug_NoLoop
0001D41E DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D422 6000                       		bra.s	Debug_NoLoop
0001D424                            ; ===========================================================================
0001D424                            
0001D424                            Debug_NextItem:
0001D424 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D42A 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D42C 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D430 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D434 6200                       		bhi.s	Debug_NoLoop
0001D436 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D43C                            
0001D43C                            Debug_NoLoop:
0001D43C 6000 0000                  		bra.w	Debug_ShowItem
0001D440                            ; ===========================================================================
0001D440                            
0001D440                            Debug_MakeItem:
0001D440 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D446 6700                       		beq.s	Debug_Exit	; if not, branch
0001D448 4EB9 0000 DDE4             		jsr	SingleObjLoad
0001D44E 6600                       		bne.s	Debug_Exit
0001D450 3368 0008 0008             		move.w	8(a0),8(a1)
0001D456 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D45C 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D460 1368 0001 0001             		move.b	1(a0),1(a1)
0001D466 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D46C 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D472 7000                       		moveq	#0,d0
0001D474 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D478 E748                       		lsl.w	#3,d0
0001D47A 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D480 4E75                       		rts	
0001D482                            ; ===========================================================================
0001D482                            
0001D482                            Debug_Exit:
0001D482 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D488 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D48A 7000                       		moveq	#0,d0
0001D48C 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D490 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D498 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D49E 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D4A2 3140 000A                  		move.w	d0,$A(a0)
0001D4A6 3140 000E                  		move.w	d0,$E(a0)
0001D4AA 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D4B0 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D4B6 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D4BC 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D4BE 4278 F780                  		clr.w	($FFFFF780).w
0001D4C2 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D4C8 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D4D0 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D4D6 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D4DC 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D4E2 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D4E8                            
0001D4E8                            Debug_DoNothing:
0001D4E8 4E75                       		rts	
0001D4EA                            ; End of function Debug_Control
0001D4EA                            
0001D4EA                            
0001D4EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4EA                            
0001D4EA                            
0001D4EA                            Debug_ShowItem:				; XREF: Debug_Main
0001D4EA 7000                       		moveq	#0,d0
0001D4EC 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D4F0 E748                       		lsl.w	#3,d0
0001D4F2 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D4F8 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D4FE 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D504 4E75                       		rts	
0001D506                            ; End of function Debug_ShowItem
0001D506                            
0001D506                            ; ===========================================================================
0001D506                            ; ---------------------------------------------------------------------------
0001D506                            ; Debug	list pointers
0001D506                            ; ---------------------------------------------------------------------------
0001D506                            DebugList:
0001D506                            	include "_inc\Debug list pointers.asm"
0001D506                            ; ---------------------------------------------------------------------------
0001D506                            ; Debug	list pointers
0001D506                            ; ---------------------------------------------------------------------------
0001D506 0000                       	dc.w Debug_GHZ-DebugList
0001D508 0000                       	dc.w Debug_LZ-DebugList
0001D50A 0000                       	dc.w Debug_MZ-DebugList
0001D50C 0000                       	dc.w Debug_SLZ-DebugList
0001D50E 0000                       	dc.w Debug_SYZ-DebugList
0001D510 0000                       	dc.w Debug_SBZ-DebugList
0001D512 0000                       	dc.w Debug_Ending-DebugList
0001D512 0000                       	dc.w Debug_Ending-DebugList
0001D514                            
0001D514                            ; ---------------------------------------------------------------------------
0001D514                            ; Debug	list - Green Hill
0001D514                            ; ---------------------------------------------------------------------------
0001D514                            Debug_GHZ:
0001D514                            	include "_inc\Debug list - GHZ.asm"
0001D514                            ; ---------------------------------------------------------------------------
0001D514                            ; Debug	list - Green Hill
0001D514                            ; ---------------------------------------------------------------------------
0001D514 0010                       	dc.w $10			; number of items in list
0001D516 2500 A28A                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D51A 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D51E 2600 A882                  	dc.l Map_obj26+$26000000
0001D522 0000 0680                  	dc.b 0,	0, 6, $80
0001D526 1F00 9A5E                  	dc.l Map_obj1F+$1F000000
0001D52A 0000 0400                  	dc.b 0,	0, 4, 0
0001D52E 2200 9D3E                  	dc.l Map_obj22+$22000000
0001D532 0000 0444                  	dc.b 0,	0, 4, $44
0001D536 2B00 AE82                  	dc.l Map_obj2B+$2B000000
0001D53A 0000 047B                  	dc.b 0,	0, 4, $7B
0001D53E 3600 D346                  	dc.l Map_obj36+$36000000
0001D542 0000 051B                  	dc.b 0,	0, 5, $1B
0001D546 1800 845C                  	dc.l Map_obj18+$18000000
0001D54A 0000 4000                  	dc.b 0,	0, $40,	0
0001D54E 3B00 D46C                  	dc.l Map_obj3B+$3B000000
0001D552 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D556 4000 FAF8                  	dc.l Map_obj40+$40000000
0001D55A 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D55E 4100 E072                  	dc.l Map_obj41+$41000000
0001D562 0000 0523                  	dc.b 0,	0, 5, $23
0001D566 4200 E298                  	dc.l Map_obj42+$42000000
0001D56A 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D56E 4400 E5A6                  	dc.l Map_obj44+$44000000
0001D572 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D576 1900 84CA                  	dc.l Map_obj48+$19000000
0001D57A 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D57E 7901 748E                  	dc.l Map_obj79+$79000000
0001D582 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D586 4B00 A2CA                  	dc.l Map_obj4B+$4B000000
0001D58A 0000 2400                  	dc.b 0,	0, $24,	0
0001D58E 7D01 75DE                  	dc.l Map_obj7D+$7D000000
0001D592 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D596                            	even
0001D596                            	even
0001D596                            
0001D596                            ; ---------------------------------------------------------------------------
0001D596                            ; Debug	list - Labyrinth
0001D596                            ; ---------------------------------------------------------------------------
0001D596                            Debug_LZ:
0001D596                            	include "_inc\Debug list - LZ.asm"
0001D596                            ; ---------------------------------------------------------------------------
0001D596                            ; Debug	list - Labyrinth
0001D596                            ; ---------------------------------------------------------------------------
0001D596 0019                       	dc.w $19
0001D598 2500 A28A                  	dc.l Map_obj25+$25000000
0001D59C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D5A0 2600 A882                  	dc.l Map_obj26+$26000000
0001D5A4 0000 0680                  	dc.b 0,	0, 6, $80
0001D5A8 4100 E072                  	dc.l Map_obj41+$41000000
0001D5AC 0000 0523                  	dc.b 0,	0, 5, $23
0001D5B0 2C00 AF28                  	dc.l Map_obj2C+$2C000000
0001D5B4 0800 2486                  	dc.b 8,	0, $24,	$86
0001D5B8 2D00 B114                  	dc.l Map_obj2D+$2D000000
0001D5BC 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D5C0 1601 22D4                  	dc.l Map_obj16+$16000000
0001D5C4 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D5C8 1601 22D4                  	dc.l Map_obj16+$16000000
0001D5CC 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D5D0 3300 C592                  	dc.l Map_obj33+$33000000
0001D5D4 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D5D8 3200 C152                  	dc.l Map_obj32+$32000000
0001D5DC 0000 0513                  	dc.b 0,	0, 5, $13
0001D5E0 3600 D346                  	dc.l Map_obj36+$36000000
0001D5E4 0000 051B                  	dc.b 0,	0, 5, $1B
0001D5E8 5201 03F6                  	dc.l Map_obj52a+$52000000
0001D5EC 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D5F0 6101 24FC                  	dc.l Map_obj61+$61000000
0001D5F4 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D5F8 6101 24FC                  	dc.l Map_obj61+$61000000
0001D5FC 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D600 6101 24FC                  	dc.l Map_obj61+$61000000
0001D604 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D608 6201 2650                  	dc.l Map_obj62+$62000000
0001D60C 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D610 6101 24FC                  	dc.l Map_obj61+$61000000
0001D614 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D618 6101 24FC                  	dc.l Map_obj61+$61000000
0001D61C 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D620 6301 29B2                  	dc.l Map_obj63+$63000000
0001D624 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D628 6001 221E                  	dc.l Map_obj60+$60000000
0001D62C 0000 0467                  	dc.b 0,	0, 4, $67
0001D630 6401 2CF8                  	dc.l Map_obj64+$64000000
0001D634 8413 8348                  	dc.b $84, $13, $83, $48
0001D638 6501 2E80                  	dc.l Map_obj65+$65000000
0001D63C 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D640 6501 2E80                  	dc.l Map_obj65+$65000000
0001D644 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D648 0B01 166E                  	dc.l Map_obj0B+$B000000
0001D64C 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D650 0C01 173E                  	dc.l Map_obj0C+$C000000
0001D654 0200 4328                  	dc.b 2,	0, $43,	$28
0001D658 7901 748E                  	dc.l Map_obj79+$79000000
0001D65C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D660                            	even
0001D660                            	even
0001D660                            
0001D660                            ; ---------------------------------------------------------------------------
0001D660                            ; Debug	list - Marble
0001D660                            ; ---------------------------------------------------------------------------
0001D660                            Debug_MZ:
0001D660                            	include "_inc\Debug list - MZ.asm"
0001D660                            ; ---------------------------------------------------------------------------
0001D660                            ; Debug	list - Marble
0001D660                            ; ---------------------------------------------------------------------------
0001D660 0012                       	dc.w $12
0001D662 2500 A28A                  	dc.l Map_obj25+$25000000
0001D666 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D66A 2600 A882                  	dc.l Map_obj26+$26000000
0001D66E 0000 0680                  	dc.b 0,	0, 6, $80
0001D672 2200 9D3E                  	dc.l Map_obj22+$22000000
0001D676 0000 0444                  	dc.b 0,	0, 4, $44
0001D67A 3600 D346                  	dc.l Map_obj36+$36000000
0001D67E 0000 051B                  	dc.b 0,	0, 5, $1B
0001D682 4100 E072                  	dc.l Map_obj41+$41000000
0001D686 0000 0523                  	dc.b 0,	0, 5, $23
0001D68A 1300 B622                  	dc.l Map_obj14+$13000000
0001D68E 0000 0345                  	dc.b 0,	0, 3, $45
0001D692 4600 EC58                  	dc.l Map_obj46+$46000000
0001D696 0000 4000                  	dc.b 0,	0, $40,	0
0001D69A 4C00 F5A4                  	dc.l Map_obj4C+$4C000000
0001D69E 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D6A2 4E00 F888                  	dc.l Map_obj4E+$4E000000
0001D6A6 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D6AA 3300 C592                  	dc.l Map_obj33+$33000000
0001D6AE 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D6B2 5000 FC86                  	dc.l Map_obj50+$50000000
0001D6B6 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D6BA 5101 012A                  	dc.l Map_obj51+$51000000
0001D6BE 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D6C2 5201 03A0                  	dc.l Map_obj52+$52000000
0001D6C6 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D6CA 5300 8A62                  	dc.l Map_obj53+$53000000
0001D6CE 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D6D2 5400 F56A                  	dc.l Map_obj54+$54000000
0001D6D6 0000 8680                  	dc.b 0,	0, $86,	$80
0001D6DA 5501 0594                  	dc.l Map_obj55+$55000000
0001D6DE 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D6E2 7801 7108                  	dc.l Map_obj78+$78000000
0001D6E6 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D6EA 7901 748E                  	dc.l Map_obj79+$79000000
0001D6EE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D6F2                            	even
0001D6F2                            	even
0001D6F2                            
0001D6F2                            ; ---------------------------------------------------------------------------
0001D6F2                            ; Debug	list - Star Light
0001D6F2                            ; ---------------------------------------------------------------------------
0001D6F2                            Debug_SLZ:
0001D6F2                            	include "_inc\Debug list - SLZ.asm"
0001D6F2                            ; ---------------------------------------------------------------------------
0001D6F2                            ; Debug	list - Star Light
0001D6F2                            ; ---------------------------------------------------------------------------
0001D6F2 000F                       	dc.w $F
0001D6F4 2500 A28A                  	dc.l Map_obj25+$25000000
0001D6F8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D6FC 2600 A882                  	dc.l Map_obj26+$26000000
0001D700 0000 0680                  	dc.b 0,	0, 6, $80
0001D704 5901 1096                  	dc.l Map_obj59+$59000000
0001D708 0000 4000                  	dc.b 0,	0, $40,	0
0001D70C 5300 8A62                  	dc.l Map_obj53+$53000000
0001D710 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D714 1800 84BA                  	dc.l Map_obj18b+$18000000
0001D718 0000 4000                  	dc.b 0,	0, $40,	0
0001D71C 5A01 11D0                  	dc.l Map_obj5A+$5A000000
0001D720 0000 4000                  	dc.b 0,	0, $40,	0
0001D724 5B01 1388                  	dc.l Map_obj5B+$5B000000
0001D728 0000 4000                  	dc.b 0,	0, $40,	0
0001D72C 5D01 1958                  	dc.l Map_obj5D+$5D000000
0001D730 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D734 5E01 1CEA                  	dc.l Map_obj5E+$5E000000
0001D738 0000 0374                  	dc.b 0,	0, 3, $74
0001D73C 4100 E072                  	dc.l Map_obj41+$41000000
0001D740 0000 0523                  	dc.b 0,	0, 5, $23
0001D744 1300 B622                  	dc.l Map_obj14+$13000000
0001D748 0000 0480                  	dc.b 0,	0, 4, $80
0001D74C 1C00 8B72                  	dc.l Map_obj1C+$1C000000
0001D750 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D754 5F01 1F68                  	dc.l Map_obj5F+$5F000000
0001D758 0000 0400                  	dc.b 0,	0, 4, 0
0001D75C 6001 221E                  	dc.l Map_obj60+$60000000
0001D760 0000 2429                  	dc.b 0,	0, $24,	$29
0001D764 7901 748E                  	dc.l Map_obj79+$79000000
0001D768 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D76C                            	even
0001D76C                            	even
0001D76C                            
0001D76C                            ; ---------------------------------------------------------------------------
0001D76C                            ; Debug	list - Spring Yard
0001D76C                            ; ---------------------------------------------------------------------------
0001D76C                            Debug_SYZ:
0001D76C                            	include "_inc\Debug list - SYZ.asm"
0001D76C                            ; ---------------------------------------------------------------------------
0001D76C                            ; Debug	list - Spring Yard
0001D76C                            ; ---------------------------------------------------------------------------
0001D76C 000F                       	dc.w $F
0001D76E 2500 A28A                  	dc.l Map_obj25+$25000000
0001D772 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D776 2600 A882                  	dc.l Map_obj26+$26000000
0001D77A 0000 0680                  	dc.b 0,	0, 6, $80
0001D77E 3600 D346                  	dc.l Map_obj36+$36000000
0001D782 0000 051B                  	dc.b 0,	0, 5, $1B
0001D786 4100 E072                  	dc.l Map_obj41+$41000000
0001D78A 0000 0523                  	dc.b 0,	0, 5, $23
0001D78E 4300 E4F8                  	dc.l Map_obj43+$43000000
0001D792 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D796 1200 ECD6                  	dc.l Map_obj12+$12000000
0001D79A 0000 0000                  	dc.b 0,	0, 0, 0
0001D79E 4700 EE52                  	dc.l Map_obj47+$47000000
0001D7A2 0000 0380                  	dc.b 0,	0, 3, $80
0001D7A6 1F00 9A5E                  	dc.l Map_obj1F+$1F000000
0001D7AA 0000 0400                  	dc.b 0,	0, 4, 0
0001D7AE 2200 9D3E                  	dc.l Map_obj22+$22000000
0001D7B2 0000 0444                  	dc.b 0,	0, 4, $44
0001D7B6 5000 FC86                  	dc.l Map_obj50+$50000000
0001D7BA 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D7BE 1800 84A8                  	dc.l Map_obj18a+$18000000
0001D7C2 0000 4000                  	dc.b 0,	0, $40,	0
0001D7C6 5601 0A56                  	dc.l Map_obj56+$56000000
0001D7CA 0000 4000                  	dc.b 0,	0, $40,	0
0001D7CE 3200 C152                  	dc.l Map_obj32+$32000000
0001D7D2 0000 0513                  	dc.b 0,	0, 5, $13
0001D7D6 7801 7108                  	dc.l Map_obj78+$78000000
0001D7DA 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D7DE 7901 748E                  	dc.l Map_obj79+$79000000
0001D7E2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D7E6                            	even
0001D7E6                            	even
0001D7E6                            
0001D7E6                            ; ---------------------------------------------------------------------------
0001D7E6                            ; Debug	list - Scrap Brain
0001D7E6                            ; ---------------------------------------------------------------------------
0001D7E6                            Debug_SBZ:
0001D7E6                            	include "_inc\Debug list - SBZ.asm"
0001D7E6                            ; ---------------------------------------------------------------------------
0001D7E6                            ; Debug	list - Scrap Brain
0001D7E6                            ; ---------------------------------------------------------------------------
0001D7E6 001D                       	dc.w $1D
0001D7E8 2500 A28A                  	dc.l Map_obj25+$25000000
0001D7EC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D7F0 2600 A882                  	dc.l Map_obj26+$26000000
0001D7F4 0000 0680                  	dc.b 0,	0, 6, $80
0001D7F8 5F01 1F68                  	dc.l Map_obj5F+$5F000000
0001D7FC 0000 0400                  	dc.b 0,	0, 4, 0
0001D800 6001 221E                  	dc.l Map_obj60+$60000000
0001D804 0000 0429                  	dc.b 0,	0, 4, $29
0001D808 7801 7108                  	dc.l Map_obj78+$78000000
0001D80C 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001D810 1501 0DF2                  	dc.l Map_obj15b+$15000000
0001D814 0702 4391                  	dc.b 7,	2, $43,	$91
0001D818 6701 5A2C                  	dc.l Map_obj67+$67000000
0001D81C E000 C344                  	dc.b $E0, 0, $C3, $44
0001D820 5201 03A0                  	dc.l Map_obj52+$52000000
0001D824 2802 22C0                  	dc.b $28, 2, $22, $C0
0001D828 3200 C152                  	dc.l Map_obj32+$32000000
0001D82C 0000 0513                  	dc.b 0,	0, 5, $13
0001D830 6901 5C86                  	dc.l Map_obj69+$69000000
0001D834 0300 4492                  	dc.b 3,	0, $44,	$92
0001D838 6901 5CE0                  	dc.l Map_obj69a+$69000000
0001D83C 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001D840 6A01 5F3E                  	dc.l Map_obj6A+$6A000000
0001D844 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001D848 5300 8A62                  	dc.l Map_obj53+$53000000
0001D84C 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001D850 5201 03A0                  	dc.l Map_obj52+$52000000
0001D854 3903 4460                  	dc.b $39, 3, $44, $60
0001D858 6B01 630E                  	dc.l Map_obj6B+$6B000000
0001D85C 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001D860 2A00 8D08                  	dc.l Map_obj2A+$2A000000
0001D864 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001D868 6B01 630E                  	dc.l Map_obj6B+$6B000000
0001D86C 1301 22C0                  	dc.b $13, 1, $22, $C0
0001D870 6A01 5F3E                  	dc.l Map_obj6A+$6A000000
0001D874 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001D878 6B01 630E                  	dc.l Map_obj6B+$6B000000
0001D87C 2401 22C0                  	dc.b $24, 1, $22, $C0
0001D880 6A01 5F3E                  	dc.l Map_obj6A+$6A000000
0001D884 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001D888 6B01 630E                  	dc.l Map_obj6B+$6B000000
0001D88C 3401 22C0                  	dc.b $34, 1, $22, $C0
0001D890 6C01 64D0                  	dc.l Map_obj6C+$6C000000
0001D894 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001D898 6D00 E948                  	dc.l Map_obj6D+$6D000000
0001D89C 6400 83D9                  	dc.b $64, 0, $83, $D9
0001D8A0 6D00 E948                  	dc.l Map_obj6D+$6D000000
0001D8A4 640B 83D9                  	dc.b $64, $B, $83, $D9
0001D8A8 6E01 6586                  	dc.l Map_obj6E+$6E000000
0001D8AC 0400 047E                  	dc.b 4,	0, 4, $7E
0001D8B0 7001 69CC                  	dc.l Map_obj70+$70000000
0001D8B4 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001D8B8 7101 17FE                  	dc.l Map_obj71+$71000000
0001D8BC 1100 8680                  	dc.b $11, 0, $86, $80
0001D8C0 1E00 9176                  	dc.l Map_obj1E+$1E000000
0001D8C4 0400 2302                  	dc.b 4,	0, $23,	2
0001D8C8 7901 748E                  	dc.l Map_obj79+$79000000
0001D8CC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D8D0                            	even
0001D8D0                            	even
0001D8D0                            
0001D8D0                            ; ---------------------------------------------------------------------------
0001D8D0                            ; Debug	list - ending sequence / special stage
0001D8D0                            ; ---------------------------------------------------------------------------
0001D8D0                            Debug_Ending:
0001D8D0                            	include "_inc\Debug list - Ending and SS.asm"
0001D8D0                            ; ---------------------------------------------------------------------------
0001D8D0                            ; Debug	list - ending sequence / special stage
0001D8D0                            ; ---------------------------------------------------------------------------
0001D8D0 000D                       	dc.w $D
0001D8D2 2500 A28A                  	dc.l Map_obj25+$25000000
0001D8D6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D8DA 4700 EE52                  	dc.l Map_obj47+$47000000
0001D8DE 0000 0380                  	dc.b 0,	0, 3, $80
0001D8E2 2800 9790                  	dc.l Map_obj28a+$28000000
0001D8E6 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001D8EA 2800 9790                  	dc.l Map_obj28a+$28000000
0001D8EE 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001D8F2 2800 9790                  	dc.l Map_obj28a+$28000000
0001D8F6 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001D8FA 2800 9778                  	dc.l Map_obj28+$28000000
0001D8FE 0D00 0553                  	dc.b $D, 0, 5, $53
0001D902 2800 9778                  	dc.l Map_obj28+$28000000
0001D906 0E00 0553                  	dc.b $E, 0, 5, $53
0001D90A 2800 9778                  	dc.l Map_obj28+$28000000
0001D90E 0F00 0573                  	dc.b $F, 0, 5, $73
0001D912 2800 9778                  	dc.l Map_obj28+$28000000
0001D916 1000 0573                  	dc.b $10, 0, 5,	$73
0001D91A 2800 9790                  	dc.l Map_obj28a+$28000000
0001D91E 1100 0585                  	dc.b $11, 0, 5,	$85
0001D922 2800 97A8                  	dc.l Map_obj28b+$28000000
0001D926 1200 0593                  	dc.b $12, 0, 5,	$93
0001D92A 2800 9790                  	dc.l Map_obj28a+$28000000
0001D92E 1300 0565                  	dc.b $13, 0, 5,	$65
0001D932 2800 97A8                  	dc.l Map_obj28b+$28000000
0001D936 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001D93A                            	even
0001D93A                            	even
0001D93A                            
0001D93A                            ; ---------------------------------------------------------------------------
0001D93A                            ; Main level load blocks
0001D93A                            ; ---------------------------------------------------------------------------
0001D93A                            MainLoadBlocks:
0001D93A                            	include "_inc\Main level load blocks.asm"
0001D93A                            ; ---------------------------------------------------------------------------
0001D93A                            ; Main level load blocks
0001D93A                            ;
0001D93A                            ; ===FORMAT===
0001D93A                            ; level	patterns + (1st	PLC num	* 10^6)
0001D93A                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001D93A                            ; 256x256 mappings
0001D93A                            ; blank, music (unused), pal index (unused), pal index
0001D93A                            ; ---------------------------------------------------------------------------
0001D93A 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001D93E 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001D942 0000 0000                  	dc.l Blk256_GHZ
0001D946 0081 0404                  	dc.b 0,	$81, 4,	4
0001D94A 0000 0000                  	dc.l Nem_LZ+$6000000
0001D94E 0000 0000                  	dc.l Blk16_LZ+$7000000
0001D952 0000 0000                  	dc.l Blk256_LZ
0001D956 0082 0505                  	dc.b 0,	$82, 5,	5
0001D95A 0000 0000                  	dc.l Nem_MZ+$8000000
0001D95E 0000 0000                  	dc.l Blk16_MZ+$9000000
0001D962 0000 0000                  	dc.l Blk256_MZ
0001D966 0083 0606                  	dc.b 0,	$83, 6,	6
0001D96A 0000 0000                  	dc.l Nem_SLZ+$A000000
0001D96E 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001D972 0000 0000                  	dc.l Blk256_SLZ
0001D976 0084 0707                  	dc.b 0,	$84, 7,	7
0001D97A 0000 0000                  	dc.l Nem_SYZ+$C000000
0001D97E 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001D982 0000 0000                  	dc.l Blk256_SYZ
0001D986 0085 0808                  	dc.b 0,	$85, 8,	8
0001D98A 0000 0000                  	dc.l Nem_SBZ+$E000000
0001D98E 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001D992 0000 0000                  	dc.l Blk256_SBZ
0001D996 0086 0909                  	dc.b 0,	$86, 9,	9
0001D99A 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001D99E 0000 0000                  	dc.l Blk16_GHZ
0001D9A2 0000 0000                  	dc.l Blk256_GHZ
0001D9A6 0086 1313                  	dc.b 0,	$86, $13, $13
0001D9AA                            	even
0001D9AA                            	even
0001D9AA                            
0001D9AA                            ; ---------------------------------------------------------------------------
0001D9AA                            ; Pattern load cues
0001D9AA                            ; ---------------------------------------------------------------------------
0001D9AA                            ArtLoadCues:
0001D9AA                            	include "_inc\Pattern load cues.asm"
0001D9AA                            ; ---------------------------------------------------------------------------
0001D9AA                            ; Pattern load cues - index
0001D9AA                            ; ---------------------------------------------------------------------------
0001D9AA 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001D9AE 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001D9B2 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001D9B6 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001D9BA 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001D9BE 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001D9C2 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001D9C6 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001D9CA 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001D9CE 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001D9D2 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001D9D6 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001D9DA 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001D9DE 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001D9E2 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001D9E6 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001D9EA                            ; ---------------------------------------------------------------------------
0001D9EA                            ; Pattern load cues - standard block 1
0001D9EA                            ; ---------------------------------------------------------------------------
0001D9EA 0004                       PLC_Main:	dc.w 4
0001D9EC 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001D9F0 F400                       		dc.w $F400
0001D9F2 0000 0000                  		dc.l Nem_Hud		; HUD
0001D9F6 D940                       		dc.w $D940
0001D9F8 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001D9FC FA80                       		dc.w $FA80
0001D9FE 0000 0000                  		dc.l Nem_Ring		; rings
0001DA02 F640                       		dc.w $F640
0001DA04 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DA08 F2E0                       		dc.w $F2E0
0001DA0A                            ; ---------------------------------------------------------------------------
0001DA0A                            ; Pattern load cues - standard block 2
0001DA0A                            ; ---------------------------------------------------------------------------
0001DA0A 0002                       PLC_Main2:	dc.w 2
0001DA0C 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DA10 D000                       		dc.w $D000
0001DA12 0000 0000                  		dc.l Nem_Shield		; shield
0001DA16 A820                       		dc.w $A820
0001DA18 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DA1C AB80                       		dc.w $AB80
0001DA1E                            ; ---------------------------------------------------------------------------
0001DA1E                            ; Pattern load cues - explosion
0001DA1E                            ; ---------------------------------------------------------------------------
0001DA1E 0000                       PLC_Explode:	dc.w 0
0001DA20 0000 0000                  		dc.l Nem_Explode	; explosion
0001DA24 B400                       		dc.w $B400
0001DA26                            ; ---------------------------------------------------------------------------
0001DA26                            ; Pattern load cues - game/time	over
0001DA26                            ; ---------------------------------------------------------------------------
0001DA26 0000                       PLC_GameOver:	dc.w 0
0001DA28 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DA2C ABC0                       		dc.w $ABC0
0001DA2E                            ; ---------------------------------------------------------------------------
0001DA2E                            ; Pattern load cues - Green Hill
0001DA2E                            ; ---------------------------------------------------------------------------
0001DA2E 000B                       PLC_GHZ:	dc.w $B
0001DA30 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DA34 0000                       		dc.w 0
0001DA36 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DA3A 39A0                       		dc.w $39A0
0001DA3C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DA40 6B00                       		dc.w $6B00
0001DA42 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DA46 7A00                       		dc.w $7A00
0001DA48 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DA4C 8000                       		dc.w $8000
0001DA4E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DA52 8880                       		dc.w $8880
0001DA54 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DA58 8F60                       		dc.w $8F60
0001DA5A 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DA5E 9360                       		dc.w $9360
0001DA60 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DA64 9E00                       		dc.w $9E00
0001DA66 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DA6A A360                       		dc.w $A360
0001DA6C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DA70 A460                       		dc.w $A460
0001DA72 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DA76 A660                       		dc.w $A660
0001DA78 0005                       PLC_GHZ2:	dc.w 5
0001DA7A 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DA7E 7000                       		dc.w $7000
0001DA80 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DA84 71C0                       		dc.w $71C0
0001DA86 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DA8A 7300                       		dc.w $7300
0001DA8C 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DA90 7540                       		dc.w $7540
0001DA92 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DA96 A1E0                       		dc.w $A1E0
0001DA98 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DA9C 6980                       		dc.w $6980
0001DA9E                            ; ---------------------------------------------------------------------------
0001DA9E                            ; Pattern load cues - Labyrinth
0001DA9E                            ; ---------------------------------------------------------------------------
0001DA9E 000B                       PLC_LZ:		dc.w $B
0001DAA0 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DAA4 0000                       		dc.w 0
0001DAA6 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DAAA 3C00                       		dc.w $3C00
0001DAAC 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DAB0 3E00                       		dc.w $3E00
0001DAB2 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DAB6 4B20                       		dc.w $4B20
0001DAB8 0000 0000                  		dc.l Nem_Water		; water	surface
0001DABC 6000                       		dc.w $6000
0001DABE 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DAC2 6200                       		dc.w $6200
0001DAC4 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DAC8 6500                       		dc.w $6500
0001DACA 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DACE 6900                       		dc.w $6900
0001DAD0 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DAD4 7780                       		dc.w $7780
0001DAD6 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DADA 7880                       		dc.w $7880
0001DADC 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DAE0 7980                       		dc.w $7980
0001DAE2 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DAE6 94C0                       		dc.w $94C0
0001DAE8 000C                       PLC_LZ2:	dc.w $C
0001DAEA 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DAEE 7BC0                       		dc.w $7BC0
0001DAF0 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DAF4 7CC0                       		dc.w $7CC0
0001DAF6 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DAFA 7EC0                       		dc.w $7EC0
0001DAFC 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DB00 5D20                       		dc.w $5D20
0001DB02 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DB06 8800                       		dc.w $8800
0001DB08 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DB0C 89E0                       		dc.w $89E0
0001DB0E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DB12 8CE0                       		dc.w $8CE0
0001DB14 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DB18 90C0                       		dc.w $90C0
0001DB1A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DB1E A1E0                       		dc.w $A1E0
0001DB20 0000 0000                  		dc.l Nem_Cork		; cork block
0001DB24 A000                       		dc.w $A000
0001DB26 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DB2A A360                       		dc.w $A360
0001DB2C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DB30 A460                       		dc.w $A460
0001DB32 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DB36 A660                       		dc.w $A660
0001DB38                            ; ---------------------------------------------------------------------------
0001DB38                            ; Pattern load cues - Marble
0001DB38                            ; ---------------------------------------------------------------------------
0001DB38 0009                       PLC_MZ:		dc.w 9
0001DB3A 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DB3E 0000                       		dc.w 0
0001DB40 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DB44 6000                       		dc.w $6000
0001DB46 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DB4A 68A0                       		dc.w $68A0
0001DB4C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DB50 7000                       		dc.w $7000
0001DB52 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DB56 71C0                       		dc.w $71C0
0001DB58 0000 0000                  		dc.l Nem_Lava		; lava
0001DB5C 7500                       		dc.w $7500
0001DB5E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DB62 8880                       		dc.w $8880
0001DB64 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DB68 8F60                       		dc.w $8F60
0001DB6A 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001DB6E 9700                       		dc.w $9700
0001DB70 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DB74 9FE0                       		dc.w $9FE0
0001DB76 0004                       PLC_MZ2:	dc.w 4
0001DB78 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001DB7C A260                       		dc.w $A260
0001DB7E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DB82 A360                       		dc.w $A360
0001DB84 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DB88 A460                       		dc.w $A460
0001DB8A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DB8E A660                       		dc.w $A660
0001DB90 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001DB94 5700                       		dc.w $5700
0001DB96                            ; ---------------------------------------------------------------------------
0001DB96                            ; Pattern load cues - Star Light
0001DB96                            ; ---------------------------------------------------------------------------
0001DB96 0008                       PLC_SLZ:	dc.w 8
0001DB98 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001DB9C 0000                       		dc.w 0
0001DB9E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DBA2 8000                       		dc.w $8000
0001DBA4 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DBA8 8520                       		dc.w $8520
0001DBAA 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DBAE 9000                       		dc.w $9000
0001DBB0 0000 0000                  		dc.l Nem_SlzBlock	; block
0001DBB4 9C00                       		dc.w $9C00
0001DBB6 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001DBBA A260                       		dc.w $A260
0001DBBC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DBC0 A360                       		dc.w $A360
0001DBC2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DBC6 A460                       		dc.w $A460
0001DBC8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DBCC A660                       		dc.w $A660
0001DBCE 0005                       PLC_SLZ2:	dc.w 5
0001DBD0 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001DBD4 6E80                       		dc.w $6E80
0001DBD6 0000 0000                  		dc.l Nem_Fan		; fan
0001DBDA 7400                       		dc.w $7400
0001DBDC 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001DBE0 7980                       		dc.w $7980
0001DBE2 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001DBE6 7B80                       		dc.w $7B80
0001DBE8 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001DBEC 9B00                       		dc.w $9B00
0001DBEE 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001DBF2 9E00                       		dc.w $9E00
0001DBF4                            ; ---------------------------------------------------------------------------
0001DBF4                            ; Pattern load cues - Spring Yard
0001DBF4                            ; ---------------------------------------------------------------------------
0001DBF4 0004                       PLC_SYZ:	dc.w 4
0001DBF6 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001DBFA 0000                       		dc.w 0
0001DBFC 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DC00 8000                       		dc.w $8000
0001DC02 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DC06 8880                       		dc.w $8880
0001DC08 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DC0C 8F60                       		dc.w $8F60
0001DC0E 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001DC12 9700                       		dc.w $9700
0001DC14 0007                       PLC_SYZ2:	dc.w 7
0001DC16 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DC1A 7000                       		dc.w $7000
0001DC1C 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DC20 72C0                       		dc.w $72C0
0001DC22 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001DC26 7740                       		dc.w $7740
0001DC28 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DC2C 9FE0                       		dc.w $9FE0
0001DC2E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DC32 A1E0                       		dc.w $A1E0
0001DC34 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DC38 A360                       		dc.w $A360
0001DC3A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DC3E A460                       		dc.w $A460
0001DC40 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DC44 A660                       		dc.w $A660
0001DC46                            ; ---------------------------------------------------------------------------
0001DC46                            ; Pattern load cues - Scrap Brain
0001DC46                            ; ---------------------------------------------------------------------------
0001DC46 000B                       PLC_SBZ:	dc.w $B
0001DC48 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001DC4C 0000                       		dc.w 0
0001DC4E 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001DC52 5800                       		dc.w $5800
0001DC54 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001DC58 5D00                       		dc.w $5D00
0001DC5A 0000 0000                  		dc.l Nem_Girder		; girder
0001DC5E 5E00                       		dc.w $5E00
0001DC60 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001DC64 6040                       		dc.w $6040
0001DC66 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001DC6A 6880                       		dc.w $6880
0001DC6C 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001DC70 6900                       		dc.w $6900
0001DC72 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DC76 7220                       		dc.w $7220
0001DC78 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001DC7C 76A0                       		dc.w $76A0
0001DC7E 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001DC82 7B20                       		dc.w $7B20
0001DC84 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DC88 7EA0                       		dc.w $7EA0
0001DC8A 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001DC8E 9860                       		dc.w $9860
0001DC90 000C                       PLC_SBZ2:	dc.w $C
0001DC92 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DC96 5600                       		dc.w $5600
0001DC98 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DC9C 8000                       		dc.w $8000
0001DC9E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DCA2 8520                       		dc.w $8520
0001DCA4 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001DCA8 8C00                       		dc.w $8C00
0001DCAA 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001DCAE 8DE0                       		dc.w $8DE0
0001DCB0 0000 0000                  		dc.l Nem_Electric	; electric orb
0001DCB4 8FC0                       		dc.w $8FC0
0001DCB6 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001DCBA 9240                       		dc.w $9240
0001DCBC 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DCC0 7F20                       		dc.w $7F20
0001DCC2 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001DCC6 9BE0                       		dc.w $9BE0
0001DCC8 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DCCC A1E0                       		dc.w $A1E0
0001DCCE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DCD2 A360                       		dc.w $A360
0001DCD4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DCD8 A460                       		dc.w $A460
0001DCDA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DCDE A660                       		dc.w $A660
0001DCE0                            ; ---------------------------------------------------------------------------
0001DCE0                            ; Pattern load cues - title card
0001DCE0                            ; ---------------------------------------------------------------------------
0001DCE0 0000                       PLC_TitleCard:	dc.w 0
0001DCE2 0000 0000                  		dc.l Nem_TitleCard
0001DCE6 B000                       		dc.w $B000
0001DCE8                            ; ---------------------------------------------------------------------------
0001DCE8                            ; Pattern load cues - act 3 boss
0001DCE8                            ; ---------------------------------------------------------------------------
0001DCE8 0005                       PLC_Boss:	dc.w 5
0001DCEA 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DCEE 8000                       		dc.w $8000
0001DCF0 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001DCF4 8D80                       		dc.w $8D80
0001DCF6 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001DCFA 93A0                       		dc.w $93A0
0001DCFC 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001DD00 A300                       		dc.w $A300
0001DD02 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001DD06 A300                       		dc.w $A300
0001DD08 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DD0C A540                       		dc.w $A540
0001DD0E                            ; ---------------------------------------------------------------------------
0001DD0E                            ; Pattern load cues - act 1/2 signpost
0001DD0E                            ; ---------------------------------------------------------------------------
0001DD0E 0002                       PLC_Signpost:	dc.w 2
0001DD10 0000 0000                  		dc.l Nem_SignPost	; signpost
0001DD14 D000                       		dc.w $D000
0001DD16 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001DD1A 96C0                       		dc.w $96C0
0001DD1C 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001DD20 8C40                       		dc.w $8C40
0001DD22                            ; ---------------------------------------------------------------------------
0001DD22                            ; Pattern load cues - beta special stage warp effect
0001DD22                            ; ---------------------------------------------------------------------------
0001DD22 0000                       PLC_Warp:	dc.w 0
0001DD24 0000 0000                  		dc.l Nem_Warp
0001DD28 A820                       		dc.w $A820
0001DD2A                            ; ---------------------------------------------------------------------------
0001DD2A                            ; Pattern load cues - special stage
0001DD2A                            ; ---------------------------------------------------------------------------
0001DD2A 0010                       PLC_SpeStage:	dc.w $10
0001DD2C 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001DD30 0000                       		dc.w 0
0001DD32 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001DD36 0A20                       		dc.w $A20
0001DD38 0000 0000                  		dc.l Nem_SSWalls	; walls
0001DD3C 2840                       		dc.w $2840
0001DD3E 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DD42 4760                       		dc.w $4760
0001DD44 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001DD48 4A20                       		dc.w $4A20
0001DD4A 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001DD4E 4C60                       		dc.w $4C60
0001DD50 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001DD54 5E00                       		dc.w $5E00
0001DD56 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001DD5A 6E00                       		dc.w $6E00
0001DD5C 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001DD60 7E00                       		dc.w $7E00
0001DD62 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001DD66 8E00                       		dc.w $8E00
0001DD68 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001DD6C 9E00                       		dc.w $9E00
0001DD6E 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001DD72 AE00                       		dc.w $AE00
0001DD74 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001DD78 BE00                       		dc.w $BE00
0001DD7A 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001DD7E EE00                       		dc.w $EE00
0001DD80 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001DD84 F2E0                       		dc.w $F2E0
0001DD86 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001DD8A F400                       		dc.w $F400
0001DD8C 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001DD90 F520                       		dc.w $F520
0001DD92 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001DD96 F2E0                       		dc.w $F2E0
0001DD98 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001DD9C F400                       		dc.w $F400
0001DD9E 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001DDA2 F520                       		dc.w $F520
0001DDA4                            ; ---------------------------------------------------------------------------
0001DDA4                            ; Pattern load cues - GHZ animals
0001DDA4                            ; ---------------------------------------------------------------------------
0001DDA4 0001                       PLC_GHZAnimals:	dc.w 1
0001DDA6 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DDAA B000                       		dc.w $B000
0001DDAC 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DDB0 B240                       		dc.w $B240
0001DDB2                            ; ---------------------------------------------------------------------------
0001DDB2                            ; Pattern load cues - LZ animals
0001DDB2                            ; ---------------------------------------------------------------------------
0001DDB2 0001                       PLC_LZAnimals:	dc.w 1
0001DDB4 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DDB8 B000                       		dc.w $B000
0001DDBA 0000 0000                  		dc.l Nem_Seal		; seal
0001DDBE B240                       		dc.w $B240
0001DDC0                            ; ---------------------------------------------------------------------------
0001DDC0                            ; Pattern load cues - MZ animals
0001DDC0                            ; ---------------------------------------------------------------------------
0001DDC0 0001                       PLC_MZAnimals:	dc.w 1
0001DDC2 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DDC6 B000                       		dc.w $B000
0001DDC8 0000 0000                  		dc.l Nem_Seal		; seal
0001DDCC B240                       		dc.w $B240
0001DDCE                            ; ---------------------------------------------------------------------------
0001DDCE                            ; Pattern load cues - SLZ animals
0001DDCE                            ; ---------------------------------------------------------------------------
0001DDCE 0001                       PLC_SLZAnimals:	dc.w 1
0001DDD0 0000 0000                  		dc.l Nem_Pig		; pig
0001DDD4 B000                       		dc.w $B000
0001DDD6 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DDDA B240                       		dc.w $B240
0001DDDC                            ; ---------------------------------------------------------------------------
0001DDDC                            ; Pattern load cues - SYZ animals
0001DDDC                            ; ---------------------------------------------------------------------------
0001DDDC 0001                       PLC_SYZAnimals:	dc.w 1
0001DDDE 0000 0000                  		dc.l Nem_Pig		; pig
0001DDE2 B000                       		dc.w $B000
0001DDE4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DDE8 B240                       		dc.w $B240
0001DDEA                            ; ---------------------------------------------------------------------------
0001DDEA                            ; Pattern load cues - SBZ animals
0001DDEA                            ; ---------------------------------------------------------------------------
0001DDEA 0001                       PLC_SBZAnimals:	dc.w 1
0001DDEC 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DDF0 B000                       		dc.w $B000
0001DDF2 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DDF6 B240                       		dc.w $B240
0001DDF8                            ; ---------------------------------------------------------------------------
0001DDF8                            ; Pattern load cues - special stage results screen
0001DDF8                            ; ---------------------------------------------------------------------------
0001DDF8 0001                       PLC_SpeStResult:dc.w 1
0001DDFA 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001DDFE A820                       		dc.w $A820
0001DE00 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001DE04 AA20                       		dc.w $AA20
0001DE06                            ; ---------------------------------------------------------------------------
0001DE06                            ; Pattern load cues - ending sequence
0001DE06                            ; ---------------------------------------------------------------------------
0001DE06 000E                       PLC_Ending:	dc.w $E
0001DE08 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DE0C 0000                       		dc.w 0
0001DE0E 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DE12 39A0                       		dc.w $39A0
0001DE14 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DE18 6B00                       		dc.w $6B00
0001DE1A 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001DE1E 7400                       		dc.w $7400
0001DE20 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DE24 78A0                       		dc.w $78A0
0001DE26 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001DE2A 7C20                       		dc.w $7C20
0001DE2C 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001DE30 A480                       		dc.w $A480
0001DE32 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DE36 AA60                       		dc.w $AA60
0001DE38 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DE3C ACA0                       		dc.w $ACA0
0001DE3E 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DE42 AE60                       		dc.w $AE60
0001DE44 0000 0000                  		dc.l Nem_Seal		; seal
0001DE48 B0A0                       		dc.w $B0A0
0001DE4A 0000 0000                  		dc.l Nem_Pig		; pig
0001DE4E B260                       		dc.w $B260
0001DE50 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DE54 B4A0                       		dc.w $B4A0
0001DE56 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DE5A B660                       		dc.w $B660
0001DE5C 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001DE60 B8A0                       		dc.w $B8A0
0001DE62                            ; ---------------------------------------------------------------------------
0001DE62                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001DE62                            ; ---------------------------------------------------------------------------
0001DE62 0002                       PLC_TryAgain:	dc.w 2
0001DE64 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DE68 78A0                       		dc.w $78A0
0001DE6A 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001DE6E 7C20                       		dc.w $7C20
0001DE70 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001DE74 B400                       		dc.w $B400
0001DE76                            ; ---------------------------------------------------------------------------
0001DE76                            ; Pattern load cues - Eggman on SBZ 2
0001DE76                            ; ---------------------------------------------------------------------------
0001DE76 0002                       PLC_EggmanSBZ2:	dc.w 2
0001DE78 0000 0000                  		dc.l Nem_SbzBlock	; block
0001DE7C A300                       		dc.w $A300
0001DE7E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001DE82 8000                       		dc.w $8000
0001DE84 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DE88 9400                       		dc.w $9400
0001DE8A                            ; ---------------------------------------------------------------------------
0001DE8A                            ; Pattern load cues - final boss
0001DE8A                            ; ---------------------------------------------------------------------------
0001DE8A 0004                       PLC_FZBoss:	dc.w 4
0001DE8C 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001DE90 7400                       		dc.w $7400
0001DE92 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001DE96 6000                       		dc.w $6000
0001DE98 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DE9C 8000                       		dc.w $8000
0001DE9E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001DEA2 8E00                       		dc.w $8E00
0001DEA4 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DEA8 A540                       		dc.w $A540
0001DEAA                            		even
0001DEAA                            		even
0001DEAA                            
0001DEAA                            		incbin	misc\padding.bin
0001DF98                            		even
0001DF98                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E3FA                            		even
0001E3FA                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E4F2                            		even
0001E4F2                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E606                            		even
0001E606                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F612                            		even
0001F612                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
0002276E                            		even
0002276E                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
000227A2                            		even
000227A2                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022860                            		even
00022860                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00022D08                            		even
00022D08                            ; ---------------------------------------------------------------------------
00022D08                            ; Sprite mappings - Sonic
00022D08                            ; ---------------------------------------------------------------------------
00022D08                            Map_Sonic:
00022D08                            	include "_maps\Sonic.asm"
00022D08                            Mappings:
00022D08 0000                       Mappings_0: 	dc.w Mappings_B2-Mappings
00022D0A 0000                       Mappings_2: 	dc.w Mappings_B3-Mappings
00022D0C 0000                       Mappings_4: 	dc.w Mappings_BE-Mappings
00022D0E 0000                       Mappings_6: 	dc.w Mappings_CE-Mappings
00022D10 0000                       Mappings_8: 	dc.w Mappings_DE-Mappings
00022D12 0000                       Mappings_A: 	dc.w Mappings_EE-Mappings
00022D14 0000                       Mappings_C: 	dc.w Mappings_FE-Mappings
00022D16 0000                       Mappings_E: 	dc.w Mappings_113-Mappings
00022D18 0000                       Mappings_10: 	dc.w Mappings_11E-Mappings
00022D1A 0000                       Mappings_12: 	dc.w Mappings_129-Mappings
00022D1C 0000                       Mappings_14: 	dc.w Mappings_13E-Mappings
00022D1E 0000                       Mappings_16: 	dc.w Mappings_149-Mappings
00022D20 0000                       Mappings_18: 	dc.w Mappings_159-Mappings
00022D22 0000                       Mappings_1A: 	dc.w Mappings_173-Mappings
00022D24 0000                       Mappings_1C: 	dc.w Mappings_192-Mappings
00022D26 0000                       Mappings_1E: 	dc.w Mappings_1A7-Mappings
00022D28 0000                       Mappings_20: 	dc.w Mappings_1C1-Mappings
00022D2A 0000                       Mappings_22: 	dc.w Mappings_1D6-Mappings
00022D2C 0000                       Mappings_24: 	dc.w Mappings_1F0-Mappings
00022D2E 0000                       Mappings_26: 	dc.w Mappings_205-Mappings
00022D30 0000                       Mappings_28: 	dc.w Mappings_210-Mappings
00022D32 0000                       Mappings_2A: 	dc.w Mappings_21B-Mappings
00022D34 0000                       Mappings_2C: 	dc.w Mappings_230-Mappings
00022D36 0000                       Mappings_2E: 	dc.w Mappings_23B-Mappings
00022D38 0000                       Mappings_30: 	dc.w Mappings_24B-Mappings
00022D3A 0000                       Mappings_32: 	dc.w Mappings_26A-Mappings
00022D3C 0000                       Mappings_34: 	dc.w Mappings_289-Mappings
00022D3E 0000                       Mappings_36: 	dc.w Mappings_29E-Mappings
00022D40 0000                       Mappings_38: 	dc.w Mappings_2B8-Mappings
00022D42 0000                       Mappings_3A: 	dc.w Mappings_2CD-Mappings
00022D44 0000                       Mappings_3C: 	dc.w Mappings_2E7-Mappings
00022D46 0000                       Mappings_3E: 	dc.w Mappings_2F2-Mappings
00022D48 0000                       Mappings_40: 	dc.w Mappings_2FD-Mappings
00022D4A 0000                       Mappings_42: 	dc.w Mappings_308-Mappings
00022D4C 0000                       Mappings_44: 	dc.w Mappings_313-Mappings
00022D4E 0000                       Mappings_46: 	dc.w Mappings_328-Mappings
00022D50 0000                       Mappings_48: 	dc.w Mappings_338-Mappings
00022D52 0000                       Mappings_4A: 	dc.w Mappings_34D-Mappings
00022D54 0000                       Mappings_4C: 	dc.w Mappings_35D-Mappings
00022D56 0000                       Mappings_4E: 	dc.w Mappings_368-Mappings
00022D58 0000                       Mappings_50: 	dc.w Mappings_373-Mappings
00022D5A 0000                       Mappings_52: 	dc.w Mappings_37E-Mappings
00022D5C 0000                       Mappings_54: 	dc.w Mappings_389-Mappings
00022D5E 0000                       Mappings_56: 	dc.w Mappings_39E-Mappings
00022D60 0000                       Mappings_58: 	dc.w Mappings_3A9-Mappings
00022D62 0000                       Mappings_5A: 	dc.w Mappings_3BE-Mappings
00022D64 0000                       Mappings_5C: 	dc.w Mappings_3C9-Mappings
00022D66 0000                       Mappings_5E: 	dc.w Mappings_3CF-Mappings
00022D68 0000                       Mappings_60: 	dc.w Mappings_3D5-Mappings
00022D6A 0000                       Mappings_62: 	dc.w Mappings_3DB-Mappings
00022D6C 0000                       Mappings_64: 	dc.w Mappings_3E1-Mappings
00022D6E 0000                       Mappings_66: 	dc.w Mappings_3E7-Mappings
00022D70 0000                       Mappings_68: 	dc.w Mappings_3F2-Mappings
00022D72 0000                       Mappings_6A: 	dc.w Mappings_3F8-Mappings
00022D74 0000                       Mappings_6C: 	dc.w Mappings_403-Mappings
00022D76 0000                       Mappings_6E: 	dc.w Mappings_409-Mappings
00022D78 0000                       Mappings_70: 	dc.w Mappings_414-Mappings
00022D7A 0000                       Mappings_72: 	dc.w Mappings_429-Mappings
00022D7C 0000                       Mappings_74: 	dc.w Mappings_43E-Mappings
00022D7E 0000                       Mappings_76: 	dc.w Mappings_44E-Mappings
00022D80 0000                       Mappings_78: 	dc.w Mappings_45E-Mappings
00022D82 0000                       Mappings_7A: 	dc.w Mappings_46E-Mappings
00022D84 0000                       Mappings_7C: 	dc.w Mappings_479-Mappings
00022D86 0000                       Mappings_7E: 	dc.w Mappings_489-Mappings
00022D88 0000                       Mappings_80: 	dc.w Mappings_499-Mappings
00022D8A 0000                       Mappings_82: 	dc.w Mappings_4A9-Mappings
00022D8C 0000                       Mappings_84: 	dc.w Mappings_4BE-Mappings
00022D8E 0000                       Mappings_86: 	dc.w Mappings_4D3-Mappings
00022D90 0000                       Mappings_88: 	dc.w Mappings_4ED-Mappings
00022D92 0000                       Mappings_8A: 	dc.w Mappings_507-Mappings
00022D94 0000                       Mappings_8C: 	dc.w Mappings_512-Mappings
00022D96 0000                       Mappings_8E: 	dc.w Mappings_522-Mappings
00022D98 0000                       Mappings_90: 	dc.w Mappings_52D-Mappings
00022D9A 0000                       Mappings_92: 	dc.w Mappings_53D-Mappings
00022D9C 0000                       Mappings_94: 	dc.w Mappings_548-Mappings
00022D9E 0000                       Mappings_96: 	dc.w Mappings_558-Mappings
00022DA0 0000                       Mappings_98: 	dc.w Mappings_568-Mappings
00022DA2 0000                       Mappings_9A: 	dc.w Mappings_582-Mappings
00022DA4 0000                       Mappings_9C: 	dc.w Mappings_59C-Mappings
00022DA6 0000                       Mappings_9E: 	dc.w Mappings_5A7-Mappings
00022DA8 0000                       Mappings_A0: 	dc.w Mappings_5B7-Mappings
00022DAA 0000                       Mappings_A2: 	dc.w Mappings_5BD-Mappings
00022DAC 0000                       Mappings_A4: 	dc.w Mappings_5C3-Mappings
00022DAE 0000                       Mappings_A6: 	dc.w Mappings_5C9-Mappings
00022DB0 0000                       Mappings_A8: 	dc.w Mappings_5D9-Mappings
00022DB2 0000                       Mappings_AA: 	dc.w Mappings_5E9-Mappings
00022DB4 0000                       Mappings_AC: 	dc.w Mappings_5F9-Mappings
00022DB6 0000                       Mappings_AE: 	dc.w Mappings_609-Mappings
00022DB8 0000                       Mappings_B0: 	dc.w Mappings_614-Mappings
00022DBA 00                         Mappings_B2: 	dc.b $0
00022DBB 02                         Mappings_B3: 	dc.b $2
00022DBC ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00022DC1 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00022DC6 03                         Mappings_BE: 	dc.b $3
00022DC7 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00022DCC FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00022DD1 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00022DD6 03                         Mappings_CE: 	dc.b $3
00022DD7 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00022DDC FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00022DE1 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00022DE6 03                         Mappings_DE: 	dc.b $3
00022DE7 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00022DEC FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00022DF1 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00022DF6 03                         Mappings_EE: 	dc.b $3
00022DF7 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00022DFC 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00022E01 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00022E06 04                         Mappings_FE: 	dc.b $4
00022E07 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00022E0C FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00022E11 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00022E16 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00022E1B 02                         Mappings_113: 	dc.b $2
00022E1C EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00022E21 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00022E26 02                         Mappings_11E: 	dc.b $2
00022E27 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00022E2C FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00022E31 04                         Mappings_129: 	dc.b $4
00022E32 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00022E37 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00022E3C FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00022E41 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00022E46 02                         Mappings_13E: 	dc.b $2
00022E47 EC09 0000 F3               	dc.b $EC, $9, $0, $0, $F3
00022E4C FC0E 0006 EB               	dc.b $FC, $E, $0, $6, $EB
00022E51 03                         Mappings_149: 	dc.b $3
00022E52 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00022E57 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00022E5C 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00022E61 05                         Mappings_159: 	dc.b $5
00022E62 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00022E67 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00022E6C FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00022E71 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00022E76 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00022E7B 06                         Mappings_173: 	dc.b $6
00022E7C EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00022E81 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00022E86 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00022E8B 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00022E90 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00022E95 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00022E9A 04                         Mappings_192: 	dc.b $4
00022E9B ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00022EA0 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00022EA5 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00022EAA 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00022EAF 05                         Mappings_1A7: 	dc.b $5
00022EB0 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00022EB5 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00022EBA FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00022EBF 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00022EC4 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00022EC9 04                         Mappings_1C1: 	dc.b $4
00022ECA EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00022ECF EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00022ED4 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00022ED9 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00022EDE 05                         Mappings_1D6: 	dc.b $5
00022EDF ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00022EE4 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00022EE9 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00022EEE FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00022EF3 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00022EF8 04                         Mappings_1F0: 	dc.b $4
00022EF9 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00022EFE EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00022F03 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00022F08 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00022F0D 02                         Mappings_205: 	dc.b $2
00022F0E F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00022F13 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00022F18 02                         Mappings_210: 	dc.b $2
00022F19 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00022F1E F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00022F23 04                         Mappings_21B: 	dc.b $4
00022F24 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00022F29 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00022F2E FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00022F33 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00022F38 02                         Mappings_230: 	dc.b $2
00022F39 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00022F3E F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00022F43 03                         Mappings_23B: 	dc.b $3
00022F44 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00022F49 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00022F4E F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00022F53 06                         Mappings_24B: 	dc.b $6
00022F54 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00022F59 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00022F5E F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00022F63 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00022F68 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00022F6D FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00022F72 06                         Mappings_26A: 	dc.b $6
00022F73 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00022F78 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00022F7D EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00022F82 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00022F87 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00022F8C 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00022F91 04                         Mappings_289: 	dc.b $4
00022F92 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00022F97 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00022F9C EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00022FA1 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00022FA6 05                         Mappings_29E: 	dc.b $5
00022FA7 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00022FAC ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00022FB1 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00022FB6 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00022FBB 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00022FC0 04                         Mappings_2B8: 	dc.b $4
00022FC1 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00022FC6 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00022FCB EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00022FD0 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00022FD5 05                         Mappings_2CD: 	dc.b $5
00022FD6 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00022FDB EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00022FE0 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00022FE5 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00022FEA 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00022FEF 02                         Mappings_2E7: 	dc.b $2
00022FF0 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00022FF5 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00022FFA 02                         Mappings_2F2: 	dc.b $2
00022FFB EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023000 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023005 02                         Mappings_2FD: 	dc.b $2
00023006 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002300B FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023010 02                         Mappings_308: 	dc.b $2
00023011 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023016 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002301B 04                         Mappings_313: 	dc.b $4
0002301C EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023021 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023026 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002302B FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00023030 03                         Mappings_328: 	dc.b $3
00023031 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023036 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002303B FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023040 04                         Mappings_338: 	dc.b $4
00023041 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023046 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002304B FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023050 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00023055 03                         Mappings_34D: 	dc.b $3
00023056 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002305B EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023060 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023065 02                         Mappings_35D: 	dc.b $2
00023066 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002306B F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00023070 02                         Mappings_368: 	dc.b $2
00023071 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00023076 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002307B 02                         Mappings_373: 	dc.b $2
0002307C F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00023081 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00023086 02                         Mappings_37E: 	dc.b $2
00023087 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002308C F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00023091 04                         Mappings_389: 	dc.b $4
00023092 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00023097 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002309C EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000230A1 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000230A6 02                         Mappings_39E: 	dc.b $2
000230A7 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000230AC EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000230B1 04                         Mappings_3A9: 	dc.b $4
000230B2 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000230B7 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000230BC EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000230C1 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000230C6 02                         Mappings_3BE: 	dc.b $2
000230C7 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000230CC EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000230D1 01                         Mappings_3C9: 	dc.b $1
000230D2 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000230D7 01                         Mappings_3CF: 	dc.b $1
000230D8 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000230DD 01                         Mappings_3D5: 	dc.b $1
000230DE F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000230E3 01                         Mappings_3DB: 	dc.b $1
000230E4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000230E9 01                         Mappings_3E1: 	dc.b $1
000230EA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000230EF 02                         Mappings_3E7: 	dc.b $2
000230F0 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000230F5 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000230FA 01                         Mappings_3F2: 	dc.b $1
000230FB F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023100 02                         Mappings_3F8: 	dc.b $2
00023101 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00023106 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
0002310B 01                         Mappings_403: 	dc.b $1
0002310C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023111 02                         Mappings_409: 	dc.b $2
00023112 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00023117 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
0002311C 04                         Mappings_414: 	dc.b $4
0002311D ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00023122 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00023127 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
0002312C 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00023131 04                         Mappings_429: 	dc.b $4
00023132 F404 0000 FC               	dc.b $F4, $4, $0, $0, $FC
00023137 FC0D 0002 F4               	dc.b $FC, $D, $0, $2, $F4
0002313C 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00023141 0400 000D EC               	dc.b $4, $0, $0, $D, $EC
00023146 03                         Mappings_43E: 	dc.b $3
00023147 EC08 0800 E8               	dc.b $EC, $8, $8, $0, $E8
0002314C F402 0803 00               	dc.b $F4, $2, $8, $3, $0
00023151 F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
00023156 03                         Mappings_44E: 	dc.b $3
00023157 EC0E 0800 E8               	dc.b $EC, $E, $8, $0, $E8
0002315C 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
00023161 0C00 1814 00               	dc.b $C, $0, $18, $14, $0
00023166 03                         Mappings_45E: 	dc.b $3
00023167 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002316C FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00023171 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00023176 02                         Mappings_46E: 	dc.b $2
00023177 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
0002317C F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00023181 03                         Mappings_479: 	dc.b $3
00023182 F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
00023187 FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
0002318C 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00023191 03                         Mappings_489: 	dc.b $3
00023192 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00023197 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
0002319C 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
000231A1 03                         Mappings_499: 	dc.b $3
000231A2 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
000231A7 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
000231AC 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
000231B1 04                         Mappings_4A9: 	dc.b $4
000231B2 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000231B7 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000231BC F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000231C1 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000231C6 04                         Mappings_4BE: 	dc.b $4
000231C7 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000231CC 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000231D1 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000231D6 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000231DB 05                         Mappings_4D3: 	dc.b $5
000231DC E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000231E1 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000231E6 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000231EB 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000231F0 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000231F5 05                         Mappings_4ED: 	dc.b $5
000231F6 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000231FB E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00023200 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00023205 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
0002320A 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002320F 02                         Mappings_507: 	dc.b $2
00023210 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00023215 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002321A 03                         Mappings_512: 	dc.b $3
0002321B EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00023220 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00023225 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002322A 02                         Mappings_522: 	dc.b $2
0002322B ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00023230 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00023235 03                         Mappings_52D: 	dc.b $3
00023236 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
0002323B 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00023240 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00023245 02                         Mappings_53D: 	dc.b $2
00023246 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002324B FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00023250 03                         Mappings_548: 	dc.b $3
00023251 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00023256 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
0002325B E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00023260 03                         Mappings_558: 	dc.b $3
00023261 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00023266 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002326B F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00023270 05                         Mappings_568: 	dc.b $5
00023271 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00023276 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002327B F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00023280 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00023285 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002328A 05                         Mappings_582: 	dc.b $5
0002328B E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00023290 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00023295 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002329A 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002329F 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000232A4 02                         Mappings_59C: 	dc.b $2
000232A5 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000232AA F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
000232AF 03                         Mappings_5A7: 	dc.b $3
000232B0 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000232B5 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
000232BA 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
000232BF 01                         Mappings_5B7: 	dc.b $1
000232C0 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
000232C5 01                         Mappings_5BD: 	dc.b $1
000232C6 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000232CB 01                         Mappings_5C3: 	dc.b $1
000232CC F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000232D1 03                         Mappings_5C9: 	dc.b $3
000232D2 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000232D7 FC05 0808 04               	dc.b $FC, $5, $8, $8, $4
000232DC 0408 080C EC               	dc.b $4, $8, $8, $C, $EC
000232E1 03                         Mappings_5D9: 	dc.b $3
000232E2 F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
000232E7 FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
000232EC 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000232F1 03                         Mappings_5E9: 	dc.b $3
000232F2 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000232F7 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000232FC 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00023301 03                         Mappings_5F9: 	dc.b $3
00023302 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00023307 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
0002330C 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00023311 02                         Mappings_609: 	dc.b $2
00023312 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00023317 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
0002331C 02                         Mappings_614: 	dc.b $2
0002331D F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00023322 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00023328 00                         	even
00023328 00                         	even
00023328                            
00023328                            ; ---------------------------------------------------------------------------
00023328                            ; Uncompressed graphics	loading	array for Sonic
00023328                            ; ---------------------------------------------------------------------------
00023328                            SonicDynPLC:
00023328                            	include "_inc\Sonic dynamic pattern load cues.asm"
00023328                            DPLCS:
00023328 0000                       DPLCS_0: 	dc.w DPLCS_B2-DPLCS
0002332A 0000                       DPLCS_2: 	dc.w DPLCS_B3-DPLCS
0002332C 0000                       DPLCS_4: 	dc.w DPLCS_B8-DPLCS
0002332E 0000                       DPLCS_6: 	dc.w DPLCS_BF-DPLCS
00023330 0000                       DPLCS_8: 	dc.w DPLCS_C6-DPLCS
00023332 0000                       DPLCS_A: 	dc.w DPLCS_CD-DPLCS
00023334 0000                       DPLCS_C: 	dc.w DPLCS_D4-DPLCS
00023336 0000                       DPLCS_E: 	dc.w DPLCS_DD-DPLCS
00023338 0000                       DPLCS_10: 	dc.w DPLCS_E2-DPLCS
0002333A 0000                       DPLCS_12: 	dc.w DPLCS_E7-DPLCS
0002333C 0000                       DPLCS_14: 	dc.w DPLCS_F0-DPLCS
0002333E 0000                       DPLCS_16: 	dc.w DPLCS_F5-DPLCS
00023340 0000                       DPLCS_18: 	dc.w DPLCS_FC-DPLCS
00023342 0000                       DPLCS_1A: 	dc.w DPLCS_107-DPLCS
00023344 0000                       DPLCS_1C: 	dc.w DPLCS_114-DPLCS
00023346 0000                       DPLCS_1E: 	dc.w DPLCS_11D-DPLCS
00023348 0000                       DPLCS_20: 	dc.w DPLCS_128-DPLCS
0002334A 0000                       DPLCS_22: 	dc.w DPLCS_131-DPLCS
0002334C 0000                       DPLCS_24: 	dc.w DPLCS_13C-DPLCS
0002334E 0000                       DPLCS_26: 	dc.w DPLCS_145-DPLCS
00023350 0000                       DPLCS_28: 	dc.w DPLCS_14A-DPLCS
00023352 0000                       DPLCS_2A: 	dc.w DPLCS_14F-DPLCS
00023354 0000                       DPLCS_2C: 	dc.w DPLCS_158-DPLCS
00023356 0000                       DPLCS_2E: 	dc.w DPLCS_15D-DPLCS
00023358 0000                       DPLCS_30: 	dc.w DPLCS_164-DPLCS
0002335A 0000                       DPLCS_32: 	dc.w DPLCS_171-DPLCS
0002335C 0000                       DPLCS_34: 	dc.w DPLCS_17E-DPLCS
0002335E 0000                       DPLCS_36: 	dc.w DPLCS_187-DPLCS
00023360 0000                       DPLCS_38: 	dc.w DPLCS_192-DPLCS
00023362 0000                       DPLCS_3A: 	dc.w DPLCS_19B-DPLCS
00023364 0000                       DPLCS_3C: 	dc.w DPLCS_1A6-DPLCS
00023366 0000                       DPLCS_3E: 	dc.w DPLCS_1AB-DPLCS
00023368 0000                       DPLCS_40: 	dc.w DPLCS_1B0-DPLCS
0002336A 0000                       DPLCS_42: 	dc.w DPLCS_1B5-DPLCS
0002336C 0000                       DPLCS_44: 	dc.w DPLCS_1BA-DPLCS
0002336E 0000                       DPLCS_46: 	dc.w DPLCS_1C3-DPLCS
00023370 0000                       DPLCS_48: 	dc.w DPLCS_1CA-DPLCS
00023372 0000                       DPLCS_4A: 	dc.w DPLCS_1D3-DPLCS
00023374 0000                       DPLCS_4C: 	dc.w DPLCS_1DA-DPLCS
00023376 0000                       DPLCS_4E: 	dc.w DPLCS_1DF-DPLCS
00023378 0000                       DPLCS_50: 	dc.w DPLCS_1E4-DPLCS
0002337A 0000                       DPLCS_52: 	dc.w DPLCS_1E9-DPLCS
0002337C 0000                       DPLCS_54: 	dc.w DPLCS_1EE-DPLCS
0002337E 0000                       DPLCS_56: 	dc.w DPLCS_1F7-DPLCS
00023380 0000                       DPLCS_58: 	dc.w DPLCS_1FC-DPLCS
00023382 0000                       DPLCS_5A: 	dc.w DPLCS_205-DPLCS
00023384 0000                       DPLCS_5C: 	dc.w DPLCS_20A-DPLCS
00023386 0000                       DPLCS_5E: 	dc.w DPLCS_20D-DPLCS
00023388 0000                       DPLCS_60: 	dc.w DPLCS_210-DPLCS
0002338A 0000                       DPLCS_62: 	dc.w DPLCS_213-DPLCS
0002338C 0000                       DPLCS_64: 	dc.w DPLCS_216-DPLCS
0002338E 0000                       DPLCS_66: 	dc.w DPLCS_219-DPLCS
00023390 0000                       DPLCS_68: 	dc.w DPLCS_21E-DPLCS
00023392 0000                       DPLCS_6A: 	dc.w DPLCS_221-DPLCS
00023394 0000                       DPLCS_6C: 	dc.w DPLCS_226-DPLCS
00023396 0000                       DPLCS_6E: 	dc.w DPLCS_229-DPLCS
00023398 0000                       DPLCS_70: 	dc.w DPLCS_22E-DPLCS
0002339A 0000                       DPLCS_72: 	dc.w DPLCS_237-DPLCS
0002339C 0000                       DPLCS_74: 	dc.w DPLCS_240-DPLCS
0002339E 0000                       DPLCS_76: 	dc.w DPLCS_247-DPLCS
000233A0 0000                       DPLCS_78: 	dc.w DPLCS_24E-DPLCS
000233A2 0000                       DPLCS_7A: 	dc.w DPLCS_255-DPLCS
000233A4 0000                       DPLCS_7C: 	dc.w DPLCS_258-DPLCS
000233A6 0000                       DPLCS_7E: 	dc.w DPLCS_25F-DPLCS
000233A8 0000                       DPLCS_80: 	dc.w DPLCS_266-DPLCS
000233AA 0000                       DPLCS_82: 	dc.w DPLCS_26D-DPLCS
000233AC 0000                       DPLCS_84: 	dc.w DPLCS_276-DPLCS
000233AE 0000                       DPLCS_86: 	dc.w DPLCS_27F-DPLCS
000233B0 0000                       DPLCS_88: 	dc.w DPLCS_28A-DPLCS
000233B2 0000                       DPLCS_8A: 	dc.w DPLCS_295-DPLCS
000233B4 0000                       DPLCS_8C: 	dc.w DPLCS_29A-DPLCS
000233B6 0000                       DPLCS_8E: 	dc.w DPLCS_2A1-DPLCS
000233B8 0000                       DPLCS_90: 	dc.w DPLCS_2A6-DPLCS
000233BA 0000                       DPLCS_92: 	dc.w DPLCS_2AD-DPLCS
000233BC 0000                       DPLCS_94: 	dc.w DPLCS_2B2-DPLCS
000233BE 0000                       DPLCS_96: 	dc.w DPLCS_2B9-DPLCS
000233C0 0000                       DPLCS_98: 	dc.w DPLCS_2C0-DPLCS
000233C2 0000                       DPLCS_9A: 	dc.w DPLCS_2CB-DPLCS
000233C4 0000                       DPLCS_9C: 	dc.w DPLCS_2D6-DPLCS
000233C6 0000                       DPLCS_9E: 	dc.w DPLCS_2DB-DPLCS
000233C8 0000                       DPLCS_A0: 	dc.w DPLCS_2E2-DPLCS
000233CA 0000                       DPLCS_A2: 	dc.w DPLCS_2E5-DPLCS
000233CC 0000                       DPLCS_A4: 	dc.w DPLCS_2E8-DPLCS
000233CE 0000                       DPLCS_A6: 	dc.w DPLCS_2EB-DPLCS
000233D0 0000                       DPLCS_A8: 	dc.w DPLCS_2F2-DPLCS
000233D2 0000                       DPLCS_AA: 	dc.w DPLCS_2F9-DPLCS
000233D4 0000                       DPLCS_AC: 	dc.w DPLCS_300-DPLCS
000233D6 0000                       DPLCS_AE: 	dc.w DPLCS_307-DPLCS
000233D8 0000                       DPLCS_B0: 	dc.w DPLCS_30C-DPLCS
000233DA 00                         DPLCS_B2: 	dc.b $0
000233DB 02                         DPLCS_B3: 	dc.b $2
000233DC F000                       	dc.b $F0, $0
000233DE 1010                       	dc.b $10, $10
000233E0 03                         DPLCS_B8: 	dc.b $3
000233E1 5012                       	dc.b $50, $12
000233E3 5018                       	dc.b $50, $18
000233E5 201E                       	dc.b $20, $1E
000233E7 03                         DPLCS_BF: 	dc.b $3
000233E8 5021                       	dc.b $50, $21
000233EA 5018                       	dc.b $50, $18
000233EC 201E                       	dc.b $20, $1E
000233EE 03                         DPLCS_C6: 	dc.b $3
000233EF 5021                       	dc.b $50, $21
000233F1 5018                       	dc.b $50, $18
000233F3 2027                       	dc.b $20, $27
000233F5 03                         DPLCS_CD: 	dc.b $3
000233F6 802A                       	dc.b $80, $2A
000233F8 2033                       	dc.b $20, $33
000233FA 2036                       	dc.b $20, $36
000233FC 04                         DPLCS_D4: 	dc.b $4
000233FD 7039                       	dc.b $70, $39
000233FF 5041                       	dc.b $50, $41
00023401 5047                       	dc.b $50, $47
00023403 104D                       	dc.b $10, $4D
00023405 02                         DPLCS_DD: 	dc.b $2
00023406 7039                       	dc.b $70, $39
00023408 B04F                       	dc.b $B0, $4F
0002340A 02                         DPLCS_E2: 	dc.b $2
0002340B 505B                       	dc.b $50, $5B
0002340D 8061                       	dc.b $80, $61
0002340F 04                         DPLCS_E7: 	dc.b $4
00023410 505B                       	dc.b $50, $5B
00023412 506A                       	dc.b $50, $6A
00023414 5070                       	dc.b $50, $70
00023416 1076                       	dc.b $10, $76
00023418 02                         DPLCS_F0: 	dc.b $2
00023419 505B                       	dc.b $50, $5B
0002341B B078                       	dc.b $B0, $78
0002341D 03                         DPLCS_F5: 	dc.b $3
0002341E 7039                       	dc.b $70, $39
00023420 3084                       	dc.b $30, $84
00023422 5088                       	dc.b $50, $88
00023424 05                         DPLCS_FC: 	dc.b $5
00023425 508E                       	dc.b $50, $8E
00023427 5094                       	dc.b $50, $94
00023429 209A                       	dc.b $20, $9A
0002342B 509D                       	dc.b $50, $9D
0002342D 00A3                       	dc.b $0, $A3
0002342F 06                         DPLCS_107: 	dc.b $6
00023430 508E                       	dc.b $50, $8E
00023432 10A4                       	dc.b $10, $A4
00023434 30A6                       	dc.b $30, $A6
00023436 50AA                       	dc.b $50, $AA
00023438 30B0                       	dc.b $30, $B0
0002343A 00B4                       	dc.b $0, $B4
0002343C 04                         DPLCS_114: 	dc.b $4
0002343D 50B5                       	dc.b $50, $B5
0002343F 10BB                       	dc.b $10, $BB
00023441 70BD                       	dc.b $70, $BD
00023443 20C5                       	dc.b $20, $C5
00023445 05                         DPLCS_11D: 	dc.b $5
00023446 50C8                       	dc.b $50, $C8
00023448 30CE                       	dc.b $30, $CE
0002344A 70D2                       	dc.b $70, $D2
0002344C 20DA                       	dc.b $20, $DA
0002344E 10DD                       	dc.b $10, $DD
00023450 04                         DPLCS_128: 	dc.b $4
00023451 50C8                       	dc.b $50, $C8
00023453 10DF                       	dc.b $10, $DF
00023455 70E1                       	dc.b $70, $E1
00023457 20E9                       	dc.b $20, $E9
00023459 05                         DPLCS_131: 	dc.b $5
0002345A 508E                       	dc.b $50, $8E
0002345C 10A4                       	dc.b $10, $A4
0002345E 009A                       	dc.b $0, $9A
00023460 70EC                       	dc.b $70, $EC
00023462 20F4                       	dc.b $20, $F4
00023464 04                         DPLCS_13C: 	dc.b $4
00023465 70F7                       	dc.b $70, $F7
00023467 50FF                       	dc.b $50, $FF
00023469 1105                       	dc.b $11, $5
0002346B 5107                       	dc.b $51, $7
0002346D 02                         DPLCS_145: 	dc.b $2
0002346E 70F7                       	dc.b $70, $F7
00023470 B10D                       	dc.b $B1, $D
00023472 02                         DPLCS_14A: 	dc.b $2
00023473 5119                       	dc.b $51, $19
00023475 811F                       	dc.b $81, $1F
00023477 04                         DPLCS_14F: 	dc.b $4
00023478 5119                       	dc.b $51, $19
0002347A 5128                       	dc.b $51, $28
0002347C 112E                       	dc.b $11, $2E
0002347E 5130                       	dc.b $51, $30
00023480 02                         DPLCS_158: 	dc.b $2
00023481 5119                       	dc.b $51, $19
00023483 B136                       	dc.b $B1, $36
00023485 03                         DPLCS_15D: 	dc.b $3
00023486 70F7                       	dc.b $70, $F7
00023488 010D                       	dc.b $1, $D
0002348A 8142                       	dc.b $81, $42
0002348C 06                         DPLCS_164: 	dc.b $6
0002348D 514B                       	dc.b $51, $4B
0002348F 1151                       	dc.b $11, $51
00023491 1153                       	dc.b $11, $53
00023493 8155                       	dc.b $81, $55
00023495 015E                       	dc.b $1, $5E
00023497 015F                       	dc.b $1, $5F
00023499 06                         DPLCS_171: 	dc.b $6
0002349A 514B                       	dc.b $51, $4B
0002349C 2160                       	dc.b $21, $60
0002349E 1163                       	dc.b $11, $63
000234A0 1165                       	dc.b $11, $65
000234A2 8167                       	dc.b $81, $67
000234A4 015E                       	dc.b $1, $5E
000234A6 04                         DPLCS_17E: 	dc.b $4
000234A7 5170                       	dc.b $51, $70
000234A9 1176                       	dc.b $11, $76
000234AB 8178                       	dc.b $81, $78
000234AD 1181                       	dc.b $11, $81
000234AF 05                         DPLCS_187: 	dc.b $5
000234B0 5183                       	dc.b $51, $83
000234B2 2189                       	dc.b $21, $89
000234B4 118C                       	dc.b $11, $8C
000234B6 718E                       	dc.b $71, $8E
000234B8 2196                       	dc.b $21, $96
000234BA 04                         DPLCS_192: 	dc.b $4
000234BB 5183                       	dc.b $51, $83
000234BD 1199                       	dc.b $11, $99
000234BF 819B                       	dc.b $81, $9B
000234C1 11A4                       	dc.b $11, $A4
000234C3 05                         DPLCS_19B: 	dc.b $5
000234C4 514B                       	dc.b $51, $4B
000234C6 81A6                       	dc.b $81, $A6
000234C8 1165                       	dc.b $11, $65
000234CA 11AF                       	dc.b $11, $AF
000234CC 015E                       	dc.b $1, $5E
000234CE 02                         DPLCS_1A6: 	dc.b $2
000234CF 51B1                       	dc.b $51, $B1
000234D1 B1B7                       	dc.b $B1, $B7
000234D3 02                         DPLCS_1AB: 	dc.b $2
000234D4 505B                       	dc.b $50, $5B
000234D6 B1C3                       	dc.b $B1, $C3
000234D8 02                         DPLCS_1B0: 	dc.b $2
000234D9 51B1                       	dc.b $51, $B1
000234DB B1CF                       	dc.b $B1, $CF
000234DD 02                         DPLCS_1B5: 	dc.b $2
000234DE 505B                       	dc.b $50, $5B
000234E0 B1DB                       	dc.b $B1, $DB
000234E2 04                         DPLCS_1BA: 	dc.b $4
000234E3 51E7                       	dc.b $51, $E7
000234E5 11ED                       	dc.b $11, $ED
000234E7 B1EF                       	dc.b $B1, $EF
000234E9 01FB                       	dc.b $1, $FB
000234EB 03                         DPLCS_1C3: 	dc.b $3
000234EC 51FC                       	dc.b $51, $FC
000234EE 1202                       	dc.b $12, $2
000234F0 B204                       	dc.b $B2, $4
000234F2 04                         DPLCS_1CA: 	dc.b $4
000234F3 51E7                       	dc.b $51, $E7
000234F5 1210                       	dc.b $12, $10
000234F7 B212                       	dc.b $B2, $12
000234F9 01FB                       	dc.b $1, $FB
000234FB 03                         DPLCS_1D3: 	dc.b $3
000234FC 51FC                       	dc.b $51, $FC
000234FE 1202                       	dc.b $12, $2
00023500 B21E                       	dc.b $B2, $1E
00023502 02                         DPLCS_1DA: 	dc.b $2
00023503 522A                       	dc.b $52, $2A
00023505 B230                       	dc.b $B2, $30
00023507 02                         DPLCS_1DF: 	dc.b $2
00023508 5119                       	dc.b $51, $19
0002350A B23C                       	dc.b $B2, $3C
0002350C 02                         DPLCS_1E4: 	dc.b $2
0002350D 522A                       	dc.b $52, $2A
0002350F B248                       	dc.b $B2, $48
00023511 02                         DPLCS_1E9: 	dc.b $2
00023512 5119                       	dc.b $51, $19
00023514 B254                       	dc.b $B2, $54
00023516 04                         DPLCS_1EE: 	dc.b $4
00023517 5260                       	dc.b $52, $60
00023519 1266                       	dc.b $12, $66
0002351B B268                       	dc.b $B2, $68
0002351D 0274                       	dc.b $2, $74
0002351F 02                         DPLCS_1F7: 	dc.b $2
00023520 7275                       	dc.b $72, $75
00023522 B27D                       	dc.b $B2, $7D
00023524 04                         DPLCS_1FC: 	dc.b $4
00023525 5260                       	dc.b $52, $60
00023527 1289                       	dc.b $12, $89
00023529 B28B                       	dc.b $B2, $8B
0002352B 0274                       	dc.b $2, $74
0002352D 02                         DPLCS_205: 	dc.b $2
0002352E 7275                       	dc.b $72, $75
00023530 B297                       	dc.b $B2, $97
00023532 01                         DPLCS_20A: 	dc.b $1
00023533 F2A3                       	dc.b $F2, $A3
00023535 01                         DPLCS_20D: 	dc.b $1
00023536 F2B3                       	dc.b $F2, $B3
00023538 01                         DPLCS_210: 	dc.b $1
00023539 F2C3                       	dc.b $F2, $C3
0002353B 01                         DPLCS_213: 	dc.b $1
0002353C F2D3                       	dc.b $F2, $D3
0002353E 01                         DPLCS_216: 	dc.b $1
0002353F F2E3                       	dc.b $F2, $E3
00023541 02                         DPLCS_219: 	dc.b $2
00023542 B2F3                       	dc.b $B2, $F3
00023544 22FF                       	dc.b $22, $FF
00023546 01                         DPLCS_21E: 	dc.b $1
00023547 F302                       	dc.b $F3, $2
00023549 02                         DPLCS_221: 	dc.b $2
0002354A B312                       	dc.b $B3, $12
0002354C 231E                       	dc.b $23, $1E
0002354E 01                         DPLCS_226: 	dc.b $1
0002354F F321                       	dc.b $F3, $21
00023551 02                         DPLCS_229: 	dc.b $2
00023552 5331                       	dc.b $53, $31
00023554 B337                       	dc.b $B3, $37
00023556 04                         DPLCS_22E: 	dc.b $4
00023557 5343                       	dc.b $53, $43
00023559 7349                       	dc.b $73, $49
0002355B 1351                       	dc.b $13, $51
0002355D 0353                       	dc.b $3, $53
0002355F 04                         DPLCS_237: 	dc.b $4
00023560 1354                       	dc.b $13, $54
00023562 7356                       	dc.b $73, $56
00023564 235E                       	dc.b $23, $5E
00023566 0361                       	dc.b $3, $61
00023568 03                         DPLCS_240: 	dc.b $3
00023569 2362                       	dc.b $23, $62
0002356B 2365                       	dc.b $23, $65
0002356D F368                       	dc.b $F3, $68
0002356F 03                         DPLCS_247: 	dc.b $3
00023570 B378                       	dc.b $B3, $78
00023572 7384                       	dc.b $73, $84
00023574 0078                       	dc.b $0, $78
00023576 03                         DPLCS_24E: 	dc.b $3
00023577 738C                       	dc.b $73, $8C
00023579 3394                       	dc.b $33, $94
0002357B 2398                       	dc.b $23, $98
0002357D 01                         DPLCS_255: 	dc.b $1
0002357E 839B                       	dc.b $83, $9B
00023580 03                         DPLCS_258: 	dc.b $3
00023581 73A4                       	dc.b $73, $A4
00023583 03AC                       	dc.b $3, $AC
00023585 33AD                       	dc.b $33, $AD
00023587 03                         DPLCS_25F: 	dc.b $3
00023588 73B1                       	dc.b $73, $B1
0002358A 33B9                       	dc.b $33, $B9
0002358C 23BD                       	dc.b $23, $BD
0002358E 03                         DPLCS_266: 	dc.b $3
0002358F B3C0                       	dc.b $B3, $C0
00023591 13CC                       	dc.b $13, $CC
00023593 03CE                       	dc.b $3, $CE
00023595 04                         DPLCS_26D: 	dc.b $4
00023596 B3CF                       	dc.b $B3, $CF
00023598 33DB                       	dc.b $33, $DB
0002359A 03DF                       	dc.b $3, $DF
0002359C 03E0                       	dc.b $3, $E0
0002359E 04                         DPLCS_276: 	dc.b $4
0002359F B3E1                       	dc.b $B3, $E1
000235A1 33ED                       	dc.b $33, $ED
000235A3 03F1                       	dc.b $3, $F1
000235A5 03F2                       	dc.b $3, $F2
000235A7 05                         DPLCS_27F: 	dc.b $5
000235A8 83F3                       	dc.b $83, $F3
000235AA 13FC                       	dc.b $13, $FC
000235AC 53FE                       	dc.b $53, $FE
000235AE 1404                       	dc.b $14, $4
000235B0 0406                       	dc.b $4, $6
000235B2 05                         DPLCS_28A: 	dc.b $5
000235B3 8407                       	dc.b $84, $7
000235B5 1410                       	dc.b $14, $10
000235B7 53FE                       	dc.b $53, $FE
000235B9 1404                       	dc.b $14, $4
000235BB 0406                       	dc.b $4, $6
000235BD 02                         DPLCS_295: 	dc.b $2
000235BE 8412                       	dc.b $84, $12
000235C0 741B                       	dc.b $74, $1B
000235C2 03                         DPLCS_29A: 	dc.b $3
000235C3 8423                       	dc.b $84, $23
000235C5 242C                       	dc.b $24, $2C
000235C7 142F                       	dc.b $14, $2F
000235C9 02                         DPLCS_2A1: 	dc.b $2
000235CA 8431                       	dc.b $84, $31
000235CC 743A                       	dc.b $74, $3A
000235CE 03                         DPLCS_2A6: 	dc.b $3
000235CF 8423                       	dc.b $84, $23
000235D1 2442                       	dc.b $24, $42
000235D3 1445                       	dc.b $14, $45
000235D5 02                         DPLCS_2AD: 	dc.b $2
000235D6 5447                       	dc.b $54, $47
000235D8 B44D                       	dc.b $B4, $4D
000235DA 03                         DPLCS_2B2: 	dc.b $3
000235DB 8459                       	dc.b $84, $59
000235DD 3462                       	dc.b $34, $62
000235DF 0466                       	dc.b $4, $66
000235E1 03                         DPLCS_2B9: 	dc.b $3
000235E2 7467                       	dc.b $74, $67
000235E4 146F                       	dc.b $14, $6F
000235E6 B471                       	dc.b $B4, $71
000235E8 05                         DPLCS_2C0: 	dc.b $5
000235E9 747D                       	dc.b $74, $7D
000235EB 1485                       	dc.b $14, $85
000235ED 5487                       	dc.b $54, $87
000235EF 348D                       	dc.b $34, $8D
000235F1 0491                       	dc.b $4, $91
000235F3 05                         DPLCS_2CB: 	dc.b $5
000235F4 7492                       	dc.b $74, $92
000235F6 1485                       	dc.b $14, $85
000235F8 549A                       	dc.b $54, $9A
000235FA 348D                       	dc.b $34, $8D
000235FC 0491                       	dc.b $4, $91
000235FE 02                         DPLCS_2D6: 	dc.b $2
000235FF 24A0                       	dc.b $24, $A0
00023601 F4A3                       	dc.b $F4, $A3
00023603 03                         DPLCS_2DB: 	dc.b $3
00023604 24B3                       	dc.b $24, $B3
00023606 B4B6                       	dc.b $B4, $B6
00023608 24C2                       	dc.b $24, $C2
0002360A 01                         DPLCS_2E2: 	dc.b $1
0002360B B4C5                       	dc.b $B4, $C5
0002360D 01                         DPLCS_2E5: 	dc.b $1
0002360E 54D1                       	dc.b $54, $D1
00023610 01                         DPLCS_2E8: 	dc.b $1
00023611 14D7                       	dc.b $14, $D7
00023613 03                         DPLCS_2EB: 	dc.b $3
00023614 738C                       	dc.b $73, $8C
00023616 3394                       	dc.b $33, $94
00023618 2398                       	dc.b $23, $98
0002361A 03                         DPLCS_2F2: 	dc.b $3
0002361B 73A4                       	dc.b $73, $A4
0002361D 03AC                       	dc.b $3, $AC
0002361F 33AD                       	dc.b $33, $AD
00023621 03                         DPLCS_2F9: 	dc.b $3
00023622 B4D9                       	dc.b $B4, $D9
00023624 14E5                       	dc.b $14, $E5
00023626 34E7                       	dc.b $34, $E7
00023628 03                         DPLCS_300: 	dc.b $3
00023629 54EB                       	dc.b $54, $EB
0002362B B4F1                       	dc.b $B4, $F1
0002362D 1074                       	dc.b $10, $74
0002362F 02                         DPLCS_307: 	dc.b $2
00023630 F4FD                       	dc.b $F4, $FD
00023632 250D                       	dc.b $25, $D
00023634 02                         DPLCS_30C: 	dc.b $2
00023635 F510                       	dc.b $F5, $10
00023637 1520                       	dc.b $15, $20
0002363A 00                         	even
0002363A 00                         	even
0002363A                            
0002363A                            ; ---------------------------------------------------------------------------
0002363A                            ; Uncompressed graphics	- Sonic
0002363A                            ; ---------------------------------------------------------------------------
0002363A                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002DA7A                            		even
0002DA7A                            ; ---------------------------------------------------------------------------
0002DA7A                            ; Compressed graphics - various
0002DA7A                            ; ---------------------------------------------------------------------------
0002DA7A                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002DB7E                            		even
0002DB7E                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002DBB8                            		even
0002DBB8                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002DD4E                            		even
0002DD4E                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0002DE96                            		even
0002DE96                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002DFA0                            		even
0002DFA0                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002DFF2                            		even
0002DFF2                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002E23A                            		even
0002E23A                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002E3C0                            		even
0002E3C0                            ; ---------------------------------------------------------------------------
0002E3C0                            ; Sprite mappings - walls of the special stage
0002E3C0                            ; ---------------------------------------------------------------------------
0002E3C0                            Map_SSWalls:
0002E3C0                            	include "_maps\SSwalls.asm"
0002E3C0                            ; ---------------------------------------------------------------------------
0002E3C0                            ; Sprite mappings - walls of the special stage
0002E3C0                            ; ---------------------------------------------------------------------------
0002E3C0 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002E3C4 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002E3C8 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002E3CC 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002E3D0 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002E3D4 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002E3D8 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002E3DC 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002E3E0 01                         byte_2C584:	dc.b 1
0002E3E1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002E3E6 01                         byte_2C58A:	dc.b 1
0002E3E7 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002E3EC 01                         byte_2C590:	dc.b 1
0002E3ED F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002E3F2 01                         byte_2C596:	dc.b 1
0002E3F3 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002E3F8 01                         byte_2C59C:	dc.b 1
0002E3F9 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002E3FE 01                         byte_2C5A2:	dc.b 1
0002E3FF F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002E404 01                         byte_2C5A8:	dc.b 1
0002E405 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002E40A 01                         byte_2C5AE:	dc.b 1
0002E40B F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002E410 01                         byte_2C5B4:	dc.b 1
0002E411 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002E416 01                         byte_2C5BA:	dc.b 1
0002E417 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002E41C 01                         byte_2C5C0:	dc.b 1
0002E41D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002E422 01                         byte_2C5C6:	dc.b 1
0002E423 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002E428 01                         byte_2C5CC:	dc.b 1
0002E429 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002E42E 01                         byte_2C5D2:	dc.b 1
0002E42F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002E434 01                         byte_2C5D8:	dc.b 1
0002E435 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002E43A 01                         byte_2C5DE:	dc.b 1
0002E43B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002E440                            		even
0002E440                            		even
0002E440                            ; ---------------------------------------------------------------------------
0002E440                            ; Compressed graphics - special stage
0002E440                            ; ---------------------------------------------------------------------------
0002E440                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0002ED78                            		even
0002ED78                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002EEAC                            		even
0002EEAC                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0002FB3C                            		even
0002FB3C                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0002FE3C                            		even
0002FE3C                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00030330                            		even
00030330                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003041E                            		even
0003041E                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
000304EE                            		even
000304EE                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000305E4                            		even
000305E4                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00030642                            		even
00030642                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
000306D4                            		even
000306D4                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00030796                            		even
00030796                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00030864                            		even
00030864                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00030930                            		even
00030930                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
000309F8                            		even
000309F8                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00030AC2                            		even
00030AC2                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00030B92                            		even
00030B92                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00030D86                            		even
00030D86                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00030EEE                            		even
00030EEE                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00030F9E                            		even
00030F9E                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00031078                            		even
00031078                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000310FC                            		even
000310FC                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003127A                            		even
0003127A                            ; ---------------------------------------------------------------------------
0003127A                            ; Compressed graphics - GHZ stuff
0003127A                            ; ---------------------------------------------------------------------------
0003127A                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
000312C4                            		even
000312C4                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000313DE                            		even
000313DE                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
000314CA                            		even
000314CA                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00031512                            		even
00031512                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
000316B0                            		even
000316B0                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0003172C                            		even
0003172C                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00031940                            		even
00031940                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00031A6C                            		even
00031A6C                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00031B9A                            		even
00031B9A                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00031C38                            		even
00031C38                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00031C98                            		even
00031C98                            ; ---------------------------------------------------------------------------
00031C98                            ; Compressed graphics - LZ stuff
00031C98                            ; ---------------------------------------------------------------------------
00031C98                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00031DBC                            		even
00031DBC                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
000325B0                            		even
000325B0                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00032730                            		even
00032730                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003289A                            		even
0003289A                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00032EF0                            		even
00032EF0                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00032FA6                            		even
00032FA6                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00033048                            		even
00033048                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
000331A4                            		even
000331A4                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00033208                            		even
00033208                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003335A                            		even
0003335A                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003383C                            		even
0003383C                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
000339AC                            		even
000339AC                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00033C64                            		even
00033C64                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00033D9C                            		even
00033D9C                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00033EC6                            		even
00033EC6                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00033FD6                            		even
00033FD6                            ; ---------------------------------------------------------------------------
00033FD6                            ; Compressed graphics - MZ stuff
00033FD6                            ; ---------------------------------------------------------------------------
00033FD6                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00034264                            		even
00034264                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00034322                            		even
00034322                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000343DA                            		even
000343DA                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0003442E                            		even
0003442E                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0003470C                            		even
0003470C                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00035022                            		even
00035022                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00035186                            		even
00035186                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0003520E                            		even
0003520E                            ; ---------------------------------------------------------------------------
0003520E                            ; Compressed graphics - SLZ stuff
0003520E                            ; ---------------------------------------------------------------------------
0003520E                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003544A                            		even
0003544A                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00035590                            		even
00035590                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
000357D4                            		even
000357D4                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00035836                            		even
00035836                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00035918                            		even
00035918                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00035AFA                            		even
00035AFA                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00035C06                            		even
00035C06                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00035CAA                            		even
00035CAA                            ; ---------------------------------------------------------------------------
00035CAA                            ; Compressed graphics - SYZ stuff
00035CAA                            ; ---------------------------------------------------------------------------
00035CAA                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00035E14                            		even
00035E14                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00035E76                            		even
00035E76                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00035F58                            		even
00035F58                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000361E6                            		even
000361E6                            ; ---------------------------------------------------------------------------
000361E6                            ; Compressed graphics - SBZ stuff
000361E6                            ; ---------------------------------------------------------------------------
000361E6                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003623A                            		even
0003623A                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
000364D6                            		even
000364D6                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
000366DA                            		even
000366DA                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00036878                            		even
00036878                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00036BA8                            		even
00036BA8                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00036D86                            		even
00036D86                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00036DDE                            		even
00036DDE                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00036F5E                            		even
00036F5E                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003705C                            		even
0003705C                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
000371E8                            		even
000371E8                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00037238                            		even
00037238                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00037290                            		even
00037290                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003738C                            		even
0003738C                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
000374A2                            		even
000374A2                            ; ---------------------------------------------------------------------------
000374A2                            ; Compressed graphics - enemies
000374A2                            ; ---------------------------------------------------------------------------
000374A2                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00037862                            		even
00037862                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00037D50                            		even
00037D50                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
00038112 00                         		even
00038112                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
000382FA                            		even
000382FA                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
000389E4                            		even
000389E4                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00038C4C                            		even
00038C4C                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00038ED6                            		even
00038ED6                            Nem_Roller:	incbin	artnem\roller.bin	; roller
000393FA                            		even
000393FA                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
000395F0                            		even
000395F0                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00039C0E                            		even
00039C0E                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
00039FF6                            		even
00039FF6                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003A2F2                            		even
0003A2F2                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003A53A                            		even
0003A53A                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003A7D2                            		even
0003A7D2                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003A9B0                            		even
0003A9B0                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003AB3E                            		even
0003AB3E                            ; ---------------------------------------------------------------------------
0003AB3E                            ; Compressed graphics - various
0003AB3E                            ; ---------------------------------------------------------------------------
0003AB3E                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003B14C                            		even
0003B14C                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003B242                            		even
0003B242                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003B348                            		even
0003B348                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003B43C                            		even
0003B43C                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003B894                            		even
0003B894                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003BEFA                            		even
0003BEFA                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003BFAA                            		even
0003BFAA                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003C13C                            		even
0003C13C                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003C23E                            		even
0003C23E                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003C31A                            		even
0003C31A                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003C796                            		even
0003C796                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003C856                            		even
0003C856                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003C9CA                            		even
0003C9CA                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003CCCC                            		even
0003CCCC                            ; ---------------------------------------------------------------------------
0003CCCC                            ; Compressed graphics - continue screen
0003CCCC                            ; ---------------------------------------------------------------------------
0003CCCC                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003CF7C                            		even
0003CF7C                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003D1B6                            		even
0003D1B6                            ; ---------------------------------------------------------------------------
0003D1B6                            ; Compressed graphics - animals
0003D1B6                            ; ---------------------------------------------------------------------------
0003D1B6                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003D30E                            		even
0003D30E                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003D46A                            		even
0003D46A                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003D5E6                            		even
0003D5E6                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003D702                            		even
0003D702                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003D838                            		even
0003D838                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003D972                            		even
0003D972                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003DACE                            		even
0003DACE                            ; ---------------------------------------------------------------------------
0003DACE                            ; Compressed graphics - primary patterns and block mappings
0003DACE                            ; ---------------------------------------------------------------------------
0003DACE                            Blk16_GHZ:	incbin	map16\ghz.bin
0003E3E2                            		even
0003E3E2                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
0003F9F4                            		even
0003F9F4                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00040D88                            		even
00040D88                            Blk256_GHZ:	incbin	map256\ghz.bin
00043080                            		even
00043080                            Blk16_LZ:	incbin	map16\lz.bin
0004334A                            		even
0004334A                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00044DD6                            		even
00044DD6                            Blk256_LZ:	incbin	map256\lz.bin
000475BA                            		even
000475BA                            Blk16_MZ:	incbin	map16\mz.bin
00047DC4                            		even
00047DC4                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004A608                            		even
0004A608                            Blk256_MZ:	incbin	map256\mz.bin
0004BDC8                            		even
0004BDC8                            Blk16_SLZ:	incbin	map16\slz.bin
0004C0AE                            		even
0004C0AE                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0004D1D0                            		even
0004D1D0                            Blk256_SLZ:	incbin	map256\slz.bin
0004D38A                            		even
0004D38A                            Blk16_SYZ:	incbin	map16\syz.bin
0004DC1E                            		even
0004DC1E                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0005128C                            		even
0005128C                            Blk256_SYZ:	incbin	map256\syz.bin
0005360E                            		even
0005360E                            Blk16_SBZ:	incbin	map16\sbz.bin
000544A8                            		even
000544A8                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
00056C54                            		even
00056C54                            Blk256_SBZ:	incbin	map256\sbz.bin
000596A4                            		even
000596A4                            ; ---------------------------------------------------------------------------
000596A4                            ; Compressed graphics - bosses and ending sequence
000596A4                            ; ---------------------------------------------------------------------------
000596A4                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00059EBE 00                         		even
00059EBE                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0005A1A8                            		even
0005A1A8                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0005AA2C                            		even
0005AA2C                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0005B258                            		even
0005B258                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0005B9C0                            		even
0005B9C0                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0005BF40                            		even
0005BF40                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0005C060                            		even
0005C060                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0005C25E                            		even
0005C25E                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0005D43C                            		even
0005D43C                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0005DD80                            		even
0005DD80                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0005E156                            		even
0005E156                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0005E6E6                            		even
0005E6E6                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0005E96E                            		even
0005E96E                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0005EF6C                            		even
0005EF6C                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0005F1F4                            		even
0005F1F4                            		incbin	misc\padding2.bin
0005F2F8                            		even
0005F2F8                            ; ---------------------------------------------------------------------------
0005F2F8                            ; Collision data
0005F2F8                            ; ---------------------------------------------------------------------------
0005F2F8                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0005F3F8                            		even
0005F3F8                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
000603F8                            		even
000603F8                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
000613F8                            		even
000613F8                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000615B0 00                         		even
000615B0                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00061678                            		even
00061678                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00061808                            		even
00061808                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000619FC                            		even
000619FC                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00061BF0                            		even
00061BF0                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00061E48                            		even
00061E48                            ; ---------------------------------------------------------------------------
00061E48                            ; Special layouts
00061E48                            ; ---------------------------------------------------------------------------
00061E48                            SS_1:		incbin	sslayout\1.bin
000620C2                            		even
000620C2                            SS_2:		incbin	sslayout\2.bin
000624D4                            		even
000624D4                            SS_3:		incbin	sslayout\3.bin
00062830                            		even
00062830                            SS_4:		incbin	sslayout\4.bin
00062D0A                            		even
00062D0A                            SS_5:		incbin	sslayout\5.bin
000631DC                            		even
000631DC                            SS_6:		incbin	sslayout\6.bin
000634EC                            		even
000634EC                            ; ---------------------------------------------------------------------------
000634EC                            ; Animated uncompressed graphics
000634EC                            ; ---------------------------------------------------------------------------
000634EC                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
000636EC                            		even
000636EC                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00063AEC                            		even
00063AEC                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00063F6C                            		even
00063F6C                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006426C                            		even
0006426C                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006486C                            		even
0006486C                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00064B6C                            		even
00064B6C                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
000655EC                            		even
000655EC                            
000655EC                            ; ---------------------------------------------------------------------------
000655EC                            ; Level	layout index
000655EC                            ; ---------------------------------------------------------------------------
000655EC 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
000655F2 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
000655F8 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
000655FE 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00065604 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006560A 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00065610 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00065616 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006561C 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00065622 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00065628 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006562E 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00065634 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006563A 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00065640 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00065646 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006564C 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00065652 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00065658 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006565E 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00065664 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006566A 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00065670 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00065676 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006567C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00065682 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00065688 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006568E 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00065694                            
00065694                            Level_GHZ1:	incbin	levels\ghz1.bin
00065786                            		even
00065786 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006578A                            Level_GHZ2:	incbin	levels\ghz2.bin
00065852                            		even
00065852 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00065856                            Level_GHZ3:	incbin	levels\ghz3.bin
00065978                            		even
00065978                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006599A                            		even
0006599A 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006599E 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
000659A2                            
000659A2                            Level_LZ1:	incbin	levels\lz1.bin
00065AA4                            		even
00065AA4                            Level_LZbg:	incbin	levels\lzbg.bin
00065BA6                            		even
00065BA6 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00065BAA                            Level_LZ2:	incbin	levels\lz2.bin
00065C44                            		even
00065C44 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00065C48                            Level_LZ3:	incbin	levels\lz3.bin
00065D62                            		even
00065D62 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00065D66                            Level_SBZ3:	incbin	levels\sbz3.bin
00065E20                            		even
00065E20 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00065E24                            
00065E24                            Level_MZ1:	incbin	levels\mz1.bin
00065EC2                            		even
00065EC2                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00065F3C                            		even
00065F3C                            Level_MZ2:	incbin	levels\mz2.bin
00065FE0                            		even
00065FE0                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00066072                            		even
00066072 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00066076                            Level_MZ3:	incbin	levels\mz3.bin
00066158                            		even
00066158                            Level_MZ3bg:	incbin	levels\mz3bg.bin
000661FC                            		even
000661FC 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00066200 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00066204                            
00066204                            Level_SLZ1:	incbin	levels\slz1.bin
00066316                            		even
00066316                            Level_SLZbg:	incbin	levels\slzbg.bin
00066330                            		even
00066330                            Level_SLZ2:	incbin	levels\slz2.bin
00066420                            		even
00066420                            Level_SLZ3:	incbin	levels\slz3.bin
0006653A                            		even
0006653A 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006653E                            
0006653E                            Level_SYZ1:	incbin	levels\syz1.bin
000665FA 00                         		even
000665FA                            Level_SYZbg:	incbin	levels\syzbg.bin
00066634                            		even
00066634 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00066638                            Level_SYZ2:	incbin	levels\syz2.bin
0006673C                            		even
0006673C 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00066740                            Level_SYZ3:	incbin	levels\syz3.bin
0006689A 00                         		even
0006689A 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006689E 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000668A2                            
000668A2                            Level_SBZ1:	incbin	levels\sbz1.bin
000669C4                            		even
000669C4                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00066A02                            		even
00066A02                            Level_SBZ2:	incbin	levels\sbz2.bin
00066B44                            		even
00066B44                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00066CAE                            		even
00066CAE 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00066CB2 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00066CB6                            Level_End:	incbin	levels\ending.bin
00066CE6 00                         		even
00066CE6 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00066CEA                            
00066CEA                            ; ---------------------------------------------------------------------------
00066CEA                            ; Animated uncompressed giant ring graphics
00066CEA                            ; ---------------------------------------------------------------------------
00066CEA                            Art_BigRing:	incbin	artunc\bigring.bin
0006792A                            		even
0006792A                            
0006792A                            		incbin	misc\padding3.bin
000679C6                            		even
000679C6                            
000679C6                            ; ---------------------------------------------------------------------------
000679C6                            ; Sprite locations index
000679C6                            ; ---------------------------------------------------------------------------
000679C6 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000679CA 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000679CE 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000679D2 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000679D6 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000679DA 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000679DE 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000679E2 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000679E6 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000679EA 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000679EE 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000679F2 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000679F6 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000679FA 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000679FE 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067A02 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067A06 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067A0A 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067A0E 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067A12 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067A16 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067A1A 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067A1E 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067A22 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067A26 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067A2A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067A2E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067A32 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00067A36 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00067A3A 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00067A3E 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
00067A42 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00067A46 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00067A4A 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00067A4E 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
00067A52 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00067A56 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00067A5C                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006827E                            		even
0006827E                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
00068332                            		even
00068332                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00068D76                            		even
00068D76                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006911E                            		even
0006911E                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00069460                            		even
00069460                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00069A42                            		even
00069A42                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00069EDA                            		even
00069EDA                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00069F0C                            		even
00069F0C                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00069F3E                            		even
00069F3E                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00069F70                            		even
00069F70                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00069FA2                            		even
00069FA2                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00069FEC                            		even
00069FEC                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0006A02A                            		even
0006A02A                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0006A396                            		even
0006A396                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0006A840                            		even
0006A840                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0006ADB6                            		even
0006ADB6                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0006B2F6                            		even
0006B2F6                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0006B75E                            		even
0006B75E                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0006BD40                            		even
0006BD40                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0006C3AC                            		even
0006C3AC                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0006C916                            		even
0006C916                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0006CF1C                            		even
0006CF1C                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0006D65A                            		even
0006D65A                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0006DD38                            		even
0006DD38                            ObjPos_FZ:	incbin	objpos\fz.bin
0006DD4A                            		even
0006DD4A                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0006DD7C                            		even
0006DD7C                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0006DDAE                            		even
0006DDAE                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0006DDE0                            		even
0006DDE0                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0006DE12                            		even
0006DE12                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0006DE44                            		even
0006DE44                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0006DE7C                            		even
0006DE7C                            ObjPos_End:	incbin	objpos\ending.bin
0006DFD8                            		even
0006DFD8 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0006DFDE                            ; ---------------------------------------------------------------------------
0006DFDE                            		incbin	misc\padding4.bin
0006E608                            		even
0006E608                            
0006E608 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0006E60C 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0006E610 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0006E614 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0006E618 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0006E61C 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0006E620                            ; ---------------------------------------------------------------------------
0006E620                            ; PSG instruments used in music
0006E620                            ; ---------------------------------------------------------------------------
0006E620 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0006E62C 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0006E638 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0006E644                            PSG1:		incbin	sound\psg1.bin
0006E65B                            PSG2:		incbin	sound\psg2.bin
0006E662                            PSG3:		incbin	sound\psg3.bin
0006E673                            PSG4:		incbin	sound\psg4.bin
0006E67E                            PSG6:		incbin	sound\psg6.bin
0006E68D                            PSG5:		incbin	sound\psg5.bin
0006E6B7                            PSG7:		incbin	sound\psg7.bin
0006E6D3                            PSG8:		incbin	sound\psg8.bin
0006E6FB                            PSG9:		incbin	sound\psg9.bin
0006E70C                            
0006E70C 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0006E714                            ; ---------------------------------------------------------------------------
0006E714                            ; Music	Pointers
0006E714                            ; ---------------------------------------------------------------------------
0006E714 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0006E71C 0000 0000 0000 0000        		dc.l Music83, Music84
0006E724 0000 0000 0000 0000        		dc.l Music85, Music86
0006E72C 0000 0000 0000 0000        		dc.l Music87, Music88
0006E734 0000 0000 0000 0000        		dc.l Music89, Music8A
0006E73C 0000 0000 0000 0000        		dc.l Music8B, Music8C
0006E744 0000 0000 0000 0000        		dc.l Music8D, Music8E
0006E74C 0000 0000 0000 0000        		dc.l Music8F, Music90
0006E754 0000 0000 0000 0000        		dc.l Music91, Music92
0006E75C 0000 0000 0000 0000        		dc.l Music93, Music94
0006E764 0000 0000 0000 0000        		dc.l Music95, Music96
0006E76C 0000 0000 0000 0000        		dc.l Music97, Music98
0006E774 0000 0000 0000 0000        		dc.l Music99, Music9A
0006E77C 0000 0000 0000 0000        		dc.l Music9B, Music9C
0006E784 0000 0000 0000 0000        		dc.l Music9D, Music9E
0006E78C 0000 0000                  		dc.l Music9F
0006E790                            ; ---------------------------------------------------------------------------
0006E790                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0006E790                            ; ---------------------------------------------------------------------------
0006E790 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0006E7A0 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0006E7B0 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0006E7C0 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0006E7D0 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0006E7E0 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0006E7F0 9090 9090                  		dc.b $90, $90, $90, $90
0006E7F4                            
0006E7F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E7F4                            
0006E7F4                            
0006E7F4                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0006E7F4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0006E7FC 4E71                       		nop	
0006E7FE 4E71                       		nop	
0006E800 4E71                       		nop	
0006E802                            
0006E802                            loc_71B5A:
0006E802 0839 0000 00A1 1100        		btst	#0,($A11100).l
0006E80A 66F6                       		bne.s	loc_71B5A
0006E80C                            
0006E80C 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0006E814 6700                       		beq.s	loc_71B82
0006E816 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0006E81E 4E71                       		nop	
0006E820 4E71                       		nop	
0006E822 4E71                       		nop	
0006E824 4E71                       		nop	
0006E826 4E71                       		nop	
0006E828 60CA                       		bra.s	sub_71B4C
0006E82A                            ; ===========================================================================
0006E82A                            
0006E82A                            loc_71B82:
0006E82A 4DF9 00FF F000             		lea	($FFF000).l,a6
0006E830 422E 000E                  		clr.b	$E(a6)
0006E834 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0006E838 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0006E83C 532E 0001                  		subq.b	#1,1(a6)
0006E840 6600                       		bne.s	loc_71B9E
0006E842 4EBA 0000                  		jsr	sub_7260C(pc)
0006E846                            
0006E846                            loc_71B9E:
0006E846 102E 0004                  		move.b	4(a6),d0
0006E84A 6700                       		beq.s	loc_71BA8
0006E84C 4EBA 0000                  		jsr	sub_72504(pc)
0006E850                            
0006E850                            loc_71BA8:
0006E850 4A2E 0024                  		tst.b	$24(a6)
0006E854 6700                       		beq.s	loc_71BB2
0006E856 4EBA 0000                  		jsr	sub_7267C(pc)
0006E85A                            
0006E85A                            loc_71BB2:
0006E85A 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0006E85E 6700                       		beq.s	loc_71BBC	; if not, branch
0006E860 4EBA 0000                  		jsr	Sound_Play(pc)
0006E864                            
0006E864                            loc_71BBC:
0006E864 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0006E86A 6700                       		beq.s	loc_71BC8
0006E86C 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0006E870                            
0006E870                            loc_71BC8:
0006E870 4BEE 0040                  		lea	$40(a6),a5
0006E874 4A15                       		tst.b	(a5)
0006E876 6A00                       		bpl.s	loc_71BD4
0006E878 4EBA 0000                  		jsr	sub_71C4E(pc)
0006E87C                            
0006E87C                            loc_71BD4:
0006E87C 422E 0008                  		clr.b	8(a6)
0006E880 7E05                       		moveq	#5,d7
0006E882                            
0006E882                            loc_71BDA:
0006E882 DAFC 0030                  		adda.w	#$30,a5
0006E886 4A15                       		tst.b	(a5)
0006E888 6A00                       		bpl.s	loc_71BE6
0006E88A 4EBA 0000                  		jsr	sub_71CCA(pc)
0006E88E                            
0006E88E                            loc_71BE6:
0006E88E 51CF FFF2                  		dbf	d7,loc_71BDA
0006E892                            
0006E892 7E02                       		moveq	#2,d7
0006E894                            
0006E894                            loc_71BEC:
0006E894 DAFC 0030                  		adda.w	#$30,a5
0006E898 4A15                       		tst.b	(a5)
0006E89A 6A00                       		bpl.s	loc_71BF8
0006E89C 4EBA 0000                  		jsr	sub_72850(pc)
0006E8A0                            
0006E8A0                            loc_71BF8:
0006E8A0 51CF FFF2                  		dbf	d7,loc_71BEC
0006E8A4                            
0006E8A4 1D7C 0080 000E             		move.b	#$80,$E(a6)
0006E8AA 7E02                       		moveq	#2,d7
0006E8AC                            
0006E8AC                            loc_71C04:
0006E8AC DAFC 0030                  		adda.w	#$30,a5
0006E8B0 4A15                       		tst.b	(a5)
0006E8B2 6A00                       		bpl.s	loc_71C10
0006E8B4 4EBA 0000                  		jsr	sub_71CCA(pc)
0006E8B8                            
0006E8B8                            loc_71C10:
0006E8B8 51CF FFF2                  		dbf	d7,loc_71C04
0006E8BC                            
0006E8BC 7E02                       		moveq	#2,d7
0006E8BE                            
0006E8BE                            loc_71C16:
0006E8BE DAFC 0030                  		adda.w	#$30,a5
0006E8C2 4A15                       		tst.b	(a5)
0006E8C4 6A00                       		bpl.s	loc_71C22
0006E8C6 4EBA 0000                  		jsr	sub_72850(pc)
0006E8CA                            
0006E8CA                            loc_71C22:
0006E8CA 51CF FFF2                  		dbf	d7,loc_71C16
0006E8CE 1D7C 0040 000E             		move.b	#$40,$E(a6)
0006E8D4 DAFC 0030                  		adda.w	#$30,a5
0006E8D8 4A15                       		tst.b	(a5)
0006E8DA 6A00                       		bpl.s	loc_71C38
0006E8DC 4EBA 0000                  		jsr	sub_71CCA(pc)
0006E8E0                            
0006E8E0                            loc_71C38:
0006E8E0 DAFC 0030                  		adda.w	#$30,a5
0006E8E4 4A15                       		tst.b	(a5)
0006E8E6 6A00                       		bpl.s	loc_71C44
0006E8E8 4EBA 0000                  		jsr	sub_72850(pc)
0006E8EC                            
0006E8EC                            loc_71C44:
0006E8EC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0006E8F4 4E75                       		rts	
0006E8F6                            ; End of function sub_71B4C
0006E8F6                            
0006E8F6                            
0006E8F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E8F6                            
0006E8F6                            
0006E8F6                            sub_71C4E:				; XREF: sub_71B4C
0006E8F6 532D 000E                  		subq.b	#1,$E(a5)
0006E8FA 6600                       		bne.s	locret_71CAA
0006E8FC 1D7C 0080 0008             		move.b	#$80,8(a6)
0006E902 286D 0004                  		movea.l	4(a5),a4
0006E906                            
0006E906                            loc_71C5E:
0006E906 7A00                       		moveq	#0,d5
0006E908 1A1C                       		move.b	(a4)+,d5
0006E90A 0C05 00E0                  		cmpi.b	#-$20,d5
0006E90E 6500                       		bcs.s	loc_71C6E
0006E910 4EBA 0000                  		jsr	sub_72A5A(pc)
0006E914 60F0                       		bra.s	loc_71C5E
0006E916                            ; ===========================================================================
0006E916                            
0006E916                            loc_71C6E:
0006E916 4A05                       		tst.b	d5
0006E918 6A00                       		bpl.s	loc_71C84
0006E91A 1B45 0010                  		move.b	d5,$10(a5)
0006E91E 1A1C                       		move.b	(a4)+,d5
0006E920 6A00                       		bpl.s	loc_71C84
0006E922 534C                       		subq.w	#1,a4
0006E924 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0006E92A 6000                       		bra.s	loc_71C88
0006E92C                            ; ===========================================================================
0006E92C                            
0006E92C                            loc_71C84:
0006E92C 4EBA 0000                  		jsr	sub_71D40(pc)
0006E930                            
0006E930                            loc_71C88:
0006E930 2B4C 0004                  		move.l	a4,4(a5)
0006E934 0815 0002                  		btst	#2,(a5)
0006E938 6600                       		bne.s	locret_71CAA
0006E93A 7000                       		moveq	#0,d0
0006E93C 102D 0010                  		move.b	$10(a5),d0
0006E940 0C00 0080                  		cmpi.b	#$80,d0
0006E944 6700                       		beq.s	locret_71CAA
0006E946 0800 0003                  		btst	#3,d0
0006E94A 6600                       		bne.s	loc_71CAC
0006E94C 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0006E952                            
0006E952                            locret_71CAA:
0006E952 4E75                       		rts	
0006E954                            ; ===========================================================================
0006E954                            
0006E954                            loc_71CAC:
0006E954 0400 0088                  		subi.b	#$88,d0
0006E958 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0006E95C 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0006E962 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0006E96A 4E75                       		rts	
0006E96C                            ; End of function sub_71C4E
0006E96C                            
0006E96C                            ; ===========================================================================
0006E96C 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0006E972                            
0006E972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E972                            
0006E972                            
0006E972                            sub_71CCA:				; XREF: sub_71B4C
0006E972 532D 000E                  		subq.b	#1,$E(a5)
0006E976 6600                       		bne.s	loc_71CE0
0006E978 0895 0004                  		bclr	#4,(a5)
0006E97C 4EBA 0000                  		jsr	sub_71CEC(pc)
0006E980 4EBA 0000                  		jsr	sub_71E18(pc)
0006E984 6000 0000                  		bra.w	loc_726E2
0006E988                            ; ===========================================================================
0006E988                            
0006E988                            loc_71CE0:
0006E988 4EBA 0000                  		jsr	sub_71D9E(pc)
0006E98C 4EBA 0000                  		jsr	sub_71DC6(pc)
0006E990 6000 0000                  		bra.w	loc_71E24
0006E994                            ; End of function sub_71CCA
0006E994                            
0006E994                            
0006E994                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E994                            
0006E994                            
0006E994                            sub_71CEC:				; XREF: sub_71CCA
0006E994 286D 0004                  		movea.l	4(a5),a4
0006E998 0895 0001                  		bclr	#1,(a5)
0006E99C                            
0006E99C                            loc_71CF4:
0006E99C 7A00                       		moveq	#0,d5
0006E99E 1A1C                       		move.b	(a4)+,d5
0006E9A0 0C05 00E0                  		cmpi.b	#-$20,d5
0006E9A4 6500                       		bcs.s	loc_71D04
0006E9A6 4EBA 0000                  		jsr	sub_72A5A(pc)
0006E9AA 60F0                       		bra.s	loc_71CF4
0006E9AC                            ; ===========================================================================
0006E9AC                            
0006E9AC                            loc_71D04:
0006E9AC 4EBA 0000                  		jsr	sub_726FE(pc)
0006E9B0 4A05                       		tst.b	d5
0006E9B2 6A00                       		bpl.s	loc_71D1A
0006E9B4 4EBA 0000                  		jsr	sub_71D22(pc)
0006E9B8 1A1C                       		move.b	(a4)+,d5
0006E9BA 6A00                       		bpl.s	loc_71D1A
0006E9BC 534C                       		subq.w	#1,a4
0006E9BE 6000 0000                  		bra.w	sub_71D60
0006E9C2                            ; ===========================================================================
0006E9C2                            
0006E9C2                            loc_71D1A:
0006E9C2 4EBA 0000                  		jsr	sub_71D40(pc)
0006E9C6 6000 0000                  		bra.w	sub_71D60
0006E9CA                            ; End of function sub_71CEC
0006E9CA                            
0006E9CA                            
0006E9CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E9CA                            
0006E9CA                            
0006E9CA                            sub_71D22:				; XREF: sub_71CEC
0006E9CA 0405 0080                  		subi.b	#$80,d5
0006E9CE 6700                       		beq.s	loc_71D58
0006E9D0 DA2D 0008                  		add.b	8(a5),d5
0006E9D4 0245 007F                  		andi.w	#$7F,d5
0006E9D8 E34D                       		lsl.w	#1,d5
0006E9DA 41FA 0000                  		lea	word_72790(pc),a0
0006E9DE 3C30 5000                  		move.w	(a0,d5.w),d6
0006E9E2 3B46 0010                  		move.w	d6,$10(a5)
0006E9E6 4E75                       		rts	
0006E9E8                            ; End of function sub_71D22
0006E9E8                            
0006E9E8                            
0006E9E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006E9E8                            
0006E9E8                            
0006E9E8                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0006E9E8 1005                       		move.b	d5,d0
0006E9EA 122D 0002                  		move.b	2(a5),d1
0006E9EE                            
0006E9EE                            loc_71D46:
0006E9EE 5301                       		subq.b	#1,d1
0006E9F0 6700                       		beq.s	loc_71D4E
0006E9F2 D005                       		add.b	d5,d0
0006E9F4 60F8                       		bra.s	loc_71D46
0006E9F6                            ; ===========================================================================
0006E9F6                            
0006E9F6                            loc_71D4E:
0006E9F6 1B40 000F                  		move.b	d0,$F(a5)
0006E9FA 1B40 000E                  		move.b	d0,$E(a5)
0006E9FE 4E75                       		rts	
0006EA00                            ; End of function sub_71D40
0006EA00                            
0006EA00                            ; ===========================================================================
0006EA00                            
0006EA00                            loc_71D58:				; XREF: sub_71D22
0006EA00 08D5 0001                  		bset	#1,(a5)
0006EA04 426D 0010                  		clr.w	$10(a5)
0006EA08                            
0006EA08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EA08                            
0006EA08                            
0006EA08                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0006EA08 2B4C 0004                  		move.l	a4,4(a5)
0006EA0C 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0006EA12 0815 0004                  		btst	#4,(a5)
0006EA16 6600                       		bne.s	locret_71D9C
0006EA18 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0006EA1E 422D 000C                  		clr.b	$C(a5)
0006EA22 0815 0003                  		btst	#3,(a5)
0006EA26 6700                       		beq.s	locret_71D9C
0006EA28 206D 0014                  		movea.l	$14(a5),a0
0006EA2C 1B58 0018                  		move.b	(a0)+,$18(a5)
0006EA30 1B58 0019                  		move.b	(a0)+,$19(a5)
0006EA34 1B58 001A                  		move.b	(a0)+,$1A(a5)
0006EA38 1018                       		move.b	(a0)+,d0
0006EA3A E208                       		lsr.b	#1,d0
0006EA3C 1B40 001B                  		move.b	d0,$1B(a5)
0006EA40 426D 001C                  		clr.w	$1C(a5)
0006EA44                            
0006EA44                            locret_71D9C:
0006EA44 4E75                       		rts	
0006EA46                            ; End of function sub_71D60
0006EA46                            
0006EA46                            
0006EA46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EA46                            
0006EA46                            
0006EA46                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0006EA46 4A2D 0012                  		tst.b	$12(a5)
0006EA4A 6700                       		beq.s	locret_71DC4
0006EA4C 532D 0012                  		subq.b	#1,$12(a5)
0006EA50 6600                       		bne.s	locret_71DC4
0006EA52 08D5 0001                  		bset	#1,(a5)
0006EA56 4A2D 0001                  		tst.b	1(a5)
0006EA5A 6B00 0000                  		bmi.w	loc_71DBE
0006EA5E 4EBA 0000                  		jsr	sub_726FE(pc)
0006EA62 584F                       		addq.w	#4,sp
0006EA64 4E75                       		rts	
0006EA66                            ; ===========================================================================
0006EA66                            
0006EA66                            loc_71DBE:
0006EA66 4EBA 0000                  		jsr	sub_729A0(pc)
0006EA6A 584F                       		addq.w	#4,sp
0006EA6C                            
0006EA6C                            locret_71DC4:
0006EA6C 4E75                       		rts	
0006EA6E                            ; End of function sub_71D9E
0006EA6E                            
0006EA6E                            
0006EA6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EA6E                            
0006EA6E                            
0006EA6E                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0006EA6E 584F                       		addq.w	#4,sp
0006EA70 0815 0003                  		btst	#3,(a5)
0006EA74 6700                       		beq.s	locret_71E16
0006EA76 4A2D 0018                  		tst.b	$18(a5)
0006EA7A 6700                       		beq.s	loc_71DDA
0006EA7C 532D 0018                  		subq.b	#1,$18(a5)
0006EA80 4E75                       		rts	
0006EA82                            ; ===========================================================================
0006EA82                            
0006EA82                            loc_71DDA:
0006EA82 532D 0019                  		subq.b	#1,$19(a5)
0006EA86 6700                       		beq.s	loc_71DE2
0006EA88 4E75                       		rts	
0006EA8A                            ; ===========================================================================
0006EA8A                            
0006EA8A                            loc_71DE2:
0006EA8A 206D 0014                  		movea.l	$14(a5),a0
0006EA8E 1B68 0001 0019             		move.b	1(a0),$19(a5)
0006EA94 4A2D 001B                  		tst.b	$1B(a5)
0006EA98 6600                       		bne.s	loc_71DFE
0006EA9A 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0006EAA0 442D 001A                  		neg.b	$1A(a5)
0006EAA4 4E75                       		rts	
0006EAA6                            ; ===========================================================================
0006EAA6                            
0006EAA6                            loc_71DFE:
0006EAA6 532D 001B                  		subq.b	#1,$1B(a5)
0006EAAA 1C2D 001A                  		move.b	$1A(a5),d6
0006EAAE 4886                       		ext.w	d6
0006EAB0 DC6D 001C                  		add.w	$1C(a5),d6
0006EAB4 3B46 001C                  		move.w	d6,$1C(a5)
0006EAB8 DC6D 0010                  		add.w	$10(a5),d6
0006EABC 594F                       		subq.w	#4,sp
0006EABE                            
0006EABE                            locret_71E16:
0006EABE 4E75                       		rts	
0006EAC0                            ; End of function sub_71DC6
0006EAC0                            
0006EAC0                            
0006EAC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EAC0                            
0006EAC0                            
0006EAC0                            sub_71E18:				; XREF: sub_71CCA
0006EAC0 0815 0001                  		btst	#1,(a5)
0006EAC4 6600                       		bne.s	locret_71E48
0006EAC6 3C2D 0010                  		move.w	$10(a5),d6
0006EACA 6700                       		beq.s	loc_71E4A
0006EACC                            
0006EACC                            loc_71E24:				; XREF: sub_71CCA
0006EACC 102D 001E                  		move.b	$1E(a5),d0
0006EAD0 4880                       		ext.w	d0
0006EAD2 DC40                       		add.w	d0,d6
0006EAD4 0815 0002                  		btst	#2,(a5)
0006EAD8 6600                       		bne.s	locret_71E48
0006EADA 3206                       		move.w	d6,d1
0006EADC E049                       		lsr.w	#8,d1
0006EADE 103C 00A4                  		move.b	#-$5C,d0
0006EAE2 4EBA 0000                  		jsr	sub_72722(pc)
0006EAE6 1206                       		move.b	d6,d1
0006EAE8 103C 00A0                  		move.b	#-$60,d0
0006EAEC 4EBA 0000                  		jsr	sub_72722(pc)
0006EAF0                            
0006EAF0                            locret_71E48:
0006EAF0 4E75                       		rts	
0006EAF2                            ; ===========================================================================
0006EAF2                            
0006EAF2                            loc_71E4A:
0006EAF2 08D5 0001                  		bset	#1,(a5)
0006EAF6 4E75                       		rts	
0006EAF8                            ; End of function sub_71E18
0006EAF8                            
0006EAF8                            ; ===========================================================================
0006EAF8                            
0006EAF8                            loc_71E50:				; XREF: sub_71B4C
0006EAF8 6B00                       		bmi.s	loc_71E94
0006EAFA 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0006EB00 6700 0000                  		beq.w	loc_71EFE
0006EB04 1D7C 0002 0003             		move.b	#2,3(a6)
0006EB0A 7602                       		moveq	#2,d3
0006EB0C 103C 00B4                  		move.b	#-$4C,d0
0006EB10 7200                       		moveq	#0,d1
0006EB12                            
0006EB12                            loc_71E6A:
0006EB12 4EBA 0000                  		jsr	sub_7272E(pc)
0006EB16 4EBA 0000                  		jsr	sub_72764(pc)
0006EB1A 5200                       		addq.b	#1,d0
0006EB1C 51CB FFF4                  		dbf	d3,loc_71E6A
0006EB20                            
0006EB20 7602                       		moveq	#2,d3
0006EB22 7028                       		moveq	#$28,d0
0006EB24                            
0006EB24                            loc_71E7C:
0006EB24 1203                       		move.b	d3,d1
0006EB26 4EBA 0000                  		jsr	sub_7272E(pc)
0006EB2A 5801                       		addq.b	#4,d1
0006EB2C 4EBA 0000                  		jsr	sub_7272E(pc)
0006EB30 51CB FFF2                  		dbf	d3,loc_71E7C
0006EB34                            
0006EB34 4EBA 0000                  		jsr	sub_729B6(pc)
0006EB38 6000 FDB2                  		bra.w	loc_71C44
0006EB3C                            ; ===========================================================================
0006EB3C                            
0006EB3C                            loc_71E94:				; XREF: loc_71E50
0006EB3C 422E 0003                  		clr.b	3(a6)
0006EB40 7630                       		moveq	#$30,d3
0006EB42 4BEE 0040                  		lea	$40(a6),a5
0006EB46 7806                       		moveq	#6,d4
0006EB48                            
0006EB48                            loc_71EA0:
0006EB48 0815 0007                  		btst	#7,(a5)
0006EB4C 6700                       		beq.s	loc_71EB8
0006EB4E 0815 0002                  		btst	#2,(a5)
0006EB52 6600                       		bne.s	loc_71EB8
0006EB54 103C 00B4                  		move.b	#-$4C,d0
0006EB58 122D 000A                  		move.b	$A(a5),d1
0006EB5C 4EBA 0000                  		jsr	sub_72722(pc)
0006EB60                            
0006EB60                            loc_71EB8:
0006EB60 DAC3                       		adda.w	d3,a5
0006EB62 51CC FFE4                  		dbf	d4,loc_71EA0
0006EB66                            
0006EB66 4BEE 0220                  		lea	$220(a6),a5
0006EB6A 7802                       		moveq	#2,d4
0006EB6C                            
0006EB6C                            loc_71EC4:
0006EB6C 0815 0007                  		btst	#7,(a5)
0006EB70 6700                       		beq.s	loc_71EDC
0006EB72 0815 0002                  		btst	#2,(a5)
0006EB76 6600                       		bne.s	loc_71EDC
0006EB78 103C 00B4                  		move.b	#-$4C,d0
0006EB7C 122D 000A                  		move.b	$A(a5),d1
0006EB80 4EBA 0000                  		jsr	sub_72722(pc)
0006EB84                            
0006EB84                            loc_71EDC:
0006EB84 DAC3                       		adda.w	d3,a5
0006EB86 51CC FFE4                  		dbf	d4,loc_71EC4
0006EB8A                            
0006EB8A 4BEE 0340                  		lea	$340(a6),a5
0006EB8E 0815 0007                  		btst	#7,(a5)
0006EB92 6700                       		beq.s	loc_71EFE
0006EB94 0815 0002                  		btst	#2,(a5)
0006EB98 6600                       		bne.s	loc_71EFE
0006EB9A 103C 00B4                  		move.b	#-$4C,d0
0006EB9E 122D 000A                  		move.b	$A(a5),d1
0006EBA2 4EBA 0000                  		jsr	sub_72722(pc)
0006EBA6                            
0006EBA6                            loc_71EFE:
0006EBA6 6000 FD44                  		bra.w	loc_71C44
0006EBAA                            
0006EBAA                            ; ---------------------------------------------------------------------------
0006EBAA                            ; Subroutine to	play a sound or	music track
0006EBAA                            ; ---------------------------------------------------------------------------
0006EBAA                            
0006EBAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EBAA                            
0006EBAA                            
0006EBAA                            Sound_Play:				; XREF: sub_71B4C
0006EBAA 2079 0006 E608             		movea.l	(Go_SoundTypes).l,a0
0006EBB0 43EE 000A                  		lea	$A(a6),a1	; load music track number
0006EBB4 1616                       		move.b	0(a6),d3
0006EBB6 7802                       		moveq	#2,d4
0006EBB8                            
0006EBB8                            loc_71F12:
0006EBB8 1011                       		move.b	(a1),d0		; move track number to d0
0006EBBA 1200                       		move.b	d0,d1
0006EBBC 4219                       		clr.b	(a1)+
0006EBBE 0400 0081                  		subi.b	#$81,d0
0006EBC2 6500                       		bcs.s	loc_71F3E
0006EBC4 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0006EBCA 6700                       		beq.s	loc_71F2C
0006EBCC 1D41 000A                  		move.b	d1,$A(a6)
0006EBD0 6000                       		bra.s	loc_71F3E
0006EBD2                            ; ===========================================================================
0006EBD2                            
0006EBD2                            loc_71F2C:
0006EBD2 0240 007F                  		andi.w	#$7F,d0
0006EBD6 1430 0000                  		move.b	(a0,d0.w),d2
0006EBDA B403                       		cmp.b	d3,d2
0006EBDC 6500                       		bcs.s	loc_71F3E
0006EBDE 1602                       		move.b	d2,d3
0006EBE0 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0006EBE4                            
0006EBE4                            loc_71F3E:
0006EBE4 51CC FFD2                  		dbf	d4,loc_71F12
0006EBE8                            
0006EBE8 4A03                       		tst.b	d3
0006EBEA 6B00                       		bmi.s	locret_71F4A
0006EBEC 1C83                       		move.b	d3,0(a6)
0006EBEE                            
0006EBEE                            locret_71F4A:
0006EBEE 4E75                       		rts	
0006EBF0                            ; End of function Sound_Play
0006EBF0                            
0006EBF0                            
0006EBF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006EBF0                            
0006EBF0                            
0006EBF0                            Sound_ChkValue:				; XREF: sub_71B4C
0006EBF0 7E00                       		moveq	#0,d7
0006EBF2 1E2E 0009                  		move.b	9(a6),d7
0006EBF6 6700 0000                  		beq.w	Sound_E4
0006EBFA 6A00                       		bpl.s	locret_71F8C
0006EBFC 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0006EC02 0C07 009F                  		cmpi.b	#$9F,d7
0006EC06 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0006EC0A 0C07 00A0                  		cmpi.b	#$A0,d7
0006EC0E 6500 0000                  		bcs.w	locret_71F8C
0006EC12 0C07 00CF                  		cmpi.b	#$CF,d7
0006EC16 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0006EC1A 0C07 00D0                  		cmpi.b	#$D0,d7
0006EC1E 6500 0000                  		bcs.w	locret_71F8C
0006EC22 0C07 00E0                  		cmpi.b	#$E0,d7
0006EC26 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0006EC2A 0C07 00E4                  		cmpi.b	#$E4,d7
0006EC2E 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
0006EC30                            
0006EC30                            locret_71F8C:
0006EC30 4E75                       		rts	
0006EC32                            ; ===========================================================================
0006EC32                            
0006EC32                            Sound_E0toE4:				; XREF: Sound_ChkValue
0006EC32 0407 00E0                  		subi.b	#$E0,d7
0006EC36 E54F                       		lsl.w	#2,d7
0006EC38 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0006EC3C                            ; ===========================================================================
0006EC3C                            
0006EC3C                            Sound_ExIndex:
0006EC3C 6000 0000                  		bra.w	Sound_E0
0006EC40                            ; ===========================================================================
0006EC40 6000 0000                  		bra.w	Sound_E1
0006EC44                            ; ===========================================================================
0006EC44 6000 0000                  		bra.w	Sound_E2
0006EC48                            ; ===========================================================================
0006EC48 6000 0000                  		bra.w	Sound_E3
0006EC4C                            ; ===========================================================================
0006EC4C 6000 0000                  		bra.w	Sound_E4
0006EC50                            ; ===========================================================================
0006EC50                            ; ---------------------------------------------------------------------------
0006EC50                            ; Play "Say-gaa" PCM sound
0006EC50                            ; ---------------------------------------------------------------------------
0006EC50                            
0006EC50                            Sound_E1:				  
0006EC50 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0006EC56 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0006EC5C 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0006EC64                            PlayPCM_Loop:	  
0006EC64 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0006EC6A 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0006EC6E 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0006EC72 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0006EC74 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0006EC76 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0006EC7A 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0006EC80 4EB8 1414                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0006EC84 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0006EC8A 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0006EC8C 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0006EC8E                            return_PlayPCM: 
0006EC8E 584F                       		addq.w	#4,sp 
0006EC90 4E75                       		rts
0006EC92                            ; ===========================================================================
0006EC92                            ; ---------------------------------------------------------------------------
0006EC92                            ; Play music track $81-$9F
0006EC92                            ; ---------------------------------------------------------------------------
0006EC92                            
0006EC92                            Sound_81to9F:				; XREF: Sound_ChkValue
0006EC92 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0006EC96 6600                       		bne.s	loc_72024	; if not, branch
0006EC98 4A2E 0027                  		tst.b	$27(a6)
0006EC9C 6600 0000                  		bne.w	loc_721B6
0006ECA0 4BEE 0040                  		lea	$40(a6),a5
0006ECA4 7009                       		moveq	#9,d0
0006ECA6                            
0006ECA6                            loc_71FE6:
0006ECA6 0895 0002                  		bclr	#2,(a5)
0006ECAA DAFC 0030                  		adda.w	#$30,a5
0006ECAE 51C8 FFF6                  		dbf	d0,loc_71FE6
0006ECB2                            
0006ECB2 4BEE 0220                  		lea	$220(a6),a5
0006ECB6 7005                       		moveq	#5,d0
0006ECB8                            
0006ECB8                            loc_71FF8:
0006ECB8 0895 0007                  		bclr	#7,(a5)
0006ECBC DAFC 0030                  		adda.w	#$30,a5
0006ECC0 51C8 FFF6                  		dbf	d0,loc_71FF8
0006ECC4 4216                       		clr.b	0(a6)
0006ECC6 204E                       		movea.l	a6,a0
0006ECC8 43EE 03A0                  		lea	$3A0(a6),a1
0006ECCC 303C 0087                  		move.w	#$87,d0
0006ECD0                            
0006ECD0                            loc_72012:
0006ECD0 22D8                       		move.l	(a0)+,(a1)+
0006ECD2 51C8 FFFC                  		dbf	d0,loc_72012
0006ECD6                            
0006ECD6 1D7C 0080 0027             		move.b	#$80,$27(a6)
0006ECDC 4216                       		clr.b	0(a6)
0006ECDE 6000                       		bra.s	loc_7202C
0006ECE0                            ; ===========================================================================
0006ECE0                            
0006ECE0                            loc_72024:
0006ECE0 422E 0027                  		clr.b	$27(a6)
0006ECE4 422E 0026                  		clr.b	$26(a6)
0006ECE8                            
0006ECE8                            loc_7202C:
0006ECE8 4EBA 0000                  		jsr	sub_725CA(pc)
0006ECEC 2879 0006 E618             		movea.l	(off_719A0).l,a4
0006ECF2 0407 0081                  		subi.b	#$81,d7
0006ECF6 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0006ECFC 2879 0006 E610             		movea.l	(Go_MusicIndex).l,a4
0006ED02 E54F                       		lsl.w	#2,d7
0006ED04 2874 7000                  		movea.l	(a4,d7.w),a4
0006ED08 7000                       		moveq	#0,d0
0006ED0A 3014                       		move.w	(a4),d0
0006ED0C D08C                       		add.l	a4,d0
0006ED0E 2D40 0018                  		move.l	d0,$18(a6)
0006ED12 102C 0005                  		move.b	5(a4),d0
0006ED16 1D40 0028                  		move.b	d0,$28(a6)
0006ED1A 4A2E 002A                  		tst.b	$2A(a6)
0006ED1E 6700                       		beq.s	loc_72068
0006ED20 102E 0029                  		move.b	$29(a6),d0
0006ED24                            
0006ED24                            loc_72068:
0006ED24 1D40 0002                  		move.b	d0,2(a6)
0006ED28 1D40 0001                  		move.b	d0,1(a6)
0006ED2C 7200                       		moveq	#0,d1
0006ED2E 264C                       		movea.l	a4,a3
0006ED30 5C4C                       		addq.w	#6,a4
0006ED32 7E00                       		moveq	#0,d7
0006ED34 1E2B 0002                  		move.b	2(a3),d7
0006ED38 6700 0000                  		beq.w	loc_72114
0006ED3C 5307                       		subq.b	#1,d7
0006ED3E 123C 00C0                  		move.b	#-$40,d1
0006ED42 182B 0004                  		move.b	4(a3),d4
0006ED46 7C30                       		moveq	#$30,d6
0006ED48 1A3C 0001                  		move.b	#1,d5
0006ED4C 43EE 0040                  		lea	$40(a6),a1
0006ED50 45FA 0000                  		lea	byte_721BA(pc),a2
0006ED54                            
0006ED54                            loc_72098:
0006ED54 08D1 0007                  		bset	#7,(a1)
0006ED58 135A 0001                  		move.b	(a2)+,1(a1)
0006ED5C 1344 0002                  		move.b	d4,2(a1)
0006ED60 1346 000D                  		move.b	d6,$D(a1)
0006ED64 1341 000A                  		move.b	d1,$A(a1)
0006ED68 1345 000E                  		move.b	d5,$E(a1)
0006ED6C 7000                       		moveq	#0,d0
0006ED6E 301C                       		move.w	(a4)+,d0
0006ED70 D08B                       		add.l	a3,d0
0006ED72 2340 0004                  		move.l	d0,4(a1)
0006ED76 335C 0008                  		move.w	(a4)+,8(a1)
0006ED7A D2C6                       		adda.w	d6,a1
0006ED7C 51CF FFD6                  		dbf	d7,loc_72098
0006ED80 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0006ED86 6600                       		bne.s	loc_720D8
0006ED88 702B                       		moveq	#$2B,d0
0006ED8A 7200                       		moveq	#0,d1
0006ED8C 4EBA 0000                  		jsr	sub_7272E(pc)
0006ED90 6000 0000                  		bra.w	loc_72114
0006ED94                            ; ===========================================================================
0006ED94                            
0006ED94                            loc_720D8:
0006ED94 7028                       		moveq	#$28,d0
0006ED96 7206                       		moveq	#6,d1
0006ED98 4EBA 0000                  		jsr	sub_7272E(pc)
0006ED9C 103C 0042                  		move.b	#$42,d0
0006EDA0 727F                       		moveq	#$7F,d1
0006EDA2 4EBA 0000                  		jsr	sub_72764(pc)
0006EDA6 103C 004A                  		move.b	#$4A,d0
0006EDAA 727F                       		moveq	#$7F,d1
0006EDAC 4EBA 0000                  		jsr	sub_72764(pc)
0006EDB0 103C 0046                  		move.b	#$46,d0
0006EDB4 727F                       		moveq	#$7F,d1
0006EDB6 4EBA 0000                  		jsr	sub_72764(pc)
0006EDBA 103C 004E                  		move.b	#$4E,d0
0006EDBE 727F                       		moveq	#$7F,d1
0006EDC0 4EBA 0000                  		jsr	sub_72764(pc)
0006EDC4 103C 00B6                  		move.b	#-$4A,d0
0006EDC8 123C 00C0                  		move.b	#-$40,d1
0006EDCC 4EBA 0000                  		jsr	sub_72764(pc)
0006EDD0                            
0006EDD0                            loc_72114:
0006EDD0 7E00                       		moveq	#0,d7
0006EDD2 1E2B 0003                  		move.b	3(a3),d7
0006EDD6 6700                       		beq.s	loc_72154
0006EDD8 5307                       		subq.b	#1,d7
0006EDDA 43EE 0190                  		lea	$190(a6),a1
0006EDDE 45FA 0000                  		lea	byte_721C2(pc),a2
0006EDE2                            
0006EDE2                            loc_72126:
0006EDE2 08D1 0007                  		bset	#7,(a1)
0006EDE6 135A 0001                  		move.b	(a2)+,1(a1)
0006EDEA 1344 0002                  		move.b	d4,2(a1)
0006EDEE 1346 000D                  		move.b	d6,$D(a1)
0006EDF2 1345 000E                  		move.b	d5,$E(a1)
0006EDF6 7000                       		moveq	#0,d0
0006EDF8 301C                       		move.w	(a4)+,d0
0006EDFA D08B                       		add.l	a3,d0
0006EDFC 2340 0004                  		move.l	d0,4(a1)
0006EE00 335C 0008                  		move.w	(a4)+,8(a1)
0006EE04 101C                       		move.b	(a4)+,d0
0006EE06 135C 000B                  		move.b	(a4)+,$B(a1)
0006EE0A D2C6                       		adda.w	d6,a1
0006EE0C 51CF FFD4                  		dbf	d7,loc_72126
0006EE10                            
0006EE10                            loc_72154:
0006EE10 43EE 0220                  		lea	$220(a6),a1
0006EE14 7E05                       		moveq	#5,d7
0006EE16                            
0006EE16                            loc_7215A:
0006EE16 4A11                       		tst.b	(a1)
0006EE18 6A00 0000                  		bpl.w	loc_7217C
0006EE1C 7000                       		moveq	#0,d0
0006EE1E 1029 0001                  		move.b	1(a1),d0
0006EE22 6B00                       		bmi.s	loc_7216E
0006EE24 5500                       		subq.b	#2,d0
0006EE26 E508                       		lsl.b	#2,d0
0006EE28 6000                       		bra.s	loc_72170
0006EE2A                            ; ===========================================================================
0006EE2A                            
0006EE2A                            loc_7216E:
0006EE2A E608                       		lsr.b	#3,d0
0006EE2C                            
0006EE2C                            loc_72170:
0006EE2C 41FA 0000                  		lea	dword_722CC(pc),a0
0006EE30 2070 0000                  		movea.l	(a0,d0.w),a0
0006EE34 08D0 0002                  		bset	#2,(a0)
0006EE38                            
0006EE38                            loc_7217C:
0006EE38 D2C6                       		adda.w	d6,a1
0006EE3A 51CF FFDA                  		dbf	d7,loc_7215A
0006EE3E                            
0006EE3E 4A6E 0340                  		tst.w	$340(a6)
0006EE42 6A00                       		bpl.s	loc_7218E
0006EE44 08EE 0002 0100             		bset	#2,$100(a6)
0006EE4A                            
0006EE4A                            loc_7218E:
0006EE4A 4A6E 0370                  		tst.w	$370(a6)
0006EE4E 6A00                       		bpl.s	loc_7219A
0006EE50 08EE 0002 01F0             		bset	#2,$1F0(a6)
0006EE56                            
0006EE56                            loc_7219A:
0006EE56 4BEE 0070                  		lea	$70(a6),a5
0006EE5A 7805                       		moveq	#5,d4
0006EE5C                            
0006EE5C                            loc_721A0:
0006EE5C 4EBA 0000                  		jsr	sub_726FE(pc)
0006EE60 DAC6                       		adda.w	d6,a5
0006EE62 51CC FFF8                  		dbf	d4,loc_721A0
0006EE66 7802                       		moveq	#2,d4
0006EE68                            
0006EE68                            loc_721AC:
0006EE68 4EBA 0000                  		jsr	sub_729A0(pc)
0006EE6C DAC6                       		adda.w	d6,a5
0006EE6E 51CC FFF8                  		dbf	d4,loc_721AC
0006EE72                            
0006EE72                            loc_721B6:
0006EE72 584F                       		addq.w	#4,sp
0006EE74 4E75                       		rts	
0006EE76                            ; ===========================================================================
0006EE76 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0006EE7E                            		even
0006EE7E 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0006EE82                            		even
0006EE82                            ; ===========================================================================
0006EE82                            ; ---------------------------------------------------------------------------
0006EE82                            ; Play normal sound effect
0006EE82                            ; ---------------------------------------------------------------------------
0006EE82                            
0006EE82                            Sound_A0toCF:				; XREF: Sound_ChkValue
0006EE82 4A2E 0027                  		tst.b	$27(a6)
0006EE86 6600 0000                  		bne.w	loc_722C6
0006EE8A 4A2E 0004                  		tst.b	4(a6)
0006EE8E 6600 0000                  		bne.w	loc_722C6
0006EE92 4A2E 0024                  		tst.b	$24(a6)
0006EE96 6600 0000                  		bne.w	loc_722C6
0006EE9A 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0006EE9E 6600                       		bne.s	Sound_notB5	; if not, branch
0006EEA0 4A2E 002B                  		tst.b	$2B(a6)
0006EEA4 6600                       		bne.s	loc_721EE
0006EEA6 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0006EEAA                            
0006EEAA                            loc_721EE:
0006EEAA 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0006EEB0                            
0006EEB0                            Sound_notB5:
0006EEB0 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0006EEB4 6600                       		bne.s	Sound_notA7	; if not, branch
0006EEB6 4A2E 002C                  		tst.b	$2C(a6)
0006EEBA 6600 0000                  		bne.w	locret_722C4
0006EEBE 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0006EEC4                            
0006EEC4                            Sound_notA7:
0006EEC4 2079 0006 E614             		movea.l	(Go_SoundIndex).l,a0
0006EECA 0407 00A0                  		subi.b	#$A0,d7
0006EECE E54F                       		lsl.w	#2,d7
0006EED0 2670 7000                  		movea.l	(a0,d7.w),a3
0006EED4 224B                       		movea.l	a3,a1
0006EED6 7200                       		moveq	#0,d1
0006EED8 3219                       		move.w	(a1)+,d1
0006EEDA D28B                       		add.l	a3,d1
0006EEDC 1A19                       		move.b	(a1)+,d5
0006EEDE 1E19                       		move.b	(a1)+,d7
0006EEE0 5307                       		subq.b	#1,d7
0006EEE2 7C30                       		moveq	#$30,d6
0006EEE4                            
0006EEE4                            loc_72228:
0006EEE4 7600                       		moveq	#0,d3
0006EEE6 1629 0001                  		move.b	1(a1),d3
0006EEEA 1803                       		move.b	d3,d4
0006EEEC 6B00                       		bmi.s	loc_72244
0006EEEE 5543                       		subq.w	#2,d3
0006EEF0 E54B                       		lsl.w	#2,d3
0006EEF2 4BFA 0000                  		lea	dword_722CC(pc),a5
0006EEF6 2A75 3000                  		movea.l	(a5,d3.w),a5
0006EEFA 08D5 0002                  		bset	#2,(a5)
0006EEFE 6000                       		bra.s	loc_7226E
0006EF00                            ; ===========================================================================
0006EF00                            
0006EF00                            loc_72244:
0006EF00 E64B                       		lsr.w	#3,d3
0006EF02 4BFA 0000                  		lea	dword_722CC(pc),a5
0006EF06 2A75 3000                  		movea.l	(a5,d3.w),a5
0006EF0A 08D5 0002                  		bset	#2,(a5)
0006EF0E 0C04 00C0                  		cmpi.b	#$C0,d4
0006EF12 6600                       		bne.s	loc_7226E
0006EF14 1004                       		move.b	d4,d0
0006EF16 0000 001F                  		ori.b	#$1F,d0
0006EF1A 13C0 00C0 0011             		move.b	d0,($C00011).l
0006EF20 0840 0005                  		bchg	#5,d0
0006EF24 13C0 00C0 0011             		move.b	d0,($C00011).l
0006EF2A                            
0006EF2A                            loc_7226E:
0006EF2A 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0006EF2E 244D                       		movea.l	a5,a2
0006EF30 700B                       		moveq	#$B,d0
0006EF32                            
0006EF32                            loc_72276:
0006EF32 429A                       		clr.l	(a2)+
0006EF34 51C8 FFFC                  		dbf	d0,loc_72276
0006EF38                            
0006EF38 3A99                       		move.w	(a1)+,(a5)
0006EF3A 1B45 0002                  		move.b	d5,2(a5)
0006EF3E 7000                       		moveq	#0,d0
0006EF40 3019                       		move.w	(a1)+,d0
0006EF42 D08B                       		add.l	a3,d0
0006EF44 2B40 0004                  		move.l	d0,4(a5)
0006EF48 3B59 0008                  		move.w	(a1)+,8(a5)
0006EF4C 1B7C 0001 000E             		move.b	#1,$E(a5)
0006EF52 1B46 000D                  		move.b	d6,$D(a5)
0006EF56 4A04                       		tst.b	d4
0006EF58 6B00                       		bmi.s	loc_722A8
0006EF5A 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0006EF60 2B41 0020                  		move.l	d1,$20(a5)
0006EF64                            
0006EF64                            loc_722A8:
0006EF64 51CF FF7E                  		dbf	d7,loc_72228
0006EF68                            
0006EF68 4A2E 0250                  		tst.b	$250(a6)
0006EF6C 6A00                       		bpl.s	loc_722B8
0006EF6E 08EE 0002 0340             		bset	#2,$340(a6)
0006EF74                            
0006EF74                            loc_722B8:
0006EF74 4A2E 0310                  		tst.b	$310(a6)
0006EF78 6A00                       		bpl.s	locret_722C4
0006EF7A 08EE 0002 0370             		bset	#2,$370(a6)
0006EF80                            
0006EF80                            locret_722C4:
0006EF80 4E75                       		rts	
0006EF82                            ; ===========================================================================
0006EF82                            
0006EF82                            loc_722C6:
0006EF82 4216                       		clr.b	0(a6)
0006EF84 4E75                       		rts	
0006EF86                            ; ===========================================================================
0006EF86 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0006EF8A 0000 0000                  		dc.l 0
0006EF8E 00FF F100                  		dc.l $FFF100
0006EF92 00FF F130                  		dc.l $FFF130
0006EF96 00FF F190                  		dc.l $FFF190
0006EF9A 00FF F1C0                  		dc.l $FFF1C0
0006EF9E 00FF F1F0                  		dc.l $FFF1F0
0006EFA2 00FF F1F0                  		dc.l $FFF1F0
0006EFA6 00FF F220                  dword_722EC:	dc.l $FFF220
0006EFAA 0000 0000                  		dc.l 0
0006EFAE 00FF F250                  		dc.l $FFF250
0006EFB2 00FF F280                  		dc.l $FFF280
0006EFB6 00FF F2B0                  		dc.l $FFF2B0
0006EFBA 00FF F2E0                  		dc.l $FFF2E0
0006EFBE 00FF F310                  		dc.l $FFF310
0006EFC2 00FF F310                  		dc.l $FFF310
0006EFC6                            ; ===========================================================================
0006EFC6                            ; ---------------------------------------------------------------------------
0006EFC6                            ; Play GHZ waterfall sound
0006EFC6                            ; ---------------------------------------------------------------------------
0006EFC6                            
0006EFC6                            Sound_D0toDF:				; XREF: Sound_ChkValue
0006EFC6 4A2E 0027                  		tst.b	$27(a6)
0006EFCA 6600 0000                  		bne.w	locret_723C6
0006EFCE 4A2E 0004                  		tst.b	4(a6)
0006EFD2 6600 0000                  		bne.w	locret_723C6
0006EFD6 4A2E 0024                  		tst.b	$24(a6)
0006EFDA 6600 0000                  		bne.w	locret_723C6
0006EFDE 2079 0006 E60C             		movea.l	(Go_SoundD0).l,a0
0006EFE4 0407 00D0                  		subi.b	#$D0,d7
0006EFE8 E54F                       		lsl.w	#2,d7
0006EFEA 2670 7000                  		movea.l	(a0,d7.w),a3
0006EFEE 224B                       		movea.l	a3,a1
0006EFF0 7000                       		moveq	#0,d0
0006EFF2 3019                       		move.w	(a1)+,d0
0006EFF4 D08B                       		add.l	a3,d0
0006EFF6 2D40 0020                  		move.l	d0,$20(a6)
0006EFFA 1A19                       		move.b	(a1)+,d5
0006EFFC 1E19                       		move.b	(a1)+,d7
0006EFFE 5307                       		subq.b	#1,d7
0006F000 7C30                       		moveq	#$30,d6
0006F002                            
0006F002                            loc_72348:
0006F002 1829 0001                  		move.b	1(a1),d4
0006F006 6B00                       		bmi.s	loc_7235A
0006F008 08EE 0002 0100             		bset	#2,$100(a6)
0006F00E 4BEE 0340                  		lea	$340(a6),a5
0006F012 6000                       		bra.s	loc_72364
0006F014                            ; ===========================================================================
0006F014                            
0006F014                            loc_7235A:
0006F014 08EE 0002 01F0             		bset	#2,$1F0(a6)
0006F01A 4BEE 0370                  		lea	$370(a6),a5
0006F01E                            
0006F01E                            loc_72364:
0006F01E 244D                       		movea.l	a5,a2
0006F020 700B                       		moveq	#$B,d0
0006F022                            
0006F022                            loc_72368:
0006F022 429A                       		clr.l	(a2)+
0006F024 51C8 FFFC                  		dbf	d0,loc_72368
0006F028                            
0006F028 3A99                       		move.w	(a1)+,(a5)
0006F02A 1B45 0002                  		move.b	d5,2(a5)
0006F02E 7000                       		moveq	#0,d0
0006F030 3019                       		move.w	(a1)+,d0
0006F032 D08B                       		add.l	a3,d0
0006F034 2B40 0004                  		move.l	d0,4(a5)
0006F038 3B59 0008                  		move.w	(a1)+,8(a5)
0006F03C 1B7C 0001 000E             		move.b	#1,$E(a5)
0006F042 1B46 000D                  		move.b	d6,$D(a5)
0006F046 4A04                       		tst.b	d4
0006F048 6B00                       		bmi.s	loc_72396
0006F04A 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0006F050                            
0006F050                            loc_72396:
0006F050 51CF FFB0                  		dbf	d7,loc_72348
0006F054                            
0006F054 4A2E 0250                  		tst.b	$250(a6)
0006F058 6A00                       		bpl.s	loc_723A6
0006F05A 08EE 0002 0340             		bset	#2,$340(a6)
0006F060                            
0006F060                            loc_723A6:
0006F060 4A2E 0310                  		tst.b	$310(a6)
0006F064 6A00                       		bpl.s	locret_723C6
0006F066 08EE 0002 0370             		bset	#2,$370(a6)
0006F06C 0004 001F                  		ori.b	#$1F,d4
0006F070 13C4 00C0 0011             		move.b	d4,($C00011).l
0006F076 0844 0005                  		bchg	#5,d4
0006F07A 13C4 00C0 0011             		move.b	d4,($C00011).l
0006F080                            
0006F080                            locret_723C6:
0006F080 4E75                       		rts	
0006F082                            ; End of function Sound_ChkValue
0006F082                            
0006F082                            ; ===========================================================================
0006F082 00FF F100                  		dc.l $FFF100
0006F086 00FF F1F0                  		dc.l $FFF1F0
0006F08A 00FF F250                  		dc.l $FFF250
0006F08E 00FF F310                  		dc.l $FFF310
0006F092 00FF F340                  		dc.l $FFF340
0006F096 00FF F370                  		dc.l $FFF370
0006F09A                            
0006F09A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F09A                            
0006F09A                            
0006F09A                            Snd_FadeOut1:				; XREF: Sound_E0
0006F09A 4216                       		clr.b	0(a6)
0006F09C 4BEE 0220                  		lea	$220(a6),a5
0006F0A0 7E05                       		moveq	#5,d7
0006F0A2                            
0006F0A2                            loc_723EA:
0006F0A2 4A15                       		tst.b	(a5)
0006F0A4 6A00 0000                  		bpl.w	loc_72472
0006F0A8 0895 0007                  		bclr	#7,(a5)
0006F0AC 7600                       		moveq	#0,d3
0006F0AE 162D 0001                  		move.b	1(a5),d3
0006F0B2 6B00                       		bmi.s	loc_7243C
0006F0B4 4EBA 0000                  		jsr	sub_726FE(pc)
0006F0B8 0C03 0004                  		cmpi.b	#4,d3
0006F0BC 6600                       		bne.s	loc_72416
0006F0BE 4A2E 0340                  		tst.b	$340(a6)
0006F0C2 6A00                       		bpl.s	loc_72416
0006F0C4 4BEE 0340                  		lea	$340(a6),a5
0006F0C8 226E 0020                  		movea.l	$20(a6),a1
0006F0CC 6000                       		bra.s	loc_72428
0006F0CE                            ; ===========================================================================
0006F0CE                            
0006F0CE                            loc_72416:
0006F0CE 5503                       		subq.b	#2,d3
0006F0D0 E50B                       		lsl.b	#2,d3
0006F0D2 41FA FEB2                  		lea	dword_722CC(pc),a0
0006F0D6 264D                       		movea.l	a5,a3
0006F0D8 2A70 3000                  		movea.l	(a0,d3.w),a5
0006F0DC 226E 0018                  		movea.l	$18(a6),a1
0006F0E0                            
0006F0E0                            loc_72428:
0006F0E0 0895 0002                  		bclr	#2,(a5)
0006F0E4 08D5 0001                  		bset	#1,(a5)
0006F0E8 102D 000B                  		move.b	$B(a5),d0
0006F0EC 4EBA 0000                  		jsr	sub_72C4E(pc)
0006F0F0 2A4B                       		movea.l	a3,a5
0006F0F2 6000                       		bra.s	loc_72472
0006F0F4                            ; ===========================================================================
0006F0F4                            
0006F0F4                            loc_7243C:
0006F0F4 4EBA 0000                  		jsr	sub_729A0(pc)
0006F0F8 41EE 0370                  		lea	$370(a6),a0
0006F0FC 0C03 00E0                  		cmpi.b	#$E0,d3
0006F100 6700                       		beq.s	loc_7245A
0006F102 0C03 00C0                  		cmpi.b	#$C0,d3
0006F106 6700                       		beq.s	loc_7245A
0006F108 E60B                       		lsr.b	#3,d3
0006F10A 41FA FE7A                  		lea	dword_722CC(pc),a0
0006F10E 2070 3000                  		movea.l	(a0,d3.w),a0
0006F112                            
0006F112                            loc_7245A:
0006F112 0890 0002                  		bclr	#2,(a0)
0006F116 08D0 0001                  		bset	#1,(a0)
0006F11A 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0006F120 6600                       		bne.s	loc_72472
0006F122 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0006F12A                            
0006F12A                            loc_72472:
0006F12A DAFC 0030                  		adda.w	#$30,a5
0006F12E 51CF FF72                  		dbf	d7,loc_723EA
0006F132                            
0006F132 4E75                       		rts	
0006F134                            ; End of function Snd_FadeOut1
0006F134                            
0006F134                            
0006F134                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F134                            
0006F134                            
0006F134                            Snd_FadeOut2:				; XREF: Sound_E0
0006F134 4BEE 0340                  		lea	$340(a6),a5
0006F138 4A15                       		tst.b	(a5)
0006F13A 6A00                       		bpl.s	loc_724AE
0006F13C 0895 0007                  		bclr	#7,(a5)
0006F140 0815 0002                  		btst	#2,(a5)
0006F144 6600                       		bne.s	loc_724AE
0006F146 4EBA 0000                  		jsr	loc_7270A(pc)
0006F14A 4BEE 0100                  		lea	$100(a6),a5
0006F14E 0895 0002                  		bclr	#2,(a5)
0006F152 08D5 0001                  		bset	#1,(a5)
0006F156 4A15                       		tst.b	(a5)
0006F158 6A00                       		bpl.s	loc_724AE
0006F15A 226E 0018                  		movea.l	$18(a6),a1
0006F15E 102D 000B                  		move.b	$B(a5),d0
0006F162 4EBA 0000                  		jsr	sub_72C4E(pc)
0006F166                            
0006F166                            loc_724AE:
0006F166 4BEE 0370                  		lea	$370(a6),a5
0006F16A 4A15                       		tst.b	(a5)
0006F16C 6A00                       		bpl.s	locret_724E4
0006F16E 0895 0007                  		bclr	#7,(a5)
0006F172 0815 0002                  		btst	#2,(a5)
0006F176 6600                       		bne.s	locret_724E4
0006F178 4EBA 0000                  		jsr	loc_729A6(pc)
0006F17C 4BEE 01F0                  		lea	$1F0(a6),a5
0006F180 0895 0002                  		bclr	#2,(a5)
0006F184 08D5 0001                  		bset	#1,(a5)
0006F188 4A15                       		tst.b	(a5)
0006F18A 6A00                       		bpl.s	locret_724E4
0006F18C 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0006F192 6600                       		bne.s	locret_724E4
0006F194 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0006F19C                            
0006F19C                            locret_724E4:
0006F19C 4E75                       		rts	
0006F19E                            ; End of function Snd_FadeOut2
0006F19E                            
0006F19E                            ; ===========================================================================
0006F19E                            ; ---------------------------------------------------------------------------
0006F19E                            ; Fade out music
0006F19E                            ; ---------------------------------------------------------------------------
0006F19E                            
0006F19E                            Sound_E0:				; XREF: Sound_ExIndex
0006F19E 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0006F1A2 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0006F1A6 1D7C 0003 0006             		move.b	#3,6(a6)
0006F1AC 1D7C 0028 0004             		move.b	#$28,4(a6)
0006F1B2 422E 0040                  		clr.b	$40(a6)
0006F1B6 422E 002A                  		clr.b	$2A(a6)
0006F1BA 4E75                       		rts	
0006F1BC                            
0006F1BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F1BC                            
0006F1BC                            
0006F1BC                            sub_72504:				; XREF: sub_71B4C
0006F1BC 102E 0006                  		move.b	6(a6),d0
0006F1C0 6700                       		beq.s	loc_72510
0006F1C2 532E 0006                  		subq.b	#1,6(a6)
0006F1C6 4E75                       		rts	
0006F1C8                            ; ===========================================================================
0006F1C8                            
0006F1C8                            loc_72510:
0006F1C8 532E 0004                  		subq.b	#1,4(a6)
0006F1CC 6700 0000                  		beq.w	Sound_E4
0006F1D0 1D7C 0003 0006             		move.b	#3,6(a6)
0006F1D6 4BEE 0070                  		lea	$70(a6),a5
0006F1DA 7E05                       		moveq	#5,d7
0006F1DC                            
0006F1DC                            loc_72524:
0006F1DC 4A15                       		tst.b	(a5)
0006F1DE 6A00                       		bpl.s	loc_72538
0006F1E0 522D 0009                  		addq.b	#1,9(a5)
0006F1E4 6A00                       		bpl.s	loc_72534
0006F1E6 0895 0007                  		bclr	#7,(a5)
0006F1EA 6000                       		bra.s	loc_72538
0006F1EC                            ; ===========================================================================
0006F1EC                            
0006F1EC                            loc_72534:
0006F1EC 4EBA 0000                  		jsr	sub_72CB4(pc)
0006F1F0                            
0006F1F0                            loc_72538:
0006F1F0 DAFC 0030                  		adda.w	#$30,a5
0006F1F4 51CF FFE6                  		dbf	d7,loc_72524
0006F1F8                            
0006F1F8 7E02                       		moveq	#2,d7
0006F1FA                            
0006F1FA                            loc_72542:
0006F1FA 4A15                       		tst.b	(a5)
0006F1FC 6A00                       		bpl.s	loc_72560
0006F1FE 522D 0009                  		addq.b	#1,9(a5)
0006F202 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0006F208 6500                       		bcs.s	loc_72558
0006F20A 0895 0007                  		bclr	#7,(a5)
0006F20E 6000                       		bra.s	loc_72560
0006F210                            ; ===========================================================================
0006F210                            
0006F210                            loc_72558:
0006F210 1C2D 0009                  		move.b	9(a5),d6
0006F214 4EBA 0000                  		jsr	sub_7296A(pc)
0006F218                            
0006F218                            loc_72560:
0006F218 DAFC 0030                  		adda.w	#$30,a5
0006F21C 51CF FFDC                  		dbf	d7,loc_72542
0006F220                            
0006F220 4E75                       		rts	
0006F222                            ; End of function sub_72504
0006F222                            
0006F222                            
0006F222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F222                            
0006F222                            
0006F222                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0006F222 7602                       		moveq	#2,d3
0006F224 7028                       		moveq	#$28,d0
0006F226                            
0006F226                            loc_7256E:
0006F226 1203                       		move.b	d3,d1
0006F228 4EBA 0000                  		jsr	sub_7272E(pc)
0006F22C 5801                       		addq.b	#4,d1
0006F22E 4EBA 0000                  		jsr	sub_7272E(pc)
0006F232 51CB FFF2                  		dbf	d3,loc_7256E
0006F236                            
0006F236 7040                       		moveq	#$40,d0
0006F238 727F                       		moveq	#$7F,d1
0006F23A 7802                       		moveq	#2,d4
0006F23C                            
0006F23C                            loc_72584:
0006F23C 7603                       		moveq	#3,d3
0006F23E                            
0006F23E                            loc_72586:
0006F23E 4EBA 0000                  		jsr	sub_7272E(pc)
0006F242 4EBA 0000                  		jsr	sub_72764(pc)
0006F246 5840                       		addq.w	#4,d0
0006F248 51CB FFF4                  		dbf	d3,loc_72586
0006F24C                            
0006F24C 0400 000F                  		subi.b	#$F,d0
0006F250 51CC FFEA                  		dbf	d4,loc_72584
0006F254                            
0006F254 4E75                       		rts	
0006F256                            ; End of function sub_7256A
0006F256                            
0006F256                            ; ===========================================================================
0006F256                            ; ---------------------------------------------------------------------------
0006F256                            ; Stop music
0006F256                            ; ---------------------------------------------------------------------------
0006F256                            
0006F256                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0006F256 702B                       		moveq	#$2B,d0
0006F258 123C 0080                  		move.b	#$80,d1
0006F25C 4EBA 0000                  		jsr	sub_7272E(pc)
0006F260 7027                       		moveq	#$27,d0
0006F262 7200                       		moveq	#0,d1
0006F264 4EBA 0000                  		jsr	sub_7272E(pc)
0006F268 204E                       		movea.l	a6,a0
0006F26A 303C 00E3                  		move.w	#$E3,d0
0006F26E                            
0006F26E                            loc_725B6:
0006F26E 4298                       		clr.l	(a0)+
0006F270 51C8 FFFC                  		dbf	d0,loc_725B6
0006F274                            
0006F274 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0006F27A 4EBA FFA6                  		jsr	sub_7256A(pc)
0006F27E 6000 0000                  		bra.w	sub_729B6
0006F282                            
0006F282                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F282                            
0006F282                            
0006F282                            sub_725CA:				; XREF: Sound_ChkValue
0006F282 204E                       		movea.l	a6,a0
0006F284 1216                       		move.b	0(a6),d1
0006F286 142E 0027                  		move.b	$27(a6),d2
0006F28A 162E 002A                  		move.b	$2A(a6),d3
0006F28E 182E 0026                  		move.b	$26(a6),d4
0006F292 3A2E 000A                  		move.w	$A(a6),d5
0006F296 303C 0087                  		move.w	#$87,d0
0006F29A                            
0006F29A                            loc_725E4:
0006F29A 4298                       		clr.l	(a0)+
0006F29C 51C8 FFFC                  		dbf	d0,loc_725E4
0006F2A0                            
0006F2A0 1C81                       		move.b	d1,0(a6)
0006F2A2 1D42 0027                  		move.b	d2,$27(a6)
0006F2A6 1D43 002A                  		move.b	d3,$2A(a6)
0006F2AA 1D44 0026                  		move.b	d4,$26(a6)
0006F2AE 3D45 000A                  		move.w	d5,$A(a6)
0006F2B2 1D7C 0080 0009             		move.b	#$80,9(a6)
0006F2B8 4EBA FF68                  		jsr	sub_7256A(pc)
0006F2BC 6000 0000                  		bra.w	sub_729B6
0006F2C0                            ; End of function sub_725CA
0006F2C0                            
0006F2C0                            
0006F2C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F2C0                            
0006F2C0                            
0006F2C0                            sub_7260C:				; XREF: sub_71B4C
0006F2C0 1D6E 0002 0001             		move.b	2(a6),1(a6)
0006F2C6 41EE 004E                  		lea	$4E(a6),a0
0006F2CA 7030                       		moveq	#$30,d0
0006F2CC 7209                       		moveq	#9,d1
0006F2CE                            
0006F2CE                            loc_7261A:
0006F2CE 5210                       		addq.b	#1,(a0)
0006F2D0 D0C0                       		adda.w	d0,a0
0006F2D2 51C9 FFFA                  		dbf	d1,loc_7261A
0006F2D6                            
0006F2D6 4E75                       		rts	
0006F2D8                            ; End of function sub_7260C
0006F2D8                            
0006F2D8                            ; ===========================================================================
0006F2D8                            ; ---------------------------------------------------------------------------
0006F2D8                            ; Speed	up music
0006F2D8                            ; ---------------------------------------------------------------------------
0006F2D8                            
0006F2D8                            Sound_E2:				; XREF: Sound_ExIndex
0006F2D8 4A2E 0027                  		tst.b	$27(a6)
0006F2DC 6600                       		bne.s	loc_7263E
0006F2DE 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0006F2E4 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0006F2EA 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0006F2F0 4E75                       		rts	
0006F2F2                            ; ===========================================================================
0006F2F2                            
0006F2F2                            loc_7263E:
0006F2F2 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0006F2F8 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0006F2FE 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0006F304 4E75                       		rts	
0006F306                            ; ===========================================================================
0006F306                            ; ---------------------------------------------------------------------------
0006F306                            ; Change music back to normal speed
0006F306                            ; ---------------------------------------------------------------------------
0006F306                            
0006F306                            Sound_E3:				; XREF: Sound_ExIndex
0006F306 4A2E 0027                  		tst.b	$27(a6)
0006F30A 6600                       		bne.s	loc_7266A
0006F30C 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0006F312 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0006F318 422E 002A                  		clr.b	$2A(a6)
0006F31C 4E75                       		rts	
0006F31E                            ; ===========================================================================
0006F31E                            
0006F31E                            loc_7266A:
0006F31E 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0006F324 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0006F32A 422E 03CA                  		clr.b	$3CA(a6)
0006F32E 4E75                       		rts	
0006F330                            
0006F330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F330                            
0006F330                            
0006F330                            sub_7267C:				; XREF: sub_71B4C
0006F330 4A2E 0025                  		tst.b	$25(a6)
0006F334 6700                       		beq.s	loc_72688
0006F336 532E 0025                  		subq.b	#1,$25(a6)
0006F33A 4E75                       		rts	
0006F33C                            ; ===========================================================================
0006F33C                            
0006F33C                            loc_72688:
0006F33C 4A2E 0026                  		tst.b	$26(a6)
0006F340 6700                       		beq.s	loc_726D6
0006F342 532E 0026                  		subq.b	#1,$26(a6)
0006F346 1D7C 0002 0025             		move.b	#2,$25(a6)
0006F34C 4BEE 0070                  		lea	$70(a6),a5
0006F350 7E05                       		moveq	#5,d7
0006F352                            
0006F352                            loc_7269E:
0006F352 4A15                       		tst.b	(a5)
0006F354 6A00                       		bpl.s	loc_726AA
0006F356 532D 0009                  		subq.b	#1,9(a5)
0006F35A 4EBA 0000                  		jsr	sub_72CB4(pc)
0006F35E                            
0006F35E                            loc_726AA:
0006F35E DAFC 0030                  		adda.w	#$30,a5
0006F362 51CF FFEE                  		dbf	d7,loc_7269E
0006F366 7E02                       		moveq	#2,d7
0006F368                            
0006F368                            loc_726B4:
0006F368 4A15                       		tst.b	(a5)
0006F36A 6A00                       		bpl.s	loc_726CC
0006F36C 532D 0009                  		subq.b	#1,9(a5)
0006F370 1C2D 0009                  		move.b	9(a5),d6
0006F374 0C06 0010                  		cmpi.b	#$10,d6
0006F378 6500                       		bcs.s	loc_726C8
0006F37A 7C0F                       		moveq	#$F,d6
0006F37C                            
0006F37C                            loc_726C8:
0006F37C 4EBA 0000                  		jsr	sub_7296A(pc)
0006F380                            
0006F380                            loc_726CC:
0006F380 DAFC 0030                  		adda.w	#$30,a5
0006F384 51CF FFE2                  		dbf	d7,loc_726B4
0006F388 4E75                       		rts	
0006F38A                            ; ===========================================================================
0006F38A                            
0006F38A                            loc_726D6:
0006F38A 08AE 0002 0040             		bclr	#2,$40(a6)
0006F390 422E 0024                  		clr.b	$24(a6)
0006F394 4E75                       		rts	
0006F396                            ; End of function sub_7267C
0006F396                            
0006F396                            ; ===========================================================================
0006F396                            
0006F396                            loc_726E2:				; XREF: sub_71CCA
0006F396 0815 0001                  		btst	#1,(a5)
0006F39A 6600                       		bne.s	locret_726FC
0006F39C 0815 0002                  		btst	#2,(a5)
0006F3A0 6600                       		bne.s	locret_726FC
0006F3A2 7028                       		moveq	#$28,d0
0006F3A4 122D 0001                  		move.b	1(a5),d1
0006F3A8 0001 00F0                  		ori.b	#-$10,d1
0006F3AC 6000 0000                  		bra.w	sub_7272E
0006F3B0                            ; ===========================================================================
0006F3B0                            
0006F3B0                            locret_726FC:
0006F3B0 4E75                       		rts	
0006F3B2                            
0006F3B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F3B2                            
0006F3B2                            
0006F3B2                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0006F3B2 0815 0004                  		btst	#4,(a5)
0006F3B6 6600                       		bne.s	locret_72714
0006F3B8 0815 0002                  		btst	#2,(a5)
0006F3BC 6600                       		bne.s	locret_72714
0006F3BE                            
0006F3BE                            loc_7270A:				; XREF: Snd_FadeOut2
0006F3BE 7028                       		moveq	#$28,d0
0006F3C0 122D 0001                  		move.b	1(a5),d1
0006F3C4 6000 0000                  		bra.w	sub_7272E
0006F3C8                            ; ===========================================================================
0006F3C8                            
0006F3C8                            locret_72714:
0006F3C8 4E75                       		rts	
0006F3CA                            ; End of function sub_726FE
0006F3CA                            
0006F3CA                            ; ===========================================================================
0006F3CA                            
0006F3CA                            loc_72716:				; XREF: sub_72A5A
0006F3CA 0815 0002                  		btst	#2,(a5)
0006F3CE 6600                       		bne.s	locret_72720
0006F3D0 6000 0000                  		bra.w	sub_72722
0006F3D4                            ; ===========================================================================
0006F3D4                            
0006F3D4                            locret_72720:
0006F3D4 4E75                       		rts	
0006F3D6                            
0006F3D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F3D6                            
0006F3D6                            
0006F3D6                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0006F3D6 082D 0002 0001             		btst	#2,1(a5)
0006F3DC 6600                       		bne.s	loc_7275A
0006F3DE D02D 0001                  		add.b	1(a5),d0
0006F3E2                            ; End of function sub_72722
0006F3E2                            
0006F3E2                            
0006F3E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F3E2                            
0006F3E2                            
0006F3E2                            sub_7272E:				; XREF: loc_71E6A
0006F3E2 1439 00A0 4000             		move.b	($A04000).l,d2
0006F3E8 0802 0007                  		btst	#7,d2
0006F3EC 66F4                       		bne.s	sub_7272E
0006F3EE 13C0 00A0 4000             		move.b	d0,($A04000).l
0006F3F4 4E71                       		nop	
0006F3F6 4E71                       		nop	
0006F3F8 4E71                       		nop	
0006F3FA                            
0006F3FA                            loc_72746:
0006F3FA 1439 00A0 4000             		move.b	($A04000).l,d2
0006F400 0802 0007                  		btst	#7,d2
0006F404 66F4                       		bne.s	loc_72746
0006F406                            
0006F406 13C1 00A0 4001             		move.b	d1,($A04001).l
0006F40C 4E75                       		rts	
0006F40E                            ; End of function sub_7272E
0006F40E                            
0006F40E                            ; ===========================================================================
0006F40E                            
0006F40E                            loc_7275A:				; XREF: sub_72722
0006F40E 142D 0001                  		move.b	1(a5),d2
0006F412 0882 0002                  		bclr	#2,d2
0006F416 D002                       		add.b	d2,d0
0006F418                            
0006F418                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F418                            
0006F418                            
0006F418                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0006F418 1439 00A0 4000             		move.b	($A04000).l,d2
0006F41E 0802 0007                  		btst	#7,d2
0006F422 66F4                       		bne.s	sub_72764
0006F424 13C0 00A0 4002             		move.b	d0,($A04002).l
0006F42A 4E71                       		nop	
0006F42C 4E71                       		nop	
0006F42E 4E71                       		nop	
0006F430                            
0006F430                            loc_7277C:
0006F430 1439 00A0 4000             		move.b	($A04000).l,d2
0006F436 0802 0007                  		btst	#7,d2
0006F43A 66F4                       		bne.s	loc_7277C
0006F43C                            
0006F43C 13C1 00A0 4003             		move.b	d1,($A04003).l
0006F442 4E75                       		rts	
0006F444                            ; End of function sub_72764
0006F444                            
0006F444                            ; ===========================================================================
0006F444 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0006F456 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0006F468 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0006F478 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0006F488 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0006F498 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0006F4A8 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0006F4B8 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0006F4C8 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0006F4D8 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0006F4E8 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0006F4F8 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0006F504                            
0006F504                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F504                            
0006F504                            
0006F504                            sub_72850:				; XREF: sub_71B4C
0006F504 532D 000E                  		subq.b	#1,$E(a5)
0006F508 6600                       		bne.s	loc_72866
0006F50A 0895 0004                  		bclr	#4,(a5)
0006F50E 4EBA 0000                  		jsr	sub_72878(pc)
0006F512 4EBA 0000                  		jsr	sub_728DC(pc)
0006F516 6000 0000                  		bra.w	loc_7292E
0006F51A                            ; ===========================================================================
0006F51A                            
0006F51A                            loc_72866:
0006F51A 4EBA F52A                  		jsr	sub_71D9E(pc)
0006F51E 4EBA 0000                  		jsr	sub_72926(pc)
0006F522 4EBA F54A                  		jsr	sub_71DC6(pc)
0006F526 4EBA 0000                  		jsr	sub_728E2(pc)
0006F52A 4E75                       		rts	
0006F52C                            ; End of function sub_72850
0006F52C                            
0006F52C                            
0006F52C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F52C                            
0006F52C                            
0006F52C                            sub_72878:				; XREF: sub_72850
0006F52C 0895 0001                  		bclr	#1,(a5)
0006F530 286D 0004                  		movea.l	4(a5),a4
0006F534                            
0006F534                            loc_72880:
0006F534 7A00                       		moveq	#0,d5
0006F536 1A1C                       		move.b	(a4)+,d5
0006F538 0C05 00E0                  		cmpi.b	#$E0,d5
0006F53C 6500                       		bcs.s	loc_72890
0006F53E 4EBA 0000                  		jsr	sub_72A5A(pc)
0006F542 60F0                       		bra.s	loc_72880
0006F544                            ; ===========================================================================
0006F544                            
0006F544                            loc_72890:
0006F544 4A05                       		tst.b	d5
0006F546 6A00                       		bpl.s	loc_728A4
0006F548 4EBA 0000                  		jsr	sub_728AC(pc)
0006F54C 1A1C                       		move.b	(a4)+,d5
0006F54E 4A05                       		tst.b	d5
0006F550 6A00                       		bpl.s	loc_728A4
0006F552 534C                       		subq.w	#1,a4
0006F554 6000 F4B2                  		bra.w	sub_71D60
0006F558                            ; ===========================================================================
0006F558                            
0006F558                            loc_728A4:
0006F558 4EBA F48E                  		jsr	sub_71D40(pc)
0006F55C 6000 F4AA                  		bra.w	sub_71D60
0006F560                            ; End of function sub_72878
0006F560                            
0006F560                            
0006F560                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F560                            
0006F560                            
0006F560                            sub_728AC:				; XREF: sub_72878
0006F560 0405 0081                  		subi.b	#$81,d5
0006F564 6500                       		bcs.s	loc_728CA
0006F566 DA2D 0008                  		add.b	8(a5),d5
0006F56A 0245 007F                  		andi.w	#$7F,d5
0006F56E E34D                       		lsl.w	#1,d5
0006F570 41FA 0000                  		lea	word_729CE(pc),a0
0006F574 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0006F57A 6000 F48C                  		bra.w	sub_71D60
0006F57E                            ; ===========================================================================
0006F57E                            
0006F57E                            loc_728CA:
0006F57E 08D5 0001                  		bset	#1,(a5)
0006F582 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0006F588 4EBA F47E                  		jsr	sub_71D60(pc)
0006F58C 6000 0000                  		bra.w	sub_729A0
0006F590                            ; End of function sub_728AC
0006F590                            
0006F590                            
0006F590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F590                            
0006F590                            
0006F590                            sub_728DC:				; XREF: sub_72850
0006F590 3C2D 0010                  		move.w	$10(a5),d6
0006F594 6B00                       		bmi.s	loc_72920
0006F596                            ; End of function sub_728DC
0006F596                            
0006F596                            
0006F596                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F596                            
0006F596                            
0006F596                            sub_728E2:				; XREF: sub_72850
0006F596 102D 001E                  		move.b	$1E(a5),d0
0006F59A 4880                       		ext.w	d0
0006F59C DC40                       		add.w	d0,d6
0006F59E 0815 0002                  		btst	#2,(a5)
0006F5A2 6600                       		bne.s	locret_7291E
0006F5A4 0815 0001                  		btst	#1,(a5)
0006F5A8 6600                       		bne.s	locret_7291E
0006F5AA 102D 0001                  		move.b	1(a5),d0
0006F5AE 0C00 00E0                  		cmpi.b	#$E0,d0
0006F5B2 6600                       		bne.s	loc_72904
0006F5B4 103C 00C0                  		move.b	#$C0,d0
0006F5B8                            
0006F5B8                            loc_72904:
0006F5B8 3206                       		move.w	d6,d1
0006F5BA 0201 000F                  		andi.b	#$F,d1
0006F5BE 8001                       		or.b	d1,d0
0006F5C0 E84E                       		lsr.w	#4,d6
0006F5C2 0206 003F                  		andi.b	#$3F,d6
0006F5C6 13C0 00C0 0011             		move.b	d0,($C00011).l
0006F5CC 13C6 00C0 0011             		move.b	d6,($C00011).l
0006F5D2                            
0006F5D2                            locret_7291E:
0006F5D2 4E75                       		rts	
0006F5D4                            ; End of function sub_728E2
0006F5D4                            
0006F5D4                            ; ===========================================================================
0006F5D4                            
0006F5D4                            loc_72920:				; XREF: sub_728DC
0006F5D4 08D5 0001                  		bset	#1,(a5)
0006F5D8 4E75                       		rts	
0006F5DA                            
0006F5DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F5DA                            
0006F5DA                            
0006F5DA                            sub_72926:				; XREF: sub_72850
0006F5DA 4A2D 000B                  		tst.b	$B(a5)
0006F5DE 6700 0000                  		beq.w	locret_7298A
0006F5E2                            
0006F5E2                            loc_7292E:				; XREF: sub_72850
0006F5E2 1C2D 0009                  		move.b	9(a5),d6
0006F5E6 7000                       		moveq	#0,d0
0006F5E8 102D 000B                  		move.b	$B(a5),d0
0006F5EC 6700                       		beq.s	sub_7296A
0006F5EE 2079 0006 E61C             		movea.l	(Go_PSGIndex).l,a0
0006F5F4 5340                       		subq.w	#1,d0
0006F5F6 E548                       		lsl.w	#2,d0
0006F5F8 2070 0000                  		movea.l	(a0,d0.w),a0
0006F5FC 102D 000C                  		move.b	$C(a5),d0
0006F600 1030 0000                  		move.b	(a0,d0.w),d0
0006F604 522D 000C                  		addq.b	#1,$C(a5)
0006F608 0800 0007                  		btst	#7,d0
0006F60C 6700                       		beq.s	loc_72960
0006F60E 0C00 0080                  		cmpi.b	#$80,d0
0006F612 6700                       		beq.s	loc_7299A
0006F614                            
0006F614                            loc_72960:
0006F614 DC40                       		add.w	d0,d6
0006F616 0C06 0010                  		cmpi.b	#$10,d6
0006F61A 6500                       		bcs.s	sub_7296A
0006F61C 7C0F                       		moveq	#$F,d6
0006F61E                            ; End of function sub_72926
0006F61E                            
0006F61E                            
0006F61E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F61E                            
0006F61E                            
0006F61E                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0006F61E 0815 0001                  		btst	#1,(a5)
0006F622 6600                       		bne.s	locret_7298A
0006F624 0815 0002                  		btst	#2,(a5)
0006F628 6600                       		bne.s	locret_7298A
0006F62A 0815 0004                  		btst	#4,(a5)
0006F62E 6600                       		bne.s	loc_7298C
0006F630                            
0006F630                            loc_7297C:
0006F630 8C2D 0001                  		or.b	1(a5),d6
0006F634 0606 0010                  		addi.b	#$10,d6
0006F638 13C6 00C0 0011             		move.b	d6,($C00011).l
0006F63E                            
0006F63E                            locret_7298A:
0006F63E 4E75                       		rts	
0006F640                            ; ===========================================================================
0006F640                            
0006F640                            loc_7298C:
0006F640 4A2D 0013                  		tst.b	$13(a5)
0006F644 67EA                       		beq.s	loc_7297C
0006F646 4A2D 0012                  		tst.b	$12(a5)
0006F64A 66E4                       		bne.s	loc_7297C
0006F64C 4E75                       		rts	
0006F64E                            ; End of function sub_7296A
0006F64E                            
0006F64E                            ; ===========================================================================
0006F64E                            
0006F64E                            loc_7299A:				; XREF: sub_72926
0006F64E 532D 000C                  		subq.b	#1,$C(a5)
0006F652 4E75                       		rts	
0006F654                            
0006F654                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F654                            
0006F654                            
0006F654                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0006F654 0815 0002                  		btst	#2,(a5)
0006F658 6600                       		bne.s	locret_729B4
0006F65A                            
0006F65A                            loc_729A6:				; XREF: Snd_FadeOut2
0006F65A 102D 0001                  		move.b	1(a5),d0
0006F65E 0000 001F                  		ori.b	#$1F,d0
0006F662 13C0 00C0 0011             		move.b	d0,($C00011).l
0006F668                            
0006F668                            locret_729B4:
0006F668 4E75                       		rts	
0006F66A                            ; End of function sub_729A0
0006F66A                            
0006F66A                            
0006F66A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F66A                            
0006F66A                            
0006F66A                            sub_729B6:				; XREF: loc_71E7C
0006F66A 41F9 00C0 0011             		lea	($C00011).l,a0
0006F670 10BC 009F                  		move.b	#$9F,(a0)
0006F674 10BC 00BF                  		move.b	#$BF,(a0)
0006F678 10BC 00DF                  		move.b	#$DF,(a0)
0006F67C 10BC 00FF                  		move.b	#$FF,(a0)
0006F680 4E75                       		rts	
0006F682                            ; End of function sub_729B6
0006F682                            
0006F682                            ; ===========================================================================
0006F682 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0006F694 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0006F6A6 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0006F6BA 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0006F6CE 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0006F6E2 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0006F6F6 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0006F70A 0011 0000                  		dc.w $11, 0
0006F70E                            
0006F70E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F70E                            
0006F70E                            
0006F70E                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0006F70E 0445 00E0                  		subi.w	#$E0,d5
0006F712 E54D                       		lsl.w	#2,d5
0006F714 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0006F718                            ; End of function sub_72A5A
0006F718                            
0006F718                            ; ===========================================================================
0006F718                            
0006F718                            loc_72A64:
0006F718 6000 0000                  		bra.w	loc_72ACC
0006F71C                            ; ===========================================================================
0006F71C 6000 0000                  		bra.w	loc_72AEC
0006F720                            ; ===========================================================================
0006F720 6000 0000                  		bra.w	loc_72AF2
0006F724                            ; ===========================================================================
0006F724 6000 0000                  		bra.w	loc_72AF8
0006F728                            ; ===========================================================================
0006F728 6000 0000                  		bra.w	loc_72B14
0006F72C                            ; ===========================================================================
0006F72C 6000 0000                  		bra.w	loc_72B9E
0006F730                            ; ===========================================================================
0006F730 6000 0000                  		bra.w	loc_72BA4
0006F734                            ; ===========================================================================
0006F734 6000 0000                  		bra.w	loc_72BAE
0006F738                            ; ===========================================================================
0006F738 6000 0000                  		bra.w	loc_72BB4
0006F73C                            ; ===========================================================================
0006F73C 6000 0000                  		bra.w	loc_72BBE
0006F740                            ; ===========================================================================
0006F740 6000 0000                  		bra.w	loc_72BC6
0006F744                            ; ===========================================================================
0006F744 6000 0000                  		bra.w	loc_72BD0
0006F748                            ; ===========================================================================
0006F748 6000 0000                  		bra.w	loc_72BE6
0006F74C                            ; ===========================================================================
0006F74C 6000 0000                  		bra.w	loc_72BEE
0006F750                            ; ===========================================================================
0006F750 6000 0000                  		bra.w	loc_72BF4
0006F754                            ; ===========================================================================
0006F754 6000 0000                  		bra.w	loc_72C26
0006F758                            ; ===========================================================================
0006F758 6000 0000                  		bra.w	loc_72D30
0006F75C                            ; ===========================================================================
0006F75C 6000 0000                  		bra.w	loc_72D52
0006F760                            ; ===========================================================================
0006F760 6000 0000                  		bra.w	loc_72D58
0006F764                            ; ===========================================================================
0006F764 6000 0000                  		bra.w	loc_72E06
0006F768                            ; ===========================================================================
0006F768 6000 0000                  		bra.w	loc_72E20
0006F76C                            ; ===========================================================================
0006F76C 6000 0000                  		bra.w	loc_72E26
0006F770                            ; ===========================================================================
0006F770 6000 0000                  		bra.w	loc_72E2C
0006F774                            ; ===========================================================================
0006F774 6000 0000                  		bra.w	loc_72E38
0006F778                            ; ===========================================================================
0006F778 6000 0000                  		bra.w	loc_72E52
0006F77C                            ; ===========================================================================
0006F77C 6000 0000                  		bra.w	loc_72E64
0006F780                            ; ===========================================================================
0006F780                            
0006F780                            loc_72ACC:				; XREF: loc_72A64
0006F780 121C                       		move.b	(a4)+,d1
0006F782 4A2D 0001                  		tst.b	1(a5)
0006F786 6B00                       		bmi.s	locret_72AEA
0006F788 102D 000A                  		move.b	$A(a5),d0
0006F78C 0200 0037                  		andi.b	#$37,d0
0006F790 8200                       		or.b	d0,d1
0006F792 1B41 000A                  		move.b	d1,$A(a5)
0006F796 103C 00B4                  		move.b	#$B4,d0
0006F79A 6000 FC2E                  		bra.w	loc_72716
0006F79E                            ; ===========================================================================
0006F79E                            
0006F79E                            locret_72AEA:
0006F79E 4E75                       		rts	
0006F7A0                            ; ===========================================================================
0006F7A0                            
0006F7A0                            loc_72AEC:				; XREF: loc_72A64
0006F7A0 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0006F7A4 4E75                       		rts	
0006F7A6                            ; ===========================================================================
0006F7A6                            
0006F7A6                            loc_72AF2:				; XREF: loc_72A64
0006F7A6 1D5C 0007                  		move.b	(a4)+,7(a6)
0006F7AA 4E75                       		rts	
0006F7AC                            ; ===========================================================================
0006F7AC                            
0006F7AC                            loc_72AF8:				; XREF: loc_72A64
0006F7AC 7000                       		moveq	#0,d0
0006F7AE 102D 000D                  		move.b	$D(a5),d0
0006F7B2 2875 0000                  		movea.l	(a5,d0.w),a4
0006F7B6 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0006F7BE 544C                       		addq.w	#2,a4
0006F7C0 5800                       		addq.b	#4,d0
0006F7C2 1B40 000D                  		move.b	d0,$D(a5)
0006F7C6 4E75                       		rts	
0006F7C8                            ; ===========================================================================
0006F7C8                            
0006F7C8                            loc_72B14:				; XREF: loc_72A64
0006F7C8 204E                       		movea.l	a6,a0
0006F7CA 43EE 03A0                  		lea	$3A0(a6),a1
0006F7CE 303C 0087                  		move.w	#$87,d0
0006F7D2                            
0006F7D2                            loc_72B1E:
0006F7D2 20D9                       		move.l	(a1)+,(a0)+
0006F7D4 51C8 FFFC                  		dbf	d0,loc_72B1E
0006F7D8                            
0006F7D8 08EE 0002 0040             		bset	#2,$40(a6)
0006F7DE 264D                       		movea.l	a5,a3
0006F7E0 1C3C 0028                  		move.b	#$28,d6
0006F7E4 9C2E 0026                  		sub.b	$26(a6),d6
0006F7E8 7E05                       		moveq	#5,d7
0006F7EA 4BEE 0070                  		lea	$70(a6),a5
0006F7EE                            
0006F7EE                            loc_72B3A:
0006F7EE 0815 0007                  		btst	#7,(a5)
0006F7F2 6700                       		beq.s	loc_72B5C
0006F7F4 08D5 0001                  		bset	#1,(a5)
0006F7F8 DD2D 0009                  		add.b	d6,9(a5)
0006F7FC 0815 0002                  		btst	#2,(a5)
0006F800 6600                       		bne.s	loc_72B5C
0006F802 7000                       		moveq	#0,d0
0006F804 102D 000B                  		move.b	$B(a5),d0
0006F808 226E 0018                  		movea.l	$18(a6),a1
0006F80C 4EBA 0000                  		jsr	sub_72C4E(pc)
0006F810                            
0006F810                            loc_72B5C:
0006F810 DAFC 0030                  		adda.w	#$30,a5
0006F814 51CF FFD8                  		dbf	d7,loc_72B3A
0006F818                            
0006F818 7E02                       		moveq	#2,d7
0006F81A                            
0006F81A                            loc_72B66:
0006F81A 0815 0007                  		btst	#7,(a5)
0006F81E 6700                       		beq.s	loc_72B78
0006F820 08D5 0001                  		bset	#1,(a5)
0006F824 4EBA FE2E                  		jsr	sub_729A0(pc)
0006F828 DD2D 0009                  		add.b	d6,9(a5)
0006F82C                            
0006F82C                            loc_72B78:
0006F82C DAFC 0030                  		adda.w	#$30,a5
0006F830 51CF FFE8                  		dbf	d7,loc_72B66
0006F834 2A4B                       		movea.l	a3,a5
0006F836 1D7C 0080 0024             		move.b	#$80,$24(a6)
0006F83C 1D7C 0028 0026             		move.b	#$28,$26(a6)
0006F842 422E 0027                  		clr.b	$27(a6)
0006F846 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0006F84E 504F                       		addq.w	#8,sp
0006F850 4E75                       		rts	
0006F852                            ; ===========================================================================
0006F852                            
0006F852                            loc_72B9E:				; XREF: loc_72A64
0006F852 1B5C 0002                  		move.b	(a4)+,2(a5)
0006F856 4E75                       		rts	
0006F858                            ; ===========================================================================
0006F858                            
0006F858                            loc_72BA4:				; XREF: loc_72A64
0006F858 101C                       		move.b	(a4)+,d0
0006F85A D12D 0009                  		add.b	d0,9(a5)
0006F85E 6000 0000                  		bra.w	sub_72CB4
0006F862                            ; ===========================================================================
0006F862                            
0006F862                            loc_72BAE:				; XREF: loc_72A64
0006F862 08D5 0004                  		bset	#4,(a5)
0006F866 4E75                       		rts	
0006F868                            ; ===========================================================================
0006F868                            
0006F868                            loc_72BB4:				; XREF: loc_72A64
0006F868 1B54 0012                  		move.b	(a4),$12(a5)
0006F86C 1B5C 0013                  		move.b	(a4)+,$13(a5)
0006F870 4E75                       		rts	
0006F872                            ; ===========================================================================
0006F872                            
0006F872                            loc_72BBE:				; XREF: loc_72A64
0006F872 101C                       		move.b	(a4)+,d0
0006F874 D12D 0008                  		add.b	d0,8(a5)
0006F878 4E75                       		rts	
0006F87A                            ; ===========================================================================
0006F87A                            
0006F87A                            loc_72BC6:				; XREF: loc_72A64
0006F87A 1D54 0002                  		move.b	(a4),2(a6)
0006F87E 1D5C 0001                  		move.b	(a4)+,1(a6)
0006F882 4E75                       		rts	
0006F884                            ; ===========================================================================
0006F884                            
0006F884                            loc_72BD0:				; XREF: loc_72A64
0006F884 41EE 0040                  		lea	$40(a6),a0
0006F888 101C                       		move.b	(a4)+,d0
0006F88A 7230                       		moveq	#$30,d1
0006F88C 7409                       		moveq	#9,d2
0006F88E                            
0006F88E                            loc_72BDA:
0006F88E 1140 0002                  		move.b	d0,2(a0)
0006F892 D0C1                       		adda.w	d1,a0
0006F894 51CA FFF8                  		dbf	d2,loc_72BDA
0006F898                            
0006F898 4E75                       		rts	
0006F89A                            ; ===========================================================================
0006F89A                            
0006F89A                            loc_72BE6:				; XREF: loc_72A64
0006F89A 101C                       		move.b	(a4)+,d0
0006F89C D12D 0009                  		add.b	d0,9(a5)
0006F8A0 4E75                       		rts	
0006F8A2                            ; ===========================================================================
0006F8A2                            
0006F8A2                            loc_72BEE:				; XREF: loc_72A64
0006F8A2 422E 002C                  		clr.b	$2C(a6)
0006F8A6 4E75                       		rts	
0006F8A8                            ; ===========================================================================
0006F8A8                            
0006F8A8                            loc_72BF4:				; XREF: loc_72A64
0006F8A8 0895 0007                  		bclr	#7,(a5)
0006F8AC 0895 0004                  		bclr	#4,(a5)
0006F8B0 4EBA FB00                  		jsr	sub_726FE(pc)
0006F8B4 4A2E 0250                  		tst.b	$250(a6)
0006F8B8 6B00                       		bmi.s	loc_72C22
0006F8BA 264D                       		movea.l	a5,a3
0006F8BC 4BEE 0100                  		lea	$100(a6),a5
0006F8C0 226E 0018                  		movea.l	$18(a6),a1
0006F8C4 0895 0002                  		bclr	#2,(a5)
0006F8C8 08D5 0001                  		bset	#1,(a5)
0006F8CC 102D 000B                  		move.b	$B(a5),d0
0006F8D0 4EBA 0000                  		jsr	sub_72C4E(pc)
0006F8D4 2A4B                       		movea.l	a3,a5
0006F8D6                            
0006F8D6                            loc_72C22:
0006F8D6 504F                       		addq.w	#8,sp
0006F8D8 4E75                       		rts	
0006F8DA                            ; ===========================================================================
0006F8DA                            
0006F8DA                            loc_72C26:				; XREF: loc_72A64
0006F8DA 7000                       		moveq	#0,d0
0006F8DC 101C                       		move.b	(a4)+,d0
0006F8DE 1B40 000B                  		move.b	d0,$B(a5)
0006F8E2 0815 0002                  		btst	#2,(a5)
0006F8E6 6600 0000                  		bne.w	locret_72CAA
0006F8EA 226E 0018                  		movea.l	$18(a6),a1
0006F8EE 4A2E 000E                  		tst.b	$E(a6)
0006F8F2 6700                       		beq.s	sub_72C4E
0006F8F4 226D 0020                  		movea.l	$20(a5),a1
0006F8F8 4A2E 000E                  		tst.b	$E(a6)
0006F8FC 6B00                       		bmi.s	sub_72C4E
0006F8FE 226E 0020                  		movea.l	$20(a6),a1
0006F902                            
0006F902                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F902                            
0006F902                            
0006F902                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0006F902 5340                       		subq.w	#1,d0
0006F904 6B00                       		bmi.s	loc_72C5C
0006F906 323C 0019                  		move.w	#$19,d1
0006F90A                            
0006F90A                            loc_72C56:
0006F90A D2C1                       		adda.w	d1,a1
0006F90C 51C8 FFFC                  		dbf	d0,loc_72C56
0006F910                            
0006F910                            loc_72C5C:
0006F910 1219                       		move.b	(a1)+,d1
0006F912 1B41 001F                  		move.b	d1,$1F(a5)
0006F916 1801                       		move.b	d1,d4
0006F918 103C 00B0                  		move.b	#$B0,d0
0006F91C 4EBA FAB8                  		jsr	sub_72722(pc)
0006F920 45FA 0000                  		lea	byte_72D18(pc),a2
0006F924 7613                       		moveq	#$13,d3
0006F926                            
0006F926                            loc_72C72:
0006F926 101A                       		move.b	(a2)+,d0
0006F928 1219                       		move.b	(a1)+,d1
0006F92A 4EBA FAAA                  		jsr	sub_72722(pc)
0006F92E 51CB FFF6                  		dbf	d3,loc_72C72
0006F932 7A03                       		moveq	#3,d5
0006F934 0244 0007                  		andi.w	#7,d4
0006F938 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0006F93C 162D 0009                  		move.b	9(a5),d3
0006F940                            
0006F940                            loc_72C8C:
0006F940 101A                       		move.b	(a2)+,d0
0006F942 1219                       		move.b	(a1)+,d1
0006F944 E20C                       		lsr.b	#1,d4
0006F946 6400                       		bcc.s	loc_72C96
0006F948 D203                       		add.b	d3,d1
0006F94A                            
0006F94A                            loc_72C96:
0006F94A 4EBA FA8A                  		jsr	sub_72722(pc)
0006F94E 51CD FFF0                  		dbf	d5,loc_72C8C
0006F952 103C 00B4                  		move.b	#$B4,d0
0006F956 122D 000A                  		move.b	$A(a5),d1
0006F95A 4EBA FA7A                  		jsr	sub_72722(pc)
0006F95E                            
0006F95E                            locret_72CAA:
0006F95E 4E75                       		rts	
0006F960                            ; End of function sub_72C4E
0006F960                            
0006F960                            ; ===========================================================================
0006F960 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0006F968                            
0006F968                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006F968                            
0006F968                            
0006F968                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0006F968 0815 0002                  		btst	#2,(a5)
0006F96C 6600                       		bne.s	locret_72D16
0006F96E 7000                       		moveq	#0,d0
0006F970 102D 000B                  		move.b	$B(a5),d0
0006F974 226E 0018                  		movea.l	$18(a6),a1
0006F978 4A2E 000E                  		tst.b	$E(a6)
0006F97C 6700                       		beq.s	loc_72CD8
0006F97E 226E 0020                  		movea.l	$20(a6),a1
0006F982 4A2E 000E                  		tst.b	$E(a6)
0006F986 6B00                       		bmi.s	loc_72CD8
0006F988 226E 0020                  		movea.l	$20(a6),a1
0006F98C                            
0006F98C                            loc_72CD8:
0006F98C 5340                       		subq.w	#1,d0
0006F98E 6B00                       		bmi.s	loc_72CE6
0006F990 323C 0019                  		move.w	#$19,d1
0006F994                            
0006F994                            loc_72CE0:
0006F994 D2C1                       		adda.w	d1,a1
0006F996 51C8 FFFC                  		dbf	d0,loc_72CE0
0006F99A                            
0006F99A                            loc_72CE6:
0006F99A D2FC 0015                  		adda.w	#$15,a1
0006F99E 45FA 0000                  		lea	byte_72D2C(pc),a2
0006F9A2 102D 001F                  		move.b	$1F(a5),d0
0006F9A6 0240 0007                  		andi.w	#7,d0
0006F9AA 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0006F9AE 162D 0009                  		move.b	9(a5),d3
0006F9B2 6B00                       		bmi.s	locret_72D16
0006F9B4 7A03                       		moveq	#3,d5
0006F9B6                            
0006F9B6                            loc_72D02:
0006F9B6 101A                       		move.b	(a2)+,d0
0006F9B8 1219                       		move.b	(a1)+,d1
0006F9BA E20C                       		lsr.b	#1,d4
0006F9BC 6400                       		bcc.s	loc_72D12
0006F9BE D203                       		add.b	d3,d1
0006F9C0 6500                       		bcs.s	loc_72D12
0006F9C2 4EBA FA12                  		jsr	sub_72722(pc)
0006F9C6                            
0006F9C6                            loc_72D12:
0006F9C6 51CD FFEE                  		dbf	d5,loc_72D02
0006F9CA                            
0006F9CA                            locret_72D16:
0006F9CA 4E75                       		rts	
0006F9CC                            ; End of function sub_72CB4
0006F9CC                            
0006F9CC                            ; ===========================================================================
0006F9CC 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0006F9D6 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0006F9E0 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0006F9E4                            ; ===========================================================================
0006F9E4                            
0006F9E4                            loc_72D30:				; XREF: loc_72A64
0006F9E4 08D5 0003                  		bset	#3,(a5)
0006F9E8 2B4C 0014                  		move.l	a4,$14(a5)
0006F9EC 1B5C 0018                  		move.b	(a4)+,$18(a5)
0006F9F0 1B5C 0019                  		move.b	(a4)+,$19(a5)
0006F9F4 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0006F9F8 101C                       		move.b	(a4)+,d0
0006F9FA E208                       		lsr.b	#1,d0
0006F9FC 1B40 001B                  		move.b	d0,$1B(a5)
0006FA00 426D 001C                  		clr.w	$1C(a5)
0006FA04 4E75                       		rts	
0006FA06                            ; ===========================================================================
0006FA06                            
0006FA06                            loc_72D52:				; XREF: loc_72A64
0006FA06 08D5 0003                  		bset	#3,(a5)
0006FA0A 4E75                       		rts	
0006FA0C                            ; ===========================================================================
0006FA0C                            
0006FA0C                            loc_72D58:				; XREF: loc_72A64
0006FA0C 0895 0007                  		bclr	#7,(a5)
0006FA10 0895 0004                  		bclr	#4,(a5)
0006FA14 4A2D 0001                  		tst.b	1(a5)
0006FA18 6B00                       		bmi.s	loc_72D74
0006FA1A 4A2E 0008                  		tst.b	8(a6)
0006FA1E 6B00 0000                  		bmi.w	loc_72E02
0006FA22 4EBA F98E                  		jsr	sub_726FE(pc)
0006FA26 6000                       		bra.s	loc_72D78
0006FA28                            ; ===========================================================================
0006FA28                            
0006FA28                            loc_72D74:
0006FA28 4EBA FC2A                  		jsr	sub_729A0(pc)
0006FA2C                            
0006FA2C                            loc_72D78:
0006FA2C 4A2E 000E                  		tst.b	$E(a6)
0006FA30 6A00 0000                  		bpl.w	loc_72E02
0006FA34 4216                       		clr.b	0(a6)
0006FA36 7000                       		moveq	#0,d0
0006FA38 102D 0001                  		move.b	1(a5),d0
0006FA3C 6B00                       		bmi.s	loc_72DCC
0006FA3E 41FA F546                  		lea	dword_722CC(pc),a0
0006FA42 264D                       		movea.l	a5,a3
0006FA44 0C00 0004                  		cmpi.b	#4,d0
0006FA48 6600                       		bne.s	loc_72DA8
0006FA4A 4A2E 0340                  		tst.b	$340(a6)
0006FA4E 6A00                       		bpl.s	loc_72DA8
0006FA50 4BEE 0340                  		lea	$340(a6),a5
0006FA54 226E 0020                  		movea.l	$20(a6),a1
0006FA58 6000                       		bra.s	loc_72DB8
0006FA5A                            ; ===========================================================================
0006FA5A                            
0006FA5A                            loc_72DA8:
0006FA5A 5500                       		subq.b	#2,d0
0006FA5C E508                       		lsl.b	#2,d0
0006FA5E 2A70 0000                  		movea.l	(a0,d0.w),a5
0006FA62 4A15                       		tst.b	(a5)
0006FA64 6A00                       		bpl.s	loc_72DC8
0006FA66 226E 0018                  		movea.l	$18(a6),a1
0006FA6A                            
0006FA6A                            loc_72DB8:
0006FA6A 0895 0002                  		bclr	#2,(a5)
0006FA6E 08D5 0001                  		bset	#1,(a5)
0006FA72 102D 000B                  		move.b	$B(a5),d0
0006FA76 4EBA FE8A                  		jsr	sub_72C4E(pc)
0006FA7A                            
0006FA7A                            loc_72DC8:
0006FA7A 2A4B                       		movea.l	a3,a5
0006FA7C 6000                       		bra.s	loc_72E02
0006FA7E                            ; ===========================================================================
0006FA7E                            
0006FA7E                            loc_72DCC:
0006FA7E 41EE 0370                  		lea	$370(a6),a0
0006FA82 4A10                       		tst.b	(a0)
0006FA84 6A00                       		bpl.s	loc_72DE0
0006FA86 0C00 00E0                  		cmpi.b	#$E0,d0
0006FA8A 6700                       		beq.s	loc_72DEA
0006FA8C 0C00 00C0                  		cmpi.b	#$C0,d0
0006FA90 6700                       		beq.s	loc_72DEA
0006FA92                            
0006FA92                            loc_72DE0:
0006FA92 41FA F4F2                  		lea	dword_722CC(pc),a0
0006FA96 E608                       		lsr.b	#3,d0
0006FA98 2070 0000                  		movea.l	(a0,d0.w),a0
0006FA9C                            
0006FA9C                            loc_72DEA:
0006FA9C 0890 0002                  		bclr	#2,(a0)
0006FAA0 08D0 0001                  		bset	#1,(a0)
0006FAA4 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0006FAAA 6600                       		bne.s	loc_72E02
0006FAAC 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0006FAB4                            
0006FAB4                            loc_72E02:
0006FAB4 504F                       		addq.w	#8,sp
0006FAB6 4E75                       		rts	
0006FAB8                            ; ===========================================================================
0006FAB8                            
0006FAB8                            loc_72E06:				; XREF: loc_72A64
0006FAB8 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0006FABE 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0006FAC2 0815 0002                  		btst	#2,(a5)
0006FAC6 6600                       		bne.s	locret_72E1E
0006FAC8 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0006FAD0                            
0006FAD0                            locret_72E1E:
0006FAD0 4E75                       		rts	
0006FAD2                            ; ===========================================================================
0006FAD2                            
0006FAD2                            loc_72E20:				; XREF: loc_72A64
0006FAD2 0895 0003                  		bclr	#3,(a5)
0006FAD6 4E75                       		rts	
0006FAD8                            ; ===========================================================================
0006FAD8                            
0006FAD8                            loc_72E26:				; XREF: loc_72A64
0006FAD8 1B5C 000B                  		move.b	(a4)+,$B(a5)
0006FADC 4E75                       		rts	
0006FADE                            ; ===========================================================================
0006FADE                            
0006FADE                            loc_72E2C:				; XREF: loc_72A64
0006FADE 101C                       		move.b	(a4)+,d0
0006FAE0 E148                       		lsl.w	#8,d0
0006FAE2 101C                       		move.b	(a4)+,d0
0006FAE4 D8C0                       		adda.w	d0,a4
0006FAE6 534C                       		subq.w	#1,a4
0006FAE8 4E75                       		rts	
0006FAEA                            ; ===========================================================================
0006FAEA                            
0006FAEA                            loc_72E38:				; XREF: loc_72A64
0006FAEA 7000                       		moveq	#0,d0
0006FAEC 101C                       		move.b	(a4)+,d0
0006FAEE 121C                       		move.b	(a4)+,d1
0006FAF0 4A35 0024                  		tst.b	$24(a5,d0.w)
0006FAF4 6600                       		bne.s	loc_72E48
0006FAF6 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0006FAFA                            
0006FAFA                            loc_72E48:
0006FAFA 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0006FAFE 66DE                       		bne.s	loc_72E2C
0006FB00 544C                       		addq.w	#2,a4
0006FB02 4E75                       		rts	
0006FB04                            ; ===========================================================================
0006FB04                            
0006FB04                            loc_72E52:				; XREF: loc_72A64
0006FB04 7000                       		moveq	#0,d0
0006FB06 102D 000D                  		move.b	$D(a5),d0
0006FB0A 5900                       		subq.b	#4,d0
0006FB0C 2B8C 0000                  		move.l	a4,(a5,d0.w)
0006FB10 1B40 000D                  		move.b	d0,$D(a5)
0006FB14 60C8                       		bra.s	loc_72E2C
0006FB16                            ; ===========================================================================
0006FB16                            
0006FB16                            loc_72E64:				; XREF: loc_72A64
0006FB16 103C 0088                  		move.b	#$88,d0
0006FB1A 123C 000F                  		move.b	#$F,d1
0006FB1E 4EBA F8C2                  		jsr	sub_7272E(pc)
0006FB22 103C 008C                  		move.b	#$8C,d0
0006FB26 123C 000F                  		move.b	#$F,d1
0006FB2A 6000 F8B6                  		bra.w	sub_7272E
0006FB2E                            ; ===========================================================================
0006FB2E                            Kos_Z80:	incbin	sound\z80_1.bin
0006FBDE 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0006FBE0 21                         		dc.b $21
0006FBE1 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0006FBE3                            		incbin	sound\z80_2.bin
0007128E                            		even
0007128E                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
00077A8E                            		even
00077A8E                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008132C                            		even
0008132C                            Music83:	incbin	sound\music83.bin ; Marble Act 1
000818BA                            		even
000818BA                            Music84:	include	sound\music84.asm ; Star Light Act 1
000818BA                            music84_Header:
000818BA =00000001                  smpsHeaderStartSong = 1
000818BA 0000                       	smpsHeaderVoice     music84_Voices
000818BC 0603                       	smpsHeaderChan      $06, $03
000818BE 0205                       	smpsHeaderTempo     $02, $05
000818C0                            
000818C4 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
000818C8 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000818CC 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000818D0 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000818D4 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
000818D8 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
000818DE 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
000818E4 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
000818EA                            
000818EA                            ; FM1 Data
000818EA                            music84_FM1:
000818EA E0C0                       	smpsPan             panCenter, $00
000818EE E107                       	smpsAlterNote       $07
000818F0 9B03 8007                  	dc.b	nD2, $03, nRst, $07
000818F4 E106                       	smpsAlterNote       $06
000818F6 9903 800B                  	dc.b	nC2, $03, nRst, $0B
000818FA E10B                       	smpsAlterNote       $0B
000818FC 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00081902 E10C                       	smpsAlterNote       $0C
00081904 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00081907 E10B                       	smpsAlterNote       $0B
00081909 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008190C E109                       	smpsAlterNote       $09
0008190E E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00081913 E108                       	smpsAlterNote       $08
00081915 8001                       	dc.b	nRst, $01
00081917 E10B                       	smpsAlterNote       $0B
00081919 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
0008191F E107                       	smpsAlterNote       $07
00081921 9B03                       	dc.b	nD2, $03
00081923                            
00081923                            music84_Jump04:
00081923 E107                       	smpsAlterNote       $07
00081925 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081929 E10B                       	smpsAlterNote       $0B
0008192B A202 8001                  	dc.b	nA2, $02, nRst, $01
0008192F E107                       	smpsAlterNote       $07
00081931 9B03                       	dc.b	nD2, $03
00081933 E11A                       	smpsAlterNote       $1A
00081935 A301                       	dc.b	nBb2, $01
00081937 E1F2                       	smpsAlterNote       $F2
00081939 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008193C E1FF                       	smpsAlterNote       $FF
0008193E E701                       	dc.b	smpsNoAttack, $01
00081940 E111                       	smpsAlterNote       $11
00081942 E701                       	dc.b	smpsNoAttack, $01
00081944 E106                       	smpsAlterNote       $06
00081946 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00081949 E107                       	smpsAlterNote       $07
0008194B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008194F E108                       	smpsAlterNote       $08
00081951 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00081959 E109                       	smpsAlterNote       $09
0008195B A003                       	dc.b	nG2, $03
0008195D E10C                       	smpsAlterNote       $0C
0008195F A303 8001                  	dc.b	nBb2, $03, nRst, $01
00081963 E1FD                       	smpsAlterNote       $FD
00081965 A401                       	dc.b	nB2, $01
00081967 E109                       	smpsAlterNote       $09
00081969 E701                       	dc.b	smpsNoAttack, $01
0008196B E106                       	smpsAlterNote       $06
0008196D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081970 E109                       	smpsAlterNote       $09
00081972 A007                       	dc.b	nG2, $07
00081974 E108                       	smpsAlterNote       $08
00081976 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008197A E107                       	smpsAlterNote       $07
0008197C 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00081982 E10B                       	smpsAlterNote       $0B
00081984 A203 8001                  	dc.b	nA2, $03, nRst, $01
00081988 E107                       	smpsAlterNote       $07
0008198A 9B03                       	dc.b	nD2, $03
0008198C E11A                       	smpsAlterNote       $1A
0008198E A301                       	dc.b	nBb2, $01
00081990 E1F9                       	smpsAlterNote       $F9
00081992 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081995 E107                       	smpsAlterNote       $07
00081997 E701                       	dc.b	smpsNoAttack, $01
00081999 E111                       	smpsAlterNote       $11
0008199B E701                       	dc.b	smpsNoAttack, $01
0008199D E106                       	smpsAlterNote       $06
0008199F E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000819A4 E107                       	smpsAlterNote       $07
000819A6 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000819AE E1EC                       	smpsAlterNote       $EC
000819B0 A101                       	dc.b	nAb2, $01
000819B2 E108                       	smpsAlterNote       $08
000819B4 E701                       	dc.b	smpsNoAttack, $01
000819B6 E116                       	smpsAlterNote       $16
000819B8 E701                       	dc.b	smpsNoAttack, $01
000819BA E1F5                       	smpsAlterNote       $F5
000819BC E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000819BF E10B                       	smpsAlterNote       $0B
000819C1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000819C5 E107                       	smpsAlterNote       $07
000819C7 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000819CD E109                       	smpsAlterNote       $09
000819CF 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000819D3 E10B                       	smpsAlterNote       $0B
000819D5 9603                       	dc.b	nA1, $03
000819D7 E107                       	smpsAlterNote       $07
000819D9 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000819DF E10B                       	smpsAlterNote       $0B
000819E1 A203 8001                  	dc.b	nA2, $03, nRst, $01
000819E5 E107                       	smpsAlterNote       $07
000819E7 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000819EB E11A                       	smpsAlterNote       $1A
000819ED A301                       	dc.b	nBb2, $01
000819EF E1F9                       	smpsAlterNote       $F9
000819F1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000819F4 E107                       	smpsAlterNote       $07
000819F6 E701                       	dc.b	smpsNoAttack, $01
000819F8 E1FB                       	smpsAlterNote       $FB
000819FA E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000819FD E106                       	smpsAlterNote       $06
000819FF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081A03 E107                       	smpsAlterNote       $07
00081A05 9B03                       	dc.b	nD2, $03
00081A07 E108                       	smpsAlterNote       $08
00081A09 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00081A0F E109                       	smpsAlterNote       $09
00081A11 A002 8001                  	dc.b	nG2, $02, nRst, $01
00081A15 E10C                       	smpsAlterNote       $0C
00081A17 A303                       	dc.b	nBb2, $03
00081A19 E1F0                       	smpsAlterNote       $F0
00081A1B A401                       	dc.b	nB2, $01
00081A1D E1FD                       	smpsAlterNote       $FD
00081A1F E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00081A24 E106                       	smpsAlterNote       $06
00081A26 8001                       	dc.b	nRst, $01
00081A28 E109                       	smpsAlterNote       $09
00081A2A A006 8001                  	dc.b	nG2, $06, nRst, $01
00081A2E E108                       	smpsAlterNote       $08
00081A30 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
00081A34 E107                       	smpsAlterNote       $07
00081A36 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00081A3C E10B                       	smpsAlterNote       $0B
00081A3E A203                       	dc.b	nA2, $03
00081A40 E107                       	smpsAlterNote       $07
00081A42 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081A46 E1F2                       	smpsAlterNote       $F2
00081A48 A401                       	dc.b	nB2, $01
00081A4A E1FF                       	smpsAlterNote       $FF
00081A4C E701                       	dc.b	smpsNoAttack, $01
00081A4E E107                       	smpsAlterNote       $07
00081A50 E701                       	dc.b	smpsNoAttack, $01
00081A52 E1FB                       	smpsAlterNote       $FB
00081A54 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081A57 E106                       	smpsAlterNote       $06
00081A59 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081A5D E107                       	smpsAlterNote       $07
00081A5F 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00081A69 E117                       	smpsAlterNote       $17
00081A6B A001                       	dc.b	nG2, $01
00081A6D E1FA                       	smpsAlterNote       $FA
00081A6F E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00081A72 E108                       	smpsAlterNote       $08
00081A74 E701                       	dc.b	smpsNoAttack, $01
00081A76 E1E7                       	smpsAlterNote       $E7
00081A78 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00081A7B E103                       	smpsAlterNote       $03
00081A7D E701                       	dc.b	smpsNoAttack, $01
00081A7F E10B                       	smpsAlterNote       $0B
00081A81 E702                       	dc.b	smpsNoAttack, $02
00081A83 E107                       	smpsAlterNote       $07
00081A85 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00081A8D E106                       	smpsAlterNote       $06
00081A8F 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
00081A95 E10C                       	smpsAlterNote       $0C
00081A97 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00081A9D E109                       	smpsAlterNote       $09
00081A9F 9E03                       	dc.b	nF2, $03
00081AA1 E10C                       	smpsAlterNote       $0C
00081AA3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081AA7 E1EA                       	smpsAlterNote       $EA
00081AA9 A201                       	dc.b	nA2, $01
00081AAB E106                       	smpsAlterNote       $06
00081AAD E701                       	dc.b	smpsNoAttack, $01
00081AAF E1E2                       	smpsAlterNote       $E2
00081AB1 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00081AB4 E1F0                       	smpsAlterNote       $F0
00081AB6 E701                       	dc.b	smpsNoAttack, $01
00081AB8 E10C                       	smpsAlterNote       $0C
00081ABA E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00081AC6 E116                       	smpsAlterNote       $16
00081AC8 9C01                       	dc.b	nEb2, $01
00081ACA E105                       	smpsAlterNote       $05
00081ACC E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00081ACF E1F1                       	smpsAlterNote       $F1
00081AD1 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00081AD4 E1FF                       	smpsAlterNote       $FF
00081AD6 E701                       	dc.b	smpsNoAttack, $01
00081AD8 E109                       	smpsAlterNote       $09
00081ADA E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081ADE E10C                       	smpsAlterNote       $0C
00081AE0 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00081AEC 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
00081AF2 E109                       	smpsAlterNote       $09
00081AF4 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00081AF8 E10C                       	smpsAlterNote       $0C
00081AFA 9703                       	dc.b	nBb1, $03
00081AFC E11A                       	smpsAlterNote       $1A
00081AFE A101                       	dc.b	nAb2, $01
00081B00 E1FB                       	smpsAlterNote       $FB
00081B02 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00081B05 E10A                       	smpsAlterNote       $0A
00081B07 E701                       	dc.b	smpsNoAttack, $01
00081B09 E1E8                       	smpsAlterNote       $E8
00081B0B E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00081B0E E106                       	smpsAlterNote       $06
00081B10 E701                       	dc.b	smpsNoAttack, $01
00081B12 E10C                       	smpsAlterNote       $0C
00081B14 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00081B20 E1F9                       	smpsAlterNote       $F9
00081B22 9D01                       	dc.b	nE2, $01
00081B24 E108                       	smpsAlterNote       $08
00081B26 E701                       	dc.b	smpsNoAttack, $01
00081B28 E1F6                       	smpsAlterNote       $F6
00081B2A E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00081B2D E109                       	smpsAlterNote       $09
00081B2F E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00081B33 E10C                       	smpsAlterNote       $0C
00081B35 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00081B41 E108                       	smpsAlterNote       $08
00081B43 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00081B49 E106                       	smpsAlterNote       $06
00081B4B A403 8001                  	dc.b	nB2, $03, nRst, $01
00081B4F E108                       	smpsAlterNote       $08
00081B51 9D03                       	dc.b	nE2, $03
00081B53 E1EB                       	smpsAlterNote       $EB
00081B55 A801                       	dc.b	nEb3, $01
00081B57 E109                       	smpsAlterNote       $09
00081B59 E701                       	dc.b	smpsNoAttack, $01
00081B5B E1FA                       	smpsAlterNote       $FA
00081B5D E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00081B60 E108                       	smpsAlterNote       $08
00081B62 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00081B6E E1E9                       	smpsAlterNote       $E9
00081B70 A301                       	dc.b	nBb2, $01
00081B72 E107                       	smpsAlterNote       $07
00081B74 E701                       	dc.b	smpsNoAttack, $01
00081B76 E1F0                       	smpsAlterNote       $F0
00081B78 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081B7B E1F7                       	smpsAlterNote       $F7
00081B7D E701                       	dc.b	smpsNoAttack, $01
00081B7F E107                       	smpsAlterNote       $07
00081B81 E701                       	dc.b	smpsNoAttack, $01
00081B83 E106                       	smpsAlterNote       $06
00081B85 E701                       	dc.b	smpsNoAttack, $01
00081B87 E108                       	smpsAlterNote       $08
00081B89 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00081B8F E106                       	smpsAlterNote       $06
00081B91 A403 8001                  	dc.b	nB2, $03, nRst, $01
00081B95 E108                       	smpsAlterNote       $08
00081B97 9D03                       	dc.b	nE2, $03
00081B99 E10B                       	smpsAlterNote       $0B
00081B9B 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
00081BA3 E108                       	smpsAlterNote       $08
00081BA5 9D03                       	dc.b	nE2, $03
00081BA7 E10B                       	smpsAlterNote       $0B
00081BA9 9603 8001                  	dc.b	nA1, $03, nRst, $01
00081BAD E113                       	smpsAlterNote       $13
00081BAF A001                       	dc.b	nG2, $01
00081BB1 E118                       	smpsAlterNote       $18
00081BB3 E701                       	dc.b	smpsNoAttack, $01
00081BB5 E1E9                       	smpsAlterNote       $E9
00081BB7 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00081BBA E1F3                       	smpsAlterNote       $F3
00081BBC E701                       	dc.b	smpsNoAttack, $01
00081BBE E1FD                       	smpsAlterNote       $FD
00081BC0 E701                       	dc.b	smpsNoAttack, $01
00081BC2 E102                       	smpsAlterNote       $02
00081BC4 E701                       	dc.b	smpsNoAttack, $01
00081BC6 E107                       	smpsAlterNote       $07
00081BC8 8001                       	dc.b	nRst, $01
00081BCA E10B                       	smpsAlterNote       $0B
00081BCC 9603                       	dc.b	nA1, $03
00081BCE E10C                       	smpsAlterNote       $0C
00081BD0 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
00081BD6 E10B                       	smpsAlterNote       $0B
00081BD8 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00081BE4 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00081BEA E107                       	smpsAlterNote       $07
00081BEC 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00081BF2 E10B                       	smpsAlterNote       $0B
00081BF4 A203                       	dc.b	nA2, $03
00081BF6 E107                       	smpsAlterNote       $07
00081BF8 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081BFC E1F2                       	smpsAlterNote       $F2
00081BFE A401                       	dc.b	nB2, $01
00081C00 E1FF                       	smpsAlterNote       $FF
00081C02 E701                       	dc.b	smpsNoAttack, $01
00081C04 E107                       	smpsAlterNote       $07
00081C06 E701                       	dc.b	smpsNoAttack, $01
00081C08 E1FB                       	smpsAlterNote       $FB
00081C0A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081C0D E106                       	smpsAlterNote       $06
00081C0F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081C13 E107                       	smpsAlterNote       $07
00081C15 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00081C19 E108                       	smpsAlterNote       $08
00081C1B 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00081C21 E109                       	smpsAlterNote       $09
00081C23 A003 8001                  	dc.b	nG2, $03, nRst, $01
00081C27 E10C                       	smpsAlterNote       $0C
00081C29 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00081C2D E1F0                       	smpsAlterNote       $F0
00081C2F A401                       	dc.b	nB2, $01
00081C31 E109                       	smpsAlterNote       $09
00081C33 E701                       	dc.b	smpsNoAttack, $01
00081C35 E106                       	smpsAlterNote       $06
00081C37 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081C3A E109                       	smpsAlterNote       $09
00081C3C A007                       	dc.b	nG2, $07
00081C3E E108                       	smpsAlterNote       $08
00081C40 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00081C44 E107                       	smpsAlterNote       $07
00081C46 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00081C4C E10B                       	smpsAlterNote       $0B
00081C4E A202 8001                  	dc.b	nA2, $02, nRst, $01
00081C52 E107                       	smpsAlterNote       $07
00081C54 9B03                       	dc.b	nD2, $03
00081C56 E11A                       	smpsAlterNote       $1A
00081C58 A301                       	dc.b	nBb2, $01
00081C5A E1F2                       	smpsAlterNote       $F2
00081C5C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081C5F E1FF                       	smpsAlterNote       $FF
00081C61 E701                       	dc.b	smpsNoAttack, $01
00081C63 E111                       	smpsAlterNote       $11
00081C65 E701                       	dc.b	smpsNoAttack, $01
00081C67 E106                       	smpsAlterNote       $06
00081C69 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00081C6C E107                       	smpsAlterNote       $07
00081C6E 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00081C7A E117                       	smpsAlterNote       $17
00081C7C A001                       	dc.b	nG2, $01
00081C7E E1FA                       	smpsAlterNote       $FA
00081C80 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00081C83 E116                       	smpsAlterNote       $16
00081C85 E701                       	dc.b	smpsNoAttack, $01
00081C87 E1F5                       	smpsAlterNote       $F5
00081C89 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00081C8C E103                       	smpsAlterNote       $03
00081C8E E701                       	dc.b	smpsNoAttack, $01
00081C90 E10B                       	smpsAlterNote       $0B
00081C92 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00081C96 E107                       	smpsAlterNote       $07
00081C98 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00081C9E E109                       	smpsAlterNote       $09
00081CA0 9E03                       	dc.b	nF2, $03
00081CA2 E10B                       	smpsAlterNote       $0B
00081CA4 9603 8001                  	dc.b	nA1, $03, nRst, $01
00081CA8 E107                       	smpsAlterNote       $07
00081CAA 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00081CB0 E10B                       	smpsAlterNote       $0B
00081CB2 A203 8001                  	dc.b	nA2, $03, nRst, $01
00081CB6 E107                       	smpsAlterNote       $07
00081CB8 9B03                       	dc.b	nD2, $03
00081CBA E11A                       	smpsAlterNote       $1A
00081CBC A301                       	dc.b	nBb2, $01
00081CBE E1F9                       	smpsAlterNote       $F9
00081CC0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081CC3 E107                       	smpsAlterNote       $07
00081CC5 E701                       	dc.b	smpsNoAttack, $01
00081CC7 E111                       	smpsAlterNote       $11
00081CC9 E701                       	dc.b	smpsNoAttack, $01
00081CCB E106                       	smpsAlterNote       $06
00081CCD E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00081CD2 E107                       	smpsAlterNote       $07
00081CD4 9B03                       	dc.b	nD2, $03
00081CD6 E108                       	smpsAlterNote       $08
00081CD8 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00081CDE E109                       	smpsAlterNote       $09
00081CE0 A003                       	dc.b	nG2, $03
00081CE2 E10C                       	smpsAlterNote       $0C
00081CE4 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00081CE8 E1FD                       	smpsAlterNote       $FD
00081CEA A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00081CEF E106                       	smpsAlterNote       $06
00081CF1 8001                       	dc.b	nRst, $01
00081CF3 E109                       	smpsAlterNote       $09
00081CF5 A006 8001                  	dc.b	nG2, $06, nRst, $01
00081CF9 E108                       	smpsAlterNote       $08
00081CFB 9C03                       	dc.b	nEb2, $03
00081CFD E107                       	smpsAlterNote       $07
00081CFF 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00081D05 E10B                       	smpsAlterNote       $0B
00081D07 A203 8001                  	dc.b	nA2, $03, nRst, $01
00081D0B E107                       	smpsAlterNote       $07
00081D0D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00081D11 E11A                       	smpsAlterNote       $1A
00081D13 A301                       	dc.b	nBb2, $01
00081D15 E1F9                       	smpsAlterNote       $F9
00081D17 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081D1A E107                       	smpsAlterNote       $07
00081D1C E701                       	dc.b	smpsNoAttack, $01
00081D1E E1FB                       	smpsAlterNote       $FB
00081D20 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081D23 E106                       	smpsAlterNote       $06
00081D25 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081D29 E107                       	smpsAlterNote       $07
00081D2B 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00081D33 E1EC                       	smpsAlterNote       $EC
00081D35 A101                       	dc.b	nAb2, $01
00081D37 E108                       	smpsAlterNote       $08
00081D39 E701                       	dc.b	smpsNoAttack, $01
00081D3B E1E7                       	smpsAlterNote       $E7
00081D3D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00081D40 E1F5                       	smpsAlterNote       $F5
00081D42 E701                       	dc.b	smpsNoAttack, $01
00081D44 E10B                       	smpsAlterNote       $0B
00081D46 E702                       	dc.b	smpsNoAttack, $02
00081D48 E107                       	smpsAlterNote       $07
00081D4A 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00081D50 E106                       	smpsAlterNote       $06
00081D52 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00081D58 E10C                       	smpsAlterNote       $0C
00081D5A 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00081D62 E109                       	smpsAlterNote       $09
00081D64 9E03                       	dc.b	nF2, $03
00081D66 E10C                       	smpsAlterNote       $0C
00081D68 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081D6C E1EA                       	smpsAlterNote       $EA
00081D6E A201                       	dc.b	nA2, $01
00081D70 E106                       	smpsAlterNote       $06
00081D72 E701                       	dc.b	smpsNoAttack, $01
00081D74 E114                       	smpsAlterNote       $14
00081D76 E701                       	dc.b	smpsNoAttack, $01
00081D78 E1F0                       	smpsAlterNote       $F0
00081D7A E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00081D7D E10C                       	smpsAlterNote       $0C
00081D7F E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00081D8B 9703                       	dc.b	nBb1, $03
00081D8D E116                       	smpsAlterNote       $16
00081D8F 9C01                       	dc.b	nEb2, $01
00081D91 E105                       	smpsAlterNote       $05
00081D93 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00081D96 E113                       	smpsAlterNote       $13
00081D98 E701                       	dc.b	smpsNoAttack, $01
00081D9A E1FF                       	smpsAlterNote       $FF
00081D9C E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00081D9F E109                       	smpsAlterNote       $09
00081DA1 E703                       	dc.b	smpsNoAttack, $03
00081DA3 E10C                       	smpsAlterNote       $0C
00081DA5 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00081DB1 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00081DB9 E109                       	smpsAlterNote       $09
00081DBB 9E03                       	dc.b	nF2, $03
00081DBD E10C                       	smpsAlterNote       $0C
00081DBF 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081DC3 E1EC                       	smpsAlterNote       $EC
00081DC5 A201                       	dc.b	nA2, $01
00081DC7 E10A                       	smpsAlterNote       $0A
00081DC9 E701                       	dc.b	smpsNoAttack, $01
00081DCB E1E8                       	smpsAlterNote       $E8
00081DCD E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00081DD0 E1F7                       	smpsAlterNote       $F7
00081DD2 E701                       	dc.b	smpsNoAttack, $01
00081DD4 E10C                       	smpsAlterNote       $0C
00081DD6 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00081DE2 E1EA                       	smpsAlterNote       $EA
00081DE4 9D01                       	dc.b	nE2, $01
00081DE6 E108                       	smpsAlterNote       $08
00081DE8 E701                       	dc.b	smpsNoAttack, $01
00081DEA E1F6                       	smpsAlterNote       $F6
00081DEC E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00081DEF E105                       	smpsAlterNote       $05
00081DF1 E701                       	dc.b	smpsNoAttack, $01
00081DF3 E109                       	smpsAlterNote       $09
00081DF5 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00081DF9 E10C                       	smpsAlterNote       $0C
00081DFB 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00081E07 E108                       	smpsAlterNote       $08
00081E09 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00081E0F E106                       	smpsAlterNote       $06
00081E11 A403 8001                  	dc.b	nB2, $03, nRst, $01
00081E15 E108                       	smpsAlterNote       $08
00081E17 9D03                       	dc.b	nE2, $03
00081E19 E1EB                       	smpsAlterNote       $EB
00081E1B A801                       	dc.b	nEb3, $01
00081E1D E109                       	smpsAlterNote       $09
00081E1F E701                       	dc.b	smpsNoAttack, $01
00081E21 E1EB                       	smpsAlterNote       $EB
00081E23 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00081E26 E108                       	smpsAlterNote       $08
00081E28 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00081E34 E1E9                       	smpsAlterNote       $E9
00081E36 A301                       	dc.b	nBb2, $01
00081E38 E1F8                       	smpsAlterNote       $F8
00081E3A E701                       	dc.b	smpsNoAttack, $01
00081E3C E116                       	smpsAlterNote       $16
00081E3E E701                       	dc.b	smpsNoAttack, $01
00081E40 E1F7                       	smpsAlterNote       $F7
00081E42 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00081E45 E107                       	smpsAlterNote       $07
00081E47 E701                       	dc.b	smpsNoAttack, $01
00081E49 E1EE                       	smpsAlterNote       $EE
00081E4B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00081E4E E106                       	smpsAlterNote       $06
00081E50 8001                       	dc.b	nRst, $01
00081E52 E108                       	smpsAlterNote       $08
00081E54 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00081E5A E106                       	smpsAlterNote       $06
00081E5C A402 8001                  	dc.b	nB2, $02, nRst, $01
00081E60 E108                       	smpsAlterNote       $08
00081E62 9D03                       	dc.b	nE2, $03
00081E64 E10B                       	smpsAlterNote       $0B
00081E66 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00081E6C E108                       	smpsAlterNote       $08
00081E6E 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00081E72 E10B                       	smpsAlterNote       $0B
00081E74 9603                       	dc.b	nA1, $03
00081E76 E10E                       	smpsAlterNote       $0E
00081E78 A001                       	dc.b	nG2, $01
00081E7A E118                       	smpsAlterNote       $18
00081E7C E701                       	dc.b	smpsNoAttack, $01
00081E7E E1E9                       	smpsAlterNote       $E9
00081E80 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00081E83 E1EE                       	smpsAlterNote       $EE
00081E85 E701                       	dc.b	smpsNoAttack, $01
00081E87 E1F8                       	smpsAlterNote       $F8
00081E89 E701                       	dc.b	smpsNoAttack, $01
00081E8B E102                       	smpsAlterNote       $02
00081E8D E701                       	dc.b	smpsNoAttack, $01
00081E8F E107                       	smpsAlterNote       $07
00081E91 8001                       	dc.b	nRst, $01
00081E93 E10B                       	smpsAlterNote       $0B
00081E95 9603                       	dc.b	nA1, $03
00081E97 E10C                       	smpsAlterNote       $0C
00081E99 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00081E9F E10B                       	smpsAlterNote       $0B
00081EA1 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00081EAD 8001 9603                  	dc.b	nRst, $01, nA1, $03
00081EB1 E10C                       	smpsAlterNote       $0C
00081EB3 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00081EBF 8001                       	dc.b	nRst, $01
00081EC1 E10B                       	smpsAlterNote       $0B
00081EC3 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00081ECB E107                       	smpsAlterNote       $07
00081ECD 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00081ED1 E10B                       	smpsAlterNote       $0B
00081ED3 9603                       	dc.b	nA1, $03
00081ED5 E109                       	smpsAlterNote       $09
00081ED7 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00081EDB E108                       	smpsAlterNote       $08
00081EDD 9D06                       	dc.b	nE2, $06
00081EDF E107                       	smpsAlterNote       $07
00081EE1 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00081EE5 E106                       	smpsAlterNote       $06
00081EE7 9903                       	dc.b	nC2, $03
00081EE9 E10C                       	smpsAlterNote       $0C
00081EEB 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081EEF E10B                       	smpsAlterNote       $0B
00081EF1 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00081EFD 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00081F07 E10C                       	smpsAlterNote       $0C
00081F09 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00081F15 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00081F21 8001                       	dc.b	nRst, $01
00081F23 E10B                       	smpsAlterNote       $0B
00081F25 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00081F31 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00081F3D 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00081F49 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00081F53 E10C                       	smpsAlterNote       $0C
00081F55 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00081F61 E10B                       	smpsAlterNote       $0B
00081F63 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00081F6B E107                       	smpsAlterNote       $07
00081F6D 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00081F71 E10B                       	smpsAlterNote       $0B
00081F73 9603                       	dc.b	nA1, $03
00081F75 E109                       	smpsAlterNote       $09
00081F77 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00081F7B E108                       	smpsAlterNote       $08
00081F7D 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00081F81 E107                       	smpsAlterNote       $07
00081F83 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00081F87 E106                       	smpsAlterNote       $06
00081F89 9903                       	dc.b	nC2, $03
00081F8B E10C                       	smpsAlterNote       $0C
00081F8D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00081F91 E10B                       	smpsAlterNote       $0B
00081F93 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00081F9F 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00081FA9 E10C                       	smpsAlterNote       $0C
00081FAB 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00081FB7 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00081FC3 8001                       	dc.b	nRst, $01
00081FC5 E10B                       	smpsAlterNote       $0B
00081FC7 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00081FD3 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00081FDD E10C                       	smpsAlterNote       $0C
00081FDF 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00081FEB 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00081FF7 E10B                       	smpsAlterNote       $0B
00081FF9 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00082005 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008200F E10C                       	smpsAlterNote       $0C
00082011 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008201D 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00082029 E10B                       	smpsAlterNote       $0B
0008202B 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00082037 8001                       	dc.b	nRst, $01
00082039 E1EC                       	smpsAlterNote       $EC
0008203B A101                       	dc.b	nAb2, $01
0008203D E1FA                       	smpsAlterNote       $FA
0008203F E701                       	dc.b	smpsNoAttack, $01
00082041 E116                       	smpsAlterNote       $16
00082043 E701                       	dc.b	smpsNoAttack, $01
00082045 E1F5                       	smpsAlterNote       $F5
00082047 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008204A E10B                       	smpsAlterNote       $0B
0008204C E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00082058 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00082064 E107                       	smpsAlterNote       $07
00082066 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008206C E10B                       	smpsAlterNote       $0B
0008206E A203                       	dc.b	nA2, $03
00082070 E107                       	smpsAlterNote       $07
00082072 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00082076 E1F3                       	smpsAlterNote       $F3
00082078 A401                       	dc.b	nB2, $01
0008207A E102                       	smpsAlterNote       $02
0008207C E701                       	dc.b	smpsNoAttack, $01
0008207E E109                       	smpsAlterNote       $09
00082080 E701                       	dc.b	smpsNoAttack, $01
00082082 E102                       	smpsAlterNote       $02
00082084 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00082087 E106                       	smpsAlterNote       $06
00082089 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008208D E107                       	smpsAlterNote       $07
0008208F 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00082093 E108                       	smpsAlterNote       $08
00082095 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008209B E109                       	smpsAlterNote       $09
0008209D A003 8001                  	dc.b	nG2, $03, nRst, $01
000820A1 E1F2                       	smpsAlterNote       $F2
000820A3 A401                       	dc.b	nB2, $01
000820A5 E1FF                       	smpsAlterNote       $FF
000820A7 E701                       	dc.b	smpsNoAttack, $01
000820A9 E111                       	smpsAlterNote       $11
000820AB E701                       	dc.b	smpsNoAttack, $01
000820AD E1FB                       	smpsAlterNote       $FB
000820AF E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000820B2 E106                       	smpsAlterNote       $06
000820B4 E702                       	dc.b	smpsNoAttack, $02
000820B6 E109                       	smpsAlterNote       $09
000820B8 A007                       	dc.b	nG2, $07
000820BA E108                       	smpsAlterNote       $08
000820BC 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000820C0 E107                       	smpsAlterNote       $07
000820C2 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000820C8 E10B                       	smpsAlterNote       $0B
000820CA A202 8001                  	dc.b	nA2, $02, nRst, $01
000820CE E107                       	smpsAlterNote       $07
000820D0 9B03                       	dc.b	nD2, $03
000820D2 E11A                       	smpsAlterNote       $1A
000820D4 A301                       	dc.b	nBb2, $01
000820D6 E1F2                       	smpsAlterNote       $F2
000820D8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000820DB E1FF                       	smpsAlterNote       $FF
000820DD E701                       	dc.b	smpsNoAttack, $01
000820DF E111                       	smpsAlterNote       $11
000820E1 E701                       	dc.b	smpsNoAttack, $01
000820E3 E106                       	smpsAlterNote       $06
000820E5 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000820E8 E107                       	smpsAlterNote       $07
000820EA 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000820F6 E117                       	smpsAlterNote       $17
000820F8 A001                       	dc.b	nG2, $01
000820FA E1FA                       	smpsAlterNote       $FA
000820FC E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000820FF E116                       	smpsAlterNote       $16
00082101 E701                       	dc.b	smpsNoAttack, $01
00082103 E1F5                       	smpsAlterNote       $F5
00082105 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00082108 E103                       	smpsAlterNote       $03
0008210A E701                       	dc.b	smpsNoAttack, $01
0008210C E10B                       	smpsAlterNote       $0B
0008210E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00082112 E107                       	smpsAlterNote       $07
00082114 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008211A E109                       	smpsAlterNote       $09
0008211C 9E03                       	dc.b	nF2, $03
0008211E E10B                       	smpsAlterNote       $0B
00082120 9603 8001                  	dc.b	nA1, $03, nRst, $01
00082124 E107                       	smpsAlterNote       $07
00082126 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008212C E10B                       	smpsAlterNote       $0B
0008212E A203 8001                  	dc.b	nA2, $03, nRst, $01
00082132 E107                       	smpsAlterNote       $07
00082134 9B03                       	dc.b	nD2, $03
00082136 E11A                       	smpsAlterNote       $1A
00082138 A301                       	dc.b	nBb2, $01
0008213A E1F9                       	smpsAlterNote       $F9
0008213C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008213F E1FF                       	smpsAlterNote       $FF
00082141 E701                       	dc.b	smpsNoAttack, $01
00082143 E111                       	smpsAlterNote       $11
00082145 E701                       	dc.b	smpsNoAttack, $01
00082147 E106                       	smpsAlterNote       $06
00082149 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008214C E107                       	smpsAlterNote       $07
0008214E 9B03                       	dc.b	nD2, $03
00082150 E108                       	smpsAlterNote       $08
00082152 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00082158 E109                       	smpsAlterNote       $09
0008215A A003                       	dc.b	nG2, $03
0008215C E1F0                       	smpsAlterNote       $F0
0008215E A501                       	dc.b	nC3, $01
00082160 E106                       	smpsAlterNote       $06
00082162 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00082166 E109                       	smpsAlterNote       $09
00082168 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008216C E108                       	smpsAlterNote       $08
0008216E 9C03                       	dc.b	nEb2, $03
00082170 E107                       	smpsAlterNote       $07
00082172 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00082178 E10B                       	smpsAlterNote       $0B
0008217A A203 8001                  	dc.b	nA2, $03, nRst, $01
0008217E E107                       	smpsAlterNote       $07
00082180 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00082184 E11A                       	smpsAlterNote       $1A
00082186 A301                       	dc.b	nBb2, $01
00082188 E1F9                       	smpsAlterNote       $F9
0008218A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008218D E107                       	smpsAlterNote       $07
0008218F E701                       	dc.b	smpsNoAttack, $01
00082191 E1FB                       	smpsAlterNote       $FB
00082193 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00082196 E106                       	smpsAlterNote       $06
00082198 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008219C E107                       	smpsAlterNote       $07
0008219E 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000821A6 E1EC                       	smpsAlterNote       $EC
000821A8 A101                       	dc.b	nAb2, $01
000821AA E108                       	smpsAlterNote       $08
000821AC E701                       	dc.b	smpsNoAttack, $01
000821AE E1E7                       	smpsAlterNote       $E7
000821B0 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000821B3 E1F5                       	smpsAlterNote       $F5
000821B5 E701                       	dc.b	smpsNoAttack, $01
000821B7 E10B                       	smpsAlterNote       $0B
000821B9 E702                       	dc.b	smpsNoAttack, $02
000821BB E107                       	smpsAlterNote       $07
000821BD 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000821C3 E106                       	smpsAlterNote       $06
000821C5 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000821CB E10C                       	smpsAlterNote       $0C
000821CD 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
000821D5 E109                       	smpsAlterNote       $09
000821D7 9E03                       	dc.b	nF2, $03
000821D9 E10C                       	smpsAlterNote       $0C
000821DB 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000821DF E1EA                       	smpsAlterNote       $EA
000821E1 A201                       	dc.b	nA2, $01
000821E3 E106                       	smpsAlterNote       $06
000821E5 E701                       	dc.b	smpsNoAttack, $01
000821E7 E114                       	smpsAlterNote       $14
000821E9 E701                       	dc.b	smpsNoAttack, $01
000821EB E1F0                       	smpsAlterNote       $F0
000821ED E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000821F0 E10C                       	smpsAlterNote       $0C
000821F2 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000821FE 9703                       	dc.b	nBb1, $03
00082200 E116                       	smpsAlterNote       $16
00082202 9C01                       	dc.b	nEb2, $01
00082204 E105                       	smpsAlterNote       $05
00082206 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00082209 E113                       	smpsAlterNote       $13
0008220B E701                       	dc.b	smpsNoAttack, $01
0008220D E1FF                       	smpsAlterNote       $FF
0008220F E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00082212 E109                       	smpsAlterNote       $09
00082214 E703                       	dc.b	smpsNoAttack, $03
00082216 E10C                       	smpsAlterNote       $0C
00082218 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00082224 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008222C E109                       	smpsAlterNote       $09
0008222E 9E03                       	dc.b	nF2, $03
00082230 E10C                       	smpsAlterNote       $0C
00082232 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00082236 E1EA                       	smpsAlterNote       $EA
00082238 A201                       	dc.b	nA2, $01
0008223A E106                       	smpsAlterNote       $06
0008223C E701                       	dc.b	smpsNoAttack, $01
0008223E E1E2                       	smpsAlterNote       $E2
00082240 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00082243 E1F0                       	smpsAlterNote       $F0
00082245 E701                       	dc.b	smpsNoAttack, $01
00082247 E10C                       	smpsAlterNote       $0C
00082249 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00082255 E116                       	smpsAlterNote       $16
00082257 9C01                       	dc.b	nEb2, $01
00082259 E105                       	smpsAlterNote       $05
0008225B E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008225E E1F1                       	smpsAlterNote       $F1
00082260 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00082263 E1FF                       	smpsAlterNote       $FF
00082265 E701                       	dc.b	smpsNoAttack, $01
00082267 E109                       	smpsAlterNote       $09
00082269 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008226D E10C                       	smpsAlterNote       $0C
0008226F 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
0008227B E106                       	smpsAlterNote       $06
0008227D 9903                       	dc.b	nC2, $03
0008227F E107                       	smpsAlterNote       $07
00082281 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00082285 E109                       	smpsAlterNote       $09
00082287 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
0008228D E107                       	smpsAlterNote       $07
0008228F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00082293 E108                       	smpsAlterNote       $08
00082295 9D03                       	dc.b	nE2, $03
00082297 E10B                       	smpsAlterNote       $0B
00082299 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
0008229F E109                       	smpsAlterNote       $09
000822A1 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
000822A7 E10C                       	smpsAlterNote       $0C
000822A9 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
000822AF E106                       	smpsAlterNote       $06
000822B1 9903                       	dc.b	nC2, $03
000822B3 E11A                       	smpsAlterNote       $1A
000822B5 A301                       	dc.b	nBb2, $01
000822B7 E1F9                       	smpsAlterNote       $F9
000822B9 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000822BC E1FF                       	smpsAlterNote       $FF
000822BE E701                       	dc.b	smpsNoAttack, $01
000822C0 E111                       	smpsAlterNote       $11
000822C2 E701                       	dc.b	smpsNoAttack, $01
000822C4 E106                       	smpsAlterNote       $06
000822C6 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
000822CD E109                       	smpsAlterNote       $09
000822CF A003                       	dc.b	nG2, $03
000822D1 E106                       	smpsAlterNote       $06
000822D3 9907                       	dc.b	nC2, $07
000822D5 E107                       	smpsAlterNote       $07
000822D7 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
000822DF E10B                       	smpsAlterNote       $0B
000822E1 A203                       	dc.b	nA2, $03
000822E3 E107                       	smpsAlterNote       $07
000822E5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000822E9 E1F2                       	smpsAlterNote       $F2
000822EB A401                       	dc.b	nB2, $01
000822ED E1F9                       	smpsAlterNote       $F9
000822EF E701                       	dc.b	smpsNoAttack, $01
000822F1 E107                       	smpsAlterNote       $07
000822F3 E701                       	dc.b	smpsNoAttack, $01
000822F5 E1FB                       	smpsAlterNote       $FB
000822F7 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000822FA E106                       	smpsAlterNote       $06
000822FC E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00082300 E107                       	smpsAlterNote       $07
00082302 9B03                       	dc.b	nD2, $03
00082304 E108                       	smpsAlterNote       $08
00082306 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008230C E109                       	smpsAlterNote       $09
0008230E A003 8001                  	dc.b	nG2, $03, nRst, $01
00082312 E1F2                       	smpsAlterNote       $F2
00082314 A401                       	dc.b	nB2, $01
00082316 E1F9                       	smpsAlterNote       $F9
00082318 E701                       	dc.b	smpsNoAttack, $01
0008231A E107                       	smpsAlterNote       $07
0008231C E701                       	dc.b	smpsNoAttack, $01
0008231E E1FB                       	smpsAlterNote       $FB
00082320 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00082323 E106                       	smpsAlterNote       $06
00082325 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00082329 E108                       	smpsAlterNote       $08
0008232B 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
0008232F E10C                       	smpsAlterNote       $0C
00082331 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00082335 E107                       	smpsAlterNote       $07
00082337 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008233D E10B                       	smpsAlterNote       $0B
0008233F A203                       	dc.b	nA2, $03
00082341 E107                       	smpsAlterNote       $07
00082343 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00082347 E1F2                       	smpsAlterNote       $F2
00082349 A401                       	dc.b	nB2, $01
0008234B E1FF                       	smpsAlterNote       $FF
0008234D E701                       	dc.b	smpsNoAttack, $01
0008234F E107                       	smpsAlterNote       $07
00082351 E701                       	dc.b	smpsNoAttack, $01
00082353 E1FB                       	smpsAlterNote       $FB
00082355 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00082358 E106                       	smpsAlterNote       $06
0008235A E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008235E E107                       	smpsAlterNote       $07
00082360 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00082364 E108                       	smpsAlterNote       $08
00082366 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008236C E109                       	smpsAlterNote       $09
0008236E A003 8001                  	dc.b	nG2, $03, nRst, $01
00082372 E1F2                       	smpsAlterNote       $F2
00082374 A401                       	dc.b	nB2, $01
00082376 E1FF                       	smpsAlterNote       $FF
00082378 E701                       	dc.b	smpsNoAttack, $01
0008237A E111                       	smpsAlterNote       $11
0008237C E701                       	dc.b	smpsNoAttack, $01
0008237E E1FB                       	smpsAlterNote       $FB
00082380 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00082383 E106                       	smpsAlterNote       $06
00082385 E702                       	dc.b	smpsNoAttack, $02
00082387 E108                       	smpsAlterNote       $08
00082389 9C07                       	dc.b	nEb2, $07
0008238B E10C                       	smpsAlterNote       $0C
0008238D A303 8001                  	dc.b	nBb2, $03, nRst, $01
00082391 E107                       	smpsAlterNote       $07
00082393 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00082399 E10B                       	smpsAlterNote       $0B
0008239B A202 8001                  	dc.b	nA2, $02, nRst, $01
0008239F E107                       	smpsAlterNote       $07
000823A1 9B03                       	dc.b	nD2, $03
000823A3 E11A                       	smpsAlterNote       $1A
000823A5 A301                       	dc.b	nBb2, $01
000823A7 E1F2                       	smpsAlterNote       $F2
000823A9 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000823AC E1FF                       	smpsAlterNote       $FF
000823AE E701                       	dc.b	smpsNoAttack, $01
000823B0 E111                       	smpsAlterNote       $11
000823B2 E701                       	dc.b	smpsNoAttack, $01
000823B4 E106                       	smpsAlterNote       $06
000823B6 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000823B9 E107                       	smpsAlterNote       $07
000823BB 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000823BF E108                       	smpsAlterNote       $08
000823C1 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
000823C9 E109                       	smpsAlterNote       $09
000823CB A003                       	dc.b	nG2, $03
000823CD E11A                       	smpsAlterNote       $1A
000823CF A301                       	dc.b	nBb2, $01
000823D1 E1F2                       	smpsAlterNote       $F2
000823D3 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000823D6 E1FF                       	smpsAlterNote       $FF
000823D8 E701                       	dc.b	smpsNoAttack, $01
000823DA E111                       	smpsAlterNote       $11
000823DC E701                       	dc.b	smpsNoAttack, $01
000823DE E106                       	smpsAlterNote       $06
000823E0 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000823E3 E108                       	smpsAlterNote       $08
000823E5 9C07                       	dc.b	nEb2, $07
000823E7 E10C                       	smpsAlterNote       $0C
000823E9 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000823ED E107                       	smpsAlterNote       $07
000823EF 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
000823FB 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00082405 E108                       	smpsAlterNote       $08
00082407 9C06                       	dc.b	nEb2, $06
00082409 E10C                       	smpsAlterNote       $0C
0008240B 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008240F E108                       	smpsAlterNote       $08
00082411 9C03                       	dc.b	nEb2, $03
00082413 E109                       	smpsAlterNote       $09
00082415 A003 8001                  	dc.b	nG2, $03, nRst, $01
00082419 E10C                       	smpsAlterNote       $0C
0008241B A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00082423 E107                       	smpsAlterNote       $07
00082425 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00082429 F6F4 F8                    	smpsJump            music84_Jump04
0008242C                            
0008242C                            ; FM2 Data
0008242C                            music84_FM2:
0008242C E0C0                       	smpsPan             panCenter, $00
00082430 E10B                       	smpsAlterNote       $0B
00082432 C603 8007                  	dc.b	nA5, $03, nRst, $07
00082436 E109                       	smpsAlterNote       $09
00082438 C403 800B                  	dc.b	nG5, $03, nRst, $0B
0008243C E108                       	smpsAlterNote       $08
0008243E C103 8004                  	dc.b	nE5, $03, nRst, $04
00082444 E080                       	smpsPan             panLeft, $00
00082446 E10C                       	smpsAlterNote       $0C
00082448 E6F9                       	smpsAlterVol        $F9
0008244A C703                       	dc.b	nBb5, $03
0008244C E10B                       	smpsAlterNote       $0B
0008244E C603 8001                  	dc.b	nA5, $03, nRst, $01
00082452 E109                       	smpsAlterNote       $09
00082454 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008245A E108                       	smpsAlterNote       $08
0008245C C103 8001                  	dc.b	nE5, $03, nRst, $01
00082460 E106                       	smpsAlterNote       $06
00082462 BD03                       	dc.b	nC5, $03
00082464 E10B                       	smpsAlterNote       $0B
00082466 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008246C E0C0                       	smpsPan             panCenter, $00
0008246E E107                       	smpsAlterNote       $07
00082470 E606                       	smpsAlterVol        $06
00082472 BF03                       	dc.b	nD5, $03
00082474                            
00082474                            music84_Jump03:
00082474 E108                       	smpsAlterNote       $08
00082476 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008247A E109                       	smpsAlterNote       $09
0008247C C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00082482 E10B                       	smpsAlterNote       $0B
00082484 C607                       	dc.b	nA5, $07
00082486 E107                       	smpsAlterNote       $07
00082488 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008248C E106                       	smpsAlterNote       $06
0008248E C90D                       	dc.b	nC6, $0D
00082490 E100                       	smpsAlterNote       $00
00082492 E701                       	dc.b	smpsNoAttack, $01
00082494 E1FF                       	smpsAlterNote       $FF
00082496 E701                       	dc.b	smpsNoAttack, $01
00082498 E103                       	smpsAlterNote       $03
0008249A E701                       	dc.b	smpsNoAttack, $01
0008249C E109                       	smpsAlterNote       $09
0008249E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000824A2 E106                       	smpsAlterNote       $06
000824A4 E701                       	dc.b	smpsNoAttack, $01
000824A6 E100                       	smpsAlterNote       $00
000824A8 E701                       	dc.b	smpsNoAttack, $01
000824AA E10C                       	smpsAlterNote       $0C
000824AC C703 8001                  	dc.b	nBb5, $03, nRst, $01
000824B0 E10B                       	smpsAlterNote       $0B
000824B2 C603                       	dc.b	nA5, $03
000824B4 E109                       	smpsAlterNote       $09
000824B6 C403 8001                  	dc.b	nG5, $03, nRst, $01
000824BA E10B                       	smpsAlterNote       $0B
000824BC C60D                       	dc.b	nA5, $0D
000824BE E105                       	smpsAlterNote       $05
000824C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000824C4 E10B                       	smpsAlterNote       $0B
000824C6 E701                       	dc.b	smpsNoAttack, $01
000824C8 E10E                       	smpsAlterNote       $0E
000824CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000824CE E108                       	smpsAlterNote       $08
000824D0 E701                       	dc.b	smpsNoAttack, $01
000824D2 E104                       	smpsAlterNote       $04
000824D4 E701                       	dc.b	smpsNoAttack, $01
000824D6 E105                       	smpsAlterNote       $05
000824D8 E701                       	dc.b	smpsNoAttack, $01
000824DA E10B                       	smpsAlterNote       $0B
000824DC E701                       	dc.b	smpsNoAttack, $01
000824DE E10F                       	smpsAlterNote       $0F
000824E0 E701                       	dc.b	smpsNoAttack, $01
000824E2 E10B                       	smpsAlterNote       $0B
000824E4 E701                       	dc.b	smpsNoAttack, $01
000824E6 E108                       	smpsAlterNote       $08
000824E8 E701                       	dc.b	smpsNoAttack, $01
000824EA E104                       	smpsAlterNote       $04
000824EC E701                       	dc.b	smpsNoAttack, $01
000824EE E108                       	smpsAlterNote       $08
000824F0 E701                       	dc.b	smpsNoAttack, $01
000824F2 E10E                       	smpsAlterNote       $0E
000824F4 E701                       	dc.b	smpsNoAttack, $01
000824F6 E10F                       	smpsAlterNote       $0F
000824F8 E701                       	dc.b	smpsNoAttack, $01
000824FA E10B                       	smpsAlterNote       $0B
000824FC E701                       	dc.b	smpsNoAttack, $01
000824FE E105                       	smpsAlterNote       $05
00082500 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082504 E108                       	smpsAlterNote       $08
00082506 E701                       	dc.b	smpsNoAttack, $01
00082508 E10E                       	smpsAlterNote       $0E
0008250A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008250E E108                       	smpsAlterNote       $08
00082510 E701                       	dc.b	smpsNoAttack, $01
00082512 E105                       	smpsAlterNote       $05
00082514 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082518 E10B                       	smpsAlterNote       $0B
0008251A E701                       	dc.b	smpsNoAttack, $01
0008251C E10F                       	smpsAlterNote       $0F
0008251E E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00082522 E107                       	smpsAlterNote       $07
00082524 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00082528 E108                       	smpsAlterNote       $08
0008252A C103                       	dc.b	nE5, $03
0008252C E109                       	smpsAlterNote       $09
0008252E C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00082536 E10B                       	smpsAlterNote       $0B
00082538 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008253C E107                       	smpsAlterNote       $07
0008253E BF03                       	dc.b	nD5, $03
00082540 E106                       	smpsAlterNote       $06
00082542 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00082546 E107                       	smpsAlterNote       $07
00082548 CB03                       	dc.b	nD6, $03
0008254A E10C                       	smpsAlterNote       $0C
0008254C C704 8001                  	dc.b	nBb5, $04, nRst, $01
00082550 E10B                       	smpsAlterNote       $0B
00082552 C604 8001                  	dc.b	nA5, $04, nRst, $01
00082556 E109                       	smpsAlterNote       $09
00082558 C404                       	dc.b	nG5, $04
0008255A E10B                       	smpsAlterNote       $0B
0008255C C60D                       	dc.b	nA5, $0D
0008255E E108                       	smpsAlterNote       $08
00082560 E701                       	dc.b	smpsNoAttack, $01
00082562 E104                       	smpsAlterNote       $04
00082564 E701                       	dc.b	smpsNoAttack, $01
00082566 E108                       	smpsAlterNote       $08
00082568 E701                       	dc.b	smpsNoAttack, $01
0008256A E10B                       	smpsAlterNote       $0B
0008256C E701                       	dc.b	smpsNoAttack, $01
0008256E E10F                       	smpsAlterNote       $0F
00082570 E701                       	dc.b	smpsNoAttack, $01
00082572 E10B                       	smpsAlterNote       $0B
00082574 E701                       	dc.b	smpsNoAttack, $01
00082576 E105                       	smpsAlterNote       $05
00082578 E701                       	dc.b	smpsNoAttack, $01
0008257A E104                       	smpsAlterNote       $04
0008257C E701                       	dc.b	smpsNoAttack, $01
0008257E E108                       	smpsAlterNote       $08
00082580 E701                       	dc.b	smpsNoAttack, $01
00082582 E10E                       	smpsAlterNote       $0E
00082584 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082588 E10B                       	smpsAlterNote       $0B
0008258A E701                       	dc.b	smpsNoAttack, $01
0008258C E105                       	smpsAlterNote       $05
0008258E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082592 E10B                       	smpsAlterNote       $0B
00082594 E701                       	dc.b	smpsNoAttack, $01
00082596 E10E                       	smpsAlterNote       $0E
00082598 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008259C E108                       	smpsAlterNote       $08
0008259E E701                       	dc.b	smpsNoAttack, $01
000825A0 E104                       	smpsAlterNote       $04
000825A2 E701                       	dc.b	smpsNoAttack, $01
000825A4 E105                       	smpsAlterNote       $05
000825A6 E701                       	dc.b	smpsNoAttack, $01
000825A8 E10B                       	smpsAlterNote       $0B
000825AA E701                       	dc.b	smpsNoAttack, $01
000825AC E10F                       	smpsAlterNote       $0F
000825AE E701                       	dc.b	smpsNoAttack, $01
000825B0 E10B                       	smpsAlterNote       $0B
000825B2 E701                       	dc.b	smpsNoAttack, $01
000825B4 E108                       	smpsAlterNote       $08
000825B6 E701                       	dc.b	smpsNoAttack, $01
000825B8 E105                       	smpsAlterNote       $05
000825BA 8001                       	dc.b	nRst, $01
000825BC E109                       	smpsAlterNote       $09
000825BE C401                       	dc.b	nG5, $01
000825C0 E10B                       	smpsAlterNote       $0B
000825C2 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
000825CB E109                       	smpsAlterNote       $09
000825CD C404 8001                  	dc.b	nG5, $04, nRst, $01
000825D1 E10B                       	smpsAlterNote       $0B
000825D3 C604 8001                  	dc.b	nA5, $04, nRst, $01
000825D7 E107                       	smpsAlterNote       $07
000825D9 BF0D                       	dc.b	nD5, $0D
000825DB E101                       	smpsAlterNote       $01
000825DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000825E1 E104                       	smpsAlterNote       $04
000825E3 E701                       	dc.b	smpsNoAttack, $01
000825E5 E10A                       	smpsAlterNote       $0A
000825E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000825EB E104                       	smpsAlterNote       $04
000825ED E701                       	dc.b	smpsNoAttack, $01
000825EF E101                       	smpsAlterNote       $01
000825F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000825F5 E107                       	smpsAlterNote       $07
000825F7 E701                       	dc.b	smpsNoAttack, $01
000825F9 E10B                       	smpsAlterNote       $0B
000825FB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000825FF E108                       	smpsAlterNote       $08
00082601 C101                       	dc.b	nE5, $01
00082603 E109                       	smpsAlterNote       $09
00082605 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008260A E10B                       	smpsAlterNote       $0B
0008260C C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00082614 E108                       	smpsAlterNote       $08
00082616 CD06                       	dc.b	nE6, $06
00082618 E109                       	smpsAlterNote       $09
0008261A CE07                       	dc.b	nF6, $07
0008261C E108                       	smpsAlterNote       $08
0008261E CD03 8001                  	dc.b	nE6, $03, nRst, $01
00082622 E106                       	smpsAlterNote       $06
00082624 C903                       	dc.b	nC6, $03
00082626 E109                       	smpsAlterNote       $09
00082628 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008262C E10C                       	smpsAlterNote       $0C
0008262E C70D                       	dc.b	nBb5, $0D
00082630 E106                       	smpsAlterNote       $06
00082632 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082636 E109                       	smpsAlterNote       $09
00082638 E701                       	dc.b	smpsNoAttack, $01
0008263A E10F                       	smpsAlterNote       $0F
0008263C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082640 E109                       	smpsAlterNote       $09
00082642 E701                       	dc.b	smpsNoAttack, $01
00082644 E106                       	smpsAlterNote       $06
00082646 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008264A E10C                       	smpsAlterNote       $0C
0008264C E701                       	dc.b	smpsNoAttack, $01
0008264E E110                       	smpsAlterNote       $10
00082650 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00082654 E10B                       	smpsAlterNote       $0B
00082656 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
0008265A E105                       	smpsAlterNote       $05
0008265C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082660 E10B                       	smpsAlterNote       $0B
00082662 E701                       	dc.b	smpsNoAttack, $01
00082664 E10E                       	smpsAlterNote       $0E
00082666 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008266A E108                       	smpsAlterNote       $08
0008266C E701                       	dc.b	smpsNoAttack, $01
0008266E E104                       	smpsAlterNote       $04
00082670 E701                       	dc.b	smpsNoAttack, $01
00082672 E105                       	smpsAlterNote       $05
00082674 E701                       	dc.b	smpsNoAttack, $01
00082676 E10B                       	smpsAlterNote       $0B
00082678 E701                       	dc.b	smpsNoAttack, $01
0008267A E10F                       	smpsAlterNote       $0F
0008267C E701                       	dc.b	smpsNoAttack, $01
0008267E E10B                       	smpsAlterNote       $0B
00082680 E701                       	dc.b	smpsNoAttack, $01
00082682 E108                       	smpsAlterNote       $08
00082684 E701                       	dc.b	smpsNoAttack, $01
00082686 E104                       	smpsAlterNote       $04
00082688 E701                       	dc.b	smpsNoAttack, $01
0008268A E108                       	smpsAlterNote       $08
0008268C E701                       	dc.b	smpsNoAttack, $01
0008268E E10E                       	smpsAlterNote       $0E
00082690 E701                       	dc.b	smpsNoAttack, $01
00082692 E10F                       	smpsAlterNote       $0F
00082694 E701                       	dc.b	smpsNoAttack, $01
00082696 E10B                       	smpsAlterNote       $0B
00082698 E701                       	dc.b	smpsNoAttack, $01
0008269A E105                       	smpsAlterNote       $05
0008269C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000826A0 E108                       	smpsAlterNote       $08
000826A2 E701                       	dc.b	smpsNoAttack, $01
000826A4 E10E                       	smpsAlterNote       $0E
000826A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000826AA E108                       	smpsAlterNote       $08
000826AC E701                       	dc.b	smpsNoAttack, $01
000826AE E105                       	smpsAlterNote       $05
000826B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000826B4 E10B                       	smpsAlterNote       $0B
000826B6 E701                       	dc.b	smpsNoAttack, $01
000826B8 E10F                       	smpsAlterNote       $0F
000826BA E701                       	dc.b	smpsNoAttack, $01
000826BC E10E                       	smpsAlterNote       $0E
000826BE E701                       	dc.b	smpsNoAttack, $01
000826C0 E108                       	smpsAlterNote       $08
000826C2 E701                       	dc.b	smpsNoAttack, $01
000826C4 E104                       	smpsAlterNote       $04
000826C6 E701                       	dc.b	smpsNoAttack, $01
000826C8 E108                       	smpsAlterNote       $08
000826CA E701                       	dc.b	smpsNoAttack, $01
000826CC E10E                       	smpsAlterNote       $0E
000826CE E701                       	dc.b	smpsNoAttack, $01
000826D0 E10F                       	smpsAlterNote       $0F
000826D2 E701                       	dc.b	smpsNoAttack, $01
000826D4 E10B                       	smpsAlterNote       $0B
000826D6 E701                       	dc.b	smpsNoAttack, $01
000826D8 E105                       	smpsAlterNote       $05
000826DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000826DE E108                       	smpsAlterNote       $08
000826E0 E701                       	dc.b	smpsNoAttack, $01
000826E2 E10E                       	smpsAlterNote       $0E
000826E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000826E8 E108                       	smpsAlterNote       $08
000826EA E701                       	dc.b	smpsNoAttack, $01
000826EC E105                       	smpsAlterNote       $05
000826EE E701                       	dc.b	smpsNoAttack, $01
000826F0 E10B                       	smpsAlterNote       $0B
000826F2 C60D                       	dc.b	nA5, $0D
000826F4 E108                       	smpsAlterNote       $08
000826F6 E701                       	dc.b	smpsNoAttack, $01
000826F8 E104                       	smpsAlterNote       $04
000826FA E701                       	dc.b	smpsNoAttack, $01
000826FC E105                       	smpsAlterNote       $05
000826FE E701                       	dc.b	smpsNoAttack, $01
00082700 E10B                       	smpsAlterNote       $0B
00082702 E701                       	dc.b	smpsNoAttack, $01
00082704 E10F                       	smpsAlterNote       $0F
00082706 E701                       	dc.b	smpsNoAttack, $01
00082708 E10B                       	smpsAlterNote       $0B
0008270A E701                       	dc.b	smpsNoAttack, $01
0008270C E108                       	smpsAlterNote       $08
0008270E E701                       	dc.b	smpsNoAttack, $01
00082710 E104                       	smpsAlterNote       $04
00082712 E701                       	dc.b	smpsNoAttack, $01
00082714 E108                       	smpsAlterNote       $08
00082716 E701                       	dc.b	smpsNoAttack, $01
00082718 E10E                       	smpsAlterNote       $0E
0008271A E701                       	dc.b	smpsNoAttack, $01
0008271C E10F                       	smpsAlterNote       $0F
0008271E E701                       	dc.b	smpsNoAttack, $01
00082722 E109                       	smpsAlterNote       $09
00082724 E6FF                       	smpsAlterVol        $FF
00082726 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00082730 E108                       	smpsAlterNote       $08
00082732 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00082738 E107                       	smpsAlterNote       $07
0008273A E601                       	smpsAlterVol        $01
0008273C BF03                       	dc.b	nD5, $03
0008273E E108                       	smpsAlterNote       $08
00082740 C103 8001                  	dc.b	nE5, $03, nRst, $01
00082744 E109                       	smpsAlterNote       $09
00082746 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008274C E10B                       	smpsAlterNote       $0B
0008274E C606 8001                  	dc.b	nA5, $06, nRst, $01
00082752 E107                       	smpsAlterNote       $07
00082754 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00082758 E106                       	smpsAlterNote       $06
0008275A C90D                       	dc.b	nC6, $0D
0008275C E103                       	smpsAlterNote       $03
0008275E E701                       	dc.b	smpsNoAttack, $01
00082760 E1FF                       	smpsAlterNote       $FF
00082762 E701                       	dc.b	smpsNoAttack, $01
00082764 E103                       	smpsAlterNote       $03
00082766 E701                       	dc.b	smpsNoAttack, $01
00082768 E109                       	smpsAlterNote       $09
0008276A E701                       	dc.b	smpsNoAttack, $01
0008276C E10A                       	smpsAlterNote       $0A
0008276E E701                       	dc.b	smpsNoAttack, $01
00082770 E106                       	smpsAlterNote       $06
00082772 E701                       	dc.b	smpsNoAttack, $01
00082774 E100                       	smpsAlterNote       $00
00082776 E701                       	dc.b	smpsNoAttack, $01
00082778 E10C                       	smpsAlterNote       $0C
0008277A C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008277E E10B                       	smpsAlterNote       $0B
00082780 C603                       	dc.b	nA5, $03
00082782 E109                       	smpsAlterNote       $09
00082784 C403 8001                  	dc.b	nG5, $03, nRst, $01
00082788 E10B                       	smpsAlterNote       $0B
0008278A C60D                       	dc.b	nA5, $0D
0008278C E105                       	smpsAlterNote       $05
0008278E E701                       	dc.b	smpsNoAttack, $01
00082790 E104                       	smpsAlterNote       $04
00082792 E701                       	dc.b	smpsNoAttack, $01
00082794 E108                       	smpsAlterNote       $08
00082796 E701                       	dc.b	smpsNoAttack, $01
00082798 E10E                       	smpsAlterNote       $0E
0008279A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008279E E10B                       	smpsAlterNote       $0B
000827A0 E701                       	dc.b	smpsNoAttack, $01
000827A2 E105                       	smpsAlterNote       $05
000827A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000827A8 E10B                       	smpsAlterNote       $0B
000827AA E701                       	dc.b	smpsNoAttack, $01
000827AC E10E                       	smpsAlterNote       $0E
000827AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000827B2 E108                       	smpsAlterNote       $08
000827B4 E701                       	dc.b	smpsNoAttack, $01
000827B6 E104                       	smpsAlterNote       $04
000827B8 E701                       	dc.b	smpsNoAttack, $01
000827BA E105                       	smpsAlterNote       $05
000827BC E701                       	dc.b	smpsNoAttack, $01
000827BE E10B                       	smpsAlterNote       $0B
000827C0 E701                       	dc.b	smpsNoAttack, $01
000827C2 E10F                       	smpsAlterNote       $0F
000827C4 E701                       	dc.b	smpsNoAttack, $01
000827C6 E10B                       	smpsAlterNote       $0B
000827C8 E701                       	dc.b	smpsNoAttack, $01
000827CA E108                       	smpsAlterNote       $08
000827CC E701                       	dc.b	smpsNoAttack, $01
000827CE E104                       	smpsAlterNote       $04
000827D0 E701                       	dc.b	smpsNoAttack, $01
000827D2 E108                       	smpsAlterNote       $08
000827D4 E701                       	dc.b	smpsNoAttack, $01
000827D6 E10E                       	smpsAlterNote       $0E
000827D8 E701                       	dc.b	smpsNoAttack, $01
000827DA E10F                       	smpsAlterNote       $0F
000827DC E701                       	dc.b	smpsNoAttack, $01
000827DE E10B                       	smpsAlterNote       $0B
000827E0 E701                       	dc.b	smpsNoAttack, $01
000827E2 E105                       	smpsAlterNote       $05
000827E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000827E8 E108                       	smpsAlterNote       $08
000827EA E701                       	dc.b	smpsNoAttack, $01
000827EC E10E                       	smpsAlterNote       $0E
000827EE E701                       	dc.b	smpsNoAttack, $01
000827F0 E10F                       	smpsAlterNote       $0F
000827F2 800F                       	dc.b	nRst, $0F
000827F4 E107                       	smpsAlterNote       $07
000827F6 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000827FA E108                       	smpsAlterNote       $08
000827FC C103                       	dc.b	nE5, $03
000827FE E109                       	smpsAlterNote       $09
00082800 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00082806 E10B                       	smpsAlterNote       $0B
00082808 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008280C E107                       	smpsAlterNote       $07
0008280E BF03                       	dc.b	nD5, $03
00082810 E106                       	smpsAlterNote       $06
00082812 C90E                       	dc.b	nC6, $0E
00082814 E107                       	smpsAlterNote       $07
00082816 CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008281A E10C                       	smpsAlterNote       $0C
0008281C C704                       	dc.b	nBb5, $04
0008281E E10B                       	smpsAlterNote       $0B
00082820 C604 8001                  	dc.b	nA5, $04, nRst, $01
00082824 E109                       	smpsAlterNote       $09
00082826 C404                       	dc.b	nG5, $04
00082828 E10B                       	smpsAlterNote       $0B
0008282A C60D                       	dc.b	nA5, $0D
0008282C E108                       	smpsAlterNote       $08
0008282E E701                       	dc.b	smpsNoAttack, $01
00082830 E105                       	smpsAlterNote       $05
00082832 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082836 E10B                       	smpsAlterNote       $0B
00082838 E701                       	dc.b	smpsNoAttack, $01
0008283A E10F                       	smpsAlterNote       $0F
0008283C E701                       	dc.b	smpsNoAttack, $01
0008283E E10E                       	smpsAlterNote       $0E
00082840 E701                       	dc.b	smpsNoAttack, $01
00082842 E108                       	smpsAlterNote       $08
00082844 E701                       	dc.b	smpsNoAttack, $01
00082846 E104                       	smpsAlterNote       $04
00082848 E701                       	dc.b	smpsNoAttack, $01
0008284A E108                       	smpsAlterNote       $08
0008284C E701                       	dc.b	smpsNoAttack, $01
0008284E E10B                       	smpsAlterNote       $0B
00082850 E701                       	dc.b	smpsNoAttack, $01
00082852 E10F                       	smpsAlterNote       $0F
00082854 E701                       	dc.b	smpsNoAttack, $01
00082856 E10B                       	smpsAlterNote       $0B
00082858 E701                       	dc.b	smpsNoAttack, $01
0008285A E105                       	smpsAlterNote       $05
0008285C E701                       	dc.b	smpsNoAttack, $01
0008285E E104                       	smpsAlterNote       $04
00082860 E701                       	dc.b	smpsNoAttack, $01
00082862 E108                       	smpsAlterNote       $08
00082864 E701                       	dc.b	smpsNoAttack, $01
00082866 E10E                       	smpsAlterNote       $0E
00082868 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008286C E10B                       	smpsAlterNote       $0B
0008286E E701                       	dc.b	smpsNoAttack, $01
00082870 E105                       	smpsAlterNote       $05
00082872 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082876 E10B                       	smpsAlterNote       $0B
00082878 E701                       	dc.b	smpsNoAttack, $01
0008287A E10E                       	smpsAlterNote       $0E
0008287C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082880 E108                       	smpsAlterNote       $08
00082882 E701                       	dc.b	smpsNoAttack, $01
00082884 E105                       	smpsAlterNote       $05
00082886 8001                       	dc.b	nRst, $01
00082888 E109                       	smpsAlterNote       $09
0008288A C402                       	dc.b	nG5, $02
0008288C E10B                       	smpsAlterNote       $0B
0008288E E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00082897 E109                       	smpsAlterNote       $09
00082899 C404                       	dc.b	nG5, $04
0008289B E10B                       	smpsAlterNote       $0B
0008289D C604 8001                  	dc.b	nA5, $04, nRst, $01
000828A1 E107                       	smpsAlterNote       $07
000828A3 BF0D                       	dc.b	nD5, $0D
000828A5 E101                       	smpsAlterNote       $01
000828A7 E701                       	dc.b	smpsNoAttack, $01
000828A9 E100                       	smpsAlterNote       $00
000828AB E701                       	dc.b	smpsNoAttack, $01
000828AD E104                       	smpsAlterNote       $04
000828AF E701                       	dc.b	smpsNoAttack, $01
000828B1 E10A                       	smpsAlterNote       $0A
000828B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000828B7 E107                       	smpsAlterNote       $07
000828B9 E701                       	dc.b	smpsNoAttack, $01
000828BB E101                       	smpsAlterNote       $01
000828BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000828C1 E107                       	smpsAlterNote       $07
000828C3 E701                       	dc.b	smpsNoAttack, $01
000828C5 E10A                       	smpsAlterNote       $0A
000828C7 E701                       	dc.b	smpsNoAttack, $01
000828C9 E10B                       	smpsAlterNote       $0B
000828CB 8001                       	dc.b	nRst, $01
000828CD E108                       	smpsAlterNote       $08
000828CF C101                       	dc.b	nE5, $01
000828D1 E109                       	smpsAlterNote       $09
000828D3 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000828D8 E10B                       	smpsAlterNote       $0B
000828DA C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000828E2 E108                       	smpsAlterNote       $08
000828E4 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000828E8 E109                       	smpsAlterNote       $09
000828EA CE06 8001                  	dc.b	nF6, $06, nRst, $01
000828EE E108                       	smpsAlterNote       $08
000828F0 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000828F4 E106                       	smpsAlterNote       $06
000828F6 C903                       	dc.b	nC6, $03
000828F8 E109                       	smpsAlterNote       $09
000828FA C403 8001                  	dc.b	nG5, $03, nRst, $01
000828FE E10C                       	smpsAlterNote       $0C
00082900 C70D                       	dc.b	nBb5, $0D
00082902 E109                       	smpsAlterNote       $09
00082904 E701                       	dc.b	smpsNoAttack, $01
00082906 E105                       	smpsAlterNote       $05
00082908 E701                       	dc.b	smpsNoAttack, $01
0008290A E109                       	smpsAlterNote       $09
0008290C E701                       	dc.b	smpsNoAttack, $01
0008290E E10F                       	smpsAlterNote       $0F
00082910 E701                       	dc.b	smpsNoAttack, $01
00082912 E110                       	smpsAlterNote       $10
00082914 E701                       	dc.b	smpsNoAttack, $01
00082916 E10C                       	smpsAlterNote       $0C
00082918 E701                       	dc.b	smpsNoAttack, $01
0008291A E106                       	smpsAlterNote       $06
0008291C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082920 E109                       	smpsAlterNote       $09
00082922 E701                       	dc.b	smpsNoAttack, $01
00082924 E10F                       	smpsAlterNote       $0F
00082926 E701                       	dc.b	smpsNoAttack, $01
00082928 E110                       	smpsAlterNote       $10
0008292A 8001                       	dc.b	nRst, $01
0008292C E10B                       	smpsAlterNote       $0B
0008292E C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00082934 E105                       	smpsAlterNote       $05
00082936 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008293A E108                       	smpsAlterNote       $08
0008293C E701                       	dc.b	smpsNoAttack, $01
0008293E E10E                       	smpsAlterNote       $0E
00082940 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082944 E108                       	smpsAlterNote       $08
00082946 E701                       	dc.b	smpsNoAttack, $01
00082948 E105                       	smpsAlterNote       $05
0008294A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008294E E10B                       	smpsAlterNote       $0B
00082950 E701                       	dc.b	smpsNoAttack, $01
00082952 E10F                       	smpsAlterNote       $0F
00082954 E701                       	dc.b	smpsNoAttack, $01
00082956 E10E                       	smpsAlterNote       $0E
00082958 E701                       	dc.b	smpsNoAttack, $01
0008295A E108                       	smpsAlterNote       $08
0008295C E701                       	dc.b	smpsNoAttack, $01
0008295E E104                       	smpsAlterNote       $04
00082960 E701                       	dc.b	smpsNoAttack, $01
00082962 E108                       	smpsAlterNote       $08
00082964 E701                       	dc.b	smpsNoAttack, $01
00082966 E10B                       	smpsAlterNote       $0B
00082968 E701                       	dc.b	smpsNoAttack, $01
0008296A E10F                       	smpsAlterNote       $0F
0008296C E701                       	dc.b	smpsNoAttack, $01
0008296E E10B                       	smpsAlterNote       $0B
00082970 E701                       	dc.b	smpsNoAttack, $01
00082972 E105                       	smpsAlterNote       $05
00082974 E701                       	dc.b	smpsNoAttack, $01
00082976 E104                       	smpsAlterNote       $04
00082978 E701                       	dc.b	smpsNoAttack, $01
0008297A E108                       	smpsAlterNote       $08
0008297C E701                       	dc.b	smpsNoAttack, $01
0008297E E10E                       	smpsAlterNote       $0E
00082980 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082984 E10B                       	smpsAlterNote       $0B
00082986 E701                       	dc.b	smpsNoAttack, $01
00082988 E105                       	smpsAlterNote       $05
0008298A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008298E E10B                       	smpsAlterNote       $0B
00082990 E701                       	dc.b	smpsNoAttack, $01
00082992 E10E                       	smpsAlterNote       $0E
00082994 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082998 E108                       	smpsAlterNote       $08
0008299A E701                       	dc.b	smpsNoAttack, $01
0008299C E104                       	smpsAlterNote       $04
0008299E E701                       	dc.b	smpsNoAttack, $01
000829A0 E105                       	smpsAlterNote       $05
000829A2 E701                       	dc.b	smpsNoAttack, $01
000829A4 E10B                       	smpsAlterNote       $0B
000829A6 E701                       	dc.b	smpsNoAttack, $01
000829A8 E10F                       	smpsAlterNote       $0F
000829AA E701                       	dc.b	smpsNoAttack, $01
000829AC E10B                       	smpsAlterNote       $0B
000829AE E701                       	dc.b	smpsNoAttack, $01
000829B0 E108                       	smpsAlterNote       $08
000829B2 E701                       	dc.b	smpsNoAttack, $01
000829B4 E104                       	smpsAlterNote       $04
000829B6 E701                       	dc.b	smpsNoAttack, $01
000829B8 E108                       	smpsAlterNote       $08
000829BA E701                       	dc.b	smpsNoAttack, $01
000829BC E10E                       	smpsAlterNote       $0E
000829BE E701                       	dc.b	smpsNoAttack, $01
000829C0 E10F                       	smpsAlterNote       $0F
000829C2 E701                       	dc.b	smpsNoAttack, $01
000829C4 E10B                       	smpsAlterNote       $0B
000829C6 E701                       	dc.b	smpsNoAttack, $01
000829C8 E105                       	smpsAlterNote       $05
000829CA E701                       	dc.b	smpsNoAttack, $01
000829CC E10B                       	smpsAlterNote       $0B
000829CE C60E                       	dc.b	nA5, $0E
000829D0 E105                       	smpsAlterNote       $05
000829D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000829D6 E10B                       	smpsAlterNote       $0B
000829D8 E701                       	dc.b	smpsNoAttack, $01
000829DA E10E                       	smpsAlterNote       $0E
000829DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000829E0 E108                       	smpsAlterNote       $08
000829E2 E701                       	dc.b	smpsNoAttack, $01
000829E4 E104                       	smpsAlterNote       $04
000829E6 E701                       	dc.b	smpsNoAttack, $01
000829E8 E105                       	smpsAlterNote       $05
000829EA E701                       	dc.b	smpsNoAttack, $01
000829EC E10B                       	smpsAlterNote       $0B
000829EE E701                       	dc.b	smpsNoAttack, $01
000829F0 E10F                       	smpsAlterNote       $0F
000829F2 E701                       	dc.b	smpsNoAttack, $01
000829F4 E10B                       	smpsAlterNote       $0B
000829F6 E701                       	dc.b	smpsNoAttack, $01
000829F8 E108                       	smpsAlterNote       $08
000829FA E701                       	dc.b	smpsNoAttack, $01
000829FC E104                       	smpsAlterNote       $04
000829FE E701                       	dc.b	smpsNoAttack, $01
00082A00 E108                       	smpsAlterNote       $08
00082A02 E701                       	dc.b	smpsNoAttack, $01
00082A04 E10E                       	smpsAlterNote       $0E
00082A06 E701                       	dc.b	smpsNoAttack, $01
00082A08 E10F                       	smpsAlterNote       $0F
00082A0A E701                       	dc.b	smpsNoAttack, $01
00082A0C E10B                       	smpsAlterNote       $0B
00082A0E E701                       	dc.b	smpsNoAttack, $01
00082A10 E105                       	smpsAlterNote       $05
00082A12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082A16 E108                       	smpsAlterNote       $08
00082A18 E701                       	dc.b	smpsNoAttack, $01
00082A1A E10E                       	smpsAlterNote       $0E
00082A1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082A20 E108                       	smpsAlterNote       $08
00082A22 E701                       	dc.b	smpsNoAttack, $01
00082A24 E105                       	smpsAlterNote       $05
00082A26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082A2A E10B                       	smpsAlterNote       $0B
00082A2C E701                       	dc.b	smpsNoAttack, $01
00082A2E E10F                       	smpsAlterNote       $0F
00082A30 E701                       	dc.b	smpsNoAttack, $01
00082A32 E10E                       	smpsAlterNote       $0E
00082A34 E701                       	dc.b	smpsNoAttack, $01
00082A36 E108                       	smpsAlterNote       $08
00082A38 E701                       	dc.b	smpsNoAttack, $01
00082A3A E104                       	smpsAlterNote       $04
00082A3C E701                       	dc.b	smpsNoAttack, $01
00082A3E E108                       	smpsAlterNote       $08
00082A40 E701                       	dc.b	smpsNoAttack, $01
00082A42 E10E                       	smpsAlterNote       $0E
00082A44 E701                       	dc.b	smpsNoAttack, $01
00082A46 E10F                       	smpsAlterNote       $0F
00082A48 E701                       	dc.b	smpsNoAttack, $01
00082A4A E10B                       	smpsAlterNote       $0B
00082A4C E701                       	dc.b	smpsNoAttack, $01
00082A4E E105                       	smpsAlterNote       $05
00082A50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082A54 E108                       	smpsAlterNote       $08
00082A56 E701                       	dc.b	smpsNoAttack, $01
00082A58 E10E                       	smpsAlterNote       $0E
00082A5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082A5E E108                       	smpsAlterNote       $08
00082A60 E701                       	dc.b	smpsNoAttack, $01
00082A62 E105                       	smpsAlterNote       $05
00082A64 E701                       	dc.b	smpsNoAttack, $01
00082A68 E10B                       	smpsAlterNote       $0B
00082A6A E6FD                       	smpsAlterVol        $FD
00082A6C C604 8001                  	dc.b	nA5, $04, nRst, $01
00082A70 E109                       	smpsAlterNote       $09
00082A72 C404                       	dc.b	nG5, $04
00082A74 E10B                       	smpsAlterNote       $0B
00082A76 C604 8001                  	dc.b	nA5, $04, nRst, $01
00082A7A E107                       	smpsAlterNote       $07
00082A7C BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00082A82 E10B                       	smpsAlterNote       $0B
00082A84 C604                       	dc.b	nA5, $04
00082A86 E109                       	smpsAlterNote       $09
00082A88 C404 8001                  	dc.b	nG5, $04, nRst, $01
00082A8C E10B                       	smpsAlterNote       $0B
00082A8E C604                       	dc.b	nA5, $04
00082A90 E108                       	smpsAlterNote       $08
00082A92 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00082A9A E106                       	smpsAlterNote       $06
00082A9C C904 8001                  	dc.b	nC6, $04, nRst, $01
00082AA0 E10C                       	smpsAlterNote       $0C
00082AA2 C704                       	dc.b	nBb5, $04
00082AA4 E10B                       	smpsAlterNote       $0B
00082AA6 C604 8001                  	dc.b	nA5, $04, nRst, $01
00082AAA E109                       	smpsAlterNote       $09
00082AAC C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00082AB6 E10B                       	smpsAlterNote       $0B
00082AB8 C60D                       	dc.b	nA5, $0D
00082ABA E108                       	smpsAlterNote       $08
00082ABC E701                       	dc.b	smpsNoAttack, $01
00082ABE E104                       	smpsAlterNote       $04
00082AC0 E701                       	dc.b	smpsNoAttack, $01
00082AC2 E108                       	smpsAlterNote       $08
00082AC4 E701                       	dc.b	smpsNoAttack, $01
00082AC6 E10E                       	smpsAlterNote       $0E
00082AC8 E701                       	dc.b	smpsNoAttack, $01
00082ACA E10F                       	smpsAlterNote       $0F
00082ACC E701                       	dc.b	smpsNoAttack, $01
00082ACE E10B                       	smpsAlterNote       $0B
00082AD0 E701                       	dc.b	smpsNoAttack, $01
00082AD2 E105                       	smpsAlterNote       $05
00082AD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082AD8 E108                       	smpsAlterNote       $08
00082ADA E701                       	dc.b	smpsNoAttack, $01
00082ADC E10E                       	smpsAlterNote       $0E
00082ADE E701                       	dc.b	smpsNoAttack, $01
00082AE0 E10F                       	smpsAlterNote       $0F
00082AE2 8001                       	dc.b	nRst, $01
00082AE4 E109                       	smpsAlterNote       $09
00082AE6 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00082AEC E108                       	smpsAlterNote       $08
00082AEE C10D                       	dc.b	nE5, $0D
00082AF0 E102                       	smpsAlterNote       $02
00082AF2 E701                       	dc.b	smpsNoAttack, $01
00082AF4 E101                       	smpsAlterNote       $01
00082AF6 E701                       	dc.b	smpsNoAttack, $01
00082AF8 E105                       	smpsAlterNote       $05
00082AFA E701                       	dc.b	smpsNoAttack, $01
00082AFC E10B                       	smpsAlterNote       $0B
00082AFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B02 E108                       	smpsAlterNote       $08
00082B04 E701                       	dc.b	smpsNoAttack, $01
00082B06 E102                       	smpsAlterNote       $02
00082B08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B0C E108                       	smpsAlterNote       $08
00082B0E E701                       	dc.b	smpsNoAttack, $01
00082B10 E10B                       	smpsAlterNote       $0B
00082B12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B16 E105                       	smpsAlterNote       $05
00082B18 E701                       	dc.b	smpsNoAttack, $01
00082B1A E101                       	smpsAlterNote       $01
00082B1C E701                       	dc.b	smpsNoAttack, $01
00082B1E E102                       	smpsAlterNote       $02
00082B20 E701                       	dc.b	smpsNoAttack, $01
00082B22 E108                       	smpsAlterNote       $08
00082B24 E701                       	dc.b	smpsNoAttack, $01
00082B26 E10C                       	smpsAlterNote       $0C
00082B28 E701                       	dc.b	smpsNoAttack, $01
00082B2A E108                       	smpsAlterNote       $08
00082B2C E701                       	dc.b	smpsNoAttack, $01
00082B2E E105                       	smpsAlterNote       $05
00082B30 E701                       	dc.b	smpsNoAttack, $01
00082B32 E101                       	smpsAlterNote       $01
00082B34 E701                       	dc.b	smpsNoAttack, $01
00082B36 E105                       	smpsAlterNote       $05
00082B38 E701                       	dc.b	smpsNoAttack, $01
00082B3A E10B                       	smpsAlterNote       $0B
00082B3C E701                       	dc.b	smpsNoAttack, $01
00082B3E E10C                       	smpsAlterNote       $0C
00082B40 E701                       	dc.b	smpsNoAttack, $01
00082B42 E108                       	smpsAlterNote       $08
00082B44 E701                       	dc.b	smpsNoAttack, $01
00082B46 E102                       	smpsAlterNote       $02
00082B48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B4C E105                       	smpsAlterNote       $05
00082B4E E701                       	dc.b	smpsNoAttack, $01
00082B50 E10B                       	smpsAlterNote       $0B
00082B52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B56 E105                       	smpsAlterNote       $05
00082B58 E701                       	dc.b	smpsNoAttack, $01
00082B5A E102                       	smpsAlterNote       $02
00082B5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B60 E108                       	smpsAlterNote       $08
00082B62 E701                       	dc.b	smpsNoAttack, $01
00082B64 E10C                       	smpsAlterNote       $0C
00082B66 E701                       	dc.b	smpsNoAttack, $01
00082B68 E10B                       	smpsAlterNote       $0B
00082B6A E701                       	dc.b	smpsNoAttack, $01
00082B6C E105                       	smpsAlterNote       $05
00082B6E E701                       	dc.b	smpsNoAttack, $01
00082B70 E101                       	smpsAlterNote       $01
00082B72 E701                       	dc.b	smpsNoAttack, $01
00082B74 E105                       	smpsAlterNote       $05
00082B76 E701                       	dc.b	smpsNoAttack, $01
00082B78 E108                       	smpsAlterNote       $08
00082B7A E701                       	dc.b	smpsNoAttack, $01
00082B7C E10C                       	smpsAlterNote       $0C
00082B7E E701                       	dc.b	smpsNoAttack, $01
00082B80 E108                       	smpsAlterNote       $08
00082B82 E701                       	dc.b	smpsNoAttack, $01
00082B84 E102                       	smpsAlterNote       $02
00082B86 E701                       	dc.b	smpsNoAttack, $01
00082B88 E101                       	smpsAlterNote       $01
00082B8A E701                       	dc.b	smpsNoAttack, $01
00082B8C E105                       	smpsAlterNote       $05
00082B8E E701                       	dc.b	smpsNoAttack, $01
00082B90 E10B                       	smpsAlterNote       $0B
00082B92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082B96 E108                       	smpsAlterNote       $08
00082B98 E701                       	dc.b	smpsNoAttack, $01
00082B9A E102                       	smpsAlterNote       $02
00082B9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082BA0 E108                       	smpsAlterNote       $08
00082BA2 E701                       	dc.b	smpsNoAttack, $01
00082BA4 E10B                       	smpsAlterNote       $0B
00082BA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082BAA E105                       	smpsAlterNote       $05
00082BAC E701                       	dc.b	smpsNoAttack, $01
00082BAE E101                       	smpsAlterNote       $01
00082BB0 E701                       	dc.b	smpsNoAttack, $01
00082BB2 E102                       	smpsAlterNote       $02
00082BB4 E701                       	dc.b	smpsNoAttack, $01
00082BB6 E108                       	smpsAlterNote       $08
00082BB8 E701                       	dc.b	smpsNoAttack, $01
00082BBA E10C                       	smpsAlterNote       $0C
00082BBC E701                       	dc.b	smpsNoAttack, $01
00082BBE E108                       	smpsAlterNote       $08
00082BC0 E701                       	dc.b	smpsNoAttack, $01
00082BC2 E105                       	smpsAlterNote       $05
00082BC4 E701                       	dc.b	smpsNoAttack, $01
00082BC6 E101                       	smpsAlterNote       $01
00082BC8 E701                       	dc.b	smpsNoAttack, $01
00082BCA E105                       	smpsAlterNote       $05
00082BCC E701                       	dc.b	smpsNoAttack, $01
00082BCE E10B                       	smpsAlterNote       $0B
00082BD0 E701                       	dc.b	smpsNoAttack, $01
00082BD2 E10C                       	smpsAlterNote       $0C
00082BD4 E701                       	dc.b	smpsNoAttack, $01
00082BD6 E108                       	smpsAlterNote       $08
00082BD8 E701                       	dc.b	smpsNoAttack, $01
00082BDA E102                       	smpsAlterNote       $02
00082BDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082BE0 E105                       	smpsAlterNote       $05
00082BE2 E701                       	dc.b	smpsNoAttack, $01
00082BE4 E10B                       	smpsAlterNote       $0B
00082BE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082BEA E105                       	smpsAlterNote       $05
00082BEC E701                       	dc.b	smpsNoAttack, $01
00082BEE E101                       	smpsAlterNote       $01
00082BF0 E701                       	dc.b	smpsNoAttack, $01
00082BF2 E102                       	smpsAlterNote       $02
00082BF4 E701                       	dc.b	smpsNoAttack, $01
00082BF6 E108                       	smpsAlterNote       $08
00082BF8 E701                       	dc.b	smpsNoAttack, $01
00082BFA E10C                       	smpsAlterNote       $0C
00082BFC E701                       	dc.b	smpsNoAttack, $01
00082BFE E108                       	smpsAlterNote       $08
00082C00 E701                       	dc.b	smpsNoAttack, $01
00082C02 E105                       	smpsAlterNote       $05
00082C04 E701                       	dc.b	smpsNoAttack, $01
00082C06 E101                       	smpsAlterNote       $01
00082C08 E701                       	dc.b	smpsNoAttack, $01
00082C0A E105                       	smpsAlterNote       $05
00082C0C E701                       	dc.b	smpsNoAttack, $01
00082C0E E10B                       	smpsAlterNote       $0B
00082C10 E701                       	dc.b	smpsNoAttack, $01
00082C12 E10C                       	smpsAlterNote       $0C
00082C14 E701                       	dc.b	smpsNoAttack, $01
00082C16 E108                       	smpsAlterNote       $08
00082C18 E701                       	dc.b	smpsNoAttack, $01
00082C1A E102                       	smpsAlterNote       $02
00082C1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082C20 E105                       	smpsAlterNote       $05
00082C22 E701                       	dc.b	smpsNoAttack, $01
00082C24 E10B                       	smpsAlterNote       $0B
00082C26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082C2A E105                       	smpsAlterNote       $05
00082C2C E701                       	dc.b	smpsNoAttack, $01
00082C2E E102                       	smpsAlterNote       $02
00082C30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082C34 E108                       	smpsAlterNote       $08
00082C36 E701                       	dc.b	smpsNoAttack, $01
00082C38 E10C                       	smpsAlterNote       $0C
00082C3A E701                       	dc.b	smpsNoAttack, $01
00082C3C E10B                       	smpsAlterNote       $0B
00082C3E E701                       	dc.b	smpsNoAttack, $01
00082C40 E105                       	smpsAlterNote       $05
00082C42 E701                       	dc.b	smpsNoAttack, $01
00082C44 E101                       	smpsAlterNote       $01
00082C46 E701                       	dc.b	smpsNoAttack, $01
00082C48 E105                       	smpsAlterNote       $05
00082C4A E701                       	dc.b	smpsNoAttack, $01
00082C4C E108                       	smpsAlterNote       $08
00082C4E E701                       	dc.b	smpsNoAttack, $01
00082C50 E10C                       	smpsAlterNote       $0C
00082C52 E701                       	dc.b	smpsNoAttack, $01
00082C56 E10B                       	smpsAlterNote       $0B
00082C58 C604 8001                  	dc.b	nA5, $04, nRst, $01
00082C5C E109                       	smpsAlterNote       $09
00082C5E C404                       	dc.b	nG5, $04
00082C60 E10B                       	smpsAlterNote       $0B
00082C62 C604 8001                  	dc.b	nA5, $04, nRst, $01
00082C66 E107                       	smpsAlterNote       $07
00082C68 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00082C6E E10B                       	smpsAlterNote       $0B
00082C70 C604                       	dc.b	nA5, $04
00082C72 E109                       	smpsAlterNote       $09
00082C74 C404 8001                  	dc.b	nG5, $04, nRst, $01
00082C78 E10B                       	smpsAlterNote       $0B
00082C7A C604                       	dc.b	nA5, $04
00082C7C E108                       	smpsAlterNote       $08
00082C7E C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
00082C84 E106                       	smpsAlterNote       $06
00082C86 C904 8001                  	dc.b	nC6, $04, nRst, $01
00082C8A E10C                       	smpsAlterNote       $0C
00082C8C C704                       	dc.b	nBb5, $04
00082C8E E10B                       	smpsAlterNote       $0B
00082C90 C604 8001                  	dc.b	nA5, $04, nRst, $01
00082C94 E109                       	smpsAlterNote       $09
00082C96 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00082CA0 E10B                       	smpsAlterNote       $0B
00082CA2 C60D                       	dc.b	nA5, $0D
00082CA4 E108                       	smpsAlterNote       $08
00082CA6 E701                       	dc.b	smpsNoAttack, $01
00082CA8 E104                       	smpsAlterNote       $04
00082CAA E701                       	dc.b	smpsNoAttack, $01
00082CAC E108                       	smpsAlterNote       $08
00082CAE E701                       	dc.b	smpsNoAttack, $01
00082CB0 E10B                       	smpsAlterNote       $0B
00082CB2 E701                       	dc.b	smpsNoAttack, $01
00082CB4 E10F                       	smpsAlterNote       $0F
00082CB6 E701                       	dc.b	smpsNoAttack, $01
00082CB8 E10B                       	smpsAlterNote       $0B
00082CBA E701                       	dc.b	smpsNoAttack, $01
00082CBC E105                       	smpsAlterNote       $05
00082CBE E701                       	dc.b	smpsNoAttack, $01
00082CC0 E104                       	smpsAlterNote       $04
00082CC2 E701                       	dc.b	smpsNoAttack, $01
00082CC4 E108                       	smpsAlterNote       $08
00082CC6 E701                       	dc.b	smpsNoAttack, $01
00082CC8 E10E                       	smpsAlterNote       $0E
00082CCA E701                       	dc.b	smpsNoAttack, $01
00082CCC E10F                       	smpsAlterNote       $0F
00082CCE 8001                       	dc.b	nRst, $01
00082CD0 E109                       	smpsAlterNote       $09
00082CD2 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00082CD8 E108                       	smpsAlterNote       $08
00082CDA C10D                       	dc.b	nE5, $0D
00082CDC E105                       	smpsAlterNote       $05
00082CDE E701                       	dc.b	smpsNoAttack, $01
00082CE0 E101                       	smpsAlterNote       $01
00082CE2 E701                       	dc.b	smpsNoAttack, $01
00082CE4 E105                       	smpsAlterNote       $05
00082CE6 E701                       	dc.b	smpsNoAttack, $01
00082CE8 E10B                       	smpsAlterNote       $0B
00082CEA E701                       	dc.b	smpsNoAttack, $01
00082CEC E10C                       	smpsAlterNote       $0C
00082CEE E701                       	dc.b	smpsNoAttack, $01
00082CF0 E108                       	smpsAlterNote       $08
00082CF2 E701                       	dc.b	smpsNoAttack, $01
00082CF4 E102                       	smpsAlterNote       $02
00082CF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082CFA E105                       	smpsAlterNote       $05
00082CFC E701                       	dc.b	smpsNoAttack, $01
00082CFE E10B                       	smpsAlterNote       $0B
00082D00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082D04 E105                       	smpsAlterNote       $05
00082D06 E701                       	dc.b	smpsNoAttack, $01
00082D08 E102                       	smpsAlterNote       $02
00082D0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082D0E E108                       	smpsAlterNote       $08
00082D10 E701                       	dc.b	smpsNoAttack, $01
00082D12 E10C                       	smpsAlterNote       $0C
00082D14 E701                       	dc.b	smpsNoAttack, $01
00082D16 E10B                       	smpsAlterNote       $0B
00082D18 E701                       	dc.b	smpsNoAttack, $01
00082D1A E105                       	smpsAlterNote       $05
00082D1C E701                       	dc.b	smpsNoAttack, $01
00082D1E E101                       	smpsAlterNote       $01
00082D20 E701                       	dc.b	smpsNoAttack, $01
00082D22 E105                       	smpsAlterNote       $05
00082D24 E701                       	dc.b	smpsNoAttack, $01
00082D26 E108                       	smpsAlterNote       $08
00082D28 E701                       	dc.b	smpsNoAttack, $01
00082D2A E10C                       	smpsAlterNote       $0C
00082D2C E701                       	dc.b	smpsNoAttack, $01
00082D2E E108                       	smpsAlterNote       $08
00082D30 E701                       	dc.b	smpsNoAttack, $01
00082D32 E102                       	smpsAlterNote       $02
00082D34 E701                       	dc.b	smpsNoAttack, $01
00082D36 E101                       	smpsAlterNote       $01
00082D38 E701                       	dc.b	smpsNoAttack, $01
00082D3A E105                       	smpsAlterNote       $05
00082D3C E701                       	dc.b	smpsNoAttack, $01
00082D3E E10B                       	smpsAlterNote       $0B
00082D40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082D44 E108                       	smpsAlterNote       $08
00082D46 E701                       	dc.b	smpsNoAttack, $01
00082D48 E102                       	smpsAlterNote       $02
00082D4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082D4E E108                       	smpsAlterNote       $08
00082D50 E701                       	dc.b	smpsNoAttack, $01
00082D52 E10B                       	smpsAlterNote       $0B
00082D54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082D58 E105                       	smpsAlterNote       $05
00082D5A E701                       	dc.b	smpsNoAttack, $01
00082D5C E101                       	smpsAlterNote       $01
00082D5E E701                       	dc.b	smpsNoAttack, $01
00082D60 E102                       	smpsAlterNote       $02
00082D62 E701                       	dc.b	smpsNoAttack, $01
00082D64 E108                       	smpsAlterNote       $08
00082D66 E701                       	dc.b	smpsNoAttack, $01
00082D68 E10C                       	smpsAlterNote       $0C
00082D6A E701                       	dc.b	smpsNoAttack, $01
00082D6C E108                       	smpsAlterNote       $08
00082D6E E701                       	dc.b	smpsNoAttack, $01
00082D70 E105                       	smpsAlterNote       $05
00082D72 E701                       	dc.b	smpsNoAttack, $01
00082D74 E101                       	smpsAlterNote       $01
00082D76 E701                       	dc.b	smpsNoAttack, $01
00082D78 E105                       	smpsAlterNote       $05
00082D7A E701                       	dc.b	smpsNoAttack, $01
00082D7C E10B                       	smpsAlterNote       $0B
00082D7E E701                       	dc.b	smpsNoAttack, $01
00082D80 E10C                       	smpsAlterNote       $0C
00082D82 E701                       	dc.b	smpsNoAttack, $01
00082D84 E108                       	smpsAlterNote       $08
00082D86 E701                       	dc.b	smpsNoAttack, $01
00082D88 E102                       	smpsAlterNote       $02
00082D8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082D8E E108                       	smpsAlterNote       $08
00082D90 E701                       	dc.b	smpsNoAttack, $01
00082D92 E10B                       	smpsAlterNote       $0B
00082D94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082D98 E105                       	smpsAlterNote       $05
00082D9A E701                       	dc.b	smpsNoAttack, $01
00082D9C E101                       	smpsAlterNote       $01
00082D9E E701                       	dc.b	smpsNoAttack, $01
00082DA0 E102                       	smpsAlterNote       $02
00082DA2 E701                       	dc.b	smpsNoAttack, $01
00082DA4 E108                       	smpsAlterNote       $08
00082DA6 E701                       	dc.b	smpsNoAttack, $01
00082DA8 E10C                       	smpsAlterNote       $0C
00082DAA E701                       	dc.b	smpsNoAttack, $01
00082DAC E108                       	smpsAlterNote       $08
00082DAE E701                       	dc.b	smpsNoAttack, $01
00082DB0 E105                       	smpsAlterNote       $05
00082DB2 E701                       	dc.b	smpsNoAttack, $01
00082DB4 E101                       	smpsAlterNote       $01
00082DB6 E701                       	dc.b	smpsNoAttack, $01
00082DB8 E105                       	smpsAlterNote       $05
00082DBA E701                       	dc.b	smpsNoAttack, $01
00082DBC E10B                       	smpsAlterNote       $0B
00082DBE E701                       	dc.b	smpsNoAttack, $01
00082DC0 E10C                       	smpsAlterNote       $0C
00082DC2 E701                       	dc.b	smpsNoAttack, $01
00082DC4 E108                       	smpsAlterNote       $08
00082DC6 E701                       	dc.b	smpsNoAttack, $01
00082DC8 E102                       	smpsAlterNote       $02
00082DCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082DCE E105                       	smpsAlterNote       $05
00082DD0 E701                       	dc.b	smpsNoAttack, $01
00082DD2 E10B                       	smpsAlterNote       $0B
00082DD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082DD8 E105                       	smpsAlterNote       $05
00082DDA E701                       	dc.b	smpsNoAttack, $01
00082DDC E102                       	smpsAlterNote       $02
00082DDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082DE2 E108                       	smpsAlterNote       $08
00082DE4 E701                       	dc.b	smpsNoAttack, $01
00082DE6 E10C                       	smpsAlterNote       $0C
00082DE8 E701                       	dc.b	smpsNoAttack, $01
00082DEA E10B                       	smpsAlterNote       $0B
00082DEC E701                       	dc.b	smpsNoAttack, $01
00082DEE E105                       	smpsAlterNote       $05
00082DF0 E701                       	dc.b	smpsNoAttack, $01
00082DF2 E101                       	smpsAlterNote       $01
00082DF4 E701                       	dc.b	smpsNoAttack, $01
00082DF6 E105                       	smpsAlterNote       $05
00082DF8 E701                       	dc.b	smpsNoAttack, $01
00082DFA E108                       	smpsAlterNote       $08
00082DFC E701                       	dc.b	smpsNoAttack, $01
00082DFE E10C                       	smpsAlterNote       $0C
00082E00 E701                       	dc.b	smpsNoAttack, $01
00082E02 E108                       	smpsAlterNote       $08
00082E04 E701                       	dc.b	smpsNoAttack, $01
00082E06 E102                       	smpsAlterNote       $02
00082E08 E701                       	dc.b	smpsNoAttack, $01
00082E0A E101                       	smpsAlterNote       $01
00082E0C E701                       	dc.b	smpsNoAttack, $01
00082E0E E105                       	smpsAlterNote       $05
00082E10 E701                       	dc.b	smpsNoAttack, $01
00082E12 E10B                       	smpsAlterNote       $0B
00082E14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082E18 E108                       	smpsAlterNote       $08
00082E1A E701                       	dc.b	smpsNoAttack, $01
00082E1C E102                       	smpsAlterNote       $02
00082E1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082E22 E108                       	smpsAlterNote       $08
00082E24 E701                       	dc.b	smpsNoAttack, $01
00082E26 E10B                       	smpsAlterNote       $0B
00082E28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082E2C E105                       	smpsAlterNote       $05
00082E2E E701                       	dc.b	smpsNoAttack, $01
00082E30 E102                       	smpsAlterNote       $02
00082E32 8001                       	dc.b	nRst, $01
00082E34 E107                       	smpsAlterNote       $07
00082E36 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00082E3A E108                       	smpsAlterNote       $08
00082E3C C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00082E40 E102                       	smpsAlterNote       $02
00082E42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082E46 E108                       	smpsAlterNote       $08
00082E48 E701                       	dc.b	smpsNoAttack, $01
00082E4A E10B                       	smpsAlterNote       $0B
00082E4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082E50 E105                       	smpsAlterNote       $05
00082E52 E701                       	dc.b	smpsNoAttack, $01
00082E54 E101                       	smpsAlterNote       $01
00082E56 E701                       	dc.b	smpsNoAttack, $01
00082E58 E102                       	smpsAlterNote       $02
00082E5A E701                       	dc.b	smpsNoAttack, $01
00082E5C E108                       	smpsAlterNote       $08
00082E5E E701                       	dc.b	smpsNoAttack, $01
00082E60 E10C                       	smpsAlterNote       $0C
00082E62 E701                       	dc.b	smpsNoAttack, $01
00082E64 E108                       	smpsAlterNote       $08
00082E66 E701                       	dc.b	smpsNoAttack, $01
00082E68 E105                       	smpsAlterNote       $05
00082E6A E701                       	dc.b	smpsNoAttack, $01
00082E6C E101                       	smpsAlterNote       $01
00082E6E E701                       	dc.b	smpsNoAttack, $01
00082E70 E105                       	smpsAlterNote       $05
00082E72 E701                       	dc.b	smpsNoAttack, $01
00082E74 E10B                       	smpsAlterNote       $0B
00082E76 E701                       	dc.b	smpsNoAttack, $01
00082E78 E10C                       	smpsAlterNote       $0C
00082E7A E701                       	dc.b	smpsNoAttack, $01
00082E7C E108                       	smpsAlterNote       $08
00082E7E E701                       	dc.b	smpsNoAttack, $01
00082E80 E102                       	smpsAlterNote       $02
00082E82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082E86 E105                       	smpsAlterNote       $05
00082E88 E701                       	dc.b	smpsNoAttack, $01
00082E8A E10B                       	smpsAlterNote       $0B
00082E8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082E90 E105                       	smpsAlterNote       $05
00082E92 E701                       	dc.b	smpsNoAttack, $01
00082E94 E102                       	smpsAlterNote       $02
00082E96 E701                       	dc.b	smpsNoAttack, $01
00082E98 E109                       	smpsAlterNote       $09
00082E9A C40A C207                  	dc.b	nG5, $0A, nF5, $07
00082E9E E108                       	smpsAlterNote       $08
00082EA0 C10D                       	dc.b	nE5, $0D
00082EA2 E105                       	smpsAlterNote       $05
00082EA4 E701                       	dc.b	smpsNoAttack, $01
00082EA6 E101                       	smpsAlterNote       $01
00082EA8 E701                       	dc.b	smpsNoAttack, $01
00082EAA E102                       	smpsAlterNote       $02
00082EAC E701                       	dc.b	smpsNoAttack, $01
00082EAE E108                       	smpsAlterNote       $08
00082EB0 E701                       	dc.b	smpsNoAttack, $01
00082EB2 E10C                       	smpsAlterNote       $0C
00082EB4 E701                       	dc.b	smpsNoAttack, $01
00082EB6 E108                       	smpsAlterNote       $08
00082EB8 E701                       	dc.b	smpsNoAttack, $01
00082EBA E105                       	smpsAlterNote       $05
00082EBC E701                       	dc.b	smpsNoAttack, $01
00082EBE E101                       	smpsAlterNote       $01
00082EC0 E701                       	dc.b	smpsNoAttack, $01
00082EC2 E105                       	smpsAlterNote       $05
00082EC4 E701                       	dc.b	smpsNoAttack, $01
00082EC6 E10B                       	smpsAlterNote       $0B
00082EC8 E701                       	dc.b	smpsNoAttack, $01
00082ECA E10C                       	smpsAlterNote       $0C
00082ECC E701                       	dc.b	smpsNoAttack, $01
00082ECE E108                       	smpsAlterNote       $08
00082ED0 E701                       	dc.b	smpsNoAttack, $01
00082ED2 E102                       	smpsAlterNote       $02
00082ED4 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00082EDC E10B                       	smpsAlterNote       $0B
00082EDE BA01 8001                  	dc.b	nA4, $01, nRst, $01
00082EE2 E10C                       	smpsAlterNote       $0C
00082EE4 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00082EE8 E10B                       	smpsAlterNote       $0B
00082EEA BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00082EF0 E107                       	smpsAlterNote       $07
00082EF2 BF03                       	dc.b	nD5, $03
00082EF4 E108                       	smpsAlterNote       $08
00082EF6 C103 8001                  	dc.b	nE5, $03, nRst, $01
00082EFA E109                       	smpsAlterNote       $09
00082EFC C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00082F02 E10B                       	smpsAlterNote       $0B
00082F04 C606 8001                  	dc.b	nA5, $06, nRst, $01
00082F08 E107                       	smpsAlterNote       $07
00082F0A BF02 8001                  	dc.b	nD5, $02, nRst, $01
00082F0E E106                       	smpsAlterNote       $06
00082F10 C90D                       	dc.b	nC6, $0D
00082F12 E103                       	smpsAlterNote       $03
00082F14 E701                       	dc.b	smpsNoAttack, $01
00082F16 E1FF                       	smpsAlterNote       $FF
00082F18 E701                       	dc.b	smpsNoAttack, $01
00082F1A E103                       	smpsAlterNote       $03
00082F1C E701                       	dc.b	smpsNoAttack, $01
00082F1E E109                       	smpsAlterNote       $09
00082F20 E701                       	dc.b	smpsNoAttack, $01
00082F22 E10A                       	smpsAlterNote       $0A
00082F24 E701                       	dc.b	smpsNoAttack, $01
00082F26 E106                       	smpsAlterNote       $06
00082F28 E701                       	dc.b	smpsNoAttack, $01
00082F2A E100                       	smpsAlterNote       $00
00082F2C E701                       	dc.b	smpsNoAttack, $01
00082F2E E10C                       	smpsAlterNote       $0C
00082F30 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00082F34 E10B                       	smpsAlterNote       $0B
00082F36 C603                       	dc.b	nA5, $03
00082F38 E109                       	smpsAlterNote       $09
00082F3A C403 8001                  	dc.b	nG5, $03, nRst, $01
00082F3E E10B                       	smpsAlterNote       $0B
00082F40 C60D                       	dc.b	nA5, $0D
00082F42 E105                       	smpsAlterNote       $05
00082F44 E701                       	dc.b	smpsNoAttack, $01
00082F46 E104                       	smpsAlterNote       $04
00082F48 E701                       	dc.b	smpsNoAttack, $01
00082F4A E108                       	smpsAlterNote       $08
00082F4C E701                       	dc.b	smpsNoAttack, $01
00082F4E E10E                       	smpsAlterNote       $0E
00082F50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082F54 E10B                       	smpsAlterNote       $0B
00082F56 E701                       	dc.b	smpsNoAttack, $01
00082F58 E105                       	smpsAlterNote       $05
00082F5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082F5E E10B                       	smpsAlterNote       $0B
00082F60 E701                       	dc.b	smpsNoAttack, $01
00082F62 E10E                       	smpsAlterNote       $0E
00082F64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082F68 E108                       	smpsAlterNote       $08
00082F6A E701                       	dc.b	smpsNoAttack, $01
00082F6C E104                       	smpsAlterNote       $04
00082F6E E701                       	dc.b	smpsNoAttack, $01
00082F70 E105                       	smpsAlterNote       $05
00082F72 E701                       	dc.b	smpsNoAttack, $01
00082F74 E10B                       	smpsAlterNote       $0B
00082F76 E701                       	dc.b	smpsNoAttack, $01
00082F78 E10F                       	smpsAlterNote       $0F
00082F7A E701                       	dc.b	smpsNoAttack, $01
00082F7C E10B                       	smpsAlterNote       $0B
00082F7E E701                       	dc.b	smpsNoAttack, $01
00082F80 E108                       	smpsAlterNote       $08
00082F82 E701                       	dc.b	smpsNoAttack, $01
00082F84 E104                       	smpsAlterNote       $04
00082F86 E701                       	dc.b	smpsNoAttack, $01
00082F88 E108                       	smpsAlterNote       $08
00082F8A E701                       	dc.b	smpsNoAttack, $01
00082F8C E10E                       	smpsAlterNote       $0E
00082F8E E701                       	dc.b	smpsNoAttack, $01
00082F90 E10F                       	smpsAlterNote       $0F
00082F92 E701                       	dc.b	smpsNoAttack, $01
00082F94 E10B                       	smpsAlterNote       $0B
00082F96 E701                       	dc.b	smpsNoAttack, $01
00082F98 E105                       	smpsAlterNote       $05
00082F9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082F9E E108                       	smpsAlterNote       $08
00082FA0 E701                       	dc.b	smpsNoAttack, $01
00082FA2 E10E                       	smpsAlterNote       $0E
00082FA4 E701                       	dc.b	smpsNoAttack, $01
00082FA6 E10F                       	smpsAlterNote       $0F
00082FA8 800F                       	dc.b	nRst, $0F
00082FAA E107                       	smpsAlterNote       $07
00082FAC BF02 8001                  	dc.b	nD5, $02, nRst, $01
00082FB0 E108                       	smpsAlterNote       $08
00082FB2 C103                       	dc.b	nE5, $03
00082FB4 E109                       	smpsAlterNote       $09
00082FB6 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00082FBC E10B                       	smpsAlterNote       $0B
00082FBE C607                       	dc.b	nA5, $07
00082FC0 E107                       	smpsAlterNote       $07
00082FC2 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00082FC6 E106                       	smpsAlterNote       $06
00082FC8 C90D                       	dc.b	nC6, $0D
00082FCA E107                       	smpsAlterNote       $07
00082FCC CB03 8001                  	dc.b	nD6, $03, nRst, $01
00082FD0 E10C                       	smpsAlterNote       $0C
00082FD2 C704                       	dc.b	nBb5, $04
00082FD4 E10B                       	smpsAlterNote       $0B
00082FD6 C604 8001                  	dc.b	nA5, $04, nRst, $01
00082FDA E109                       	smpsAlterNote       $09
00082FDC C404                       	dc.b	nG5, $04
00082FDE E10B                       	smpsAlterNote       $0B
00082FE0 C60D                       	dc.b	nA5, $0D
00082FE2 E108                       	smpsAlterNote       $08
00082FE4 E701                       	dc.b	smpsNoAttack, $01
00082FE6 E105                       	smpsAlterNote       $05
00082FE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00082FEC E10B                       	smpsAlterNote       $0B
00082FEE E701                       	dc.b	smpsNoAttack, $01
00082FF0 E10F                       	smpsAlterNote       $0F
00082FF2 E701                       	dc.b	smpsNoAttack, $01
00082FF4 E10E                       	smpsAlterNote       $0E
00082FF6 E701                       	dc.b	smpsNoAttack, $01
00082FF8 E108                       	smpsAlterNote       $08
00082FFA E701                       	dc.b	smpsNoAttack, $01
00082FFC E104                       	smpsAlterNote       $04
00082FFE E701                       	dc.b	smpsNoAttack, $01
00083000 E108                       	smpsAlterNote       $08
00083002 E701                       	dc.b	smpsNoAttack, $01
00083004 E10B                       	smpsAlterNote       $0B
00083006 E701                       	dc.b	smpsNoAttack, $01
00083008 E10F                       	smpsAlterNote       $0F
0008300A E701                       	dc.b	smpsNoAttack, $01
0008300C E10B                       	smpsAlterNote       $0B
0008300E E701                       	dc.b	smpsNoAttack, $01
00083010 E105                       	smpsAlterNote       $05
00083012 E701                       	dc.b	smpsNoAttack, $01
00083014 E104                       	smpsAlterNote       $04
00083016 E701                       	dc.b	smpsNoAttack, $01
00083018 E108                       	smpsAlterNote       $08
0008301A E701                       	dc.b	smpsNoAttack, $01
0008301C E10E                       	smpsAlterNote       $0E
0008301E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083022 E10B                       	smpsAlterNote       $0B
00083024 E701                       	dc.b	smpsNoAttack, $01
00083026 E105                       	smpsAlterNote       $05
00083028 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008302C E10B                       	smpsAlterNote       $0B
0008302E E701                       	dc.b	smpsNoAttack, $01
00083030 E10E                       	smpsAlterNote       $0E
00083032 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083036 E108                       	smpsAlterNote       $08
00083038 E701                       	dc.b	smpsNoAttack, $01
0008303A E105                       	smpsAlterNote       $05
0008303C 8001                       	dc.b	nRst, $01
0008303E E109                       	smpsAlterNote       $09
00083040 C401 8001                  	dc.b	nG5, $01, nRst, $01
00083044 E10B                       	smpsAlterNote       $0B
00083046 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008304E E109                       	smpsAlterNote       $09
00083050 C404                       	dc.b	nG5, $04
00083052 E10B                       	smpsAlterNote       $0B
00083054 C604 8001                  	dc.b	nA5, $04, nRst, $01
00083058 E107                       	smpsAlterNote       $07
0008305A BF0D                       	dc.b	nD5, $0D
0008305C E101                       	smpsAlterNote       $01
0008305E E701                       	dc.b	smpsNoAttack, $01
00083060 E100                       	smpsAlterNote       $00
00083062 E701                       	dc.b	smpsNoAttack, $01
00083064 E104                       	smpsAlterNote       $04
00083066 E701                       	dc.b	smpsNoAttack, $01
00083068 E10A                       	smpsAlterNote       $0A
0008306A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008306E E107                       	smpsAlterNote       $07
00083070 E701                       	dc.b	smpsNoAttack, $01
00083072 E101                       	smpsAlterNote       $01
00083074 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083078 E107                       	smpsAlterNote       $07
0008307A E701                       	dc.b	smpsNoAttack, $01
0008307C E10A                       	smpsAlterNote       $0A
0008307E E701                       	dc.b	smpsNoAttack, $01
00083080 E10B                       	smpsAlterNote       $0B
00083082 8001                       	dc.b	nRst, $01
00083084 E108                       	smpsAlterNote       $08
00083086 8001                       	dc.b	nRst, $01
00083088 E109                       	smpsAlterNote       $09
0008308A 8001 C401                  	dc.b	nRst, $01, nG5, $01
0008308E E10B                       	smpsAlterNote       $0B
00083090 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00083098 E108                       	smpsAlterNote       $08
0008309A CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008309E E109                       	smpsAlterNote       $09
000830A0 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000830A4 E108                       	smpsAlterNote       $08
000830A6 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000830AA E106                       	smpsAlterNote       $06
000830AC C903                       	dc.b	nC6, $03
000830AE E109                       	smpsAlterNote       $09
000830B0 C403 8001                  	dc.b	nG5, $03, nRst, $01
000830B4 E10C                       	smpsAlterNote       $0C
000830B6 C70D                       	dc.b	nBb5, $0D
000830B8 E109                       	smpsAlterNote       $09
000830BA E701                       	dc.b	smpsNoAttack, $01
000830BC E105                       	smpsAlterNote       $05
000830BE E701                       	dc.b	smpsNoAttack, $01
000830C0 E109                       	smpsAlterNote       $09
000830C2 E701                       	dc.b	smpsNoAttack, $01
000830C4 E10F                       	smpsAlterNote       $0F
000830C6 E701                       	dc.b	smpsNoAttack, $01
000830C8 E110                       	smpsAlterNote       $10
000830CA E701                       	dc.b	smpsNoAttack, $01
000830CC E10C                       	smpsAlterNote       $0C
000830CE E701                       	dc.b	smpsNoAttack, $01
000830D0 E106                       	smpsAlterNote       $06
000830D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000830D6 E109                       	smpsAlterNote       $09
000830D8 E701                       	dc.b	smpsNoAttack, $01
000830DA E10F                       	smpsAlterNote       $0F
000830DC E701                       	dc.b	smpsNoAttack, $01
000830DE E110                       	smpsAlterNote       $10
000830E0 8001                       	dc.b	nRst, $01
000830E2 E10B                       	smpsAlterNote       $0B
000830E4 C606 8001                  	dc.b	nA5, $06, nRst, $01
000830E8 E109                       	smpsAlterNote       $09
000830EA C40D                       	dc.b	nG5, $0D
000830EC E103                       	smpsAlterNote       $03
000830EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000830F2 E106                       	smpsAlterNote       $06
000830F4 E701                       	dc.b	smpsNoAttack, $01
000830F6 E10C                       	smpsAlterNote       $0C
000830F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000830FC E106                       	smpsAlterNote       $06
000830FE E701                       	dc.b	smpsNoAttack, $01
00083100 E103                       	smpsAlterNote       $03
00083102 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083106 E109                       	smpsAlterNote       $09
00083108 E701                       	dc.b	smpsNoAttack, $01
0008310A E10D                       	smpsAlterNote       $0D
0008310C E701                       	dc.b	smpsNoAttack, $01
0008310E E10C                       	smpsAlterNote       $0C
00083110 E701                       	dc.b	smpsNoAttack, $01
00083112 E106                       	smpsAlterNote       $06
00083114 E701                       	dc.b	smpsNoAttack, $01
00083116 E102                       	smpsAlterNote       $02
00083118 E701                       	dc.b	smpsNoAttack, $01
0008311A E103                       	smpsAlterNote       $03
0008311C 8001                       	dc.b	nRst, $01
0008311E E10B                       	smpsAlterNote       $0B
00083120 C60D                       	dc.b	nA5, $0D
00083122 E108                       	smpsAlterNote       $08
00083124 E701                       	dc.b	smpsNoAttack, $01
00083126 E104                       	smpsAlterNote       $04
00083128 E701                       	dc.b	smpsNoAttack, $01
0008312A E108                       	smpsAlterNote       $08
0008312C E701                       	dc.b	smpsNoAttack, $01
0008312E E10B                       	smpsAlterNote       $0B
00083130 E701                       	dc.b	smpsNoAttack, $01
00083132 E10F                       	smpsAlterNote       $0F
00083134 E701                       	dc.b	smpsNoAttack, $01
00083136 E10B                       	smpsAlterNote       $0B
00083138 E701                       	dc.b	smpsNoAttack, $01
0008313A E105                       	smpsAlterNote       $05
0008313C E701                       	dc.b	smpsNoAttack, $01
0008313E E104                       	smpsAlterNote       $04
00083140 E701                       	dc.b	smpsNoAttack, $01
00083142 E108                       	smpsAlterNote       $08
00083144 E701                       	dc.b	smpsNoAttack, $01
00083146 E10E                       	smpsAlterNote       $0E
00083148 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008314C E10B                       	smpsAlterNote       $0B
0008314E E701                       	dc.b	smpsNoAttack, $01
00083150 E105                       	smpsAlterNote       $05
00083152 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083156 E10C                       	smpsAlterNote       $0C
00083158 C70E                       	dc.b	nBb5, $0E
0008315A E106                       	smpsAlterNote       $06
0008315C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083160 E10C                       	smpsAlterNote       $0C
00083162 E701                       	dc.b	smpsNoAttack, $01
00083164 E10F                       	smpsAlterNote       $0F
00083166 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008316A E109                       	smpsAlterNote       $09
0008316C E701                       	dc.b	smpsNoAttack, $01
0008316E E105                       	smpsAlterNote       $05
00083170 E701                       	dc.b	smpsNoAttack, $01
00083172 E106                       	smpsAlterNote       $06
00083174 E701                       	dc.b	smpsNoAttack, $01
00083176 E10C                       	smpsAlterNote       $0C
00083178 E701                       	dc.b	smpsNoAttack, $01
0008317A E110                       	smpsAlterNote       $10
0008317C E701                       	dc.b	smpsNoAttack, $01
0008317E E10C                       	smpsAlterNote       $0C
00083180 E701                       	dc.b	smpsNoAttack, $01
00083182 E109                       	smpsAlterNote       $09
00083184 E701                       	dc.b	smpsNoAttack, $01
00083186 E105                       	smpsAlterNote       $05
00083188 E701                       	dc.b	smpsNoAttack, $01
0008318A E106                       	smpsAlterNote       $06
0008318C 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00083190 E107                       	smpsAlterNote       $07
00083192 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00083197 E108                       	smpsAlterNote       $08
00083199 CD0D                       	dc.b	nE6, $0D
0008319B E107                       	smpsAlterNote       $07
0008319D CB0D                       	dc.b	nD6, $0D
0008319F E104                       	smpsAlterNote       $04
000831A1 E701                       	dc.b	smpsNoAttack, $01
000831A3 E100                       	smpsAlterNote       $00
000831A5 E701                       	dc.b	smpsNoAttack, $01
000831A7 E101                       	smpsAlterNote       $01
000831A9 E701                       	dc.b	smpsNoAttack, $01
000831AB E107                       	smpsAlterNote       $07
000831AD E701                       	dc.b	smpsNoAttack, $01
000831AF E10B                       	smpsAlterNote       $0B
000831B1 E701                       	dc.b	smpsNoAttack, $01
000831B3 E107                       	smpsAlterNote       $07
000831B5 E701                       	dc.b	smpsNoAttack, $01
000831B7 E104                       	smpsAlterNote       $04
000831B9 E701                       	dc.b	smpsNoAttack, $01
000831BB E100                       	smpsAlterNote       $00
000831BD E701                       	dc.b	smpsNoAttack, $01
000831BF E104                       	smpsAlterNote       $04
000831C1 E701                       	dc.b	smpsNoAttack, $01
000831C3 E10A                       	smpsAlterNote       $0A
000831C5 E701                       	dc.b	smpsNoAttack, $01
000831C7 E10B                       	smpsAlterNote       $0B
000831C9 E701                       	dc.b	smpsNoAttack, $01
000831CB E108                       	smpsAlterNote       $08
000831CD CC0D                       	dc.b	nEb6, $0D
000831CF E105                       	smpsAlterNote       $05
000831D1 E701                       	dc.b	smpsNoAttack, $01
000831D3 E101                       	smpsAlterNote       $01
000831D5 E701                       	dc.b	smpsNoAttack, $01
000831D7 E102                       	smpsAlterNote       $02
000831D9 E701                       	dc.b	smpsNoAttack, $01
000831DB E108                       	smpsAlterNote       $08
000831DD E701                       	dc.b	smpsNoAttack, $01
000831DF E106                       	smpsAlterNote       $06
000831E1 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
000831ED 8001                       	dc.b	nRst, $01
000831EF E107                       	smpsAlterNote       $07
000831F1 CB0D                       	dc.b	nD6, $0D
000831F3 E104                       	smpsAlterNote       $04
000831F5 E701                       	dc.b	smpsNoAttack, $01
000831F7 E100                       	smpsAlterNote       $00
000831F9 E701                       	dc.b	smpsNoAttack, $01
000831FB E104                       	smpsAlterNote       $04
000831FD E701                       	dc.b	smpsNoAttack, $01
000831FF E107                       	smpsAlterNote       $07
00083201 E701                       	dc.b	smpsNoAttack, $01
00083203 E10B                       	smpsAlterNote       $0B
00083205 E701                       	dc.b	smpsNoAttack, $01
00083207 E107                       	smpsAlterNote       $07
00083209 E701                       	dc.b	smpsNoAttack, $01
0008320B E101                       	smpsAlterNote       $01
0008320D E701                       	dc.b	smpsNoAttack, $01
0008320F E100                       	smpsAlterNote       $00
00083211 E701                       	dc.b	smpsNoAttack, $01
00083213 E104                       	smpsAlterNote       $04
00083215 E701                       	dc.b	smpsNoAttack, $01
00083217 E10A                       	smpsAlterNote       $0A
00083219 E701                       	dc.b	smpsNoAttack, $01
0008321B E10B                       	smpsAlterNote       $0B
0008321D 8001                       	dc.b	nRst, $01
0008321F E109                       	smpsAlterNote       $09
00083221 CE0A                       	dc.b	nF6, $0A
00083223 E108                       	smpsAlterNote       $08
00083225 CC07                       	dc.b	nEb6, $07
00083227 E106                       	smpsAlterNote       $06
00083229 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00083235 E107                       	smpsAlterNote       $07
00083237 CB0D                       	dc.b	nD6, $0D
00083239 E101                       	smpsAlterNote       $01
0008323B E701                       	dc.b	smpsNoAttack, $01
0008323D E100                       	smpsAlterNote       $00
0008323F E701                       	dc.b	smpsNoAttack, $01
00083241 E104                       	smpsAlterNote       $04
00083243 E701                       	dc.b	smpsNoAttack, $01
00083245 E10A                       	smpsAlterNote       $0A
00083247 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008324B E107                       	smpsAlterNote       $07
0008324D E701                       	dc.b	smpsNoAttack, $01
0008324F E101                       	smpsAlterNote       $01
00083251 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083255 E107                       	smpsAlterNote       $07
00083257 E701                       	dc.b	smpsNoAttack, $01
00083259 E10A                       	smpsAlterNote       $0A
0008325B E701                       	dc.b	smpsNoAttack, $01
0008325D E10B                       	smpsAlterNote       $0B
0008325F 8001                       	dc.b	nRst, $01
00083261 E108                       	smpsAlterNote       $08
00083263 CC0D                       	dc.b	nEb6, $0D
00083265 E102                       	smpsAlterNote       $02
00083267 E701                       	dc.b	smpsNoAttack, $01
00083269 E101                       	smpsAlterNote       $01
0008326B E701                       	dc.b	smpsNoAttack, $01
0008326D E105                       	smpsAlterNote       $05
0008326F E701                       	dc.b	smpsNoAttack, $01
00083271 E108                       	smpsAlterNote       $08
00083273 8001                       	dc.b	nRst, $01
00083275 E106                       	smpsAlterNote       $06
00083277 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00083283 8001                       	dc.b	nRst, $01
00083285 E107                       	smpsAlterNote       $07
00083287 CB0D                       	dc.b	nD6, $0D
00083289 E101                       	smpsAlterNote       $01
0008328B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008328F E104                       	smpsAlterNote       $04
00083291 E701                       	dc.b	smpsNoAttack, $01
00083293 E10A                       	smpsAlterNote       $0A
00083295 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083299 E104                       	smpsAlterNote       $04
0008329B E701                       	dc.b	smpsNoAttack, $01
0008329D E101                       	smpsAlterNote       $01
0008329F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000832A3 E107                       	smpsAlterNote       $07
000832A5 E701                       	dc.b	smpsNoAttack, $01
000832A7 E10B                       	smpsAlterNote       $0B
000832A9 E701                       	dc.b	smpsNoAttack, $01
000832AB E10A                       	smpsAlterNote       $0A
000832AD E701                       	dc.b	smpsNoAttack, $01
000832AF E104                       	smpsAlterNote       $04
000832B1 E701                       	dc.b	smpsNoAttack, $01
000832B3 E100                       	smpsAlterNote       $00
000832B5 E701                       	dc.b	smpsNoAttack, $01
000832B7 E101                       	smpsAlterNote       $01
000832B9 801C                       	dc.b	nRst, $1C
000832BD E107                       	smpsAlterNote       $07
000832BF BF03 8001                  	dc.b	nD5, $03, nRst, $01
000832C3 E603                       	smpsAlterVol        $03
000832C5 F6F1 AD                    	smpsJump            music84_Jump03
000832C8                            
000832C8                            ; FM3 Data
000832C8                            music84_FM3:
000832C8 E0C0                       	smpsPan             panCenter, $00
000832CC E109                       	smpsAlterNote       $09
000832CE C203 8007                  	dc.b	nF5, $03, nRst, $07
000832D2 E108                       	smpsAlterNote       $08
000832D4 C103 800B                  	dc.b	nE5, $03, nRst, $0B
000832D8 E10B                       	smpsAlterNote       $0B
000832DA BA03 8006                  	dc.b	nA4, $03, nRst, $06
000832E0 E040                       	smpsPan             panRight, $00
000832E2 E110                       	smpsAlterNote       $10
000832E4 E6F9                       	smpsAlterVol        $F9
000832E6 C702 8001                  	dc.b	nBb5, $02, nRst, $01
000832EA E10F                       	smpsAlterNote       $0F
000832EC C603                       	dc.b	nA5, $03
000832EE E10D                       	smpsAlterNote       $0D
000832F0 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000832F6 E10C                       	smpsAlterNote       $0C
000832F8 C103 8001                  	dc.b	nE5, $03, nRst, $01
000832FC E10A                       	smpsAlterNote       $0A
000832FE BD02 8001                  	dc.b	nC5, $02, nRst, $01
00083302 E10F                       	smpsAlterNote       $0F
00083304 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00083308 E0C0                       	smpsPan             panCenter, $00
0008330C E109                       	smpsAlterNote       $09
0008330E E609                       	smpsAlterVol        $09
00083310 B603                       	dc.b	nF4, $03
00083312                            
00083312                            music84_Jump02:
00083312 E70A                       	dc.b	smpsNoAttack, $0A
00083314 E103                       	smpsAlterNote       $03
00083316 E701                       	dc.b	smpsNoAttack, $01
00083318 E102                       	smpsAlterNote       $02
0008331A E701                       	dc.b	smpsNoAttack, $01
0008331C E106                       	smpsAlterNote       $06
0008331E E701                       	dc.b	smpsNoAttack, $01
00083320 E10C                       	smpsAlterNote       $0C
00083322 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083326 E109                       	smpsAlterNote       $09
00083328 E701                       	dc.b	smpsNoAttack, $01
0008332A E103                       	smpsAlterNote       $03
0008332C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083330 E109                       	smpsAlterNote       $09
00083332 E701                       	dc.b	smpsNoAttack, $01
00083334 E10C                       	smpsAlterNote       $0C
00083336 E701                       	dc.b	smpsNoAttack, $01
00083338 E10D                       	smpsAlterNote       $0D
0008333A 8001                       	dc.b	nRst, $01
0008333C E109                       	smpsAlterNote       $09
0008333E B80D                       	dc.b	nG4, $0D
00083340 E103                       	smpsAlterNote       $03
00083342 E701                       	dc.b	smpsNoAttack, $01
00083344 E102                       	smpsAlterNote       $02
00083346 E701                       	dc.b	smpsNoAttack, $01
00083348 E106                       	smpsAlterNote       $06
0008334A E701                       	dc.b	smpsNoAttack, $01
0008334C E10C                       	smpsAlterNote       $0C
0008334E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083352 E109                       	smpsAlterNote       $09
00083354 E701                       	dc.b	smpsNoAttack, $01
00083356 E103                       	smpsAlterNote       $03
00083358 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008335C E109                       	smpsAlterNote       $09
0008335E E701                       	dc.b	smpsNoAttack, $01
00083360 E10C                       	smpsAlterNote       $0C
00083362 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083366 E106                       	smpsAlterNote       $06
00083368 E701                       	dc.b	smpsNoAttack, $01
0008336A E102                       	smpsAlterNote       $02
0008336C E701                       	dc.b	smpsNoAttack, $01
0008336E E103                       	smpsAlterNote       $03
00083370 E701                       	dc.b	smpsNoAttack, $01
00083372 E109                       	smpsAlterNote       $09
00083374 E701                       	dc.b	smpsNoAttack, $01
00083376 E10D                       	smpsAlterNote       $0D
00083378 E701                       	dc.b	smpsNoAttack, $01
0008337A E109                       	smpsAlterNote       $09
0008337C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00083380 E10B                       	smpsAlterNote       $0B
00083382 BA0D                       	dc.b	nA4, $0D
00083384 E105                       	smpsAlterNote       $05
00083386 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008338A E108                       	smpsAlterNote       $08
0008338C E701                       	dc.b	smpsNoAttack, $01
0008338E E10E                       	smpsAlterNote       $0E
00083390 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083394 E108                       	smpsAlterNote       $08
00083396 E701                       	dc.b	smpsNoAttack, $01
00083398 E104                       	smpsAlterNote       $04
0008339A E701                       	dc.b	smpsNoAttack, $01
0008339C E105                       	smpsAlterNote       $05
0008339E E701                       	dc.b	smpsNoAttack, $01
000833A0 E10B                       	smpsAlterNote       $0B
000833A2 E701                       	dc.b	smpsNoAttack, $01
000833A4 E10F                       	smpsAlterNote       $0F
000833A6 E701                       	dc.b	smpsNoAttack, $01
000833A8 E10B                       	smpsAlterNote       $0B
000833AA E701                       	dc.b	smpsNoAttack, $01
000833AC E108                       	smpsAlterNote       $08
000833AE E701                       	dc.b	smpsNoAttack, $01
000833B0 E104                       	smpsAlterNote       $04
000833B2 E701                       	dc.b	smpsNoAttack, $01
000833B4 E108                       	smpsAlterNote       $08
000833B6 E701                       	dc.b	smpsNoAttack, $01
000833B8 E10E                       	smpsAlterNote       $0E
000833BA E701                       	dc.b	smpsNoAttack, $01
000833BC E10F                       	smpsAlterNote       $0F
000833BE E701                       	dc.b	smpsNoAttack, $01
000833C0 E10B                       	smpsAlterNote       $0B
000833C2 E701                       	dc.b	smpsNoAttack, $01
000833C4 E105                       	smpsAlterNote       $05
000833C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000833CA E108                       	smpsAlterNote       $08
000833CC E701                       	dc.b	smpsNoAttack, $01
000833CE E10E                       	smpsAlterNote       $0E
000833D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000833D4 E108                       	smpsAlterNote       $08
000833D6 E701                       	dc.b	smpsNoAttack, $01
000833D8 E105                       	smpsAlterNote       $05
000833DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000833DE E10B                       	smpsAlterNote       $0B
000833E0 E701                       	dc.b	smpsNoAttack, $01
000833E2 E10F                       	smpsAlterNote       $0F
000833E4 E701                       	dc.b	smpsNoAttack, $01
000833E6 E10E                       	smpsAlterNote       $0E
000833E8 E701                       	dc.b	smpsNoAttack, $01
000833EA E108                       	smpsAlterNote       $08
000833EC E701                       	dc.b	smpsNoAttack, $01
000833EE E104                       	smpsAlterNote       $04
000833F0 E701                       	dc.b	smpsNoAttack, $01
000833F2 E105                       	smpsAlterNote       $05
000833F4 8001                       	dc.b	nRst, $01
000833F6 E108                       	smpsAlterNote       $08
000833F8 B50A                       	dc.b	nE4, $0A
000833FA E109                       	smpsAlterNote       $09
000833FC B60D                       	dc.b	nF4, $0D
000833FE E106                       	smpsAlterNote       $06
00083400 E701                       	dc.b	smpsNoAttack, $01
00083402 E103                       	smpsAlterNote       $03
00083404 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083408 E109                       	smpsAlterNote       $09
0008340A E701                       	dc.b	smpsNoAttack, $01
0008340C E10D                       	smpsAlterNote       $0D
0008340E E701                       	dc.b	smpsNoAttack, $01
00083410 E10C                       	smpsAlterNote       $0C
00083412 E701                       	dc.b	smpsNoAttack, $01
00083414 E106                       	smpsAlterNote       $06
00083416 E701                       	dc.b	smpsNoAttack, $01
00083418 E102                       	smpsAlterNote       $02
0008341A E701                       	dc.b	smpsNoAttack, $01
0008341C E106                       	smpsAlterNote       $06
0008341E E701                       	dc.b	smpsNoAttack, $01
00083420 E109                       	smpsAlterNote       $09
00083422 E701                       	dc.b	smpsNoAttack, $01
00083424 E10D                       	smpsAlterNote       $0D
00083426 E701                       	dc.b	smpsNoAttack, $01
00083428 E109                       	smpsAlterNote       $09
0008342A B80D                       	dc.b	nG4, $0D
0008342C E106                       	smpsAlterNote       $06
0008342E E701                       	dc.b	smpsNoAttack, $01
00083430 E103                       	smpsAlterNote       $03
00083432 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083436 E109                       	smpsAlterNote       $09
00083438 E701                       	dc.b	smpsNoAttack, $01
0008343A E10D                       	smpsAlterNote       $0D
0008343C E701                       	dc.b	smpsNoAttack, $01
0008343E E10C                       	smpsAlterNote       $0C
00083440 E701                       	dc.b	smpsNoAttack, $01
00083442 E106                       	smpsAlterNote       $06
00083444 E701                       	dc.b	smpsNoAttack, $01
00083446 E102                       	smpsAlterNote       $02
00083448 E701                       	dc.b	smpsNoAttack, $01
0008344A E106                       	smpsAlterNote       $06
0008344C E701                       	dc.b	smpsNoAttack, $01
0008344E E109                       	smpsAlterNote       $09
00083450 E701                       	dc.b	smpsNoAttack, $01
00083452 E10D                       	smpsAlterNote       $0D
00083454 E701                       	dc.b	smpsNoAttack, $01
00083456 E109                       	smpsAlterNote       $09
00083458 E701                       	dc.b	smpsNoAttack, $01
0008345A E103                       	smpsAlterNote       $03
0008345C E701                       	dc.b	smpsNoAttack, $01
0008345E E102                       	smpsAlterNote       $02
00083460 E701                       	dc.b	smpsNoAttack, $01
00083462 E106                       	smpsAlterNote       $06
00083464 E701                       	dc.b	smpsNoAttack, $01
00083466 E10C                       	smpsAlterNote       $0C
00083468 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008346C E109                       	smpsAlterNote       $09
0008346E E701                       	dc.b	smpsNoAttack, $01
00083470 E10B                       	smpsAlterNote       $0B
00083472 BA0D                       	dc.b	nA4, $0D
00083474 E108                       	smpsAlterNote       $08
00083476 E701                       	dc.b	smpsNoAttack, $01
00083478 E104                       	smpsAlterNote       $04
0008347A E701                       	dc.b	smpsNoAttack, $01
0008347C E108                       	smpsAlterNote       $08
0008347E E701                       	dc.b	smpsNoAttack, $01
00083480 E10B                       	smpsAlterNote       $0B
00083482 E701                       	dc.b	smpsNoAttack, $01
00083484 E10F                       	smpsAlterNote       $0F
00083486 E701                       	dc.b	smpsNoAttack, $01
00083488 E10B                       	smpsAlterNote       $0B
0008348A E701                       	dc.b	smpsNoAttack, $01
0008348C E105                       	smpsAlterNote       $05
0008348E E701                       	dc.b	smpsNoAttack, $01
00083490 E104                       	smpsAlterNote       $04
00083492 E701                       	dc.b	smpsNoAttack, $01
00083494 E108                       	smpsAlterNote       $08
00083496 E701                       	dc.b	smpsNoAttack, $01
00083498 E10E                       	smpsAlterNote       $0E
0008349A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008349E E10B                       	smpsAlterNote       $0B
000834A0 E701                       	dc.b	smpsNoAttack, $01
000834A2 E105                       	smpsAlterNote       $05
000834A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000834A8 E10B                       	smpsAlterNote       $0B
000834AA E701                       	dc.b	smpsNoAttack, $01
000834AC E10E                       	smpsAlterNote       $0E
000834AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000834B2 E108                       	smpsAlterNote       $08
000834B4 E701                       	dc.b	smpsNoAttack, $01
000834B6 E104                       	smpsAlterNote       $04
000834B8 E701                       	dc.b	smpsNoAttack, $01
000834BA E105                       	smpsAlterNote       $05
000834BC E701                       	dc.b	smpsNoAttack, $01
000834BE E10B                       	smpsAlterNote       $0B
000834C0 E701                       	dc.b	smpsNoAttack, $01
000834C2 E10F                       	smpsAlterNote       $0F
000834C4 E701                       	dc.b	smpsNoAttack, $01
000834C6 E10B                       	smpsAlterNote       $0B
000834C8 E701                       	dc.b	smpsNoAttack, $01
000834CA E108                       	smpsAlterNote       $08
000834CC E701                       	dc.b	smpsNoAttack, $01
000834CE E105                       	smpsAlterNote       $05
000834D0 8001                       	dc.b	nRst, $01
000834D2 E109                       	smpsAlterNote       $09
000834D4 B609 8001                  	dc.b	nF4, $09, nRst, $01
000834D8 E108                       	smpsAlterNote       $08
000834DA B506 8001                  	dc.b	nE4, $06, nRst, $01
000834DE E107                       	smpsAlterNote       $07
000834E0 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000834E4 E108                       	smpsAlterNote       $08
000834E6 B502 8001                  	dc.b	nE4, $02, nRst, $01
000834EA E109                       	smpsAlterNote       $09
000834EC B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
000834F2 E10B                       	smpsAlterNote       $0B
000834F4 BA0D                       	dc.b	nA4, $0D
000834F6 E108                       	smpsAlterNote       $08
000834F8 E701                       	dc.b	smpsNoAttack, $01
000834FA E104                       	smpsAlterNote       $04
000834FC E701                       	dc.b	smpsNoAttack, $01
000834FE E108                       	smpsAlterNote       $08
00083500 E701                       	dc.b	smpsNoAttack, $01
00083502 E10E                       	smpsAlterNote       $0E
00083504 E701                       	dc.b	smpsNoAttack, $01
00083506 E10F                       	smpsAlterNote       $0F
00083508 E701                       	dc.b	smpsNoAttack, $01
0008350A E10B                       	smpsAlterNote       $0B
0008350C E701                       	dc.b	smpsNoAttack, $01
0008350E E105                       	smpsAlterNote       $05
00083510 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083514 E108                       	smpsAlterNote       $08
00083516 E701                       	dc.b	smpsNoAttack, $01
00083518 E10E                       	smpsAlterNote       $0E
0008351A E701                       	dc.b	smpsNoAttack, $01
0008351C E10F                       	smpsAlterNote       $0F
0008351E 8001                       	dc.b	nRst, $01
00083520 E109                       	smpsAlterNote       $09
00083522 C20D                       	dc.b	nF5, $0D
00083524 E103                       	smpsAlterNote       $03
00083526 E701                       	dc.b	smpsNoAttack, $01
00083528 E102                       	smpsAlterNote       $02
0008352A E701                       	dc.b	smpsNoAttack, $01
0008352C E106                       	smpsAlterNote       $06
0008352E E701                       	dc.b	smpsNoAttack, $01
00083530 E10C                       	smpsAlterNote       $0C
00083532 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083536 E109                       	smpsAlterNote       $09
00083538 E701                       	dc.b	smpsNoAttack, $01
0008353A E103                       	smpsAlterNote       $03
0008353C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083540 E109                       	smpsAlterNote       $09
00083542 E701                       	dc.b	smpsNoAttack, $01
00083544 E10C                       	smpsAlterNote       $0C
00083546 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008354A E106                       	smpsAlterNote       $06
0008354C E701                       	dc.b	smpsNoAttack, $01
0008354E E102                       	smpsAlterNote       $02
00083550 E701                       	dc.b	smpsNoAttack, $01
00083552 E103                       	smpsAlterNote       $03
00083554 E701                       	dc.b	smpsNoAttack, $01
00083556 E109                       	smpsAlterNote       $09
00083558 E701                       	dc.b	smpsNoAttack, $01
0008355A E10D                       	smpsAlterNote       $0D
0008355C E701                       	dc.b	smpsNoAttack, $01
0008355E E109                       	smpsAlterNote       $09
00083560 E701                       	dc.b	smpsNoAttack, $01
00083562 E106                       	smpsAlterNote       $06
00083564 E701                       	dc.b	smpsNoAttack, $01
00083566 E102                       	smpsAlterNote       $02
00083568 E701                       	dc.b	smpsNoAttack, $01
0008356A E106                       	smpsAlterNote       $06
0008356C E701                       	dc.b	smpsNoAttack, $01
0008356E E10C                       	smpsAlterNote       $0C
00083570 E701                       	dc.b	smpsNoAttack, $01
00083572 E10D                       	smpsAlterNote       $0D
00083574 E701                       	dc.b	smpsNoAttack, $01
00083576 E109                       	smpsAlterNote       $09
00083578 E701                       	dc.b	smpsNoAttack, $01
0008357A E103                       	smpsAlterNote       $03
0008357C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083580 E106                       	smpsAlterNote       $06
00083582 E701                       	dc.b	smpsNoAttack, $01
00083584 E10C                       	smpsAlterNote       $0C
00083586 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008358A E106                       	smpsAlterNote       $06
0008358C E701                       	dc.b	smpsNoAttack, $01
0008358E E103                       	smpsAlterNote       $03
00083590 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083594 E109                       	smpsAlterNote       $09
00083596 E701                       	dc.b	smpsNoAttack, $01
00083598 E10D                       	smpsAlterNote       $0D
0008359A E701                       	dc.b	smpsNoAttack, $01
0008359C E10C                       	smpsAlterNote       $0C
0008359E E701                       	dc.b	smpsNoAttack, $01
000835A0 E106                       	smpsAlterNote       $06
000835A2 E701                       	dc.b	smpsNoAttack, $01
000835A4 E102                       	smpsAlterNote       $02
000835A6 E701                       	dc.b	smpsNoAttack, $01
000835A8 E106                       	smpsAlterNote       $06
000835AA E701                       	dc.b	smpsNoAttack, $01
000835AC E109                       	smpsAlterNote       $09
000835AE E701                       	dc.b	smpsNoAttack, $01
000835B0 E10D                       	smpsAlterNote       $0D
000835B2 E701                       	dc.b	smpsNoAttack, $01
000835B4 E109                       	smpsAlterNote       $09
000835B6 E701                       	dc.b	smpsNoAttack, $01
000835B8 E103                       	smpsAlterNote       $03
000835BA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000835BE E109                       	smpsAlterNote       $09
000835C0 C206                       	dc.b	nF5, $06
000835C2 E108                       	smpsAlterNote       $08
000835C4 C10E                       	dc.b	nE5, $0E
000835C6 E102                       	smpsAlterNote       $02
000835C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000835CC E108                       	smpsAlterNote       $08
000835CE E701                       	dc.b	smpsNoAttack, $01
000835D0 E10B                       	smpsAlterNote       $0B
000835D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000835D6 E105                       	smpsAlterNote       $05
000835D8 E701                       	dc.b	smpsNoAttack, $01
000835DA E101                       	smpsAlterNote       $01
000835DC E701                       	dc.b	smpsNoAttack, $01
000835DE E102                       	smpsAlterNote       $02
000835E0 E701                       	dc.b	smpsNoAttack, $01
000835E2 E108                       	smpsAlterNote       $08
000835E4 E701                       	dc.b	smpsNoAttack, $01
000835E6 E10C                       	smpsAlterNote       $0C
000835E8 E701                       	dc.b	smpsNoAttack, $01
000835EA E107                       	smpsAlterNote       $07
000835EC BF0E                       	dc.b	nD5, $0E
000835EE E101                       	smpsAlterNote       $01
000835F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000835F4 E107                       	smpsAlterNote       $07
000835F6 E701                       	dc.b	smpsNoAttack, $01
000835F8 E10A                       	smpsAlterNote       $0A
000835FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000835FE E104                       	smpsAlterNote       $04
00083600 E701                       	dc.b	smpsNoAttack, $01
00083602 E100                       	smpsAlterNote       $00
00083604 E701                       	dc.b	smpsNoAttack, $01
00083606 E104                       	smpsAlterNote       $04
00083608 E701                       	dc.b	smpsNoAttack, $01
0008360A E107                       	smpsAlterNote       $07
0008360C E701                       	dc.b	smpsNoAttack, $01
0008360E E10B                       	smpsAlterNote       $0B
00083610 E701                       	dc.b	smpsNoAttack, $01
00083612 E107                       	smpsAlterNote       $07
00083614 E701                       	dc.b	smpsNoAttack, $01
00083616 E101                       	smpsAlterNote       $01
00083618 E701                       	dc.b	smpsNoAttack, $01
0008361A E100                       	smpsAlterNote       $00
0008361C E701                       	dc.b	smpsNoAttack, $01
0008361E E104                       	smpsAlterNote       $04
00083620 E701                       	dc.b	smpsNoAttack, $01
00083622 E10A                       	smpsAlterNote       $0A
00083624 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083628 E107                       	smpsAlterNote       $07
0008362A E701                       	dc.b	smpsNoAttack, $01
0008362C E101                       	smpsAlterNote       $01
0008362E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083632 E107                       	smpsAlterNote       $07
00083634 E701                       	dc.b	smpsNoAttack, $01
00083636 E10A                       	smpsAlterNote       $0A
00083638 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008363C E104                       	smpsAlterNote       $04
0008363E E701                       	dc.b	smpsNoAttack, $01
00083640 E100                       	smpsAlterNote       $00
00083642 E701                       	dc.b	smpsNoAttack, $01
00083644 E101                       	smpsAlterNote       $01
00083646 E701                       	dc.b	smpsNoAttack, $01
00083648 E107                       	smpsAlterNote       $07
0008364A E701                       	dc.b	smpsNoAttack, $01
0008364C E10B                       	smpsAlterNote       $0B
0008364E E701                       	dc.b	smpsNoAttack, $01
00083650 E107                       	smpsAlterNote       $07
00083652 E701                       	dc.b	smpsNoAttack, $01
00083654 E104                       	smpsAlterNote       $04
00083656 E701                       	dc.b	smpsNoAttack, $01
00083658 E100                       	smpsAlterNote       $00
0008365A E701                       	dc.b	smpsNoAttack, $01
0008365C E104                       	smpsAlterNote       $04
0008365E E701                       	dc.b	smpsNoAttack, $01
00083660 E10A                       	smpsAlterNote       $0A
00083662 E701                       	dc.b	smpsNoAttack, $01
00083664 E10B                       	smpsAlterNote       $0B
00083666 E701                       	dc.b	smpsNoAttack, $01
00083668 E107                       	smpsAlterNote       $07
0008366A E701                       	dc.b	smpsNoAttack, $01
0008366C E101                       	smpsAlterNote       $01
0008366E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083672 E104                       	smpsAlterNote       $04
00083674 E701                       	dc.b	smpsNoAttack, $01
00083676 E10A                       	smpsAlterNote       $0A
00083678 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008367C E104                       	smpsAlterNote       $04
0008367E E701                       	dc.b	smpsNoAttack, $01
00083680 E101                       	smpsAlterNote       $01
00083682 E701                       	dc.b	smpsNoAttack, $01
00083686 E107                       	smpsAlterNote       $07
00083688 E6FF                       	smpsAlterVol        $FF
0008368A BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00083696 8004                       	dc.b	nRst, $04
0008369A E109                       	smpsAlterNote       $09
0008369C E602                       	smpsAlterVol        $02
0008369E B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
000836A4 E108                       	smpsAlterNote       $08
000836A6 B502 8001                  	dc.b	nE4, $02, nRst, $01
000836AA E109                       	smpsAlterNote       $09
000836AC B60D                       	dc.b	nF4, $0D
000836AE E106                       	smpsAlterNote       $06
000836B0 E701                       	dc.b	smpsNoAttack, $01
000836B2 E102                       	smpsAlterNote       $02
000836B4 E701                       	dc.b	smpsNoAttack, $01
000836B6 E106                       	smpsAlterNote       $06
000836B8 E701                       	dc.b	smpsNoAttack, $01
000836BA E109                       	smpsAlterNote       $09
000836BC E701                       	dc.b	smpsNoAttack, $01
000836BE E10D                       	smpsAlterNote       $0D
000836C0 E701                       	dc.b	smpsNoAttack, $01
000836C2 E109                       	smpsAlterNote       $09
000836C4 E701                       	dc.b	smpsNoAttack, $01
000836C6 E103                       	smpsAlterNote       $03
000836C8 E701                       	dc.b	smpsNoAttack, $01
000836CA E102                       	smpsAlterNote       $02
000836CC E701                       	dc.b	smpsNoAttack, $01
000836CE E106                       	smpsAlterNote       $06
000836D0 E701                       	dc.b	smpsNoAttack, $01
000836D2 E10C                       	smpsAlterNote       $0C
000836D4 E701                       	dc.b	smpsNoAttack, $01
000836D6 E10D                       	smpsAlterNote       $0D
000836D8 8001                       	dc.b	nRst, $01
000836DA E109                       	smpsAlterNote       $09
000836DC B80D                       	dc.b	nG4, $0D
000836DE E106                       	smpsAlterNote       $06
000836E0 E701                       	dc.b	smpsNoAttack, $01
000836E2 E102                       	smpsAlterNote       $02
000836E4 E701                       	dc.b	smpsNoAttack, $01
000836E6 E106                       	smpsAlterNote       $06
000836E8 E701                       	dc.b	smpsNoAttack, $01
000836EA E10C                       	smpsAlterNote       $0C
000836EC E701                       	dc.b	smpsNoAttack, $01
000836EE E10D                       	smpsAlterNote       $0D
000836F0 E701                       	dc.b	smpsNoAttack, $01
000836F2 E109                       	smpsAlterNote       $09
000836F4 E701                       	dc.b	smpsNoAttack, $01
000836F6 E103                       	smpsAlterNote       $03
000836F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000836FC E106                       	smpsAlterNote       $06
000836FE E701                       	dc.b	smpsNoAttack, $01
00083700 E10C                       	smpsAlterNote       $0C
00083702 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083706 E106                       	smpsAlterNote       $06
00083708 E701                       	dc.b	smpsNoAttack, $01
0008370A E103                       	smpsAlterNote       $03
0008370C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083710 E109                       	smpsAlterNote       $09
00083712 E701                       	dc.b	smpsNoAttack, $01
00083714 E10D                       	smpsAlterNote       $0D
00083716 E701                       	dc.b	smpsNoAttack, $01
00083718 E10C                       	smpsAlterNote       $0C
0008371A E701                       	dc.b	smpsNoAttack, $01
0008371C E109                       	smpsAlterNote       $09
0008371E 8001                       	dc.b	nRst, $01
00083720 E10B                       	smpsAlterNote       $0B
00083722 BA03                       	dc.b	nA4, $03
00083724 E10C                       	smpsAlterNote       $0C
00083726 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0008372A E10B                       	smpsAlterNote       $0B
0008372C BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00083732 E10C                       	smpsAlterNote       $0C
00083734 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00083738 E10B                       	smpsAlterNote       $0B
0008373A C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00083740 E10C                       	smpsAlterNote       $0C
00083742 D303                       	dc.b	nBb6, $03
00083744 E10B                       	smpsAlterNote       $0B
00083746 D20D                       	dc.b	nA6, $0D
00083748 E108                       	smpsAlterNote       $08
0008374A E701                       	dc.b	smpsNoAttack, $01
0008374C E104                       	smpsAlterNote       $04
0008374E E701                       	dc.b	smpsNoAttack, $01
00083750 E105                       	smpsAlterNote       $05
00083752 E701                       	dc.b	smpsNoAttack, $01
00083754 E10B                       	smpsAlterNote       $0B
00083756 E701                       	dc.b	smpsNoAttack, $01
00083758 E10F                       	smpsAlterNote       $0F
0008375A E701                       	dc.b	smpsNoAttack, $01
0008375C E10B                       	smpsAlterNote       $0B
0008375E E701                       	dc.b	smpsNoAttack, $01
00083760 E108                       	smpsAlterNote       $08
00083762 E701                       	dc.b	smpsNoAttack, $01
00083764 E104                       	smpsAlterNote       $04
00083766 E701                       	dc.b	smpsNoAttack, $01
00083768 E108                       	smpsAlterNote       $08
0008376A E701                       	dc.b	smpsNoAttack, $01
0008376C E10E                       	smpsAlterNote       $0E
0008376E E701                       	dc.b	smpsNoAttack, $01
00083770 E10F                       	smpsAlterNote       $0F
00083772 E701                       	dc.b	smpsNoAttack, $01
00083774 E10B                       	smpsAlterNote       $0B
00083776 E701                       	dc.b	smpsNoAttack, $01
00083778 E105                       	smpsAlterNote       $05
0008377A E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00083780 E109                       	smpsAlterNote       $09
00083782 CE07                       	dc.b	nF6, $07
00083784 E108                       	smpsAlterNote       $08
00083786 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008378A E109                       	smpsAlterNote       $09
0008378C CE03 8001                  	dc.b	nF6, $03, nRst, $01
00083790 E108                       	smpsAlterNote       $08
00083792 CC0D                       	dc.b	nEb6, $0D
00083794 E102                       	smpsAlterNote       $02
00083796 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008379A E108                       	smpsAlterNote       $08
0008379C E701                       	dc.b	smpsNoAttack, $01
0008379E E10B                       	smpsAlterNote       $0B
000837A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000837A4 E105                       	smpsAlterNote       $05
000837A6 E701                       	dc.b	smpsNoAttack, $01
000837A8 E101                       	smpsAlterNote       $01
000837AA E701                       	dc.b	smpsNoAttack, $01
000837AC E102                       	smpsAlterNote       $02
000837AE E701                       	dc.b	smpsNoAttack, $01
000837B0 E108                       	smpsAlterNote       $08
000837B2 E701                       	dc.b	smpsNoAttack, $01
000837B4 E10C                       	smpsAlterNote       $0C
000837B6 E701                       	dc.b	smpsNoAttack, $01
000837B8 E108                       	smpsAlterNote       $08
000837BA E701                       	dc.b	smpsNoAttack, $01
000837BC E105                       	smpsAlterNote       $05
000837BE E701                       	dc.b	smpsNoAttack, $01
000837C0 E101                       	smpsAlterNote       $01
000837C2 E701                       	dc.b	smpsNoAttack, $01
000837C4 E105                       	smpsAlterNote       $05
000837C6 E701                       	dc.b	smpsNoAttack, $01
000837C8 E10B                       	smpsAlterNote       $0B
000837CA E701                       	dc.b	smpsNoAttack, $01
000837CC E10C                       	smpsAlterNote       $0C
000837CE E701                       	dc.b	smpsNoAttack, $01
000837D0 E108                       	smpsAlterNote       $08
000837D2 E701                       	dc.b	smpsNoAttack, $01
000837D4 E107                       	smpsAlterNote       $07
000837D6 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
000837E0 E10B                       	smpsAlterNote       $0B
000837E2 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000837EC E109                       	smpsAlterNote       $09
000837EE C203                       	dc.b	nF5, $03
000837F0 E108                       	smpsAlterNote       $08
000837F2 C103 8001                  	dc.b	nE5, $03, nRst, $01
000837F6 E109                       	smpsAlterNote       $09
000837F8 C20D                       	dc.b	nF5, $0D
000837FA E108                       	smpsAlterNote       $08
000837FC C10E                       	dc.b	nE5, $0E
000837FE E107                       	smpsAlterNote       $07
00083800 BF0D                       	dc.b	nD5, $0D
00083802 E104                       	smpsAlterNote       $04
00083804 E701                       	dc.b	smpsNoAttack, $01
00083806 E100                       	smpsAlterNote       $00
00083808 E701                       	dc.b	smpsNoAttack, $01
0008380A E104                       	smpsAlterNote       $04
0008380C E701                       	dc.b	smpsNoAttack, $01
0008380E E107                       	smpsAlterNote       $07
00083810 E701                       	dc.b	smpsNoAttack, $01
00083812 E10B                       	smpsAlterNote       $0B
00083814 E701                       	dc.b	smpsNoAttack, $01
00083816 E107                       	smpsAlterNote       $07
00083818 E701                       	dc.b	smpsNoAttack, $01
0008381A E101                       	smpsAlterNote       $01
0008381C E701                       	dc.b	smpsNoAttack, $01
0008381E E100                       	smpsAlterNote       $00
00083820 E701                       	dc.b	smpsNoAttack, $01
00083822 E104                       	smpsAlterNote       $04
00083824 E701                       	dc.b	smpsNoAttack, $01
00083826 E10A                       	smpsAlterNote       $0A
00083828 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008382C E107                       	smpsAlterNote       $07
0008382E E701                       	dc.b	smpsNoAttack, $01
00083830 E101                       	smpsAlterNote       $01
00083832 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083836 E107                       	smpsAlterNote       $07
00083838 E701                       	dc.b	smpsNoAttack, $01
0008383A E10A                       	smpsAlterNote       $0A
0008383C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083840 E104                       	smpsAlterNote       $04
00083842 E701                       	dc.b	smpsNoAttack, $01
00083844 E100                       	smpsAlterNote       $00
00083846 E701                       	dc.b	smpsNoAttack, $01
00083848 E101                       	smpsAlterNote       $01
0008384A E701                       	dc.b	smpsNoAttack, $01
0008384C E107                       	smpsAlterNote       $07
0008384E E701                       	dc.b	smpsNoAttack, $01
00083850 E10B                       	smpsAlterNote       $0B
00083852 E701                       	dc.b	smpsNoAttack, $01
00083854 E107                       	smpsAlterNote       $07
00083856 E701                       	dc.b	smpsNoAttack, $01
00083858 E104                       	smpsAlterNote       $04
0008385A E701                       	dc.b	smpsNoAttack, $01
0008385C E100                       	smpsAlterNote       $00
0008385E E701                       	dc.b	smpsNoAttack, $01
00083860 E104                       	smpsAlterNote       $04
00083862 E701                       	dc.b	smpsNoAttack, $01
00083864 E10A                       	smpsAlterNote       $0A
00083866 E701                       	dc.b	smpsNoAttack, $01
00083868 E10B                       	smpsAlterNote       $0B
0008386A E701                       	dc.b	smpsNoAttack, $01
0008386C E107                       	smpsAlterNote       $07
0008386E E701                       	dc.b	smpsNoAttack, $01
00083870 E101                       	smpsAlterNote       $01
00083872 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083876 E104                       	smpsAlterNote       $04
00083878 E701                       	dc.b	smpsNoAttack, $01
0008387A E10A                       	smpsAlterNote       $0A
0008387C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083880 E104                       	smpsAlterNote       $04
00083882 E701                       	dc.b	smpsNoAttack, $01
00083884 E101                       	smpsAlterNote       $01
00083886 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008388A E107                       	smpsAlterNote       $07
0008388C E701                       	dc.b	smpsNoAttack, $01
0008388E E10B                       	smpsAlterNote       $0B
00083890 E701                       	dc.b	smpsNoAttack, $01
00083892 E10A                       	smpsAlterNote       $0A
00083894 E701                       	dc.b	smpsNoAttack, $01
00083896 E104                       	smpsAlterNote       $04
00083898 E701                       	dc.b	smpsNoAttack, $01
0008389A E100                       	smpsAlterNote       $00
0008389C E701                       	dc.b	smpsNoAttack, $01
0008389E E104                       	smpsAlterNote       $04
000838A0 E701                       	dc.b	smpsNoAttack, $01
000838A2 E107                       	smpsAlterNote       $07
000838A4 E701                       	dc.b	smpsNoAttack, $01
000838A6 E10B                       	smpsAlterNote       $0B
000838A8 E701                       	dc.b	smpsNoAttack, $01
000838AA E107                       	smpsAlterNote       $07
000838AC E701                       	dc.b	smpsNoAttack, $01
000838AE E101                       	smpsAlterNote       $01
000838B0 E701                       	dc.b	smpsNoAttack, $01
000838B2 E100                       	smpsAlterNote       $00
000838B4 E701                       	dc.b	smpsNoAttack, $01
000838B6 E104                       	smpsAlterNote       $04
000838B8 E701                       	dc.b	smpsNoAttack, $01
000838BA E10A                       	smpsAlterNote       $0A
000838BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000838C0 E107                       	smpsAlterNote       $07
000838C2 E701                       	dc.b	smpsNoAttack, $01
000838C4 E101                       	smpsAlterNote       $01
000838C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000838CA E107                       	smpsAlterNote       $07
000838CC E701                       	dc.b	smpsNoAttack, $01
000838CE E10A                       	smpsAlterNote       $0A
000838D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000838D4 E104                       	smpsAlterNote       $04
000838D6 E701                       	dc.b	smpsNoAttack, $01
000838D8 E100                       	smpsAlterNote       $00
000838DA E701                       	dc.b	smpsNoAttack, $01
000838DC E101                       	smpsAlterNote       $01
000838DE E701                       	dc.b	smpsNoAttack, $01
000838E0 E107                       	smpsAlterNote       $07
000838E2 E701                       	dc.b	smpsNoAttack, $01
000838E4 E10B                       	smpsAlterNote       $0B
000838E6 E701                       	dc.b	smpsNoAttack, $01
000838E8 E107                       	smpsAlterNote       $07
000838EA E701                       	dc.b	smpsNoAttack, $01
000838EC E104                       	smpsAlterNote       $04
000838EE E701                       	dc.b	smpsNoAttack, $01
000838F0 E100                       	smpsAlterNote       $00
000838F2 E701                       	dc.b	smpsNoAttack, $01
000838F4 E101                       	smpsAlterNote       $01
000838F6 8001                       	dc.b	nRst, $01
000838F8 E109                       	smpsAlterNote       $09
000838FA C20D                       	dc.b	nF5, $0D
000838FC E106                       	smpsAlterNote       $06
000838FE E701                       	dc.b	smpsNoAttack, $01
00083900 E102                       	smpsAlterNote       $02
00083902 E701                       	dc.b	smpsNoAttack, $01
00083904 E106                       	smpsAlterNote       $06
00083906 E701                       	dc.b	smpsNoAttack, $01
00083908 E10C                       	smpsAlterNote       $0C
0008390A E701                       	dc.b	smpsNoAttack, $01
0008390C E10D                       	smpsAlterNote       $0D
0008390E E701                       	dc.b	smpsNoAttack, $01
00083910 E109                       	smpsAlterNote       $09
00083912 E701                       	dc.b	smpsNoAttack, $01
00083914 E103                       	smpsAlterNote       $03
00083916 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008391A E106                       	smpsAlterNote       $06
0008391C E701                       	dc.b	smpsNoAttack, $01
0008391E E10C                       	smpsAlterNote       $0C
00083920 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083924 E106                       	smpsAlterNote       $06
00083926 E701                       	dc.b	smpsNoAttack, $01
00083928 E103                       	smpsAlterNote       $03
0008392A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008392E E109                       	smpsAlterNote       $09
00083930 E701                       	dc.b	smpsNoAttack, $01
00083932 E10D                       	smpsAlterNote       $0D
00083934 E701                       	dc.b	smpsNoAttack, $01
00083936 E10C                       	smpsAlterNote       $0C
00083938 E701                       	dc.b	smpsNoAttack, $01
0008393A E109                       	smpsAlterNote       $09
0008393C 8001                       	dc.b	nRst, $01
0008393E E108                       	smpsAlterNote       $08
00083940 C10D                       	dc.b	nE5, $0D
00083942 E109                       	smpsAlterNote       $09
00083944 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00083948 E108                       	smpsAlterNote       $08
0008394A C10D                       	dc.b	nE5, $0D
0008394C E102                       	smpsAlterNote       $02
0008394E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083952 E105                       	smpsAlterNote       $05
00083954 E701                       	dc.b	smpsNoAttack, $01
00083956 E108                       	smpsAlterNote       $08
00083958 8001                       	dc.b	nRst, $01
0008395A E107                       	smpsAlterNote       $07
0008395C BF0D                       	dc.b	nD5, $0D
0008395E E108                       	smpsAlterNote       $08
00083960 C107                       	dc.b	nE5, $07
00083962 E109                       	smpsAlterNote       $09
00083964 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0008396A E10B                       	smpsAlterNote       $0B
0008396C C603                       	dc.b	nA5, $03
0008396E E10C                       	smpsAlterNote       $0C
00083970 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00083976 E10B                       	smpsAlterNote       $0B
00083978 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
0008397E E109                       	smpsAlterNote       $09
00083980 D003                       	dc.b	nG6, $03
00083982 E108                       	smpsAlterNote       $08
00083984 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00083988 E10B                       	smpsAlterNote       $0B
0008398A C601 8001                  	dc.b	nA5, $01, nRst, $01
0008398E E108                       	smpsAlterNote       $08
00083990 C102                       	dc.b	nE5, $02
00083994 E10C                       	smpsAlterNote       $0C
00083996 E6FB                       	smpsAlterVol        $FB
00083998 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
000839A4 8001                       	dc.b	nRst, $01
000839A6 E10B                       	smpsAlterNote       $0B
000839A8 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000839B0 E107                       	smpsAlterNote       $07
000839B2 A706 8001                  	dc.b	nD3, $06, nRst, $01
000839B6 E10B                       	smpsAlterNote       $0B
000839B8 A203                       	dc.b	nA2, $03
000839BA E109                       	smpsAlterNote       $09
000839BC AA03 8001                  	dc.b	nF3, $03, nRst, $01
000839C0 E108                       	smpsAlterNote       $08
000839C2 A906                       	dc.b	nE3, $06
000839C4 E107                       	smpsAlterNote       $07
000839C6 A703 8001                  	dc.b	nD3, $03, nRst, $01
000839CA E106                       	smpsAlterNote       $06
000839CC A503                       	dc.b	nC3, $03
000839CE E10C                       	smpsAlterNote       $0C
000839D0 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000839D4 E10B                       	smpsAlterNote       $0B
000839D6 A203 8004                  	dc.b	nA2, $03, nRst, $04
000839DA E11B                       	smpsAlterNote       $1B
000839DC C401                       	dc.b	nG5, $01
000839DE E1F4                       	smpsAlterNote       $F4
000839E0 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000839E3 E106                       	smpsAlterNote       $06
000839E5 E701                       	dc.b	smpsNoAttack, $01
000839E7 E10F                       	smpsAlterNote       $0F
000839E9 E701                       	dc.b	smpsNoAttack, $01
000839EB E1E4                       	smpsAlterNote       $E4
000839ED E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000839F0 E1F6                       	smpsAlterNote       $F6
000839F2 E701                       	dc.b	smpsNoAttack, $01
000839F4 E108                       	smpsAlterNote       $08
000839F6 E701                       	dc.b	smpsNoAttack, $01
000839F8 E10B                       	smpsAlterNote       $0B
000839FA E706                       	dc.b	smpsNoAttack, $06
000839FC E105                       	smpsAlterNote       $05
000839FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A02 E108                       	smpsAlterNote       $08
00083A04 E701                       	dc.b	smpsNoAttack, $01
00083A06 E10E                       	smpsAlterNote       $0E
00083A08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A0C E108                       	smpsAlterNote       $08
00083A0E E701                       	dc.b	smpsNoAttack, $01
00083A10 E105                       	smpsAlterNote       $05
00083A12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A16 E10B                       	smpsAlterNote       $0B
00083A18 E701                       	dc.b	smpsNoAttack, $01
00083A1A E10F                       	smpsAlterNote       $0F
00083A1C E701                       	dc.b	smpsNoAttack, $01
00083A1E E10E                       	smpsAlterNote       $0E
00083A20 E701                       	dc.b	smpsNoAttack, $01
00083A22 E108                       	smpsAlterNote       $08
00083A24 E701                       	dc.b	smpsNoAttack, $01
00083A26 E104                       	smpsAlterNote       $04
00083A28 E701                       	dc.b	smpsNoAttack, $01
00083A2A E108                       	smpsAlterNote       $08
00083A2C E701                       	dc.b	smpsNoAttack, $01
00083A2E E10B                       	smpsAlterNote       $0B
00083A30 E701                       	dc.b	smpsNoAttack, $01
00083A32 E10F                       	smpsAlterNote       $0F
00083A34 E701                       	dc.b	smpsNoAttack, $01
00083A36 E10B                       	smpsAlterNote       $0B
00083A38 E701                       	dc.b	smpsNoAttack, $01
00083A3A E105                       	smpsAlterNote       $05
00083A3C E701                       	dc.b	smpsNoAttack, $01
00083A3E E104                       	smpsAlterNote       $04
00083A40 E701                       	dc.b	smpsNoAttack, $01
00083A42 E108                       	smpsAlterNote       $08
00083A44 E701                       	dc.b	smpsNoAttack, $01
00083A46 E10E                       	smpsAlterNote       $0E
00083A48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A4C E10B                       	smpsAlterNote       $0B
00083A4E E701                       	dc.b	smpsNoAttack, $01
00083A50 E105                       	smpsAlterNote       $05
00083A52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083A56 E10B                       	smpsAlterNote       $0B
00083A58 E701                       	dc.b	smpsNoAttack, $01
00083A5A E10E                       	smpsAlterNote       $0E
00083A5C E701                       	dc.b	smpsNoAttack, $01
00083A5E E10F                       	smpsAlterNote       $0F
00083A60 8001                       	dc.b	nRst, $01
00083A62 E109                       	smpsAlterNote       $09
00083A64 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00083A6A E108                       	smpsAlterNote       $08
00083A6C C101 8001                  	dc.b	nE5, $01, nRst, $01
00083A70 E109                       	smpsAlterNote       $09
00083A72 C202                       	dc.b	nF5, $02
00083A74 E108                       	smpsAlterNote       $08
00083A76 C102                       	dc.b	nE5, $02
00083A78 E107                       	smpsAlterNote       $07
00083A7A BF02 8001                  	dc.b	nD5, $02, nRst, $01
00083A7E E108                       	smpsAlterNote       $08
00083A80 C101 8001                  	dc.b	nE5, $01, nRst, $01
00083A84 E107                       	smpsAlterNote       $07
00083A86 BF02                       	dc.b	nD5, $02
00083A88 E106                       	smpsAlterNote       $06
00083A8A BD02 8001                  	dc.b	nC5, $02, nRst, $01
00083A8E E107                       	smpsAlterNote       $07
00083A90 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00083A94 E106                       	smpsAlterNote       $06
00083A96 BD02                       	dc.b	nC5, $02
00083A98 E10C                       	smpsAlterNote       $0C
00083A9A BB02                       	dc.b	nBb4, $02
00083A9C E106                       	smpsAlterNote       $06
00083A9E BD02 8001                  	dc.b	nC5, $02, nRst, $01
00083AA2 E10C                       	smpsAlterNote       $0C
00083AA4 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00083AA8 E10B                       	smpsAlterNote       $0B
00083AAA BA02                       	dc.b	nA4, $02
00083AAC E10C                       	smpsAlterNote       $0C
00083AAE BB02                       	dc.b	nBb4, $02
00083AB0 E10B                       	smpsAlterNote       $0B
00083AB2 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00083ABC E108                       	smpsAlterNote       $08
00083ABE B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
00083AC6 E107                       	smpsAlterNote       $07
00083AC8 BE02                       	dc.b	nCs5, $02
00083ACA E10B                       	smpsAlterNote       $0B
00083ACC BA02                       	dc.b	nA4, $02
00083ACE E109                       	smpsAlterNote       $09
00083AD0 B802 8001                  	dc.b	nG4, $02, nRst, $01
00083AD4 E108                       	smpsAlterNote       $08
00083AD6 B501 8001                  	dc.b	nE4, $01, nRst, $01
00083ADA E10B                       	smpsAlterNote       $0B
00083ADC AE02                       	dc.b	nA3, $02
00083ADE E10C                       	smpsAlterNote       $0C
00083AE0 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
00083AEC E10B                       	smpsAlterNote       $0B
00083AEE A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00083AF6 E107                       	smpsAlterNote       $07
00083AF8 A706 8001                  	dc.b	nD3, $06, nRst, $01
00083AFC E10B                       	smpsAlterNote       $0B
00083AFE A203                       	dc.b	nA2, $03
00083B00 E109                       	smpsAlterNote       $09
00083B02 AA03 8001                  	dc.b	nF3, $03, nRst, $01
00083B06 E108                       	smpsAlterNote       $08
00083B08 A906 8001                  	dc.b	nE3, $06, nRst, $01
00083B0C E107                       	smpsAlterNote       $07
00083B0E A702 8001                  	dc.b	nD3, $02, nRst, $01
00083B12 E106                       	smpsAlterNote       $06
00083B14 A503                       	dc.b	nC3, $03
00083B16 E10C                       	smpsAlterNote       $0C
00083B18 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00083B1E E107                       	smpsAlterNote       $07
00083B20 B20D                       	dc.b	nCs4, $0D
00083B22 E104                       	smpsAlterNote       $04
00083B24 E701                       	dc.b	smpsNoAttack, $01
00083B26 E100                       	smpsAlterNote       $00
00083B28 E701                       	dc.b	smpsNoAttack, $01
00083B2A E104                       	smpsAlterNote       $04
00083B2C E701                       	dc.b	smpsNoAttack, $01
00083B2E E10A                       	smpsAlterNote       $0A
00083B30 E701                       	dc.b	smpsNoAttack, $01
00083B32 E10B                       	smpsAlterNote       $0B
00083B34 E701                       	dc.b	smpsNoAttack, $01
00083B36 E107                       	smpsAlterNote       $07
00083B38 E701                       	dc.b	smpsNoAttack, $01
00083B3A E101                       	smpsAlterNote       $01
00083B3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B40 E104                       	smpsAlterNote       $04
00083B42 E701                       	dc.b	smpsNoAttack, $01
00083B44 E10A                       	smpsAlterNote       $0A
00083B46 E701                       	dc.b	smpsNoAttack, $01
00083B48 E10B                       	smpsAlterNote       $0B
00083B4A 8001                       	dc.b	nRst, $01
00083B4C E107                       	smpsAlterNote       $07
00083B4E B30D                       	dc.b	nD4, $0D
00083B50 E104                       	smpsAlterNote       $04
00083B52 E701                       	dc.b	smpsNoAttack, $01
00083B54 E100                       	smpsAlterNote       $00
00083B56 E701                       	dc.b	smpsNoAttack, $01
00083B58 E104                       	smpsAlterNote       $04
00083B5A E701                       	dc.b	smpsNoAttack, $01
00083B5C E10A                       	smpsAlterNote       $0A
00083B5E E701                       	dc.b	smpsNoAttack, $01
00083B60 E10B                       	smpsAlterNote       $0B
00083B62 E701                       	dc.b	smpsNoAttack, $01
00083B64 E107                       	smpsAlterNote       $07
00083B66 E701                       	dc.b	smpsNoAttack, $01
00083B68 E101                       	smpsAlterNote       $01
00083B6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B6E E104                       	smpsAlterNote       $04
00083B70 E701                       	dc.b	smpsNoAttack, $01
00083B72 E10A                       	smpsAlterNote       $0A
00083B74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B78 E104                       	smpsAlterNote       $04
00083B7A E701                       	dc.b	smpsNoAttack, $01
00083B7C E101                       	smpsAlterNote       $01
00083B7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B82 E107                       	smpsAlterNote       $07
00083B84 E701                       	dc.b	smpsNoAttack, $01
00083B86 E10B                       	smpsAlterNote       $0B
00083B88 E701                       	dc.b	smpsNoAttack, $01
00083B8A E10A                       	smpsAlterNote       $0A
00083B8C E701                       	dc.b	smpsNoAttack, $01
00083B8E E107                       	smpsAlterNote       $07
00083B90 8001                       	dc.b	nRst, $01
00083B92 E108                       	smpsAlterNote       $08
00083B94 B50D                       	dc.b	nE4, $0D
00083B96 E102                       	smpsAlterNote       $02
00083B98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B9C E105                       	smpsAlterNote       $05
00083B9E E701                       	dc.b	smpsNoAttack, $01
00083BA0 E10B                       	smpsAlterNote       $0B
00083BA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083BA6 E105                       	smpsAlterNote       $05
00083BA8 E701                       	dc.b	smpsNoAttack, $01
00083BAA E102                       	smpsAlterNote       $02
00083BAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083BB0 E108                       	smpsAlterNote       $08
00083BB2 E701                       	dc.b	smpsNoAttack, $01
00083BB4 E10C                       	smpsAlterNote       $0C
00083BB6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00083BBA E107                       	smpsAlterNote       $07
00083BBC B30D                       	dc.b	nD4, $0D
00083BBE E101                       	smpsAlterNote       $01
00083BC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083BC4 E104                       	smpsAlterNote       $04
00083BC6 E701                       	dc.b	smpsNoAttack, $01
00083BC8 E10A                       	smpsAlterNote       $0A
00083BCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083BCE E104                       	smpsAlterNote       $04
00083BD0 E701                       	dc.b	smpsNoAttack, $01
00083BD2 E101                       	smpsAlterNote       $01
00083BD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083BD8 E107                       	smpsAlterNote       $07
00083BDA E701                       	dc.b	smpsNoAttack, $01
00083BDC E10B                       	smpsAlterNote       $0B
00083BDE E701                       	dc.b	smpsNoAttack, $01
00083BE0 E10A                       	smpsAlterNote       $0A
00083BE2 E701                       	dc.b	smpsNoAttack, $01
00083BE4 E104                       	smpsAlterNote       $04
00083BE6 E701                       	dc.b	smpsNoAttack, $01
00083BE8 E100                       	smpsAlterNote       $00
00083BEA E701                       	dc.b	smpsNoAttack, $01
00083BEC E104                       	smpsAlterNote       $04
00083BEE E701                       	dc.b	smpsNoAttack, $01
00083BF0 E107                       	smpsAlterNote       $07
00083BF2 E701                       	dc.b	smpsNoAttack, $01
00083BF4 E10B                       	smpsAlterNote       $0B
00083BF6 E701                       	dc.b	smpsNoAttack, $01
00083BF8 E107                       	smpsAlterNote       $07
00083BFA E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
00083BFE E101                       	smpsAlterNote       $01
00083C00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C04 E107                       	smpsAlterNote       $07
00083C06 E701                       	dc.b	smpsNoAttack, $01
00083C08 E10A                       	smpsAlterNote       $0A
00083C0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C0E E104                       	smpsAlterNote       $04
00083C10 E701                       	dc.b	smpsNoAttack, $01
00083C12 E100                       	smpsAlterNote       $00
00083C14 E701                       	dc.b	smpsNoAttack, $01
00083C16 E101                       	smpsAlterNote       $01
00083C18 E701                       	dc.b	smpsNoAttack, $01
00083C1A E107                       	smpsAlterNote       $07
00083C1C E701                       	dc.b	smpsNoAttack, $01
00083C1E E10B                       	smpsAlterNote       $0B
00083C20 E701                       	dc.b	smpsNoAttack, $01
00083C22 E107                       	smpsAlterNote       $07
00083C24 B30E                       	dc.b	nD4, $0E
00083C26 E101                       	smpsAlterNote       $01
00083C28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C2C E107                       	smpsAlterNote       $07
00083C2E E701                       	dc.b	smpsNoAttack, $01
00083C30 E10A                       	smpsAlterNote       $0A
00083C32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C36 E104                       	smpsAlterNote       $04
00083C38 E701                       	dc.b	smpsNoAttack, $01
00083C3A E100                       	smpsAlterNote       $00
00083C3C E701                       	dc.b	smpsNoAttack, $01
00083C3E E101                       	smpsAlterNote       $01
00083C40 E701                       	dc.b	smpsNoAttack, $01
00083C42 E107                       	smpsAlterNote       $07
00083C44 E701                       	dc.b	smpsNoAttack, $01
00083C46 E10B                       	smpsAlterNote       $0B
00083C48 E701                       	dc.b	smpsNoAttack, $01
00083C4A E107                       	smpsAlterNote       $07
00083C4C E701                       	dc.b	smpsNoAttack, $01
00083C4E E104                       	smpsAlterNote       $04
00083C50 E701                       	dc.b	smpsNoAttack, $01
00083C52 E100                       	smpsAlterNote       $00
00083C54 E701                       	dc.b	smpsNoAttack, $01
00083C56 E104                       	smpsAlterNote       $04
00083C58 E701                       	dc.b	smpsNoAttack, $01
00083C5A E10A                       	smpsAlterNote       $0A
00083C5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C60 E107                       	smpsAlterNote       $07
00083C62 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00083C66 E104                       	smpsAlterNote       $04
00083C68 E701                       	dc.b	smpsNoAttack, $01
00083C6A E100                       	smpsAlterNote       $00
00083C6C E701                       	dc.b	smpsNoAttack, $01
00083C6E E101                       	smpsAlterNote       $01
00083C70 E701                       	dc.b	smpsNoAttack, $01
00083C72 E107                       	smpsAlterNote       $07
00083C74 E701                       	dc.b	smpsNoAttack, $01
00083C76 E10B                       	smpsAlterNote       $0B
00083C78 E701                       	dc.b	smpsNoAttack, $01
00083C7A E107                       	smpsAlterNote       $07
00083C7C E701                       	dc.b	smpsNoAttack, $01
00083C7E E104                       	smpsAlterNote       $04
00083C80 E701                       	dc.b	smpsNoAttack, $01
00083C82 E100                       	smpsAlterNote       $00
00083C84 E701                       	dc.b	smpsNoAttack, $01
00083C86 E104                       	smpsAlterNote       $04
00083C88 E701                       	dc.b	smpsNoAttack, $01
00083C8A E10A                       	smpsAlterNote       $0A
00083C8C E701                       	dc.b	smpsNoAttack, $01
00083C8E E10B                       	smpsAlterNote       $0B
00083C90 E701                       	dc.b	smpsNoAttack, $01
00083C94 E6FF                       	smpsAlterVol        $FF
00083C96 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
00083CA2 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
00083CAA E109                       	smpsAlterNote       $09
00083CAC E601                       	smpsAlterVol        $01
00083CAE B60D                       	dc.b	nF4, $0D
00083CB0 E106                       	smpsAlterNote       $06
00083CB2 E701                       	dc.b	smpsNoAttack, $01
00083CB4 E102                       	smpsAlterNote       $02
00083CB6 E701                       	dc.b	smpsNoAttack, $01
00083CB8 E106                       	smpsAlterNote       $06
00083CBA E701                       	dc.b	smpsNoAttack, $01
00083CBC E109                       	smpsAlterNote       $09
00083CBE E701                       	dc.b	smpsNoAttack, $01
00083CC0 E10D                       	smpsAlterNote       $0D
00083CC2 E701                       	dc.b	smpsNoAttack, $01
00083CC4 E109                       	smpsAlterNote       $09
00083CC6 E701                       	dc.b	smpsNoAttack, $01
00083CC8 E103                       	smpsAlterNote       $03
00083CCA E701                       	dc.b	smpsNoAttack, $01
00083CCC E102                       	smpsAlterNote       $02
00083CCE E701                       	dc.b	smpsNoAttack, $01
00083CD0 E106                       	smpsAlterNote       $06
00083CD2 E701                       	dc.b	smpsNoAttack, $01
00083CD4 E10C                       	smpsAlterNote       $0C
00083CD6 E701                       	dc.b	smpsNoAttack, $01
00083CD8 E10D                       	smpsAlterNote       $0D
00083CDA 8001                       	dc.b	nRst, $01
00083CDC E109                       	smpsAlterNote       $09
00083CDE B80D                       	dc.b	nG4, $0D
00083CE0 E106                       	smpsAlterNote       $06
00083CE2 E701                       	dc.b	smpsNoAttack, $01
00083CE4 E102                       	smpsAlterNote       $02
00083CE6 E701                       	dc.b	smpsNoAttack, $01
00083CE8 E106                       	smpsAlterNote       $06
00083CEA E701                       	dc.b	smpsNoAttack, $01
00083CEC E109                       	smpsAlterNote       $09
00083CEE E701                       	dc.b	smpsNoAttack, $01
00083CF0 E10D                       	smpsAlterNote       $0D
00083CF2 E701                       	dc.b	smpsNoAttack, $01
00083CF4 E109                       	smpsAlterNote       $09
00083CF6 E701                       	dc.b	smpsNoAttack, $01
00083CF8 E103                       	smpsAlterNote       $03
00083CFA E701                       	dc.b	smpsNoAttack, $01
00083CFC E102                       	smpsAlterNote       $02
00083CFE E701                       	dc.b	smpsNoAttack, $01
00083D00 E106                       	smpsAlterNote       $06
00083D02 E701                       	dc.b	smpsNoAttack, $01
00083D04 E10C                       	smpsAlterNote       $0C
00083D06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083D0A E106                       	smpsAlterNote       $06
00083D0C E701                       	dc.b	smpsNoAttack, $01
00083D0E E103                       	smpsAlterNote       $03
00083D10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083D14 E109                       	smpsAlterNote       $09
00083D16 E701                       	dc.b	smpsNoAttack, $01
00083D18 E10D                       	smpsAlterNote       $0D
00083D1A E701                       	dc.b	smpsNoAttack, $01
00083D1C E10C                       	smpsAlterNote       $0C
00083D1E E701                       	dc.b	smpsNoAttack, $01
00083D20 E109                       	smpsAlterNote       $09
00083D22 8001                       	dc.b	nRst, $01
00083D24 E10B                       	smpsAlterNote       $0B
00083D26 BA0D                       	dc.b	nA4, $0D
00083D28 E105                       	smpsAlterNote       $05
00083D2A E701                       	dc.b	smpsNoAttack, $01
00083D2C E104                       	smpsAlterNote       $04
00083D2E E701                       	dc.b	smpsNoAttack, $01
00083D30 E108                       	smpsAlterNote       $08
00083D32 E701                       	dc.b	smpsNoAttack, $01
00083D34 E10E                       	smpsAlterNote       $0E
00083D36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083D3A E10B                       	smpsAlterNote       $0B
00083D3C E701                       	dc.b	smpsNoAttack, $01
00083D3E E105                       	smpsAlterNote       $05
00083D40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083D44 E10B                       	smpsAlterNote       $0B
00083D46 E701                       	dc.b	smpsNoAttack, $01
00083D48 E10E                       	smpsAlterNote       $0E
00083D4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083D4E E108                       	smpsAlterNote       $08
00083D50 E701                       	dc.b	smpsNoAttack, $01
00083D52 E104                       	smpsAlterNote       $04
00083D54 E701                       	dc.b	smpsNoAttack, $01
00083D56 E105                       	smpsAlterNote       $05
00083D58 E701                       	dc.b	smpsNoAttack, $01
00083D5A E10B                       	smpsAlterNote       $0B
00083D5C E701                       	dc.b	smpsNoAttack, $01
00083D5E E10F                       	smpsAlterNote       $0F
00083D60 E701                       	dc.b	smpsNoAttack, $01
00083D62 E10B                       	smpsAlterNote       $0B
00083D64 E701                       	dc.b	smpsNoAttack, $01
00083D66 E108                       	smpsAlterNote       $08
00083D68 E701                       	dc.b	smpsNoAttack, $01
00083D6A E104                       	smpsAlterNote       $04
00083D6C E701                       	dc.b	smpsNoAttack, $01
00083D6E E108                       	smpsAlterNote       $08
00083D70 E701                       	dc.b	smpsNoAttack, $01
00083D72 E10E                       	smpsAlterNote       $0E
00083D74 E701                       	dc.b	smpsNoAttack, $01
00083D76 E10F                       	smpsAlterNote       $0F
00083D78 E701                       	dc.b	smpsNoAttack, $01
00083D7A E10B                       	smpsAlterNote       $0B
00083D7C E701                       	dc.b	smpsNoAttack, $01
00083D7E E105                       	smpsAlterNote       $05
00083D80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083D84 E108                       	smpsAlterNote       $08
00083D86 E701                       	dc.b	smpsNoAttack, $01
00083D88 E10E                       	smpsAlterNote       $0E
00083D8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083D8E E108                       	smpsAlterNote       $08
00083D90 E701                       	dc.b	smpsNoAttack, $01
00083D92 E105                       	smpsAlterNote       $05
00083D94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083D98 E108                       	smpsAlterNote       $08
00083D9A B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00083D9E E109                       	smpsAlterNote       $09
00083DA0 B60D                       	dc.b	nF4, $0D
00083DA2 E103                       	smpsAlterNote       $03
00083DA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083DA8 E106                       	smpsAlterNote       $06
00083DAA E701                       	dc.b	smpsNoAttack, $01
00083DAC E10C                       	smpsAlterNote       $0C
00083DAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083DB2 E106                       	smpsAlterNote       $06
00083DB4 E701                       	dc.b	smpsNoAttack, $01
00083DB6 E103                       	smpsAlterNote       $03
00083DB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083DBC E109                       	smpsAlterNote       $09
00083DBE E701                       	dc.b	smpsNoAttack, $01
00083DC0 E10D                       	smpsAlterNote       $0D
00083DC2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00083DC6 E109                       	smpsAlterNote       $09
00083DC8 B80D                       	dc.b	nG4, $0D
00083DCA E103                       	smpsAlterNote       $03
00083DCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083DD0 E109                       	smpsAlterNote       $09
00083DD2 E701                       	dc.b	smpsNoAttack, $01
00083DD4 E10C                       	smpsAlterNote       $0C
00083DD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083DDA E106                       	smpsAlterNote       $06
00083DDC E701                       	dc.b	smpsNoAttack, $01
00083DDE E102                       	smpsAlterNote       $02
00083DE0 E701                       	dc.b	smpsNoAttack, $01
00083DE2 E103                       	smpsAlterNote       $03
00083DE4 E701                       	dc.b	smpsNoAttack, $01
00083DE6 E109                       	smpsAlterNote       $09
00083DE8 E701                       	dc.b	smpsNoAttack, $01
00083DEA E10D                       	smpsAlterNote       $0D
00083DEC E701                       	dc.b	smpsNoAttack, $01
00083DEE E109                       	smpsAlterNote       $09
00083DF0 E701                       	dc.b	smpsNoAttack, $01
00083DF2 E106                       	smpsAlterNote       $06
00083DF4 E701                       	dc.b	smpsNoAttack, $01
00083DF6 E102                       	smpsAlterNote       $02
00083DF8 E701                       	dc.b	smpsNoAttack, $01
00083DFA E106                       	smpsAlterNote       $06
00083DFC E701                       	dc.b	smpsNoAttack, $01
00083DFE E10C                       	smpsAlterNote       $0C
00083E00 E701                       	dc.b	smpsNoAttack, $01
00083E02 E10D                       	smpsAlterNote       $0D
00083E04 E701                       	dc.b	smpsNoAttack, $01
00083E06 E109                       	smpsAlterNote       $09
00083E08 E701                       	dc.b	smpsNoAttack, $01
00083E0A E10B                       	smpsAlterNote       $0B
00083E0C BA0D                       	dc.b	nA4, $0D
00083E0E E108                       	smpsAlterNote       $08
00083E10 E701                       	dc.b	smpsNoAttack, $01
00083E12 E105                       	smpsAlterNote       $05
00083E14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083E18 E10B                       	smpsAlterNote       $0B
00083E1A E701                       	dc.b	smpsNoAttack, $01
00083E1C E10F                       	smpsAlterNote       $0F
00083E1E E701                       	dc.b	smpsNoAttack, $01
00083E20 E10E                       	smpsAlterNote       $0E
00083E22 E701                       	dc.b	smpsNoAttack, $01
00083E24 E108                       	smpsAlterNote       $08
00083E26 E701                       	dc.b	smpsNoAttack, $01
00083E28 E104                       	smpsAlterNote       $04
00083E2A E701                       	dc.b	smpsNoAttack, $01
00083E2C E108                       	smpsAlterNote       $08
00083E2E E701                       	dc.b	smpsNoAttack, $01
00083E30 E10B                       	smpsAlterNote       $0B
00083E32 E701                       	dc.b	smpsNoAttack, $01
00083E34 E10F                       	smpsAlterNote       $0F
00083E36 E701                       	dc.b	smpsNoAttack, $01
00083E38 E10B                       	smpsAlterNote       $0B
00083E3A E701                       	dc.b	smpsNoAttack, $01
00083E3C E105                       	smpsAlterNote       $05
00083E3E E701                       	dc.b	smpsNoAttack, $01
00083E40 E104                       	smpsAlterNote       $04
00083E42 E701                       	dc.b	smpsNoAttack, $01
00083E44 E108                       	smpsAlterNote       $08
00083E46 E701                       	dc.b	smpsNoAttack, $01
00083E48 E10E                       	smpsAlterNote       $0E
00083E4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083E4E E10B                       	smpsAlterNote       $0B
00083E50 E701                       	dc.b	smpsNoAttack, $01
00083E52 E105                       	smpsAlterNote       $05
00083E54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083E58 E10B                       	smpsAlterNote       $0B
00083E5A E701                       	dc.b	smpsNoAttack, $01
00083E5C E10E                       	smpsAlterNote       $0E
00083E5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083E62 E108                       	smpsAlterNote       $08
00083E64 E701                       	dc.b	smpsNoAttack, $01
00083E66 E105                       	smpsAlterNote       $05
00083E68 8001                       	dc.b	nRst, $01
00083E6A E109                       	smpsAlterNote       $09
00083E6C B60A                       	dc.b	nF4, $0A
00083E6E E108                       	smpsAlterNote       $08
00083E70 B507                       	dc.b	nE4, $07
00083E72 E107                       	smpsAlterNote       $07
00083E74 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00083E78 E108                       	smpsAlterNote       $08
00083E7A B503                       	dc.b	nE4, $03
00083E7C E109                       	smpsAlterNote       $09
00083E7E B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00083E86 E10B                       	smpsAlterNote       $0B
00083E88 BA0D                       	dc.b	nA4, $0D
00083E8A E108                       	smpsAlterNote       $08
00083E8C E701                       	dc.b	smpsNoAttack, $01
00083E8E E104                       	smpsAlterNote       $04
00083E90 E701                       	dc.b	smpsNoAttack, $01
00083E92 E108                       	smpsAlterNote       $08
00083E94 E701                       	dc.b	smpsNoAttack, $01
00083E96 E10B                       	smpsAlterNote       $0B
00083E98 E701                       	dc.b	smpsNoAttack, $01
00083E9A E10F                       	smpsAlterNote       $0F
00083E9C E701                       	dc.b	smpsNoAttack, $01
00083E9E E10B                       	smpsAlterNote       $0B
00083EA0 E701                       	dc.b	smpsNoAttack, $01
00083EA2 E105                       	smpsAlterNote       $05
00083EA4 E701                       	dc.b	smpsNoAttack, $01
00083EA6 E104                       	smpsAlterNote       $04
00083EA8 E701                       	dc.b	smpsNoAttack, $01
00083EAA E108                       	smpsAlterNote       $08
00083EAC E701                       	dc.b	smpsNoAttack, $01
00083EAE E10E                       	smpsAlterNote       $0E
00083EB0 E701                       	dc.b	smpsNoAttack, $01
00083EB2 E10F                       	smpsAlterNote       $0F
00083EB4 8001                       	dc.b	nRst, $01
00083EB6 E109                       	smpsAlterNote       $09
00083EB8 C20D                       	dc.b	nF5, $0D
00083EBA E106                       	smpsAlterNote       $06
00083EBC E701                       	dc.b	smpsNoAttack, $01
00083EBE E102                       	smpsAlterNote       $02
00083EC0 E701                       	dc.b	smpsNoAttack, $01
00083EC2 E106                       	smpsAlterNote       $06
00083EC4 E701                       	dc.b	smpsNoAttack, $01
00083EC6 E109                       	smpsAlterNote       $09
00083EC8 E701                       	dc.b	smpsNoAttack, $01
00083ECA E10D                       	smpsAlterNote       $0D
00083ECC E701                       	dc.b	smpsNoAttack, $01
00083ECE E109                       	smpsAlterNote       $09
00083ED0 E701                       	dc.b	smpsNoAttack, $01
00083ED2 E103                       	smpsAlterNote       $03
00083ED4 E701                       	dc.b	smpsNoAttack, $01
00083ED6 E102                       	smpsAlterNote       $02
00083ED8 E701                       	dc.b	smpsNoAttack, $01
00083EDA E106                       	smpsAlterNote       $06
00083EDC E701                       	dc.b	smpsNoAttack, $01
00083EDE E10C                       	smpsAlterNote       $0C
00083EE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083EE4 E109                       	smpsAlterNote       $09
00083EE6 E701                       	dc.b	smpsNoAttack, $01
00083EE8 E103                       	smpsAlterNote       $03
00083EEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083EEE E109                       	smpsAlterNote       $09
00083EF0 E701                       	dc.b	smpsNoAttack, $01
00083EF2 E10C                       	smpsAlterNote       $0C
00083EF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083EF8 E106                       	smpsAlterNote       $06
00083EFA E701                       	dc.b	smpsNoAttack, $01
00083EFC E102                       	smpsAlterNote       $02
00083EFE E701                       	dc.b	smpsNoAttack, $01
00083F00 E103                       	smpsAlterNote       $03
00083F02 E701                       	dc.b	smpsNoAttack, $01
00083F04 E109                       	smpsAlterNote       $09
00083F06 E701                       	dc.b	smpsNoAttack, $01
00083F08 E10D                       	smpsAlterNote       $0D
00083F0A E701                       	dc.b	smpsNoAttack, $01
00083F0C E109                       	smpsAlterNote       $09
00083F0E E701                       	dc.b	smpsNoAttack, $01
00083F10 E106                       	smpsAlterNote       $06
00083F12 E701                       	dc.b	smpsNoAttack, $01
00083F14 E102                       	smpsAlterNote       $02
00083F16 E701                       	dc.b	smpsNoAttack, $01
00083F18 E106                       	smpsAlterNote       $06
00083F1A E701                       	dc.b	smpsNoAttack, $01
00083F1C E10C                       	smpsAlterNote       $0C
00083F1E E701                       	dc.b	smpsNoAttack, $01
00083F20 E10D                       	smpsAlterNote       $0D
00083F22 E701                       	dc.b	smpsNoAttack, $01
00083F24 E109                       	smpsAlterNote       $09
00083F26 E701                       	dc.b	smpsNoAttack, $01
00083F28 E103                       	smpsAlterNote       $03
00083F2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F2E E106                       	smpsAlterNote       $06
00083F30 E701                       	dc.b	smpsNoAttack, $01
00083F32 E10C                       	smpsAlterNote       $0C
00083F34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F38 E106                       	smpsAlterNote       $06
00083F3A E701                       	dc.b	smpsNoAttack, $01
00083F3C E103                       	smpsAlterNote       $03
00083F3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F42 E109                       	smpsAlterNote       $09
00083F44 E701                       	dc.b	smpsNoAttack, $01
00083F46 E10D                       	smpsAlterNote       $0D
00083F48 E701                       	dc.b	smpsNoAttack, $01
00083F4A E10C                       	smpsAlterNote       $0C
00083F4C E701                       	dc.b	smpsNoAttack, $01
00083F4E E106                       	smpsAlterNote       $06
00083F50 E701                       	dc.b	smpsNoAttack, $01
00083F52 E103                       	smpsAlterNote       $03
00083F54 8001                       	dc.b	nRst, $01
00083F56 E109                       	smpsAlterNote       $09
00083F58 C206 8001                  	dc.b	nF5, $06, nRst, $01
00083F5E E10C                       	smpsAlterNote       $0C
00083F60 E601                       	smpsAlterVol        $01
00083F62 BB0D                       	dc.b	nBb4, $0D
00083F64 E106                       	smpsAlterNote       $06
00083F66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F6A E109                       	smpsAlterNote       $09
00083F6C E701                       	dc.b	smpsNoAttack, $01
00083F6E E10F                       	smpsAlterNote       $0F
00083F70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F74 E109                       	smpsAlterNote       $09
00083F76 E701                       	dc.b	smpsNoAttack, $01
00083F78 E106                       	smpsAlterNote       $06
00083F7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F7E E10C                       	smpsAlterNote       $0C
00083F80 E701                       	dc.b	smpsNoAttack, $01
00083F82 E110                       	smpsAlterNote       $10
00083F84 E701                       	dc.b	smpsNoAttack, $01
00083F86 E10F                       	smpsAlterNote       $0F
00083F88 E701                       	dc.b	smpsNoAttack, $01
00083F8A E109                       	smpsAlterNote       $09
00083F8C E701                       	dc.b	smpsNoAttack, $01
00083F8E E105                       	smpsAlterNote       $05
00083F90 E701                       	dc.b	smpsNoAttack, $01
00083F92 E106                       	smpsAlterNote       $06
00083F94 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00083F98 E103                       	smpsAlterNote       $03
00083F9A E701                       	dc.b	smpsNoAttack, $01
00083F9C E1FF                       	smpsAlterNote       $FF
00083F9E E701                       	dc.b	smpsNoAttack, $01
00083FA0 E103                       	smpsAlterNote       $03
00083FA2 E701                       	dc.b	smpsNoAttack, $01
00083FA4 E106                       	smpsAlterNote       $06
00083FA6 E701                       	dc.b	smpsNoAttack, $01
00083FA8 E10A                       	smpsAlterNote       $0A
00083FAA E701                       	dc.b	smpsNoAttack, $01
00083FAC E106                       	smpsAlterNote       $06
00083FAE E701                       	dc.b	smpsNoAttack, $01
00083FB0 E100                       	smpsAlterNote       $00
00083FB2 E701                       	dc.b	smpsNoAttack, $01
00083FB4 E1FF                       	smpsAlterNote       $FF
00083FB6 E701                       	dc.b	smpsNoAttack, $01
00083FB8 E103                       	smpsAlterNote       $03
00083FBA E701                       	dc.b	smpsNoAttack, $01
00083FBC E109                       	smpsAlterNote       $09
00083FBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083FC2 E106                       	smpsAlterNote       $06
00083FC4 E701                       	dc.b	smpsNoAttack, $01
00083FC6 E100                       	smpsAlterNote       $00
00083FC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083FCC E107                       	smpsAlterNote       $07
00083FCE BF0E                       	dc.b	nD5, $0E
00083FD0 E101                       	smpsAlterNote       $01
00083FD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083FD6 E107                       	smpsAlterNote       $07
00083FD8 E701                       	dc.b	smpsNoAttack, $01
00083FDA E10A                       	smpsAlterNote       $0A
00083FDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083FE0 E104                       	smpsAlterNote       $04
00083FE2 E701                       	dc.b	smpsNoAttack, $01
00083FE4 E100                       	smpsAlterNote       $00
00083FE6 E701                       	dc.b	smpsNoAttack, $01
00083FE8 E101                       	smpsAlterNote       $01
00083FEA E701                       	dc.b	smpsNoAttack, $01
00083FEC E107                       	smpsAlterNote       $07
00083FEE E701                       	dc.b	smpsNoAttack, $01
00083FF0 E10B                       	smpsAlterNote       $0B
00083FF2 E701                       	dc.b	smpsNoAttack, $01
00083FF4 E107                       	smpsAlterNote       $07
00083FF6 E701                       	dc.b	smpsNoAttack, $01
00083FF8 E104                       	smpsAlterNote       $04
00083FFA E701                       	dc.b	smpsNoAttack, $01
00083FFC E100                       	smpsAlterNote       $00
00083FFE E701                       	dc.b	smpsNoAttack, $01
00084000 E101                       	smpsAlterNote       $01
00084002 8001                       	dc.b	nRst, $01
00084004 E108                       	smpsAlterNote       $08
00084006 C10C                       	dc.b	nE5, $0C
00084008 E109                       	smpsAlterNote       $09
0008400A C201 8001                  	dc.b	nF5, $01, nRst, $01
0008400E E10A                       	smpsAlterNote       $0A
00084010 8001                       	dc.b	nRst, $01
00084012 E109                       	smpsAlterNote       $09
00084014 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00084018 E106                       	smpsAlterNote       $06
0008401A E701                       	dc.b	smpsNoAttack, $01
0008401C E102                       	smpsAlterNote       $02
0008401E E701                       	dc.b	smpsNoAttack, $01
00084020 E103                       	smpsAlterNote       $03
00084022 E701                       	dc.b	smpsNoAttack, $01
00084024 E109                       	smpsAlterNote       $09
00084026 E701                       	dc.b	smpsNoAttack, $01
00084028 E10D                       	smpsAlterNote       $0D
0008402A E701                       	dc.b	smpsNoAttack, $01
0008402C E109                       	smpsAlterNote       $09
0008402E E701                       	dc.b	smpsNoAttack, $01
00084030 E106                       	smpsAlterNote       $06
00084032 E701                       	dc.b	smpsNoAttack, $01
00084034 E102                       	smpsAlterNote       $02
00084036 E701                       	dc.b	smpsNoAttack, $01
00084038 E106                       	smpsAlterNote       $06
0008403A E701                       	dc.b	smpsNoAttack, $01
0008403C E10C                       	smpsAlterNote       $0C
0008403E E701                       	dc.b	smpsNoAttack, $01
00084040 E10D                       	smpsAlterNote       $0D
00084042 E701                       	dc.b	smpsNoAttack, $01
00084044 E109                       	smpsAlterNote       $09
00084046 C40D                       	dc.b	nG5, $0D
00084048 E106                       	smpsAlterNote       $06
0008404A E701                       	dc.b	smpsNoAttack, $01
0008404C E102                       	smpsAlterNote       $02
0008404E E701                       	dc.b	smpsNoAttack, $01
00084050 E103                       	smpsAlterNote       $03
00084052 E701                       	dc.b	smpsNoAttack, $01
00084054 E109                       	smpsAlterNote       $09
00084056 E701                       	dc.b	smpsNoAttack, $01
00084058 E108                       	smpsAlterNote       $08
0008405A C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00084066 E109                       	smpsAlterNote       $09
00084068 C20D                       	dc.b	nF5, $0D
0008406A E106                       	smpsAlterNote       $06
0008406C E701                       	dc.b	smpsNoAttack, $01
0008406E E102                       	smpsAlterNote       $02
00084070 E701                       	dc.b	smpsNoAttack, $01
00084072 E106                       	smpsAlterNote       $06
00084074 E701                       	dc.b	smpsNoAttack, $01
00084076 E109                       	smpsAlterNote       $09
00084078 E701                       	dc.b	smpsNoAttack, $01
0008407A E10D                       	smpsAlterNote       $0D
0008407C E701                       	dc.b	smpsNoAttack, $01
0008407E E109                       	smpsAlterNote       $09
00084080 E701                       	dc.b	smpsNoAttack, $01
00084082 E103                       	smpsAlterNote       $03
00084084 E701                       	dc.b	smpsNoAttack, $01
00084086 E102                       	smpsAlterNote       $02
00084088 E701                       	dc.b	smpsNoAttack, $01
0008408A E106                       	smpsAlterNote       $06
0008408C E701                       	dc.b	smpsNoAttack, $01
0008408E E10C                       	smpsAlterNote       $0C
00084090 E701                       	dc.b	smpsNoAttack, $01
00084092 E10D                       	smpsAlterNote       $0D
00084094 8001                       	dc.b	nRst, $01
00084096 E112                       	smpsAlterNote       $12
00084098 C401                       	dc.b	nG5, $01
0008409A E1EB                       	smpsAlterNote       $EB
0008409C E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008409F E1FD                       	smpsAlterNote       $FD
000840A1 E701                       	dc.b	smpsNoAttack, $01
000840A3 E10F                       	smpsAlterNote       $0F
000840A5 E701                       	dc.b	smpsNoAttack, $01
000840A7 E118                       	smpsAlterNote       $18
000840A9 E701                       	dc.b	smpsNoAttack, $01
000840AB E1ED                       	smpsAlterNote       $ED
000840AD E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000840B0 E1FF                       	smpsAlterNote       $FF
000840B2 E701                       	dc.b	smpsNoAttack, $01
000840B4 E10B                       	smpsAlterNote       $0B
000840B6 E703                       	dc.b	smpsNoAttack, $03
000840B8 E109                       	smpsAlterNote       $09
000840BA C407                       	dc.b	nG5, $07
000840BC E108                       	smpsAlterNote       $08
000840BE C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
000840CA E109                       	smpsAlterNote       $09
000840CC C20D                       	dc.b	nF5, $0D
000840CE E103                       	smpsAlterNote       $03
000840D0 E701                       	dc.b	smpsNoAttack, $01
000840D2 E102                       	smpsAlterNote       $02
000840D4 E701                       	dc.b	smpsNoAttack, $01
000840D6 E106                       	smpsAlterNote       $06
000840D8 E701                       	dc.b	smpsNoAttack, $01
000840DA E10C                       	smpsAlterNote       $0C
000840DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000840E0 E109                       	smpsAlterNote       $09
000840E2 E701                       	dc.b	smpsNoAttack, $01
000840E4 E103                       	smpsAlterNote       $03
000840E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000840EA E109                       	smpsAlterNote       $09
000840EC E701                       	dc.b	smpsNoAttack, $01
000840EE E10C                       	smpsAlterNote       $0C
000840F0 E701                       	dc.b	smpsNoAttack, $01
000840F2 E10D                       	smpsAlterNote       $0D
000840F4 8001                       	dc.b	nRst, $01
000840F6 E10B                       	smpsAlterNote       $0B
000840F8 C609 8001                  	dc.b	nA5, $09, nRst, $01
000840FC E109                       	smpsAlterNote       $09
000840FE B806 8001                  	dc.b	nG4, $06, nRst, $01
00084102 E108                       	smpsAlterNote       $08
00084104 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00084110 8001                       	dc.b	nRst, $01
00084112 E109                       	smpsAlterNote       $09
00084114 C20D                       	dc.b	nF5, $0D
00084116 E103                       	smpsAlterNote       $03
00084118 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008411C E106                       	smpsAlterNote       $06
0008411E E701                       	dc.b	smpsNoAttack, $01
00084120 E10C                       	smpsAlterNote       $0C
00084122 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084126 E106                       	smpsAlterNote       $06
00084128 E701                       	dc.b	smpsNoAttack, $01
0008412A E103                       	smpsAlterNote       $03
0008412C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084130 E109                       	smpsAlterNote       $09
00084132 E701                       	dc.b	smpsNoAttack, $01
00084134 E10D                       	smpsAlterNote       $0D
00084136 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008413C E108                       	smpsAlterNote       $08
0008413E E6FF                       	smpsAlterVol        $FF
00084140 A806                       	dc.b	nEb3, $06
00084142 E10C                       	smpsAlterNote       $0C
00084144 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00084148 E108                       	smpsAlterNote       $08
0008414A A803                       	dc.b	nEb3, $03
0008414C E109                       	smpsAlterNote       $09
0008414E AC03 8001                  	dc.b	nG3, $03, nRst, $01
00084152 E10C                       	smpsAlterNote       $0C
00084154 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0008415E E109                       	smpsAlterNote       $09
00084160 E602                       	smpsAlterVol        $02
00084162 B604                       	dc.b	nF4, $04
00084164 E602                       	smpsAlterVol        $02
00084166 F6F1 AA                    	smpsJump            music84_Jump02
00084169                            
00084169                            ; FM4 Data
00084169                            music84_FM4:
0008416B E040                       	smpsPan             panRight, $00
0008416D 8003                       	dc.b	nRst, $03
0008416F E10F                       	smpsAlterNote       $0F
00084171 C603 8008                  	dc.b	nA5, $03, nRst, $08
00084175 E10D                       	smpsAlterNote       $0D
00084177 C403 800A                  	dc.b	nG5, $03, nRst, $0A
0008417B E10C                       	smpsAlterNote       $0C
0008417D C103 8004                  	dc.b	nE5, $03, nRst, $04
00084183 E6FE                       	smpsAlterVol        $FE
00084185 E110                       	smpsAlterNote       $10
00084187 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008418B E10F                       	smpsAlterNote       $0F
0008418D C602 8001                  	dc.b	nA5, $02, nRst, $01
00084191 E10D                       	smpsAlterNote       $0D
00084193 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0008419C E10C                       	smpsAlterNote       $0C
0008419E C103                       	dc.b	nE5, $03
000841A0 E10A                       	smpsAlterNote       $0A
000841A2 BD03 8001                  	dc.b	nC5, $03, nRst, $01
000841A8 03                         	dc.b	$03
000841A9                            
000841A9                            music84_Jump01:
000841A9 E10B                       	smpsAlterNote       $0B
000841AB BF03 8001                  	dc.b	nD5, $03, nRst, $01
000841AF E10C                       	smpsAlterNote       $0C
000841B1 C102 8001                  	dc.b	nE5, $02, nRst, $01
000841B5 E10D                       	smpsAlterNote       $0D
000841B7 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000841C1 E10B                       	smpsAlterNote       $0B
000841C3 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
000841C7 E107                       	smpsAlterNote       $07
000841C9 E701                       	dc.b	smpsNoAttack, $01
000841CB E103                       	smpsAlterNote       $03
000841CD E701                       	dc.b	smpsNoAttack, $01
000841CF E104                       	smpsAlterNote       $04
000841D1 E701                       	dc.b	smpsNoAttack, $01
000841D3 E10A                       	smpsAlterNote       $0A
000841D5 E701                       	dc.b	smpsNoAttack, $01
000841D7 E10E                       	smpsAlterNote       $0E
000841D9 E701                       	dc.b	smpsNoAttack, $01
000841DB E10A                       	smpsAlterNote       $0A
000841DD E701                       	dc.b	smpsNoAttack, $01
000841DF E107                       	smpsAlterNote       $07
000841E1 E701                       	dc.b	smpsNoAttack, $01
000841E3 E104                       	smpsAlterNote       $04
000841E5 8001                       	dc.b	nRst, $01
000841E7 E110                       	smpsAlterNote       $10
000841E9 C703                       	dc.b	nBb5, $03
000841EB E10F                       	smpsAlterNote       $0F
000841ED C603 8001                  	dc.b	nA5, $03, nRst, $01
000841F1 E10D                       	smpsAlterNote       $0D
000841F3 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
000841F9 E10C                       	smpsAlterNote       $0C
000841FB E701                       	dc.b	smpsNoAttack, $01
000841FD E108                       	smpsAlterNote       $08
000841FF E701                       	dc.b	smpsNoAttack, $01
00084201 E10C                       	smpsAlterNote       $0C
00084203 E701                       	dc.b	smpsNoAttack, $01
00084205 E10F                       	smpsAlterNote       $0F
00084207 E701                       	dc.b	smpsNoAttack, $01
00084209 E113                       	smpsAlterNote       $13
0008420B E701                       	dc.b	smpsNoAttack, $01
0008420D E10F                       	smpsAlterNote       $0F
0008420F E701                       	dc.b	smpsNoAttack, $01
00084211 E109                       	smpsAlterNote       $09
00084213 E701                       	dc.b	smpsNoAttack, $01
00084215 E108                       	smpsAlterNote       $08
00084217 E701                       	dc.b	smpsNoAttack, $01
00084219 E10C                       	smpsAlterNote       $0C
0008421B E701                       	dc.b	smpsNoAttack, $01
0008421D E112                       	smpsAlterNote       $12
0008421F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084223 E10C                       	smpsAlterNote       $0C
00084225 E701                       	dc.b	smpsNoAttack, $01
00084227 E109                       	smpsAlterNote       $09
00084229 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008422D E10F                       	smpsAlterNote       $0F
0008422F E701                       	dc.b	smpsNoAttack, $01
00084231 E113                       	smpsAlterNote       $13
00084233 E701                       	dc.b	smpsNoAttack, $01
00084235 E112                       	smpsAlterNote       $12
00084237 E701                       	dc.b	smpsNoAttack, $01
00084239 E10C                       	smpsAlterNote       $0C
0008423B E701                       	dc.b	smpsNoAttack, $01
0008423D E108                       	smpsAlterNote       $08
0008423F E701                       	dc.b	smpsNoAttack, $01
00084241 E10C                       	smpsAlterNote       $0C
00084243 E701                       	dc.b	smpsNoAttack, $01
00084245 E10F                       	smpsAlterNote       $0F
00084247 E701                       	dc.b	smpsNoAttack, $01
00084249 E113                       	smpsAlterNote       $13
0008424B E701                       	dc.b	smpsNoAttack, $01
0008424D E10F                       	smpsAlterNote       $0F
0008424F E701                       	dc.b	smpsNoAttack, $01
00084251 E109                       	smpsAlterNote       $09
00084253 E701                       	dc.b	smpsNoAttack, $01
00084255 E108                       	smpsAlterNote       $08
00084257 E701                       	dc.b	smpsNoAttack, $01
00084259 E10C                       	smpsAlterNote       $0C
0008425B E701                       	dc.b	smpsNoAttack, $01
0008425D E112                       	smpsAlterNote       $12
0008425F E701                       	dc.b	smpsNoAttack, $01
00084261 E113                       	smpsAlterNote       $13
00084263 800F                       	dc.b	nRst, $0F
00084265 E10B                       	smpsAlterNote       $0B
00084267 BF03                       	dc.b	nD5, $03
00084269 E10C                       	smpsAlterNote       $0C
0008426B C103 8001                  	dc.b	nE5, $03, nRst, $01
0008426F E10D                       	smpsAlterNote       $0D
00084271 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00084279 E10B                       	smpsAlterNote       $0B
0008427B BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00084285 E110                       	smpsAlterNote       $10
00084287 C704                       	dc.b	nBb5, $04
00084289 E10F                       	smpsAlterNote       $0F
0008428B C604 8001                  	dc.b	nA5, $04, nRst, $01
0008428F E10D                       	smpsAlterNote       $0D
00084291 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00084297 E109                       	smpsAlterNote       $09
00084299 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008429D E10F                       	smpsAlterNote       $0F
0008429F E701                       	dc.b	smpsNoAttack, $01
000842A1 E112                       	smpsAlterNote       $12
000842A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842A7 E10C                       	smpsAlterNote       $0C
000842A9 E701                       	dc.b	smpsNoAttack, $01
000842AB E108                       	smpsAlterNote       $08
000842AD E701                       	dc.b	smpsNoAttack, $01
000842AF E109                       	smpsAlterNote       $09
000842B1 E701                       	dc.b	smpsNoAttack, $01
000842B3 E10F                       	smpsAlterNote       $0F
000842B5 E701                       	dc.b	smpsNoAttack, $01
000842B7 E113                       	smpsAlterNote       $13
000842B9 E701                       	dc.b	smpsNoAttack, $01
000842BB E10F                       	smpsAlterNote       $0F
000842BD E701                       	dc.b	smpsNoAttack, $01
000842BF E10C                       	smpsAlterNote       $0C
000842C1 E701                       	dc.b	smpsNoAttack, $01
000842C3 E108                       	smpsAlterNote       $08
000842C5 E701                       	dc.b	smpsNoAttack, $01
000842C7 E10C                       	smpsAlterNote       $0C
000842C9 E701                       	dc.b	smpsNoAttack, $01
000842CB E112                       	smpsAlterNote       $12
000842CD E701                       	dc.b	smpsNoAttack, $01
000842CF E113                       	smpsAlterNote       $13
000842D1 E701                       	dc.b	smpsNoAttack, $01
000842D3 E10F                       	smpsAlterNote       $0F
000842D5 E701                       	dc.b	smpsNoAttack, $01
000842D7 E109                       	smpsAlterNote       $09
000842D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842DD E10C                       	smpsAlterNote       $0C
000842DF E701                       	dc.b	smpsNoAttack, $01
000842E1 E112                       	smpsAlterNote       $12
000842E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842E7 E10C                       	smpsAlterNote       $0C
000842E9 E701                       	dc.b	smpsNoAttack, $01
000842EB E109                       	smpsAlterNote       $09
000842ED E701                       	dc.b	smpsNoAttack, $01
000842EF E10D                       	smpsAlterNote       $0D
000842F1 C401 8001                  	dc.b	nG5, $01, nRst, $01
000842F5 E10F                       	smpsAlterNote       $0F
000842F7 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00084301 E10D                       	smpsAlterNote       $0D
00084303 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00084309 E10B                       	smpsAlterNote       $0B
0008430B BF0D                       	dc.b	nD5, $0D
0008430D E108                       	smpsAlterNote       $08
0008430F E701                       	dc.b	smpsNoAttack, $01
00084311 E104                       	smpsAlterNote       $04
00084313 E701                       	dc.b	smpsNoAttack, $01
00084315 E108                       	smpsAlterNote       $08
00084317 E701                       	dc.b	smpsNoAttack, $01
00084319 E10B                       	smpsAlterNote       $0B
0008431B E701                       	dc.b	smpsNoAttack, $01
0008431D E10F                       	smpsAlterNote       $0F
0008431F E701                       	dc.b	smpsNoAttack, $01
00084321 E10B                       	smpsAlterNote       $0B
00084323 E701                       	dc.b	smpsNoAttack, $01
00084325 E105                       	smpsAlterNote       $05
00084327 E701                       	dc.b	smpsNoAttack, $01
00084329 E104                       	smpsAlterNote       $04
0008432B E701                       	dc.b	smpsNoAttack, $01
0008432D E108                       	smpsAlterNote       $08
0008432F E701                       	dc.b	smpsNoAttack, $01
00084331 E10E                       	smpsAlterNote       $0E
00084333 E701                       	dc.b	smpsNoAttack, $01
00084335 E10F                       	smpsAlterNote       $0F
00084337 8001                       	dc.b	nRst, $01
00084339 E10C                       	smpsAlterNote       $0C
0008433B C101                       	dc.b	nE5, $01
0008433D E10D                       	smpsAlterNote       $0D
0008433F C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00084345 E10F                       	smpsAlterNote       $0F
00084347 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008434B E10C                       	smpsAlterNote       $0C
0008434D CD06 8001                  	dc.b	nE6, $06, nRst, $01
00084351 E10D                       	smpsAlterNote       $0D
00084353 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00084357 E10C                       	smpsAlterNote       $0C
00084359 CD03                       	dc.b	nE6, $03
0008435B E10A                       	smpsAlterNote       $0A
0008435D C903 8001                  	dc.b	nC6, $03, nRst, $01
00084361 E10D                       	smpsAlterNote       $0D
00084363 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008436B E109                       	smpsAlterNote       $09
0008436D E701                       	dc.b	smpsNoAttack, $01
0008436F E10D                       	smpsAlterNote       $0D
00084371 E701                       	dc.b	smpsNoAttack, $01
00084373 E110                       	smpsAlterNote       $10
00084375 E701                       	dc.b	smpsNoAttack, $01
00084377 E114                       	smpsAlterNote       $14
00084379 E701                       	dc.b	smpsNoAttack, $01
0008437B E110                       	smpsAlterNote       $10
0008437D E701                       	dc.b	smpsNoAttack, $01
0008437F E10A                       	smpsAlterNote       $0A
00084381 E701                       	dc.b	smpsNoAttack, $01
00084383 E109                       	smpsAlterNote       $09
00084385 E701                       	dc.b	smpsNoAttack, $01
00084387 E10D                       	smpsAlterNote       $0D
00084389 E701                       	dc.b	smpsNoAttack, $01
0008438B E113                       	smpsAlterNote       $13
0008438D E701                       	dc.b	smpsNoAttack, $01
0008438F E114                       	smpsAlterNote       $14
00084391 8001                       	dc.b	nRst, $01
00084393 E10F                       	smpsAlterNote       $0F
00084395 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008439B E10C                       	smpsAlterNote       $0C
0008439D E701                       	dc.b	smpsNoAttack, $01
0008439F E108                       	smpsAlterNote       $08
000843A1 E701                       	dc.b	smpsNoAttack, $01
000843A3 E10C                       	smpsAlterNote       $0C
000843A5 E701                       	dc.b	smpsNoAttack, $01
000843A7 E112                       	smpsAlterNote       $12
000843A9 E701                       	dc.b	smpsNoAttack, $01
000843AB E113                       	smpsAlterNote       $13
000843AD E701                       	dc.b	smpsNoAttack, $01
000843AF E10F                       	smpsAlterNote       $0F
000843B1 E701                       	dc.b	smpsNoAttack, $01
000843B3 E109                       	smpsAlterNote       $09
000843B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000843B9 E10C                       	smpsAlterNote       $0C
000843BB E701                       	dc.b	smpsNoAttack, $01
000843BD E112                       	smpsAlterNote       $12
000843BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000843C3 E10C                       	smpsAlterNote       $0C
000843C5 E701                       	dc.b	smpsNoAttack, $01
000843C7 E109                       	smpsAlterNote       $09
000843C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000843CD E10F                       	smpsAlterNote       $0F
000843CF E701                       	dc.b	smpsNoAttack, $01
000843D1 E113                       	smpsAlterNote       $13
000843D3 E701                       	dc.b	smpsNoAttack, $01
000843D5 E112                       	smpsAlterNote       $12
000843D7 E701                       	dc.b	smpsNoAttack, $01
000843D9 E10C                       	smpsAlterNote       $0C
000843DB E701                       	dc.b	smpsNoAttack, $01
000843DD E108                       	smpsAlterNote       $08
000843DF E701                       	dc.b	smpsNoAttack, $01
000843E1 E10C                       	smpsAlterNote       $0C
000843E3 E701                       	dc.b	smpsNoAttack, $01
000843E5 E10F                       	smpsAlterNote       $0F
000843E7 E701                       	dc.b	smpsNoAttack, $01
000843E9 E113                       	smpsAlterNote       $13
000843EB E701                       	dc.b	smpsNoAttack, $01
000843ED E10F                       	smpsAlterNote       $0F
000843EF E701                       	dc.b	smpsNoAttack, $01
000843F1 E109                       	smpsAlterNote       $09
000843F3 E701                       	dc.b	smpsNoAttack, $01
000843F5 E108                       	smpsAlterNote       $08
000843F7 E701                       	dc.b	smpsNoAttack, $01
000843F9 E10C                       	smpsAlterNote       $0C
000843FB E701                       	dc.b	smpsNoAttack, $01
000843FD E112                       	smpsAlterNote       $12
000843FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084403 E10F                       	smpsAlterNote       $0F
00084405 E701                       	dc.b	smpsNoAttack, $01
00084407 E109                       	smpsAlterNote       $09
00084409 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008440D E10F                       	smpsAlterNote       $0F
0008440F E701                       	dc.b	smpsNoAttack, $01
00084411 E113                       	smpsAlterNote       $13
00084413 E701                       	dc.b	smpsNoAttack, $01
00084415 E112                       	smpsAlterNote       $12
00084417 E701                       	dc.b	smpsNoAttack, $01
00084419 E10C                       	smpsAlterNote       $0C
0008441B E701                       	dc.b	smpsNoAttack, $01
0008441D E108                       	smpsAlterNote       $08
0008441F E701                       	dc.b	smpsNoAttack, $01
00084421 E10C                       	smpsAlterNote       $0C
00084423 E701                       	dc.b	smpsNoAttack, $01
00084425 E10F                       	smpsAlterNote       $0F
00084427 E701                       	dc.b	smpsNoAttack, $01
00084429 E113                       	smpsAlterNote       $13
0008442B E701                       	dc.b	smpsNoAttack, $01
0008442D E10F                       	smpsAlterNote       $0F
0008442F E701                       	dc.b	smpsNoAttack, $01
00084431 E109                       	smpsAlterNote       $09
00084433 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084437 E10F                       	smpsAlterNote       $0F
00084439 C60D                       	dc.b	nA5, $0D
0008443B E109                       	smpsAlterNote       $09
0008443D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084441 E10C                       	smpsAlterNote       $0C
00084443 E701                       	dc.b	smpsNoAttack, $01
00084445 E112                       	smpsAlterNote       $12
00084447 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008444B E10C                       	smpsAlterNote       $0C
0008444D E701                       	dc.b	smpsNoAttack, $01
0008444F E109                       	smpsAlterNote       $09
00084451 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084455 E10F                       	smpsAlterNote       $0F
00084457 E701                       	dc.b	smpsNoAttack, $01
00084459 E113                       	smpsAlterNote       $13
0008445B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084461 E10D                       	smpsAlterNote       $0D
00084463 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008446B E10C                       	smpsAlterNote       $0C
0008446D C103 800E                  	dc.b	nE5, $03, nRst, $0E
00084473 E6FF                       	smpsAlterVol        $FF
00084475 E10B                       	smpsAlterNote       $0B
00084477 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008447B E10C                       	smpsAlterNote       $0C
0008447D C103                       	dc.b	nE5, $03
0008447F E10D                       	smpsAlterNote       $0D
00084481 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008448B E10B                       	smpsAlterNote       $0B
0008448D BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00084491 E107                       	smpsAlterNote       $07
00084493 E701                       	dc.b	smpsNoAttack, $01
00084495 E104                       	smpsAlterNote       $04
00084497 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008449B E10A                       	smpsAlterNote       $0A
0008449D E701                       	dc.b	smpsNoAttack, $01
0008449F E10D                       	smpsAlterNote       $0D
000844A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000844A5 E107                       	smpsAlterNote       $07
000844A7 E701                       	dc.b	smpsNoAttack, $01
000844A9 E104                       	smpsAlterNote       $04
000844AB 8001                       	dc.b	nRst, $01
000844AD E110                       	smpsAlterNote       $10
000844AF C703                       	dc.b	nBb5, $03
000844B1 E10F                       	smpsAlterNote       $0F
000844B3 C603 8001                  	dc.b	nA5, $03, nRst, $01
000844B7 E10D                       	smpsAlterNote       $0D
000844B9 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000844BD E10C                       	smpsAlterNote       $0C
000844BF E701                       	dc.b	smpsNoAttack, $01
000844C1 E108                       	smpsAlterNote       $08
000844C3 E701                       	dc.b	smpsNoAttack, $01
000844C5 E109                       	smpsAlterNote       $09
000844C7 E701                       	dc.b	smpsNoAttack, $01
000844C9 E10F                       	smpsAlterNote       $0F
000844CB E701                       	dc.b	smpsNoAttack, $01
000844CD E113                       	smpsAlterNote       $13
000844CF E701                       	dc.b	smpsNoAttack, $01
000844D1 E10F                       	smpsAlterNote       $0F
000844D3 E701                       	dc.b	smpsNoAttack, $01
000844D5 E10C                       	smpsAlterNote       $0C
000844D7 E701                       	dc.b	smpsNoAttack, $01
000844D9 E108                       	smpsAlterNote       $08
000844DB E701                       	dc.b	smpsNoAttack, $01
000844DD E10C                       	smpsAlterNote       $0C
000844DF E701                       	dc.b	smpsNoAttack, $01
000844E1 E112                       	smpsAlterNote       $12
000844E3 E701                       	dc.b	smpsNoAttack, $01
000844E5 E113                       	smpsAlterNote       $13
000844E7 E701                       	dc.b	smpsNoAttack, $01
000844E9 E10F                       	smpsAlterNote       $0F
000844EB E701                       	dc.b	smpsNoAttack, $01
000844ED E109                       	smpsAlterNote       $09
000844EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000844F3 E10C                       	smpsAlterNote       $0C
000844F5 E701                       	dc.b	smpsNoAttack, $01
000844F7 E112                       	smpsAlterNote       $12
000844F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000844FD E10C                       	smpsAlterNote       $0C
000844FF E701                       	dc.b	smpsNoAttack, $01
00084501 E109                       	smpsAlterNote       $09
00084503 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084507 E10F                       	smpsAlterNote       $0F
00084509 E701                       	dc.b	smpsNoAttack, $01
0008450B E113                       	smpsAlterNote       $13
0008450D E701                       	dc.b	smpsNoAttack, $01
0008450F E112                       	smpsAlterNote       $12
00084511 E701                       	dc.b	smpsNoAttack, $01
00084513 E10C                       	smpsAlterNote       $0C
00084515 E701                       	dc.b	smpsNoAttack, $01
00084517 E108                       	smpsAlterNote       $08
00084519 E701                       	dc.b	smpsNoAttack, $01
0008451B E10C                       	smpsAlterNote       $0C
0008451D E701                       	dc.b	smpsNoAttack, $01
0008451F E10F                       	smpsAlterNote       $0F
00084521 E701                       	dc.b	smpsNoAttack, $01
00084523 E113                       	smpsAlterNote       $13
00084525 E701                       	dc.b	smpsNoAttack, $01
00084527 E10F                       	smpsAlterNote       $0F
00084529 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008452D E110                       	smpsAlterNote       $10
0008452F BB03                       	dc.b	nBb4, $03
00084531 E10F                       	smpsAlterNote       $0F
00084533 BA06 8001                  	dc.b	nA4, $06, nRst, $01
00084537 E10B                       	smpsAlterNote       $0B
00084539 BF03                       	dc.b	nD5, $03
0008453B E10C                       	smpsAlterNote       $0C
0008453D C103 8001                  	dc.b	nE5, $03, nRst, $01
00084541 E10D                       	smpsAlterNote       $0D
00084543 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008454D E10B                       	smpsAlterNote       $0B
0008454F BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008455B E110                       	smpsAlterNote       $10
0008455D C704 8001                  	dc.b	nBb5, $04, nRst, $01
00084561 E10F                       	smpsAlterNote       $0F
00084563 C604                       	dc.b	nA5, $04
00084565 E10D                       	smpsAlterNote       $0D
00084567 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008456D E109                       	smpsAlterNote       $09
0008456F E701                       	dc.b	smpsNoAttack, $01
00084571 E108                       	smpsAlterNote       $08
00084573 E701                       	dc.b	smpsNoAttack, $01
00084575 E10C                       	smpsAlterNote       $0C
00084577 E701                       	dc.b	smpsNoAttack, $01
00084579 E112                       	smpsAlterNote       $12
0008457B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008457F E10F                       	smpsAlterNote       $0F
00084581 E701                       	dc.b	smpsNoAttack, $01
00084583 E109                       	smpsAlterNote       $09
00084585 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084589 E10F                       	smpsAlterNote       $0F
0008458B E701                       	dc.b	smpsNoAttack, $01
0008458D E112                       	smpsAlterNote       $12
0008458F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084593 E10C                       	smpsAlterNote       $0C
00084595 E701                       	dc.b	smpsNoAttack, $01
00084597 E108                       	smpsAlterNote       $08
00084599 E701                       	dc.b	smpsNoAttack, $01
0008459B E109                       	smpsAlterNote       $09
0008459D E701                       	dc.b	smpsNoAttack, $01
0008459F E10F                       	smpsAlterNote       $0F
000845A1 E701                       	dc.b	smpsNoAttack, $01
000845A3 E113                       	smpsAlterNote       $13
000845A5 E701                       	dc.b	smpsNoAttack, $01
000845A7 E10F                       	smpsAlterNote       $0F
000845A9 E701                       	dc.b	smpsNoAttack, $01
000845AB E10C                       	smpsAlterNote       $0C
000845AD E701                       	dc.b	smpsNoAttack, $01
000845AF E108                       	smpsAlterNote       $08
000845B1 E701                       	dc.b	smpsNoAttack, $01
000845B3 E10C                       	smpsAlterNote       $0C
000845B5 E701                       	dc.b	smpsNoAttack, $01
000845B7 E112                       	smpsAlterNote       $12
000845B9 E701                       	dc.b	smpsNoAttack, $01
000845BB E113                       	smpsAlterNote       $13
000845BD E701                       	dc.b	smpsNoAttack, $01
000845BF E10F                       	smpsAlterNote       $0F
000845C1 E701                       	dc.b	smpsNoAttack, $01
000845C3 E109                       	smpsAlterNote       $09
000845C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000845C9 E10C                       	smpsAlterNote       $0C
000845CB E701                       	dc.b	smpsNoAttack, $01
000845CD E112                       	smpsAlterNote       $12
000845CF E701                       	dc.b	smpsNoAttack, $01
000845D1 E113                       	smpsAlterNote       $13
000845D3 8001                       	dc.b	nRst, $01
000845D5 E10F                       	smpsAlterNote       $0F
000845D7 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
000845E3 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
000845EB E10D                       	smpsAlterNote       $0D
000845ED C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000845F3 E10B                       	smpsAlterNote       $0B
000845F5 BF0D                       	dc.b	nD5, $0D
000845F7 E108                       	smpsAlterNote       $08
000845F9 E701                       	dc.b	smpsNoAttack, $01
000845FB E104                       	smpsAlterNote       $04
000845FD E701                       	dc.b	smpsNoAttack, $01
000845FF E105                       	smpsAlterNote       $05
00084601 E701                       	dc.b	smpsNoAttack, $01
00084603 E10B                       	smpsAlterNote       $0B
00084605 E701                       	dc.b	smpsNoAttack, $01
00084607 E10F                       	smpsAlterNote       $0F
00084609 E701                       	dc.b	smpsNoAttack, $01
0008460B E10B                       	smpsAlterNote       $0B
0008460D E701                       	dc.b	smpsNoAttack, $01
0008460F E108                       	smpsAlterNote       $08
00084611 E701                       	dc.b	smpsNoAttack, $01
00084613 E104                       	smpsAlterNote       $04
00084615 E701                       	dc.b	smpsNoAttack, $01
00084617 E108                       	smpsAlterNote       $08
00084619 E701                       	dc.b	smpsNoAttack, $01
0008461B E10E                       	smpsAlterNote       $0E
0008461D E701                       	dc.b	smpsNoAttack, $01
0008461F E10F                       	smpsAlterNote       $0F
00084621 E701                       	dc.b	smpsNoAttack, $01
00084623 E10C                       	smpsAlterNote       $0C
00084625 C101                       	dc.b	nE5, $01
00084627 E10D                       	smpsAlterNote       $0D
00084629 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00084631 E10F                       	smpsAlterNote       $0F
00084633 C607                       	dc.b	nA5, $07
00084635 E10C                       	smpsAlterNote       $0C
00084637 CD07                       	dc.b	nE6, $07
00084639 E10D                       	smpsAlterNote       $0D
0008463B CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008463F E10C                       	smpsAlterNote       $0C
00084641 CD03                       	dc.b	nE6, $03
00084643 E10A                       	smpsAlterNote       $0A
00084645 C903 8001                  	dc.b	nC6, $03, nRst, $01
00084649 E10D                       	smpsAlterNote       $0D
0008464B C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00084651 E10A                       	smpsAlterNote       $0A
00084653 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084657 E110                       	smpsAlterNote       $10
00084659 E701                       	dc.b	smpsNoAttack, $01
0008465B E114                       	smpsAlterNote       $14
0008465D E701                       	dc.b	smpsNoAttack, $01
0008465F E113                       	smpsAlterNote       $13
00084661 E701                       	dc.b	smpsNoAttack, $01
00084663 E10D                       	smpsAlterNote       $0D
00084665 E701                       	dc.b	smpsNoAttack, $01
00084667 E109                       	smpsAlterNote       $09
00084669 E701                       	dc.b	smpsNoAttack, $01
0008466B E10D                       	smpsAlterNote       $0D
0008466D E701                       	dc.b	smpsNoAttack, $01
0008466F E110                       	smpsAlterNote       $10
00084671 E701                       	dc.b	smpsNoAttack, $01
00084673 E114                       	smpsAlterNote       $14
00084675 E701                       	dc.b	smpsNoAttack, $01
00084677 E10F                       	smpsAlterNote       $0F
00084679 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008467D E10C                       	smpsAlterNote       $0C
0008467F E701                       	dc.b	smpsNoAttack, $01
00084681 E108                       	smpsAlterNote       $08
00084683 E701                       	dc.b	smpsNoAttack, $01
00084685 E10C                       	smpsAlterNote       $0C
00084687 E701                       	dc.b	smpsNoAttack, $01
00084689 E10F                       	smpsAlterNote       $0F
0008468B E701                       	dc.b	smpsNoAttack, $01
0008468D E113                       	smpsAlterNote       $13
0008468F E701                       	dc.b	smpsNoAttack, $01
00084691 E10F                       	smpsAlterNote       $0F
00084693 E701                       	dc.b	smpsNoAttack, $01
00084695 E109                       	smpsAlterNote       $09
00084697 E701                       	dc.b	smpsNoAttack, $01
00084699 E108                       	smpsAlterNote       $08
0008469B E701                       	dc.b	smpsNoAttack, $01
0008469D E10C                       	smpsAlterNote       $0C
0008469F E701                       	dc.b	smpsNoAttack, $01
000846A1 E112                       	smpsAlterNote       $12
000846A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000846A7 E10F                       	smpsAlterNote       $0F
000846A9 E701                       	dc.b	smpsNoAttack, $01
000846AB E109                       	smpsAlterNote       $09
000846AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000846B1 E10F                       	smpsAlterNote       $0F
000846B3 E701                       	dc.b	smpsNoAttack, $01
000846B5 E112                       	smpsAlterNote       $12
000846B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000846BB E10C                       	smpsAlterNote       $0C
000846BD E701                       	dc.b	smpsNoAttack, $01
000846BF E108                       	smpsAlterNote       $08
000846C1 E701                       	dc.b	smpsNoAttack, $01
000846C3 E109                       	smpsAlterNote       $09
000846C5 E701                       	dc.b	smpsNoAttack, $01
000846C7 E10F                       	smpsAlterNote       $0F
000846C9 E701                       	dc.b	smpsNoAttack, $01
000846CB E113                       	smpsAlterNote       $13
000846CD E701                       	dc.b	smpsNoAttack, $01
000846CF E10F                       	smpsAlterNote       $0F
000846D1 E701                       	dc.b	smpsNoAttack, $01
000846D3 E10C                       	smpsAlterNote       $0C
000846D5 E701                       	dc.b	smpsNoAttack, $01
000846D7 E108                       	smpsAlterNote       $08
000846D9 E701                       	dc.b	smpsNoAttack, $01
000846DB E10C                       	smpsAlterNote       $0C
000846DD E701                       	dc.b	smpsNoAttack, $01
000846DF E112                       	smpsAlterNote       $12
000846E1 E701                       	dc.b	smpsNoAttack, $01
000846E3 E113                       	smpsAlterNote       $13
000846E5 E701                       	dc.b	smpsNoAttack, $01
000846E7 E10F                       	smpsAlterNote       $0F
000846E9 E701                       	dc.b	smpsNoAttack, $01
000846EB E109                       	smpsAlterNote       $09
000846ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000846F1 E10C                       	smpsAlterNote       $0C
000846F3 E701                       	dc.b	smpsNoAttack, $01
000846F5 E112                       	smpsAlterNote       $12
000846F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000846FB E10C                       	smpsAlterNote       $0C
000846FD E701                       	dc.b	smpsNoAttack, $01
000846FF E109                       	smpsAlterNote       $09
00084701 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084705 E10F                       	smpsAlterNote       $0F
00084707 E701                       	dc.b	smpsNoAttack, $01
00084709 E113                       	smpsAlterNote       $13
0008470B E701                       	dc.b	smpsNoAttack, $01
0008470D E112                       	smpsAlterNote       $12
0008470F E701                       	dc.b	smpsNoAttack, $01
00084711 E10C                       	smpsAlterNote       $0C
00084713 E701                       	dc.b	smpsNoAttack, $01
00084715 E109                       	smpsAlterNote       $09
00084717 8001                       	dc.b	nRst, $01
00084719 E10F                       	smpsAlterNote       $0F
0008471B C60D                       	dc.b	nA5, $0D
0008471D E10C                       	smpsAlterNote       $0C
0008471F E701                       	dc.b	smpsNoAttack, $01
00084721 E108                       	smpsAlterNote       $08
00084723 E701                       	dc.b	smpsNoAttack, $01
00084725 E10C                       	smpsAlterNote       $0C
00084727 E701                       	dc.b	smpsNoAttack, $01
00084729 E112                       	smpsAlterNote       $12
0008472B E701                       	dc.b	smpsNoAttack, $01
0008472D E113                       	smpsAlterNote       $13
0008472F E701                       	dc.b	smpsNoAttack, $01
00084731 E10F                       	smpsAlterNote       $0F
00084733 E701                       	dc.b	smpsNoAttack, $01
00084735 E109                       	smpsAlterNote       $09
00084737 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008473B E10C                       	smpsAlterNote       $0C
0008473D E701                       	dc.b	smpsNoAttack, $01
0008473F E112                       	smpsAlterNote       $12
00084741 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084745 E10C                       	smpsAlterNote       $0C
00084747 E701                       	dc.b	smpsNoAttack, $01
00084749 E109                       	smpsAlterNote       $09
0008474B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008474F E10F                       	smpsAlterNote       $0F
00084751 E701                       	dc.b	smpsNoAttack, $01
00084753 E113                       	smpsAlterNote       $13
00084755 E701                       	dc.b	smpsNoAttack, $01
00084757 E112                       	smpsAlterNote       $12
00084759 E701                       	dc.b	smpsNoAttack, $01
0008475B E10C                       	smpsAlterNote       $0C
0008475D E701                       	dc.b	smpsNoAttack, $01
0008475F E108                       	smpsAlterNote       $08
00084761 E701                       	dc.b	smpsNoAttack, $01
00084763 E10C                       	smpsAlterNote       $0C
00084765 E701                       	dc.b	smpsNoAttack, $01
00084767 E10F                       	smpsAlterNote       $0F
00084769 E701                       	dc.b	smpsNoAttack, $01
0008476B E113                       	smpsAlterNote       $13
0008476D E701                       	dc.b	smpsNoAttack, $01
0008476F E10F                       	smpsAlterNote       $0F
00084771 E701                       	dc.b	smpsNoAttack, $01
00084773 E109                       	smpsAlterNote       $09
00084775 E701                       	dc.b	smpsNoAttack, $01
00084777 E108                       	smpsAlterNote       $08
00084779 E701                       	dc.b	smpsNoAttack, $01
0008477B E10C                       	smpsAlterNote       $0C
0008477D E701                       	dc.b	smpsNoAttack, $01
0008477F E112                       	smpsAlterNote       $12
00084781 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084785 E10F                       	smpsAlterNote       $0F
00084787 E701                       	dc.b	smpsNoAttack, $01
00084789 E109                       	smpsAlterNote       $09
0008478B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008478F E10F                       	smpsAlterNote       $0F
00084791 E701                       	dc.b	smpsNoAttack, $01
00084793 E112                       	smpsAlterNote       $12
00084795 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084799 E10C                       	smpsAlterNote       $0C
0008479B E701                       	dc.b	smpsNoAttack, $01
0008479D E108                       	smpsAlterNote       $08
0008479F E701                       	dc.b	smpsNoAttack, $01
000847A1 E10C                       	smpsAlterNote       $0C
000847A3 E701                       	dc.b	smpsNoAttack, $01
000847A5 E10F                       	smpsAlterNote       $0F
000847A7 E701                       	dc.b	smpsNoAttack, $01
000847A9 E113                       	smpsAlterNote       $13
000847AB E701                       	dc.b	smpsNoAttack, $01
000847AD E10F                       	smpsAlterNote       $0F
000847AF E701                       	dc.b	smpsNoAttack, $01
000847B1 E109                       	smpsAlterNote       $09
000847B3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000847B9 E601                       	smpsAlterVol        $01
000847BB E10F                       	smpsAlterNote       $0F
000847BD C604                       	dc.b	nA5, $04
000847BF E10D                       	smpsAlterNote       $0D
000847C1 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000847C7 E10B                       	smpsAlterNote       $0B
000847C9 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
000847D1 E10F                       	smpsAlterNote       $0F
000847D3 C604 8001                  	dc.b	nA5, $04, nRst, $01
000847D7 E10D                       	smpsAlterNote       $0D
000847D9 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000847DF E10C                       	smpsAlterNote       $0C
000847E1 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
000847E7 E10A                       	smpsAlterNote       $0A
000847E9 C904 8001                  	dc.b	nC6, $04, nRst, $01
000847ED E110                       	smpsAlterNote       $10
000847EF C704 8001                  	dc.b	nBb5, $04, nRst, $01
000847F3 E10F                       	smpsAlterNote       $0F
000847F5 C604                       	dc.b	nA5, $04
000847F7 E10D                       	smpsAlterNote       $0D
000847F9 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00084805 E109                       	smpsAlterNote       $09
00084807 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008480B E10F                       	smpsAlterNote       $0F
0008480D E701                       	dc.b	smpsNoAttack, $01
0008480F E112                       	smpsAlterNote       $12
00084811 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084815 E10C                       	smpsAlterNote       $0C
00084817 E701                       	dc.b	smpsNoAttack, $01
00084819 E108                       	smpsAlterNote       $08
0008481B E701                       	dc.b	smpsNoAttack, $01
0008481D E10C                       	smpsAlterNote       $0C
0008481F E701                       	dc.b	smpsNoAttack, $01
00084821 E10F                       	smpsAlterNote       $0F
00084823 E701                       	dc.b	smpsNoAttack, $01
00084825 E113                       	smpsAlterNote       $13
00084827 E701                       	dc.b	smpsNoAttack, $01
00084829 E10D                       	smpsAlterNote       $0D
0008482B C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00084831 E10C                       	smpsAlterNote       $0C
00084833 C10D                       	dc.b	nE5, $0D
00084835 E109                       	smpsAlterNote       $09
00084837 E701                       	dc.b	smpsNoAttack, $01
00084839 E105                       	smpsAlterNote       $05
0008483B E701                       	dc.b	smpsNoAttack, $01
0008483D E106                       	smpsAlterNote       $06
0008483F E701                       	dc.b	smpsNoAttack, $01
00084841 E10C                       	smpsAlterNote       $0C
00084843 E701                       	dc.b	smpsNoAttack, $01
00084845 E110                       	smpsAlterNote       $10
00084847 E701                       	dc.b	smpsNoAttack, $01
00084849 E10C                       	smpsAlterNote       $0C
0008484B E701                       	dc.b	smpsNoAttack, $01
0008484D E109                       	smpsAlterNote       $09
0008484F E701                       	dc.b	smpsNoAttack, $01
00084851 E105                       	smpsAlterNote       $05
00084853 E701                       	dc.b	smpsNoAttack, $01
00084855 E109                       	smpsAlterNote       $09
00084857 E701                       	dc.b	smpsNoAttack, $01
00084859 E10F                       	smpsAlterNote       $0F
0008485B E701                       	dc.b	smpsNoAttack, $01
0008485D E110                       	smpsAlterNote       $10
0008485F E701                       	dc.b	smpsNoAttack, $01
00084861 E10C                       	smpsAlterNote       $0C
00084863 E701                       	dc.b	smpsNoAttack, $01
00084865 E106                       	smpsAlterNote       $06
00084867 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008486B E109                       	smpsAlterNote       $09
0008486D E701                       	dc.b	smpsNoAttack, $01
0008486F E10F                       	smpsAlterNote       $0F
00084871 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084875 E109                       	smpsAlterNote       $09
00084877 E701                       	dc.b	smpsNoAttack, $01
00084879 E106                       	smpsAlterNote       $06
0008487B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008487F E10C                       	smpsAlterNote       $0C
00084881 E701                       	dc.b	smpsNoAttack, $01
00084883 E110                       	smpsAlterNote       $10
00084885 E701                       	dc.b	smpsNoAttack, $01
00084887 E10F                       	smpsAlterNote       $0F
00084889 E701                       	dc.b	smpsNoAttack, $01
0008488B E109                       	smpsAlterNote       $09
0008488D E701                       	dc.b	smpsNoAttack, $01
0008488F E105                       	smpsAlterNote       $05
00084891 E701                       	dc.b	smpsNoAttack, $01
00084893 E109                       	smpsAlterNote       $09
00084895 E701                       	dc.b	smpsNoAttack, $01
00084897 E10C                       	smpsAlterNote       $0C
00084899 E701                       	dc.b	smpsNoAttack, $01
0008489B E110                       	smpsAlterNote       $10
0008489D E701                       	dc.b	smpsNoAttack, $01
0008489F E10C                       	smpsAlterNote       $0C
000848A1 E701                       	dc.b	smpsNoAttack, $01
000848A3 E106                       	smpsAlterNote       $06
000848A5 E701                       	dc.b	smpsNoAttack, $01
000848A7 E105                       	smpsAlterNote       $05
000848A9 E701                       	dc.b	smpsNoAttack, $01
000848AB E109                       	smpsAlterNote       $09
000848AD E701                       	dc.b	smpsNoAttack, $01
000848AF E10F                       	smpsAlterNote       $0F
000848B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000848B5 E10C                       	smpsAlterNote       $0C
000848B7 E701                       	dc.b	smpsNoAttack, $01
000848B9 E106                       	smpsAlterNote       $06
000848BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000848BF E10C                       	smpsAlterNote       $0C
000848C1 E701                       	dc.b	smpsNoAttack, $01
000848C3 E10F                       	smpsAlterNote       $0F
000848C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000848C9 E109                       	smpsAlterNote       $09
000848CB E701                       	dc.b	smpsNoAttack, $01
000848CD E105                       	smpsAlterNote       $05
000848CF E701                       	dc.b	smpsNoAttack, $01
000848D1 E106                       	smpsAlterNote       $06
000848D3 E701                       	dc.b	smpsNoAttack, $01
000848D5 E10C                       	smpsAlterNote       $0C
000848D7 E701                       	dc.b	smpsNoAttack, $01
000848D9 E110                       	smpsAlterNote       $10
000848DB E701                       	dc.b	smpsNoAttack, $01
000848DD E10C                       	smpsAlterNote       $0C
000848DF E701                       	dc.b	smpsNoAttack, $01
000848E1 E109                       	smpsAlterNote       $09
000848E3 E701                       	dc.b	smpsNoAttack, $01
000848E5 E105                       	smpsAlterNote       $05
000848E7 E701                       	dc.b	smpsNoAttack, $01
000848E9 E109                       	smpsAlterNote       $09
000848EB E701                       	dc.b	smpsNoAttack, $01
000848ED E10F                       	smpsAlterNote       $0F
000848EF E701                       	dc.b	smpsNoAttack, $01
000848F1 E110                       	smpsAlterNote       $10
000848F3 E701                       	dc.b	smpsNoAttack, $01
000848F5 E10C                       	smpsAlterNote       $0C
000848F7 E701                       	dc.b	smpsNoAttack, $01
000848F9 E106                       	smpsAlterNote       $06
000848FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000848FF E109                       	smpsAlterNote       $09
00084901 E701                       	dc.b	smpsNoAttack, $01
00084903 E10F                       	smpsAlterNote       $0F
00084905 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084909 E109                       	smpsAlterNote       $09
0008490B E701                       	dc.b	smpsNoAttack, $01
0008490D E106                       	smpsAlterNote       $06
0008490F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084913 E10C                       	smpsAlterNote       $0C
00084915 E701                       	dc.b	smpsNoAttack, $01
00084917 E110                       	smpsAlterNote       $10
00084919 E701                       	dc.b	smpsNoAttack, $01
0008491B E10F                       	smpsAlterNote       $0F
0008491D E701                       	dc.b	smpsNoAttack, $01
0008491F E109                       	smpsAlterNote       $09
00084921 E701                       	dc.b	smpsNoAttack, $01
00084923 E105                       	smpsAlterNote       $05
00084925 E701                       	dc.b	smpsNoAttack, $01
00084927 E109                       	smpsAlterNote       $09
00084929 E701                       	dc.b	smpsNoAttack, $01
0008492B E10C                       	smpsAlterNote       $0C
0008492D E701                       	dc.b	smpsNoAttack, $01
0008492F E110                       	smpsAlterNote       $10
00084931 E701                       	dc.b	smpsNoAttack, $01
00084933 E10C                       	smpsAlterNote       $0C
00084935 E701                       	dc.b	smpsNoAttack, $01
00084937 E106                       	smpsAlterNote       $06
00084939 E701                       	dc.b	smpsNoAttack, $01
0008493B E105                       	smpsAlterNote       $05
0008493D E701                       	dc.b	smpsNoAttack, $01
0008493F E109                       	smpsAlterNote       $09
00084941 E701                       	dc.b	smpsNoAttack, $01
00084943 E10F                       	smpsAlterNote       $0F
00084945 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084949 E109                       	smpsAlterNote       $09
0008494B E701                       	dc.b	smpsNoAttack, $01
0008494D E106                       	smpsAlterNote       $06
0008494F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084953 E10C                       	smpsAlterNote       $0C
00084955 E701                       	dc.b	smpsNoAttack, $01
00084957 E110                       	smpsAlterNote       $10
00084959 E701                       	dc.b	smpsNoAttack, $01
0008495B E10F                       	smpsAlterNote       $0F
0008495D E701                       	dc.b	smpsNoAttack, $01
0008495F E109                       	smpsAlterNote       $09
00084961 E701                       	dc.b	smpsNoAttack, $01
00084963 E105                       	smpsAlterNote       $05
00084965 E701                       	dc.b	smpsNoAttack, $01
00084967 E109                       	smpsAlterNote       $09
00084969 E701                       	dc.b	smpsNoAttack, $01
0008496B E10C                       	smpsAlterNote       $0C
0008496D E701                       	dc.b	smpsNoAttack, $01
0008496F E110                       	smpsAlterNote       $10
00084971 E701                       	dc.b	smpsNoAttack, $01
00084973 E10C                       	smpsAlterNote       $0C
00084975 E701                       	dc.b	smpsNoAttack, $01
00084977 E106                       	smpsAlterNote       $06
00084979 E701                       	dc.b	smpsNoAttack, $01
0008497B E105                       	smpsAlterNote       $05
0008497D E701                       	dc.b	smpsNoAttack, $01
0008497F E109                       	smpsAlterNote       $09
00084981 E701                       	dc.b	smpsNoAttack, $01
00084983 E10F                       	smpsAlterNote       $0F
00084985 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084989 E10C                       	smpsAlterNote       $0C
0008498B E701                       	dc.b	smpsNoAttack, $01
0008498D E106                       	smpsAlterNote       $06
0008498F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084993 E10C                       	smpsAlterNote       $0C
00084995 E701                       	dc.b	smpsNoAttack, $01
00084997 E10F                       	smpsAlterNote       $0F
00084999 E701                       	dc.b	smpsNoAttack, $01
0008499B E110                       	smpsAlterNote       $10
0008499D 8001                       	dc.b	nRst, $01
0008499F E10F                       	smpsAlterNote       $0F
000849A1 C604                       	dc.b	nA5, $04
000849A3 E10D                       	smpsAlterNote       $0D
000849A5 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000849AB E10B                       	smpsAlterNote       $0B
000849AD BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
000849B3 E10F                       	smpsAlterNote       $0F
000849B5 C604 8001                  	dc.b	nA5, $04, nRst, $01
000849B9 E10D                       	smpsAlterNote       $0D
000849BB C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000849C1 E10C                       	smpsAlterNote       $0C
000849C3 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000849C9 E10A                       	smpsAlterNote       $0A
000849CB C904                       	dc.b	nC6, $04
000849CD E110                       	smpsAlterNote       $10
000849CF C704 8001                  	dc.b	nBb5, $04, nRst, $01
000849D3 E10F                       	smpsAlterNote       $0F
000849D5 C604                       	dc.b	nA5, $04
000849D7 E10D                       	smpsAlterNote       $0D
000849D9 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000849E5 E109                       	smpsAlterNote       $09
000849E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000849EB E10F                       	smpsAlterNote       $0F
000849ED E701                       	dc.b	smpsNoAttack, $01
000849EF E112                       	smpsAlterNote       $12
000849F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000849F5 E10C                       	smpsAlterNote       $0C
000849F7 E701                       	dc.b	smpsNoAttack, $01
000849F9 E108                       	smpsAlterNote       $08
000849FB E701                       	dc.b	smpsNoAttack, $01
000849FD E109                       	smpsAlterNote       $09
000849FF E701                       	dc.b	smpsNoAttack, $01
00084A01 E10F                       	smpsAlterNote       $0F
00084A03 E701                       	dc.b	smpsNoAttack, $01
00084A05 E113                       	smpsAlterNote       $13
00084A07 E701                       	dc.b	smpsNoAttack, $01
00084A09 E10D                       	smpsAlterNote       $0D
00084A0B C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00084A11 E10C                       	smpsAlterNote       $0C
00084A13 C10D                       	dc.b	nE5, $0D
00084A15 E109                       	smpsAlterNote       $09
00084A17 E701                       	dc.b	smpsNoAttack, $01
00084A19 E106                       	smpsAlterNote       $06
00084A1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A1F E10C                       	smpsAlterNote       $0C
00084A21 E701                       	dc.b	smpsNoAttack, $01
00084A23 E110                       	smpsAlterNote       $10
00084A25 E701                       	dc.b	smpsNoAttack, $01
00084A27 E10F                       	smpsAlterNote       $0F
00084A29 E701                       	dc.b	smpsNoAttack, $01
00084A2B E109                       	smpsAlterNote       $09
00084A2D E701                       	dc.b	smpsNoAttack, $01
00084A2F E105                       	smpsAlterNote       $05
00084A31 E701                       	dc.b	smpsNoAttack, $01
00084A33 E109                       	smpsAlterNote       $09
00084A35 E701                       	dc.b	smpsNoAttack, $01
00084A37 E10C                       	smpsAlterNote       $0C
00084A39 E701                       	dc.b	smpsNoAttack, $01
00084A3B E110                       	smpsAlterNote       $10
00084A3D E701                       	dc.b	smpsNoAttack, $01
00084A3F E10C                       	smpsAlterNote       $0C
00084A41 E701                       	dc.b	smpsNoAttack, $01
00084A43 E106                       	smpsAlterNote       $06
00084A45 E701                       	dc.b	smpsNoAttack, $01
00084A47 E105                       	smpsAlterNote       $05
00084A49 E701                       	dc.b	smpsNoAttack, $01
00084A4B E109                       	smpsAlterNote       $09
00084A4D E701                       	dc.b	smpsNoAttack, $01
00084A4F E10F                       	smpsAlterNote       $0F
00084A51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A55 E10C                       	smpsAlterNote       $0C
00084A57 E701                       	dc.b	smpsNoAttack, $01
00084A59 E106                       	smpsAlterNote       $06
00084A5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A5F E10C                       	smpsAlterNote       $0C
00084A61 E701                       	dc.b	smpsNoAttack, $01
00084A63 E10F                       	smpsAlterNote       $0F
00084A65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A69 E109                       	smpsAlterNote       $09
00084A6B E701                       	dc.b	smpsNoAttack, $01
00084A6D E105                       	smpsAlterNote       $05
00084A6F E701                       	dc.b	smpsNoAttack, $01
00084A71 E106                       	smpsAlterNote       $06
00084A73 E701                       	dc.b	smpsNoAttack, $01
00084A75 E10C                       	smpsAlterNote       $0C
00084A77 E701                       	dc.b	smpsNoAttack, $01
00084A79 E110                       	smpsAlterNote       $10
00084A7B E701                       	dc.b	smpsNoAttack, $01
00084A7D E10C                       	smpsAlterNote       $0C
00084A7F E701                       	dc.b	smpsNoAttack, $01
00084A81 E109                       	smpsAlterNote       $09
00084A83 E701                       	dc.b	smpsNoAttack, $01
00084A85 E105                       	smpsAlterNote       $05
00084A87 E701                       	dc.b	smpsNoAttack, $01
00084A89 E109                       	smpsAlterNote       $09
00084A8B E701                       	dc.b	smpsNoAttack, $01
00084A8D E10F                       	smpsAlterNote       $0F
00084A8F E701                       	dc.b	smpsNoAttack, $01
00084A91 E110                       	smpsAlterNote       $10
00084A93 E701                       	dc.b	smpsNoAttack, $01
00084A95 E10C                       	smpsAlterNote       $0C
00084A97 E701                       	dc.b	smpsNoAttack, $01
00084A99 E106                       	smpsAlterNote       $06
00084A9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A9F E109                       	smpsAlterNote       $09
00084AA1 E701                       	dc.b	smpsNoAttack, $01
00084AA3 E10F                       	smpsAlterNote       $0F
00084AA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084AA9 E109                       	smpsAlterNote       $09
00084AAB E701                       	dc.b	smpsNoAttack, $01
00084AAD E106                       	smpsAlterNote       $06
00084AAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084AB3 E10C                       	smpsAlterNote       $0C
00084AB5 E701                       	dc.b	smpsNoAttack, $01
00084AB7 E110                       	smpsAlterNote       $10
00084AB9 E701                       	dc.b	smpsNoAttack, $01
00084ABB E10F                       	smpsAlterNote       $0F
00084ABD E701                       	dc.b	smpsNoAttack, $01
00084ABF E109                       	smpsAlterNote       $09
00084AC1 E701                       	dc.b	smpsNoAttack, $01
00084AC3 E105                       	smpsAlterNote       $05
00084AC5 E701                       	dc.b	smpsNoAttack, $01
00084AC7 E109                       	smpsAlterNote       $09
00084AC9 E701                       	dc.b	smpsNoAttack, $01
00084ACB E10F                       	smpsAlterNote       $0F
00084ACD E701                       	dc.b	smpsNoAttack, $01
00084ACF E110                       	smpsAlterNote       $10
00084AD1 E701                       	dc.b	smpsNoAttack, $01
00084AD3 E10C                       	smpsAlterNote       $0C
00084AD5 E701                       	dc.b	smpsNoAttack, $01
00084AD7 E106                       	smpsAlterNote       $06
00084AD9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084ADD E109                       	smpsAlterNote       $09
00084ADF E701                       	dc.b	smpsNoAttack, $01
00084AE1 E10F                       	smpsAlterNote       $0F
00084AE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084AE7 E109                       	smpsAlterNote       $09
00084AE9 E701                       	dc.b	smpsNoAttack, $01
00084AEB E106                       	smpsAlterNote       $06
00084AED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084AF1 E10C                       	smpsAlterNote       $0C
00084AF3 E701                       	dc.b	smpsNoAttack, $01
00084AF5 E110                       	smpsAlterNote       $10
00084AF7 E701                       	dc.b	smpsNoAttack, $01
00084AF9 E10F                       	smpsAlterNote       $0F
00084AFB E701                       	dc.b	smpsNoAttack, $01
00084AFD E109                       	smpsAlterNote       $09
00084AFF E701                       	dc.b	smpsNoAttack, $01
00084B01 E105                       	smpsAlterNote       $05
00084B03 E701                       	dc.b	smpsNoAttack, $01
00084B05 E109                       	smpsAlterNote       $09
00084B07 E701                       	dc.b	smpsNoAttack, $01
00084B09 E10C                       	smpsAlterNote       $0C
00084B0B E701                       	dc.b	smpsNoAttack, $01
00084B0D E110                       	smpsAlterNote       $10
00084B0F E701                       	dc.b	smpsNoAttack, $01
00084B11 E10C                       	smpsAlterNote       $0C
00084B13 E701                       	dc.b	smpsNoAttack, $01
00084B15 E106                       	smpsAlterNote       $06
00084B17 E701                       	dc.b	smpsNoAttack, $01
00084B19 E105                       	smpsAlterNote       $05
00084B1B E701                       	dc.b	smpsNoAttack, $01
00084B1D E109                       	smpsAlterNote       $09
00084B1F E701                       	dc.b	smpsNoAttack, $01
00084B21 E10F                       	smpsAlterNote       $0F
00084B23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B27 E10C                       	smpsAlterNote       $0C
00084B29 E701                       	dc.b	smpsNoAttack, $01
00084B2B E106                       	smpsAlterNote       $06
00084B2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B31 E10C                       	smpsAlterNote       $0C
00084B33 E701                       	dc.b	smpsNoAttack, $01
00084B35 E10F                       	smpsAlterNote       $0F
00084B37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B3B E109                       	smpsAlterNote       $09
00084B3D E701                       	dc.b	smpsNoAttack, $01
00084B3F E105                       	smpsAlterNote       $05
00084B41 E701                       	dc.b	smpsNoAttack, $01
00084B43 E106                       	smpsAlterNote       $06
00084B45 E701                       	dc.b	smpsNoAttack, $01
00084B47 E10C                       	smpsAlterNote       $0C
00084B49 E701                       	dc.b	smpsNoAttack, $01
00084B4B E110                       	smpsAlterNote       $10
00084B4D E701                       	dc.b	smpsNoAttack, $01
00084B4F E10C                       	smpsAlterNote       $0C
00084B51 E701                       	dc.b	smpsNoAttack, $01
00084B53 E109                       	smpsAlterNote       $09
00084B55 E701                       	dc.b	smpsNoAttack, $01
00084B57 E105                       	smpsAlterNote       $05
00084B59 E701                       	dc.b	smpsNoAttack, $01
00084B5B E109                       	smpsAlterNote       $09
00084B5D E701                       	dc.b	smpsNoAttack, $01
00084B5F E10F                       	smpsAlterNote       $0F
00084B61 E701                       	dc.b	smpsNoAttack, $01
00084B63 E110                       	smpsAlterNote       $10
00084B65 E701                       	dc.b	smpsNoAttack, $01
00084B67 E10C                       	smpsAlterNote       $0C
00084B69 E701                       	dc.b	smpsNoAttack, $01
00084B6B E106                       	smpsAlterNote       $06
00084B6D E701                       	dc.b	smpsNoAttack, $01
00084B6F E10B                       	smpsAlterNote       $0B
00084B71 BF02                       	dc.b	nD5, $02
00084B73 E10C                       	smpsAlterNote       $0C
00084B75 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
00084B7B E109                       	smpsAlterNote       $09
00084B7D E701                       	dc.b	smpsNoAttack, $01
00084B7F E105                       	smpsAlterNote       $05
00084B81 E701                       	dc.b	smpsNoAttack, $01
00084B83 E109                       	smpsAlterNote       $09
00084B85 E701                       	dc.b	smpsNoAttack, $01
00084B87 E10F                       	smpsAlterNote       $0F
00084B89 E701                       	dc.b	smpsNoAttack, $01
00084B8B E110                       	smpsAlterNote       $10
00084B8D E701                       	dc.b	smpsNoAttack, $01
00084B8F E10C                       	smpsAlterNote       $0C
00084B91 E701                       	dc.b	smpsNoAttack, $01
00084B93 E106                       	smpsAlterNote       $06
00084B95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B99 E109                       	smpsAlterNote       $09
00084B9B E701                       	dc.b	smpsNoAttack, $01
00084B9D E10F                       	smpsAlterNote       $0F
00084B9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BA3 E109                       	smpsAlterNote       $09
00084BA5 E701                       	dc.b	smpsNoAttack, $01
00084BA7 E106                       	smpsAlterNote       $06
00084BA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BAD E10C                       	smpsAlterNote       $0C
00084BAF E701                       	dc.b	smpsNoAttack, $01
00084BB1 E110                       	smpsAlterNote       $10
00084BB3 E701                       	dc.b	smpsNoAttack, $01
00084BB5 E10F                       	smpsAlterNote       $0F
00084BB7 E701                       	dc.b	smpsNoAttack, $01
00084BB9 E109                       	smpsAlterNote       $09
00084BBB E701                       	dc.b	smpsNoAttack, $01
00084BBD E105                       	smpsAlterNote       $05
00084BBF E701                       	dc.b	smpsNoAttack, $01
00084BC1 E109                       	smpsAlterNote       $09
00084BC3 E701                       	dc.b	smpsNoAttack, $01
00084BC5 E10C                       	smpsAlterNote       $0C
00084BC7 E701                       	dc.b	smpsNoAttack, $01
00084BC9 E110                       	smpsAlterNote       $10
00084BCB E701                       	dc.b	smpsNoAttack, $01
00084BCD E10C                       	smpsAlterNote       $0C
00084BCF E701                       	dc.b	smpsNoAttack, $01
00084BD1 E106                       	smpsAlterNote       $06
00084BD3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084BD7 E10D                       	smpsAlterNote       $0D
00084BD9 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
00084BE1 E10C                       	smpsAlterNote       $0C
00084BE3 C10D                       	dc.b	nE5, $0D
00084BE5 E106                       	smpsAlterNote       $06
00084BE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BEB E109                       	smpsAlterNote       $09
00084BED E701                       	dc.b	smpsNoAttack, $01
00084BEF E10F                       	smpsAlterNote       $0F
00084BF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BF5 E109                       	smpsAlterNote       $09
00084BF7 E701                       	dc.b	smpsNoAttack, $01
00084BF9 E106                       	smpsAlterNote       $06
00084BFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BFF E10C                       	smpsAlterNote       $0C
00084C01 E701                       	dc.b	smpsNoAttack, $01
00084C03 E110                       	smpsAlterNote       $10
00084C05 E701                       	dc.b	smpsNoAttack, $01
00084C07 E10F                       	smpsAlterNote       $0F
00084C09 E701                       	dc.b	smpsNoAttack, $01
00084C0B E109                       	smpsAlterNote       $09
00084C0D E701                       	dc.b	smpsNoAttack, $01
00084C0F E105                       	smpsAlterNote       $05
00084C11 E701                       	dc.b	smpsNoAttack, $01
00084C13 E106                       	smpsAlterNote       $06
00084C15 800F                       	dc.b	nRst, $0F
00084C19 E6FF                       	smpsAlterVol        $FF
00084C1B E10F                       	smpsAlterNote       $0F
00084C1D BA01                       	dc.b	nA4, $01
00084C1F E110                       	smpsAlterNote       $10
00084C21 BB02                       	dc.b	nBb4, $02
00084C23 E10F                       	smpsAlterNote       $0F
00084C25 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
00084C2B E10B                       	smpsAlterNote       $0B
00084C2D BF03 8001                  	dc.b	nD5, $03, nRst, $01
00084C31 E10C                       	smpsAlterNote       $0C
00084C33 C103                       	dc.b	nE5, $03
00084C35 E10D                       	smpsAlterNote       $0D
00084C37 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00084C41 E10B                       	smpsAlterNote       $0B
00084C43 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
00084C47 E104                       	smpsAlterNote       $04
00084C49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C4D E10A                       	smpsAlterNote       $0A
00084C4F E701                       	dc.b	smpsNoAttack, $01
00084C51 E10D                       	smpsAlterNote       $0D
00084C53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C57 E107                       	smpsAlterNote       $07
00084C59 E701                       	dc.b	smpsNoAttack, $01
00084C5B E104                       	smpsAlterNote       $04
00084C5D 8001                       	dc.b	nRst, $01
00084C5F E110                       	smpsAlterNote       $10
00084C61 C703                       	dc.b	nBb5, $03
00084C63 E10F                       	smpsAlterNote       $0F
00084C65 C603 8001                  	dc.b	nA5, $03, nRst, $01
00084C69 E10D                       	smpsAlterNote       $0D
00084C6B C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00084C6F E10C                       	smpsAlterNote       $0C
00084C71 E701                       	dc.b	smpsNoAttack, $01
00084C73 E108                       	smpsAlterNote       $08
00084C75 E701                       	dc.b	smpsNoAttack, $01
00084C77 E109                       	smpsAlterNote       $09
00084C79 E701                       	dc.b	smpsNoAttack, $01
00084C7B E10F                       	smpsAlterNote       $0F
00084C7D E701                       	dc.b	smpsNoAttack, $01
00084C7F E113                       	smpsAlterNote       $13
00084C81 E701                       	dc.b	smpsNoAttack, $01
00084C83 E10F                       	smpsAlterNote       $0F
00084C85 E701                       	dc.b	smpsNoAttack, $01
00084C87 E10C                       	smpsAlterNote       $0C
00084C89 E701                       	dc.b	smpsNoAttack, $01
00084C8B E108                       	smpsAlterNote       $08
00084C8D E701                       	dc.b	smpsNoAttack, $01
00084C8F E10C                       	smpsAlterNote       $0C
00084C91 E701                       	dc.b	smpsNoAttack, $01
00084C93 E112                       	smpsAlterNote       $12
00084C95 E701                       	dc.b	smpsNoAttack, $01
00084C97 E113                       	smpsAlterNote       $13
00084C99 E701                       	dc.b	smpsNoAttack, $01
00084C9B E10F                       	smpsAlterNote       $0F
00084C9D E701                       	dc.b	smpsNoAttack, $01
00084C9F E109                       	smpsAlterNote       $09
00084CA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084CA5 E10C                       	smpsAlterNote       $0C
00084CA7 E701                       	dc.b	smpsNoAttack, $01
00084CA9 E112                       	smpsAlterNote       $12
00084CAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084CAF E10C                       	smpsAlterNote       $0C
00084CB1 E701                       	dc.b	smpsNoAttack, $01
00084CB3 E109                       	smpsAlterNote       $09
00084CB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084CB9 E10F                       	smpsAlterNote       $0F
00084CBB E701                       	dc.b	smpsNoAttack, $01
00084CBD E113                       	smpsAlterNote       $13
00084CBF E701                       	dc.b	smpsNoAttack, $01
00084CC1 E112                       	smpsAlterNote       $12
00084CC3 E701                       	dc.b	smpsNoAttack, $01
00084CC5 E10C                       	smpsAlterNote       $0C
00084CC7 E701                       	dc.b	smpsNoAttack, $01
00084CC9 E108                       	smpsAlterNote       $08
00084CCB E701                       	dc.b	smpsNoAttack, $01
00084CCD E10C                       	smpsAlterNote       $0C
00084CCF E701                       	dc.b	smpsNoAttack, $01
00084CD1 E10F                       	smpsAlterNote       $0F
00084CD3 E701                       	dc.b	smpsNoAttack, $01
00084CD5 E113                       	smpsAlterNote       $13
00084CD7 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00084CDB E10B                       	smpsAlterNote       $0B
00084CDD BF03                       	dc.b	nD5, $03
00084CDF E10C                       	smpsAlterNote       $0C
00084CE1 C103 8001                  	dc.b	nE5, $03, nRst, $01
00084CE5 E10D                       	smpsAlterNote       $0D
00084CE7 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00084CF1 E10B                       	smpsAlterNote       $0B
00084CF3 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00084CFF E110                       	smpsAlterNote       $10
00084D01 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00084D05 E10F                       	smpsAlterNote       $0F
00084D07 C604                       	dc.b	nA5, $04
00084D09 E10D                       	smpsAlterNote       $0D
00084D0B C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00084D11 E109                       	smpsAlterNote       $09
00084D13 E701                       	dc.b	smpsNoAttack, $01
00084D15 E108                       	smpsAlterNote       $08
00084D17 E701                       	dc.b	smpsNoAttack, $01
00084D19 E10C                       	smpsAlterNote       $0C
00084D1B E701                       	dc.b	smpsNoAttack, $01
00084D1D E112                       	smpsAlterNote       $12
00084D1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D23 E10F                       	smpsAlterNote       $0F
00084D25 E701                       	dc.b	smpsNoAttack, $01
00084D27 E109                       	smpsAlterNote       $09
00084D29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D2D E10F                       	smpsAlterNote       $0F
00084D2F E701                       	dc.b	smpsNoAttack, $01
00084D31 E112                       	smpsAlterNote       $12
00084D33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D37 E10C                       	smpsAlterNote       $0C
00084D39 E701                       	dc.b	smpsNoAttack, $01
00084D3B E108                       	smpsAlterNote       $08
00084D3D E701                       	dc.b	smpsNoAttack, $01
00084D3F E109                       	smpsAlterNote       $09
00084D41 E701                       	dc.b	smpsNoAttack, $01
00084D43 E10F                       	smpsAlterNote       $0F
00084D45 E701                       	dc.b	smpsNoAttack, $01
00084D47 E113                       	smpsAlterNote       $13
00084D49 E701                       	dc.b	smpsNoAttack, $01
00084D4B E10F                       	smpsAlterNote       $0F
00084D4D E701                       	dc.b	smpsNoAttack, $01
00084D4F E10C                       	smpsAlterNote       $0C
00084D51 E701                       	dc.b	smpsNoAttack, $01
00084D53 E108                       	smpsAlterNote       $08
00084D55 E701                       	dc.b	smpsNoAttack, $01
00084D57 E10C                       	smpsAlterNote       $0C
00084D59 E701                       	dc.b	smpsNoAttack, $01
00084D5B E112                       	smpsAlterNote       $12
00084D5D E701                       	dc.b	smpsNoAttack, $01
00084D5F E113                       	smpsAlterNote       $13
00084D61 E701                       	dc.b	smpsNoAttack, $01
00084D63 E10F                       	smpsAlterNote       $0F
00084D65 E701                       	dc.b	smpsNoAttack, $01
00084D67 E109                       	smpsAlterNote       $09
00084D69 E701                       	dc.b	smpsNoAttack, $01
00084D6B E10D                       	smpsAlterNote       $0D
00084D6D C402                       	dc.b	nG5, $02
00084D6F E10F                       	smpsAlterNote       $0F
00084D71 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00084D7B E10D                       	smpsAlterNote       $0D
00084D7D C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00084D83 E10B                       	smpsAlterNote       $0B
00084D85 BF0D                       	dc.b	nD5, $0D
00084D87 E108                       	smpsAlterNote       $08
00084D89 E701                       	dc.b	smpsNoAttack, $01
00084D8B E104                       	smpsAlterNote       $04
00084D8D E701                       	dc.b	smpsNoAttack, $01
00084D8F E105                       	smpsAlterNote       $05
00084D91 E701                       	dc.b	smpsNoAttack, $01
00084D93 E10B                       	smpsAlterNote       $0B
00084D95 E701                       	dc.b	smpsNoAttack, $01
00084D97 E10F                       	smpsAlterNote       $0F
00084D99 E701                       	dc.b	smpsNoAttack, $01
00084D9B E10B                       	smpsAlterNote       $0B
00084D9D E701                       	dc.b	smpsNoAttack, $01
00084D9F E108                       	smpsAlterNote       $08
00084DA1 E701                       	dc.b	smpsNoAttack, $01
00084DA3 E104                       	smpsAlterNote       $04
00084DA5 E701                       	dc.b	smpsNoAttack, $01
00084DA7 E108                       	smpsAlterNote       $08
00084DA9 E701                       	dc.b	smpsNoAttack, $01
00084DAB E10E                       	smpsAlterNote       $0E
00084DAD E701                       	dc.b	smpsNoAttack, $01
00084DAF E10F                       	smpsAlterNote       $0F
00084DB1 E701                       	dc.b	smpsNoAttack, $01
00084DB3 E10C                       	smpsAlterNote       $0C
00084DB5 C101                       	dc.b	nE5, $01
00084DB7 E10D                       	smpsAlterNote       $0D
00084DB9 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00084DC1 E10F                       	smpsAlterNote       $0F
00084DC3 C607                       	dc.b	nA5, $07
00084DC5 E10C                       	smpsAlterNote       $0C
00084DC7 CD07                       	dc.b	nE6, $07
00084DC9 E10D                       	smpsAlterNote       $0D
00084DCB CE06 8001                  	dc.b	nF6, $06, nRst, $01
00084DCF E10C                       	smpsAlterNote       $0C
00084DD1 CD03                       	dc.b	nE6, $03
00084DD3 E10A                       	smpsAlterNote       $0A
00084DD5 C903 8001                  	dc.b	nC6, $03, nRst, $01
00084DD9 E10D                       	smpsAlterNote       $0D
00084DDB C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00084DE1 E10A                       	smpsAlterNote       $0A
00084DE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084DE7 E110                       	smpsAlterNote       $10
00084DE9 E701                       	dc.b	smpsNoAttack, $01
00084DEB E114                       	smpsAlterNote       $14
00084DED E701                       	dc.b	smpsNoAttack, $01
00084DEF E113                       	smpsAlterNote       $13
00084DF1 E701                       	dc.b	smpsNoAttack, $01
00084DF3 E10D                       	smpsAlterNote       $0D
00084DF5 E701                       	dc.b	smpsNoAttack, $01
00084DF7 E109                       	smpsAlterNote       $09
00084DF9 E701                       	dc.b	smpsNoAttack, $01
00084DFB E10D                       	smpsAlterNote       $0D
00084DFD E701                       	dc.b	smpsNoAttack, $01
00084DFF E110                       	smpsAlterNote       $10
00084E01 E701                       	dc.b	smpsNoAttack, $01
00084E03 E114                       	smpsAlterNote       $14
00084E05 E701                       	dc.b	smpsNoAttack, $01
00084E07 E10F                       	smpsAlterNote       $0F
00084E09 C607                       	dc.b	nA5, $07
00084E0B E10D                       	smpsAlterNote       $0D
00084E0D C40D                       	dc.b	nG5, $0D
00084E0F E10A                       	smpsAlterNote       $0A
00084E11 E701                       	dc.b	smpsNoAttack, $01
00084E13 E106                       	smpsAlterNote       $06
00084E15 E701                       	dc.b	smpsNoAttack, $01
00084E17 E10A                       	smpsAlterNote       $0A
00084E19 E701                       	dc.b	smpsNoAttack, $01
00084E1B E10D                       	smpsAlterNote       $0D
00084E1D E701                       	dc.b	smpsNoAttack, $01
00084E1F E111                       	smpsAlterNote       $11
00084E21 E701                       	dc.b	smpsNoAttack, $01
00084E23 E10D                       	smpsAlterNote       $0D
00084E25 E701                       	dc.b	smpsNoAttack, $01
00084E27 E107                       	smpsAlterNote       $07
00084E29 E701                       	dc.b	smpsNoAttack, $01
00084E2B E106                       	smpsAlterNote       $06
00084E2D E701                       	dc.b	smpsNoAttack, $01
00084E2F E10A                       	smpsAlterNote       $0A
00084E31 E701                       	dc.b	smpsNoAttack, $01
00084E33 E110                       	smpsAlterNote       $10
00084E35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E39 E10D                       	smpsAlterNote       $0D
00084E3B E701                       	dc.b	smpsNoAttack, $01
00084E3D E107                       	smpsAlterNote       $07
00084E3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E43 E10F                       	smpsAlterNote       $0F
00084E45 C60E                       	dc.b	nA5, $0E
00084E47 E109                       	smpsAlterNote       $09
00084E49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E4D E10F                       	smpsAlterNote       $0F
00084E4F E701                       	dc.b	smpsNoAttack, $01
00084E51 E112                       	smpsAlterNote       $12
00084E53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E57 E10C                       	smpsAlterNote       $0C
00084E59 E701                       	dc.b	smpsNoAttack, $01
00084E5B E108                       	smpsAlterNote       $08
00084E5D E701                       	dc.b	smpsNoAttack, $01
00084E5F E109                       	smpsAlterNote       $09
00084E61 E701                       	dc.b	smpsNoAttack, $01
00084E63 E10F                       	smpsAlterNote       $0F
00084E65 E701                       	dc.b	smpsNoAttack, $01
00084E67 E113                       	smpsAlterNote       $13
00084E69 E701                       	dc.b	smpsNoAttack, $01
00084E6B E10F                       	smpsAlterNote       $0F
00084E6D E701                       	dc.b	smpsNoAttack, $01
00084E6F E10C                       	smpsAlterNote       $0C
00084E71 E701                       	dc.b	smpsNoAttack, $01
00084E73 E108                       	smpsAlterNote       $08
00084E75 E701                       	dc.b	smpsNoAttack, $01
00084E77 E109                       	smpsAlterNote       $09
00084E79 8001                       	dc.b	nRst, $01
00084E7B E110                       	smpsAlterNote       $10
00084E7D C70D                       	dc.b	nBb5, $0D
00084E7F E10D                       	smpsAlterNote       $0D
00084E81 E701                       	dc.b	smpsNoAttack, $01
00084E83 E109                       	smpsAlterNote       $09
00084E85 E701                       	dc.b	smpsNoAttack, $01
00084E87 E10D                       	smpsAlterNote       $0D
00084E89 E701                       	dc.b	smpsNoAttack, $01
00084E8B E113                       	smpsAlterNote       $13
00084E8D E701                       	dc.b	smpsNoAttack, $01
00084E8F E114                       	smpsAlterNote       $14
00084E91 E701                       	dc.b	smpsNoAttack, $01
00084E93 E110                       	smpsAlterNote       $10
00084E95 E701                       	dc.b	smpsNoAttack, $01
00084E97 E10A                       	smpsAlterNote       $0A
00084E99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E9D E10D                       	smpsAlterNote       $0D
00084E9F E701                       	dc.b	smpsNoAttack, $01
00084EA1 E113                       	smpsAlterNote       $13
00084EA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084EA7 E10D                       	smpsAlterNote       $0D
00084EA9 E701                       	dc.b	smpsNoAttack, $01
00084EAB E10A                       	smpsAlterNote       $0A
00084EAD E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
00084EB7 E10B                       	smpsAlterNote       $0B
00084EB9 8001                       	dc.b	nRst, $01
00084EBB E10C                       	smpsAlterNote       $0C
00084EBD CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
00084EC1 E10B                       	smpsAlterNote       $0B
00084EC3 CB0D                       	dc.b	nD6, $0D
00084EC5 E105                       	smpsAlterNote       $05
00084EC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084ECB E108                       	smpsAlterNote       $08
00084ECD E701                       	dc.b	smpsNoAttack, $01
00084ECF E10E                       	smpsAlterNote       $0E
00084ED1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084ED5 E108                       	smpsAlterNote       $08
00084ED7 E701                       	dc.b	smpsNoAttack, $01
00084ED9 E105                       	smpsAlterNote       $05
00084EDB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084EDF E10B                       	smpsAlterNote       $0B
00084EE1 E701                       	dc.b	smpsNoAttack, $01
00084EE3 E10F                       	smpsAlterNote       $0F
00084EE5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084EE9 E10C                       	smpsAlterNote       $0C
00084EEB CC0D                       	dc.b	nEb6, $0D
00084EED E106                       	smpsAlterNote       $06
00084EEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084EF3 E109                       	smpsAlterNote       $09
00084EF5 E701                       	dc.b	smpsNoAttack, $01
00084EF7 E10C                       	smpsAlterNote       $0C
00084EF9 8001                       	dc.b	nRst, $01
00084EFB E10A                       	smpsAlterNote       $0A
00084EFD C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00084F09 CB0E                       	dc.b	nD6, $0E
00084F0B E105                       	smpsAlterNote       $05
00084F0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F11 E10B                       	smpsAlterNote       $0B
00084F13 E701                       	dc.b	smpsNoAttack, $01
00084F15 E10E                       	smpsAlterNote       $0E
00084F17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F1B E108                       	smpsAlterNote       $08
00084F1D E701                       	dc.b	smpsNoAttack, $01
00084F1F E104                       	smpsAlterNote       $04
00084F21 E701                       	dc.b	smpsNoAttack, $01
00084F23 E105                       	smpsAlterNote       $05
00084F25 E701                       	dc.b	smpsNoAttack, $01
00084F27 E10B                       	smpsAlterNote       $0B
00084F29 E701                       	dc.b	smpsNoAttack, $01
00084F2B E10F                       	smpsAlterNote       $0F
00084F2D E701                       	dc.b	smpsNoAttack, $01
00084F2F E10D                       	smpsAlterNote       $0D
00084F31 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
00084F35 E10C                       	smpsAlterNote       $0C
00084F37 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00084F3B E10A                       	smpsAlterNote       $0A
00084F3D C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00084F49 CB0D                       	dc.b	nD6, $0D
00084F4B E108                       	smpsAlterNote       $08
00084F4D E701                       	dc.b	smpsNoAttack, $01
00084F4F E104                       	smpsAlterNote       $04
00084F51 E701                       	dc.b	smpsNoAttack, $01
00084F53 E105                       	smpsAlterNote       $05
00084F55 E701                       	dc.b	smpsNoAttack, $01
00084F57 E10B                       	smpsAlterNote       $0B
00084F59 E701                       	dc.b	smpsNoAttack, $01
00084F5B E10F                       	smpsAlterNote       $0F
00084F5D E701                       	dc.b	smpsNoAttack, $01
00084F5F E10B                       	smpsAlterNote       $0B
00084F61 E701                       	dc.b	smpsNoAttack, $01
00084F63 E108                       	smpsAlterNote       $08
00084F65 E701                       	dc.b	smpsNoAttack, $01
00084F67 E104                       	smpsAlterNote       $04
00084F69 E701                       	dc.b	smpsNoAttack, $01
00084F6B E108                       	smpsAlterNote       $08
00084F6D E701                       	dc.b	smpsNoAttack, $01
00084F6F E10E                       	smpsAlterNote       $0E
00084F71 E701                       	dc.b	smpsNoAttack, $01
00084F73 E10F                       	smpsAlterNote       $0F
00084F75 E701                       	dc.b	smpsNoAttack, $01
00084F77 E10C                       	smpsAlterNote       $0C
00084F79 CC0D                       	dc.b	nEb6, $0D
00084F7B E109                       	smpsAlterNote       $09
00084F7D E701                       	dc.b	smpsNoAttack, $01
00084F7F E105                       	smpsAlterNote       $05
00084F81 E701                       	dc.b	smpsNoAttack, $01
00084F83 E106                       	smpsAlterNote       $06
00084F85 E701                       	dc.b	smpsNoAttack, $01
00084F87 E10C                       	smpsAlterNote       $0C
00084F89 E701                       	dc.b	smpsNoAttack, $01
00084F8B E10A                       	smpsAlterNote       $0A
00084F8D C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
00084F99 CB0D                       	dc.b	nD6, $0D
00084F9B E108                       	smpsAlterNote       $08
00084F9D E701                       	dc.b	smpsNoAttack, $01
00084F9F E104                       	smpsAlterNote       $04
00084FA1 E701                       	dc.b	smpsNoAttack, $01
00084FA3 E108                       	smpsAlterNote       $08
00084FA5 E701                       	dc.b	smpsNoAttack, $01
00084FA7 E10B                       	smpsAlterNote       $0B
00084FA9 E701                       	dc.b	smpsNoAttack, $01
00084FAB E10F                       	smpsAlterNote       $0F
00084FAD E701                       	dc.b	smpsNoAttack, $01
00084FAF E10B                       	smpsAlterNote       $0B
00084FB1 E701                       	dc.b	smpsNoAttack, $01
00084FB3 E105                       	smpsAlterNote       $05
00084FB5 E701                       	dc.b	smpsNoAttack, $01
00084FB7 E104                       	smpsAlterNote       $04
00084FB9 E701                       	dc.b	smpsNoAttack, $01
00084FBB E108                       	smpsAlterNote       $08
00084FBD E701                       	dc.b	smpsNoAttack, $01
00084FBF E10E                       	smpsAlterNote       $0E
00084FC1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084FC5 E10B                       	smpsAlterNote       $0B
00084FC7 E701                       	dc.b	smpsNoAttack, $01
00084FC9 E105                       	smpsAlterNote       $05
00084FCB E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00084FD3 03                         	dc.b	$03
00084FD4 E601                       	smpsAlterVol        $01
00084FD6 F6F1 D1                    	smpsJump            music84_Jump01
00084FD9                            
00084FD9                            ; FM5 Data
00084FD9                            music84_FM5:
00084FDB E080                       	smpsPan             panLeft, $00
00084FDD 8003                       	dc.b	nRst, $03
00084FDF E10D                       	smpsAlterNote       $0D
00084FE1 C203 8008                  	dc.b	nF5, $03, nRst, $08
00084FE5 E10C                       	smpsAlterNote       $0C
00084FE7 C103 800A                  	dc.b	nE5, $03, nRst, $0A
00084FEB E10F                       	smpsAlterNote       $0F
00084FED BA03 8006                  	dc.b	nA4, $03, nRst, $06
00084FF3 E6FE                       	smpsAlterVol        $FE
00084FF5 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00084FFB E10D                       	smpsAlterNote       $0D
00084FFD C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00085003 E10C                       	smpsAlterNote       $0C
00085005 C102 8001                  	dc.b	nE5, $02, nRst, $01
00085009 E10A                       	smpsAlterNote       $0A
0008500B BD01 8001                  	dc.b	nC5, $01, nRst, $01
00085011 03                         	dc.b	$03
00085012                            
00085012                            music84_Jump00:
00085012 8004                       	dc.b	nRst, $04
00085014 E602                       	smpsAlterVol        $02
00085016 E10D                       	smpsAlterNote       $0D
00085018 B60D                       	dc.b	nF4, $0D
0008501A E107                       	smpsAlterNote       $07
0008501C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085020 E10A                       	smpsAlterNote       $0A
00085022 E701                       	dc.b	smpsNoAttack, $01
00085024 E110                       	smpsAlterNote       $10
00085026 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008502A E10A                       	smpsAlterNote       $0A
0008502C E701                       	dc.b	smpsNoAttack, $01
0008502E E107                       	smpsAlterNote       $07
00085030 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085034 E10D                       	smpsAlterNote       $0D
00085036 E701                       	dc.b	smpsNoAttack, $01
00085038 E111                       	smpsAlterNote       $11
0008503A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008503E E10D                       	smpsAlterNote       $0D
00085040 B80D                       	dc.b	nG4, $0D
00085042 E107                       	smpsAlterNote       $07
00085044 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085048 E10A                       	smpsAlterNote       $0A
0008504A E701                       	dc.b	smpsNoAttack, $01
0008504C E110                       	smpsAlterNote       $10
0008504E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085052 E10A                       	smpsAlterNote       $0A
00085054 E701                       	dc.b	smpsNoAttack, $01
00085056 E107                       	smpsAlterNote       $07
00085058 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008505C E10D                       	smpsAlterNote       $0D
0008505E E701                       	dc.b	smpsNoAttack, $01
00085060 E111                       	smpsAlterNote       $11
00085062 E701                       	dc.b	smpsNoAttack, $01
00085064 E110                       	smpsAlterNote       $10
00085066 E701                       	dc.b	smpsNoAttack, $01
00085068 E10A                       	smpsAlterNote       $0A
0008506A E701                       	dc.b	smpsNoAttack, $01
0008506C E106                       	smpsAlterNote       $06
0008506E E701                       	dc.b	smpsNoAttack, $01
00085070 E10A                       	smpsAlterNote       $0A
00085072 E701                       	dc.b	smpsNoAttack, $01
00085074 E10D                       	smpsAlterNote       $0D
00085076 E701                       	dc.b	smpsNoAttack, $01
00085078 E111                       	smpsAlterNote       $11
0008507A E701                       	dc.b	smpsNoAttack, $01
0008507C E10D                       	smpsAlterNote       $0D
0008507E E701                       	dc.b	smpsNoAttack, $01
00085080 E10F                       	smpsAlterNote       $0F
00085082 BA0E                       	dc.b	nA4, $0E
00085084 E109                       	smpsAlterNote       $09
00085086 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008508A E10F                       	smpsAlterNote       $0F
0008508C E701                       	dc.b	smpsNoAttack, $01
0008508E E112                       	smpsAlterNote       $12
00085090 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085094 E10C                       	smpsAlterNote       $0C
00085096 E701                       	dc.b	smpsNoAttack, $01
00085098 E108                       	smpsAlterNote       $08
0008509A E701                       	dc.b	smpsNoAttack, $01
0008509C E109                       	smpsAlterNote       $09
0008509E E701                       	dc.b	smpsNoAttack, $01
000850A0 E10F                       	smpsAlterNote       $0F
000850A2 E701                       	dc.b	smpsNoAttack, $01
000850A4 E113                       	smpsAlterNote       $13
000850A6 E701                       	dc.b	smpsNoAttack, $01
000850A8 E10F                       	smpsAlterNote       $0F
000850AA E701                       	dc.b	smpsNoAttack, $01
000850AC E109                       	smpsAlterNote       $09
000850AE E701                       	dc.b	smpsNoAttack, $01
000850B0 E108                       	smpsAlterNote       $08
000850B2 E701                       	dc.b	smpsNoAttack, $01
000850B4 E10C                       	smpsAlterNote       $0C
000850B6 E701                       	dc.b	smpsNoAttack, $01
000850B8 E112                       	smpsAlterNote       $12
000850BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850BE E10F                       	smpsAlterNote       $0F
000850C0 E701                       	dc.b	smpsNoAttack, $01
000850C2 E109                       	smpsAlterNote       $09
000850C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850C8 E10F                       	smpsAlterNote       $0F
000850CA E701                       	dc.b	smpsNoAttack, $01
000850CC E112                       	smpsAlterNote       $12
000850CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850D2 E10C                       	smpsAlterNote       $0C
000850D4 E701                       	dc.b	smpsNoAttack, $01
000850D6 E108                       	smpsAlterNote       $08
000850D8 E701                       	dc.b	smpsNoAttack, $01
000850DA E109                       	smpsAlterNote       $09
000850DC E701                       	dc.b	smpsNoAttack, $01
000850DE E10F                       	smpsAlterNote       $0F
000850E0 E701                       	dc.b	smpsNoAttack, $01
000850E2 E113                       	smpsAlterNote       $13
000850E4 E701                       	dc.b	smpsNoAttack, $01
000850E6 E10F                       	smpsAlterNote       $0F
000850E8 E701                       	dc.b	smpsNoAttack, $01
000850EA E10C                       	smpsAlterNote       $0C
000850EC E701                       	dc.b	smpsNoAttack, $01
000850EE E108                       	smpsAlterNote       $08
000850F0 E701                       	dc.b	smpsNoAttack, $01
000850F2 E109                       	smpsAlterNote       $09
000850F4 8001                       	dc.b	nRst, $01
000850F6 E10C                       	smpsAlterNote       $0C
000850F8 B50A                       	dc.b	nE4, $0A
000850FA E10D                       	smpsAlterNote       $0D
000850FC B60D                       	dc.b	nF4, $0D
000850FE E10A                       	smpsAlterNote       $0A
00085100 E701                       	dc.b	smpsNoAttack, $01
00085102 E106                       	smpsAlterNote       $06
00085104 E701                       	dc.b	smpsNoAttack, $01
00085106 E107                       	smpsAlterNote       $07
00085108 E701                       	dc.b	smpsNoAttack, $01
0008510A E10D                       	smpsAlterNote       $0D
0008510C E701                       	dc.b	smpsNoAttack, $01
0008510E E111                       	smpsAlterNote       $11
00085110 E701                       	dc.b	smpsNoAttack, $01
00085112 E10D                       	smpsAlterNote       $0D
00085114 E701                       	dc.b	smpsNoAttack, $01
00085116 E10A                       	smpsAlterNote       $0A
00085118 E701                       	dc.b	smpsNoAttack, $01
0008511A E106                       	smpsAlterNote       $06
0008511C E701                       	dc.b	smpsNoAttack, $01
0008511E E10A                       	smpsAlterNote       $0A
00085120 E701                       	dc.b	smpsNoAttack, $01
00085122 E110                       	smpsAlterNote       $10
00085124 E701                       	dc.b	smpsNoAttack, $01
00085126 E111                       	smpsAlterNote       $11
00085128 E701                       	dc.b	smpsNoAttack, $01
0008512A E10D                       	smpsAlterNote       $0D
0008512C B80D                       	dc.b	nG4, $0D
0008512E E10A                       	smpsAlterNote       $0A
00085130 E701                       	dc.b	smpsNoAttack, $01
00085132 E106                       	smpsAlterNote       $06
00085134 E701                       	dc.b	smpsNoAttack, $01
00085136 E107                       	smpsAlterNote       $07
00085138 E701                       	dc.b	smpsNoAttack, $01
0008513A E10D                       	smpsAlterNote       $0D
0008513C E701                       	dc.b	smpsNoAttack, $01
0008513E E111                       	smpsAlterNote       $11
00085140 E701                       	dc.b	smpsNoAttack, $01
00085142 E10D                       	smpsAlterNote       $0D
00085144 E701                       	dc.b	smpsNoAttack, $01
00085146 E10A                       	smpsAlterNote       $0A
00085148 E701                       	dc.b	smpsNoAttack, $01
0008514A E106                       	smpsAlterNote       $06
0008514C E701                       	dc.b	smpsNoAttack, $01
0008514E E10A                       	smpsAlterNote       $0A
00085150 E701                       	dc.b	smpsNoAttack, $01
00085152 E110                       	smpsAlterNote       $10
00085154 E701                       	dc.b	smpsNoAttack, $01
00085156 E111                       	smpsAlterNote       $11
00085158 E701                       	dc.b	smpsNoAttack, $01
0008515A E10D                       	smpsAlterNote       $0D
0008515C E701                       	dc.b	smpsNoAttack, $01
0008515E E107                       	smpsAlterNote       $07
00085160 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085164 E10A                       	smpsAlterNote       $0A
00085166 E701                       	dc.b	smpsNoAttack, $01
00085168 E110                       	smpsAlterNote       $10
0008516A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008516E E10D                       	smpsAlterNote       $0D
00085170 8001                       	dc.b	nRst, $01
00085172 E10F                       	smpsAlterNote       $0F
00085174 BA0D                       	dc.b	nA4, $0D
00085176 E10C                       	smpsAlterNote       $0C
00085178 E701                       	dc.b	smpsNoAttack, $01
0008517A E108                       	smpsAlterNote       $08
0008517C E701                       	dc.b	smpsNoAttack, $01
0008517E E10C                       	smpsAlterNote       $0C
00085180 E701                       	dc.b	smpsNoAttack, $01
00085182 E112                       	smpsAlterNote       $12
00085184 E701                       	dc.b	smpsNoAttack, $01
00085186 E113                       	smpsAlterNote       $13
00085188 E701                       	dc.b	smpsNoAttack, $01
0008518A E10F                       	smpsAlterNote       $0F
0008518C E701                       	dc.b	smpsNoAttack, $01
0008518E E109                       	smpsAlterNote       $09
00085190 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085194 E10C                       	smpsAlterNote       $0C
00085196 E701                       	dc.b	smpsNoAttack, $01
00085198 E112                       	smpsAlterNote       $12
0008519A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008519E E10C                       	smpsAlterNote       $0C
000851A0 E701                       	dc.b	smpsNoAttack, $01
000851A2 E109                       	smpsAlterNote       $09
000851A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851A8 E10F                       	smpsAlterNote       $0F
000851AA E701                       	dc.b	smpsNoAttack, $01
000851AC E113                       	smpsAlterNote       $13
000851AE E701                       	dc.b	smpsNoAttack, $01
000851B0 E112                       	smpsAlterNote       $12
000851B2 E701                       	dc.b	smpsNoAttack, $01
000851B4 E10C                       	smpsAlterNote       $0C
000851B6 E701                       	dc.b	smpsNoAttack, $01
000851B8 E108                       	smpsAlterNote       $08
000851BA E701                       	dc.b	smpsNoAttack, $01
000851BC E10C                       	smpsAlterNote       $0C
000851BE E701                       	dc.b	smpsNoAttack, $01
000851C0 E10F                       	smpsAlterNote       $0F
000851C2 E701                       	dc.b	smpsNoAttack, $01
000851C4 E113                       	smpsAlterNote       $13
000851C6 E701                       	dc.b	smpsNoAttack, $01
000851C8 E10F                       	smpsAlterNote       $0F
000851CA E701                       	dc.b	smpsNoAttack, $01
000851CC E109                       	smpsAlterNote       $09
000851CE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000851D2 E10D                       	smpsAlterNote       $0D
000851D4 B609 8001                  	dc.b	nF4, $09, nRst, $01
000851D8 E10C                       	smpsAlterNote       $0C
000851DA B506 8001                  	dc.b	nE4, $06, nRst, $01
000851DE E10B                       	smpsAlterNote       $0B
000851E0 B30D                       	dc.b	nD4, $0D
000851E2 E10C                       	smpsAlterNote       $0C
000851E4 B503 8001                  	dc.b	nE4, $03, nRst, $01
000851E8 E10D                       	smpsAlterNote       $0D
000851EA B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
000851F2 E109                       	smpsAlterNote       $09
000851F4 E701                       	dc.b	smpsNoAttack, $01
000851F6 E108                       	smpsAlterNote       $08
000851F8 E701                       	dc.b	smpsNoAttack, $01
000851FA E10C                       	smpsAlterNote       $0C
000851FC E701                       	dc.b	smpsNoAttack, $01
000851FE E112                       	smpsAlterNote       $12
00085200 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085204 E10F                       	smpsAlterNote       $0F
00085206 E701                       	dc.b	smpsNoAttack, $01
00085208 E109                       	smpsAlterNote       $09
0008520A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008520E E10F                       	smpsAlterNote       $0F
00085210 E701                       	dc.b	smpsNoAttack, $01
00085212 E112                       	smpsAlterNote       $12
00085214 E701                       	dc.b	smpsNoAttack, $01
00085216 E113                       	smpsAlterNote       $13
00085218 8001                       	dc.b	nRst, $01
0008521A E10D                       	smpsAlterNote       $0D
0008521C C20D                       	dc.b	nF5, $0D
0008521E E107                       	smpsAlterNote       $07
00085220 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085224 E10A                       	smpsAlterNote       $0A
00085226 E701                       	dc.b	smpsNoAttack, $01
00085228 E110                       	smpsAlterNote       $10
0008522A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008522E E10A                       	smpsAlterNote       $0A
00085230 E701                       	dc.b	smpsNoAttack, $01
00085232 E107                       	smpsAlterNote       $07
00085234 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085238 E10D                       	smpsAlterNote       $0D
0008523A E701                       	dc.b	smpsNoAttack, $01
0008523C E111                       	smpsAlterNote       $11
0008523E E701                       	dc.b	smpsNoAttack, $01
00085240 E110                       	smpsAlterNote       $10
00085242 E701                       	dc.b	smpsNoAttack, $01
00085244 E10A                       	smpsAlterNote       $0A
00085246 E701                       	dc.b	smpsNoAttack, $01
00085248 E106                       	smpsAlterNote       $06
0008524A E701                       	dc.b	smpsNoAttack, $01
0008524C E10A                       	smpsAlterNote       $0A
0008524E E701                       	dc.b	smpsNoAttack, $01
00085250 E10D                       	smpsAlterNote       $0D
00085252 E701                       	dc.b	smpsNoAttack, $01
00085254 E111                       	smpsAlterNote       $11
00085256 E701                       	dc.b	smpsNoAttack, $01
00085258 E10D                       	smpsAlterNote       $0D
0008525A E701                       	dc.b	smpsNoAttack, $01
0008525C E107                       	smpsAlterNote       $07
0008525E E701                       	dc.b	smpsNoAttack, $01
00085260 E106                       	smpsAlterNote       $06
00085262 E701                       	dc.b	smpsNoAttack, $01
00085264 E10A                       	smpsAlterNote       $0A
00085266 E701                       	dc.b	smpsNoAttack, $01
00085268 E110                       	smpsAlterNote       $10
0008526A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008526E E10D                       	smpsAlterNote       $0D
00085270 E701                       	dc.b	smpsNoAttack, $01
00085272 E107                       	smpsAlterNote       $07
00085274 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085278 E10D                       	smpsAlterNote       $0D
0008527A E701                       	dc.b	smpsNoAttack, $01
0008527C E110                       	smpsAlterNote       $10
0008527E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085282 E10A                       	smpsAlterNote       $0A
00085284 E701                       	dc.b	smpsNoAttack, $01
00085286 E106                       	smpsAlterNote       $06
00085288 E701                       	dc.b	smpsNoAttack, $01
0008528A E107                       	smpsAlterNote       $07
0008528C E701                       	dc.b	smpsNoAttack, $01
0008528E E10D                       	smpsAlterNote       $0D
00085290 E701                       	dc.b	smpsNoAttack, $01
00085292 E111                       	smpsAlterNote       $11
00085294 E701                       	dc.b	smpsNoAttack, $01
00085296 E10D                       	smpsAlterNote       $0D
00085298 E701                       	dc.b	smpsNoAttack, $01
0008529A E10A                       	smpsAlterNote       $0A
0008529C E701                       	dc.b	smpsNoAttack, $01
0008529E E106                       	smpsAlterNote       $06
000852A0 E701                       	dc.b	smpsNoAttack, $01
000852A2 E10A                       	smpsAlterNote       $0A
000852A4 E701                       	dc.b	smpsNoAttack, $01
000852A6 E110                       	smpsAlterNote       $10
000852A8 E701                       	dc.b	smpsNoAttack, $01
000852AA E111                       	smpsAlterNote       $11
000852AC E701                       	dc.b	smpsNoAttack, $01
000852AE E10D                       	smpsAlterNote       $0D
000852B0 E701                       	dc.b	smpsNoAttack, $01
000852B2 E107                       	smpsAlterNote       $07
000852B4 E701                       	dc.b	smpsNoAttack, $01
000852B6 E10D                       	smpsAlterNote       $0D
000852B8 C207                       	dc.b	nF5, $07
000852BA E10C                       	smpsAlterNote       $0C
000852BC C10D                       	dc.b	nE5, $0D
000852BE E109                       	smpsAlterNote       $09
000852C0 E701                       	dc.b	smpsNoAttack, $01
000852C2 E106                       	smpsAlterNote       $06
000852C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852C8 E10C                       	smpsAlterNote       $0C
000852CA E701                       	dc.b	smpsNoAttack, $01
000852CC E110                       	smpsAlterNote       $10
000852CE E701                       	dc.b	smpsNoAttack, $01
000852D0 E10F                       	smpsAlterNote       $0F
000852D2 E701                       	dc.b	smpsNoAttack, $01
000852D4 E109                       	smpsAlterNote       $09
000852D6 E701                       	dc.b	smpsNoAttack, $01
000852D8 E105                       	smpsAlterNote       $05
000852DA E701                       	dc.b	smpsNoAttack, $01
000852DC E109                       	smpsAlterNote       $09
000852DE E701                       	dc.b	smpsNoAttack, $01
000852E0 E10C                       	smpsAlterNote       $0C
000852E2 E701                       	dc.b	smpsNoAttack, $01
000852E4 E110                       	smpsAlterNote       $10
000852E6 E701                       	dc.b	smpsNoAttack, $01
000852E8 E10B                       	smpsAlterNote       $0B
000852EA BF0D                       	dc.b	nD5, $0D
000852EC E108                       	smpsAlterNote       $08
000852EE E701                       	dc.b	smpsNoAttack, $01
000852F0 E105                       	smpsAlterNote       $05
000852F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852F6 E10B                       	smpsAlterNote       $0B
000852F8 E701                       	dc.b	smpsNoAttack, $01
000852FA E10F                       	smpsAlterNote       $0F
000852FC E701                       	dc.b	smpsNoAttack, $01
000852FE E10E                       	smpsAlterNote       $0E
00085300 E701                       	dc.b	smpsNoAttack, $01
00085302 E108                       	smpsAlterNote       $08
00085304 E701                       	dc.b	smpsNoAttack, $01
00085306 E104                       	smpsAlterNote       $04
00085308 E701                       	dc.b	smpsNoAttack, $01
0008530A E108                       	smpsAlterNote       $08
0008530C E701                       	dc.b	smpsNoAttack, $01
0008530E E10E                       	smpsAlterNote       $0E
00085310 E701                       	dc.b	smpsNoAttack, $01
00085312 E10F                       	smpsAlterNote       $0F
00085314 E701                       	dc.b	smpsNoAttack, $01
00085316 E10B                       	smpsAlterNote       $0B
00085318 E701                       	dc.b	smpsNoAttack, $01
0008531A E105                       	smpsAlterNote       $05
0008531C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085320 E108                       	smpsAlterNote       $08
00085322 E701                       	dc.b	smpsNoAttack, $01
00085324 E10E                       	smpsAlterNote       $0E
00085326 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008532A E108                       	smpsAlterNote       $08
0008532C E701                       	dc.b	smpsNoAttack, $01
0008532E E105                       	smpsAlterNote       $05
00085330 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085334 E10B                       	smpsAlterNote       $0B
00085336 E701                       	dc.b	smpsNoAttack, $01
00085338 E10F                       	smpsAlterNote       $0F
0008533A E701                       	dc.b	smpsNoAttack, $01
0008533C E10E                       	smpsAlterNote       $0E
0008533E E701                       	dc.b	smpsNoAttack, $01
00085340 E108                       	smpsAlterNote       $08
00085342 E701                       	dc.b	smpsNoAttack, $01
00085344 E104                       	smpsAlterNote       $04
00085346 E701                       	dc.b	smpsNoAttack, $01
00085348 E108                       	smpsAlterNote       $08
0008534A E701                       	dc.b	smpsNoAttack, $01
0008534C E10B                       	smpsAlterNote       $0B
0008534E E701                       	dc.b	smpsNoAttack, $01
00085350 E10F                       	smpsAlterNote       $0F
00085352 E701                       	dc.b	smpsNoAttack, $01
00085354 E10B                       	smpsAlterNote       $0B
00085356 E701                       	dc.b	smpsNoAttack, $01
00085358 E105                       	smpsAlterNote       $05
0008535A E701                       	dc.b	smpsNoAttack, $01
0008535C E104                       	smpsAlterNote       $04
0008535E E701                       	dc.b	smpsNoAttack, $01
00085360 E108                       	smpsAlterNote       $08
00085362 E701                       	dc.b	smpsNoAttack, $01
00085364 E10E                       	smpsAlterNote       $0E
00085366 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008536A E10B                       	smpsAlterNote       $0B
0008536C E701                       	dc.b	smpsNoAttack, $01
0008536E E105                       	smpsAlterNote       $05
00085370 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085374 E10B                       	smpsAlterNote       $0B
00085376 E701                       	dc.b	smpsNoAttack, $01
00085378 E10E                       	smpsAlterNote       $0E
0008537A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008537E E108                       	smpsAlterNote       $08
00085380 E701                       	dc.b	smpsNoAttack, $01
00085382 E105                       	smpsAlterNote       $05
00085384 8001                       	dc.b	nRst, $01
00085388 E601                       	smpsAlterVol        $01
0008538A E10B                       	smpsAlterNote       $0B
0008538C BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00085398 8004                       	dc.b	nRst, $04
0008539C E6FF                       	smpsAlterVol        $FF
0008539E E10D                       	smpsAlterNote       $0D
000853A0 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
000853A8 E10C                       	smpsAlterNote       $0C
000853AA E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
000853AF E10D                       	smpsAlterNote       $0D
000853B1 B60D                       	dc.b	nF4, $0D
000853B3 E10A                       	smpsAlterNote       $0A
000853B5 E701                       	dc.b	smpsNoAttack, $01
000853B7 E106                       	smpsAlterNote       $06
000853B9 E701                       	dc.b	smpsNoAttack, $01
000853BB E10A                       	smpsAlterNote       $0A
000853BD E701                       	dc.b	smpsNoAttack, $01
000853BF E110                       	smpsAlterNote       $10
000853C1 E701                       	dc.b	smpsNoAttack, $01
000853C3 E111                       	smpsAlterNote       $11
000853C5 E701                       	dc.b	smpsNoAttack, $01
000853C7 E10D                       	smpsAlterNote       $0D
000853C9 E701                       	dc.b	smpsNoAttack, $01
000853CB E107                       	smpsAlterNote       $07
000853CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853D1 E10A                       	smpsAlterNote       $0A
000853D3 E701                       	dc.b	smpsNoAttack, $01
000853D5 E110                       	smpsAlterNote       $10
000853D7 E701                       	dc.b	smpsNoAttack, $01
000853D9 E111                       	smpsAlterNote       $11
000853DB 8001                       	dc.b	nRst, $01
000853DD E10D                       	smpsAlterNote       $0D
000853DF B80D                       	dc.b	nG4, $0D
000853E1 E10A                       	smpsAlterNote       $0A
000853E3 E701                       	dc.b	smpsNoAttack, $01
000853E5 E106                       	smpsAlterNote       $06
000853E7 E701                       	dc.b	smpsNoAttack, $01
000853E9 E10A                       	smpsAlterNote       $0A
000853EB E701                       	dc.b	smpsNoAttack, $01
000853ED E110                       	smpsAlterNote       $10
000853EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853F3 E10D                       	smpsAlterNote       $0D
000853F5 E701                       	dc.b	smpsNoAttack, $01
000853F7 E107                       	smpsAlterNote       $07
000853F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853FD E10D                       	smpsAlterNote       $0D
000853FF E701                       	dc.b	smpsNoAttack, $01
00085401 E110                       	smpsAlterNote       $10
00085403 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085407 E10A                       	smpsAlterNote       $0A
00085409 E701                       	dc.b	smpsNoAttack, $01
0008540B E106                       	smpsAlterNote       $06
0008540D E701                       	dc.b	smpsNoAttack, $01
0008540F E107                       	smpsAlterNote       $07
00085411 E701                       	dc.b	smpsNoAttack, $01
00085413 E10D                       	smpsAlterNote       $0D
00085415 E701                       	dc.b	smpsNoAttack, $01
00085417 E111                       	smpsAlterNote       $11
00085419 E701                       	dc.b	smpsNoAttack, $01
0008541B E10D                       	smpsAlterNote       $0D
0008541D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085421 E10F                       	smpsAlterNote       $0F
00085423 BA02 8001                  	dc.b	nA4, $02, nRst, $01
00085427 E110                       	smpsAlterNote       $10
00085429 BB03                       	dc.b	nBb4, $03
0008542B E10F                       	smpsAlterNote       $0F
0008542D BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00085433 E110                       	smpsAlterNote       $10
00085435 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00085439 E10F                       	smpsAlterNote       $0F
0008543B C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00085441 E110                       	smpsAlterNote       $10
00085443 D302 8001                  	dc.b	nBb6, $02, nRst, $01
00085447 E10F                       	smpsAlterNote       $0F
00085449 D20D                       	dc.b	nA6, $0D
0008544B E10C                       	smpsAlterNote       $0C
0008544D E701                       	dc.b	smpsNoAttack, $01
0008544F E108                       	smpsAlterNote       $08
00085451 E701                       	dc.b	smpsNoAttack, $01
00085453 E10C                       	smpsAlterNote       $0C
00085455 E701                       	dc.b	smpsNoAttack, $01
00085457 E10F                       	smpsAlterNote       $0F
00085459 E701                       	dc.b	smpsNoAttack, $01
0008545B E113                       	smpsAlterNote       $13
0008545D E701                       	dc.b	smpsNoAttack, $01
0008545F E10F                       	smpsAlterNote       $0F
00085461 E701                       	dc.b	smpsNoAttack, $01
00085463 E109                       	smpsAlterNote       $09
00085465 E701                       	dc.b	smpsNoAttack, $01
00085467 E108                       	smpsAlterNote       $08
00085469 E701                       	dc.b	smpsNoAttack, $01
0008546B E10C                       	smpsAlterNote       $0C
0008546D E701                       	dc.b	smpsNoAttack, $01
0008546F E112                       	smpsAlterNote       $12
00085471 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085475 E10F                       	smpsAlterNote       $0F
00085477 E701                       	dc.b	smpsNoAttack, $01
00085479 E109                       	smpsAlterNote       $09
0008547B E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00085481 E10D                       	smpsAlterNote       $0D
00085483 CE07                       	dc.b	nF6, $07
00085485 E10C                       	smpsAlterNote       $0C
00085487 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008548B E10D                       	smpsAlterNote       $0D
0008548D CE03                       	dc.b	nF6, $03
0008548F E10C                       	smpsAlterNote       $0C
00085491 CC0D                       	dc.b	nEb6, $0D
00085493 E109                       	smpsAlterNote       $09
00085495 E701                       	dc.b	smpsNoAttack, $01
00085497 E106                       	smpsAlterNote       $06
00085499 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008549D E10C                       	smpsAlterNote       $0C
0008549F E701                       	dc.b	smpsNoAttack, $01
000854A1 E110                       	smpsAlterNote       $10
000854A3 E701                       	dc.b	smpsNoAttack, $01
000854A5 E10F                       	smpsAlterNote       $0F
000854A7 E701                       	dc.b	smpsNoAttack, $01
000854A9 E109                       	smpsAlterNote       $09
000854AB E701                       	dc.b	smpsNoAttack, $01
000854AD E105                       	smpsAlterNote       $05
000854AF E701                       	dc.b	smpsNoAttack, $01
000854B1 E109                       	smpsAlterNote       $09
000854B3 E701                       	dc.b	smpsNoAttack, $01
000854B5 E10C                       	smpsAlterNote       $0C
000854B7 E701                       	dc.b	smpsNoAttack, $01
000854B9 E110                       	smpsAlterNote       $10
000854BB E701                       	dc.b	smpsNoAttack, $01
000854BD E10C                       	smpsAlterNote       $0C
000854BF E701                       	dc.b	smpsNoAttack, $01
000854C1 E106                       	smpsAlterNote       $06
000854C3 E701                       	dc.b	smpsNoAttack, $01
000854C5 E105                       	smpsAlterNote       $05
000854C7 E701                       	dc.b	smpsNoAttack, $01
000854C9 E109                       	smpsAlterNote       $09
000854CB E701                       	dc.b	smpsNoAttack, $01
000854CD E10F                       	smpsAlterNote       $0F
000854CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854D3 E10C                       	smpsAlterNote       $0C
000854D5 E701                       	dc.b	smpsNoAttack, $01
000854D7 E10B                       	smpsAlterNote       $0B
000854D9 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
000854E3 E10F                       	smpsAlterNote       $0F
000854E5 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000854EF E10D                       	smpsAlterNote       $0D
000854F1 C203                       	dc.b	nF5, $03
000854F3 E10C                       	smpsAlterNote       $0C
000854F5 C103 8001                  	dc.b	nE5, $03, nRst, $01
000854F9 E10D                       	smpsAlterNote       $0D
000854FB C20D                       	dc.b	nF5, $0D
000854FD E10C                       	smpsAlterNote       $0C
000854FF C10D 8001                  	dc.b	nE5, $0D, nRst, $01
00085503 E10B                       	smpsAlterNote       $0B
00085505 BF0D                       	dc.b	nD5, $0D
00085507 E108                       	smpsAlterNote       $08
00085509 E701                       	dc.b	smpsNoAttack, $01
0008550B E104                       	smpsAlterNote       $04
0008550D E701                       	dc.b	smpsNoAttack, $01
0008550F E108                       	smpsAlterNote       $08
00085511 E701                       	dc.b	smpsNoAttack, $01
00085513 E10E                       	smpsAlterNote       $0E
00085515 E701                       	dc.b	smpsNoAttack, $01
00085517 E10F                       	smpsAlterNote       $0F
00085519 E701                       	dc.b	smpsNoAttack, $01
0008551B E10B                       	smpsAlterNote       $0B
0008551D E701                       	dc.b	smpsNoAttack, $01
0008551F E105                       	smpsAlterNote       $05
00085521 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085525 E108                       	smpsAlterNote       $08
00085527 E701                       	dc.b	smpsNoAttack, $01
00085529 E10E                       	smpsAlterNote       $0E
0008552B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008552F E108                       	smpsAlterNote       $08
00085531 E701                       	dc.b	smpsNoAttack, $01
00085533 E105                       	smpsAlterNote       $05
00085535 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085539 E10B                       	smpsAlterNote       $0B
0008553B E701                       	dc.b	smpsNoAttack, $01
0008553D E10F                       	smpsAlterNote       $0F
0008553F E701                       	dc.b	smpsNoAttack, $01
00085541 E10E                       	smpsAlterNote       $0E
00085543 E701                       	dc.b	smpsNoAttack, $01
00085545 E108                       	smpsAlterNote       $08
00085547 E701                       	dc.b	smpsNoAttack, $01
00085549 E104                       	smpsAlterNote       $04
0008554B E701                       	dc.b	smpsNoAttack, $01
0008554D E108                       	smpsAlterNote       $08
0008554F E701                       	dc.b	smpsNoAttack, $01
00085551 E10B                       	smpsAlterNote       $0B
00085553 E701                       	dc.b	smpsNoAttack, $01
00085555 E10F                       	smpsAlterNote       $0F
00085557 E701                       	dc.b	smpsNoAttack, $01
00085559 E10B                       	smpsAlterNote       $0B
0008555B E701                       	dc.b	smpsNoAttack, $01
0008555D E105                       	smpsAlterNote       $05
0008555F E701                       	dc.b	smpsNoAttack, $01
00085561 E104                       	smpsAlterNote       $04
00085563 E701                       	dc.b	smpsNoAttack, $01
00085565 E108                       	smpsAlterNote       $08
00085567 E701                       	dc.b	smpsNoAttack, $01
00085569 E10E                       	smpsAlterNote       $0E
0008556B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008556F E10B                       	smpsAlterNote       $0B
00085571 E701                       	dc.b	smpsNoAttack, $01
00085573 E105                       	smpsAlterNote       $05
00085575 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085579 E10B                       	smpsAlterNote       $0B
0008557B E701                       	dc.b	smpsNoAttack, $01
0008557D E10E                       	smpsAlterNote       $0E
0008557F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085583 E108                       	smpsAlterNote       $08
00085585 E701                       	dc.b	smpsNoAttack, $01
00085587 E104                       	smpsAlterNote       $04
00085589 E701                       	dc.b	smpsNoAttack, $01
0008558B E105                       	smpsAlterNote       $05
0008558D E701                       	dc.b	smpsNoAttack, $01
0008558F E10B                       	smpsAlterNote       $0B
00085591 E701                       	dc.b	smpsNoAttack, $01
00085593 E10F                       	smpsAlterNote       $0F
00085595 E701                       	dc.b	smpsNoAttack, $01
00085597 E10B                       	smpsAlterNote       $0B
00085599 E701                       	dc.b	smpsNoAttack, $01
0008559B E108                       	smpsAlterNote       $08
0008559D E701                       	dc.b	smpsNoAttack, $01
0008559F E104                       	smpsAlterNote       $04
000855A1 E701                       	dc.b	smpsNoAttack, $01
000855A3 E108                       	smpsAlterNote       $08
000855A5 E701                       	dc.b	smpsNoAttack, $01
000855A7 E10E                       	smpsAlterNote       $0E
000855A9 E701                       	dc.b	smpsNoAttack, $01
000855AB E10F                       	smpsAlterNote       $0F
000855AD E701                       	dc.b	smpsNoAttack, $01
000855AF E10B                       	smpsAlterNote       $0B
000855B1 E701                       	dc.b	smpsNoAttack, $01
000855B3 E105                       	smpsAlterNote       $05
000855B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855B9 E108                       	smpsAlterNote       $08
000855BB E701                       	dc.b	smpsNoAttack, $01
000855BD E10E                       	smpsAlterNote       $0E
000855BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855C3 E108                       	smpsAlterNote       $08
000855C5 E701                       	dc.b	smpsNoAttack, $01
000855C7 E105                       	smpsAlterNote       $05
000855C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855CD E10B                       	smpsAlterNote       $0B
000855CF E701                       	dc.b	smpsNoAttack, $01
000855D1 E10F                       	smpsAlterNote       $0F
000855D3 E701                       	dc.b	smpsNoAttack, $01
000855D5 E10E                       	smpsAlterNote       $0E
000855D7 E701                       	dc.b	smpsNoAttack, $01
000855D9 E108                       	smpsAlterNote       $08
000855DB E701                       	dc.b	smpsNoAttack, $01
000855DD E104                       	smpsAlterNote       $04
000855DF E701                       	dc.b	smpsNoAttack, $01
000855E1 E108                       	smpsAlterNote       $08
000855E3 E701                       	dc.b	smpsNoAttack, $01
000855E5 E10B                       	smpsAlterNote       $0B
000855E7 E701                       	dc.b	smpsNoAttack, $01
000855E9 E10F                       	smpsAlterNote       $0F
000855EB E701                       	dc.b	smpsNoAttack, $01
000855ED E10B                       	smpsAlterNote       $0B
000855EF E701                       	dc.b	smpsNoAttack, $01
000855F1 E105                       	smpsAlterNote       $05
000855F3 E701                       	dc.b	smpsNoAttack, $01
000855F5 E104                       	smpsAlterNote       $04
000855F7 E701                       	dc.b	smpsNoAttack, $01
000855F9 E105                       	smpsAlterNote       $05
000855FB 8001                       	dc.b	nRst, $01
000855FD E10D                       	smpsAlterNote       $0D
000855FF C20D                       	dc.b	nF5, $0D
00085601 E107                       	smpsAlterNote       $07
00085603 E701                       	dc.b	smpsNoAttack, $01
00085605 E106                       	smpsAlterNote       $06
00085607 E701                       	dc.b	smpsNoAttack, $01
00085609 E10A                       	smpsAlterNote       $0A
0008560B E701                       	dc.b	smpsNoAttack, $01
0008560D E110                       	smpsAlterNote       $10
0008560F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085613 E10D                       	smpsAlterNote       $0D
00085615 E701                       	dc.b	smpsNoAttack, $01
00085617 E107                       	smpsAlterNote       $07
00085619 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008561D E10D                       	smpsAlterNote       $0D
0008561F E701                       	dc.b	smpsNoAttack, $01
00085621 E110                       	smpsAlterNote       $10
00085623 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085627 E10A                       	smpsAlterNote       $0A
00085629 E701                       	dc.b	smpsNoAttack, $01
0008562B E106                       	smpsAlterNote       $06
0008562D E701                       	dc.b	smpsNoAttack, $01
0008562F E107                       	smpsAlterNote       $07
00085631 E701                       	dc.b	smpsNoAttack, $01
00085633 E10D                       	smpsAlterNote       $0D
00085635 E701                       	dc.b	smpsNoAttack, $01
00085637 E111                       	smpsAlterNote       $11
00085639 E701                       	dc.b	smpsNoAttack, $01
0008563B E10D                       	smpsAlterNote       $0D
0008563D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085641 E10C                       	smpsAlterNote       $0C
00085643 C10D                       	dc.b	nE5, $0D
00085645 E10D                       	smpsAlterNote       $0D
00085647 C20A                       	dc.b	nF5, $0A
00085649 E10C                       	smpsAlterNote       $0C
0008564B C10E                       	dc.b	nE5, $0E
0008564D E106                       	smpsAlterNote       $06
0008564F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085653 E10C                       	smpsAlterNote       $0C
00085655 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085659 E10B                       	smpsAlterNote       $0B
0008565B BF0D                       	dc.b	nD5, $0D
0008565D E10C                       	smpsAlterNote       $0C
0008565F C107                       	dc.b	nE5, $07
00085661 E10D                       	smpsAlterNote       $0D
00085663 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008566D E110                       	smpsAlterNote       $10
0008566F C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00085675 E10F                       	smpsAlterNote       $0F
00085677 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008567F E10D                       	smpsAlterNote       $0D
00085681 D003                       	dc.b	nG6, $03
00085685 E0C0                       	smpsPan             panCenter, $00
00085687 E6FF                       	smpsAlterVol        $FF
00085689 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
00085695 8001                       	dc.b	nRst, $01
00085697 E10C                       	smpsAlterNote       $0C
00085699 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
000856A3 E604                       	smpsAlterVol        $04
000856A5 E10B                       	smpsAlterNote       $0B
000856A7 B306 8001                  	dc.b	nD4, $06, nRst, $01
000856AB E10F                       	smpsAlterNote       $0F
000856AD AE03                       	dc.b	nA3, $03
000856AF E10D                       	smpsAlterNote       $0D
000856B1 B603 8001                  	dc.b	nF4, $03, nRst, $01
000856B5 E10C                       	smpsAlterNote       $0C
000856B7 B506 8001                  	dc.b	nE4, $06, nRst, $01
000856BB E10B                       	smpsAlterNote       $0B
000856BD B302 8001                  	dc.b	nD4, $02, nRst, $01
000856C1 E10A                       	smpsAlterNote       $0A
000856C3 B103                       	dc.b	nC4, $03
000856C5 E110                       	smpsAlterNote       $10
000856C7 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000856CB E10F                       	smpsAlterNote       $0F
000856CD AE03 800A                  	dc.b	nA3, $03, nRst, $0A
000856D1 E080                       	smpsPan             panLeft, $00
000856D3 01                         	dc.b	$01
000856D6 E6FB                       	smpsAlterVol        $FB
000856D8 E1E4                       	smpsAlterNote       $E4
000856DA C501                       	dc.b	nAb5, $01
000856DC E1F4                       	smpsAlterNote       $F4
000856DE E701                       	dc.b	smpsNoAttack, $01
000856E0 E104                       	smpsAlterNote       $04
000856E2 E701                       	dc.b	smpsNoAttack, $01
000856E4 E114                       	smpsAlterNote       $14
000856E6 E701                       	dc.b	smpsNoAttack, $01
000856E8 E11C                       	smpsAlterNote       $1C
000856EA E701                       	dc.b	smpsNoAttack, $01
000856EC E1EF                       	smpsAlterNote       $EF
000856EE E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000856F1 E1FF                       	smpsAlterNote       $FF
000856F3 E701                       	dc.b	smpsNoAttack, $01
000856F5 E10F                       	smpsAlterNote       $0F
000856F7 C606                       	dc.b	nA5, $06
000856F9 E109                       	smpsAlterNote       $09
000856FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856FF E10F                       	smpsAlterNote       $0F
00085701 E701                       	dc.b	smpsNoAttack, $01
00085703 E112                       	smpsAlterNote       $12
00085705 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085709 E10C                       	smpsAlterNote       $0C
0008570B E701                       	dc.b	smpsNoAttack, $01
0008570D E108                       	smpsAlterNote       $08
0008570F E701                       	dc.b	smpsNoAttack, $01
00085711 E109                       	smpsAlterNote       $09
00085713 E701                       	dc.b	smpsNoAttack, $01
00085715 E10F                       	smpsAlterNote       $0F
00085717 E701                       	dc.b	smpsNoAttack, $01
00085719 E113                       	smpsAlterNote       $13
0008571B E701                       	dc.b	smpsNoAttack, $01
0008571D E10F                       	smpsAlterNote       $0F
0008571F E701                       	dc.b	smpsNoAttack, $01
00085721 E10C                       	smpsAlterNote       $0C
00085723 E701                       	dc.b	smpsNoAttack, $01
00085725 E108                       	smpsAlterNote       $08
00085727 E701                       	dc.b	smpsNoAttack, $01
00085729 E10C                       	smpsAlterNote       $0C
0008572B E701                       	dc.b	smpsNoAttack, $01
0008572D E112                       	smpsAlterNote       $12
0008572F E701                       	dc.b	smpsNoAttack, $01
00085731 E113                       	smpsAlterNote       $13
00085733 E701                       	dc.b	smpsNoAttack, $01
00085735 E10F                       	smpsAlterNote       $0F
00085737 E701                       	dc.b	smpsNoAttack, $01
00085739 E109                       	smpsAlterNote       $09
0008573B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008573F E10C                       	smpsAlterNote       $0C
00085741 E701                       	dc.b	smpsNoAttack, $01
00085743 E112                       	smpsAlterNote       $12
00085745 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085749 E10C                       	smpsAlterNote       $0C
0008574B E701                       	dc.b	smpsNoAttack, $01
0008574D E109                       	smpsAlterNote       $09
0008574F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085753 E10F                       	smpsAlterNote       $0F
00085755 E701                       	dc.b	smpsNoAttack, $01
00085757 E113                       	smpsAlterNote       $13
00085759 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008575D E10D                       	smpsAlterNote       $0D
0008575F C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00085765 E10C                       	smpsAlterNote       $0C
00085767 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008576B E10D                       	smpsAlterNote       $0D
0008576D C201 8001                  	dc.b	nF5, $01, nRst, $01
00085771 E10C                       	smpsAlterNote       $0C
00085773 C102                       	dc.b	nE5, $02
00085775 E10B                       	smpsAlterNote       $0B
00085777 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008577B E10C                       	smpsAlterNote       $0C
0008577D C101 8001                  	dc.b	nE5, $01, nRst, $01
00085781 E10B                       	smpsAlterNote       $0B
00085783 BF02                       	dc.b	nD5, $02
00085785 E10A                       	smpsAlterNote       $0A
00085787 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
00085791 E110                       	smpsAlterNote       $10
00085793 BB02                       	dc.b	nBb4, $02
00085795 E10A                       	smpsAlterNote       $0A
00085797 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008579B E110                       	smpsAlterNote       $10
0008579D BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000857A1 E10F                       	smpsAlterNote       $0F
000857A3 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000857A7 E110                       	smpsAlterNote       $10
000857A9 BB02                       	dc.b	nBb4, $02
000857AB E10F                       	smpsAlterNote       $0F
000857AD BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000857B7 E10C                       	smpsAlterNote       $0C
000857B9 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
000857C1 E10B                       	smpsAlterNote       $0B
000857C3 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
000857C7 E10F                       	smpsAlterNote       $0F
000857C9 BA02                       	dc.b	nA4, $02
000857CD E0C0                       	smpsPan             panCenter, $00
000857CF E601                       	smpsAlterVol        $01
000857D1 E109                       	smpsAlterNote       $09
000857D3 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
000857DF E108                       	smpsAlterNote       $08
000857E1 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
000857E7 E107                       	smpsAlterNote       $07
000857E9 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
000857EF E109                       	smpsAlterNote       $09
000857F1 B603 8001                  	dc.b	nF4, $03, nRst, $01
000857F5 E108                       	smpsAlterNote       $08
000857F7 B506 8001                  	dc.b	nE4, $06, nRst, $01
000857FB E107                       	smpsAlterNote       $07
000857FD B302 8001                  	dc.b	nD4, $02, nRst, $01
00085801 E106                       	smpsAlterNote       $06
00085803 B103                       	dc.b	nC4, $03
00085805 E10C                       	smpsAlterNote       $0C
00085807 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008580D E080                       	smpsPan             panLeft, $00
0008580F 07                         	dc.b	$07
00085810 E6FE                       	smpsAlterVol        $FE
00085812 E10B                       	smpsAlterNote       $0B
00085814 B20D                       	dc.b	nCs4, $0D
00085816 E105                       	smpsAlterNote       $05
00085818 E701                       	dc.b	smpsNoAttack, $01
0008581A E104                       	smpsAlterNote       $04
0008581C E701                       	dc.b	smpsNoAttack, $01
0008581E E108                       	smpsAlterNote       $08
00085820 E701                       	dc.b	smpsNoAttack, $01
00085822 E10E                       	smpsAlterNote       $0E
00085824 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085828 E10B                       	smpsAlterNote       $0B
0008582A E701                       	dc.b	smpsNoAttack, $01
0008582C E105                       	smpsAlterNote       $05
0008582E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085832 E10B                       	smpsAlterNote       $0B
00085834 E701                       	dc.b	smpsNoAttack, $01
00085836 E10E                       	smpsAlterNote       $0E
00085838 E701                       	dc.b	smpsNoAttack, $01
0008583A E10F                       	smpsAlterNote       $0F
0008583C 8001                       	dc.b	nRst, $01
0008583E E10B                       	smpsAlterNote       $0B
00085840 B30D                       	dc.b	nD4, $0D
00085842 E105                       	smpsAlterNote       $05
00085844 E701                       	dc.b	smpsNoAttack, $01
00085846 E104                       	smpsAlterNote       $04
00085848 E701                       	dc.b	smpsNoAttack, $01
0008584A E108                       	smpsAlterNote       $08
0008584C E701                       	dc.b	smpsNoAttack, $01
0008584E E10E                       	smpsAlterNote       $0E
00085850 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085854 E10B                       	smpsAlterNote       $0B
00085856 E701                       	dc.b	smpsNoAttack, $01
00085858 E105                       	smpsAlterNote       $05
0008585A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008585E E10B                       	smpsAlterNote       $0B
00085860 E701                       	dc.b	smpsNoAttack, $01
00085862 E10E                       	smpsAlterNote       $0E
00085864 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085868 E108                       	smpsAlterNote       $08
0008586A E701                       	dc.b	smpsNoAttack, $01
0008586C E104                       	smpsAlterNote       $04
0008586E E701                       	dc.b	smpsNoAttack, $01
00085870 E105                       	smpsAlterNote       $05
00085872 E701                       	dc.b	smpsNoAttack, $01
00085874 E10B                       	smpsAlterNote       $0B
00085876 E701                       	dc.b	smpsNoAttack, $01
00085878 E10F                       	smpsAlterNote       $0F
0008587A E701                       	dc.b	smpsNoAttack, $01
0008587C E10B                       	smpsAlterNote       $0B
0008587E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085882 E10C                       	smpsAlterNote       $0C
00085884 B50D                       	dc.b	nE4, $0D
00085886 E106                       	smpsAlterNote       $06
00085888 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008588C E10C                       	smpsAlterNote       $0C
0008588E E701                       	dc.b	smpsNoAttack, $01
00085890 E10F                       	smpsAlterNote       $0F
00085892 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085896 E109                       	smpsAlterNote       $09
00085898 E701                       	dc.b	smpsNoAttack, $01
0008589A E105                       	smpsAlterNote       $05
0008589C E701                       	dc.b	smpsNoAttack, $01
0008589E E106                       	smpsAlterNote       $06
000858A0 E701                       	dc.b	smpsNoAttack, $01
000858A2 E10C                       	smpsAlterNote       $0C
000858A4 E701                       	dc.b	smpsNoAttack, $01
000858A6 E110                       	smpsAlterNote       $10
000858A8 E701                       	dc.b	smpsNoAttack, $01
000858AA E10B                       	smpsAlterNote       $0B
000858AC B30E                       	dc.b	nD4, $0E
000858AE E105                       	smpsAlterNote       $05
000858B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000858B4 E10B                       	smpsAlterNote       $0B
000858B6 E701                       	dc.b	smpsNoAttack, $01
000858B8 E10E                       	smpsAlterNote       $0E
000858BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000858BE E108                       	smpsAlterNote       $08
000858C0 E701                       	dc.b	smpsNoAttack, $01
000858C2 E104                       	smpsAlterNote       $04
000858C4 E701                       	dc.b	smpsNoAttack, $01
000858C6 E105                       	smpsAlterNote       $05
000858C8 E701                       	dc.b	smpsNoAttack, $01
000858CA E10B                       	smpsAlterNote       $0B
000858CC E701                       	dc.b	smpsNoAttack, $01
000858CE E10F                       	smpsAlterNote       $0F
000858D0 E701                       	dc.b	smpsNoAttack, $01
000858D2 E10B                       	smpsAlterNote       $0B
000858D4 E701                       	dc.b	smpsNoAttack, $01
000858D6 E108                       	smpsAlterNote       $08
000858D8 E701                       	dc.b	smpsNoAttack, $01
000858DA E104                       	smpsAlterNote       $04
000858DC E701                       	dc.b	smpsNoAttack, $01
000858DE E108                       	smpsAlterNote       $08
000858E0 E701                       	dc.b	smpsNoAttack, $01
000858E2 E10E                       	smpsAlterNote       $0E
000858E4 E701                       	dc.b	smpsNoAttack, $01
000858E6 E10F                       	smpsAlterNote       $0F
000858E8 E701                       	dc.b	smpsNoAttack, $01
000858EA E10B                       	smpsAlterNote       $0B
000858EC E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000858F0 E108                       	smpsAlterNote       $08
000858F2 E701                       	dc.b	smpsNoAttack, $01
000858F4 E105                       	smpsAlterNote       $05
000858F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000858FA E10B                       	smpsAlterNote       $0B
000858FC E701                       	dc.b	smpsNoAttack, $01
000858FE E10F                       	smpsAlterNote       $0F
00085900 E701                       	dc.b	smpsNoAttack, $01
00085902 E10E                       	smpsAlterNote       $0E
00085904 E701                       	dc.b	smpsNoAttack, $01
00085906 E108                       	smpsAlterNote       $08
00085908 E701                       	dc.b	smpsNoAttack, $01
0008590A E104                       	smpsAlterNote       $04
0008590C E701                       	dc.b	smpsNoAttack, $01
0008590E E108                       	smpsAlterNote       $08
00085910 E701                       	dc.b	smpsNoAttack, $01
00085912 E10B                       	smpsAlterNote       $0B
00085914 E701                       	dc.b	smpsNoAttack, $01
00085916 E10F                       	smpsAlterNote       $0F
00085918 E701                       	dc.b	smpsNoAttack, $01
0008591A E10B                       	smpsAlterNote       $0B
0008591C B30D                       	dc.b	nD4, $0D
0008591E E108                       	smpsAlterNote       $08
00085920 E701                       	dc.b	smpsNoAttack, $01
00085922 E105                       	smpsAlterNote       $05
00085924 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085928 E10B                       	smpsAlterNote       $0B
0008592A E701                       	dc.b	smpsNoAttack, $01
0008592C E10F                       	smpsAlterNote       $0F
0008592E E701                       	dc.b	smpsNoAttack, $01
00085930 E10E                       	smpsAlterNote       $0E
00085932 E701                       	dc.b	smpsNoAttack, $01
00085934 E108                       	smpsAlterNote       $08
00085936 E701                       	dc.b	smpsNoAttack, $01
00085938 E104                       	smpsAlterNote       $04
0008593A E701                       	dc.b	smpsNoAttack, $01
0008593C E108                       	smpsAlterNote       $08
0008593E E701                       	dc.b	smpsNoAttack, $01
00085940 E10B                       	smpsAlterNote       $0B
00085942 E701                       	dc.b	smpsNoAttack, $01
00085944 E10F                       	smpsAlterNote       $0F
00085946 E701                       	dc.b	smpsNoAttack, $01
00085948 E10B                       	smpsAlterNote       $0B
0008594A E701                       	dc.b	smpsNoAttack, $01
0008594C E105                       	smpsAlterNote       $05
0008594E E701                       	dc.b	smpsNoAttack, $01
00085950 E104                       	smpsAlterNote       $04
00085952 E701                       	dc.b	smpsNoAttack, $01
00085954 E108                       	smpsAlterNote       $08
00085956 E701                       	dc.b	smpsNoAttack, $01
00085958 E10E                       	smpsAlterNote       $0E
0008595A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008595E E10B                       	smpsAlterNote       $0B
00085960 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
00085964 E108                       	smpsAlterNote       $08
00085966 E701                       	dc.b	smpsNoAttack, $01
00085968 E104                       	smpsAlterNote       $04
0008596A E701                       	dc.b	smpsNoAttack, $01
0008596C E108                       	smpsAlterNote       $08
0008596E E701                       	dc.b	smpsNoAttack, $01
00085970 E10B                       	smpsAlterNote       $0B
00085972 E701                       	dc.b	smpsNoAttack, $01
00085976 E0C0                       	smpsPan             panCenter, $00
00085978 E601                       	smpsAlterVol        $01
0008597A E108                       	smpsAlterNote       $08
0008597C A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
00085988 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
00085990 E080                       	smpsPan             panLeft, $00
00085992 07                         	dc.b	$07
00085993 E6FF                       	smpsAlterVol        $FF
00085995 E10D                       	smpsAlterNote       $0D
00085997 B60D                       	dc.b	nF4, $0D
00085999 E10A                       	smpsAlterNote       $0A
0008599B E701                       	dc.b	smpsNoAttack, $01
0008599D E106                       	smpsAlterNote       $06
0008599F E701                       	dc.b	smpsNoAttack, $01
000859A1 E10A                       	smpsAlterNote       $0A
000859A3 E701                       	dc.b	smpsNoAttack, $01
000859A5 E110                       	smpsAlterNote       $10
000859A7 E701                       	dc.b	smpsNoAttack, $01
000859A9 E111                       	smpsAlterNote       $11
000859AB E701                       	dc.b	smpsNoAttack, $01
000859AD E10D                       	smpsAlterNote       $0D
000859AF E701                       	dc.b	smpsNoAttack, $01
000859B1 E107                       	smpsAlterNote       $07
000859B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859B7 E10A                       	smpsAlterNote       $0A
000859B9 E701                       	dc.b	smpsNoAttack, $01
000859BB E110                       	smpsAlterNote       $10
000859BD E701                       	dc.b	smpsNoAttack, $01
000859BF E111                       	smpsAlterNote       $11
000859C1 8001                       	dc.b	nRst, $01
000859C3 E10D                       	smpsAlterNote       $0D
000859C5 B80D                       	dc.b	nG4, $0D
000859C7 E10A                       	smpsAlterNote       $0A
000859C9 E701                       	dc.b	smpsNoAttack, $01
000859CB E106                       	smpsAlterNote       $06
000859CD E701                       	dc.b	smpsNoAttack, $01
000859CF E10A                       	smpsAlterNote       $0A
000859D1 E701                       	dc.b	smpsNoAttack, $01
000859D3 E110                       	smpsAlterNote       $10
000859D5 E701                       	dc.b	smpsNoAttack, $01
000859D7 E111                       	smpsAlterNote       $11
000859D9 E701                       	dc.b	smpsNoAttack, $01
000859DB E10D                       	smpsAlterNote       $0D
000859DD E701                       	dc.b	smpsNoAttack, $01
000859DF E107                       	smpsAlterNote       $07
000859E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859E5 E10D                       	smpsAlterNote       $0D
000859E7 E701                       	dc.b	smpsNoAttack, $01
000859E9 E110                       	smpsAlterNote       $10
000859EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859EF E10A                       	smpsAlterNote       $0A
000859F1 E701                       	dc.b	smpsNoAttack, $01
000859F3 E106                       	smpsAlterNote       $06
000859F5 E701                       	dc.b	smpsNoAttack, $01
000859F7 E107                       	smpsAlterNote       $07
000859F9 E701                       	dc.b	smpsNoAttack, $01
000859FB E10D                       	smpsAlterNote       $0D
000859FD E701                       	dc.b	smpsNoAttack, $01
000859FF E111                       	smpsAlterNote       $11
00085A01 E701                       	dc.b	smpsNoAttack, $01
00085A03 E10D                       	smpsAlterNote       $0D
00085A05 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085A09 E10F                       	smpsAlterNote       $0F
00085A0B BA0D                       	dc.b	nA4, $0D
00085A0D E109                       	smpsAlterNote       $09
00085A0F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A13 E10C                       	smpsAlterNote       $0C
00085A15 E701                       	dc.b	smpsNoAttack, $01
00085A17 E112                       	smpsAlterNote       $12
00085A19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A1D E10C                       	smpsAlterNote       $0C
00085A1F E701                       	dc.b	smpsNoAttack, $01
00085A21 E109                       	smpsAlterNote       $09
00085A23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A27 E10F                       	smpsAlterNote       $0F
00085A29 E701                       	dc.b	smpsNoAttack, $01
00085A2B E113                       	smpsAlterNote       $13
00085A2D E701                       	dc.b	smpsNoAttack, $01
00085A2F E112                       	smpsAlterNote       $12
00085A31 E701                       	dc.b	smpsNoAttack, $01
00085A33 E10C                       	smpsAlterNote       $0C
00085A35 E701                       	dc.b	smpsNoAttack, $01
00085A37 E108                       	smpsAlterNote       $08
00085A39 E701                       	dc.b	smpsNoAttack, $01
00085A3B E10C                       	smpsAlterNote       $0C
00085A3D E701                       	dc.b	smpsNoAttack, $01
00085A3F E10F                       	smpsAlterNote       $0F
00085A41 E701                       	dc.b	smpsNoAttack, $01
00085A43 E113                       	smpsAlterNote       $13
00085A45 E701                       	dc.b	smpsNoAttack, $01
00085A47 E10F                       	smpsAlterNote       $0F
00085A49 E701                       	dc.b	smpsNoAttack, $01
00085A4B E109                       	smpsAlterNote       $09
00085A4D E701                       	dc.b	smpsNoAttack, $01
00085A4F E108                       	smpsAlterNote       $08
00085A51 E701                       	dc.b	smpsNoAttack, $01
00085A53 E10C                       	smpsAlterNote       $0C
00085A55 E701                       	dc.b	smpsNoAttack, $01
00085A57 E112                       	smpsAlterNote       $12
00085A59 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A5D E10F                       	smpsAlterNote       $0F
00085A5F E701                       	dc.b	smpsNoAttack, $01
00085A61 E109                       	smpsAlterNote       $09
00085A63 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A67 E10F                       	smpsAlterNote       $0F
00085A69 E701                       	dc.b	smpsNoAttack, $01
00085A6B E112                       	smpsAlterNote       $12
00085A6D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A71 E10C                       	smpsAlterNote       $0C
00085A73 E701                       	dc.b	smpsNoAttack, $01
00085A75 E108                       	smpsAlterNote       $08
00085A77 E701                       	dc.b	smpsNoAttack, $01
00085A79 E109                       	smpsAlterNote       $09
00085A7B E701                       	dc.b	smpsNoAttack, $01
00085A7D E10C                       	smpsAlterNote       $0C
00085A7F B50A                       	dc.b	nE4, $0A
00085A81 E10D                       	smpsAlterNote       $0D
00085A83 B60E                       	dc.b	nF4, $0E
00085A85 E107                       	smpsAlterNote       $07
00085A87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A8B E10D                       	smpsAlterNote       $0D
00085A8D E701                       	dc.b	smpsNoAttack, $01
00085A8F E110                       	smpsAlterNote       $10
00085A91 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A95 E10A                       	smpsAlterNote       $0A
00085A97 E701                       	dc.b	smpsNoAttack, $01
00085A99 E106                       	smpsAlterNote       $06
00085A9B E701                       	dc.b	smpsNoAttack, $01
00085A9D E107                       	smpsAlterNote       $07
00085A9F E701                       	dc.b	smpsNoAttack, $01
00085AA1 E10D                       	smpsAlterNote       $0D
00085AA3 E701                       	dc.b	smpsNoAttack, $01
00085AA5 E111                       	smpsAlterNote       $11
00085AA7 E701                       	dc.b	smpsNoAttack, $01
00085AA9 E10D                       	smpsAlterNote       $0D
00085AAB B80D                       	dc.b	nG4, $0D
00085AAD E10A                       	smpsAlterNote       $0A
00085AAF E701                       	dc.b	smpsNoAttack, $01
00085AB1 E107                       	smpsAlterNote       $07
00085AB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085AB7 E10D                       	smpsAlterNote       $0D
00085AB9 E701                       	dc.b	smpsNoAttack, $01
00085ABB E111                       	smpsAlterNote       $11
00085ABD E701                       	dc.b	smpsNoAttack, $01
00085ABF E110                       	smpsAlterNote       $10
00085AC1 E701                       	dc.b	smpsNoAttack, $01
00085AC3 E10A                       	smpsAlterNote       $0A
00085AC5 E701                       	dc.b	smpsNoAttack, $01
00085AC7 E106                       	smpsAlterNote       $06
00085AC9 E701                       	dc.b	smpsNoAttack, $01
00085ACB E10A                       	smpsAlterNote       $0A
00085ACD E701                       	dc.b	smpsNoAttack, $01
00085ACF E10D                       	smpsAlterNote       $0D
00085AD1 E701                       	dc.b	smpsNoAttack, $01
00085AD3 E111                       	smpsAlterNote       $11
00085AD5 E701                       	dc.b	smpsNoAttack, $01
00085AD7 E10D                       	smpsAlterNote       $0D
00085AD9 E701                       	dc.b	smpsNoAttack, $01
00085ADB E107                       	smpsAlterNote       $07
00085ADD E701                       	dc.b	smpsNoAttack, $01
00085ADF E106                       	smpsAlterNote       $06
00085AE1 E701                       	dc.b	smpsNoAttack, $01
00085AE3 E10A                       	smpsAlterNote       $0A
00085AE5 E701                       	dc.b	smpsNoAttack, $01
00085AE7 E110                       	smpsAlterNote       $10
00085AE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085AED E10D                       	smpsAlterNote       $0D
00085AEF E701                       	dc.b	smpsNoAttack, $01
00085AF1 E10F                       	smpsAlterNote       $0F
00085AF3 BA0D                       	dc.b	nA4, $0D
00085AF5 E10C                       	smpsAlterNote       $0C
00085AF7 E701                       	dc.b	smpsNoAttack, $01
00085AF9 E108                       	smpsAlterNote       $08
00085AFB E701                       	dc.b	smpsNoAttack, $01
00085AFD E109                       	smpsAlterNote       $09
00085AFF E701                       	dc.b	smpsNoAttack, $01
00085B01 E10F                       	smpsAlterNote       $0F
00085B03 E701                       	dc.b	smpsNoAttack, $01
00085B05 E113                       	smpsAlterNote       $13
00085B07 E701                       	dc.b	smpsNoAttack, $01
00085B09 E10F                       	smpsAlterNote       $0F
00085B0B E701                       	dc.b	smpsNoAttack, $01
00085B0D E10C                       	smpsAlterNote       $0C
00085B0F E701                       	dc.b	smpsNoAttack, $01
00085B11 E108                       	smpsAlterNote       $08
00085B13 E701                       	dc.b	smpsNoAttack, $01
00085B15 E10C                       	smpsAlterNote       $0C
00085B17 E701                       	dc.b	smpsNoAttack, $01
00085B19 E112                       	smpsAlterNote       $12
00085B1B E701                       	dc.b	smpsNoAttack, $01
00085B1D E113                       	smpsAlterNote       $13
00085B1F E701                       	dc.b	smpsNoAttack, $01
00085B21 E10F                       	smpsAlterNote       $0F
00085B23 E701                       	dc.b	smpsNoAttack, $01
00085B25 E109                       	smpsAlterNote       $09
00085B27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B2B E10C                       	smpsAlterNote       $0C
00085B2D E701                       	dc.b	smpsNoAttack, $01
00085B2F E112                       	smpsAlterNote       $12
00085B31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B35 E10C                       	smpsAlterNote       $0C
00085B37 E701                       	dc.b	smpsNoAttack, $01
00085B39 E109                       	smpsAlterNote       $09
00085B3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B3F E10F                       	smpsAlterNote       $0F
00085B41 E701                       	dc.b	smpsNoAttack, $01
00085B43 E113                       	smpsAlterNote       $13
00085B45 E701                       	dc.b	smpsNoAttack, $01
00085B47 E112                       	smpsAlterNote       $12
00085B49 E701                       	dc.b	smpsNoAttack, $01
00085B4B E10C                       	smpsAlterNote       $0C
00085B4D E701                       	dc.b	smpsNoAttack, $01
00085B4F E109                       	smpsAlterNote       $09
00085B51 8001                       	dc.b	nRst, $01
00085B53 E10D                       	smpsAlterNote       $0D
00085B55 B60A                       	dc.b	nF4, $0A
00085B57 E10C                       	smpsAlterNote       $0C
00085B59 B506 8001                  	dc.b	nE4, $06, nRst, $01
00085B5D E10B                       	smpsAlterNote       $0B
00085B5F B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00085B63 E10C                       	smpsAlterNote       $0C
00085B65 B503                       	dc.b	nE4, $03
00085B67 E10D                       	smpsAlterNote       $0D
00085B69 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
00085B73 E10C                       	smpsAlterNote       $0C
00085B75 E701                       	dc.b	smpsNoAttack, $01
00085B77 E108                       	smpsAlterNote       $08
00085B79 E701                       	dc.b	smpsNoAttack, $01
00085B7B E10C                       	smpsAlterNote       $0C
00085B7D E701                       	dc.b	smpsNoAttack, $01
00085B7F E112                       	smpsAlterNote       $12
00085B81 E701                       	dc.b	smpsNoAttack, $01
00085B83 E113                       	smpsAlterNote       $13
00085B85 E701                       	dc.b	smpsNoAttack, $01
00085B87 E10F                       	smpsAlterNote       $0F
00085B89 E701                       	dc.b	smpsNoAttack, $01
00085B8B E109                       	smpsAlterNote       $09
00085B8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B91 E10C                       	smpsAlterNote       $0C
00085B93 E701                       	dc.b	smpsNoAttack, $01
00085B95 E112                       	smpsAlterNote       $12
00085B97 E701                       	dc.b	smpsNoAttack, $01
00085B99 E113                       	smpsAlterNote       $13
00085B9B 8001                       	dc.b	nRst, $01
00085B9D E10D                       	smpsAlterNote       $0D
00085B9F C20D                       	dc.b	nF5, $0D
00085BA1 E10A                       	smpsAlterNote       $0A
00085BA3 E701                       	dc.b	smpsNoAttack, $01
00085BA5 E106                       	smpsAlterNote       $06
00085BA7 E701                       	dc.b	smpsNoAttack, $01
00085BA9 E10A                       	smpsAlterNote       $0A
00085BAB E701                       	dc.b	smpsNoAttack, $01
00085BAD E110                       	smpsAlterNote       $10
00085BAF E701                       	dc.b	smpsNoAttack, $01
00085BB1 E111                       	smpsAlterNote       $11
00085BB3 E701                       	dc.b	smpsNoAttack, $01
00085BB5 E10D                       	smpsAlterNote       $0D
00085BB7 E701                       	dc.b	smpsNoAttack, $01
00085BB9 E107                       	smpsAlterNote       $07
00085BBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BBF E10A                       	smpsAlterNote       $0A
00085BC1 E701                       	dc.b	smpsNoAttack, $01
00085BC3 E110                       	smpsAlterNote       $10
00085BC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BC9 E10A                       	smpsAlterNote       $0A
00085BCB E701                       	dc.b	smpsNoAttack, $01
00085BCD E107                       	smpsAlterNote       $07
00085BCF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BD3 E10D                       	smpsAlterNote       $0D
00085BD5 E701                       	dc.b	smpsNoAttack, $01
00085BD7 E111                       	smpsAlterNote       $11
00085BD9 E701                       	dc.b	smpsNoAttack, $01
00085BDB E110                       	smpsAlterNote       $10
00085BDD E701                       	dc.b	smpsNoAttack, $01
00085BDF E10A                       	smpsAlterNote       $0A
00085BE1 E701                       	dc.b	smpsNoAttack, $01
00085BE3 E106                       	smpsAlterNote       $06
00085BE5 E701                       	dc.b	smpsNoAttack, $01
00085BE7 E10A                       	smpsAlterNote       $0A
00085BE9 E701                       	dc.b	smpsNoAttack, $01
00085BEB E10D                       	smpsAlterNote       $0D
00085BED E701                       	dc.b	smpsNoAttack, $01
00085BEF E111                       	smpsAlterNote       $11
00085BF1 E701                       	dc.b	smpsNoAttack, $01
00085BF3 E10D                       	smpsAlterNote       $0D
00085BF5 E701                       	dc.b	smpsNoAttack, $01
00085BF7 E107                       	smpsAlterNote       $07
00085BF9 E701                       	dc.b	smpsNoAttack, $01
00085BFB E106                       	smpsAlterNote       $06
00085BFD E701                       	dc.b	smpsNoAttack, $01
00085BFF E10A                       	smpsAlterNote       $0A
00085C01 E701                       	dc.b	smpsNoAttack, $01
00085C03 E110                       	smpsAlterNote       $10
00085C05 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C09 E10D                       	smpsAlterNote       $0D
00085C0B E701                       	dc.b	smpsNoAttack, $01
00085C0D E107                       	smpsAlterNote       $07
00085C0F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C13 E10D                       	smpsAlterNote       $0D
00085C15 E701                       	dc.b	smpsNoAttack, $01
00085C17 E110                       	smpsAlterNote       $10
00085C19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C1D E10A                       	smpsAlterNote       $0A
00085C1F E701                       	dc.b	smpsNoAttack, $01
00085C21 E106                       	smpsAlterNote       $06
00085C23 E701                       	dc.b	smpsNoAttack, $01
00085C25 E107                       	smpsAlterNote       $07
00085C27 E701                       	dc.b	smpsNoAttack, $01
00085C29 E10D                       	smpsAlterNote       $0D
00085C2B E701                       	dc.b	smpsNoAttack, $01
00085C2D E111                       	smpsAlterNote       $11
00085C2F E701                       	dc.b	smpsNoAttack, $01
00085C31 E10D                       	smpsAlterNote       $0D
00085C33 E701                       	dc.b	smpsNoAttack, $01
00085C35 E10A                       	smpsAlterNote       $0A
00085C37 E701                       	dc.b	smpsNoAttack, $01
00085C39 E107                       	smpsAlterNote       $07
00085C3B 8001                       	dc.b	nRst, $01
00085C3D E10D                       	smpsAlterNote       $0D
00085C3F C206 8001                  	dc.b	nF5, $06, nRst, $01
00085C45 E601                       	smpsAlterVol        $01
00085C47 E110                       	smpsAlterNote       $10
00085C49 BB0D                       	dc.b	nBb4, $0D
00085C4B E10A                       	smpsAlterNote       $0A
00085C4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C51 E110                       	smpsAlterNote       $10
00085C53 E701                       	dc.b	smpsNoAttack, $01
00085C55 E113                       	smpsAlterNote       $13
00085C57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C5B E10D                       	smpsAlterNote       $0D
00085C5D E701                       	dc.b	smpsNoAttack, $01
00085C5F E109                       	smpsAlterNote       $09
00085C61 E701                       	dc.b	smpsNoAttack, $01
00085C63 E10A                       	smpsAlterNote       $0A
00085C65 E701                       	dc.b	smpsNoAttack, $01
00085C67 E110                       	smpsAlterNote       $10
00085C69 E701                       	dc.b	smpsNoAttack, $01
00085C6B E114                       	smpsAlterNote       $14
00085C6D E701                       	dc.b	smpsNoAttack, $01
00085C6F E110                       	smpsAlterNote       $10
00085C71 E701                       	dc.b	smpsNoAttack, $01
00085C73 E10D                       	smpsAlterNote       $0D
00085C75 E701                       	dc.b	smpsNoAttack, $01
00085C77 E109                       	smpsAlterNote       $09
00085C79 E701                       	dc.b	smpsNoAttack, $01
00085C7B E10A                       	smpsAlterNote       $0A
00085C7D 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00085C81 E107                       	smpsAlterNote       $07
00085C83 E701                       	dc.b	smpsNoAttack, $01
00085C85 E103                       	smpsAlterNote       $03
00085C87 E701                       	dc.b	smpsNoAttack, $01
00085C89 E107                       	smpsAlterNote       $07
00085C8B E701                       	dc.b	smpsNoAttack, $01
00085C8D E10D                       	smpsAlterNote       $0D
00085C8F E701                       	dc.b	smpsNoAttack, $01
00085C91 E10E                       	smpsAlterNote       $0E
00085C93 E701                       	dc.b	smpsNoAttack, $01
00085C95 E10A                       	smpsAlterNote       $0A
00085C97 E701                       	dc.b	smpsNoAttack, $01
00085C99 E104                       	smpsAlterNote       $04
00085C9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C9F E107                       	smpsAlterNote       $07
00085CA1 E701                       	dc.b	smpsNoAttack, $01
00085CA3 E10D                       	smpsAlterNote       $0D
00085CA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085CA9 E107                       	smpsAlterNote       $07
00085CAB E701                       	dc.b	smpsNoAttack, $01
00085CAD E104                       	smpsAlterNote       $04
00085CAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085CB3 E10B                       	smpsAlterNote       $0B
00085CB5 BF0D                       	dc.b	nD5, $0D
00085CB7 E108                       	smpsAlterNote       $08
00085CB9 E701                       	dc.b	smpsNoAttack, $01
00085CBB E105                       	smpsAlterNote       $05
00085CBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085CC1 E10B                       	smpsAlterNote       $0B
00085CC3 E701                       	dc.b	smpsNoAttack, $01
00085CC5 E10F                       	smpsAlterNote       $0F
00085CC7 E701                       	dc.b	smpsNoAttack, $01
00085CC9 E10E                       	smpsAlterNote       $0E
00085CCB E701                       	dc.b	smpsNoAttack, $01
00085CCD E108                       	smpsAlterNote       $08
00085CCF E701                       	dc.b	smpsNoAttack, $01
00085CD1 E104                       	smpsAlterNote       $04
00085CD3 E701                       	dc.b	smpsNoAttack, $01
00085CD5 E108                       	smpsAlterNote       $08
00085CD7 E701                       	dc.b	smpsNoAttack, $01
00085CD9 E10B                       	smpsAlterNote       $0B
00085CDB E701                       	dc.b	smpsNoAttack, $01
00085CDD E10F                       	smpsAlterNote       $0F
00085CDF E701                       	dc.b	smpsNoAttack, $01
00085CE1 E10B                       	smpsAlterNote       $0B
00085CE3 E701                       	dc.b	smpsNoAttack, $01
00085CE5 E105                       	smpsAlterNote       $05
00085CE7 E701                       	dc.b	smpsNoAttack, $01
00085CE9 E104                       	smpsAlterNote       $04
00085CEB E701                       	dc.b	smpsNoAttack, $01
00085CED E105                       	smpsAlterNote       $05
00085CEF 8001                       	dc.b	nRst, $01
00085CF1 E10C                       	smpsAlterNote       $0C
00085CF3 C10C                       	dc.b	nE5, $0C
00085CF5 E10D                       	smpsAlterNote       $0D
00085CF7 C201                       	dc.b	nF5, $01
00085CF9 E10E                       	smpsAlterNote       $0E
00085CFB C301 8001                  	dc.b	nFs5, $01, nRst, $01
00085CFF E10D                       	smpsAlterNote       $0D
00085D01 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00085D05 E10A                       	smpsAlterNote       $0A
00085D07 E701                       	dc.b	smpsNoAttack, $01
00085D09 E106                       	smpsAlterNote       $06
00085D0B E701                       	dc.b	smpsNoAttack, $01
00085D0D E10A                       	smpsAlterNote       $0A
00085D0F E701                       	dc.b	smpsNoAttack, $01
00085D11 E10D                       	smpsAlterNote       $0D
00085D13 E701                       	dc.b	smpsNoAttack, $01
00085D15 E111                       	smpsAlterNote       $11
00085D17 E701                       	dc.b	smpsNoAttack, $01
00085D19 E10D                       	smpsAlterNote       $0D
00085D1B E701                       	dc.b	smpsNoAttack, $01
00085D1D E107                       	smpsAlterNote       $07
00085D1F E701                       	dc.b	smpsNoAttack, $01
00085D21 E106                       	smpsAlterNote       $06
00085D23 E701                       	dc.b	smpsNoAttack, $01
00085D25 E10A                       	smpsAlterNote       $0A
00085D27 E701                       	dc.b	smpsNoAttack, $01
00085D29 E110                       	smpsAlterNote       $10
00085D2B E701                       	dc.b	smpsNoAttack, $01
00085D2D E111                       	smpsAlterNote       $11
00085D2F 8001                       	dc.b	nRst, $01
00085D31 E10D                       	smpsAlterNote       $0D
00085D33 C40D                       	dc.b	nG5, $0D
00085D35 E10A                       	smpsAlterNote       $0A
00085D37 E701                       	dc.b	smpsNoAttack, $01
00085D39 E106                       	smpsAlterNote       $06
00085D3B E701                       	dc.b	smpsNoAttack, $01
00085D3D E10A                       	smpsAlterNote       $0A
00085D3F E701                       	dc.b	smpsNoAttack, $01
00085D41 E10D                       	smpsAlterNote       $0D
00085D43 E701                       	dc.b	smpsNoAttack, $01
00085D45 E10C                       	smpsAlterNote       $0C
00085D47 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
00085D53 8001                       	dc.b	nRst, $01
00085D55 E10D                       	smpsAlterNote       $0D
00085D57 C20D                       	dc.b	nF5, $0D
00085D59 E10A                       	smpsAlterNote       $0A
00085D5B E701                       	dc.b	smpsNoAttack, $01
00085D5D E106                       	smpsAlterNote       $06
00085D5F E701                       	dc.b	smpsNoAttack, $01
00085D61 E10A                       	smpsAlterNote       $0A
00085D63 E701                       	dc.b	smpsNoAttack, $01
00085D65 E110                       	smpsAlterNote       $10
00085D67 E701                       	dc.b	smpsNoAttack, $01
00085D69 E111                       	smpsAlterNote       $11
00085D6B E701                       	dc.b	smpsNoAttack, $01
00085D6D E10D                       	smpsAlterNote       $0D
00085D6F E701                       	dc.b	smpsNoAttack, $01
00085D71 E107                       	smpsAlterNote       $07
00085D73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D77 E10A                       	smpsAlterNote       $0A
00085D79 E701                       	dc.b	smpsNoAttack, $01
00085D7B E110                       	smpsAlterNote       $10
00085D7D E701                       	dc.b	smpsNoAttack, $01
00085D7F E111                       	smpsAlterNote       $11
00085D81 8001                       	dc.b	nRst, $01
00085D83 E10F                       	smpsAlterNote       $0F
00085D85 C60A                       	dc.b	nA5, $0A
00085D87 E10D                       	smpsAlterNote       $0D
00085D89 C406 8001                  	dc.b	nG5, $06, nRst, $01
00085D8D E10C                       	smpsAlterNote       $0C
00085D8F C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00085D9B 8001                       	dc.b	nRst, $01
00085D9D E10D                       	smpsAlterNote       $0D
00085D9F C20D                       	dc.b	nF5, $0D
00085DA1 E107                       	smpsAlterNote       $07
00085DA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DA7 E10A                       	smpsAlterNote       $0A
00085DA9 E701                       	dc.b	smpsNoAttack, $01
00085DAB E110                       	smpsAlterNote       $10
00085DAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DB1 E10A                       	smpsAlterNote       $0A
00085DB3 E701                       	dc.b	smpsNoAttack, $01
00085DB5 E107                       	smpsAlterNote       $07
00085DB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DBB E10D                       	smpsAlterNote       $0D
00085DBD E701                       	dc.b	smpsNoAttack, $01
00085DBF E111                       	smpsAlterNote       $11
00085DC1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085DC5 E10D                       	smpsAlterNote       $0D
00085DC7 C40D                       	dc.b	nG5, $0D
00085DC9 E107                       	smpsAlterNote       $07
00085DCB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DCF E10A                       	smpsAlterNote       $0A
00085DD1 E701                       	dc.b	smpsNoAttack, $01
00085DD3 E10D                       	smpsAlterNote       $0D
00085DD5 8001                       	dc.b	nRst, $01
00085DD7 E10C                       	smpsAlterNote       $0C
00085DD9 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00085DE5 E10D                       	smpsAlterNote       $0D
00085DE7 C20E                       	dc.b	nF5, $0E
00085DE9 E107                       	smpsAlterNote       $07
00085DEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DEF E10D                       	smpsAlterNote       $0D
00085DF1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085DF7 E0C0                       	smpsPan             panCenter, $00
00085DF9 E603                       	smpsAlterVol        $03
00085DFB E108                       	smpsAlterNote       $08
00085DFD B406                       	dc.b	nEb4, $06
00085DFF E10C                       	smpsAlterNote       $0C
00085E01 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00085E05 E108                       	smpsAlterNote       $08
00085E07 B403                       	dc.b	nEb4, $03
00085E09 E109                       	smpsAlterNote       $09
00085E0B B803 8001                  	dc.b	nG4, $03, nRst, $01
00085E0F E10C                       	smpsAlterNote       $0C
00085E11 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
00085E19 03                         	dc.b	$03
00085E1A E6FD                       	smpsAlterVol        $FD
00085E1C F6F1 F4                    	smpsJump            music84_Jump00
00085E1F                            
00085E1F                            ; PSG1 Data
00085E1F                            music84_PSG1:
00085E1F E1FD                       	smpsAlterNote       $FD
00085E21 EC04                       	smpsPSGAlterVol     $04
00085E23 9203                       	dc.b	nF1, $03
00085E25 E1FE                       	smpsAlterNote       $FE
00085E27 9603                       	dc.b	nA1, $03
00085E29 EC04                       	smpsPSGAlterVol     $04
00085E2B E701                       	dc.b	smpsNoAttack, $01
00085E2D E1FF                       	smpsAlterNote       $FF
00085E2F ECFC                       	smpsPSGAlterVol     $FC
00085E31 9B03                       	dc.b	nD2, $03
00085E33 E1FD                       	smpsAlterNote       $FD
00085E35 9403                       	dc.b	nG1, $03
00085E37 EC04                       	smpsPSGAlterVol     $04
00085E39 E701                       	dc.b	smpsNoAttack, $01
00085E3B E1FE                       	smpsAlterNote       $FE
00085E3D ECFC                       	smpsPSGAlterVol     $FC
00085E3F 9703                       	dc.b	nBb1, $03
00085E41 E1FF                       	smpsAlterNote       $FF
00085E43 9B03                       	dc.b	nD2, $03
00085E45 EC04                       	smpsPSGAlterVol     $04
00085E47 E701                       	dc.b	smpsNoAttack, $01
00085E49 E1FE                       	smpsAlterNote       $FE
00085E4B ECFC                       	smpsPSGAlterVol     $FC
00085E4D A002                       	dc.b	nG2, $02
00085E4F EC04                       	smpsPSGAlterVol     $04
00085E51 E701                       	dc.b	smpsNoAttack, $01
00085E53 E1FF                       	smpsAlterNote       $FF
00085E55 ECFC                       	smpsPSGAlterVol     $FC
00085E57 A203                       	dc.b	nA2, $03
00085E59 EC0B                       	smpsPSGAlterVol     $0B
00085E5B 800A                       	dc.b	nRst, $0A
00085E5D E105                       	smpsAlterNote       $05
00085E5F 01                         	dc.b	$01
00085E60 E1FC                       	smpsAlterNote       $FC
00085E62 01                         	dc.b	$01
00085E63 E105                       	smpsAlterNote       $05
00085E65 01                         	dc.b	$01
00085E66 E1FD                       	smpsAlterNote       $FD
00085E68 01                         	dc.b	$01
00085E69 E105                       	smpsAlterNote       $05
00085E6B 01                         	dc.b	$01
00085E6C E1FD                       	smpsAlterNote       $FD
00085E6E 01                         	dc.b	$01
00085E6F E1FA                       	smpsAlterNote       $FA
00085E71 01                         	dc.b	$01
00085E72 E1FC                       	smpsAlterNote       $FC
00085E74 01                         	dc.b	$01
00085E75 E105                       	smpsAlterNote       $05
00085E77 01                         	dc.b	$01
00085E78 E108                       	smpsAlterNote       $08
00085E7A 0101                       	dc.b	$01, $01
00085E7C E105                       	smpsAlterNote       $05
00085E7E 01                         	dc.b	$01
00085E7F E1FA                       	smpsAlterNote       $FA
00085E81 0101                       	dc.b	$01, $01
00085E83 E1FD                       	smpsAlterNote       $FD
00085E85 01                         	dc.b	$01
00085E86 E105                       	smpsAlterNote       $05
00085E88 01                         	dc.b	$01
00085E89 E108                       	smpsAlterNote       $08
00085E8B 01                         	dc.b	$01
00085E8C E105                       	smpsAlterNote       $05
00085E8E 01                         	dc.b	$01
00085E8F E1FC                       	smpsAlterNote       $FC
00085E91 01                         	dc.b	$01
00085E92 E105                       	smpsAlterNote       $05
00085E94 01                         	dc.b	$01
00085E95 E1FD                       	smpsAlterNote       $FD
00085E97 01                         	dc.b	$01
00085E98                            
00085E98                            music84_Jump07:
00085E98 E105                       	smpsAlterNote       $05
00085E9A 8001                       	dc.b	nRst, $01
00085E9C E1FD                       	smpsAlterNote       $FD
00085E9E 01                         	dc.b	$01
00085E9F E1FA                       	smpsAlterNote       $FA
00085EA1 01                         	dc.b	$01
00085EA2 E1FC                       	smpsAlterNote       $FC
00085EA4 01                         	dc.b	$01
00085EA5 E1FD                       	smpsAlterNote       $FD
00085EA7 ECF5                       	smpsPSGAlterVol     $F5
00085EA9 9206                       	dc.b	nF1, $06
00085EAB EC04                       	smpsPSGAlterVol     $04
00085EAD E701                       	dc.b	smpsNoAttack, $01
00085EAF EC07                       	smpsPSGAlterVol     $07
00085EB1 8003                       	dc.b	nRst, $03
00085EB3 ECF5                       	smpsPSGAlterVol     $F5
00085EB5 9206                       	dc.b	nF1, $06
00085EB7 EC04                       	smpsPSGAlterVol     $04
00085EB9 E701                       	dc.b	smpsNoAttack, $01
00085EBB EC07                       	smpsPSGAlterVol     $07
00085EBD 8006                       	dc.b	nRst, $06
00085EBF E100                       	smpsAlterNote       $00
00085EC1 01                         	dc.b	$01
00085EC2 E104                       	smpsAlterNote       $04
00085EC4 01                         	dc.b	$01
00085EC5 E100                       	smpsAlterNote       $00
00085EC7 01                         	dc.b	$01
00085EC8 E1FB                       	smpsAlterNote       $FB
00085ECA 01                         	dc.b	$01
00085ECB E1FD                       	smpsAlterNote       $FD
00085ECD ECF5                       	smpsPSGAlterVol     $F5
00085ECF 9406                       	dc.b	nG1, $06
00085ED1 EC04                       	smpsPSGAlterVol     $04
00085ED3 E701                       	dc.b	smpsNoAttack, $01
00085ED5 EC07                       	smpsPSGAlterVol     $07
00085ED7 8003                       	dc.b	nRst, $03
00085ED9 ECF5                       	smpsPSGAlterVol     $F5
00085EDB 9407                       	dc.b	nG1, $07
00085EDD EC0B                       	smpsPSGAlterVol     $0B
00085EDF 8006                       	dc.b	nRst, $06
00085EE1 E100                       	smpsAlterNote       $00
00085EE3 01                         	dc.b	$01
00085EE4 E103                       	smpsAlterNote       $03
00085EE6 0101                       	dc.b	$01, $01
00085EE8 E1FD                       	smpsAlterNote       $FD
00085EEA 01                         	dc.b	$01
00085EEB ECF5                       	smpsPSGAlterVol     $F5
00085EED 9207                       	dc.b	nF1, $07
00085EEF EC0B                       	smpsPSGAlterVol     $0B
00085EF1 8004                       	dc.b	nRst, $04
00085EF3 ECF5                       	smpsPSGAlterVol     $F5
00085EF5 9206                       	dc.b	nF1, $06
00085EF7 EC04                       	smpsPSGAlterVol     $04
00085EF9 E701                       	dc.b	smpsNoAttack, $01
00085EFB EC07                       	smpsPSGAlterVol     $07
00085EFD 8006                       	dc.b	nRst, $06
00085EFF E103                       	smpsAlterNote       $03
00085F01 01                         	dc.b	$01
00085F02 E104                       	smpsAlterNote       $04
00085F04 01                         	dc.b	$01
00085F05 E100                       	smpsAlterNote       $00
00085F07 01                         	dc.b	$01
00085F08 E1FA                       	smpsAlterNote       $FA
00085F0A 01                         	dc.b	$01
00085F0B E1FD                       	smpsAlterNote       $FD
00085F0D ECF5                       	smpsPSGAlterVol     $F5
00085F0F 9206                       	dc.b	nF1, $06
00085F11 EC04                       	smpsPSGAlterVol     $04
00085F13 E701                       	dc.b	smpsNoAttack, $01
00085F15 EC07                       	smpsPSGAlterVol     $07
00085F17 8003                       	dc.b	nRst, $03
00085F19 ECF5                       	smpsPSGAlterVol     $F5
00085F1B 9106                       	dc.b	nE1, $06
00085F1D EC04                       	smpsPSGAlterVol     $04
00085F1F E701                       	dc.b	smpsNoAttack, $01
00085F21 EC07                       	smpsPSGAlterVol     $07
00085F23 8006                       	dc.b	nRst, $06
00085F25 E100                       	smpsAlterNote       $00
00085F27 01                         	dc.b	$01
00085F28 E104                       	smpsAlterNote       $04
00085F2A 01                         	dc.b	$01
00085F2B E100                       	smpsAlterNote       $00
00085F2D 01                         	dc.b	$01
00085F2E E1FD                       	smpsAlterNote       $FD
00085F30 01                         	dc.b	$01
00085F31 ECF5                       	smpsPSGAlterVol     $F5
00085F33 9206                       	dc.b	nF1, $06
00085F35 EC04                       	smpsPSGAlterVol     $04
00085F37 E701                       	dc.b	smpsNoAttack, $01
00085F39 EC07                       	smpsPSGAlterVol     $07
00085F3B 8003                       	dc.b	nRst, $03
00085F3D ECF5                       	smpsPSGAlterVol     $F5
00085F3F 9207                       	dc.b	nF1, $07
00085F41 EC0B                       	smpsPSGAlterVol     $0B
00085F43 8007                       	dc.b	nRst, $07
00085F45 E103                       	smpsAlterNote       $03
00085F47 0101                       	dc.b	$01, $01
00085F49 E1FD                       	smpsAlterNote       $FD
00085F4B 01                         	dc.b	$01
00085F4C E1FB                       	smpsAlterNote       $FB
00085F4E 01                         	dc.b	$01
00085F4F E1FD                       	smpsAlterNote       $FD
00085F51 ECF5                       	smpsPSGAlterVol     $F5
00085F53 9406                       	dc.b	nG1, $06
00085F55 EC0B                       	smpsPSGAlterVol     $0B
00085F57 8004                       	dc.b	nRst, $04
00085F59 ECF5                       	smpsPSGAlterVol     $F5
00085F5B 9406                       	dc.b	nG1, $06
00085F5D EC04                       	smpsPSGAlterVol     $04
00085F5F E701                       	dc.b	smpsNoAttack, $01
00085F61 EC07                       	smpsPSGAlterVol     $07
00085F63 8006                       	dc.b	nRst, $06
00085F65 E100                       	smpsAlterNote       $00
00085F67 01                         	dc.b	$01
00085F68 E104                       	smpsAlterNote       $04
00085F6A 01                         	dc.b	$01
00085F6B E100                       	smpsAlterNote       $00
00085F6D 01                         	dc.b	$01
00085F6E E1F9                       	smpsAlterNote       $F9
00085F70 01                         	dc.b	$01
00085F71 E1FD                       	smpsAlterNote       $FD
00085F73 ECF5                       	smpsPSGAlterVol     $F5
00085F75 9206                       	dc.b	nF1, $06
00085F77 EC04                       	smpsPSGAlterVol     $04
00085F79 E701                       	dc.b	smpsNoAttack, $01
00085F7B EC07                       	smpsPSGAlterVol     $07
00085F7D 8003                       	dc.b	nRst, $03
00085F7F ECF5                       	smpsPSGAlterVol     $F5
00085F81 9207                       	dc.b	nF1, $07
00085F83 EC0B                       	smpsPSGAlterVol     $0B
00085F85 8006                       	dc.b	nRst, $06
00085F87 E100                       	smpsAlterNote       $00
00085F89 01                         	dc.b	$01
00085F8A E104                       	smpsAlterNote       $04
00085F8C 01                         	dc.b	$01
00085F8D E103                       	smpsAlterNote       $03
00085F8F 01                         	dc.b	$01
00085F90 E1FD                       	smpsAlterNote       $FD
00085F92 01                         	dc.b	$01
00085F93 ECF5                       	smpsPSGAlterVol     $F5
00085F95 9207                       	dc.b	nF1, $07
00085F97 EC0B                       	smpsPSGAlterVol     $0B
00085F99 8004                       	dc.b	nRst, $04
00085F9B ECF5                       	smpsPSGAlterVol     $F5
00085F9D 9206                       	dc.b	nF1, $06
00085F9F EC0B                       	smpsPSGAlterVol     $0B
00085FA1 8007                       	dc.b	nRst, $07
00085FA3 E103                       	smpsAlterNote       $03
00085FA5 0101                       	dc.b	$01, $01
00085FA7 E100                       	smpsAlterNote       $00
00085FA9 01                         	dc.b	$01
00085FAA E1FA                       	smpsAlterNote       $FA
00085FAC 01                         	dc.b	$01
00085FAD E1FD                       	smpsAlterNote       $FD
00085FAF ECF5                       	smpsPSGAlterVol     $F5
00085FB1 9206                       	dc.b	nF1, $06
00085FB3 EC04                       	smpsPSGAlterVol     $04
00085FB5 E701                       	dc.b	smpsNoAttack, $01
00085FB7 EC07                       	smpsPSGAlterVol     $07
00085FB9 8003                       	dc.b	nRst, $03
00085FBB ECF5                       	smpsPSGAlterVol     $F5
00085FBD 9206                       	dc.b	nF1, $06
00085FBF EC04                       	smpsPSGAlterVol     $04
00085FC1 E701                       	dc.b	smpsNoAttack, $01
00085FC3 EC07                       	smpsPSGAlterVol     $07
00085FC5 8006                       	dc.b	nRst, $06
00085FC7 E100                       	smpsAlterNote       $00
00085FC9 01                         	dc.b	$01
00085FCA E104                       	smpsAlterNote       $04
00085FCC 01                         	dc.b	$01
00085FCD E100                       	smpsAlterNote       $00
00085FCF 01                         	dc.b	$01
00085FD0 E1FD                       	smpsAlterNote       $FD
00085FD2 01                         	dc.b	$01
00085FD3 ECF5                       	smpsPSGAlterVol     $F5
00085FD5 9206                       	dc.b	nF1, $06
00085FD7 EC04                       	smpsPSGAlterVol     $04
00085FD9 E701                       	dc.b	smpsNoAttack, $01
00085FDB EC07                       	smpsPSGAlterVol     $07
00085FDD 8003                       	dc.b	nRst, $03
00085FDF ECF5                       	smpsPSGAlterVol     $F5
00085FE1 9207                       	dc.b	nF1, $07
00085FE3 EC0B                       	smpsPSGAlterVol     $0B
00085FE5 8007                       	dc.b	nRst, $07
00085FE7 E103                       	smpsAlterNote       $03
00085FE9 0101                       	dc.b	$01, $01
00085FEB E1FD                       	smpsAlterNote       $FD
00085FED 01                         	dc.b	$01
00085FEE E1FA                       	smpsAlterNote       $FA
00085FF0 01                         	dc.b	$01
00085FF1 E1FD                       	smpsAlterNote       $FD
00085FF3 ECF5                       	smpsPSGAlterVol     $F5
00085FF5 9206                       	dc.b	nF1, $06
00085FF7 EC0B                       	smpsPSGAlterVol     $0B
00085FF9 8004                       	dc.b	nRst, $04
00085FFB ECF5                       	smpsPSGAlterVol     $F5
00085FFD 9206                       	dc.b	nF1, $06
00085FFF EC04                       	smpsPSGAlterVol     $04
00086001 E701                       	dc.b	smpsNoAttack, $01
00086003 EC07                       	smpsPSGAlterVol     $07
00086005 8006                       	dc.b	nRst, $06
00086007 E103                       	smpsAlterNote       $03
00086009 01                         	dc.b	$01
0008600A E104                       	smpsAlterNote       $04
0008600C 01                         	dc.b	$01
0008600D E100                       	smpsAlterNote       $00
0008600F 01                         	dc.b	$01
00086010 E1FA                       	smpsAlterNote       $FA
00086012 01                         	dc.b	$01
00086013 E1FD                       	smpsAlterNote       $FD
00086015 ECF5                       	smpsPSGAlterVol     $F5
00086017 9206                       	dc.b	nF1, $06
00086019 EC04                       	smpsPSGAlterVol     $04
0008601B E701                       	dc.b	smpsNoAttack, $01
0008601D EC07                       	smpsPSGAlterVol     $07
0008601F 8003                       	dc.b	nRst, $03
00086021 ECF5                       	smpsPSGAlterVol     $F5
00086023 9206                       	dc.b	nF1, $06
00086025 EC04                       	smpsPSGAlterVol     $04
00086027 E701                       	dc.b	smpsNoAttack, $01
00086029 EC07                       	smpsPSGAlterVol     $07
0008602B 8006                       	dc.b	nRst, $06
0008602D E100                       	smpsAlterNote       $00
0008602F 01                         	dc.b	$01
00086030 E104                       	smpsAlterNote       $04
00086032 01                         	dc.b	$01
00086033 E103                       	smpsAlterNote       $03
00086035 01                         	dc.b	$01
00086036 E1FD                       	smpsAlterNote       $FD
00086038 01                         	dc.b	$01
00086039 ECF5                       	smpsPSGAlterVol     $F5
0008603B 9107                       	dc.b	nE1, $07
0008603D EC0B                       	smpsPSGAlterVol     $0B
0008603F 8004                       	dc.b	nRst, $04
00086041 ECF5                       	smpsPSGAlterVol     $F5
00086043 9106                       	dc.b	nE1, $06
00086045 EC0B                       	smpsPSGAlterVol     $0B
00086047 8007                       	dc.b	nRst, $07
00086049 E103                       	smpsAlterNote       $03
0008604B 0101                       	dc.b	$01, $01
0008604D E100                       	smpsAlterNote       $00
0008604F 01                         	dc.b	$01
00086050 E1FA                       	smpsAlterNote       $FA
00086052 01                         	dc.b	$01
00086053 E1FD                       	smpsAlterNote       $FD
00086055 ECF5                       	smpsPSGAlterVol     $F5
00086057 9106                       	dc.b	nE1, $06
00086059 EC04                       	smpsPSGAlterVol     $04
0008605B E701                       	dc.b	smpsNoAttack, $01
0008605D EC07                       	smpsPSGAlterVol     $07
0008605F 8003                       	dc.b	nRst, $03
00086061 ECF5                       	smpsPSGAlterVol     $F5
00086063 9106                       	dc.b	nE1, $06
00086065 EC04                       	smpsPSGAlterVol     $04
00086067 E701                       	dc.b	smpsNoAttack, $01
00086069 EC07                       	smpsPSGAlterVol     $07
0008606B 8006                       	dc.b	nRst, $06
0008606D E100                       	smpsAlterNote       $00
0008606F 01                         	dc.b	$01
00086070 E104                       	smpsAlterNote       $04
00086072 01                         	dc.b	$01
00086073 E100                       	smpsAlterNote       $00
00086075 01                         	dc.b	$01
00086076 E1FA                       	smpsAlterNote       $FA
00086078 01                         	dc.b	$01
00086079 E1FD                       	smpsAlterNote       $FD
0008607B ECF5                       	smpsPSGAlterVol     $F5
0008607D 9106                       	dc.b	nE1, $06
0008607F EC04                       	smpsPSGAlterVol     $04
00086081 E701                       	dc.b	smpsNoAttack, $01
00086083 EC07                       	smpsPSGAlterVol     $07
00086085 8003                       	dc.b	nRst, $03
00086087 ECF5                       	smpsPSGAlterVol     $F5
00086089 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008608D EC04                       	smpsPSGAlterVol     $04
0008608F E701                       	dc.b	smpsNoAttack, $01
00086091 ECFC                       	smpsPSGAlterVol     $FC
00086093 9103 9103                  	dc.b	nE1, $03, nE1, $03
00086097 EC04                       	smpsPSGAlterVol     $04
00086099 E701                       	dc.b	smpsNoAttack, $01
0008609B ECFC                       	smpsPSGAlterVol     $FC
0008609D 9106                       	dc.b	nE1, $06
0008609F EC04                       	smpsPSGAlterVol     $04
000860A1 E701                       	dc.b	smpsNoAttack, $01
000860A3 EC07                       	smpsPSGAlterVol     $07
000860A5 8006                       	dc.b	nRst, $06
000860A7 E100                       	smpsAlterNote       $00
000860A9 01                         	dc.b	$01
000860AA E104                       	smpsAlterNote       $04
000860AC 01                         	dc.b	$01
000860AD E100                       	smpsAlterNote       $00
000860AF 01                         	dc.b	$01
000860B0 E1FA                       	smpsAlterNote       $FA
000860B2 01                         	dc.b	$01
000860B3 E1F9                       	smpsAlterNote       $F9
000860B5 01                         	dc.b	$01
000860B6 E1FD                       	smpsAlterNote       $FD
000860B8 01                         	dc.b	$01
000860B9 E103                       	smpsAlterNote       $03
000860BB 01                         	dc.b	$01
000860BC E104                       	smpsAlterNote       $04
000860BE 01                         	dc.b	$01
000860BF E100                       	smpsAlterNote       $00
000860C1 01                         	dc.b	$01
000860C2 E1FA                       	smpsAlterNote       $FA
000860C4 0101                       	dc.b	$01, $01
000860C6 E1FD                       	smpsAlterNote       $FD
000860C8 ECF5                       	smpsPSGAlterVol     $F5
000860CA 9206                       	dc.b	nF1, $06
000860CC EC04                       	smpsPSGAlterVol     $04
000860CE E701                       	dc.b	smpsNoAttack, $01
000860D0 EC07                       	smpsPSGAlterVol     $07
000860D2 8003                       	dc.b	nRst, $03
000860D4 ECF5                       	smpsPSGAlterVol     $F5
000860D6 9206                       	dc.b	nF1, $06
000860D8 EC04                       	smpsPSGAlterVol     $04
000860DA E701                       	dc.b	smpsNoAttack, $01
000860DC EC07                       	smpsPSGAlterVol     $07
000860DE 8006                       	dc.b	nRst, $06
000860E0 E100                       	smpsAlterNote       $00
000860E2 01                         	dc.b	$01
000860E3 E104                       	smpsAlterNote       $04
000860E5 01                         	dc.b	$01
000860E6 E103                       	smpsAlterNote       $03
000860E8 01                         	dc.b	$01
000860E9 E1FD                       	smpsAlterNote       $FD
000860EB 01                         	dc.b	$01
000860EC ECF5                       	smpsPSGAlterVol     $F5
000860EE 9407                       	dc.b	nG1, $07
000860F0 EC0B                       	smpsPSGAlterVol     $0B
000860F2 8004                       	dc.b	nRst, $04
000860F4 ECF5                       	smpsPSGAlterVol     $F5
000860F6 9406                       	dc.b	nG1, $06
000860F8 EC0B                       	smpsPSGAlterVol     $0B
000860FA 8007                       	dc.b	nRst, $07
000860FC E103                       	smpsAlterNote       $03
000860FE 0101                       	dc.b	$01, $01
00086100 E1FD                       	smpsAlterNote       $FD
00086102 01                         	dc.b	$01
00086103 E1F9                       	smpsAlterNote       $F9
00086105 01                         	dc.b	$01
00086106 E1FD                       	smpsAlterNote       $FD
00086108 ECF5                       	smpsPSGAlterVol     $F5
0008610A 9206                       	dc.b	nF1, $06
0008610C EC04                       	smpsPSGAlterVol     $04
0008610E E701                       	dc.b	smpsNoAttack, $01
00086110 EC07                       	smpsPSGAlterVol     $07
00086112 8003                       	dc.b	nRst, $03
00086114 ECF5                       	smpsPSGAlterVol     $F5
00086116 9206                       	dc.b	nF1, $06
00086118 EC04                       	smpsPSGAlterVol     $04
0008611A E701                       	dc.b	smpsNoAttack, $01
0008611C EC07                       	smpsPSGAlterVol     $07
0008611E 8006                       	dc.b	nRst, $06
00086120 E100                       	smpsAlterNote       $00
00086122 01                         	dc.b	$01
00086123 E104                       	smpsAlterNote       $04
00086125 01                         	dc.b	$01
00086126 E100                       	smpsAlterNote       $00
00086128 01                         	dc.b	$01
00086129 E1FA                       	smpsAlterNote       $FA
0008612B 01                         	dc.b	$01
0008612C E1FD                       	smpsAlterNote       $FD
0008612E ECF5                       	smpsPSGAlterVol     $F5
00086130 9206                       	dc.b	nF1, $06
00086132 EC04                       	smpsPSGAlterVol     $04
00086134 E701                       	dc.b	smpsNoAttack, $01
00086136 EC07                       	smpsPSGAlterVol     $07
00086138 8003                       	dc.b	nRst, $03
0008613A ECF5                       	smpsPSGAlterVol     $F5
0008613C 9107                       	dc.b	nE1, $07
0008613E EC0B                       	smpsPSGAlterVol     $0B
00086140 8006                       	dc.b	nRst, $06
00086142 E100                       	smpsAlterNote       $00
00086144 01                         	dc.b	$01
00086145 E103                       	smpsAlterNote       $03
00086147 0101                       	dc.b	$01, $01
00086149 E1FD                       	smpsAlterNote       $FD
0008614B 01                         	dc.b	$01
0008614C ECF5                       	smpsPSGAlterVol     $F5
0008614E 9207                       	dc.b	nF1, $07
00086150 EC0B                       	smpsPSGAlterVol     $0B
00086152 8004                       	dc.b	nRst, $04
00086154 ECF5                       	smpsPSGAlterVol     $F5
00086156 9206                       	dc.b	nF1, $06
00086158 EC04                       	smpsPSGAlterVol     $04
0008615A E701                       	dc.b	smpsNoAttack, $01
0008615C EC07                       	smpsPSGAlterVol     $07
0008615E 8006                       	dc.b	nRst, $06
00086160 E103                       	smpsAlterNote       $03
00086162 01                         	dc.b	$01
00086163 E104                       	smpsAlterNote       $04
00086165 01                         	dc.b	$01
00086166 E100                       	smpsAlterNote       $00
00086168 01                         	dc.b	$01
00086169 E1FB                       	smpsAlterNote       $FB
0008616B 01                         	dc.b	$01
0008616C E1FD                       	smpsAlterNote       $FD
0008616E ECF5                       	smpsPSGAlterVol     $F5
00086170 9406                       	dc.b	nG1, $06
00086172 EC04                       	smpsPSGAlterVol     $04
00086174 E701                       	dc.b	smpsNoAttack, $01
00086176 EC07                       	smpsPSGAlterVol     $07
00086178 8003                       	dc.b	nRst, $03
0008617A ECF5                       	smpsPSGAlterVol     $F5
0008617C 9406                       	dc.b	nG1, $06
0008617E EC04                       	smpsPSGAlterVol     $04
00086180 E701                       	dc.b	smpsNoAttack, $01
00086182 EC07                       	smpsPSGAlterVol     $07
00086184 8006                       	dc.b	nRst, $06
00086186 E100                       	smpsAlterNote       $00
00086188 01                         	dc.b	$01
00086189 E104                       	smpsAlterNote       $04
0008618B 01                         	dc.b	$01
0008618C E100                       	smpsAlterNote       $00
0008618E 01                         	dc.b	$01
0008618F E1FD                       	smpsAlterNote       $FD
00086191 01                         	dc.b	$01
00086192 ECF5                       	smpsPSGAlterVol     $F5
00086194 9206                       	dc.b	nF1, $06
00086196 EC04                       	smpsPSGAlterVol     $04
00086198 E701                       	dc.b	smpsNoAttack, $01
0008619A EC07                       	smpsPSGAlterVol     $07
0008619C 8003                       	dc.b	nRst, $03
0008619E ECF5                       	smpsPSGAlterVol     $F5
000861A0 9207                       	dc.b	nF1, $07
000861A2 EC0B                       	smpsPSGAlterVol     $0B
000861A4 8007                       	dc.b	nRst, $07
000861A6 E103                       	smpsAlterNote       $03
000861A8 0101                       	dc.b	$01, $01
000861AA E1FD                       	smpsAlterNote       $FD
000861AC 01                         	dc.b	$01
000861AD E1FA                       	smpsAlterNote       $FA
000861AF 01                         	dc.b	$01
000861B0 E1FD                       	smpsAlterNote       $FD
000861B2 ECF5                       	smpsPSGAlterVol     $F5
000861B4 9206                       	dc.b	nF1, $06
000861B6 EC0B                       	smpsPSGAlterVol     $0B
000861B8 8004                       	dc.b	nRst, $04
000861BA ECF5                       	smpsPSGAlterVol     $F5
000861BC 9206                       	dc.b	nF1, $06
000861BE EC04                       	smpsPSGAlterVol     $04
000861C0 E701                       	dc.b	smpsNoAttack, $01
000861C2 EC07                       	smpsPSGAlterVol     $07
000861C4 8006                       	dc.b	nRst, $06
000861C6 E100                       	smpsAlterNote       $00
000861C8 01                         	dc.b	$01
000861C9 E104                       	smpsAlterNote       $04
000861CB 01                         	dc.b	$01
000861CC E100                       	smpsAlterNote       $00
000861CE 01                         	dc.b	$01
000861CF E1FA                       	smpsAlterNote       $FA
000861D1 01                         	dc.b	$01
000861D2 E1FD                       	smpsAlterNote       $FD
000861D4 ECF5                       	smpsPSGAlterVol     $F5
000861D6 9206                       	dc.b	nF1, $06
000861D8 EC04                       	smpsPSGAlterVol     $04
000861DA E704                       	dc.b	smpsNoAttack, $04
000861DC ECFC                       	smpsPSGAlterVol     $FC
000861DE 9207                       	dc.b	nF1, $07
000861E0 EC0B                       	smpsPSGAlterVol     $0B
000861E2 8006                       	dc.b	nRst, $06
000861E4 E100                       	smpsAlterNote       $00
000861E6 01                         	dc.b	$01
000861E7 E104                       	smpsAlterNote       $04
000861E9 01                         	dc.b	$01
000861EA E103                       	smpsAlterNote       $03
000861EC 01                         	dc.b	$01
000861ED E1FD                       	smpsAlterNote       $FD
000861EF 01                         	dc.b	$01
000861F0 ECF5                       	smpsPSGAlterVol     $F5
000861F2 9207                       	dc.b	nF1, $07
000861F4 EC0B                       	smpsPSGAlterVol     $0B
000861F6 8004                       	dc.b	nRst, $04
000861F8 ECF5                       	smpsPSGAlterVol     $F5
000861FA 9206                       	dc.b	nF1, $06
000861FC EC0B                       	smpsPSGAlterVol     $0B
000861FE 8007                       	dc.b	nRst, $07
00086200 E103                       	smpsAlterNote       $03
00086202 0101                       	dc.b	$01, $01
00086204 E100                       	smpsAlterNote       $00
00086206 01                         	dc.b	$01
00086207 E1FA                       	smpsAlterNote       $FA
00086209 01                         	dc.b	$01
0008620A E1FD                       	smpsAlterNote       $FD
0008620C ECF5                       	smpsPSGAlterVol     $F5
0008620E 9206                       	dc.b	nF1, $06
00086210 EC04                       	smpsPSGAlterVol     $04
00086212 E704                       	dc.b	smpsNoAttack, $04
00086214 ECFC                       	smpsPSGAlterVol     $FC
00086216 9206                       	dc.b	nF1, $06
00086218 EC04                       	smpsPSGAlterVol     $04
0008621A E701                       	dc.b	smpsNoAttack, $01
0008621C EC07                       	smpsPSGAlterVol     $07
0008621E 8006                       	dc.b	nRst, $06
00086220 E100                       	smpsAlterNote       $00
00086222 01                         	dc.b	$01
00086223 E104                       	smpsAlterNote       $04
00086225 01                         	dc.b	$01
00086226 E100                       	smpsAlterNote       $00
00086228 01                         	dc.b	$01
00086229 E1FD                       	smpsAlterNote       $FD
0008622B 01                         	dc.b	$01
0008622C ECF5                       	smpsPSGAlterVol     $F5
0008622E 9206                       	dc.b	nF1, $06
00086230 EC04                       	smpsPSGAlterVol     $04
00086232 E701                       	dc.b	smpsNoAttack, $01
00086234 EC07                       	smpsPSGAlterVol     $07
00086236 8003                       	dc.b	nRst, $03
00086238 ECF5                       	smpsPSGAlterVol     $F5
0008623A 9207                       	dc.b	nF1, $07
0008623C EC0B                       	smpsPSGAlterVol     $0B
0008623E 8007                       	dc.b	nRst, $07
00086240 E103                       	smpsAlterNote       $03
00086242 0101                       	dc.b	$01, $01
00086244 E1FD                       	smpsAlterNote       $FD
00086246 01                         	dc.b	$01
00086247 E1FA                       	smpsAlterNote       $FA
00086249 01                         	dc.b	$01
0008624A E1FD                       	smpsAlterNote       $FD
0008624C ECF5                       	smpsPSGAlterVol     $F5
0008624E 9106                       	dc.b	nE1, $06
00086250 EC0B                       	smpsPSGAlterVol     $0B
00086252 8004                       	dc.b	nRst, $04
00086254 ECF5                       	smpsPSGAlterVol     $F5
00086256 9106                       	dc.b	nE1, $06
00086258 EC04                       	smpsPSGAlterVol     $04
0008625A E701                       	dc.b	smpsNoAttack, $01
0008625C EC07                       	smpsPSGAlterVol     $07
0008625E 8006                       	dc.b	nRst, $06
00086260 E100                       	smpsAlterNote       $00
00086262 01                         	dc.b	$01
00086263 E104                       	smpsAlterNote       $04
00086265 01                         	dc.b	$01
00086266 E100                       	smpsAlterNote       $00
00086268 01                         	dc.b	$01
00086269 E1FA                       	smpsAlterNote       $FA
0008626B 01                         	dc.b	$01
0008626C E1FD                       	smpsAlterNote       $FD
0008626E ECF5                       	smpsPSGAlterVol     $F5
00086270 9106                       	dc.b	nE1, $06
00086272 EC04                       	smpsPSGAlterVol     $04
00086274 E701                       	dc.b	smpsNoAttack, $01
00086276 EC07                       	smpsPSGAlterVol     $07
00086278 8003                       	dc.b	nRst, $03
0008627A ECF5                       	smpsPSGAlterVol     $F5
0008627C 9106                       	dc.b	nE1, $06
0008627E EC04                       	smpsPSGAlterVol     $04
00086280 E701                       	dc.b	smpsNoAttack, $01
00086282 EC07                       	smpsPSGAlterVol     $07
00086284 8006                       	dc.b	nRst, $06
00086286 E100                       	smpsAlterNote       $00
00086288 01                         	dc.b	$01
00086289 E104                       	smpsAlterNote       $04
0008628B 01                         	dc.b	$01
0008628C E103                       	smpsAlterNote       $03
0008628E 01                         	dc.b	$01
0008628F E1FD                       	smpsAlterNote       $FD
00086291 01                         	dc.b	$01
00086292 ECF5                       	smpsPSGAlterVol     $F5
00086294 9107                       	dc.b	nE1, $07
00086296 EC0B                       	smpsPSGAlterVol     $0B
00086298 8004                       	dc.b	nRst, $04
0008629A ECF5                       	smpsPSGAlterVol     $F5
0008629C 9106                       	dc.b	nE1, $06
0008629E EC0B                       	smpsPSGAlterVol     $0B
000862A0 8007                       	dc.b	nRst, $07
000862A2 E103                       	smpsAlterNote       $03
000862A4 0101                       	dc.b	$01, $01
000862A6 E100                       	smpsAlterNote       $00
000862A8 01                         	dc.b	$01
000862A9 E1FA                       	smpsAlterNote       $FA
000862AB 01                         	dc.b	$01
000862AC E1FD                       	smpsAlterNote       $FD
000862AE ECF5                       	smpsPSGAlterVol     $F5
000862B0 9106                       	dc.b	nE1, $06
000862B2 EC04                       	smpsPSGAlterVol     $04
000862B4 E701                       	dc.b	smpsNoAttack, $01
000862B6 EC07                       	smpsPSGAlterVol     $07
000862B8 8003                       	dc.b	nRst, $03
000862BA ECF5                       	smpsPSGAlterVol     $F5
000862BC 9106                       	dc.b	nE1, $06
000862BE EC04                       	smpsPSGAlterVol     $04
000862C0 E701                       	dc.b	smpsNoAttack, $01
000862C2 EC07                       	smpsPSGAlterVol     $07
000862C4 8003                       	dc.b	nRst, $03
000862C6 ECF5                       	smpsPSGAlterVol     $F5
000862C8 9207                       	dc.b	nF1, $07
000862CA EC0B                       	smpsPSGAlterVol     $0B
000862CC 8006                       	dc.b	nRst, $06
000862CE E100                       	smpsAlterNote       $00
000862D0 01                         	dc.b	$01
000862D1 E104                       	smpsAlterNote       $04
000862D3 01                         	dc.b	$01
000862D4 E103                       	smpsAlterNote       $03
000862D6 01                         	dc.b	$01
000862D7 E1FD                       	smpsAlterNote       $FD
000862D9 01                         	dc.b	$01
000862DA E1F9                       	smpsAlterNote       $F9
000862DC 01                         	dc.b	$01
000862DD E1FD                       	smpsAlterNote       $FD
000862DF 01                         	dc.b	$01
000862E0 E100                       	smpsAlterNote       $00
000862E2 01                         	dc.b	$01
000862E3 E104                       	smpsAlterNote       $04
000862E5 01                         	dc.b	$01
000862E6 E1FD                       	smpsAlterNote       $FD
000862E8 ECF5                       	smpsPSGAlterVol     $F5
000862EA 9203 9203                  	dc.b	nF1, $03, nF1, $03
000862EE EC04                       	smpsPSGAlterVol     $04
000862F0 E701                       	dc.b	smpsNoAttack, $01
000862F2 EC07                       	smpsPSGAlterVol     $07
000862F4 8009                       	dc.b	nRst, $09
000862F6 E100                       	smpsAlterNote       $00
000862F8 01                         	dc.b	$01
000862F9 E104                       	smpsAlterNote       $04
000862FB 01                         	dc.b	$01
000862FC E103                       	smpsAlterNote       $03
000862FE 01                         	dc.b	$01
000862FF E1FD                       	smpsAlterNote       $FD
00086301 01                         	dc.b	$01
00086302 E1F9                       	smpsAlterNote       $F9
00086304 01                         	dc.b	$01
00086305 E1FD                       	smpsAlterNote       $FD
00086307 01                         	dc.b	$01
00086308 E100                       	smpsAlterNote       $00
0008630A 01                         	dc.b	$01
0008630B E104                       	smpsAlterNote       $04
0008630D 01                         	dc.b	$01
0008630E E100                       	smpsAlterNote       $00
00086310 01                         	dc.b	$01
00086311 E1FA                       	smpsAlterNote       $FA
00086313 01                         	dc.b	$01
00086314 E1F9                       	smpsAlterNote       $F9
00086316 01                         	dc.b	$01
00086317 E1FD                       	smpsAlterNote       $FD
00086319 01                         	dc.b	$01
0008631A E103                       	smpsAlterNote       $03
0008631C 0101                       	dc.b	$01, $01
0008631E E100                       	smpsAlterNote       $00
00086320 01                         	dc.b	$01
00086321 E1FD                       	smpsAlterNote       $FD
00086323 ECF5                       	smpsPSGAlterVol     $F5
00086325 9202                       	dc.b	nF1, $02
00086327 EC04                       	smpsPSGAlterVol     $04
00086329 E701                       	dc.b	smpsNoAttack, $01
0008632B ECFC                       	smpsPSGAlterVol     $FC
0008632D 9106                       	dc.b	nE1, $06
0008632F EC04                       	smpsPSGAlterVol     $04
00086331 E701                       	dc.b	smpsNoAttack, $01
00086333 EC07                       	smpsPSGAlterVol     $07
00086335 8006                       	dc.b	nRst, $06
00086337 E100                       	smpsAlterNote       $00
00086339 01                         	dc.b	$01
0008633A E104                       	smpsAlterNote       $04
0008633C 01                         	dc.b	$01
0008633D E100                       	smpsAlterNote       $00
0008633F 01                         	dc.b	$01
00086340 E1FD                       	smpsAlterNote       $FD
00086342 01                         	dc.b	$01
00086343 E1F9                       	smpsAlterNote       $F9
00086345 01                         	dc.b	$01
00086346 E1FD                       	smpsAlterNote       $FD
00086348 01                         	dc.b	$01
00086349 E103                       	smpsAlterNote       $03
0008634B 01                         	dc.b	$01
0008634C E104                       	smpsAlterNote       $04
0008634E 01                         	dc.b	$01
0008634F E1FD                       	smpsAlterNote       $FD
00086351 ECF5                       	smpsPSGAlterVol     $F5
00086353 9102                       	dc.b	nE1, $02
00086355 EC04                       	smpsPSGAlterVol     $04
00086357 E701                       	dc.b	smpsNoAttack, $01
00086359 ECFC                       	smpsPSGAlterVol     $FC
0008635B 920D                       	dc.b	nF1, $0D
0008635D E100                       	smpsAlterNote       $00
0008635F E701                       	dc.b	smpsNoAttack, $01
00086361 E104                       	smpsAlterNote       $04
00086363 E701                       	dc.b	smpsNoAttack, $01
00086365 E100                       	smpsAlterNote       $00
00086367 E701                       	dc.b	smpsNoAttack, $01
00086369 E1FD                       	smpsAlterNote       $FD
0008636B E701                       	dc.b	smpsNoAttack, $01
0008636D E1F9                       	smpsAlterNote       $F9
0008636F E701                       	dc.b	smpsNoAttack, $01
00086371 E1FD                       	smpsAlterNote       $FD
00086373 E701                       	dc.b	smpsNoAttack, $01
00086375 E103                       	smpsAlterNote       $03
00086377 E701                       	dc.b	smpsNoAttack, $01
00086379 E104                       	smpsAlterNote       $04
0008637B E701                       	dc.b	smpsNoAttack, $01
0008637D E100                       	smpsAlterNote       $00
0008637F E701                       	dc.b	smpsNoAttack, $01
00086381 E1FA                       	smpsAlterNote       $FA
00086383 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086387 E1FD                       	smpsAlterNote       $FD
00086389 E701                       	dc.b	smpsNoAttack, $01
0008638B E103                       	smpsAlterNote       $03
0008638D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086391 E1FD                       	smpsAlterNote       $FD
00086393 E701                       	dc.b	smpsNoAttack, $01
00086395 E1F9                       	smpsAlterNote       $F9
00086397 E701                       	dc.b	smpsNoAttack, $01
00086399 E1FA                       	smpsAlterNote       $FA
0008639B E701                       	dc.b	smpsNoAttack, $01
0008639D E100                       	smpsAlterNote       $00
0008639F EC04                       	smpsPSGAlterVol     $04
000863A1 E701                       	dc.b	smpsNoAttack, $01
000863A3 EC07                       	smpsPSGAlterVol     $07
000863A5 E104                       	smpsAlterNote       $04
000863A7 8001                       	dc.b	nRst, $01
000863A9 E100                       	smpsAlterNote       $00
000863AB 01                         	dc.b	$01
000863AC E1FD                       	smpsAlterNote       $FD
000863AE 01                         	dc.b	$01
000863AF E1F9                       	smpsAlterNote       $F9
000863B1 01                         	dc.b	$01
000863B2 E1FD                       	smpsAlterNote       $FD
000863B4 01                         	dc.b	$01
000863B5 E103                       	smpsAlterNote       $03
000863B7 01                         	dc.b	$01
000863B8 E104                       	smpsAlterNote       $04
000863BA 01                         	dc.b	$01
000863BB E1FD                       	smpsAlterNote       $FD
000863BD ECF5                       	smpsPSGAlterVol     $F5
000863BF 9106                       	dc.b	nE1, $06
000863C1 EC04                       	smpsPSGAlterVol     $04
000863C3 E701                       	dc.b	smpsNoAttack, $01
000863C5 EC07                       	smpsPSGAlterVol     $07
000863C7 8003                       	dc.b	nRst, $03
000863C9 ECF5                       	smpsPSGAlterVol     $F5
000863CB 9106                       	dc.b	nE1, $06
000863CD EC04                       	smpsPSGAlterVol     $04
000863CF E701                       	dc.b	smpsNoAttack, $01
000863D1 EC07                       	smpsPSGAlterVol     $07
000863D3 8006                       	dc.b	nRst, $06
000863D5 E100                       	smpsAlterNote       $00
000863D7 01                         	dc.b	$01
000863D8 E104                       	smpsAlterNote       $04
000863DA 01                         	dc.b	$01
000863DB E100                       	smpsAlterNote       $00
000863DD 01                         	dc.b	$01
000863DE E1FA                       	smpsAlterNote       $FA
000863E0 01                         	dc.b	$01
000863E1 E1FD                       	smpsAlterNote       $FD
000863E3 ECF5                       	smpsPSGAlterVol     $F5
000863E5 9206                       	dc.b	nF1, $06
000863E7 EC04                       	smpsPSGAlterVol     $04
000863E9 E701                       	dc.b	smpsNoAttack, $01
000863EB EC07                       	smpsPSGAlterVol     $07
000863ED 8003                       	dc.b	nRst, $03
000863EF ECF5                       	smpsPSGAlterVol     $F5
000863F1 9207                       	dc.b	nF1, $07
000863F3 EC0B                       	smpsPSGAlterVol     $0B
000863F5 8006                       	dc.b	nRst, $06
000863F7 E100                       	smpsAlterNote       $00
000863F9 01                         	dc.b	$01
000863FA E103                       	smpsAlterNote       $03
000863FC 0101                       	dc.b	$01, $01
000863FE E1FD                       	smpsAlterNote       $FD
00086400 01                         	dc.b	$01
00086401 ECF5                       	smpsPSGAlterVol     $F5
00086403 9107                       	dc.b	nE1, $07
00086405 EC0B                       	smpsPSGAlterVol     $0B
00086407 8004                       	dc.b	nRst, $04
00086409 ECF5                       	smpsPSGAlterVol     $F5
0008640B 9106                       	dc.b	nE1, $06
0008640D EC04                       	smpsPSGAlterVol     $04
0008640F E701                       	dc.b	smpsNoAttack, $01
00086411 EC07                       	smpsPSGAlterVol     $07
00086413 8006                       	dc.b	nRst, $06
00086415 E103                       	smpsAlterNote       $03
00086417 01                         	dc.b	$01
00086418 E104                       	smpsAlterNote       $04
0008641A 01                         	dc.b	$01
0008641B E100                       	smpsAlterNote       $00
0008641D 01                         	dc.b	$01
0008641E E1FA                       	smpsAlterNote       $FA
00086420 01                         	dc.b	$01
00086421 E1FD                       	smpsAlterNote       $FD
00086423 ECF5                       	smpsPSGAlterVol     $F5
00086425 9106                       	dc.b	nE1, $06
00086427 EC04                       	smpsPSGAlterVol     $04
00086429 E701                       	dc.b	smpsNoAttack, $01
0008642B EC07                       	smpsPSGAlterVol     $07
0008642D 8003                       	dc.b	nRst, $03
0008642F ECF5                       	smpsPSGAlterVol     $F5
00086431 9106                       	dc.b	nE1, $06
00086433 EC04                       	smpsPSGAlterVol     $04
00086435 E701                       	dc.b	smpsNoAttack, $01
00086437 EC07                       	smpsPSGAlterVol     $07
00086439 8003                       	dc.b	nRst, $03
0008643B ECF5                       	smpsPSGAlterVol     $F5
0008643D 9207                       	dc.b	nF1, $07
0008643F EC0B                       	smpsPSGAlterVol     $0B
00086441 8006                       	dc.b	nRst, $06
00086443 E100                       	smpsAlterNote       $00
00086445 01                         	dc.b	$01
00086446 E103                       	smpsAlterNote       $03
00086448 0101                       	dc.b	$01, $01
0008644A E1FD                       	smpsAlterNote       $FD
0008644C 01                         	dc.b	$01
0008644D E1F9                       	smpsAlterNote       $F9
0008644F 01                         	dc.b	$01
00086450 E1FA                       	smpsAlterNote       $FA
00086452 01                         	dc.b	$01
00086453 E100                       	smpsAlterNote       $00
00086455 01                         	dc.b	$01
00086456 E104                       	smpsAlterNote       $04
00086458 01                         	dc.b	$01
00086459 E1FD                       	smpsAlterNote       $FD
0008645B ECF5                       	smpsPSGAlterVol     $F5
0008645D 9203 9203                  	dc.b	nF1, $03, nF1, $03
00086461 EC04                       	smpsPSGAlterVol     $04
00086463 E701                       	dc.b	smpsNoAttack, $01
00086465 EC07                       	smpsPSGAlterVol     $07
00086467 8009                       	dc.b	nRst, $09
00086469 E100                       	smpsAlterNote       $00
0008646B 01                         	dc.b	$01
0008646C E103                       	smpsAlterNote       $03
0008646E 0101                       	dc.b	$01, $01
00086470 E1FD                       	smpsAlterNote       $FD
00086472 01                         	dc.b	$01
00086473 E1F9                       	smpsAlterNote       $F9
00086475 01                         	dc.b	$01
00086476 E1FA                       	smpsAlterNote       $FA
00086478 01                         	dc.b	$01
00086479 E100                       	smpsAlterNote       $00
0008647B 01                         	dc.b	$01
0008647C E104                       	smpsAlterNote       $04
0008647E 01                         	dc.b	$01
0008647F E100                       	smpsAlterNote       $00
00086481 01                         	dc.b	$01
00086482 E1FD                       	smpsAlterNote       $FD
00086484 01                         	dc.b	$01
00086485 E1F9                       	smpsAlterNote       $F9
00086487 01                         	dc.b	$01
00086488 E1FD                       	smpsAlterNote       $FD
0008648A 01                         	dc.b	$01
0008648B E103                       	smpsAlterNote       $03
0008648D 01                         	dc.b	$01
0008648E E104                       	smpsAlterNote       $04
00086490 01                         	dc.b	$01
00086491 E100                       	smpsAlterNote       $00
00086493 01                         	dc.b	$01
00086494 E1FD                       	smpsAlterNote       $FD
00086496 ECF5                       	smpsPSGAlterVol     $F5
00086498 9203 9106                  	dc.b	nF1, $03, nE1, $06
0008649C EC04                       	smpsPSGAlterVol     $04
0008649E E701                       	dc.b	smpsNoAttack, $01
000864A0 EC07                       	smpsPSGAlterVol     $07
000864A2 8006                       	dc.b	nRst, $06
000864A4 E100                       	smpsAlterNote       $00
000864A6 01                         	dc.b	$01
000864A7 E104                       	smpsAlterNote       $04
000864A9 01                         	dc.b	$01
000864AA E103                       	smpsAlterNote       $03
000864AC 01                         	dc.b	$01
000864AD E1FD                       	smpsAlterNote       $FD
000864AF 01                         	dc.b	$01
000864B0 E1F9                       	smpsAlterNote       $F9
000864B2 01                         	dc.b	$01
000864B3 E1FD                       	smpsAlterNote       $FD
000864B5 01                         	dc.b	$01
000864B6 E100                       	smpsAlterNote       $00
000864B8 01                         	dc.b	$01
000864B9 E104                       	smpsAlterNote       $04
000864BB 01                         	dc.b	$01
000864BC E1FD                       	smpsAlterNote       $FD
000864BE ECF5                       	smpsPSGAlterVol     $F5
000864C0 9103 920D                  	dc.b	nE1, $03, nF1, $0D
000864C4 E100                       	smpsAlterNote       $00
000864C6 E701                       	dc.b	smpsNoAttack, $01
000864C8 E104                       	smpsAlterNote       $04
000864CA E701                       	dc.b	smpsNoAttack, $01
000864CC E100                       	smpsAlterNote       $00
000864CE E701                       	dc.b	smpsNoAttack, $01
000864D0 E1FD                       	smpsAlterNote       $FD
000864D2 E701                       	dc.b	smpsNoAttack, $01
000864D4 E1F9                       	smpsAlterNote       $F9
000864D6 E701                       	dc.b	smpsNoAttack, $01
000864D8 E1FD                       	smpsAlterNote       $FD
000864DA E701                       	dc.b	smpsNoAttack, $01
000864DC E103                       	smpsAlterNote       $03
000864DE E701                       	dc.b	smpsNoAttack, $01
000864E0 E104                       	smpsAlterNote       $04
000864E2 E701                       	dc.b	smpsNoAttack, $01
000864E4 E100                       	smpsAlterNote       $00
000864E6 E701                       	dc.b	smpsNoAttack, $01
000864E8 E1FA                       	smpsAlterNote       $FA
000864EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000864EE E1FD                       	smpsAlterNote       $FD
000864F0 E701                       	dc.b	smpsNoAttack, $01
000864F2 E103                       	smpsAlterNote       $03
000864F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000864F8 E100                       	smpsAlterNote       $00
000864FA E701                       	dc.b	smpsNoAttack, $01
000864FC E1FA                       	smpsAlterNote       $FA
000864FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086502 E100                       	smpsAlterNote       $00
00086504 EC04                       	smpsPSGAlterVol     $04
00086506 E701                       	dc.b	smpsNoAttack, $01
00086508 EC07                       	smpsPSGAlterVol     $07
0008650A E104                       	smpsAlterNote       $04
0008650C 8001                       	dc.b	nRst, $01
0008650E E103                       	smpsAlterNote       $03
00086510 01                         	dc.b	$01
00086511 E1FD                       	smpsAlterNote       $FD
00086513 01                         	dc.b	$01
00086514 E1F9                       	smpsAlterNote       $F9
00086516 01                         	dc.b	$01
00086517 E1FD                       	smpsAlterNote       $FD
00086519 01                         	dc.b	$01
0008651A E100                       	smpsAlterNote       $00
0008651C 01                         	dc.b	$01
0008651D E104                       	smpsAlterNote       $04
0008651F 01                         	dc.b	$01
00086520 E1FD                       	smpsAlterNote       $FD
00086522 ECF5                       	smpsPSGAlterVol     $F5
00086524 9106                       	dc.b	nE1, $06
00086526 EC04                       	smpsPSGAlterVol     $04
00086528 E701                       	dc.b	smpsNoAttack, $01
0008652A EC07                       	smpsPSGAlterVol     $07
0008652C 8003                       	dc.b	nRst, $03
0008652E ECF5                       	smpsPSGAlterVol     $F5
00086530 9106                       	dc.b	nE1, $06
00086532 EC04                       	smpsPSGAlterVol     $04
00086534 E701                       	dc.b	smpsNoAttack, $01
00086536 EC07                       	smpsPSGAlterVol     $07
00086538 8006                       	dc.b	nRst, $06
0008653A E100                       	smpsAlterNote       $00
0008653C 01                         	dc.b	$01
0008653D E104                       	smpsAlterNote       $04
0008653F 01                         	dc.b	$01
00086540 E100                       	smpsAlterNote       $00
00086542 01                         	dc.b	$01
00086543 E1FD                       	smpsAlterNote       $FD
00086545 01                         	dc.b	$01
00086546 ECF5                       	smpsPSGAlterVol     $F5
00086548 9206                       	dc.b	nF1, $06
0008654A EC04                       	smpsPSGAlterVol     $04
0008654C E701                       	dc.b	smpsNoAttack, $01
0008654E EC07                       	smpsPSGAlterVol     $07
00086550 8003                       	dc.b	nRst, $03
00086552 ECF5                       	smpsPSGAlterVol     $F5
00086554 9207                       	dc.b	nF1, $07
00086556 EC0B                       	smpsPSGAlterVol     $0B
00086558 8007                       	dc.b	nRst, $07
0008655A E103                       	smpsAlterNote       $03
0008655C 0101                       	dc.b	$01, $01
0008655E E1FD                       	smpsAlterNote       $FD
00086560 01                         	dc.b	$01
00086561 E1FA                       	smpsAlterNote       $FA
00086563 01                         	dc.b	$01
00086564 E1FD                       	smpsAlterNote       $FD
00086566 ECF5                       	smpsPSGAlterVol     $F5
00086568 9106                       	dc.b	nE1, $06
0008656A EC0B                       	smpsPSGAlterVol     $0B
0008656C 8004                       	dc.b	nRst, $04
0008656E ECF5                       	smpsPSGAlterVol     $F5
00086570 9106                       	dc.b	nE1, $06
00086572 EC04                       	smpsPSGAlterVol     $04
00086574 E701                       	dc.b	smpsNoAttack, $01
00086576 EC07                       	smpsPSGAlterVol     $07
00086578 8006                       	dc.b	nRst, $06
0008657A E100                       	smpsAlterNote       $00
0008657C 01                         	dc.b	$01
0008657D E104                       	smpsAlterNote       $04
0008657F 01                         	dc.b	$01
00086580 E100                       	smpsAlterNote       $00
00086582 01                         	dc.b	$01
00086583 E1FA                       	smpsAlterNote       $FA
00086585 01                         	dc.b	$01
00086586 E1FD                       	smpsAlterNote       $FD
00086588 ECF5                       	smpsPSGAlterVol     $F5
0008658A 9206                       	dc.b	nF1, $06
0008658C EC04                       	smpsPSGAlterVol     $04
0008658E E701                       	dc.b	smpsNoAttack, $01
00086590 EC07                       	smpsPSGAlterVol     $07
00086592 8003                       	dc.b	nRst, $03
00086594 ECF5                       	smpsPSGAlterVol     $F5
00086596 9206                       	dc.b	nF1, $06
00086598 EC04                       	smpsPSGAlterVol     $04
0008659A E701                       	dc.b	smpsNoAttack, $01
0008659C EC07                       	smpsPSGAlterVol     $07
0008659E 8006                       	dc.b	nRst, $06
000865A0 E100                       	smpsAlterNote       $00
000865A2 01                         	dc.b	$01
000865A3 E104                       	smpsAlterNote       $04
000865A5 01                         	dc.b	$01
000865A6 E103                       	smpsAlterNote       $03
000865A8 01                         	dc.b	$01
000865A9 E1FD                       	smpsAlterNote       $FD
000865AB 01                         	dc.b	$01
000865AC ECF5                       	smpsPSGAlterVol     $F5
000865AE 9107                       	dc.b	nE1, $07
000865B0 EC0B                       	smpsPSGAlterVol     $0B
000865B2 8004                       	dc.b	nRst, $04
000865B4 ECF5                       	smpsPSGAlterVol     $F5
000865B6 9106                       	dc.b	nE1, $06
000865B8 EC0B                       	smpsPSGAlterVol     $0B
000865BA 8007                       	dc.b	nRst, $07
000865BC E103                       	smpsAlterNote       $03
000865BE 0101                       	dc.b	$01, $01
000865C0 E100                       	smpsAlterNote       $00
000865C2 01                         	dc.b	$01
000865C3 E1FA                       	smpsAlterNote       $FA
000865C5 01                         	dc.b	$01
000865C6 E1FD                       	smpsAlterNote       $FD
000865C8 ECF5                       	smpsPSGAlterVol     $F5
000865CA 9206                       	dc.b	nF1, $06
000865CC EC04                       	smpsPSGAlterVol     $04
000865CE E701                       	dc.b	smpsNoAttack, $01
000865D0 EC07                       	smpsPSGAlterVol     $07
000865D2 8003                       	dc.b	nRst, $03
000865D4 ECF5                       	smpsPSGAlterVol     $F5
000865D6 9206                       	dc.b	nF1, $06
000865D8 EC04                       	smpsPSGAlterVol     $04
000865DA E701                       	dc.b	smpsNoAttack, $01
000865DC EC07                       	smpsPSGAlterVol     $07
000865DE 8006                       	dc.b	nRst, $06
000865E0 E100                       	smpsAlterNote       $00
000865E2 01                         	dc.b	$01
000865E3 E104                       	smpsAlterNote       $04
000865E5 01                         	dc.b	$01
000865E6 E100                       	smpsAlterNote       $00
000865E8 01                         	dc.b	$01
000865E9 E1FD                       	smpsAlterNote       $FD
000865EB 01                         	dc.b	$01
000865EC ECF5                       	smpsPSGAlterVol     $F5
000865EE 9106                       	dc.b	nE1, $06
000865F0 EC04                       	smpsPSGAlterVol     $04
000865F2 E701                       	dc.b	smpsNoAttack, $01
000865F4 EC07                       	smpsPSGAlterVol     $07
000865F6 8003                       	dc.b	nRst, $03
000865F8 ECF5                       	smpsPSGAlterVol     $F5
000865FA 9107 9106                  	dc.b	nE1, $07, nE1, $06
000865FE EC04                       	smpsPSGAlterVol     $04
00086600 E701                       	dc.b	smpsNoAttack, $01
00086602 ECFC                       	smpsPSGAlterVol     $FC
00086604 9103                       	dc.b	nE1, $03
00086606 EC04                       	smpsPSGAlterVol     $04
00086608 E701                       	dc.b	smpsNoAttack, $01
0008660A ECFC                       	smpsPSGAlterVol     $FC
0008660C 9102                       	dc.b	nE1, $02
0008660E EC04                       	smpsPSGAlterVol     $04
00086610 E701                       	dc.b	smpsNoAttack, $01
00086612 ECFC                       	smpsPSGAlterVol     $FC
00086614 9103                       	dc.b	nE1, $03
00086616 EC0B                       	smpsPSGAlterVol     $0B
00086618 800A                       	dc.b	nRst, $0A
0008661A E100                       	smpsAlterNote       $00
0008661C 01                         	dc.b	$01
0008661D E104                       	smpsAlterNote       $04
0008661F 01                         	dc.b	$01
00086620 E100                       	smpsAlterNote       $00
00086622 01                         	dc.b	$01
00086623 E1FA                       	smpsAlterNote       $FA
00086625 01                         	dc.b	$01
00086626 E1F9                       	smpsAlterNote       $F9
00086628 01                         	dc.b	$01
00086629 E1FD                       	smpsAlterNote       $FD
0008662B 01                         	dc.b	$01
0008662C E103                       	smpsAlterNote       $03
0008662E 0101                       	dc.b	$01, $01
00086630 E100                       	smpsAlterNote       $00
00086632 01                         	dc.b	$01
00086633 E1FA                       	smpsAlterNote       $FA
00086635 0101                       	dc.b	$01, $01
00086637 E1FD                       	smpsAlterNote       $FD
00086639 ECF5                       	smpsPSGAlterVol     $F5
0008663B 9206                       	dc.b	nF1, $06
0008663D EC04                       	smpsPSGAlterVol     $04
0008663F E704                       	dc.b	smpsNoAttack, $04
00086641 ECFC                       	smpsPSGAlterVol     $FC
00086643 9206                       	dc.b	nF1, $06
00086645 EC04                       	smpsPSGAlterVol     $04
00086647 E701                       	dc.b	smpsNoAttack, $01
00086649 EC07                       	smpsPSGAlterVol     $07
0008664B 8006                       	dc.b	nRst, $06
0008664D E100                       	smpsAlterNote       $00
0008664F 01                         	dc.b	$01
00086650 E104                       	smpsAlterNote       $04
00086652 01                         	dc.b	$01
00086653 E103                       	smpsAlterNote       $03
00086655 01                         	dc.b	$01
00086656 E1FD                       	smpsAlterNote       $FD
00086658 01                         	dc.b	$01
00086659 ECF5                       	smpsPSGAlterVol     $F5
0008665B 9407                       	dc.b	nG1, $07
0008665D EC0B                       	smpsPSGAlterVol     $0B
0008665F 8004                       	dc.b	nRst, $04
00086661 ECF5                       	smpsPSGAlterVol     $F5
00086663 9406                       	dc.b	nG1, $06
00086665 EC0B                       	smpsPSGAlterVol     $0B
00086667 8007                       	dc.b	nRst, $07
00086669 E103                       	smpsAlterNote       $03
0008666B 0101                       	dc.b	$01, $01
0008666D E1FD                       	smpsAlterNote       $FD
0008666F 01                         	dc.b	$01
00086670 E1F9                       	smpsAlterNote       $F9
00086672 01                         	dc.b	$01
00086673 E1FD                       	smpsAlterNote       $FD
00086675 ECF5                       	smpsPSGAlterVol     $F5
00086677 9206                       	dc.b	nF1, $06
00086679 EC04                       	smpsPSGAlterVol     $04
0008667B E701                       	dc.b	smpsNoAttack, $01
0008667D EC07                       	smpsPSGAlterVol     $07
0008667F 8003                       	dc.b	nRst, $03
00086681 ECF5                       	smpsPSGAlterVol     $F5
00086683 9206                       	dc.b	nF1, $06
00086685 EC04                       	smpsPSGAlterVol     $04
00086687 E701                       	dc.b	smpsNoAttack, $01
00086689 EC07                       	smpsPSGAlterVol     $07
0008668B 8006                       	dc.b	nRst, $06
0008668D E100                       	smpsAlterNote       $00
0008668F 01                         	dc.b	$01
00086690 E104                       	smpsAlterNote       $04
00086692 01                         	dc.b	$01
00086693 E100                       	smpsAlterNote       $00
00086695 01                         	dc.b	$01
00086696 E1FA                       	smpsAlterNote       $FA
00086698 01                         	dc.b	$01
00086699 E1FD                       	smpsAlterNote       $FD
0008669B ECF5                       	smpsPSGAlterVol     $F5
0008669D 9206                       	dc.b	nF1, $06
0008669F EC04                       	smpsPSGAlterVol     $04
000866A1 E701                       	dc.b	smpsNoAttack, $01
000866A3 EC07                       	smpsPSGAlterVol     $07
000866A5 8003                       	dc.b	nRst, $03
000866A7 ECF5                       	smpsPSGAlterVol     $F5
000866A9 9107                       	dc.b	nE1, $07
000866AB EC0B                       	smpsPSGAlterVol     $0B
000866AD 8006                       	dc.b	nRst, $06
000866AF E100                       	smpsAlterNote       $00
000866B1 01                         	dc.b	$01
000866B2 E103                       	smpsAlterNote       $03
000866B4 0101                       	dc.b	$01, $01
000866B6 E1FD                       	smpsAlterNote       $FD
000866B8 01                         	dc.b	$01
000866B9 ECF5                       	smpsPSGAlterVol     $F5
000866BB 9207                       	dc.b	nF1, $07
000866BD EC0B                       	smpsPSGAlterVol     $0B
000866BF 8004                       	dc.b	nRst, $04
000866C1 ECF5                       	smpsPSGAlterVol     $F5
000866C3 9206                       	dc.b	nF1, $06
000866C5 EC04                       	smpsPSGAlterVol     $04
000866C7 E701                       	dc.b	smpsNoAttack, $01
000866C9 EC07                       	smpsPSGAlterVol     $07
000866CB 8006                       	dc.b	nRst, $06
000866CD E103                       	smpsAlterNote       $03
000866CF 01                         	dc.b	$01
000866D0 E104                       	smpsAlterNote       $04
000866D2 01                         	dc.b	$01
000866D3 E100                       	smpsAlterNote       $00
000866D5 01                         	dc.b	$01
000866D6 E1FB                       	smpsAlterNote       $FB
000866D8 01                         	dc.b	$01
000866D9 E1FD                       	smpsAlterNote       $FD
000866DB ECF5                       	smpsPSGAlterVol     $F5
000866DD 9406                       	dc.b	nG1, $06
000866DF EC04                       	smpsPSGAlterVol     $04
000866E1 E701                       	dc.b	smpsNoAttack, $01
000866E3 EC07                       	smpsPSGAlterVol     $07
000866E5 8003                       	dc.b	nRst, $03
000866E7 ECF5                       	smpsPSGAlterVol     $F5
000866E9 9406                       	dc.b	nG1, $06
000866EB EC04                       	smpsPSGAlterVol     $04
000866ED E701                       	dc.b	smpsNoAttack, $01
000866EF EC07                       	smpsPSGAlterVol     $07
000866F1 8006                       	dc.b	nRst, $06
000866F3 E100                       	smpsAlterNote       $00
000866F5 01                         	dc.b	$01
000866F6 E104                       	smpsAlterNote       $04
000866F8 01                         	dc.b	$01
000866F9 E100                       	smpsAlterNote       $00
000866FB 01                         	dc.b	$01
000866FC E1FD                       	smpsAlterNote       $FD
000866FE 01                         	dc.b	$01
000866FF ECF5                       	smpsPSGAlterVol     $F5
00086701 9206                       	dc.b	nF1, $06
00086703 EC04                       	smpsPSGAlterVol     $04
00086705 E701                       	dc.b	smpsNoAttack, $01
00086707 EC07                       	smpsPSGAlterVol     $07
00086709 8003                       	dc.b	nRst, $03
0008670B ECF5                       	smpsPSGAlterVol     $F5
0008670D 9207                       	dc.b	nF1, $07
0008670F EC0B                       	smpsPSGAlterVol     $0B
00086711 8007                       	dc.b	nRst, $07
00086713 E103                       	smpsAlterNote       $03
00086715 0101                       	dc.b	$01, $01
00086717 E1FD                       	smpsAlterNote       $FD
00086719 01                         	dc.b	$01
0008671A E1FA                       	smpsAlterNote       $FA
0008671C 01                         	dc.b	$01
0008671D E1FD                       	smpsAlterNote       $FD
0008671F ECF5                       	smpsPSGAlterVol     $F5
00086721 9206                       	dc.b	nF1, $06
00086723 EC0B                       	smpsPSGAlterVol     $0B
00086725 8004                       	dc.b	nRst, $04
00086727 ECF5                       	smpsPSGAlterVol     $F5
00086729 9206                       	dc.b	nF1, $06
0008672B EC04                       	smpsPSGAlterVol     $04
0008672D E701                       	dc.b	smpsNoAttack, $01
0008672F EC07                       	smpsPSGAlterVol     $07
00086731 8006                       	dc.b	nRst, $06
00086733 E100                       	smpsAlterNote       $00
00086735 01                         	dc.b	$01
00086736 E104                       	smpsAlterNote       $04
00086738 01                         	dc.b	$01
00086739 E100                       	smpsAlterNote       $00
0008673B 01                         	dc.b	$01
0008673C E1FA                       	smpsAlterNote       $FA
0008673E 01                         	dc.b	$01
0008673F E1FD                       	smpsAlterNote       $FD
00086741 ECF5                       	smpsPSGAlterVol     $F5
00086743 9206                       	dc.b	nF1, $06
00086745 EC04                       	smpsPSGAlterVol     $04
00086747 E701                       	dc.b	smpsNoAttack, $01
00086749 EC07                       	smpsPSGAlterVol     $07
0008674B 8003                       	dc.b	nRst, $03
0008674D ECF5                       	smpsPSGAlterVol     $F5
0008674F 9207                       	dc.b	nF1, $07
00086751 EC0B                       	smpsPSGAlterVol     $0B
00086753 8006                       	dc.b	nRst, $06
00086755 E100                       	smpsAlterNote       $00
00086757 01                         	dc.b	$01
00086758 E103                       	smpsAlterNote       $03
0008675A 0101                       	dc.b	$01, $01
0008675C E1FD                       	smpsAlterNote       $FD
0008675E 01                         	dc.b	$01
0008675F ECF5                       	smpsPSGAlterVol     $F5
00086761 9207                       	dc.b	nF1, $07
00086763 EC0B                       	smpsPSGAlterVol     $0B
00086765 8004                       	dc.b	nRst, $04
00086767 ECF5                       	smpsPSGAlterVol     $F5
00086769 9206                       	dc.b	nF1, $06
0008676B EC0B                       	smpsPSGAlterVol     $0B
0008676D 8007                       	dc.b	nRst, $07
0008676F E103                       	smpsAlterNote       $03
00086771 0101                       	dc.b	$01, $01
00086773 E100                       	smpsAlterNote       $00
00086775 01                         	dc.b	$01
00086776 E1FA                       	smpsAlterNote       $FA
00086778 01                         	dc.b	$01
00086779 E1FD                       	smpsAlterNote       $FD
0008677B ECF5                       	smpsPSGAlterVol     $F5
0008677D 9206                       	dc.b	nF1, $06
0008677F EC04                       	smpsPSGAlterVol     $04
00086781 E701                       	dc.b	smpsNoAttack, $01
00086783 EC07                       	smpsPSGAlterVol     $07
00086785 8003                       	dc.b	nRst, $03
00086787 ECF5                       	smpsPSGAlterVol     $F5
00086789 9206                       	dc.b	nF1, $06
0008678B EC04                       	smpsPSGAlterVol     $04
0008678D E701                       	dc.b	smpsNoAttack, $01
0008678F EC07                       	smpsPSGAlterVol     $07
00086791 8006                       	dc.b	nRst, $06
00086793 E100                       	smpsAlterNote       $00
00086795 01                         	dc.b	$01
00086796 E104                       	smpsAlterNote       $04
00086798 01                         	dc.b	$01
00086799 E100                       	smpsAlterNote       $00
0008679B 01                         	dc.b	$01
0008679C E1FD                       	smpsAlterNote       $FD
0008679E 01                         	dc.b	$01
0008679F ECF5                       	smpsPSGAlterVol     $F5
000867A1 9206                       	dc.b	nF1, $06
000867A3 EC04                       	smpsPSGAlterVol     $04
000867A5 E701                       	dc.b	smpsNoAttack, $01
000867A7 EC07                       	smpsPSGAlterVol     $07
000867A9 8003                       	dc.b	nRst, $03
000867AB ECF5                       	smpsPSGAlterVol     $F5
000867AD 9207                       	dc.b	nF1, $07
000867AF EC0B                       	smpsPSGAlterVol     $0B
000867B1 8007                       	dc.b	nRst, $07
000867B3 E104                       	smpsAlterNote       $04
000867B5 0101                       	dc.b	$01, $01
000867B7 E1FB                       	smpsAlterNote       $FB
000867B9 01                         	dc.b	$01
000867BA E1F6                       	smpsAlterNote       $F6
000867BC 0101                       	dc.b	$01, $01
000867BE E1FF                       	smpsAlterNote       $FF
000867C0 01                         	dc.b	$01
000867C1 E105                       	smpsAlterNote       $05
000867C3 01                         	dc.b	$01
000867C4 E104                       	smpsAlterNote       $04
000867C6 01                         	dc.b	$01
000867C7 E1FB                       	smpsAlterNote       $FB
000867C9 01                         	dc.b	$01
000867CA E1F5                       	smpsAlterNote       $F5
000867CC 01                         	dc.b	$01
000867CD E1FC                       	smpsAlterNote       $FC
000867CF ECF5                       	smpsPSGAlterVol     $F5
000867D1 8B0E                       	dc.b	nBb0, $0E
000867D3 E102                       	smpsAlterNote       $02
000867D5 EC0B                       	smpsPSGAlterVol     $0B
000867D7 8001                       	dc.b	nRst, $01
000867D9 E101                       	smpsAlterNote       $01
000867DB 01                         	dc.b	$01
000867DC E1FC                       	smpsAlterNote       $FC
000867DE 01                         	dc.b	$01
000867DF E1F9                       	smpsAlterNote       $F9
000867E1 0101                       	dc.b	$01, $01
000867E3 E1FF                       	smpsAlterNote       $FF
000867E5 01                         	dc.b	$01
000867E6 E102                       	smpsAlterNote       $02
000867E8 01                         	dc.b	$01
000867E9 E1FF                       	smpsAlterNote       $FF
000867EB 01                         	dc.b	$01
000867EC E1FC                       	smpsAlterNote       $FC
000867EE 01                         	dc.b	$01
000867EF E1F8                       	smpsAlterNote       $F8
000867F1 01                         	dc.b	$01
000867F2 E1FC                       	smpsAlterNote       $FC
000867F4 01                         	dc.b	$01
000867F5 E101                       	smpsAlterNote       $01
000867F7 01                         	dc.b	$01
000867F8 E102                       	smpsAlterNote       $02
000867FA 01                         	dc.b	$01
000867FB E1FF                       	smpsAlterNote       $FF
000867FD 01                         	dc.b	$01
000867FE E1FB                       	smpsAlterNote       $FB
00086800 ECF5                       	smpsPSGAlterVol     $F5
00086802 8D0D                       	dc.b	nC1, $0D
00086804 E101                       	smpsAlterNote       $01
00086806 EC0B                       	smpsPSGAlterVol     $0B
00086808 8001                       	dc.b	nRst, $01
0008680A E102                       	smpsAlterNote       $02
0008680C 01                         	dc.b	$01
0008680D E1FF                       	smpsAlterNote       $FF
0008680F 01                         	dc.b	$01
00086810 E1F9                       	smpsAlterNote       $F9
00086812 0101                       	dc.b	$01, $01
00086814 E1FC                       	smpsAlterNote       $FC
00086816 01                         	dc.b	$01
00086817 E101                       	smpsAlterNote       $01
00086819 0101                       	dc.b	$01, $01
0008681B E1FC                       	smpsAlterNote       $FC
0008681D 01                         	dc.b	$01
0008681E E1F9                       	smpsAlterNote       $F9
00086820 0101                       	dc.b	$01, $01
00086822 E1FF                       	smpsAlterNote       $FF
00086824 01                         	dc.b	$01
00086825 E102                       	smpsAlterNote       $02
00086827 01                         	dc.b	$01
00086828 E101                       	smpsAlterNote       $01
0008682A 01                         	dc.b	$01
0008682B E1FC                       	smpsAlterNote       $FC
0008682D ECF5                       	smpsPSGAlterVol     $F5
0008682F 8F0D                       	dc.b	nD1, $0D
00086831 E1FF                       	smpsAlterNote       $FF
00086833 EC04                       	smpsPSGAlterVol     $04
00086835 E701                       	dc.b	smpsNoAttack, $01
00086837 EC07                       	smpsPSGAlterVol     $07
00086839 E103                       	smpsAlterNote       $03
0008683B 8001                       	dc.b	nRst, $01
0008683D E102                       	smpsAlterNote       $02
0008683F 01                         	dc.b	$01
00086840 E1FD                       	smpsAlterNote       $FD
00086842 01                         	dc.b	$01
00086843 E1F9                       	smpsAlterNote       $F9
00086845 01                         	dc.b	$01
00086846 E1FD                       	smpsAlterNote       $FD
00086848 01                         	dc.b	$01
00086849 E100                       	smpsAlterNote       $00
0008684B 01                         	dc.b	$01
0008684C E103                       	smpsAlterNote       $03
0008684E 01                         	dc.b	$01
0008684F E100                       	smpsAlterNote       $00
00086851 01                         	dc.b	$01
00086852 E1FA                       	smpsAlterNote       $FA
00086854 01                         	dc.b	$01
00086855 E1F9                       	smpsAlterNote       $F9
00086857 01                         	dc.b	$01
00086858 E1FD                       	smpsAlterNote       $FD
0008685A 01                         	dc.b	$01
0008685B E102                       	smpsAlterNote       $02
0008685D 0101                       	dc.b	$01, $01
0008685F E100                       	smpsAlterNote       $00
00086861 01                         	dc.b	$01
00086862 E1FD                       	smpsAlterNote       $FD
00086864 ECF5                       	smpsPSGAlterVol     $F5
00086866 910D                       	dc.b	nE1, $0D
00086868 E103                       	smpsAlterNote       $03
0008686A EC0B                       	smpsPSGAlterVol     $0B
0008686C 8001 01                    	dc.b	nRst, $01, $01
0008686F E100                       	smpsAlterNote       $00
00086871 01                         	dc.b	$01
00086872 E1FA                       	smpsAlterNote       $FA
00086874 0101                       	dc.b	$01, $01
00086876 E100                       	smpsAlterNote       $00
00086878 01                         	dc.b	$01
00086879 E103                       	smpsAlterNote       $03
0008687B 01                         	dc.b	$01
0008687C E1FD                       	smpsAlterNote       $FD
0008687E ECF5                       	smpsPSGAlterVol     $F5
00086880 9206                       	dc.b	nF1, $06
00086882 EC04                       	smpsPSGAlterVol     $04
00086884 E701                       	dc.b	smpsNoAttack, $01
00086886 EC07                       	smpsPSGAlterVol     $07
00086888 8003                       	dc.b	nRst, $03
0008688A ECF5                       	smpsPSGAlterVol     $F5
0008688C 9207                       	dc.b	nF1, $07
0008688E EC0B                       	smpsPSGAlterVol     $0B
00086890 8006                       	dc.b	nRst, $06
00086892 E100                       	smpsAlterNote       $00
00086894 01                         	dc.b	$01
00086895 E103                       	smpsAlterNote       $03
00086897 0101                       	dc.b	$01, $01
00086899 E1FD                       	smpsAlterNote       $FD
0008689B 01                         	dc.b	$01
0008689C ECF5                       	smpsPSGAlterVol     $F5
0008689E 9407                       	dc.b	nG1, $07
000868A0 EC0B                       	smpsPSGAlterVol     $0B
000868A2 8004                       	dc.b	nRst, $04
000868A4 ECF5                       	smpsPSGAlterVol     $F5
000868A6 9406                       	dc.b	nG1, $06
000868A8 EC04                       	smpsPSGAlterVol     $04
000868AA E701                       	dc.b	smpsNoAttack, $01
000868AC EC07                       	smpsPSGAlterVol     $07
000868AE 8006                       	dc.b	nRst, $06
000868B0 E103                       	smpsAlterNote       $03
000868B2 01                         	dc.b	$01
000868B3 E104                       	smpsAlterNote       $04
000868B5 01                         	dc.b	$01
000868B6 E100                       	smpsAlterNote       $00
000868B8 01                         	dc.b	$01
000868B9 E1F9                       	smpsAlterNote       $F9
000868BB 01                         	dc.b	$01
000868BC E1FD                       	smpsAlterNote       $FD
000868BE ECF5                       	smpsPSGAlterVol     $F5
000868C0 9206                       	dc.b	nF1, $06
000868C2 EC04                       	smpsPSGAlterVol     $04
000868C4 E701                       	dc.b	smpsNoAttack, $01
000868C6 EC07                       	smpsPSGAlterVol     $07
000868C8 8003                       	dc.b	nRst, $03
000868CA ECF5                       	smpsPSGAlterVol     $F5
000868CC 9206                       	dc.b	nF1, $06
000868CE EC04                       	smpsPSGAlterVol     $04
000868D0 E701                       	dc.b	smpsNoAttack, $01
000868D2 EC07                       	smpsPSGAlterVol     $07
000868D4 8006                       	dc.b	nRst, $06
000868D6 E100                       	smpsAlterNote       $00
000868D8 01                         	dc.b	$01
000868D9 E104                       	smpsAlterNote       $04
000868DB 01                         	dc.b	$01
000868DC E103                       	smpsAlterNote       $03
000868DE 01                         	dc.b	$01
000868DF E1FD                       	smpsAlterNote       $FD
000868E1 01                         	dc.b	$01
000868E2 ECF5                       	smpsPSGAlterVol     $F5
000868E4 9407                       	dc.b	nG1, $07
000868E6 EC0B                       	smpsPSGAlterVol     $0B
000868E8 8004                       	dc.b	nRst, $04
000868EA ECF5                       	smpsPSGAlterVol     $F5
000868EC 9406                       	dc.b	nG1, $06
000868EE EC0B                       	smpsPSGAlterVol     $0B
000868F0 8007                       	dc.b	nRst, $07
000868F2 E103                       	smpsAlterNote       $03
000868F4 0101                       	dc.b	$01, $01
000868F6 E100                       	smpsAlterNote       $00
000868F8 01                         	dc.b	$01
000868F9 E1F9                       	smpsAlterNote       $F9
000868FB 01                         	dc.b	$01
000868FC E1FD                       	smpsAlterNote       $FD
000868FE ECF5                       	smpsPSGAlterVol     $F5
00086900 9206                       	dc.b	nF1, $06
00086902 EC04                       	smpsPSGAlterVol     $04
00086904 E701                       	dc.b	smpsNoAttack, $01
00086906 EC07                       	smpsPSGAlterVol     $07
00086908 8003                       	dc.b	nRst, $03
0008690A ECF5                       	smpsPSGAlterVol     $F5
0008690C 9206                       	dc.b	nF1, $06
0008690E EC04                       	smpsPSGAlterVol     $04
00086910 E701                       	dc.b	smpsNoAttack, $01
00086912 EC07                       	smpsPSGAlterVol     $07
00086914 8006                       	dc.b	nRst, $06
00086916 E100                       	smpsAlterNote       $00
00086918 01                         	dc.b	$01
00086919 E104                       	smpsAlterNote       $04
0008691B 01                         	dc.b	$01
0008691C E100                       	smpsAlterNote       $00
0008691E 01                         	dc.b	$01
0008691F E1FB                       	smpsAlterNote       $FB
00086921 01                         	dc.b	$01
00086922 E1FD                       	smpsAlterNote       $FD
00086924 ECF5                       	smpsPSGAlterVol     $F5
00086926 9406                       	dc.b	nG1, $06
00086928 EC04                       	smpsPSGAlterVol     $04
0008692A E701                       	dc.b	smpsNoAttack, $01
0008692C EC07                       	smpsPSGAlterVol     $07
0008692E 8003                       	dc.b	nRst, $03
00086930 ECF5                       	smpsPSGAlterVol     $F5
00086932 9407                       	dc.b	nG1, $07
00086934 EC0B                       	smpsPSGAlterVol     $0B
00086936 8006                       	dc.b	nRst, $06
00086938 E100                       	smpsAlterNote       $00
0008693A 01                         	dc.b	$01
0008693B E103                       	smpsAlterNote       $03
0008693D 0101                       	dc.b	$01, $01
0008693F E1FD                       	smpsAlterNote       $FD
00086941 01                         	dc.b	$01
00086942 ECF5                       	smpsPSGAlterVol     $F5
00086944 9207                       	dc.b	nF1, $07
00086946 EC0B                       	smpsPSGAlterVol     $0B
00086948 8004                       	dc.b	nRst, $04
0008694A ECF5                       	smpsPSGAlterVol     $F5
0008694C 9206                       	dc.b	nF1, $06
0008694E EC04                       	smpsPSGAlterVol     $04
00086950 E701                       	dc.b	smpsNoAttack, $01
00086952 ECFC                       	smpsPSGAlterVol     $FC
00086954 E1FC                       	smpsAlterNote       $FC
00086956 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0008695A EC04                       	smpsPSGAlterVol     $04
0008695C E701                       	dc.b	smpsNoAttack, $01
0008695E ECFC                       	smpsPSGAlterVol     $FC
00086960 9003                       	dc.b	nEb1, $03
00086962 E1FD                       	smpsAlterNote       $FD
00086964 9403                       	dc.b	nG1, $03
00086966 EC04                       	smpsPSGAlterVol     $04
00086968 E701                       	dc.b	smpsNoAttack, $01
0008696A E1FE                       	smpsAlterNote       $FE
0008696C ECFC                       	smpsPSGAlterVol     $FC
0008696E 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00086972 EC04                       	smpsPSGAlterVol     $04
00086974 E701                       	dc.b	smpsNoAttack, $01
00086976 EC07                       	smpsPSGAlterVol     $07
00086978 8009                       	dc.b	nRst, $09
0008697A E100                       	smpsAlterNote       $00
0008697C 01                         	dc.b	$01
0008697D F6F5 19                    	smpsJump            music84_Jump07
00086980                            
00086980                            ; PSG2 Data
00086980                            music84_PSG2:
00086980 E1FC                       	smpsAlterNote       $FC
00086982 EC04                       	smpsPSGAlterVol     $04
00086984 8F03                       	dc.b	nD1, $03
00086986 E1FD                       	smpsAlterNote       $FD
00086988 9203                       	dc.b	nF1, $03
0008698A EC04                       	smpsPSGAlterVol     $04
0008698C E701                       	dc.b	smpsNoAttack, $01
0008698E E1FE                       	smpsAlterNote       $FE
00086990 ECFC                       	smpsPSGAlterVol     $FC
00086992 9603                       	dc.b	nA1, $03
00086994 E1FD                       	smpsAlterNote       $FD
00086996 9103                       	dc.b	nE1, $03
00086998 EC04                       	smpsPSGAlterVol     $04
0008699A E701                       	dc.b	smpsNoAttack, $01
0008699C ECFC                       	smpsPSGAlterVol     $FC
0008699E 9403                       	dc.b	nG1, $03
000869A0 E1FE                       	smpsAlterNote       $FE
000869A2 9703                       	dc.b	nBb1, $03
000869A4 EC04                       	smpsPSGAlterVol     $04
000869A6 E701                       	dc.b	smpsNoAttack, $01
000869A8 E1FF                       	smpsAlterNote       $FF
000869AA ECFC                       	smpsPSGAlterVol     $FC
000869AC 9B02                       	dc.b	nD2, $02
000869AE EC04                       	smpsPSGAlterVol     $04
000869B0 E701                       	dc.b	smpsNoAttack, $01
000869B2 ECFC                       	smpsPSGAlterVol     $FC
000869B4 E1FE                       	smpsAlterNote       $FE
000869B6 9A03                       	dc.b	nCs2, $03
000869B8 EC0B                       	smpsPSGAlterVol     $0B
000869BA 800A                       	dc.b	nRst, $0A
000869BC E102                       	smpsAlterNote       $02
000869BE 01                         	dc.b	$01
000869BF E10A                       	smpsAlterNote       $0A
000869C1 01                         	dc.b	$01
000869C2 E102                       	smpsAlterNote       $02
000869C4 01                         	dc.b	$01
000869C5 E1FC                       	smpsAlterNote       $FC
000869C7 01                         	dc.b	$01
000869C8 E10A                       	smpsAlterNote       $0A
000869CA 01                         	dc.b	$01
000869CB E1FC                       	smpsAlterNote       $FC
000869CD 01                         	dc.b	$01
000869CE E108                       	smpsAlterNote       $08
000869D0 01                         	dc.b	$01
000869D1 E10A                       	smpsAlterNote       $0A
000869D3 01                         	dc.b	$01
000869D4 E102                       	smpsAlterNote       $02
000869D6 01                         	dc.b	$01
000869D7 E1F7                       	smpsAlterNote       $F7
000869D9 0101                       	dc.b	$01, $01
000869DB E102                       	smpsAlterNote       $02
000869DD 01                         	dc.b	$01
000869DE E108                       	smpsAlterNote       $08
000869E0 0101                       	dc.b	$01, $01
000869E2 E1FC                       	smpsAlterNote       $FC
000869E4 01                         	dc.b	$01
000869E5 E10A                       	smpsAlterNote       $0A
000869E7 01                         	dc.b	$01
000869E8 E1F7                       	smpsAlterNote       $F7
000869EA 01                         	dc.b	$01
000869EB E102                       	smpsAlterNote       $02
000869ED 01                         	dc.b	$01
000869EE E10A                       	smpsAlterNote       $0A
000869F0 01                         	dc.b	$01
000869F1 E102                       	smpsAlterNote       $02
000869F3 01                         	dc.b	$01
000869F4 E1FC                       	smpsAlterNote       $FC
000869F6 01                         	dc.b	$01
000869F7                            
000869F7                            music84_Jump06:
000869F7 E10A                       	smpsAlterNote       $0A
000869F9 8001                       	dc.b	nRst, $01
000869FB E1FC                       	smpsAlterNote       $FC
000869FD 01                         	dc.b	$01
000869FE E108                       	smpsAlterNote       $08
00086A00 01                         	dc.b	$01
00086A01 E10A                       	smpsAlterNote       $0A
00086A03 01                         	dc.b	$01
00086A04 E1FC                       	smpsAlterNote       $FC
00086A06 ECF5                       	smpsPSGAlterVol     $F5
00086A08 8F06                       	dc.b	nD1, $06
00086A0A EC04                       	smpsPSGAlterVol     $04
00086A0C E701                       	dc.b	smpsNoAttack, $01
00086A0E EC07                       	smpsPSGAlterVol     $07
00086A10 8003                       	dc.b	nRst, $03
00086A12 ECF5                       	smpsPSGAlterVol     $F5
00086A14 8F06                       	dc.b	nD1, $06
00086A16 EC04                       	smpsPSGAlterVol     $04
00086A18 E701                       	dc.b	smpsNoAttack, $01
00086A1A EC07                       	smpsPSGAlterVol     $07
00086A1C 8006                       	dc.b	nRst, $06
00086A1E E1FF                       	smpsAlterNote       $FF
00086A20 01                         	dc.b	$01
00086A21 E102                       	smpsAlterNote       $02
00086A23 01                         	dc.b	$01
00086A24 E1FF                       	smpsAlterNote       $FF
00086A26 01                         	dc.b	$01
00086A27 E1F9                       	smpsAlterNote       $F9
00086A29 01                         	dc.b	$01
00086A2A E1FC                       	smpsAlterNote       $FC
00086A2C ECF5                       	smpsPSGAlterVol     $F5
00086A2E 9006                       	dc.b	nEb1, $06
00086A30 EC04                       	smpsPSGAlterVol     $04
00086A32 E701                       	dc.b	smpsNoAttack, $01
00086A34 EC07                       	smpsPSGAlterVol     $07
00086A36 8003                       	dc.b	nRst, $03
00086A38 ECF5                       	smpsPSGAlterVol     $F5
00086A3A 9007                       	dc.b	nEb1, $07
00086A3C EC0B                       	smpsPSGAlterVol     $0B
00086A3E 8006                       	dc.b	nRst, $06
00086A40 E1FF                       	smpsAlterNote       $FF
00086A42 01                         	dc.b	$01
00086A43 E103                       	smpsAlterNote       $03
00086A45 0101                       	dc.b	$01, $01
00086A47 E1FC                       	smpsAlterNote       $FC
00086A49 01                         	dc.b	$01
00086A4A ECF5                       	smpsPSGAlterVol     $F5
00086A4C 8F07                       	dc.b	nD1, $07
00086A4E EC0B                       	smpsPSGAlterVol     $0B
00086A50 8004                       	dc.b	nRst, $04
00086A52 ECF5                       	smpsPSGAlterVol     $F5
00086A54 8F06                       	dc.b	nD1, $06
00086A56 EC04                       	smpsPSGAlterVol     $04
00086A58 E701                       	dc.b	smpsNoAttack, $01
00086A5A EC07                       	smpsPSGAlterVol     $07
00086A5C 8006                       	dc.b	nRst, $06
00086A5E E102                       	smpsAlterNote       $02
00086A60 01                         	dc.b	$01
00086A61 E103                       	smpsAlterNote       $03
00086A63 01                         	dc.b	$01
00086A64 E1FF                       	smpsAlterNote       $FF
00086A66 01                         	dc.b	$01
00086A67 E1F9                       	smpsAlterNote       $F9
00086A69 01                         	dc.b	$01
00086A6A E1FC                       	smpsAlterNote       $FC
00086A6C ECF5                       	smpsPSGAlterVol     $F5
00086A6E 8F06                       	dc.b	nD1, $06
00086A70 EC04                       	smpsPSGAlterVol     $04
00086A72 E701                       	dc.b	smpsNoAttack, $01
00086A74 EC07                       	smpsPSGAlterVol     $07
00086A76 8003                       	dc.b	nRst, $03
00086A78 ECF5                       	smpsPSGAlterVol     $F5
00086A7A 8F06                       	dc.b	nD1, $06
00086A7C EC04                       	smpsPSGAlterVol     $04
00086A7E E701                       	dc.b	smpsNoAttack, $01
00086A80 EC07                       	smpsPSGAlterVol     $07
00086A82 8006                       	dc.b	nRst, $06
00086A84 E1FF                       	smpsAlterNote       $FF
00086A86 01                         	dc.b	$01
00086A87 E103                       	smpsAlterNote       $03
00086A89 01                         	dc.b	$01
00086A8A E1FF                       	smpsAlterNote       $FF
00086A8C 01                         	dc.b	$01
00086A8D E1FC                       	smpsAlterNote       $FC
00086A8F 01                         	dc.b	$01
00086A90 ECF5                       	smpsPSGAlterVol     $F5
00086A92 8F06                       	dc.b	nD1, $06
00086A94 EC04                       	smpsPSGAlterVol     $04
00086A96 E701                       	dc.b	smpsNoAttack, $01
00086A98 EC07                       	smpsPSGAlterVol     $07
00086A9A 8003                       	dc.b	nRst, $03
00086A9C ECF5                       	smpsPSGAlterVol     $F5
00086A9E 8F07                       	dc.b	nD1, $07
00086AA0 EC0B                       	smpsPSGAlterVol     $0B
00086AA2 8007                       	dc.b	nRst, $07
00086AA4 E101                       	smpsAlterNote       $01
00086AA6 0101                       	dc.b	$01, $01
00086AA8 E1FC                       	smpsAlterNote       $FC
00086AAA 01                         	dc.b	$01
00086AAB E1F9                       	smpsAlterNote       $F9
00086AAD 01                         	dc.b	$01
00086AAE E1FC                       	smpsAlterNote       $FC
00086AB0 ECF5                       	smpsPSGAlterVol     $F5
00086AB2 9006                       	dc.b	nEb1, $06
00086AB4 EC0B                       	smpsPSGAlterVol     $0B
00086AB6 8004                       	dc.b	nRst, $04
00086AB8 ECF5                       	smpsPSGAlterVol     $F5
00086ABA 9006                       	dc.b	nEb1, $06
00086ABC EC04                       	smpsPSGAlterVol     $04
00086ABE E701                       	dc.b	smpsNoAttack, $01
00086AC0 EC07                       	smpsPSGAlterVol     $07
00086AC2 8006                       	dc.b	nRst, $06
00086AC4 E100                       	smpsAlterNote       $00
00086AC6 01                         	dc.b	$01
00086AC7 E102                       	smpsAlterNote       $02
00086AC9 01                         	dc.b	$01
00086ACA E100                       	smpsAlterNote       $00
00086ACC 01                         	dc.b	$01
00086ACD E1FD                       	smpsAlterNote       $FD
00086ACF 01                         	dc.b	$01
00086AD0 E1FF                       	smpsAlterNote       $FF
00086AD2 ECF5                       	smpsPSGAlterVol     $F5
00086AD4 9B06                       	dc.b	nD2, $06
00086AD6 EC04                       	smpsPSGAlterVol     $04
00086AD8 E701                       	dc.b	smpsNoAttack, $01
00086ADA EC07                       	smpsPSGAlterVol     $07
00086ADC 8003                       	dc.b	nRst, $03
00086ADE ECF5                       	smpsPSGAlterVol     $F5
00086AE0 9B07                       	dc.b	nD2, $07
00086AE2 EC0B                       	smpsPSGAlterVol     $0B
00086AE4 8006                       	dc.b	nRst, $06
00086AE6 E102                       	smpsAlterNote       $02
00086AE8 01                         	dc.b	$01
00086AE9 E106                       	smpsAlterNote       $06
00086AEB 01                         	dc.b	$01
00086AEC E105                       	smpsAlterNote       $05
00086AEE 01                         	dc.b	$01
00086AEF E1FF                       	smpsAlterNote       $FF
00086AF1 01                         	dc.b	$01
00086AF2 ECF5                       	smpsPSGAlterVol     $F5
00086AF4 9B07                       	dc.b	nD2, $07
00086AF6 EC0B                       	smpsPSGAlterVol     $0B
00086AF8 8004                       	dc.b	nRst, $04
00086AFA ECF5                       	smpsPSGAlterVol     $F5
00086AFC 9B06                       	dc.b	nD2, $06
00086AFE EC0B                       	smpsPSGAlterVol     $0B
00086B00 8007                       	dc.b	nRst, $07
00086B02 E105                       	smpsAlterNote       $05
00086B04 0101                       	dc.b	$01, $01
00086B06 E102                       	smpsAlterNote       $02
00086B08 01                         	dc.b	$01
00086B09 E1FC                       	smpsAlterNote       $FC
00086B0B 01                         	dc.b	$01
00086B0C E1FF                       	smpsAlterNote       $FF
00086B0E ECF5                       	smpsPSGAlterVol     $F5
00086B10 9B06                       	dc.b	nD2, $06
00086B12 EC04                       	smpsPSGAlterVol     $04
00086B14 E701                       	dc.b	smpsNoAttack, $01
00086B16 EC07                       	smpsPSGAlterVol     $07
00086B18 8003                       	dc.b	nRst, $03
00086B1A ECF5                       	smpsPSGAlterVol     $F5
00086B1C 9B06                       	dc.b	nD2, $06
00086B1E EC04                       	smpsPSGAlterVol     $04
00086B20 E701                       	dc.b	smpsNoAttack, $01
00086B22 EC07                       	smpsPSGAlterVol     $07
00086B24 8006                       	dc.b	nRst, $06
00086B26 E102                       	smpsAlterNote       $02
00086B28 01                         	dc.b	$01
00086B29 E106                       	smpsAlterNote       $06
00086B2B 01                         	dc.b	$01
00086B2C E102                       	smpsAlterNote       $02
00086B2E 01                         	dc.b	$01
00086B2F E1FF                       	smpsAlterNote       $FF
00086B31 01                         	dc.b	$01
00086B32 ECF5                       	smpsPSGAlterVol     $F5
00086B34 9B06                       	dc.b	nD2, $06
00086B36 EC04                       	smpsPSGAlterVol     $04
00086B38 E701                       	dc.b	smpsNoAttack, $01
00086B3A EC07                       	smpsPSGAlterVol     $07
00086B3C 8003                       	dc.b	nRst, $03
00086B3E ECF5                       	smpsPSGAlterVol     $F5
00086B40 9B07                       	dc.b	nD2, $07
00086B42 EC0B                       	smpsPSGAlterVol     $0B
00086B44 8007                       	dc.b	nRst, $07
00086B46 E105                       	smpsAlterNote       $05
00086B48 0101                       	dc.b	$01, $01
00086B4A E1FF                       	smpsAlterNote       $FF
00086B4C 01                         	dc.b	$01
00086B4D E1FC                       	smpsAlterNote       $FC
00086B4F 01                         	dc.b	$01
00086B50 E1FF                       	smpsAlterNote       $FF
00086B52 ECF5                       	smpsPSGAlterVol     $F5
00086B54 9B06                       	dc.b	nD2, $06
00086B56 EC0B                       	smpsPSGAlterVol     $0B
00086B58 8004                       	dc.b	nRst, $04
00086B5A ECF5                       	smpsPSGAlterVol     $F5
00086B5C 9B06                       	dc.b	nD2, $06
00086B5E EC04                       	smpsPSGAlterVol     $04
00086B60 E701                       	dc.b	smpsNoAttack, $01
00086B62 EC07                       	smpsPSGAlterVol     $07
00086B64 8006                       	dc.b	nRst, $06
00086B66 E105                       	smpsAlterNote       $05
00086B68 01                         	dc.b	$01
00086B69 E106                       	smpsAlterNote       $06
00086B6B 01                         	dc.b	$01
00086B6C E102                       	smpsAlterNote       $02
00086B6E 01                         	dc.b	$01
00086B6F E1FC                       	smpsAlterNote       $FC
00086B71 01                         	dc.b	$01
00086B72 E1FF                       	smpsAlterNote       $FF
00086B74 ECF5                       	smpsPSGAlterVol     $F5
00086B76 9B06                       	dc.b	nD2, $06
00086B78 EC04                       	smpsPSGAlterVol     $04
00086B7A E701                       	dc.b	smpsNoAttack, $01
00086B7C EC07                       	smpsPSGAlterVol     $07
00086B7E 8003                       	dc.b	nRst, $03
00086B80 ECF5                       	smpsPSGAlterVol     $F5
00086B82 9B06                       	dc.b	nD2, $06
00086B84 EC04                       	smpsPSGAlterVol     $04
00086B86 E701                       	dc.b	smpsNoAttack, $01
00086B88 EC07                       	smpsPSGAlterVol     $07
00086B8A 8006                       	dc.b	nRst, $06
00086B8C E102                       	smpsAlterNote       $02
00086B8E 01                         	dc.b	$01
00086B8F E106                       	smpsAlterNote       $06
00086B91 01                         	dc.b	$01
00086B92 E105                       	smpsAlterNote       $05
00086B94 01                         	dc.b	$01
00086B95 E1FF                       	smpsAlterNote       $FF
00086B97 01                         	dc.b	$01
00086B98 ECF5                       	smpsPSGAlterVol     $F5
00086B9A 9B07                       	dc.b	nD2, $07
00086B9C EC0B                       	smpsPSGAlterVol     $0B
00086B9E 8004                       	dc.b	nRst, $04
00086BA0 ECF5                       	smpsPSGAlterVol     $F5
00086BA2 9B06                       	dc.b	nD2, $06
00086BA4 EC0B                       	smpsPSGAlterVol     $0B
00086BA6 8007                       	dc.b	nRst, $07
00086BA8 E105                       	smpsAlterNote       $05
00086BAA 0101                       	dc.b	$01, $01
00086BAC E102                       	smpsAlterNote       $02
00086BAE 01                         	dc.b	$01
00086BAF E1FC                       	smpsAlterNote       $FC
00086BB1 01                         	dc.b	$01
00086BB2 E1FF                       	smpsAlterNote       $FF
00086BB4 ECF5                       	smpsPSGAlterVol     $F5
00086BB6 9B06                       	dc.b	nD2, $06
00086BB8 EC04                       	smpsPSGAlterVol     $04
00086BBA E701                       	dc.b	smpsNoAttack, $01
00086BBC EC07                       	smpsPSGAlterVol     $07
00086BBE 8003                       	dc.b	nRst, $03
00086BC0 ECF5                       	smpsPSGAlterVol     $F5
00086BC2 9B06                       	dc.b	nD2, $06
00086BC4 EC04                       	smpsPSGAlterVol     $04
00086BC6 E701                       	dc.b	smpsNoAttack, $01
00086BC8 EC07                       	smpsPSGAlterVol     $07
00086BCA 8006                       	dc.b	nRst, $06
00086BCC E102                       	smpsAlterNote       $02
00086BCE 01                         	dc.b	$01
00086BCF E106                       	smpsAlterNote       $06
00086BD1 01                         	dc.b	$01
00086BD2 E102                       	smpsAlterNote       $02
00086BD4 01                         	dc.b	$01
00086BD5 E1FF                       	smpsAlterNote       $FF
00086BD7 01                         	dc.b	$01
00086BD8 ECF5                       	smpsPSGAlterVol     $F5
00086BDA 9B06                       	dc.b	nD2, $06
00086BDC EC04                       	smpsPSGAlterVol     $04
00086BDE E701                       	dc.b	smpsNoAttack, $01
00086BE0 EC07                       	smpsPSGAlterVol     $07
00086BE2 8003                       	dc.b	nRst, $03
00086BE4 ECF5                       	smpsPSGAlterVol     $F5
00086BE6 9B07                       	dc.b	nD2, $07
00086BE8 E1FE                       	smpsAlterNote       $FE
00086BEA 9706                       	dc.b	nBb1, $06
00086BEC EC04                       	smpsPSGAlterVol     $04
00086BEE E701                       	dc.b	smpsNoAttack, $01
00086BF0 ECFC                       	smpsPSGAlterVol     $FC
00086BF2 9703                       	dc.b	nBb1, $03
00086BF4 EC04                       	smpsPSGAlterVol     $04
00086BF6 E701                       	dc.b	smpsNoAttack, $01
00086BF8 ECFC                       	smpsPSGAlterVol     $FC
00086BFA 9702                       	dc.b	nBb1, $02
00086BFC EC04                       	smpsPSGAlterVol     $04
00086BFE E701                       	dc.b	smpsNoAttack, $01
00086C00 ECFC                       	smpsPSGAlterVol     $FC
00086C02 9606                       	dc.b	nA1, $06
00086C04 EC04                       	smpsPSGAlterVol     $04
00086C06 E701                       	dc.b	smpsNoAttack, $01
00086C08 EC07                       	smpsPSGAlterVol     $07
00086C0A 8006                       	dc.b	nRst, $06
00086C0C E101                       	smpsAlterNote       $01
00086C0E 01                         	dc.b	$01
00086C0F E107                       	smpsAlterNote       $07
00086C11 01                         	dc.b	$01
00086C12 E101                       	smpsAlterNote       $01
00086C14 01                         	dc.b	$01
00086C15 E1F8                       	smpsAlterNote       $F8
00086C17 01                         	dc.b	$01
00086C18 E1F7                       	smpsAlterNote       $F7
00086C1A 01                         	dc.b	$01
00086C1B E1FC                       	smpsAlterNote       $FC
00086C1D 01                         	dc.b	$01
00086C1E E106                       	smpsAlterNote       $06
00086C20 01                         	dc.b	$01
00086C21 E107                       	smpsAlterNote       $07
00086C23 01                         	dc.b	$01
00086C24 E101                       	smpsAlterNote       $01
00086C26 01                         	dc.b	$01
00086C27 E1F8                       	smpsAlterNote       $F8
00086C29 0101                       	dc.b	$01, $01
00086C2B E1FC                       	smpsAlterNote       $FC
00086C2D ECF5                       	smpsPSGAlterVol     $F5
00086C2F 8F06                       	dc.b	nD1, $06
00086C31 EC04                       	smpsPSGAlterVol     $04
00086C33 E701                       	dc.b	smpsNoAttack, $01
00086C35 EC07                       	smpsPSGAlterVol     $07
00086C37 8003                       	dc.b	nRst, $03
00086C39 ECF5                       	smpsPSGAlterVol     $F5
00086C3B 8F06                       	dc.b	nD1, $06
00086C3D EC04                       	smpsPSGAlterVol     $04
00086C3F E701                       	dc.b	smpsNoAttack, $01
00086C41 EC07                       	smpsPSGAlterVol     $07
00086C43 8006                       	dc.b	nRst, $06
00086C45 E1FF                       	smpsAlterNote       $FF
00086C47 01                         	dc.b	$01
00086C48 E102                       	smpsAlterNote       $02
00086C4A 01                         	dc.b	$01
00086C4B E101                       	smpsAlterNote       $01
00086C4D 01                         	dc.b	$01
00086C4E E1FC                       	smpsAlterNote       $FC
00086C50 01                         	dc.b	$01
00086C51 ECF5                       	smpsPSGAlterVol     $F5
00086C53 9007                       	dc.b	nEb1, $07
00086C55 EC0B                       	smpsPSGAlterVol     $0B
00086C57 8004                       	dc.b	nRst, $04
00086C59 ECF5                       	smpsPSGAlterVol     $F5
00086C5B 9006                       	dc.b	nEb1, $06
00086C5D EC0B                       	smpsPSGAlterVol     $0B
00086C5F 8007                       	dc.b	nRst, $07
00086C61 E103                       	smpsAlterNote       $03
00086C63 0101                       	dc.b	$01, $01
00086C65 E1FC                       	smpsAlterNote       $FC
00086C67 01                         	dc.b	$01
00086C68 E1F9                       	smpsAlterNote       $F9
00086C6A 01                         	dc.b	$01
00086C6B E1FC                       	smpsAlterNote       $FC
00086C6D ECF5                       	smpsPSGAlterVol     $F5
00086C6F 8F06                       	dc.b	nD1, $06
00086C71 EC04                       	smpsPSGAlterVol     $04
00086C73 E701                       	dc.b	smpsNoAttack, $01
00086C75 EC07                       	smpsPSGAlterVol     $07
00086C77 8003                       	dc.b	nRst, $03
00086C79 ECF5                       	smpsPSGAlterVol     $F5
00086C7B 8F06                       	dc.b	nD1, $06
00086C7D EC04                       	smpsPSGAlterVol     $04
00086C7F E701                       	dc.b	smpsNoAttack, $01
00086C81 EC07                       	smpsPSGAlterVol     $07
00086C83 8006                       	dc.b	nRst, $06
00086C85 E1FF                       	smpsAlterNote       $FF
00086C87 01                         	dc.b	$01
00086C88 E103                       	smpsAlterNote       $03
00086C8A 01                         	dc.b	$01
00086C8B E1FF                       	smpsAlterNote       $FF
00086C8D 01                         	dc.b	$01
00086C8E E1F9                       	smpsAlterNote       $F9
00086C90 01                         	dc.b	$01
00086C91 E1FC                       	smpsAlterNote       $FC
00086C93 ECF5                       	smpsPSGAlterVol     $F5
00086C95 8F06                       	dc.b	nD1, $06
00086C97 EC04                       	smpsPSGAlterVol     $04
00086C99 E701                       	dc.b	smpsNoAttack, $01
00086C9B EC07                       	smpsPSGAlterVol     $07
00086C9D 8003                       	dc.b	nRst, $03
00086C9F ECF5                       	smpsPSGAlterVol     $F5
00086CA1 8F07                       	dc.b	nD1, $07
00086CA3 EC0B                       	smpsPSGAlterVol     $0B
00086CA5 8006                       	dc.b	nRst, $06
00086CA7 E1FF                       	smpsAlterNote       $FF
00086CA9 01                         	dc.b	$01
00086CAA E102                       	smpsAlterNote       $02
00086CAC 0101                       	dc.b	$01, $01
00086CAE E1FC                       	smpsAlterNote       $FC
00086CB0 01                         	dc.b	$01
00086CB1 ECF5                       	smpsPSGAlterVol     $F5
00086CB3 8F07                       	dc.b	nD1, $07
00086CB5 EC0B                       	smpsPSGAlterVol     $0B
00086CB7 8004                       	dc.b	nRst, $04
00086CB9 ECF5                       	smpsPSGAlterVol     $F5
00086CBB 8F06                       	dc.b	nD1, $06
00086CBD EC04                       	smpsPSGAlterVol     $04
00086CBF E701                       	dc.b	smpsNoAttack, $01
00086CC1 EC07                       	smpsPSGAlterVol     $07
00086CC3 8006                       	dc.b	nRst, $06
00086CC5 E101                       	smpsAlterNote       $01
00086CC7 01                         	dc.b	$01
00086CC8 E102                       	smpsAlterNote       $02
00086CCA 01                         	dc.b	$01
00086CCB E1FF                       	smpsAlterNote       $FF
00086CCD 01                         	dc.b	$01
00086CCE E1F9                       	smpsAlterNote       $F9
00086CD0 01                         	dc.b	$01
00086CD1 E1FC                       	smpsAlterNote       $FC
00086CD3 ECF5                       	smpsPSGAlterVol     $F5
00086CD5 9006                       	dc.b	nEb1, $06
00086CD7 EC04                       	smpsPSGAlterVol     $04
00086CD9 E701                       	dc.b	smpsNoAttack, $01
00086CDB EC07                       	smpsPSGAlterVol     $07
00086CDD 8003                       	dc.b	nRst, $03
00086CDF ECF5                       	smpsPSGAlterVol     $F5
00086CE1 9006                       	dc.b	nEb1, $06
00086CE3 EC04                       	smpsPSGAlterVol     $04
00086CE5 E701                       	dc.b	smpsNoAttack, $01
00086CE7 EC07                       	smpsPSGAlterVol     $07
00086CE9 8006                       	dc.b	nRst, $06
00086CEB E100                       	smpsAlterNote       $00
00086CED 01                         	dc.b	$01
00086CEE E102                       	smpsAlterNote       $02
00086CF0 01                         	dc.b	$01
00086CF1 E100                       	smpsAlterNote       $00
00086CF3 01                         	dc.b	$01
00086CF4 E1FF                       	smpsAlterNote       $FF
00086CF6 01                         	dc.b	$01
00086CF7 ECF5                       	smpsPSGAlterVol     $F5
00086CF9 9B06                       	dc.b	nD2, $06
00086CFB EC04                       	smpsPSGAlterVol     $04
00086CFD E701                       	dc.b	smpsNoAttack, $01
00086CFF EC07                       	smpsPSGAlterVol     $07
00086D01 8003                       	dc.b	nRst, $03
00086D03 ECF5                       	smpsPSGAlterVol     $F5
00086D05 9B07                       	dc.b	nD2, $07
00086D07 EC0B                       	smpsPSGAlterVol     $0B
00086D09 8007                       	dc.b	nRst, $07
00086D0B E105                       	smpsAlterNote       $05
00086D0D 0101                       	dc.b	$01, $01
00086D0F E1FF                       	smpsAlterNote       $FF
00086D11 01                         	dc.b	$01
00086D12 E1FC                       	smpsAlterNote       $FC
00086D14 01                         	dc.b	$01
00086D15 E1FF                       	smpsAlterNote       $FF
00086D17 ECF5                       	smpsPSGAlterVol     $F5
00086D19 9B06                       	dc.b	nD2, $06
00086D1B EC0B                       	smpsPSGAlterVol     $0B
00086D1D 8004                       	dc.b	nRst, $04
00086D1F ECF5                       	smpsPSGAlterVol     $F5
00086D21 9B06                       	dc.b	nD2, $06
00086D23 EC04                       	smpsPSGAlterVol     $04
00086D25 E701                       	dc.b	smpsNoAttack, $01
00086D27 EC07                       	smpsPSGAlterVol     $07
00086D29 8006                       	dc.b	nRst, $06
00086D2B E102                       	smpsAlterNote       $02
00086D2D 01                         	dc.b	$01
00086D2E E106                       	smpsAlterNote       $06
00086D30 01                         	dc.b	$01
00086D31 E102                       	smpsAlterNote       $02
00086D33 01                         	dc.b	$01
00086D34 E1FC                       	smpsAlterNote       $FC
00086D36 01                         	dc.b	$01
00086D37 E1FF                       	smpsAlterNote       $FF
00086D39 ECF5                       	smpsPSGAlterVol     $F5
00086D3B 9B06                       	dc.b	nD2, $06
00086D3D EC04                       	smpsPSGAlterVol     $04
00086D3F E701                       	dc.b	smpsNoAttack, $01
00086D41 EC07                       	smpsPSGAlterVol     $07
00086D43 8003                       	dc.b	nRst, $03
00086D45 ECF5                       	smpsPSGAlterVol     $F5
00086D47 9B07                       	dc.b	nD2, $07
00086D49 EC0B                       	smpsPSGAlterVol     $0B
00086D4B 8006                       	dc.b	nRst, $06
00086D4D E102                       	smpsAlterNote       $02
00086D4F 01                         	dc.b	$01
00086D50 E105                       	smpsAlterNote       $05
00086D52 0101                       	dc.b	$01, $01
00086D54 E1FF                       	smpsAlterNote       $FF
00086D56 01                         	dc.b	$01
00086D57 ECF5                       	smpsPSGAlterVol     $F5
00086D59 9B07                       	dc.b	nD2, $07
00086D5B EC0B                       	smpsPSGAlterVol     $0B
00086D5D 8004                       	dc.b	nRst, $04
00086D5F ECF5                       	smpsPSGAlterVol     $F5
00086D61 9B06                       	dc.b	nD2, $06
00086D63 EC0B                       	smpsPSGAlterVol     $0B
00086D65 8007                       	dc.b	nRst, $07
00086D67 E105                       	smpsAlterNote       $05
00086D69 0101                       	dc.b	$01, $01
00086D6B E102                       	smpsAlterNote       $02
00086D6D 01                         	dc.b	$01
00086D6E E1FC                       	smpsAlterNote       $FC
00086D70 01                         	dc.b	$01
00086D71 E1FF                       	smpsAlterNote       $FF
00086D73 ECF5                       	smpsPSGAlterVol     $F5
00086D75 9B06                       	dc.b	nD2, $06
00086D77 EC04                       	smpsPSGAlterVol     $04
00086D79 E701                       	dc.b	smpsNoAttack, $01
00086D7B EC07                       	smpsPSGAlterVol     $07
00086D7D 8003                       	dc.b	nRst, $03
00086D7F ECF5                       	smpsPSGAlterVol     $F5
00086D81 9B06                       	dc.b	nD2, $06
00086D83 EC04                       	smpsPSGAlterVol     $04
00086D85 E701                       	dc.b	smpsNoAttack, $01
00086D87 EC07                       	smpsPSGAlterVol     $07
00086D89 8006                       	dc.b	nRst, $06
00086D8B E102                       	smpsAlterNote       $02
00086D8D 01                         	dc.b	$01
00086D8E E106                       	smpsAlterNote       $06
00086D90 01                         	dc.b	$01
00086D91 E102                       	smpsAlterNote       $02
00086D93 01                         	dc.b	$01
00086D94 E1FF                       	smpsAlterNote       $FF
00086D96 01                         	dc.b	$01
00086D97 ECF5                       	smpsPSGAlterVol     $F5
00086D99 9B06                       	dc.b	nD2, $06
00086D9B EC04                       	smpsPSGAlterVol     $04
00086D9D E701                       	dc.b	smpsNoAttack, $01
00086D9F EC07                       	smpsPSGAlterVol     $07
00086DA1 8003                       	dc.b	nRst, $03
00086DA3 ECF5                       	smpsPSGAlterVol     $F5
00086DA5 9B07                       	dc.b	nD2, $07
00086DA7 EC0B                       	smpsPSGAlterVol     $0B
00086DA9 8007                       	dc.b	nRst, $07
00086DAB E105                       	smpsAlterNote       $05
00086DAD 0101                       	dc.b	$01, $01
00086DAF E1FF                       	smpsAlterNote       $FF
00086DB1 01                         	dc.b	$01
00086DB2 E1FC                       	smpsAlterNote       $FC
00086DB4 01                         	dc.b	$01
00086DB5 E1FF                       	smpsAlterNote       $FF
00086DB7 ECF5                       	smpsPSGAlterVol     $F5
00086DB9 9B06                       	dc.b	nD2, $06
00086DBB EC0B                       	smpsPSGAlterVol     $0B
00086DBD 8004                       	dc.b	nRst, $04
00086DBF ECF5                       	smpsPSGAlterVol     $F5
00086DC1 9B06                       	dc.b	nD2, $06
00086DC3 EC04                       	smpsPSGAlterVol     $04
00086DC5 E701                       	dc.b	smpsNoAttack, $01
00086DC7 EC07                       	smpsPSGAlterVol     $07
00086DC9 8006                       	dc.b	nRst, $06
00086DCB E102                       	smpsAlterNote       $02
00086DCD 01                         	dc.b	$01
00086DCE E106                       	smpsAlterNote       $06
00086DD0 01                         	dc.b	$01
00086DD1 E102                       	smpsAlterNote       $02
00086DD3 01                         	dc.b	$01
00086DD4 E1FC                       	smpsAlterNote       $FC
00086DD6 01                         	dc.b	$01
00086DD7 E1FF                       	smpsAlterNote       $FF
00086DD9 ECF5                       	smpsPSGAlterVol     $F5
00086DDB 9B06                       	dc.b	nD2, $06
00086DDD EC04                       	smpsPSGAlterVol     $04
00086DDF E701                       	dc.b	smpsNoAttack, $01
00086DE1 EC07                       	smpsPSGAlterVol     $07
00086DE3 8003                       	dc.b	nRst, $03
00086DE5 ECF5                       	smpsPSGAlterVol     $F5
00086DE7 9B06                       	dc.b	nD2, $06
00086DE9 EC04                       	smpsPSGAlterVol     $04
00086DEB E701                       	dc.b	smpsNoAttack, $01
00086DED EC07                       	smpsPSGAlterVol     $07
00086DEF 8006                       	dc.b	nRst, $06
00086DF1 E102                       	smpsAlterNote       $02
00086DF3 01                         	dc.b	$01
00086DF4 E106                       	smpsAlterNote       $06
00086DF6 01                         	dc.b	$01
00086DF7 E105                       	smpsAlterNote       $05
00086DF9 01                         	dc.b	$01
00086DFA E1FF                       	smpsAlterNote       $FF
00086DFC 01                         	dc.b	$01
00086DFD ECF5                       	smpsPSGAlterVol     $F5
00086DFF 9B07                       	dc.b	nD2, $07
00086E01 EC0B                       	smpsPSGAlterVol     $0B
00086E03 8004                       	dc.b	nRst, $04
00086E05 ECF5                       	smpsPSGAlterVol     $F5
00086E07 9B06                       	dc.b	nD2, $06
00086E09 EC0B                       	smpsPSGAlterVol     $0B
00086E0B 8007                       	dc.b	nRst, $07
00086E0D E105                       	smpsAlterNote       $05
00086E0F 0101                       	dc.b	$01, $01
00086E11 E101                       	smpsAlterNote       $01
00086E13 01                         	dc.b	$01
00086E14 E1FB                       	smpsAlterNote       $FB
00086E16 01                         	dc.b	$01
00086E17 E1FE                       	smpsAlterNote       $FE
00086E19 ECF5                       	smpsPSGAlterVol     $F5
00086E1B 9A06                       	dc.b	nCs2, $06
00086E1D EC04                       	smpsPSGAlterVol     $04
00086E1F E701                       	dc.b	smpsNoAttack, $01
00086E21 EC07                       	smpsPSGAlterVol     $07
00086E23 8003                       	dc.b	nRst, $03
00086E25 ECF5                       	smpsPSGAlterVol     $F5
00086E27 9A06                       	dc.b	nCs2, $06
00086E29 EC04                       	smpsPSGAlterVol     $04
00086E2B E701                       	dc.b	smpsNoAttack, $01
00086E2D EC07                       	smpsPSGAlterVol     $07
00086E2F 8003                       	dc.b	nRst, $03
00086E31 E1FC                       	smpsAlterNote       $FC
00086E33 ECF5                       	smpsPSGAlterVol     $F5
00086E35 8F07                       	dc.b	nD1, $07
00086E37 EC0B                       	smpsPSGAlterVol     $0B
00086E39 8006                       	dc.b	nRst, $06
00086E3B E1FF                       	smpsAlterNote       $FF
00086E3D 01                         	dc.b	$01
00086E3E E103                       	smpsAlterNote       $03
00086E40 01                         	dc.b	$01
00086E41 E102                       	smpsAlterNote       $02
00086E43 01                         	dc.b	$01
00086E44 E1FC                       	smpsAlterNote       $FC
00086E46 01                         	dc.b	$01
00086E47 E1F8                       	smpsAlterNote       $F8
00086E49 01                         	dc.b	$01
00086E4A E1FC                       	smpsAlterNote       $FC
00086E4C 01                         	dc.b	$01
00086E4D E1FF                       	smpsAlterNote       $FF
00086E4F 01                         	dc.b	$01
00086E50 E103                       	smpsAlterNote       $03
00086E52 01                         	dc.b	$01
00086E53 E1FC                       	smpsAlterNote       $FC
00086E55 ECF5                       	smpsPSGAlterVol     $F5
00086E57 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00086E5B EC04                       	smpsPSGAlterVol     $04
00086E5D E701                       	dc.b	smpsNoAttack, $01
00086E5F EC07                       	smpsPSGAlterVol     $07
00086E61 8009                       	dc.b	nRst, $09
00086E63 E1FF                       	smpsAlterNote       $FF
00086E65 01                         	dc.b	$01
00086E66 E103                       	smpsAlterNote       $03
00086E68 01                         	dc.b	$01
00086E69 E102                       	smpsAlterNote       $02
00086E6B 01                         	dc.b	$01
00086E6C E1FC                       	smpsAlterNote       $FC
00086E6E 01                         	dc.b	$01
00086E6F E1F8                       	smpsAlterNote       $F8
00086E71 01                         	dc.b	$01
00086E72 E1FC                       	smpsAlterNote       $FC
00086E74 01                         	dc.b	$01
00086E75 E1FF                       	smpsAlterNote       $FF
00086E77 01                         	dc.b	$01
00086E78 E103                       	smpsAlterNote       $03
00086E7A 01                         	dc.b	$01
00086E7B E1FF                       	smpsAlterNote       $FF
00086E7D 01                         	dc.b	$01
00086E7E E1F9                       	smpsAlterNote       $F9
00086E80 01                         	dc.b	$01
00086E81 E1F8                       	smpsAlterNote       $F8
00086E83 01                         	dc.b	$01
00086E84 E1FC                       	smpsAlterNote       $FC
00086E86 01                         	dc.b	$01
00086E87 E102                       	smpsAlterNote       $02
00086E89 0101                       	dc.b	$01, $01
00086E8B E1FF                       	smpsAlterNote       $FF
00086E8D 01                         	dc.b	$01
00086E8E E1FC                       	smpsAlterNote       $FC
00086E90 ECF5                       	smpsPSGAlterVol     $F5
00086E92 8F02                       	dc.b	nD1, $02
00086E94 EC04                       	smpsPSGAlterVol     $04
00086E96 E701                       	dc.b	smpsNoAttack, $01
00086E98 ECFC                       	smpsPSGAlterVol     $FC
00086E9A E1FB                       	smpsAlterNote       $FB
00086E9C 8D06                       	dc.b	nC1, $06
00086E9E EC04                       	smpsPSGAlterVol     $04
00086EA0 E701                       	dc.b	smpsNoAttack, $01
00086EA2 EC07                       	smpsPSGAlterVol     $07
00086EA4 8006                       	dc.b	nRst, $06
00086EA6 E1FE                       	smpsAlterNote       $FE
00086EA8 01                         	dc.b	$01
00086EA9 E102                       	smpsAlterNote       $02
00086EAB 01                         	dc.b	$01
00086EAC E1FE                       	smpsAlterNote       $FE
00086EAE 01                         	dc.b	$01
00086EAF E1FB                       	smpsAlterNote       $FB
00086EB1 01                         	dc.b	$01
00086EB2 E1F7                       	smpsAlterNote       $F7
00086EB4 01                         	dc.b	$01
00086EB5 E1FB                       	smpsAlterNote       $FB
00086EB7 01                         	dc.b	$01
00086EB8 E101                       	smpsAlterNote       $01
00086EBA 01                         	dc.b	$01
00086EBB E102                       	smpsAlterNote       $02
00086EBD 01                         	dc.b	$01
00086EBE E1FB                       	smpsAlterNote       $FB
00086EC0 ECF5                       	smpsPSGAlterVol     $F5
00086EC2 8D02                       	dc.b	nC1, $02
00086EC4 EC04                       	smpsPSGAlterVol     $04
00086EC6 E701                       	dc.b	smpsNoAttack, $01
00086EC8 E1FC                       	smpsAlterNote       $FC
00086ECA ECFC                       	smpsPSGAlterVol     $FC
00086ECC 8F0D                       	dc.b	nD1, $0D
00086ECE E1FF                       	smpsAlterNote       $FF
00086ED0 E701                       	dc.b	smpsNoAttack, $01
00086ED2 E103                       	smpsAlterNote       $03
00086ED4 E701                       	dc.b	smpsNoAttack, $01
00086ED6 E1FF                       	smpsAlterNote       $FF
00086ED8 E701                       	dc.b	smpsNoAttack, $01
00086EDA E1FC                       	smpsAlterNote       $FC
00086EDC E701                       	dc.b	smpsNoAttack, $01
00086EDE E1F8                       	smpsAlterNote       $F8
00086EE0 E701                       	dc.b	smpsNoAttack, $01
00086EE2 E1FC                       	smpsAlterNote       $FC
00086EE4 E701                       	dc.b	smpsNoAttack, $01
00086EE6 E102                       	smpsAlterNote       $02
00086EE8 E701                       	dc.b	smpsNoAttack, $01
00086EEA E103                       	smpsAlterNote       $03
00086EEC E701                       	dc.b	smpsNoAttack, $01
00086EEE E1FF                       	smpsAlterNote       $FF
00086EF0 E701                       	dc.b	smpsNoAttack, $01
00086EF2 E1F9                       	smpsAlterNote       $F9
00086EF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EF8 E1FC                       	smpsAlterNote       $FC
00086EFA E701                       	dc.b	smpsNoAttack, $01
00086EFC E102                       	smpsAlterNote       $02
00086EFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F02 E1FC                       	smpsAlterNote       $FC
00086F04 E701                       	dc.b	smpsNoAttack, $01
00086F06 E1F9                       	smpsAlterNote       $F9
00086F08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F0C E1FF                       	smpsAlterNote       $FF
00086F0E EC04                       	smpsPSGAlterVol     $04
00086F10 E701                       	dc.b	smpsNoAttack, $01
00086F12 EC07                       	smpsPSGAlterVol     $07
00086F14 E103                       	smpsAlterNote       $03
00086F16 8001                       	dc.b	nRst, $01
00086F18 E102                       	smpsAlterNote       $02
00086F1A 01                         	dc.b	$01
00086F1B E1FB                       	smpsAlterNote       $FB
00086F1D 01                         	dc.b	$01
00086F1E E1F7                       	smpsAlterNote       $F7
00086F20 01                         	dc.b	$01
00086F21 E1FB                       	smpsAlterNote       $FB
00086F23 01                         	dc.b	$01
00086F24 E102                       	smpsAlterNote       $02
00086F26 01                         	dc.b	$01
00086F27 E103                       	smpsAlterNote       $03
00086F29 01                         	dc.b	$01
00086F2A E1FB                       	smpsAlterNote       $FB
00086F2C ECF5                       	smpsPSGAlterVol     $F5
00086F2E 8E06                       	dc.b	nCs1, $06
00086F30 EC04                       	smpsPSGAlterVol     $04
00086F32 E701                       	dc.b	smpsNoAttack, $01
00086F34 EC07                       	smpsPSGAlterVol     $07
00086F36 8003                       	dc.b	nRst, $03
00086F38 ECF5                       	smpsPSGAlterVol     $F5
00086F3A 8E06                       	dc.b	nCs1, $06
00086F3C EC04                       	smpsPSGAlterVol     $04
00086F3E E701                       	dc.b	smpsNoAttack, $01
00086F40 EC07                       	smpsPSGAlterVol     $07
00086F42 8006                       	dc.b	nRst, $06
00086F44 E1FE                       	smpsAlterNote       $FE
00086F46 01                         	dc.b	$01
00086F47 E102                       	smpsAlterNote       $02
00086F49 01                         	dc.b	$01
00086F4A E1FE                       	smpsAlterNote       $FE
00086F4C 01                         	dc.b	$01
00086F4D E1F9                       	smpsAlterNote       $F9
00086F4F 01                         	dc.b	$01
00086F50 E1FC                       	smpsAlterNote       $FC
00086F52 ECF5                       	smpsPSGAlterVol     $F5
00086F54 8F06                       	dc.b	nD1, $06
00086F56 EC04                       	smpsPSGAlterVol     $04
00086F58 E701                       	dc.b	smpsNoAttack, $01
00086F5A EC07                       	smpsPSGAlterVol     $07
00086F5C 8003                       	dc.b	nRst, $03
00086F5E ECF5                       	smpsPSGAlterVol     $F5
00086F60 8F07                       	dc.b	nD1, $07
00086F62 EC0B                       	smpsPSGAlterVol     $0B
00086F64 8006                       	dc.b	nRst, $06
00086F66 E1FF                       	smpsAlterNote       $FF
00086F68 01                         	dc.b	$01
00086F69 E102                       	smpsAlterNote       $02
00086F6B 0101                       	dc.b	$01, $01
00086F6D E1FB                       	smpsAlterNote       $FB
00086F6F 01                         	dc.b	$01
00086F70 ECF5                       	smpsPSGAlterVol     $F5
00086F72 8E07                       	dc.b	nCs1, $07
00086F74 EC0B                       	smpsPSGAlterVol     $0B
00086F76 8004                       	dc.b	nRst, $04
00086F78 ECF5                       	smpsPSGAlterVol     $F5
00086F7A 8E06                       	dc.b	nCs1, $06
00086F7C EC04                       	smpsPSGAlterVol     $04
00086F7E E701                       	dc.b	smpsNoAttack, $01
00086F80 EC07                       	smpsPSGAlterVol     $07
00086F82 8006                       	dc.b	nRst, $06
00086F84 E101                       	smpsAlterNote       $01
00086F86 01                         	dc.b	$01
00086F87 E102                       	smpsAlterNote       $02
00086F89 01                         	dc.b	$01
00086F8A E1FE                       	smpsAlterNote       $FE
00086F8C 01                         	dc.b	$01
00086F8D E1F8                       	smpsAlterNote       $F8
00086F8F 01                         	dc.b	$01
00086F90 E1FB                       	smpsAlterNote       $FB
00086F92 ECF5                       	smpsPSGAlterVol     $F5
00086F94 8E06                       	dc.b	nCs1, $06
00086F96 EC04                       	smpsPSGAlterVol     $04
00086F98 E701                       	dc.b	smpsNoAttack, $01
00086F9A EC07                       	smpsPSGAlterVol     $07
00086F9C 8003                       	dc.b	nRst, $03
00086F9E ECF5                       	smpsPSGAlterVol     $F5
00086FA0 8E06                       	dc.b	nCs1, $06
00086FA2 EC04                       	smpsPSGAlterVol     $04
00086FA4 E701                       	dc.b	smpsNoAttack, $01
00086FA6 EC07                       	smpsPSGAlterVol     $07
00086FA8 8004                       	dc.b	nRst, $04
00086FAA E1FC                       	smpsAlterNote       $FC
00086FAC ECF5                       	smpsPSGAlterVol     $F5
00086FAE 8F06                       	dc.b	nD1, $06
00086FB0 EC0B                       	smpsPSGAlterVol     $0B
00086FB2 8006                       	dc.b	nRst, $06
00086FB4 E1FF                       	smpsAlterNote       $FF
00086FB6 01                         	dc.b	$01
00086FB7 E102                       	smpsAlterNote       $02
00086FB9 0101                       	dc.b	$01, $01
00086FBB E1FC                       	smpsAlterNote       $FC
00086FBD 01                         	dc.b	$01
00086FBE E1F8                       	smpsAlterNote       $F8
00086FC0 01                         	dc.b	$01
00086FC1 E1F9                       	smpsAlterNote       $F9
00086FC3 01                         	dc.b	$01
00086FC4 E1FF                       	smpsAlterNote       $FF
00086FC6 01                         	dc.b	$01
00086FC7 E103                       	smpsAlterNote       $03
00086FC9 01                         	dc.b	$01
00086FCA E1FC                       	smpsAlterNote       $FC
00086FCC ECF5                       	smpsPSGAlterVol     $F5
00086FCE 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00086FD2 EC04                       	smpsPSGAlterVol     $04
00086FD4 E701                       	dc.b	smpsNoAttack, $01
00086FD6 EC07                       	smpsPSGAlterVol     $07
00086FD8 8009                       	dc.b	nRst, $09
00086FDA E1FF                       	smpsAlterNote       $FF
00086FDC 01                         	dc.b	$01
00086FDD E102                       	smpsAlterNote       $02
00086FDF 0101                       	dc.b	$01, $01
00086FE1 E1FC                       	smpsAlterNote       $FC
00086FE3 01                         	dc.b	$01
00086FE4 E1F8                       	smpsAlterNote       $F8
00086FE6 01                         	dc.b	$01
00086FE7 E1F9                       	smpsAlterNote       $F9
00086FE9 01                         	dc.b	$01
00086FEA E1FF                       	smpsAlterNote       $FF
00086FEC 01                         	dc.b	$01
00086FED E103                       	smpsAlterNote       $03
00086FEF 01                         	dc.b	$01
00086FF0 E1FF                       	smpsAlterNote       $FF
00086FF2 01                         	dc.b	$01
00086FF3 E1FC                       	smpsAlterNote       $FC
00086FF5 01                         	dc.b	$01
00086FF6 E1F8                       	smpsAlterNote       $F8
00086FF8 01                         	dc.b	$01
00086FF9 E1FC                       	smpsAlterNote       $FC
00086FFB 01                         	dc.b	$01
00086FFC E102                       	smpsAlterNote       $02
00086FFE 01                         	dc.b	$01
00086FFF E103                       	smpsAlterNote       $03
00087001 01                         	dc.b	$01
00087002 E1FF                       	smpsAlterNote       $FF
00087004 01                         	dc.b	$01
00087005 E1FC                       	smpsAlterNote       $FC
00087007 ECF5                       	smpsPSGAlterVol     $F5
00087009 8F03                       	dc.b	nD1, $03
0008700B E1FB                       	smpsAlterNote       $FB
0008700D 8D06                       	dc.b	nC1, $06
0008700F EC04                       	smpsPSGAlterVol     $04
00087011 E701                       	dc.b	smpsNoAttack, $01
00087013 EC07                       	smpsPSGAlterVol     $07
00087015 8006                       	dc.b	nRst, $06
00087017 E1FE                       	smpsAlterNote       $FE
00087019 01                         	dc.b	$01
0008701A E102                       	smpsAlterNote       $02
0008701C 01                         	dc.b	$01
0008701D E101                       	smpsAlterNote       $01
0008701F 01                         	dc.b	$01
00087020 E1FB                       	smpsAlterNote       $FB
00087022 01                         	dc.b	$01
00087023 E1F7                       	smpsAlterNote       $F7
00087025 01                         	dc.b	$01
00087026 E1FB                       	smpsAlterNote       $FB
00087028 01                         	dc.b	$01
00087029 E1FE                       	smpsAlterNote       $FE
0008702B 01                         	dc.b	$01
0008702C E102                       	smpsAlterNote       $02
0008702E 01                         	dc.b	$01
0008702F E1FB                       	smpsAlterNote       $FB
00087031 ECF5                       	smpsPSGAlterVol     $F5
00087033 8D03                       	dc.b	nC1, $03
00087035 E1FC                       	smpsAlterNote       $FC
00087037 8F0D                       	dc.b	nD1, $0D
00087039 E1FF                       	smpsAlterNote       $FF
0008703B E701                       	dc.b	smpsNoAttack, $01
0008703D E103                       	smpsAlterNote       $03
0008703F E701                       	dc.b	smpsNoAttack, $01
00087041 E1FF                       	smpsAlterNote       $FF
00087043 E701                       	dc.b	smpsNoAttack, $01
00087045 E1FC                       	smpsAlterNote       $FC
00087047 E701                       	dc.b	smpsNoAttack, $01
00087049 E1F8                       	smpsAlterNote       $F8
0008704B E701                       	dc.b	smpsNoAttack, $01
0008704D E1FC                       	smpsAlterNote       $FC
0008704F E701                       	dc.b	smpsNoAttack, $01
00087051 E102                       	smpsAlterNote       $02
00087053 E701                       	dc.b	smpsNoAttack, $01
00087055 E103                       	smpsAlterNote       $03
00087057 E701                       	dc.b	smpsNoAttack, $01
00087059 E1FF                       	smpsAlterNote       $FF
0008705B E701                       	dc.b	smpsNoAttack, $01
0008705D E1F9                       	smpsAlterNote       $F9
0008705F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087063 E1FC                       	smpsAlterNote       $FC
00087065 E701                       	dc.b	smpsNoAttack, $01
00087067 E102                       	smpsAlterNote       $02
00087069 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008706D E1FF                       	smpsAlterNote       $FF
0008706F E701                       	dc.b	smpsNoAttack, $01
00087071 E1F9                       	smpsAlterNote       $F9
00087073 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087077 E1FF                       	smpsAlterNote       $FF
00087079 EC04                       	smpsPSGAlterVol     $04
0008707B E701                       	dc.b	smpsNoAttack, $01
0008707D EC07                       	smpsPSGAlterVol     $07
0008707F E103                       	smpsAlterNote       $03
00087081 8001                       	dc.b	nRst, $01
00087083 E102                       	smpsAlterNote       $02
00087085 01                         	dc.b	$01
00087086 E1FB                       	smpsAlterNote       $FB
00087088 01                         	dc.b	$01
00087089 E1F7                       	smpsAlterNote       $F7
0008708B 01                         	dc.b	$01
0008708C E1FB                       	smpsAlterNote       $FB
0008708E 01                         	dc.b	$01
0008708F E1FF                       	smpsAlterNote       $FF
00087091 01                         	dc.b	$01
00087092 E103                       	smpsAlterNote       $03
00087094 01                         	dc.b	$01
00087095 E1FB                       	smpsAlterNote       $FB
00087097 ECF5                       	smpsPSGAlterVol     $F5
00087099 8E06                       	dc.b	nCs1, $06
0008709B EC04                       	smpsPSGAlterVol     $04
0008709D E701                       	dc.b	smpsNoAttack, $01
0008709F EC07                       	smpsPSGAlterVol     $07
000870A1 8003                       	dc.b	nRst, $03
000870A3 ECF5                       	smpsPSGAlterVol     $F5
000870A5 8E06                       	dc.b	nCs1, $06
000870A7 EC04                       	smpsPSGAlterVol     $04
000870A9 E701                       	dc.b	smpsNoAttack, $01
000870AB EC07                       	smpsPSGAlterVol     $07
000870AD 8006                       	dc.b	nRst, $06
000870AF E1FE                       	smpsAlterNote       $FE
000870B1 01                         	dc.b	$01
000870B2 E102                       	smpsAlterNote       $02
000870B4 01                         	dc.b	$01
000870B5 E1FE                       	smpsAlterNote       $FE
000870B7 01                         	dc.b	$01
000870B8 E1FC                       	smpsAlterNote       $FC
000870BA 01                         	dc.b	$01
000870BB ECF5                       	smpsPSGAlterVol     $F5
000870BD 8F06                       	dc.b	nD1, $06
000870BF EC04                       	smpsPSGAlterVol     $04
000870C1 E701                       	dc.b	smpsNoAttack, $01
000870C3 EC07                       	smpsPSGAlterVol     $07
000870C5 8003                       	dc.b	nRst, $03
000870C7 ECF5                       	smpsPSGAlterVol     $F5
000870C9 8F07                       	dc.b	nD1, $07
000870CB EC0B                       	smpsPSGAlterVol     $0B
000870CD 8007                       	dc.b	nRst, $07
000870CF E102                       	smpsAlterNote       $02
000870D1 0101                       	dc.b	$01, $01
000870D3 E1FB                       	smpsAlterNote       $FB
000870D5 01                         	dc.b	$01
000870D6 E1F8                       	smpsAlterNote       $F8
000870D8 01                         	dc.b	$01
000870D9 E1FB                       	smpsAlterNote       $FB
000870DB ECF5                       	smpsPSGAlterVol     $F5
000870DD 8E06                       	dc.b	nCs1, $06
000870DF EC0B                       	smpsPSGAlterVol     $0B
000870E1 8004                       	dc.b	nRst, $04
000870E3 ECF5                       	smpsPSGAlterVol     $F5
000870E5 8E06                       	dc.b	nCs1, $06
000870E7 EC04                       	smpsPSGAlterVol     $04
000870E9 E701                       	dc.b	smpsNoAttack, $01
000870EB EC07                       	smpsPSGAlterVol     $07
000870ED 8006                       	dc.b	nRst, $06
000870EF E1FE                       	smpsAlterNote       $FE
000870F1 01                         	dc.b	$01
000870F2 E102                       	smpsAlterNote       $02
000870F4 01                         	dc.b	$01
000870F5 E1FE                       	smpsAlterNote       $FE
000870F7 01                         	dc.b	$01
000870F8 E1F9                       	smpsAlterNote       $F9
000870FA 01                         	dc.b	$01
000870FB E1FC                       	smpsAlterNote       $FC
000870FD ECF5                       	smpsPSGAlterVol     $F5
000870FF 8F06                       	dc.b	nD1, $06
00087101 EC04                       	smpsPSGAlterVol     $04
00087103 E701                       	dc.b	smpsNoAttack, $01
00087105 EC07                       	smpsPSGAlterVol     $07
00087107 8003                       	dc.b	nRst, $03
00087109 ECF5                       	smpsPSGAlterVol     $F5
0008710B 8F06                       	dc.b	nD1, $06
0008710D EC04                       	smpsPSGAlterVol     $04
0008710F E701                       	dc.b	smpsNoAttack, $01
00087111 EC07                       	smpsPSGAlterVol     $07
00087113 8006                       	dc.b	nRst, $06
00087115 E1FF                       	smpsAlterNote       $FF
00087117 01                         	dc.b	$01
00087118 E103                       	smpsAlterNote       $03
0008711A 01                         	dc.b	$01
0008711B E102                       	smpsAlterNote       $02
0008711D 01                         	dc.b	$01
0008711E E1FB                       	smpsAlterNote       $FB
00087120 01                         	dc.b	$01
00087121 ECF5                       	smpsPSGAlterVol     $F5
00087123 8E07                       	dc.b	nCs1, $07
00087125 EC0B                       	smpsPSGAlterVol     $0B
00087127 8004                       	dc.b	nRst, $04
00087129 ECF5                       	smpsPSGAlterVol     $F5
0008712B 8E06                       	dc.b	nCs1, $06
0008712D EC0B                       	smpsPSGAlterVol     $0B
0008712F 8007                       	dc.b	nRst, $07
00087131 E101                       	smpsAlterNote       $01
00087133 0101                       	dc.b	$01, $01
00087135 E1FE                       	smpsAlterNote       $FE
00087137 01                         	dc.b	$01
00087138 E1F9                       	smpsAlterNote       $F9
0008713A 01                         	dc.b	$01
0008713B E1FC                       	smpsAlterNote       $FC
0008713D ECF5                       	smpsPSGAlterVol     $F5
0008713F 8F06                       	dc.b	nD1, $06
00087141 EC04                       	smpsPSGAlterVol     $04
00087143 E701                       	dc.b	smpsNoAttack, $01
00087145 EC07                       	smpsPSGAlterVol     $07
00087147 8003                       	dc.b	nRst, $03
00087149 ECF5                       	smpsPSGAlterVol     $F5
0008714B 8F06                       	dc.b	nD1, $06
0008714D EC04                       	smpsPSGAlterVol     $04
0008714F E701                       	dc.b	smpsNoAttack, $01
00087151 EC07                       	smpsPSGAlterVol     $07
00087153 8006                       	dc.b	nRst, $06
00087155 E1FF                       	smpsAlterNote       $FF
00087157 01                         	dc.b	$01
00087158 E103                       	smpsAlterNote       $03
0008715A 01                         	dc.b	$01
0008715B E1FF                       	smpsAlterNote       $FF
0008715D 01                         	dc.b	$01
0008715E E1FB                       	smpsAlterNote       $FB
00087160 01                         	dc.b	$01
00087161 ECF5                       	smpsPSGAlterVol     $F5
00087163 8E06                       	dc.b	nCs1, $06
00087165 EC04                       	smpsPSGAlterVol     $04
00087167 E701                       	dc.b	smpsNoAttack, $01
00087169 EC07                       	smpsPSGAlterVol     $07
0008716B 8003                       	dc.b	nRst, $03
0008716D ECF5                       	smpsPSGAlterVol     $F5
0008716F 8E07                       	dc.b	nCs1, $07
00087171 E1FF                       	smpsAlterNote       $FF
00087173 9B06                       	dc.b	nD2, $06
00087175 EC04                       	smpsPSGAlterVol     $04
00087177 E701                       	dc.b	smpsNoAttack, $01
00087179 ECFC                       	smpsPSGAlterVol     $FC
0008717B 9B03                       	dc.b	nD2, $03
0008717D EC04                       	smpsPSGAlterVol     $04
0008717F E701                       	dc.b	smpsNoAttack, $01
00087181 ECFC                       	smpsPSGAlterVol     $FC
00087183 9B02                       	dc.b	nD2, $02
00087185 EC04                       	smpsPSGAlterVol     $04
00087187 E701                       	dc.b	smpsNoAttack, $01
00087189 ECFC                       	smpsPSGAlterVol     $FC
0008718B E1FE                       	smpsAlterNote       $FE
0008718D 9A03                       	dc.b	nCs2, $03
0008718F EC0B                       	smpsPSGAlterVol     $0B
00087191 800A                       	dc.b	nRst, $0A
00087193 E102                       	smpsAlterNote       $02
00087195 01                         	dc.b	$01
00087196 E10A                       	smpsAlterNote       $0A
00087198 01                         	dc.b	$01
00087199 E102                       	smpsAlterNote       $02
0008719B 01                         	dc.b	$01
0008719C E1F7                       	smpsAlterNote       $F7
0008719E 01                         	dc.b	$01
0008719F E10A                       	smpsAlterNote       $0A
000871A1 01                         	dc.b	$01
000871A2 E1FC                       	smpsAlterNote       $FC
000871A4 01                         	dc.b	$01
000871A5 E108                       	smpsAlterNote       $08
000871A7 0101                       	dc.b	$01, $01
000871A9 E102                       	smpsAlterNote       $02
000871AB 01                         	dc.b	$01
000871AC E1F7                       	smpsAlterNote       $F7
000871AE 0101                       	dc.b	$01, $01
000871B0 E1FC                       	smpsAlterNote       $FC
000871B2 ECF5                       	smpsPSGAlterVol     $F5
000871B4 8F06                       	dc.b	nD1, $06
000871B6 EC04                       	smpsPSGAlterVol     $04
000871B8 E701                       	dc.b	smpsNoAttack, $01
000871BA EC07                       	smpsPSGAlterVol     $07
000871BC 8003                       	dc.b	nRst, $03
000871BE ECF5                       	smpsPSGAlterVol     $F5
000871C0 8F06                       	dc.b	nD1, $06
000871C2 EC04                       	smpsPSGAlterVol     $04
000871C4 E701                       	dc.b	smpsNoAttack, $01
000871C6 EC07                       	smpsPSGAlterVol     $07
000871C8 8006                       	dc.b	nRst, $06
000871CA E1FF                       	smpsAlterNote       $FF
000871CC 01                         	dc.b	$01
000871CD E102                       	smpsAlterNote       $02
000871CF 01                         	dc.b	$01
000871D0 E101                       	smpsAlterNote       $01
000871D2 01                         	dc.b	$01
000871D3 E1FC                       	smpsAlterNote       $FC
000871D5 01                         	dc.b	$01
000871D6 ECF5                       	smpsPSGAlterVol     $F5
000871D8 9007                       	dc.b	nEb1, $07
000871DA EC0B                       	smpsPSGAlterVol     $0B
000871DC 8004                       	dc.b	nRst, $04
000871DE ECF5                       	smpsPSGAlterVol     $F5
000871E0 9006                       	dc.b	nEb1, $06
000871E2 EC0B                       	smpsPSGAlterVol     $0B
000871E4 8007                       	dc.b	nRst, $07
000871E6 E103                       	smpsAlterNote       $03
000871E8 0101                       	dc.b	$01, $01
000871EA E1FF                       	smpsAlterNote       $FF
000871EC 01                         	dc.b	$01
000871ED E1F9                       	smpsAlterNote       $F9
000871EF 01                         	dc.b	$01
000871F0 E1FC                       	smpsAlterNote       $FC
000871F2 ECF5                       	smpsPSGAlterVol     $F5
000871F4 8F06                       	dc.b	nD1, $06
000871F6 EC04                       	smpsPSGAlterVol     $04
000871F8 E701                       	dc.b	smpsNoAttack, $01
000871FA EC07                       	smpsPSGAlterVol     $07
000871FC 8003                       	dc.b	nRst, $03
000871FE ECF5                       	smpsPSGAlterVol     $F5
00087200 8F06                       	dc.b	nD1, $06
00087202 EC04                       	smpsPSGAlterVol     $04
00087204 E701                       	dc.b	smpsNoAttack, $01
00087206 EC07                       	smpsPSGAlterVol     $07
00087208 8006                       	dc.b	nRst, $06
0008720A E1FF                       	smpsAlterNote       $FF
0008720C 01                         	dc.b	$01
0008720D E103                       	smpsAlterNote       $03
0008720F 01                         	dc.b	$01
00087210 E1FF                       	smpsAlterNote       $FF
00087212 01                         	dc.b	$01
00087213 E1F9                       	smpsAlterNote       $F9
00087215 01                         	dc.b	$01
00087216 E1FC                       	smpsAlterNote       $FC
00087218 ECF5                       	smpsPSGAlterVol     $F5
0008721A 8F06                       	dc.b	nD1, $06
0008721C EC04                       	smpsPSGAlterVol     $04
0008721E E701                       	dc.b	smpsNoAttack, $01
00087220 EC07                       	smpsPSGAlterVol     $07
00087222 8003                       	dc.b	nRst, $03
00087224 ECF5                       	smpsPSGAlterVol     $F5
00087226 8F07                       	dc.b	nD1, $07
00087228 EC0B                       	smpsPSGAlterVol     $0B
0008722A 8006                       	dc.b	nRst, $06
0008722C E1FF                       	smpsAlterNote       $FF
0008722E 01                         	dc.b	$01
0008722F E102                       	smpsAlterNote       $02
00087231 0101                       	dc.b	$01, $01
00087233 E1FC                       	smpsAlterNote       $FC
00087235 01                         	dc.b	$01
00087236 ECF5                       	smpsPSGAlterVol     $F5
00087238 8F07                       	dc.b	nD1, $07
0008723A EC0B                       	smpsPSGAlterVol     $0B
0008723C 8004                       	dc.b	nRst, $04
0008723E ECF5                       	smpsPSGAlterVol     $F5
00087240 8F06                       	dc.b	nD1, $06
00087242 EC04                       	smpsPSGAlterVol     $04
00087244 E701                       	dc.b	smpsNoAttack, $01
00087246 EC07                       	smpsPSGAlterVol     $07
00087248 8006                       	dc.b	nRst, $06
0008724A E101                       	smpsAlterNote       $01
0008724C 01                         	dc.b	$01
0008724D E102                       	smpsAlterNote       $02
0008724F 01                         	dc.b	$01
00087250 E1FF                       	smpsAlterNote       $FF
00087252 01                         	dc.b	$01
00087253 E1F9                       	smpsAlterNote       $F9
00087255 01                         	dc.b	$01
00087256 E1FC                       	smpsAlterNote       $FC
00087258 ECF5                       	smpsPSGAlterVol     $F5
0008725A 9006                       	dc.b	nEb1, $06
0008725C EC04                       	smpsPSGAlterVol     $04
0008725E E701                       	dc.b	smpsNoAttack, $01
00087260 EC07                       	smpsPSGAlterVol     $07
00087262 8003                       	dc.b	nRst, $03
00087264 ECF5                       	smpsPSGAlterVol     $F5
00087266 9006                       	dc.b	nEb1, $06
00087268 EC04                       	smpsPSGAlterVol     $04
0008726A E701                       	dc.b	smpsNoAttack, $01
0008726C EC07                       	smpsPSGAlterVol     $07
0008726E 8006                       	dc.b	nRst, $06
00087270 E100                       	smpsAlterNote       $00
00087272 01                         	dc.b	$01
00087273 E102                       	smpsAlterNote       $02
00087275 01                         	dc.b	$01
00087276 E100                       	smpsAlterNote       $00
00087278 01                         	dc.b	$01
00087279 E1FF                       	smpsAlterNote       $FF
0008727B 01                         	dc.b	$01
0008727C ECF5                       	smpsPSGAlterVol     $F5
0008727E 9B06                       	dc.b	nD2, $06
00087280 EC04                       	smpsPSGAlterVol     $04
00087282 E701                       	dc.b	smpsNoAttack, $01
00087284 EC07                       	smpsPSGAlterVol     $07
00087286 8003                       	dc.b	nRst, $03
00087288 ECF5                       	smpsPSGAlterVol     $F5
0008728A 9B07                       	dc.b	nD2, $07
0008728C EC0B                       	smpsPSGAlterVol     $0B
0008728E 8007                       	dc.b	nRst, $07
00087290 E105                       	smpsAlterNote       $05
00087292 0101                       	dc.b	$01, $01
00087294 E1FF                       	smpsAlterNote       $FF
00087296 01                         	dc.b	$01
00087297 E1FC                       	smpsAlterNote       $FC
00087299 01                         	dc.b	$01
0008729A E1FF                       	smpsAlterNote       $FF
0008729C ECF5                       	smpsPSGAlterVol     $F5
0008729E 9B06                       	dc.b	nD2, $06
000872A0 EC0B                       	smpsPSGAlterVol     $0B
000872A2 8004                       	dc.b	nRst, $04
000872A4 ECF5                       	smpsPSGAlterVol     $F5
000872A6 9B06                       	dc.b	nD2, $06
000872A8 EC04                       	smpsPSGAlterVol     $04
000872AA E701                       	dc.b	smpsNoAttack, $01
000872AC EC07                       	smpsPSGAlterVol     $07
000872AE 8006                       	dc.b	nRst, $06
000872B0 E102                       	smpsAlterNote       $02
000872B2 01                         	dc.b	$01
000872B3 E106                       	smpsAlterNote       $06
000872B5 01                         	dc.b	$01
000872B6 E102                       	smpsAlterNote       $02
000872B8 01                         	dc.b	$01
000872B9 E1FC                       	smpsAlterNote       $FC
000872BB 01                         	dc.b	$01
000872BC E1FF                       	smpsAlterNote       $FF
000872BE ECF5                       	smpsPSGAlterVol     $F5
000872C0 9B06                       	dc.b	nD2, $06
000872C2 EC04                       	smpsPSGAlterVol     $04
000872C4 E701                       	dc.b	smpsNoAttack, $01
000872C6 EC07                       	smpsPSGAlterVol     $07
000872C8 8003                       	dc.b	nRst, $03
000872CA ECF5                       	smpsPSGAlterVol     $F5
000872CC 9B07                       	dc.b	nD2, $07
000872CE EC0B                       	smpsPSGAlterVol     $0B
000872D0 8006                       	dc.b	nRst, $06
000872D2 E102                       	smpsAlterNote       $02
000872D4 01                         	dc.b	$01
000872D5 E105                       	smpsAlterNote       $05
000872D7 0101                       	dc.b	$01, $01
000872D9 E1FF                       	smpsAlterNote       $FF
000872DB 01                         	dc.b	$01
000872DC ECF5                       	smpsPSGAlterVol     $F5
000872DE 9B07                       	dc.b	nD2, $07
000872E0 EC0B                       	smpsPSGAlterVol     $0B
000872E2 8004                       	dc.b	nRst, $04
000872E4 ECF5                       	smpsPSGAlterVol     $F5
000872E6 9B06                       	dc.b	nD2, $06
000872E8 EC04                       	smpsPSGAlterVol     $04
000872EA E701                       	dc.b	smpsNoAttack, $01
000872EC EC07                       	smpsPSGAlterVol     $07
000872EE 8006                       	dc.b	nRst, $06
000872F0 E105                       	smpsAlterNote       $05
000872F2 0101                       	dc.b	$01, $01
000872F4 E102                       	smpsAlterNote       $02
000872F6 01                         	dc.b	$01
000872F7 E1FC                       	smpsAlterNote       $FC
000872F9 01                         	dc.b	$01
000872FA E1FF                       	smpsAlterNote       $FF
000872FC ECF5                       	smpsPSGAlterVol     $F5
000872FE 9B06                       	dc.b	nD2, $06
00087300 EC04                       	smpsPSGAlterVol     $04
00087302 E701                       	dc.b	smpsNoAttack, $01
00087304 EC07                       	smpsPSGAlterVol     $07
00087306 8003                       	dc.b	nRst, $03
00087308 ECF5                       	smpsPSGAlterVol     $F5
0008730A 9B06                       	dc.b	nD2, $06
0008730C EC04                       	smpsPSGAlterVol     $04
0008730E E701                       	dc.b	smpsNoAttack, $01
00087310 EC07                       	smpsPSGAlterVol     $07
00087312 8006                       	dc.b	nRst, $06
00087314 E102                       	smpsAlterNote       $02
00087316 01                         	dc.b	$01
00087317 E106                       	smpsAlterNote       $06
00087319 01                         	dc.b	$01
0008731A E102                       	smpsAlterNote       $02
0008731C 01                         	dc.b	$01
0008731D E1FF                       	smpsAlterNote       $FF
0008731F 01                         	dc.b	$01
00087320 ECF5                       	smpsPSGAlterVol     $F5
00087322 9B06                       	dc.b	nD2, $06
00087324 EC04                       	smpsPSGAlterVol     $04
00087326 E701                       	dc.b	smpsNoAttack, $01
00087328 EC07                       	smpsPSGAlterVol     $07
0008732A 8003                       	dc.b	nRst, $03
0008732C ECF5                       	smpsPSGAlterVol     $F5
0008732E 9B07                       	dc.b	nD2, $07
00087330 EC0B                       	smpsPSGAlterVol     $0B
00087332 8007                       	dc.b	nRst, $07
00087334 E107                       	smpsAlterNote       $07
00087336 0101                       	dc.b	$01, $01
00087338 E1FE                       	smpsAlterNote       $FE
0008733A 01                         	dc.b	$01
0008733B E1FA                       	smpsAlterNote       $FA
0008733D 0101                       	dc.b	$01, $01
0008733F E103                       	smpsAlterNote       $03
00087341 01                         	dc.b	$01
00087342 E109                       	smpsAlterNote       $09
00087344 01                         	dc.b	$01
00087345 E107                       	smpsAlterNote       $07
00087347 01                         	dc.b	$01
00087348 E1FE                       	smpsAlterNote       $FE
0008734A 01                         	dc.b	$01
0008734B E108                       	smpsAlterNote       $08
0008734D 01                         	dc.b	$01
0008734E E1FD                       	smpsAlterNote       $FD
00087350 ECF5                       	smpsPSGAlterVol     $F5
00087352 940E                       	dc.b	nG1, $0E
00087354 E103                       	smpsAlterNote       $03
00087356 EC0B                       	smpsPSGAlterVol     $0B
00087358 8001 01                    	dc.b	nRst, $01, $01
0008735B E1FD                       	smpsAlterNote       $FD
0008735D 01                         	dc.b	$01
0008735E E1FB                       	smpsAlterNote       $FB
00087360 0101                       	dc.b	$01, $01
00087362 E100                       	smpsAlterNote       $00
00087364 01                         	dc.b	$01
00087365 E103                       	smpsAlterNote       $03
00087367 01                         	dc.b	$01
00087368 E100                       	smpsAlterNote       $00
0008736A 01                         	dc.b	$01
0008736B E1FD                       	smpsAlterNote       $FD
0008736D 01                         	dc.b	$01
0008736E E1FA                       	smpsAlterNote       $FA
00087370 01                         	dc.b	$01
00087371 E1FD                       	smpsAlterNote       $FD
00087373 01                         	dc.b	$01
00087374 E103                       	smpsAlterNote       $03
00087376 0101                       	dc.b	$01, $01
00087378 E100                       	smpsAlterNote       $00
0008737A 01                         	dc.b	$01
0008737B E1FE                       	smpsAlterNote       $FE
0008737D ECF5                       	smpsPSGAlterVol     $F5
0008737F 960D                       	dc.b	nA1, $0D
00087381 E104                       	smpsAlterNote       $04
00087383 EC0B                       	smpsPSGAlterVol     $0B
00087385 8001 01                    	dc.b	nRst, $01, $01
00087388 E101                       	smpsAlterNote       $01
0008738A 01                         	dc.b	$01
0008738B E1FB                       	smpsAlterNote       $FB
0008738D 0101                       	dc.b	$01, $01
0008738F E1FE                       	smpsAlterNote       $FE
00087391 01                         	dc.b	$01
00087392 E104                       	smpsAlterNote       $04
00087394 0101                       	dc.b	$01, $01
00087396 E1FE                       	smpsAlterNote       $FE
00087398 01                         	dc.b	$01
00087399 E1FB                       	smpsAlterNote       $FB
0008739B 0101                       	dc.b	$01, $01
0008739D E101                       	smpsAlterNote       $01
0008739F 01                         	dc.b	$01
000873A0 E104                       	smpsAlterNote       $04
000873A2 0101                       	dc.b	$01, $01
000873A4 E1FE                       	smpsAlterNote       $FE
000873A6 ECF5                       	smpsPSGAlterVol     $F5
000873A8 970D                       	dc.b	nBb1, $0D
000873AA E101                       	smpsAlterNote       $01
000873AC EC04                       	smpsPSGAlterVol     $04
000873AE E701                       	dc.b	smpsNoAttack, $01
000873B0 EC07                       	smpsPSGAlterVol     $07
000873B2 E104                       	smpsAlterNote       $04
000873B4 8001                       	dc.b	nRst, $01
000873B6 E103                       	smpsAlterNote       $03
000873B8 01                         	dc.b	$01
000873B9 E1FE                       	smpsAlterNote       $FE
000873BB 01                         	dc.b	$01
000873BC E1FA                       	smpsAlterNote       $FA
000873BE 01                         	dc.b	$01
000873BF E1FE                       	smpsAlterNote       $FE
000873C1 01                         	dc.b	$01
000873C2 E101                       	smpsAlterNote       $01
000873C4 01                         	dc.b	$01
000873C5 E104                       	smpsAlterNote       $04
000873C7 01                         	dc.b	$01
000873C8 E101                       	smpsAlterNote       $01
000873CA 01                         	dc.b	$01
000873CB E1FB                       	smpsAlterNote       $FB
000873CD 01                         	dc.b	$01
000873CE E1FA                       	smpsAlterNote       $FA
000873D0 01                         	dc.b	$01
000873D1 E1FE                       	smpsAlterNote       $FE
000873D3 01                         	dc.b	$01
000873D4 E103                       	smpsAlterNote       $03
000873D6 0101                       	dc.b	$01, $01
000873D8 E101                       	smpsAlterNote       $01
000873DA 01                         	dc.b	$01
000873DB E1FE                       	smpsAlterNote       $FE
000873DD ECF5                       	smpsPSGAlterVol     $F5
000873DF 990D                       	dc.b	nC2, $0D
000873E1 E104                       	smpsAlterNote       $04
000873E3 EC0B                       	smpsPSGAlterVol     $0B
000873E5 8001 01                    	dc.b	nRst, $01, $01
000873E8 E102                       	smpsAlterNote       $02
000873EA 01                         	dc.b	$01
000873EB E1FC                       	smpsAlterNote       $FC
000873ED 0101                       	dc.b	$01, $01
000873EF E102                       	smpsAlterNote       $02
000873F1 01                         	dc.b	$01
000873F2 E104                       	smpsAlterNote       $04
000873F4 01                         	dc.b	$01
000873F5 E1FF                       	smpsAlterNote       $FF
000873F7 ECF5                       	smpsPSGAlterVol     $F5
000873F9 9B06                       	dc.b	nD2, $06
000873FB EC04                       	smpsPSGAlterVol     $04
000873FD E701                       	dc.b	smpsNoAttack, $01
000873FF EC07                       	smpsPSGAlterVol     $07
00087401 8003                       	dc.b	nRst, $03
00087403 ECF5                       	smpsPSGAlterVol     $F5
00087405 9B07                       	dc.b	nD2, $07
00087407 EC0B                       	smpsPSGAlterVol     $0B
00087409 8006                       	dc.b	nRst, $06
0008740B E101                       	smpsAlterNote       $01
0008740D 01                         	dc.b	$01
0008740E E104                       	smpsAlterNote       $04
00087410 0101                       	dc.b	$01, $01
00087412 E1FE                       	smpsAlterNote       $FE
00087414 01                         	dc.b	$01
00087415 E1FC                       	smpsAlterNote       $FC
00087417 01                         	dc.b	$01
00087418 E1FE                       	smpsAlterNote       $FE
0008741A ECF5                       	smpsPSGAlterVol     $F5
0008741C 9C06                       	dc.b	nEb2, $06
0008741E EC0B                       	smpsPSGAlterVol     $0B
00087420 8004                       	dc.b	nRst, $04
00087422 ECF5                       	smpsPSGAlterVol     $F5
00087424 9C06                       	dc.b	nEb2, $06
00087426 EC04                       	smpsPSGAlterVol     $04
00087428 E701                       	dc.b	smpsNoAttack, $01
0008742A EC07                       	smpsPSGAlterVol     $07
0008742C 8006                       	dc.b	nRst, $06
0008742E E105                       	smpsAlterNote       $05
00087430 01                         	dc.b	$01
00087431 E106                       	smpsAlterNote       $06
00087433 01                         	dc.b	$01
00087434 E102                       	smpsAlterNote       $02
00087436 01                         	dc.b	$01
00087437 E1FB                       	smpsAlterNote       $FB
00087439 01                         	dc.b	$01
0008743A E1FF                       	smpsAlterNote       $FF
0008743C ECF5                       	smpsPSGAlterVol     $F5
0008743E 9B06                       	dc.b	nD2, $06
00087440 EC04                       	smpsPSGAlterVol     $04
00087442 E701                       	dc.b	smpsNoAttack, $01
00087444 EC07                       	smpsPSGAlterVol     $07
00087446 8003                       	dc.b	nRst, $03
00087448 ECF5                       	smpsPSGAlterVol     $F5
0008744A 9B06                       	dc.b	nD2, $06
0008744C EC04                       	smpsPSGAlterVol     $04
0008744E E701                       	dc.b	smpsNoAttack, $01
00087450 EC07                       	smpsPSGAlterVol     $07
00087452 8006                       	dc.b	nRst, $06
00087454 E101                       	smpsAlterNote       $01
00087456 01                         	dc.b	$01
00087457 E105                       	smpsAlterNote       $05
00087459 01                         	dc.b	$01
0008745A E104                       	smpsAlterNote       $04
0008745C 01                         	dc.b	$01
0008745D E1FE                       	smpsAlterNote       $FE
0008745F 01                         	dc.b	$01
00087460 ECF5                       	smpsPSGAlterVol     $F5
00087462 9C07                       	dc.b	nEb2, $07
00087464 EC0B                       	smpsPSGAlterVol     $0B
00087466 8004                       	dc.b	nRst, $04
00087468 ECF5                       	smpsPSGAlterVol     $F5
0008746A 9C06                       	dc.b	nEb2, $06
0008746C EC0B                       	smpsPSGAlterVol     $0B
0008746E 8007                       	dc.b	nRst, $07
00087470 E105                       	smpsAlterNote       $05
00087472 0101                       	dc.b	$01, $01
00087474 E102                       	smpsAlterNote       $02
00087476 01                         	dc.b	$01
00087477 E1FB                       	smpsAlterNote       $FB
00087479 01                         	dc.b	$01
0008747A E1FF                       	smpsAlterNote       $FF
0008747C ECF5                       	smpsPSGAlterVol     $F5
0008747E 9B06                       	dc.b	nD2, $06
00087480 EC04                       	smpsPSGAlterVol     $04
00087482 E701                       	dc.b	smpsNoAttack, $01
00087484 EC07                       	smpsPSGAlterVol     $07
00087486 8003                       	dc.b	nRst, $03
00087488 ECF5                       	smpsPSGAlterVol     $F5
0008748A 9B06                       	dc.b	nD2, $06
0008748C EC04                       	smpsPSGAlterVol     $04
0008748E E701                       	dc.b	smpsNoAttack, $01
00087490 EC07                       	smpsPSGAlterVol     $07
00087492 8006                       	dc.b	nRst, $06
00087494 E101                       	smpsAlterNote       $01
00087496 01                         	dc.b	$01
00087497 E105                       	smpsAlterNote       $05
00087499 01                         	dc.b	$01
0008749A E101                       	smpsAlterNote       $01
0008749C 01                         	dc.b	$01
0008749D E1FC                       	smpsAlterNote       $FC
0008749F 01                         	dc.b	$01
000874A0 E1FE                       	smpsAlterNote       $FE
000874A2 ECF5                       	smpsPSGAlterVol     $F5
000874A4 9C06                       	dc.b	nEb2, $06
000874A6 EC04                       	smpsPSGAlterVol     $04
000874A8 E701                       	dc.b	smpsNoAttack, $01
000874AA EC07                       	smpsPSGAlterVol     $07
000874AC 8003                       	dc.b	nRst, $03
000874AE ECF5                       	smpsPSGAlterVol     $F5
000874B0 9C07                       	dc.b	nEb2, $07
000874B2 EC0B                       	smpsPSGAlterVol     $0B
000874B4 8006                       	dc.b	nRst, $06
000874B6 E102                       	smpsAlterNote       $02
000874B8 01                         	dc.b	$01
000874B9 E105                       	smpsAlterNote       $05
000874BB 0101                       	dc.b	$01, $01
000874BD E1FF                       	smpsAlterNote       $FF
000874BF 01                         	dc.b	$01
000874C0 ECF5                       	smpsPSGAlterVol     $F5
000874C2 9B07                       	dc.b	nD2, $07
000874C4 EC0B                       	smpsPSGAlterVol     $0B
000874C6 8004                       	dc.b	nRst, $04
000874C8 ECF5                       	smpsPSGAlterVol     $F5
000874CA 9B06                       	dc.b	nD2, $06
000874CC EC04                       	smpsPSGAlterVol     $04
000874CE E701                       	dc.b	smpsNoAttack, $01
000874D0 EC07                       	smpsPSGAlterVol     $07
000874D2 8002                       	dc.b	nRst, $02
000874D4 E1FC                       	smpsAlterNote       $FC
000874D6 ECF5                       	smpsPSGAlterVol     $F5
000874D8 9006                       	dc.b	nEb1, $06
000874DA EC04                       	smpsPSGAlterVol     $04
000874DC E701                       	dc.b	smpsNoAttack, $01
000874DE ECFC                       	smpsPSGAlterVol     $FC
000874E0 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
000874E4 EC04                       	smpsPSGAlterVol     $04
000874E6 E701                       	dc.b	smpsNoAttack, $01
000874E8 E1FD                       	smpsAlterNote       $FD
000874EA ECFC                       	smpsPSGAlterVol     $FC
000874EC 9402                       	dc.b	nG1, $02
000874EE EC04                       	smpsPSGAlterVol     $04
000874F0 E701                       	dc.b	smpsNoAttack, $01
000874F2 E1FE                       	smpsAlterNote       $FE
000874F4 ECFC                       	smpsPSGAlterVol     $FC
000874F6 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000874FA EC04                       	smpsPSGAlterVol     $04
000874FC E701                       	dc.b	smpsNoAttack, $01
000874FE EC07                       	smpsPSGAlterVol     $07
00087500 8008                       	dc.b	nRst, $08
00087502 F6F4 F3                    	smpsJump            music84_Jump06
00087505                            
00087505                            ; PSG3 Data
00087505                            music84_PSG3:
00087505 F500                       	smpsPSGvoice        $00
00087507 E1FF                       	smpsAlterNote       $FF
00087509 EC0F                       	smpsPSGAlterVol     $0F
0008750B 803A                       	dc.b	nRst, $3A
0008750D                            
0008750D                            music84_Jump05:
0008750D 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00087519 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00087523 F6FF E8                    	smpsJump            music84_Jump05
00087526                            
00087526                            ; DAC Data
00087526                            music84_DAC:
00087526 E0C0                       	smpsPan             panCenter, $00
00087528 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00087534 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00087540 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0008754C 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00087558 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00087564 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00087570 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008757C 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00087588 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00087594 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
000875A0 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000875AC 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
000875B8 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
000875C4 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
000875D0 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
000875DC 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
000875E8 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
000875F4 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00087600 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0008760C 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00087618 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00087624 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00087630 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0008763C 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00087648 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00087654 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00087660 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0008766C 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00087678 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00087684 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00087690 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008769C 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
000876A8 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
000876B4 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
000876C0 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
000876CC 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000876D8 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
000876E4 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
000876F0 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000876FC 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
00087708 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
00087714 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00087720 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008772C 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00087738 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00087744 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00087750 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008775C 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00087768 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
00087774 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00087780 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0008778C 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00087798 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
000877A4 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
000877B0 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000877BC 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
000877C8 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
000877D4 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000877E0 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000877EC 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000877F8 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
00087804 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00087810 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0008781C 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
00087828 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
00087834 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00087840 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0008784C 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00087858 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
00087864 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00087870 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0008787C 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00087888 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
00087894 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
000878A0 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
000878AC E0C0                       	smpsPan             panCenter, $00
000878AE F2                         	smpsStop
000878AF                            
000878AF                            music84_Voices:
000878AF                            ;	Voice $00
000878AF                            ;	$3D
000878AF                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
000878AF                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
000878AF                            	smpsVcAlgorithm     $05
000878AF                            	smpsVcFeedback      $07
000878AF                            	smpsVcUnusedBits    $00
000878AF                            	smpsVcDetune        $05, $04, $03, $04
000878AF                            	smpsVcCoarseFreq    $01, $01, $01, $01
000878AF                            	smpsVcRateScale     $00, $00, $00, $00
000878AF                            	smpsVcAttackRate    $11, $11, $11, $11
000878AF                            	smpsVcAmpMod        $00, $00, $00, $00
000878AF                            	smpsVcDecayRate1    $00, $00, $00, $0A
000878AF                            	smpsVcDecayRate2    $00, $00, $00, $0B
000878AF                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000878AF                            	smpsVcReleaseRate   $08, $08, $08, $07
000878AF 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
000878C8                            
000878C8                            ;	Voice $01
000878C8                            ;	$04
000878C8                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
000878C8                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
000878C8                            	smpsVcAlgorithm     $04
000878C8                            	smpsVcFeedback      $00
000878C8                            	smpsVcUnusedBits    $00
000878C8                            	smpsVcDetune        $04, $03, $04, $05
000878C8                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
000878C8                            	smpsVcRateScale     $00, $01, $00, $01
000878C8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000878C8                            	smpsVcAmpMod        $00, $00, $00, $00
000878C8                            	smpsVcDecayRate1    $0E, $00, $0E, $00
000878C8                            	smpsVcDecayRate2    $05, $00, $05, $00
000878C8                            	smpsVcDecayLevel    $08, $0E, $08, $0E
000878C8                            	smpsVcReleaseRate   $06, $06, $06, $06
000878C8 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
000878E1                            
000878E1                            ;	Voice $02
000878E1                            ;	$30
000878E1                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
000878E1                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
000878E1                            	smpsVcAlgorithm     $00
000878E1                            	smpsVcFeedback      $06
000878E1                            	smpsVcUnusedBits    $00
000878E1                            	smpsVcDetune        $04, $02, $00, $06
000878E1                            	smpsVcCoarseFreq    $01, $01, $03, $0C
000878E1                            	smpsVcRateScale     $00, $00, $00, $00
000878E1                            	smpsVcAttackRate    $1F, $1F, $1F, $14
000878E1                            	smpsVcAmpMod        $00, $00, $00, $00
000878E1                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
000878E1                            	smpsVcDecayRate2    $01, $01, $01, $01
000878E1                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
000878E1                            	smpsVcReleaseRate   $09, $0B, $08, $0F
000878E1 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
000878FA                            
000878FA                            ;	Voice $03
000878FA                            ;	$3A
000878FA                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
000878FA                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
000878FA                            	smpsVcAlgorithm     $02
000878FA                            	smpsVcFeedback      $07
000878FA                            	smpsVcUnusedBits    $00
000878FA                            	smpsVcDetune        $04, $06, $02, $00
000878FA                            	smpsVcCoarseFreq    $01, $01, $01, $01
000878FA                            	smpsVcRateScale     $00, $00, $00, $00
000878FA                            	smpsVcAttackRate    $18, $19, $14, $14
000878FA                            	smpsVcAmpMod        $00, $00, $00, $00
000878FA                            	smpsVcDecayRate1    $09, $0D, $09, $09
000878FA                            	smpsVcDecayRate2    $00, $00, $00, $00
000878FA                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
000878FA                            	smpsVcReleaseRate   $08, $0F, $0F, $07
000878FA 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
00087913                            
00087913                            ;	Voice $04
00087913                            ;	$3C
00087913                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
00087913                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
00087913                            	smpsVcAlgorithm     $04
00087913                            	smpsVcFeedback      $07
00087913                            	smpsVcUnusedBits    $00
00087913                            	smpsVcDetune        $07, $00, $00, $03
00087913                            	smpsVcCoarseFreq    $00, $00, $02, $0A
00087913                            	smpsVcRateScale     $00, $00, $00, $00
00087913                            	smpsVcAttackRate    $10, $1F, $10, $1F
00087913                            	smpsVcAmpMod        $00, $00, $00, $00
00087913                            	smpsVcDecayRate1    $00, $00, $00, $00
00087913                            	smpsVcDecayRate2    $00, $00, $00, $00
00087913                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00087913                            	smpsVcReleaseRate   $0A, $02, $0A, $02
00087913 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0008792C                            
0008792C                            ;	Voice $05
0008792C                            ;	$38
0008792C                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0008792C                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0008792C                            	smpsVcAlgorithm     $00
0008792C                            	smpsVcFeedback      $07
0008792C                            	smpsVcUnusedBits    $00
0008792C                            	smpsVcDetune        $04, $06, $02, $00
0008792C                            	smpsVcCoarseFreq    $01, $01, $01, $00
0008792C                            	smpsVcRateScale     $00, $00, $00, $00
0008792C                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0008792C                            	smpsVcAmpMod        $00, $00, $00, $00
0008792C                            	smpsVcDecayRate1    $00, $03, $00, $17
0008792C                            	smpsVcDecayRate2    $00, $08, $08, $0B
0008792C                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0008792C                            	smpsVcReleaseRate   $08, $05, $05, $05
0008792C 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
00087945                            
00087945                            
00087946 00                         		even
00087946                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0008BB56                            		even
0008BB56                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
0008F6AE 00                         		even
0008F6AE                            Music87:	include	sound\music87.asm; Invincibility
0008F6AE                            triple_Header:
0008F6AE =00000001                  smpsHeaderStartSong = 1
0008F6AE 0000                       	smpsHeaderVoice     triple_Voices
0008F6B0 0501                       	smpsHeaderChan      $05, $01
0008F6B2 0200                       	smpsHeaderTempo     $02, $00
0008F6B4                            
0008F6B8 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
0008F6BC 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
0008F6C0 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
0008F6C4 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
0008F6C8 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
0008F6CE                            
0008F6CE                            ; DAC Data
0008F6CE                            triple_DAC:
0008F6CE E0C0                       	smpsPan             panCenter, $00
0008F6D0 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
0008F6D6                            
0008F6D6                            triple_Loop01:
0008F6D6 8282 82                    	dc.b	dSnare, dSnare, dSnare
0008F6D9                            
0008F6D9                            triple_Loop00:
0008F6D9 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
0008F6E5 06                         	dc.b	$06
0008F6E6 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
0008F6EB 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
0008F6F7 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
0008F6FE F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
0008F703 0303 1B                    	dc.b	$03, $03, $1B
0008F706 E0C0                       	smpsPan             panCenter, $00
0008F708 F6FF C4                    	smpsJump triple_DAC
0008F70B                            
0008F70B                            ; FM1 Data
0008F70B                            triple_FM1:
0008F70B E0C0                       	smpsPan             panCenter, $00
0008F70F 8018                       	dc.b	nRst, $18
0008F711                            
0008F711                            triple_Loop0B:
0008F711 AC06 B8                    	dc.b	nG3, $06, nG4
0008F714 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
0008F719                            
0008F719                            triple_Loop0C:
0008F719 A7B3                       	dc.b	nD3, nD4
0008F71B F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
0008F720                            
0008F720                            triple_Loop0D:
0008F720 A9B5                       	dc.b	nE3, nE4
0008F722 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
0008F727 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
0008F72F F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
0008F734 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
0008F740 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
0008F74C AD                         	dc.b	nAb3
0008F74D F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
0008F752 8018                       	dc.b	nRst, $18
0008F754 E0C0                       	smpsPan             panCenter, $00
0008F758 F6FF B1                    	smpsJump triple_FM1
0008F75B                            
0008F75B                            ; FM2 Data
0008F75B                            triple_FM2:
0008F75B E0C0                       	smpsPan             panCenter, $00
0008F75F 8018                       	dc.b	nRst, $18
0008F761                            
0008F761                            triple_Loop07:
0008F761 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0008F76D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0008F779 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
0008F77E 8003                       	dc.b	nRst, $03
0008F780                            
0008F780                            triple_Loop08:
0008F780 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0008F786 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
0008F78B B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
0008F791                            
0008F791                            triple_Loop09:
0008F791 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0008F79D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0008F7A9 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
0008F7AE 8003                       	dc.b	nRst, $03
0008F7B0                            
0008F7B0                            triple_Loop0A:
0008F7B0 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0008F7B6 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
0008F7BB B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
0008F7C1 E0C0                       	smpsPan             panCenter, $00
0008F7C5 F6FF 94                    	smpsJump triple_FM2
0008F7C8                            
0008F7C8                            ; FM3 Data
0008F7C8                            triple_FM3:
0008F7C8 E0C0                       	smpsPan             panCenter, $00
0008F7CC 8018                       	dc.b	nRst, $18
0008F7CE                            
0008F7CE                            triple_Loop06:
0008F7CE B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
0008F7D5 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
0008F7DA 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
0008F7E6 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
0008F7F2 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
0008F7F5 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
0008F7FA 8018                       	dc.b	nRst, $18
0008F7FC E0C0                       	smpsPan             panCenter, $00
0008F800 F6FF C6                    	smpsJump triple_FM3
0008F803                            
0008F803                            ; FM4 Data
0008F803                            triple_FM4:
0008F803 E103                       	smpsAlterNote       $03
0008F807 E0C0                       	smpsPan             panCenter, $00
0008F809 8018                       	dc.b	nRst, $18
0008F80B                            
0008F80B                            triple_Loop02:
0008F80B C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0008F817 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0008F823 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
0008F828 8003                       	dc.b	nRst, $03
0008F82A                            
0008F82A                            triple_Loop03:
0008F82A B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0008F830 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
0008F835 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
0008F83B                            
0008F83B                            triple_Loop04:
0008F83B C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0008F847 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0008F853 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
0008F858 8003                       	dc.b	nRst, $03
0008F85A                            
0008F85A                            triple_Loop05:
0008F85A B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0008F860 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
0008F865 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
0008F86B E0C0                       	smpsPan             panCenter, $00
0008F86D F6FF 94                    	smpsJump triple_FM4
0008F870                            
0008F870                            ; PSG1 Data
0008F870                            triple_PSG1:
0008F870 8018                       	dc.b	nRst, $18
0008F872                            
0008F872                            triple_Loop0E:
0008F872 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0008F87E 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0008F88A 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0008F896 9402 8004                  	dc.b	nG1, $02, nRst, $04
0008F89A F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
0008F89F A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0008F8AB 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0008F8B7 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0008F8C3 9402 8007                  	dc.b	nG1, $02, nRst, $07
0008F8C7                            
0008F8C7                            triple_Loop0F:
0008F8C7 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0008F8CD F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
0008F8D2 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
0008F8D8                            
0008F8D8                            triple_Loop10:
0008F8D8 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0008F8E4 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0008F8F0 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0008F8FC 9402 8004                  	dc.b	nG1, $02, nRst, $04
0008F900 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
0008F905 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0008F911 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0008F91D 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0008F929 9402 8007                  	dc.b	nG1, $02, nRst, $07
0008F92D                            
0008F92D                            triple_Loop11:
0008F92D 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0008F933 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
0008F938 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
0008F93E F500                       	smpsPSGvoice        $00
0008F940 F6FF 2E                    	smpsJump triple_PSG1
0008F943                            
0008F943                            triple_Voices:
0008F943                            ;	Voice $00
0008F943                            ;	$3A
0008F943                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
0008F943                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
0008F943                            	smpsVcAlgorithm     $02
0008F943                            	smpsVcFeedback      $07
0008F943                            	smpsVcUnusedBits    $00
0008F943                            	smpsVcDetune        $00, $00, $00, $00
0008F943                            	smpsVcCoarseFreq    $01, $01, $07, $01
0008F943                            	smpsVcRateScale     $01, $02, $02, $02
0008F943                            	smpsVcAttackRate    $13, $0D, $0E, $0E
0008F943                            	smpsVcAmpMod        $00, $00, $00, $00
0008F943                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
0008F943                            	smpsVcDecayRate2    $00, $00, $00, $00
0008F943                            	smpsVcDecayLevel    $00, $01, $0F, $01
0008F943                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0008F943 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
0008F95C                            
0008F95C                            ;	Voice $01
0008F95C                            ;	$20
0008F95C                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
0008F95C                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
0008F95C                            	smpsVcAlgorithm     $00
0008F95C                            	smpsVcFeedback      $04
0008F95C                            	smpsVcUnusedBits    $00
0008F95C                            	smpsVcDetune        $00, $00, $03, $07
0008F95C                            	smpsVcCoarseFreq    $00, $00, $01, $0A
0008F95C                            	smpsVcRateScale     $03, $03, $03, $02
0008F95C                            	smpsVcAttackRate    $1F, $1C, $18, $1F
0008F95C                            	smpsVcAmpMod        $00, $00, $00, $00
0008F95C                            	smpsVcDecayRate1    $04, $04, $0A, $10
0008F95C                            	smpsVcDecayRate2    $08, $08, $08, $0F
0008F95C                            	smpsVcDecayLevel    $0B, $0B, $05, $05
0008F95C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0008F95C 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0008F95C 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0008F976 00                         		even
0008F976                            Music88:	incbin	sound\music88.bin; Extra Life
0008FA64                            		even
0008FA64                            Music89:	incbin	sound\music89.bin; Special Stage
0009392C 00                         		even
0009392C                            Music8A:	incbin	sound\music8A.bin; Title Screen
00093AF6                            		even
00093AF6                            Music8B:	incbin	sound\music8B.bin; Ending Theme
00093D90                            		even
00093D90                            Music8C:	incbin	sound\music8C.bin; VS Boss
00093FAC                            		even
00093FAC                            Music8D:	incbin	sound\music8D.bin; Final Zone
000941C8                            		even
000941C8                            Music8E:	incbin	sound\fle.bin ;		Act Clear
00094636 00                         		even
00094636                            Music8F:	incbin	sound\music8F.bin ; Game Over
00094C76 00                         		even
00094C76                            Music90:	incbin	sound\music90.bin ; Continue
00094DD4                            		even
00094DD4                            Music91:	incbin	sound\music91.bin ; Credits
000960A2                            		even
000960A2                            Music92:	incbin	sound\music92.bin ; Drowning
000961CC                            		even
000961CC                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
0009629A                            		even
0009629A                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000962D4 00                         		even
000962D4                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
0009630E 00                         		even
0009630E                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
00096348 00                         		even
00096348                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
00096382 00                         		even
00096382                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000963BC 00                         		even
000963BC                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000963F6 00                         		even
000963F6                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
00096430 00                         		even
00096430                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
0009646A 00                         		even
0009646A                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000964A4 00                         		even
000964A4                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000964DE 00                         		even
000964DE                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
00096518 00                         		even
00096518                            Music9F:	incbin	sound\music9F.bin ; Scrap Brain Act 3
00096552 00                         		even
00096552                            ; ---------------------------------------------------------------------------
00096552                            ; Sound	effect pointers
00096552                            ; ---------------------------------------------------------------------------
00096552 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
0009655E 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
0009656A 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
00096576 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
00096582 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
0009658E 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
0009659A 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000965A6 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000965B2 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000965BE 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000965CA 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000965D6 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000965E2 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000965EE 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000965FA 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
00096606 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
00096612 0000 0000                  SoundD0Index:	dc.l SoundD0
00096616                            SoundA0:	incbin	sound\soundA0.bin
0009662C                            		even
0009662C                            SoundA1:	incbin	sound\soundA1.bin
00096656                            		even
00096656                            SoundA2:	incbin	sound\soundA2.bin
00096676                            		even
00096676                            SoundA3:	incbin	sound\soundA3.bin
000966A8                            		even
000966A8                            SoundA4:	incbin	sound\soundA4.bin
000966DE                            		even
000966DE                            SoundA5:	incbin	sound\soundA5.bin
0009670A                            		even
0009670A                            SoundA6:	incbin	sound\soundA6.bin
0009673A                            		even
0009673A                            SoundA7:	incbin	sound\soundA7.bin
0009676A                            		even
0009676A                            SoundA8:	incbin	sound\soundA8.bin
0009679E                            		even
0009679E                            SoundA9:	incbin	sound\soundA9.bin
000967B0                            		even
000967B0                            SoundAA:	incbin	sound\soundAA.bin
000967F2                            		even
000967F2                            SoundAB:	incbin	sound\soundAB.bin
00096812                            		even
00096812                            SoundAC:	incbin	sound\soundAC.bin
00096846                            		even
00096846                            SoundAD:	incbin	sound\soundAD.bin
0009687C                            		even
0009687C                            SoundAE:	incbin	sound\soundAE.bin
000968C6                            		even
000968C6                            SoundAF:	incbin	sound\soundAF.bin
000968F4                            		even
000968F4                            SoundB0:	incbin	sound\soundB0.bin
00096926                            		even
00096926                            SoundB1:	incbin	sound\soundB1.bin
00096952                            		even
00096952                            SoundB2:	incbin	sound\soundB2.bin
000969A2                            		even
000969A2                            SoundB3:	incbin	sound\soundB3.bin
000969EC                            		even
000969EC                            SoundB4:	include	sound\soundB4.asm
000969EC                            SndB4_Bumper_Header:
000969EC =00000001                  smpsHeaderStartSong = 1
000969EC 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000969EE 01                         	smpsHeaderTempoSFX  $01
000969EF 03                         	smpsHeaderChanSFX   $03
000969F0                            
00096A02                            
00096A02                            ; FM5 Data
00096A02                            SndB4_Bumper_FM5:
00096A04 F600 00                    	smpsJump            SndB4_Bumper_Jump00
00096A07                            
00096A07                            ; FM4 Data
00096A07                            SndB4_Bumper_FM4:
00096A07 F2                         	smpsStop
00096A08                            
00096A08                            SndB4_Bumper_Jump00:
00096A08 A020                       	dc.b	nG2, $20
00096A0A F2                         	smpsStop
00096A0B                            
00096A0B                            ; FM3 Data
00096A0B                            SndB4_Bumper_FM3:
00096A0B F2                         	smpsStop
00096A0C                            
00096A0C                            SndB4_Bumper_Voices:
00096A0C                            ;	Voice $00
00096A0C                            ;	$32
00096A0C                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
00096A0C                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
00096A0C                            	smpsVcAlgorithm     $02
00096A0C                            	smpsVcFeedback      $06
00096A0C                            	smpsVcUnusedBits    $00
00096A0C                            	smpsVcDetune        $07, $07, $02, $00
00096A0C                            	smpsVcCoarseFreq    $00, $00, $00, $04
00096A0C                            	smpsVcRateScale     $00, $00, $00, $00
00096A0C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00096A0C                            	smpsVcAmpMod        $00, $00, $00, $00
00096A0C                            	smpsVcDecayRate1    $08, $00, $00, $09
00096A0C                            	smpsVcDecayRate2    $0B, $00, $00, $09
00096A0C                            	smpsVcDecayLevel    $00, $00, $00, $00
00096A0C                            	smpsVcReleaseRate   $0F, $00, $00, $00
00096A0C 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
00096A0C 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
00096A26 00                         		even
00096A26                            SoundB5:	incbin	sound\soundB5.bin
00096A54                            		even
00096A54                            SoundB6:	incbin	sound\soundB6.bin
00096A72                            		even
00096A72                            SoundB7:	incbin	sound\soundB7.bin
00096AAE                            		even
00096AAE                            SoundB8:	incbin	sound\soundB8.bin
00096ACC                            		even
00096ACC                            SoundB9:	incbin	sound\soundB9.bin
00096B30                            		even
00096B30                            SoundBA:	incbin	sound\soundBA.bin
00096B58                            		even
00096B58                            SoundBB:	incbin	sound\soundBB.bin
00096B84                            		even
00096B84                            SoundBC:	incbin	sound\soundBC.bin
00096BC6                            		even
00096BC6                            SoundBD:	incbin	sound\soundBD.bin
00096C1A                            		even
00096C1A                            SoundBE:	incbin	sound\soundBE.bin
00096C54                            		even
00096C54                            SoundBF:	incbin	sound\soundBF.bin
00096CC6                            		even
00096CC6                            SoundC0:	incbin	sound\soundC0.bin
00096CF4                            		even
00096CF4                            SoundC1:	incbin	sound\soundC1.bin
00096D2E                            		even
00096D2E                            SoundC2:	incbin	sound\soundC2.bin
00096D58                            		even
00096D58                            SoundC3:	incbin	sound\soundC3.bin
00096DD2                            		even
00096DD2                            SoundC4:	incbin	sound\soundC4.bin
00096DFA                            		even
00096DFA                            SoundC5:	incbin	sound\soundC5.bin
00096E62                            		even
00096E62                            SoundC6:	incbin	sound\soundC6.bin
00096EA4                            		even
00096EA4                            SoundC7:	incbin	sound\soundC7.bin
00096ED2                            		even
00096ED2                            SoundC8:	incbin	sound\soundC8.bin
00096EE4                            		even
00096EE4                            SoundC9:	incbin	sound\soundC9.bin
00096F12                            		even
00096F12                            SoundCA:	incbin	sound\soundCA.bin
00096F40                            		even
00096F40                            SoundCB:	incbin	sound\soundCB.bin
00096F8C                            		even
00096F8C                            SoundCC:	incbin	sound\soundCC.bin
00096FC6                            		even
00096FC6                            SoundCD:	incbin	sound\soundCD.bin
00096FD4                            		even
00096FD4                            SoundCE:	incbin	sound\soundCE.bin
00097002                            		even
00097002                            SoundCF:	incbin	sound\soundCF.bin
0009703A                            		even
0009703A                            SoundD0:	incbin	sound\soundD0.bin
00097074                            		even
00097074                            SegaPCM:	incbin	sound\segapcm.bin
0009ACAE                            SegaPCM_end:	even
0009ACAE                            
0009ACAE                            ; end of 'ROM'
0009ACAE                            EndOfRom:
0009ACAE                            
0009ACAE                            
