00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            		include "MapMacros.asm"		; TODO: UNFINISHED DON'T USE MAPMACROS!
00000000 =00000001                  SonicMappingsVer = 1
00000000 =00000001                  SonicDplcVer = 1
00000000                            
00000000                            ; macro to declare a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTable macro
00000000                            ;@current_mappings_table = *
00000000                            ;	endm
00000000                            
00000000 =00000005                  MappingSize		= 5
00000000 =00000001                  MappingHeaderSize	= 1
00000000                            
00000000                            ; macro to declare an entry in a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTableEntry macro ptr
00000000                            ;	dc.ATTRIBUTE ptr-.current_mappings_table
00000000                            ;	endm
00000000                            
00000000                            ;spriteHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicMappingsVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	elseif SonicMappingsVer=4
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / MappingSize)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            spritePiece macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(((tile)>>1)|((tile)&$8000))
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            spritePiece2P macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri,tile2,xflip2,yflip2,pal2,pri2
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri2&1)<<15)|((pal2&3)<<13)|((yflip2&1)<<12)|((xflip2&1)<<11))+(tile2)
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ;dplcHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicDplcVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	elseif SonicDplcVer=3
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / 2)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            dplcEntry macro tiles,offset
00000000                            	if SonicDplcVer=3
00000000                            	dc.w	((offset&$FFF)<<4)|((tiles-1)&$F)
00000000                            	elseif SonicDplcVer=4
00000000                            	dc.w	(((tiles-1)&$F)<<12)|((offset&$FFF)<<4)
00000000                            	else
00000000                            	dc.w	(((tiles-1)&$F)<<12)|(offset&$FFF)
00000000                            	endif
00000000                            	endm
00000000                            	endm
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow1size+8
00000000                            lswifi: equ lsrow1size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            ; options menu
00000000                            optamm: equ ((OMTEnd-OptionMenuText)/16)-1
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l PalToCRAM,	ErrorTrap, vBlankRoutine, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320                            ;		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000320                            ;		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000320                            ;		move.l	(a1),d0
00000320                            ;		moveq	#0,d1
00000320                            ;
00000320                            ;loc_32C:
00000320                            ;		add.w	(a0)+,d1
00000320                            ;		cmp.l	a0,d0
00000320                            ;		bcc.s	loc_32C
00000320                            ;		movea.l	#Checksum,a1	; read the checksum
00000320                            ;		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000320                            ;		bne.w	CheckSumError	; if they don't match, branch
00000320 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000324 7E00                       		moveq	#0,d7
00000326 3C3C 007F                  		move.w	#$7F,d6
0000032A                            
0000032A                            loc_348:
0000032A 2CC7                       		move.l	d7,(a6)+
0000032C 51CE FFFC                  		dbf	d6,loc_348
00000330                            ; HzMd NT/PL MCD JP/OV TMSS TMSS TMSS TMSS
00000330 303C 00EF                  		move.w	#$EF,d0
00000334 C039 00A1 0001             		and.b	($A10001).l,d0
0000033A 0880 0007                  		bclr	#7,d0
0000033E 6700                       		beq.s	@jap
00000340 0000 0010                  		or.b	#1<<4,d0
00000344                            @jap:
00000344 7201                       		moveq	#1,d1
00000346 C279 00C0 0004             		and.w	($C00004).l,d1
0000034C E219                       		ror.b	#1,d1
0000034E 8001                       		or.b	d1,d0
00000350 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000354 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
0000035C                            
0000035C                            GameInit:
0000035C 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000362 7E00                       		moveq	#0,d7
00000364 3C3C 3F7F                  		move.w	#$3F7F,d6
00000368                            
00000368                            GameClrRAM:
00000368 2CC7                       		move.l	d7,(a6)+
0000036A 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000036E                            
0000036E 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
00000374 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
0000037C                            
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388                            
00000388 1038 FFF8                  		move.b	($FFFFFFF8).w,d0
0000038C 0240 000F                  		and.w	#$F,d0
00000390 6700                       		beq.s	@notmss
00000392 4EB9 0000 0000             		jsr	GM_AntiTMSS
00000398                            @notmss:
00000398 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000039E 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
000003A4                            
000003A4                            MainGameLoop:
000003A4 707E                       		moveq	#$7E,d0
000003A6 C038 F600                  		and.b	($FFFFF600).w,d0 ; load	Game Mode
000003AA 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
000003AE 60F4                       		bra.s	MainGameLoop
000003B0                            ; ===========================================================================
000003B0                            ; ---------------------------------------------------------------------------
000003B0                            ; Main game mode array
000003B0                            ; ---------------------------------------------------------------------------
000003B0                            
000003B0                            GameModeArray:
000003B0 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
000003B4                            ; ===========================================================================
000003B4 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003B8                            ; ===========================================================================
000003B8 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003BC                            ; ===========================================================================
000003BC 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003C0                            ; ===========================================================================
000003C0 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003C4                            ; ===========================================================================
000003C4 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003C8                            ; ===========================================================================
000003C8 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003CC                            ; ===========================================================================
000003CC 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003D0                            ; ===========================================================================
000003D0 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            CheckSumError:
000003D6 6100 0000                  		bsr.w	VDPSetupGame
000003DA 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003E4 7E3F                       		moveq	#$3F,d7
000003E6                            
000003E6                            CheckSum_Red:
000003E6 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003EE 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003F2                            
000003F2                            CheckSum_Loop:
000003F2 60FE                       		bra.s	CheckSum_Loop
000003F4                            ; ===========================================================================
000003F4                            
000003F4                            BusError:
000003F4 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003FA 6000                       		bra.s	loc_43A
000003FC                            ; ===========================================================================
000003FC                            
000003FC                            AddressError:
000003FC 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
00000402 6000                       		bra.s	loc_43A
00000404                            ; ===========================================================================
00000404                            
00000404                            IllegalInstr:
00000404 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
0000040A 54AF 0002                  		addq.l	#2,2(sp)
0000040E 6000                       		bra.s	loc_462
00000410                            ; ===========================================================================
00000410                            
00000410                            ZeroDivide:
00000410 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
00000416 6000                       		bra.s	loc_462
00000418                            ; ===========================================================================
00000418                            
00000418                            ChkInstr:
00000418 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
0000041E 6000                       		bra.s	loc_462
00000420                            ; ===========================================================================
00000420                            
00000420                            TrapvInstr:
00000420 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000426 6000                       		bra.s	loc_462
00000428                            ; ===========================================================================
00000428                            
00000428                            PrivilegeViol:
00000428 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
0000042E 6000                       		bra.s	loc_462
00000430                            ; ===========================================================================
00000430                            
00000430                            Trace:
00000430 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000436 6000                       		bra.s	loc_462
00000438                            ; ===========================================================================
00000438                            
00000438                            Line1010Emu:
00000438 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
0000043E 54AF 0002                  		addq.l	#2,2(sp)
00000442 6000                       		bra.s	loc_462
00000444                            ; ===========================================================================
00000444                            
00000444                            Line1111Emu:
00000444 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000044A 54AF 0002                  		addq.l	#2,2(sp)
0000044E 6000                       		bra.s	loc_462
00000450                            ; ===========================================================================
00000450                            
00000450                            ErrorExcept:
00000450 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000456 6000                       		bra.s	loc_462
00000458                            ; ===========================================================================
00000458                            
00000458                            loc_43A:
00000458 46FC 2700                  		move	#$2700,sr
0000045C 544F                       		addq.w	#2,sp
0000045E 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000462 544F                       		addq.w	#2,sp
00000464 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046A 6100 0000                  		bsr.w	ShowErrorMsg
0000046E 202F 0002                  		move.l	2(sp),d0
00000472 6100 0000                  		bsr.w	sub_5BA
00000476 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000047A 6100 0000                  		bsr.w	sub_5BA
0000047E 6000                       		bra.s	loc_478
00000480                            ; ===========================================================================
00000480                            
00000480                            loc_462:
00000480 46FC 2700                  		move	#$2700,sr
00000484 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000048A 6100 0000                  		bsr.w	ShowErrorMsg
0000048E 202F 0002                  		move.l	2(sp),d0
00000492 6100 0000                  		bsr.w	sub_5BA
00000496                            
00000496                            loc_478:
00000496 6100 0000                  		bsr.w	ErrorWaitForC
0000049A 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
000004A0 46FC 2300                  		move	#$2300,sr
000004A4 4E73                       		rte	
000004A6                            
000004A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000004A6                            
000004A6                            
000004A6                            ShowErrorMsg:				; XREF: loc_43A; loc_462
000004A6 4DF9 00C0 0000             		lea	($C00000).l,a6
000004AC 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000004B6 41F9 0000 0000             		lea	(Art_Text).l,a0
000004BC 323C 027F                  		move.w	#$27F,d1
000004C0                            
000004C0                            Error_LoadGfx:
000004C0 3C98                       		move.w	(a0)+,(a6)
000004C2 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004C6 7000                       		moveq	#0,d0		; clear	d0
000004C8 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004CC 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004D0 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004D4 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004DE 7212                       		moveq	#$12,d1		; number of characters
000004E0                            
000004E0                            Error_LoopChars:
000004E0 7000                       		moveq	#0,d0
000004E2 1018                       		move.b	(a0)+,d0
000004E4 0640 0790                  		addi.w	#$790,d0
000004E8 3C80                       		move.w	d0,(a6)
000004EA 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004EE 4E75                       		rts	
000004F0                            ; End of function ShowErrorMsg
000004F0                            
000004F0                            ; ===========================================================================
000004F0 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004F4 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004F8 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004FC 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000500 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000504 0000                       		dc.w asc_5A6-ErrorText
00000506 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000519 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000052C 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
0000053F 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000552 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000565 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000578 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000058B 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
0000059E 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000005B1 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005C4 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005D8 00                         		even
000005D8                            
000005D8                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005D8                            
000005D8                            
000005D8                            sub_5BA:				; XREF: loc_43A; loc_462
000005D8 3CBC 07CA                  		move.w	#$7CA,(a6)
000005DC 7407                       		moveq	#7,d2
000005DE                            
000005DE                            loc_5C0:
000005DE E998                       		rol.l	#4,d0
000005E0 6100                       		bsr.s	sub_5CA
000005E2 51CA FFFA                  		dbf	d2,loc_5C0
000005E6 4E75                       		rts	
000005E8                            ; End of function sub_5BA
000005E8                            
000005E8                            
000005E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E8                            
000005E8                            
000005E8                            sub_5CA:				; XREF: sub_5BA
000005E8 3200                       		move.w	d0,d1
000005EA 0241 000F                  		andi.w	#$F,d1
000005EE 0C41 000A                  		cmpi.w	#$A,d1
000005F2 6500                       		bcs.s	loc_5D8
000005F4 5E41                       		addq.w	#7,d1
000005F6                            
000005F6                            loc_5D8:
000005F6 0641 07C0                  		addi.w	#$7C0,d1
000005FA 3C81                       		move.w	d1,(a6)
000005FC 4E75                       		rts	
000005FE                            ; End of function sub_5CA
000005FE                            
000005FE                            
000005FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005FE                            
000005FE                            
000005FE                            ErrorWaitForC:				; XREF: loc_478
000005FE 6100 0000                  		bsr.w	ReadJoypads
00000602 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000608 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000060C 4E75                       		rts	
0000060E                            ; End of function ErrorWaitForC
0000060E                            
0000060E                            ; ===========================================================================
0000060E                            
0000060E                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D4E                            Art_Text_end:		even
00000D4E                            
00000D4E                            ; ===========================================================================
00000D4E                            ;VBlank
00000D4E                            loc_B10:				; XREF: Vectors
00000D4E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D52 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D56 6700                       		beq.s	loc_B88
00000D58 3039 00C0 0004             		move.w	($C00004).l,d0
00000D5E 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D68 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D70                            ;		btst	#6,($FFFFFFF8).w
00000D70                            ;		beq.s	loc_B42
00000D70                            ;		move.w	#$700,d0
00000D70                            ;
00000D70                            ;loc_B3E:
00000D70                            ;		dbf	d0,loc_B3E
00000D70                            
00000D70                            ;loc_B42:
00000D70 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D74 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D7A 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D80 0240 003E                  		andi.w	#$3E,d0
00000D84 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D88 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D8C                            
00000D8C                            loc_B5E:				; XREF: loc_B88
00000D8C 4EB9 0000 0000             		jsr	sub_71B4C
00000D92                            
00000D92                            loc_B64:				; XREF: loc_D50
00000D92 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D96 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D9A 4E73                       		rte	
00000D9C                            ; ===========================================================================
00000D9C 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000DA0 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000DA4 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000DA8 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DAC 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DB0 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DB4 0000                       		dc.w loc_E72-off_B6E
00000DB6                            ; ===========================================================================
00000DB6                            
00000DB6                            loc_B88:				; XREF: loc_B10; off_B6E
00000DB6 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DBC 6700                       		beq.s	loc_B9A
00000DBE 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DC4 6600 FFC6                  		bne.w	loc_B5E
00000DC8                            
00000DC8                            loc_B9A:
00000DC8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DCE 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DD2 3039 00C0 0004             		move.w	($C00004).l,d0
00000DD8                            ;		btst	#6,($FFFFFFF8).w
00000DD8                            ;		beq.s	loc_BBA
00000DD8                            ;		move.w	#$700,d0
00000DD8                            ;
00000DD8                            ;loc_BB6:
00000DD8                            ;		dbf	d0,loc_BB6
00000DD8                            ;
00000DD8                            ;loc_BBA:
00000DD8 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DDE 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DE6                            
00000DE6                            loc_BC8:
00000DE6 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DEE 66F6                       		bne.s	loc_BC8
00000DF0 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DF4 6600                       		bne.s	loc_BFE
00000DF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DFC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E02 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E08 3ABC 977F                  		move.w	#$977F,(a5)
00000E0C 3ABC C000                  		move.w	#$C000,(a5)
00000E10 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E16 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E1A 6000                       		bra.s	loc_C22
00000E1C                            ; ===========================================================================
00000E1C                            
00000E1C                            loc_BFE:				; XREF: loc_BC8
00000E1C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E22 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E28 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E2E 3ABC 977F                  		move.w	#$977F,(a5)
00000E32 3ABC C000                  		move.w	#$C000,(a5)
00000E36 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E3C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E40                            
00000E40                            loc_C22:				; XREF: loc_BC8
00000E40 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E44 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E4C 6000 FF3E                  		bra.w	loc_B5E
00000E50                            ; ===========================================================================
00000E50                            
00000E50                            loc_C32:				; XREF: off_B6E
00000E50 6100 0000                  		bsr.w	sub_106E
00000E54                            
00000E54                            loc_C36:				; XREF: off_B6E
00000E54 4A78 F614                  		tst.w	($FFFFF614).w
00000E58 6700 0000                  		beq.w	locret_C42
00000E5C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E60                            
00000E60                            locret_C42:
00000E60 4E75                       		rts	
00000E62                            ; ===========================================================================
00000E62                            
00000E62                            loc_C44:				; XREF: off_B6E
00000E62 6100 0000                  		bsr.w	sub_106E
00000E66 6100 0000                  		bsr.w	sub_6886
00000E6A 6100 0000                  		bsr.w	sub_1642
00000E6E 4A78 F614                  		tst.w	($FFFFF614).w
00000E72 6700 0000                  		beq.w	locret_C5C
00000E76 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E7A                            
00000E7A                            locret_C5C:
00000E7A 4E75                       		rts	
00000E7C                            ; ===========================================================================
00000E7C                            
00000E7C                            loc_C5E:				; XREF: off_B6E
00000E7C 6100 0000                  		bsr.w	sub_106E
00000E80 4E75                       		rts	
00000E82                            ; ===========================================================================
00000E82                            
00000E82                            loc_C64:				; XREF: off_B6E
00000E82 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E88 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E8C                            
00000E8C                            loc_C6E:				; XREF: off_B6E
00000E8C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E94                            
00000E94                            loc_C76:
00000E94 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E9C 66F6                       		bne.s	loc_C76		; if not, branch
00000E9E 6100 0000                  		bsr.w	ReadJoypads
00000EA2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EA6 6600                       		bne.s	loc_CB0
00000EA8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EAE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EB4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EBA 3ABC 977F                  		move.w	#$977F,(a5)
00000EBE 3ABC C000                  		move.w	#$C000,(a5)
00000EC2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EC8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ECC 6000                       		bra.s	loc_CD4
00000ECE                            ; ===========================================================================
00000ECE                            
00000ECE                            loc_CB0:				; XREF: loc_C76
00000ECE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EDA 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE0 3ABC 977F                  		move.w	#$977F,(a5)
00000EE4 3ABC C000                  		move.w	#$C000,(a5)
00000EE8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EEE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF2                            
00000EF2                            loc_CD4:				; XREF: loc_C76
00000EF2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EFC 203C 9401 93C0             		move.l	#$940193C0,d0		; 224
00000F02 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; hscroll
00000F06 6A00                       		bpl.s	@60hz
00000F08 303C 93E0                  		move.w	#$93E0,d0		; 240
00000F0C                            @60hz:
00000F0C 2A80                       		move.l	d0,(a5)
00000F0E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F14 3ABC 977F                  		move.w	#$977F,(a5)
00000F18 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F1C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F22 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F26 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F2C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F32 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F38 3ABC 977F                  		move.w	#$977F,(a5)
00000F3C 3ABC 7800                  		move.w	#$7800,(a5)
00000F40 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F46 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F4A 4A38 F767                  		tst.b	($FFFFF767).w
00000F4E 6700                       		beq.s	loc_D50
00000F50 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F56 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F5C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F62 3ABC 977F                  		move.w	#$977F,(a5)
00000F66 3ABC 7000                  		move.w	#$7000,(a5)
00000F6A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F70 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F74 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F7A                            
00000F7A                            loc_D50:
00000F7A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F82 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F88 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F8E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F94 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F9A 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000FA0 6400                       		bcc.s	Demo_Time
00000FA2 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FA8 588F                       		addq.l	#4,sp
00000FAA 6000 FDE6                  		bra.w	loc_B64
00000FAE                            
00000FAE                            ; ---------------------------------------------------------------------------
00000FAE                            ; Subroutine to	run a demo for an amount of time
00000FAE                            ; ---------------------------------------------------------------------------
00000FAE                            
00000FAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FAE                            
00000FAE                            
00000FAE                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FAE 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FB2 4EB9 0000 0000             		jsr	AniArt_Load
00000FB8 4EB9 0000 0000             		jsr	HudUpdate
00000FBE 6100 0000                  		bsr.w	sub_165E
00000FC2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FC6 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FCA 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FCE                            
00000FCE                            Demo_TimeEnd:
00000FCE 4E75                       		rts	
00000FD0                            ; End of function Demo_Time
00000FD0                            
00000FD0                            ; ===========================================================================
00000FD0                            
00000FD0                            loc_DA6:				; XREF: off_B6E
00000FD0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FD8                            
00000FD8                            loc_DAE:
00000FD8 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FE0 66F6                       		bne.s	loc_DAE		; if not, branch
00000FE2 6100 0000                  		bsr.w	ReadJoypads
00000FE6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FEC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FF2 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FF8 3ABC 977F                  		move.w	#$977F,(a5)
00000FFC 3ABC C000                  		move.w	#$C000,(a5)
00001000 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001006 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000100A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001010 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001016 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000101C 3ABC 977F                  		move.w	#$977F,(a5)
00001020 3ABC 7800                  		move.w	#$7800,(a5)
00001024 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000102A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000102E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001034 203C 9401 93C0             		move.l	#$940193C0,d0		; 224
0000103A 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; hscroll
0000103E 6A00                       		bpl.s	@60hz
00001040 303C 93E0                  		move.w	#$93E0,d0		; 240
00001044                            @60hz:
00001044 2A80                       		move.l	d0,(a5)
00001046 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000104C 3ABC 977F                  		move.w	#$977F,(a5)
00001050 3ABC 7C00                  		move.w	#$7C00,(a5)
00001054 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000105A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000105E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001066 6100 0000                  		bsr.w	PalCycle_SS
0000106A 4A38 F767                  		tst.b	($FFFFF767).w
0000106E 6700                       		beq.s	loc_E64
00001070 4BF9 00C0 0004             		lea	($C00004).l,a5
00001076 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000107C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001082 3ABC 977F                  		move.w	#$977F,(a5)
00001086 3ABC 7000                  		move.w	#$7000,(a5)
0000108A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001090 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001094 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000109A                            
0000109A                            loc_E64:
0000109A 4A78 F614                  		tst.w	($FFFFF614).w
0000109E 6700 0000                  		beq.w	locret_E70
000010A2 5378 F614                  		subq.w	#1,($FFFFF614).w
000010A6                            
000010A6                            locret_E70:
000010A6 4E75                       		rts	
000010A8                            ; ===========================================================================
000010A8                            
000010A8                            loc_E72:				; XREF: off_B6E
000010A8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000010B0                            
000010B0                            loc_E7A:
000010B0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010B8 66F6                       		bne.s	loc_E7A		; if not, branch
000010BA 6100 0000                  		bsr.w	ReadJoypads
000010BE 4A38 F64E                  		tst.b	($FFFFF64E).w
000010C2 6600                       		bne.s	loc_EB4
000010C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010CA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010D0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010D6 3ABC 977F                  		move.w	#$977F,(a5)
000010DA 3ABC C000                  		move.w	#$C000,(a5)
000010DE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010E4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010E8 6000                       		bra.s	loc_ED8
000010EA                            ; ===========================================================================
000010EA                            
000010EA                            loc_EB4:				; XREF: loc_E7A
000010EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000010F0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010F6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010FC 3ABC 977F                  		move.w	#$977F,(a5)
00001100 3ABC C000                  		move.w	#$C000,(a5)
00001104 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000110A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000110E                            
0000110E                            loc_ED8:				; XREF: loc_E7A
0000110E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001112 4BF9 00C0 0004             		lea	($C00004).l,a5
00001118 203C 9401 93C0             		move.l	#$940193C0,d0		; 224
0000111E 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; hscroll
00001122 6A00                       		bpl.s	@60hz
00001124 303C 93E0                  		move.w	#$93E0,d0		; 240
00001128                            @60hz:
00001128 2A80                       		move.l	d0,(a5)
0000112A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001130 3ABC 977F                  		move.w	#$977F,(a5)
00001134 3ABC 7C00                  		move.w	#$7C00,(a5)
00001138 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000113E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001142 4BF9 00C0 0004             		lea	($C00004).l,a5
00001148 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000114E 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001154 3ABC 977F                  		move.w	#$977F,(a5)
00001158 3ABC 7800                  		move.w	#$7800,(a5)
0000115C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001162 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001166 4A38 F767                  		tst.b	($FFFFF767).w
0000116A 6700                       		beq.s	loc_F54
0000116C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001172 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001178 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000117E 3ABC 977F                  		move.w	#$977F,(a5)
00001182 3ABC 7000                  		move.w	#$7000,(a5)
00001186 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000118C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001190 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001196                            
00001196                            loc_F54:
00001196 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000119E 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
000011A4 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
000011AA 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
000011B0 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
000011B6 6100 0000                  		bsr.w	LoadTilesAsYouMove
000011BA 4EB9 0000 0000             		jsr	AniArt_Load
000011C0 4EB9 0000 0000             		jsr	HudUpdate
000011C6 6100 0000                  		bsr.w	sub_1642
000011CA 4E75                       		rts	
000011CC                            ; ===========================================================================
000011CC                            
000011CC                            loc_F8A:				; XREF: off_B6E
000011CC 6100 0000                  		bsr.w	sub_106E
000011D0 5238 F628                  		addq.b	#1,($FFFFF628).w
000011D4 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011DA 4E75                       		rts	
000011DC                            ; ===========================================================================
000011DC                            
000011DC                            loc_F9A:				; XREF: off_B6E
000011DC 6100 0000                  		bsr.w	sub_106E
000011E0 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011E4 6000 0000                  		bra.w	sub_1642
000011E8                            ; ===========================================================================
000011E8                            
000011E8                            loc_FA6:				; XREF: off_B6E
000011E8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011F0                            
000011F0                            loc_FAE:
000011F0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011F8 66F6                       		bne.s	loc_FAE		; if not, branch
000011FA 6100 0000                  		bsr.w	ReadJoypads
000011FE 4BF9 00C0 0004             		lea	($C00004).l,a5
00001204 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000120A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001210 3ABC 977F                  		move.w	#$977F,(a5)
00001214 3ABC C000                  		move.w	#$C000,(a5)
00001218 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000121E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001222 4BF9 00C0 0004             		lea	($C00004).l,a5
00001228 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000122E 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001234 3ABC 977F                  		move.w	#$977F,(a5)
00001238 3ABC 7800                  		move.w	#$7800,(a5)
0000123C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001242 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001246 4BF9 00C0 0004             		lea	($C00004).l,a5
0000124C 203C 9401 93C0             		move.l	#$940193C0,d0		; 224
00001252 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; hscroll
00001256 6A00                       		bpl.s	@60hz
00001258 303C 93E0                  		move.w	#$93E0,d0		; 240
0000125C                            @60hz:
0000125C 2A80                       		move.l	d0,(a5)
0000125E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001264 3ABC 977F                  		move.w	#$977F,(a5)
00001268 3ABC 7C00                  		move.w	#$7C00,(a5)
0000126C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001272 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001276 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000127E 4A38 F767                  		tst.b	($FFFFF767).w
00001282 6700                       		beq.s	loc_1060
00001284 4BF9 00C0 0004             		lea	($C00004).l,a5
0000128A 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001290 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001296 3ABC 977F                  		move.w	#$977F,(a5)
0000129A 3ABC 7000                  		move.w	#$7000,(a5)
0000129E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000012A4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012A8 11FC 0000 F767             		move.b	#0,($FFFFF767).w
000012AE                            
000012AE                            loc_1060:
000012AE 4A78 F614                  		tst.w	($FFFFF614).w
000012B2 6700 0000                  		beq.w	locret_106C
000012B6 5378 F614                  		subq.w	#1,($FFFFF614).w
000012BA                            
000012BA                            locret_106C:
000012BA 4E75                       		rts	
000012BC                            
000012BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012BC                            
000012BC                            
000012BC                            sub_106E:				; XREF: loc_C32; et al
000012BC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000012C4                            
000012C4                            loc_1076:
000012C4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012CC 66F6                       		bne.s	loc_1076	; if not, branch
000012CE 6100 0000                  		bsr.w	ReadJoypads
000012D2 4BF9 00C0 0004             		lea	($C00004).l,a5
000012D8 4A38 F64E                  		tst.b	($FFFFF64E).w
000012DC 6600                       		bne.s	loc_10B0
000012DE 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012E4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012EA 3ABC 977F                  		move.w	#$977F,(a5)
000012EE 3ABC C000                  		move.w	#$C000,(a5)
000012F2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012FC 6000                       		bra.s	loc_10D4
000012FE                            ; ===========================================================================
000012FE                            
000012FE                            loc_10B0:				; XREF: sub_106E
000012FE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001304 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
0000130A 3ABC 977F                  		move.w	#$977F,(a5)
0000130E 3ABC C000                  		move.w	#$C000,(a5)
00001312 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001318 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000131C                            
0000131C                            loc_10D4:				; XREF: sub_106E
0000131C 2ABC 9401 9340             		move.l	#$94019340,(a5)		; sprites
00001322 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001328 3ABC 977F                  		move.w	#$977F,(a5)
0000132C 3ABC 7800                  		move.w	#$7800,(a5)
00001330 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001336 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000133A                            
0000133A 203C 9401 93C0             		move.l	#$940193C0,d0		; 224
00001340 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; hscroll
00001344 6A00                       		bpl.s	@60hz
00001346 303C 93E0                  		move.w	#$93E0,d0		; 240
0000134A                            @60hz:
0000134A 2A80                       		move.l	d0,(a5)
0000134C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001352 3ABC 977F                  		move.w	#$977F,(a5)
00001356 3ABC 7C00                  		move.w	#$7C00,(a5)
0000135A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001360 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001364 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000136C 4E75                       		rts	
0000136E                            ; End of function sub_106E
0000136E                            
0000136E                            ; ---------------------------------------------------------------------------
0000136E                            ; Subroutine to	move pallets from the RAM to CRAM
0000136E                            ; ---------------------------------------------------------------------------
0000136E                            
0000136E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000136E                            
0000136E                            
0000136E                            PalToCRAM:
0000136E 46FC 2700                  		move	#$2700,sr
00001372 4A78 F644                  		tst.w	($FFFFF644).w
00001376 6700                       		beq.s	locret_119C
00001378 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000137E 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001382 43F9 00C0 0000             		lea	($C00000).l,a1
00001388 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
0000138C 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001394 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 2298                       		move.l	(a0)+,(a1)
000013B2 2298                       		move.l	(a0)+,(a1)
000013B4 2298                       		move.l	(a0)+,(a1)
000013B6 2298                       		move.l	(a0)+,(a1)
000013B8 2298                       		move.l	(a0)+,(a1)
000013BA 2298                       		move.l	(a0)+,(a1)
000013BC 2298                       		move.l	(a0)+,(a1)
000013BE 2298                       		move.l	(a0)+,(a1)
000013C0 2298                       		move.l	(a0)+,(a1)
000013C2 2298                       		move.l	(a0)+,(a1)
000013C4 2298                       		move.l	(a0)+,(a1)
000013C6 2298                       		move.l	(a0)+,(a1)
000013C8 2298                       		move.l	(a0)+,(a1)
000013CA 2298                       		move.l	(a0)+,(a1)
000013CC 2298                       		move.l	(a0)+,(a1)
000013CE 2298                       		move.l	(a0)+,(a1)
000013D0 2298                       		move.l	(a0)+,(a1)
000013D2 2298                       		move.l	(a0)+,(a1)
000013D4 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013DA 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013DE 4A38 F64F                  		tst.b	($FFFFF64F).w
000013E2 6600                       		bne.s	loc_119E
000013E4                            
000013E4                            locret_119C:
000013E4 4E73                       		rte	
000013E6                            ; ===========================================================================
000013E6                            
000013E6                            loc_119E:				; XREF: PalToCRAM
000013E6 4238 F64F                  		clr.b	($FFFFF64F).w
000013EA 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013EE 6100 FBBE                  		bsr.w	Demo_Time
000013F2 4EB9 0000 0000             		jsr	sub_71B4C
000013F8 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013FC 4E73                       		rte	
000013FE                            ; End of function PalToCRAM
000013FE                            
000013FE                            ; ---------------------------------------------------------------------------
000013FE                            ; Subroutine to	initialise joypads
000013FE                            ; ---------------------------------------------------------------------------
000013FE                            
000013FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013FE                            
000013FE                            
000013FE                            JoypadInit:				; XREF: GameClrRAM
000013FE 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001406                            
00001406                            Joypad_WaitZ80:
00001406 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
0000140E 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00001410 7040                       		moveq	#$40,d0
00001412 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001418 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
0000141E 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001424 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000142C 4E75                       		rts	
0000142E                            ; End of function JoypadInit
0000142E                            
0000142E                            ; ---------------------------------------------------------------------------
0000142E                            ; Subroutine to	read joypad input, and send it to the RAM
0000142E                            ; ---------------------------------------------------------------------------
0000142E                            
0000142E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000142E                            
0000142E                            
0000142E                            ReadJoypads:
0000142E 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001432 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001438 6100                       		bsr.s	Joypad_Read	; do the first joypad
0000143A 5449                       		addq.w	#2,a1		; do the second	joypad
0000143C                            
0000143C                            Joypad_Read:
0000143C 12BC 0000                  		move.b	#0,(a1)
00001440 4E71                       		nop	
00001442 4E71                       		nop	
00001444 1011                       		move.b	(a1),d0
00001446 E508                       		lsl.b	#2,d0
00001448 0200 00C0                  		andi.b	#$C0,d0
0000144C 12BC 0040                  		move.b	#$40,(a1)
00001450 4E71                       		nop	
00001452 4E71                       		nop	
00001454 1211                       		move.b	(a1),d1
00001456 0201 003F                  		andi.b	#$3F,d1
0000145A 8001                       		or.b	d1,d0
0000145C 4600                       		not.b	d0
0000145E 1210                       		move.b	(a0),d1
00001460 B101                       		eor.b	d0,d1
00001462 10C0                       		move.b	d0,(a0)+
00001464 C200                       		and.b	d0,d1
00001466 10C1                       		move.b	d1,(a0)+
00001468 4E75                       		rts	
0000146A                            ; End of function ReadJoypads
0000146A                            
0000146A                            
0000146A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000146A                            
0000146A                            
0000146A                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
0000146A 41F9 00C0 0004             		lea	($C00004).l,a0
00001470 43F9 00C0 0000             		lea	($C00000).l,a1
00001476 45FA 0000                  		lea	VDPSetupArray(pc),a2
0000147A 7E12                       		moveq	#$12,d7
0000147C                            
0000147C                            VDP_Loop:
0000147C 309A                       		move.w	(a2)+,(a0)
0000147E 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001482                            
00001482 303A 0000                  		move.w	VDPSetupArray+2(pc),d0
00001486 0838 0007 FFF8             		btst	#7,($FFFFFFF8).w	; Is this a PAL console?
0000148C 6700                       		beq.s	.UseV28			; If not, skip
0000148E 08C0 0003                  		bset	#3,d0			; set v30 and pretend nothing happened
00001492                            .UseV28:
00001492 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001496 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000149C 7000                       		moveq	#0,d0
0000149E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000014A8 3E3C 003F                  		move.w	#$3F,d7
000014AC                            
000014AC                            VDP_ClrCRAM:
000014AC 3280                       		move.w	d0,(a1)
000014AE 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
000014B2                            
000014B2 42B8 F616                  		clr.l	($FFFFF616).w
000014B6 42B8 F61A                  		clr.l	($FFFFF61A).w
000014BA 2F01                       		move.l	d1,-(sp)
000014BC 4BF9 00C0 0004             		lea	($C00004).l,a5
000014C2 3ABC 8F01                  		move.w	#$8F01,(a5)
000014C6 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014CC 3ABC 9780                  		move.w	#$9780,(a5)
000014D0 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014D6 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014DE                            
000014DE                            loc_128E:
000014DE 3215                       		move.w	(a5),d1
000014E0 0801 0001                  		btst	#1,d1
000014E4 66F8                       		bne.s	loc_128E
000014E6                            
000014E6 3ABC 8F02                  		move.w	#$8F02,(a5)
000014EA 221F                       		move.l	(sp)+,d1
000014EC 4E75                       		rts	
000014EE                            ; End of function VDPSetupGame
000014EE                            
000014EE                            ; ===========================================================================
000014EE 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014F6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014FE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00001506 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
0000150E 9001 9100 9200             		dc.w $9001, $9100, $9200
00001514                            
00001514                            ; ---------------------------------------------------------------------------
00001514                            ; Subroutine to	clear the screen
00001514                            ; ---------------------------------------------------------------------------
00001514                            
00001514                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001514                            
00001514                            
00001514                            ClearScreen:
00001514 4BF9 00C0 0004             		lea	($C00004).l,a5
0000151A 3ABC 8F01                  		move.w	#$8F01,(a5)
0000151E 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001524 3ABC 9780                  		move.w	#$9780,(a5)
00001528 2ABC 4000 0083             		move.l	#$40000083,(a5)
0000152E 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001536                            
00001536                            loc_12E6:
00001536 3215                       		move.w	(a5),d1
00001538 0801 0001                  		btst	#1,d1
0000153C 66F8                       		bne.s	loc_12E6
0000153E                            
0000153E 3ABC 8F02                  		move.w	#$8F02,(a5)
00001542 4BF9 00C0 0004             		lea	($C00004).l,a5
00001548 3ABC 8F01                  		move.w	#$8F01,(a5)
0000154C 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001552 3ABC 9780                  		move.w	#$9780,(a5)
00001556 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000155C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001564                            
00001564                            loc_1314:
00001564 3215                       		move.w	(a5),d1
00001566 0801 0001                  		btst	#1,d1
0000156A 66F8                       		bne.s	loc_1314
0000156C                            
0000156C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001570 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001578 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001580 43F8 F800                  		lea	($FFFFF800).w,a1
00001584 7000                       		moveq	#0,d0
00001586 323C 009F                  		move.w	#$9F,d1
0000158A                            
0000158A                            loc_133A:
0000158A 22C0                       		move.l	d0,(a1)+
0000158C 51C9 FFFC                  		dbf	d1,loc_133A
00001590                            
00001590 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001594 7000                       		moveq	#0,d0
00001596 323C 00FF                  		move.w	#$FF,d1
0000159A                            
0000159A                            loc_134A:
0000159A 22C0                       		move.l	d0,(a1)+
0000159C 51C9 FFFC                  		dbf	d1,loc_134A
000015A0 4E75                       		rts	
000015A2                            ; End of function ClearScreen
000015A2                            
000015A2                            ; ---------------------------------------------------------------------------
000015A2                            ; Subroutine to	load the sound driver
000015A2                            ; ---------------------------------------------------------------------------
000015A2                            
000015A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015A2                            
000015A2                            
000015A2                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
000015A2 4E71                       		nop	
000015A4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000015AC 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015B4 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
000015BA 43F9 00A0 0000             		lea	($A00000).l,a1
000015C0 6100 0000                  		bsr.w	KosDec		; decompress
000015C4 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015CC 4E71                       		nop	
000015CE 4E71                       		nop	
000015D0 4E71                       		nop	
000015D2 4E71                       		nop	
000015D4 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015DC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015E4 4E75                       		rts	
000015E6                            ; End of function SoundDriverLoad
000015E6                            
000015E6                            ; ---------------------------------------------------------------------------
000015E6                            ; Subroutine to	play a sound or	music track
000015E6                            ; ---------------------------------------------------------------------------
000015E6                            
000015E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015E6                            
000015E6                            
000015E6                            PlaySound:
000015E6 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015EA 4E75                       		rts	
000015EC                            ; End of function PlaySound
000015EC                            
000015EC                            ; ---------------------------------------------------------------------------
000015EC                            ; Subroutine to	play a special sound/music (E0-E4)
000015EC                            ;
000015EC                            ; E0 - Fade out
000015EC                            ; E1 - Sega
000015EC                            ; E2 - Speed up
000015EC                            ; E3 - Normal speed
000015EC                            ; E4 - Stop
000015EC                            ; ---------------------------------------------------------------------------
000015EC                            
000015EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015EC                            
000015EC                            
000015EC                            PlaySound_Special:
000015EC 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015F0 4E75                       		rts	
000015F2                            ; End of function PlaySound_Special
000015F2                            
000015F2                            ; ===========================================================================
000015F2                            ; ---------------------------------------------------------------------------
000015F2                            ; Unused sound/music subroutine
000015F2                            ; ---------------------------------------------------------------------------
000015F2                            
000015F2                            PlaySound_Unk:
000015F2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015F6 4E75                       		rts	
000015F8                            
000015F8                            ; ---------------------------------------------------------------------------
000015F8                            ; Subroutine to	pause the game
000015F8                            ; ---------------------------------------------------------------------------
000015F8                            
000015F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015F8                            
000015F8                            
000015F8                            PauseGame:				; XREF: Level_MainLoop; et al
000015F8 4E71                       		nop	
000015FA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015FE 6700                       		beq.s	Unpause		; if not, branch
00001600 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
00001604 6600                       		bne.s	loc_13BE	; if yes, branch
00001606 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000160C 6700                       		beq.s	Pause_DoNothing	; if not, branch
0000160E                            
0000160E                            loc_13BE:
0000160E 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
00001614 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
0000161A                            
0000161A                            loc_13CA:
0000161A 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001620 6100 0000                  		bsr.w	DelayProgram
00001624 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001628 6700                       		beq.s	Pause_ChkStart	; if not, branch
0000162A 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001630 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001632 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001638 4E71                       		nop	
0000163A 6000                       		bra.s	loc_1404
0000163C                            ; ===========================================================================
0000163C                            
0000163C                            Pause_ChkBC:				; XREF: PauseGame
0000163C 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001642 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001644 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000164A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000164C                            
0000164C                            Pause_ChkStart:				; XREF: PauseGame
0000164C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001652 67C6                       		beq.s	loc_13CA	; if not, branch
00001654                            
00001654                            loc_1404:				; XREF: PauseGame
00001654 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000165A                            
0000165A                            Unpause:				; XREF: PauseGame
0000165A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001660                            
00001660                            Pause_DoNothing:			; XREF: PauseGame
00001660 4E75                       		rts	
00001662                            ; ===========================================================================
00001662                            
00001662                            Pause_SlowMo:				; XREF: PauseGame
00001662 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001668 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000166E 4E75                       		rts	
00001670                            ; End of function PauseGame
00001670                            
00001670                            ; ---------------------------------------------------------------------------
00001670                            ; Subroutine to	display	patterns via the VDP
00001670                            ; ---------------------------------------------------------------------------
00001670                            
00001670                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001670                            
00001670                            
00001670                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001670 4DF9 00C0 0000             		lea	($C00000).l,a6
00001676 283C 0080 0000             		move.l	#$800000,d4
0000167C                            
0000167C                            loc_142C:
0000167C 2D40 0004                  		move.l	d0,4(a6)
00001680 3601                       		move.w	d1,d3
00001682                            
00001682                            loc_1432:
00001682 3C99                       		move.w	(a1)+,(a6)
00001684 51CB FFFC                  		dbf	d3,loc_1432
00001688 D084                       		add.l	d4,d0
0000168A 51CA FFF0                  		dbf	d2,loc_142C
0000168E 4E75                       		rts	
00001690                            ; End of function ShowVDPGraphics
00001690                            
00001690                            ; ---------------------------------------------------------------------------
00001690                            ; Nemesis decompression	algorithm
00001690                            ; ---------------------------------------------------------------------------
00001690                            
00001690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001690                            
00001690                            
00001690                            NemDec:
00001690 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001694 47F9 0000 0000             		lea	(loc_1502).l,a3
0000169A 49F9 00C0 0000             		lea	($C00000).l,a4
000016A0 6000                       		bra.s	loc_145C
000016A2                            ; ===========================================================================
000016A2 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
000016A6 47F9 0000 0000             		lea	(loc_1518).l,a3
000016AC                            
000016AC                            loc_145C:				; XREF: NemDec
000016AC 43F8 AA00                  		lea	($FFFFAA00).w,a1
000016B0 3418                       		move.w	(a0)+,d2
000016B2 E34A                       		lsl.w	#1,d2
000016B4 6400                       		bcc.s	loc_146A
000016B6 D6FC 000A                  		adda.w	#$A,a3
000016BA                            
000016BA                            loc_146A:
000016BA E54A                       		lsl.w	#2,d2
000016BC 3A42                       		movea.w	d2,a5
000016BE 7608                       		moveq	#8,d3
000016C0 7400                       		moveq	#0,d2
000016C2 7800                       		moveq	#0,d4
000016C4 6100 0000                  		bsr.w	NemDec4
000016C8 1A18                       		move.b	(a0)+,d5
000016CA E145                       		asl.w	#8,d5
000016CC 1A18                       		move.b	(a0)+,d5
000016CE 3C3C 0010                  		move.w	#$10,d6
000016D2 6100                       		bsr.s	NemDec2
000016D4 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016D8 4E75                       		rts	
000016DA                            ; End of function NemDec
000016DA                            
000016DA                            
000016DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016DA                            
000016DA                            
000016DA                            NemDec2:				; XREF: NemDec
000016DA 3E06                       		move.w	d6,d7
000016DC 5147                       		subq.w	#8,d7
000016DE 3205                       		move.w	d5,d1
000016E0 EE69                       		lsr.w	d7,d1
000016E2 0C01 00FC                  		cmpi.b	#-4,d1
000016E6 6400                       		bcc.s	loc_14D6
000016E8 0241 00FF                  		andi.w	#$FF,d1
000016EC D241                       		add.w	d1,d1
000016EE 1031 1000                  		move.b	(a1,d1.w),d0
000016F2 4880                       		ext.w	d0
000016F4 9C40                       		sub.w	d0,d6
000016F6 0C46 0009                  		cmpi.w	#9,d6
000016FA 6400                       		bcc.s	loc_14B2
000016FC 5046                       		addq.w	#8,d6
000016FE E145                       		asl.w	#8,d5
00001700 1A18                       		move.b	(a0)+,d5
00001702                            
00001702                            loc_14B2:
00001702 1231 1001                  		move.b	1(a1,d1.w),d1
00001706 3001                       		move.w	d1,d0
00001708 0241 000F                  		andi.w	#$F,d1
0000170C 0240 00F0                  		andi.w	#$F0,d0
00001710                            
00001710                            loc_14C0:				; XREF: NemDec3
00001710 E848                       		lsr.w	#4,d0
00001712                            
00001712                            loc_14C2:				; XREF: NemDec3
00001712 E98C                       		lsl.l	#4,d4
00001714 8801                       		or.b	d1,d4
00001716 5343                       		subq.w	#1,d3
00001718 6600                       		bne.s	loc_14D0
0000171A 4ED3                       		jmp	(a3)
0000171C                            ; End of function NemDec2
0000171C                            
0000171C                            
0000171C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000171C                            
0000171C                            
0000171C                            NemDec3:				; XREF: loc_1502
0000171C 7800                       		moveq	#0,d4
0000171E 7608                       		moveq	#8,d3
00001720                            
00001720                            loc_14D0:				; XREF: NemDec2
00001720 51C8 FFF0                  		dbf	d0,loc_14C2
00001724 60B4                       		bra.s	NemDec2
00001726                            ; ===========================================================================
00001726                            
00001726                            loc_14D6:				; XREF: NemDec2
00001726 5D46                       		subq.w	#6,d6
00001728 0C46 0009                  		cmpi.w	#9,d6
0000172C 6400                       		bcc.s	loc_14E4
0000172E 5046                       		addq.w	#8,d6
00001730 E145                       		asl.w	#8,d5
00001732 1A18                       		move.b	(a0)+,d5
00001734                            
00001734                            loc_14E4:				; XREF: NemDec3
00001734 5F46                       		subq.w	#7,d6
00001736 3205                       		move.w	d5,d1
00001738 EC69                       		lsr.w	d6,d1
0000173A 3001                       		move.w	d1,d0
0000173C 0241 000F                  		andi.w	#$F,d1
00001740 0240 0070                  		andi.w	#$70,d0
00001744 0C46 0009                  		cmpi.w	#9,d6
00001748 64C6                       		bcc.s	loc_14C0
0000174A 5046                       		addq.w	#8,d6
0000174C E145                       		asl.w	#8,d5
0000174E 1A18                       		move.b	(a0)+,d5
00001750 60BE                       		bra.s	loc_14C0
00001752                            ; End of function NemDec3
00001752                            
00001752                            ; ===========================================================================
00001752                            
00001752                            loc_1502:				; XREF: NemDec
00001752 2884                       		move.l	d4,(a4)
00001754 534D                       		subq.w	#1,a5
00001756 380D                       		move.w	a5,d4
00001758 66C2                       		bne.s	NemDec3
0000175A 4E75                       		rts	
0000175C                            ; ===========================================================================
0000175C B982                       		eor.l	d4,d2
0000175E 2882                       		move.l	d2,(a4)
00001760 534D                       		subq.w	#1,a5
00001762 380D                       		move.w	a5,d4
00001764 66B6                       		bne.s	NemDec3
00001766 4E75                       		rts	
00001768                            ; ===========================================================================
00001768                            
00001768                            loc_1518:				; XREF: NemDec
00001768 28C4                       		move.l	d4,(a4)+
0000176A 534D                       		subq.w	#1,a5
0000176C 380D                       		move.w	a5,d4
0000176E 66AC                       		bne.s	NemDec3
00001770 4E75                       		rts	
00001772                            ; ===========================================================================
00001772 B982                       		eor.l	d4,d2
00001774 28C2                       		move.l	d2,(a4)+
00001776 534D                       		subq.w	#1,a5
00001778 380D                       		move.w	a5,d4
0000177A 66A0                       		bne.s	NemDec3
0000177C 4E75                       		rts	
0000177E                            
0000177E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000177E                            
0000177E                            
0000177E                            NemDec4:				; XREF: NemDec
0000177E 1018                       		move.b	(a0)+,d0
00001780                            
00001780                            loc_1530:
00001780 0C00 00FF                  		cmpi.b	#-1,d0
00001784 6600                       		bne.s	loc_1538
00001786 4E75                       		rts	
00001788                            ; ===========================================================================
00001788                            
00001788                            loc_1538:				; XREF: NemDec4
00001788 3E00                       		move.w	d0,d7
0000178A                            
0000178A                            loc_153A:
0000178A 1018                       		move.b	(a0)+,d0
0000178C 0C00 0080                  		cmpi.b	#$80,d0
00001790 64EE                       		bcc.s	loc_1530
00001792 1200                       		move.b	d0,d1
00001794 0247 000F                  		andi.w	#$F,d7
00001798 0241 0070                  		andi.w	#$70,d1
0000179C 8E41                       		or.w	d1,d7
0000179E 0240 000F                  		andi.w	#$F,d0
000017A2 1200                       		move.b	d0,d1
000017A4 E149                       		lsl.w	#8,d1
000017A6 8E41                       		or.w	d1,d7
000017A8 7208                       		moveq	#8,d1
000017AA 9240                       		sub.w	d0,d1
000017AC 6600                       		bne.s	loc_1568
000017AE 1018                       		move.b	(a0)+,d0
000017B0 D040                       		add.w	d0,d0
000017B2 3387 0000                  		move.w	d7,(a1,d0.w)
000017B6 60D2                       		bra.s	loc_153A
000017B8                            ; ===========================================================================
000017B8                            
000017B8                            loc_1568:				; XREF: NemDec4
000017B8 1018                       		move.b	(a0)+,d0
000017BA E368                       		lsl.w	d1,d0
000017BC D040                       		add.w	d0,d0
000017BE 7A01                       		moveq	#1,d5
000017C0 E36D                       		lsl.w	d1,d5
000017C2 5345                       		subq.w	#1,d5
000017C4                            
000017C4                            loc_1574:
000017C4 3387 0000                  		move.w	d7,(a1,d0.w)
000017C8 5440                       		addq.w	#2,d0
000017CA 51CD FFF8                  		dbf	d5,loc_1574
000017CE 60BA                       		bra.s	loc_153A
000017D0                            ; End of function NemDec4
000017D0                            
000017D0                            ; ---------------------------------------------------------------------------
000017D0                            ; Subroutine to	load pattern load cues
000017D0                            ; ---------------------------------------------------------------------------
000017D0                            
000017D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D0                            
000017D0                            
000017D0                            LoadPLC:
000017D0 48E7 0060                  		movem.l	a1-a2,-(sp)
000017D4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017DA D040                       		add.w	d0,d0
000017DC 3031 0000                  		move.w	(a1,d0.w),d0
000017E0 43F1 0000                  		lea	(a1,d0.w),a1
000017E4 45F8 F680                  		lea	($FFFFF680).w,a2
000017E8                            
000017E8                            loc_1598:
000017E8 4A92                       		tst.l	(a2)
000017EA 6700                       		beq.s	loc_15A0
000017EC 5C4A                       		addq.w	#6,a2
000017EE 60F8                       		bra.s	loc_1598
000017F0                            ; ===========================================================================
000017F0                            
000017F0                            loc_15A0:				; XREF: LoadPLC
000017F0 3019                       		move.w	(a1)+,d0
000017F2 6B00                       		bmi.s	loc_15AC
000017F4                            
000017F4                            loc_15A4:
000017F4 24D9                       		move.l	(a1)+,(a2)+
000017F6 34D9                       		move.w	(a1)+,(a2)+
000017F8 51C8 FFFA                  		dbf	d0,loc_15A4
000017FC                            
000017FC                            loc_15AC:
000017FC 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001800 4E75                       		rts	
00001802                            ; End of function LoadPLC
00001802                            
00001802                            
00001802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001802                            
00001802                            
00001802                            LoadPLC2:
00001802 48E7 0060                  		movem.l	a1-a2,-(sp)
00001806 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000180C D040                       		add.w	d0,d0
0000180E 3031 0000                  		move.w	(a1,d0.w),d0
00001812 43F1 0000                  		lea	(a1,d0.w),a1
00001816 6100                       		bsr.s	ClearPLC
00001818 45F8 F680                  		lea	($FFFFF680).w,a2
0000181C 3019                       		move.w	(a1)+,d0
0000181E 6B00                       		bmi.s	loc_15D8
00001820                            
00001820                            loc_15D0:
00001820 24D9                       		move.l	(a1)+,(a2)+
00001822 34D9                       		move.w	(a1)+,(a2)+
00001824 51C8 FFFA                  		dbf	d0,loc_15D0
00001828                            
00001828                            loc_15D8:
00001828 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000182C 4E75                       		rts	
0000182E                            ; End of function LoadPLC2
0000182E                            
0000182E                            ; ---------------------------------------------------------------------------
0000182E                            ; Subroutine to	clear the pattern load cues
0000182E                            ; ---------------------------------------------------------------------------
0000182E                            
0000182E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000182E                            
0000182E                            
0000182E                            ClearPLC:				; XREF: LoadPLC2
0000182E 45F8 F680                  		lea	($FFFFF680).w,a2
00001832 701F                       		moveq	#$1F,d0
00001834                            
00001834                            ClearPLC_Loop:
00001834 429A                       		clr.l	(a2)+
00001836 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000183A 4E75                       		rts	
0000183C                            ; End of function ClearPLC
0000183C                            
0000183C                            ; ---------------------------------------------------------------------------
0000183C                            ; Subroutine to	use graphics listed in a pattern load cue
0000183C                            ; ---------------------------------------------------------------------------
0000183C                            
0000183C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000183C                            
0000183C                            
0000183C                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000183C 4AB8 F680                  		tst.l	($FFFFF680).w
00001840 6700                       		beq.s	locret_1640
00001842 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001846 6600                       		bne.s	locret_1640
00001848 2078 F680                  		movea.l	($FFFFF680).w,a0
0000184C 47F9 0000 1752             		lea	(loc_1502).l,a3
00001852 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001856 3418                       		move.w	(a0)+,d2
00001858 6A00                       		bpl.s	loc_160E
0000185A D6FC 000A                  		adda.w	#$A,a3
0000185E                            
0000185E                            loc_160E:
0000185E 0242 7FFF                  		andi.w	#$7FFF,d2
00001862 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001866 6100 FF16                  		bsr.w	NemDec4
0000186A 1A18                       		move.b	(a0)+,d5
0000186C E145                       		asl.w	#8,d5
0000186E 1A18                       		move.b	(a0)+,d5
00001870 7C10                       		moveq	#$10,d6
00001872 7000                       		moveq	#0,d0
00001874 21C8 F680                  		move.l	a0,($FFFFF680).w
00001878 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000187C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001880 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001884 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001888 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000188C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001890                            
00001890                            locret_1640:
00001890 4E75                       		rts	
00001892                            ; End of function RunPLC_RAM
00001892                            
00001892                            
00001892                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001892                            
00001892                            
00001892                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001892 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001896 6700 0000                  		beq.w	locret_16DA
0000189A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000018A0 7000                       		moveq	#0,d0
000018A2 3038 F684                  		move.w	($FFFFF684).w,d0
000018A6 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000018AC 6000                       		bra.s	loc_1676
000018AE                            ; End of function sub_1642
000018AE                            
000018AE                            
000018AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018AE                            
000018AE                            
000018AE                            sub_165E:				; XREF: Demo_Time
000018AE 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000018B2 6700                       		beq.s	locret_16DA
000018B4 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000018BA 7000                       		moveq	#0,d0
000018BC 3038 F684                  		move.w	($FFFFF684).w,d0
000018C0 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000018C6                            
000018C6                            loc_1676:				; XREF: sub_1642
000018C6 49F9 00C0 0004             		lea	($C00004).l,a4
000018CC E588                       		lsl.l	#2,d0
000018CE E448                       		lsr.w	#2,d0
000018D0 0040 4000                  		ori.w	#$4000,d0
000018D4 4840                       		swap	d0
000018D6 2880                       		move.l	d0,(a4)
000018D8 594C                       		subq.w	#4,a4
000018DA 2078 F680                  		movea.l	($FFFFF680).w,a0
000018DE 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018E2 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018E6 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018EA 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018EE 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018F2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018F6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018FA                            
000018FA                            loc_16AA:				; XREF: sub_165E
000018FA 3A7C 0008                  		movea.w	#8,a5
000018FE 6100 FE1C                  		bsr.w	NemDec3
00001902 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001906 6700                       		beq.s	loc_16DC
00001908 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
0000190C 66EC                       		bne.s	loc_16AA
0000190E 21C8 F680                  		move.l	a0,($FFFFF680).w
00001912 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001916 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000191A 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
0000191E 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001922 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001926 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000192A                            
0000192A                            locret_16DA:				; XREF: sub_1642
0000192A 4E75                       		rts	
0000192C                            ; ===========================================================================
0000192C                            
0000192C                            loc_16DC:				; XREF: sub_165E
0000192C 41F8 F680                  		lea	($FFFFF680).w,a0
00001930 7015                       		moveq	#$15,d0
00001932                            
00001932                            loc_16E2:				; XREF: sub_165E
00001932 20E8 0006                  		move.l	6(a0),(a0)+
00001936 51C8 FFFA                  		dbf	d0,loc_16E2
0000193A 4E75                       		rts	
0000193C                            ; End of function sub_165E
0000193C                            
0000193C                            ; ---------------------------------------------------------------------------
0000193C                            ; Subroutine to	execute	the pattern load cue
0000193C                            ; ---------------------------------------------------------------------------
0000193C                            
0000193C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193C                            
0000193C                            
0000193C                            RunPLC_ROM:
0000193C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001942 D040                       		add.w	d0,d0
00001944 3031 0000                  		move.w	(a1,d0.w),d0
00001948 43F1 0000                  		lea	(a1,d0.w),a1
0000194C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000194E                            
0000194E                            RunPLC_Loop:
0000194E 2059                       		movea.l	(a1)+,a0	; get art pointer
00001950 7000                       		moveq	#0,d0
00001952 3019                       		move.w	(a1)+,d0	; get VRAM address
00001954 E588                       		lsl.l	#2,d0		; divide address by $20
00001956 E448                       		lsr.w	#2,d0
00001958 0040 4000                  		ori.w	#$4000,d0
0000195C 4840                       		swap	d0
0000195E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001964 6100 FD2A                  		bsr.w	NemDec		; decompress
00001968 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000196C 4E75                       		rts	
0000196E                            ; End of function RunPLC_ROM
0000196E                            
0000196E                            ; ---------------------------------------------------------------------------
0000196E                            ; Enigma decompression algorithm
0000196E                            ; ---------------------------------------------------------------------------
0000196E                            
0000196E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000196E                            
0000196E                            
0000196E                            EniDec:
0000196E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001972 3640                       		movea.w	d0,a3
00001974 1018                       		move.b	(a0)+,d0
00001976 4880                       		ext.w	d0
00001978 3A40                       		movea.w	d0,a5
0000197A 1818                       		move.b	(a0)+,d4
0000197C E70C                       		lsl.b	#3,d4
0000197E 3458                       		movea.w	(a0)+,a2
00001980 D4CB                       		adda.w	a3,a2
00001982 3858                       		movea.w	(a0)+,a4
00001984 D8CB                       		adda.w	a3,a4
00001986 1A18                       		move.b	(a0)+,d5
00001988 E145                       		asl.w	#8,d5
0000198A 1A18                       		move.b	(a0)+,d5
0000198C 7C10                       		moveq	#$10,d6
0000198E                            
0000198E                            loc_173E:				; XREF: loc_1768
0000198E 7007                       		moveq	#7,d0
00001990 3E06                       		move.w	d6,d7
00001992 9E40                       		sub.w	d0,d7
00001994 3205                       		move.w	d5,d1
00001996 EE69                       		lsr.w	d7,d1
00001998 0241 007F                  		andi.w	#$7F,d1
0000199C 3401                       		move.w	d1,d2
0000199E 0C41 0040                  		cmpi.w	#$40,d1
000019A2 6400                       		bcc.s	loc_1758
000019A4 7006                       		moveq	#6,d0
000019A6 E24A                       		lsr.w	#1,d2
000019A8                            
000019A8                            loc_1758:
000019A8 6100 0000                  		bsr.w	sub_188C
000019AC 0242 000F                  		andi.w	#$F,d2
000019B0 E849                       		lsr.w	#4,d1
000019B2 D241                       		add.w	d1,d1
000019B4 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
000019B8                            ; End of function EniDec
000019B8                            
000019B8                            ; ===========================================================================
000019B8                            
000019B8                            loc_1768:				; XREF: loc_17B4
000019B8 32CA                       		move.w	a2,(a1)+
000019BA 524A                       		addq.w	#1,a2
000019BC 51CA FFFA                  		dbf	d2,loc_1768
000019C0 60CC                       		bra.s	loc_173E
000019C2                            ; ===========================================================================
000019C2                            
000019C2                            loc_1772:				; XREF: loc_17B4
000019C2 32CC                       		move.w	a4,(a1)+
000019C4 51CA FFFC                  		dbf	d2,loc_1772
000019C8 60C4                       		bra.s	loc_173E
000019CA                            ; ===========================================================================
000019CA                            
000019CA                            loc_177A:				; XREF: loc_17B4
000019CA 6100 0000                  		bsr.w	loc_17DC
000019CE                            
000019CE                            loc_177E:
000019CE 32C1                       		move.w	d1,(a1)+
000019D0 51CA FFFC                  		dbf	d2,loc_177E
000019D4 60B8                       		bra.s	loc_173E
000019D6                            ; ===========================================================================
000019D6                            
000019D6                            loc_1786:				; XREF: loc_17B4
000019D6 6100 0000                  		bsr.w	loc_17DC
000019DA                            
000019DA                            loc_178A:
000019DA 32C1                       		move.w	d1,(a1)+
000019DC 5241                       		addq.w	#1,d1
000019DE 51CA FFFA                  		dbf	d2,loc_178A
000019E2 60AA                       		bra.s	loc_173E
000019E4                            ; ===========================================================================
000019E4                            
000019E4                            loc_1794:				; XREF: loc_17B4
000019E4 6100 0000                  		bsr.w	loc_17DC
000019E8                            
000019E8                            loc_1798:
000019E8 32C1                       		move.w	d1,(a1)+
000019EA 5341                       		subq.w	#1,d1
000019EC 51CA FFFA                  		dbf	d2,loc_1798
000019F0 609C                       		bra.s	loc_173E
000019F2                            ; ===========================================================================
000019F2                            
000019F2                            loc_17A2:				; XREF: loc_17B4
000019F2 0C42 000F                  		cmpi.w	#$F,d2
000019F6 6700                       		beq.s	loc_17C4
000019F8                            
000019F8                            loc_17A8:
000019F8 6100 0000                  		bsr.w	loc_17DC
000019FC 32C1                       		move.w	d1,(a1)+
000019FE 51CA FFF8                  		dbf	d2,loc_17A8
00001A02 608A                       		bra.s	loc_173E
00001A04                            ; ===========================================================================
00001A04                            
00001A04                            loc_17B4:				; XREF: EniDec
00001A04 60B2                       		bra.s	loc_1768
00001A06                            ; ===========================================================================
00001A06 60B0                       		bra.s	loc_1768
00001A08                            ; ===========================================================================
00001A08 60B8                       		bra.s	loc_1772
00001A0A                            ; ===========================================================================
00001A0A 60B6                       		bra.s	loc_1772
00001A0C                            ; ===========================================================================
00001A0C 60BC                       		bra.s	loc_177A
00001A0E                            ; ===========================================================================
00001A0E 60C6                       		bra.s	loc_1786
00001A10                            ; ===========================================================================
00001A10 60D2                       		bra.s	loc_1794
00001A12                            ; ===========================================================================
00001A12 60DE                       		bra.s	loc_17A2
00001A14                            ; ===========================================================================
00001A14                            
00001A14                            loc_17C4:				; XREF: loc_17A2
00001A14 5348                       		subq.w	#1,a0
00001A16 0C46 0010                  		cmpi.w	#$10,d6
00001A1A 6600                       		bne.s	loc_17CE
00001A1C 5348                       		subq.w	#1,a0
00001A1E                            
00001A1E                            loc_17CE:
00001A1E 3008                       		move.w	a0,d0
00001A20 E248                       		lsr.w	#1,d0
00001A22 6400                       		bcc.s	loc_17D6
00001A24 5248                       		addq.w	#1,a0
00001A26                            
00001A26                            loc_17D6:
00001A26 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001A2A 4E75                       		rts	
00001A2C                            ; ===========================================================================
00001A2C                            
00001A2C                            loc_17DC:				; XREF: loc_17A2
00001A2C 360B                       		move.w	a3,d3
00001A2E 1204                       		move.b	d4,d1
00001A30 D201                       		add.b	d1,d1
00001A32 6400                       		bcc.s	loc_17EE
00001A34 5346                       		subq.w	#1,d6
00001A36 0D05                       		btst	d6,d5
00001A38 6700                       		beq.s	loc_17EE
00001A3A 0043 8000                  		ori.w	#-$8000,d3
00001A3E                            
00001A3E                            loc_17EE:
00001A3E D201                       		add.b	d1,d1
00001A40 6400                       		bcc.s	loc_17FC
00001A42 5346                       		subq.w	#1,d6
00001A44 0D05                       		btst	d6,d5
00001A46 6700                       		beq.s	loc_17FC
00001A48 0643 4000                  		addi.w	#$4000,d3
00001A4C                            
00001A4C                            loc_17FC:
00001A4C D201                       		add.b	d1,d1
00001A4E 6400                       		bcc.s	loc_180A
00001A50 5346                       		subq.w	#1,d6
00001A52 0D05                       		btst	d6,d5
00001A54 6700                       		beq.s	loc_180A
00001A56 0643 2000                  		addi.w	#$2000,d3
00001A5A                            
00001A5A                            loc_180A:
00001A5A D201                       		add.b	d1,d1
00001A5C 6400                       		bcc.s	loc_1818
00001A5E 5346                       		subq.w	#1,d6
00001A60 0D05                       		btst	d6,d5
00001A62 6700                       		beq.s	loc_1818
00001A64 0043 1000                  		ori.w	#$1000,d3
00001A68                            
00001A68                            loc_1818:
00001A68 D201                       		add.b	d1,d1
00001A6A 6400                       		bcc.s	loc_1826
00001A6C 5346                       		subq.w	#1,d6
00001A6E 0D05                       		btst	d6,d5
00001A70 6700                       		beq.s	loc_1826
00001A72 0043 0800                  		ori.w	#$800,d3
00001A76                            
00001A76                            loc_1826:
00001A76 3205                       		move.w	d5,d1
00001A78 3E06                       		move.w	d6,d7
00001A7A 9E4D                       		sub.w	a5,d7
00001A7C 6400                       		bcc.s	loc_1856
00001A7E 3C07                       		move.w	d7,d6
00001A80 0646 0010                  		addi.w	#$10,d6
00001A84 4447                       		neg.w	d7
00001A86 EF69                       		lsl.w	d7,d1
00001A88 1A10                       		move.b	(a0),d5
00001A8A EF3D                       		rol.b	d7,d5
00001A8C DE47                       		add.w	d7,d7
00001A8E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A92 D245                       		add.w	d5,d1
00001A94                            
00001A94                            loc_1844:				; XREF: loc_1868
00001A94 300D                       		move.w	a5,d0
00001A96 D040                       		add.w	d0,d0
00001A98 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A9C D243                       		add.w	d3,d1
00001A9E 1A18                       		move.b	(a0)+,d5
00001AA0 E14D                       		lsl.w	#8,d5
00001AA2 1A18                       		move.b	(a0)+,d5
00001AA4 4E75                       		rts	
00001AA6                            ; ===========================================================================
00001AA6                            
00001AA6                            loc_1856:				; XREF: loc_1826
00001AA6 6700                       		beq.s	loc_1868
00001AA8 EE69                       		lsr.w	d7,d1
00001AAA 300D                       		move.w	a5,d0
00001AAC D040                       		add.w	d0,d0
00001AAE C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001AB2 D243                       		add.w	d3,d1
00001AB4 300D                       		move.w	a5,d0
00001AB6 6000                       		bra.s	sub_188C
00001AB8                            ; ===========================================================================
00001AB8                            
00001AB8                            loc_1868:				; XREF: loc_1856
00001AB8 7C10                       		moveq	#$10,d6
00001ABA                            
00001ABA                            loc_186A:
00001ABA 60D8                       		bra.s	loc_1844
00001ABC                            ; ===========================================================================
00001ABC 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AD2 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001ADC                            
00001ADC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ADC                            
00001ADC                            
00001ADC                            sub_188C:				; XREF: EniDec
00001ADC 9C40                       		sub.w	d0,d6
00001ADE 0C46 0009                  		cmpi.w	#9,d6
00001AE2 6400                       		bcc.s	locret_189A
00001AE4 5046                       		addq.w	#8,d6
00001AE6 E145                       		asl.w	#8,d5
00001AE8 1A18                       		move.b	(a0)+,d5
00001AEA                            
00001AEA                            locret_189A:
00001AEA 4E75                       		rts	
00001AEC                            ; End of function sub_188C
00001AEC                            
00001AEC                            ; ---------------------------------------------------------------------------
00001AEC                            ; Kosinski decompression algorithm
00001AEC                            ; ---------------------------------------------------------------------------
00001AEC                            
00001AEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AEC                            
00001AEC                            
00001AEC                            KosDec:
00001AEC                            
00001AEC =FFFFFFFE                  var_2		= -2
00001AEC =FFFFFFFF                  var_1		= -1
00001AEC                            
00001AEC 558F                       		subq.l	#2,sp
00001AEE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF2 1E98                       		move.b	(a0)+,(sp)
00001AF4 3A17                       		move.w	(sp),d5
00001AF6 780F                       		moveq	#$F,d4
00001AF8                            
00001AF8                            loc_18A8:
00001AF8 E24D                       		lsr.w	#1,d5
00001AFA 40C6                       		move	sr,d6
00001AFC 51CC 0000                  		dbf	d4,loc_18BA
00001B00 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B04 1E98                       		move.b	(a0)+,(sp)
00001B06 3A17                       		move.w	(sp),d5
00001B08 780F                       		moveq	#$F,d4
00001B0A                            
00001B0A                            loc_18BA:
00001B0A 44C6                       		move	d6,ccr
00001B0C 6400                       		bcc.s	loc_18C2
00001B0E 12D8                       		move.b	(a0)+,(a1)+
00001B10 60E6                       		bra.s	loc_18A8
00001B12                            ; ===========================================================================
00001B12                            
00001B12                            loc_18C2:				; XREF: KosDec
00001B12 7600                       		moveq	#0,d3
00001B14 E24D                       		lsr.w	#1,d5
00001B16 40C6                       		move	sr,d6
00001B18 51CC 0000                  		dbf	d4,loc_18D6
00001B1C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B20 1E98                       		move.b	(a0)+,(sp)
00001B22 3A17                       		move.w	(sp),d5
00001B24 780F                       		moveq	#$F,d4
00001B26                            
00001B26                            loc_18D6:
00001B26 44C6                       		move	d6,ccr
00001B28 6500                       		bcs.s	loc_1906
00001B2A E24D                       		lsr.w	#1,d5
00001B2C 51CC 0000                  		dbf	d4,loc_18EA
00001B30 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B34 1E98                       		move.b	(a0)+,(sp)
00001B36 3A17                       		move.w	(sp),d5
00001B38 780F                       		moveq	#$F,d4
00001B3A                            
00001B3A                            loc_18EA:
00001B3A E353                       		roxl.w	#1,d3
00001B3C E24D                       		lsr.w	#1,d5
00001B3E 51CC 0000                  		dbf	d4,loc_18FC
00001B42 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B46 1E98                       		move.b	(a0)+,(sp)
00001B48 3A17                       		move.w	(sp),d5
00001B4A 780F                       		moveq	#$F,d4
00001B4C                            
00001B4C                            loc_18FC:
00001B4C E353                       		roxl.w	#1,d3
00001B4E 5243                       		addq.w	#1,d3
00001B50 74FF                       		moveq	#-1,d2
00001B52 1418                       		move.b	(a0)+,d2
00001B54 6000                       		bra.s	loc_191C
00001B56                            ; ===========================================================================
00001B56                            
00001B56                            loc_1906:				; XREF: loc_18C2
00001B56 1018                       		move.b	(a0)+,d0
00001B58 1218                       		move.b	(a0)+,d1
00001B5A 74FF                       		moveq	#-1,d2
00001B5C 1401                       		move.b	d1,d2
00001B5E EB4A                       		lsl.w	#5,d2
00001B60 1400                       		move.b	d0,d2
00001B62 0241 0007                  		andi.w	#7,d1
00001B66 6700                       		beq.s	loc_1928
00001B68 1601                       		move.b	d1,d3
00001B6A 5243                       		addq.w	#1,d3
00001B6C                            
00001B6C                            loc_191C:
00001B6C 1031 2000                  		move.b	(a1,d2.w),d0
00001B70 12C0                       		move.b	d0,(a1)+
00001B72 51CB FFF8                  		dbf	d3,loc_191C
00001B76 6080                       		bra.s	loc_18A8
00001B78                            ; ===========================================================================
00001B78                            
00001B78                            loc_1928:				; XREF: loc_1906
00001B78 1218                       		move.b	(a0)+,d1
00001B7A 6700                       		beq.s	loc_1938
00001B7C 0C01 0001                  		cmpi.b	#1,d1
00001B80 6700 FF76                  		beq.w	loc_18A8
00001B84 1601                       		move.b	d1,d3
00001B86 60E4                       		bra.s	loc_191C
00001B88                            ; ===========================================================================
00001B88                            
00001B88                            loc_1938:				; XREF: loc_1928
00001B88 548F                       		addq.l	#2,sp
00001B8A 4E75                       		rts	
00001B8C                            ; End of function KosDec
00001B8C                            
00001B8C                            ; ---------------------------------------------------------------------------
00001B8C                            ; Pallet cycling routine loading subroutine
00001B8C                            ; ---------------------------------------------------------------------------
00001B8C                            
00001B8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B8C                            
00001B8C                            
00001B8C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B8C 7400                       		moveq	#0,d2
00001B8E 7000                       		moveq	#0,d0
00001B90 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B94 D040                       		add.w	d0,d0		; multiply by 2
00001B96 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B9A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B9E                            ; End of function PalCycle_Load
00001B9E                            
00001B9E                            ; ===========================================================================
00001B9E                            ; ---------------------------------------------------------------------------
00001B9E                            ; Pallet cycling routines
00001B9E                            ; ---------------------------------------------------------------------------
00001B9E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001BA0 0000                       		dc.w PalCycle_LZ-PalCycle
00001BA2 0000                       		dc.w PalCycle_MZ-PalCycle
00001BA4 0000                       		dc.w PalCycle_SLZ-PalCycle
00001BA6 0000                       		dc.w PalCycle_SYZ-PalCycle
00001BA8 0000                       		dc.w PalCycle_SBZ-PalCycle
00001BAA 0000                       		dc.w PalCycle_GHZ-PalCycle
00001BAC 0000                       		dc.w PalCycle_GHZ-PalCycle
00001BAE                            
00001BAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BAE                            
00001BAE                            
00001BAE                            PalCycle_Title:				; XREF: TitleScreen
00001BAE 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001BB4 6000                       		bra.s	loc_196A
00001BB6                            ; ===========================================================================
00001BB6                            
00001BB6                            PalCycle_GHZ:				; XREF: PalCycle
00001BB6 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001BBC                            
00001BBC                            loc_196A:				; XREF: PalCycle_Title
00001BBC 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BC0 6A00                       		bpl.s	locret_1990
00001BC2 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001BC8 3038 F632                  		move.w	($FFFFF632).w,d0
00001BCC 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BD0 0240 0003                  		andi.w	#3,d0
00001BD4 E748                       		lsl.w	#3,d0
00001BD6 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BDA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BDE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BE2                            
00001BE2                            locret_1990:
00001BE2 4E75                       		rts	
00001BE4                            ; End of function PalCycle_Title
00001BE4                            
00001BE4                            
00001BE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BE4                            
00001BE4                            
00001BE4                            PalCycle_LZ:				; XREF: PalCycle
00001BE4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BE8 6A00                       		bpl.s	loc_19D8
00001BEA 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BF0 3038 F632                  		move.w	($FFFFF632).w,d0
00001BF4 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BF8 0240 0003                  		andi.w	#3,d0
00001BFC E748                       		lsl.w	#3,d0
00001BFE 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001C04 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001C0A 6600                       		bne.s	loc_19C0
00001C0C 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001C12                            
00001C12                            loc_19C0:
00001C12 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001C16 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C1A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C1E 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001C22 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C26 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C2A                            
00001C2A                            loc_19D8:
00001C2A 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C2E 0240 0007                  		andi.w	#7,d0
00001C32 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C36 6700                       		beq.s	locret_1A3A
00001C38 7201                       		moveq	#1,d1
00001C3A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C3E 6700                       		beq.s	loc_19F0
00001C40 4441                       		neg.w	d1
00001C42                            
00001C42                            loc_19F0:
00001C42 3038 F650                  		move.w	($FFFFF650).w,d0
00001C46 0240 0003                  		andi.w	#3,d0
00001C4A D041                       		add.w	d1,d0
00001C4C 0C40 0003                  		cmpi.w	#3,d0
00001C50 6500                       		bcs.s	loc_1A0A
00001C52 3200                       		move.w	d0,d1
00001C54 7000                       		moveq	#0,d0
00001C56 4A41                       		tst.w	d1
00001C58 6A00                       		bpl.s	loc_1A0A
00001C5A 7002                       		moveq	#2,d0
00001C5C                            
00001C5C                            loc_1A0A:
00001C5C 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C60 D040                       		add.w	d0,d0
00001C62 3200                       		move.w	d0,d1
00001C64 D040                       		add.w	d0,d0
00001C66 D041                       		add.w	d1,d0
00001C68 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C6E 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C72 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C76 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C7A 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C80 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C84 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C88 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C8C                            
00001C8C                            locret_1A3A:
00001C8C 4E75                       		rts	
00001C8E                            ; End of function PalCycle_LZ
00001C8E                            
00001C8E                            ; ===========================================================================
00001C8E 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C96                            ; ===========================================================================
00001C96                            
00001C96                            PalCycle_MZ:				; XREF: PalCycle
00001C96 4E75                       		rts	
00001C98                            
00001C98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C98                            
00001C98                            
00001C98                            PalCycle_SLZ:				; XREF: PalCycle
00001C98 4E75                       		rts	
00001C9A                            ; End of function PalCycle_SLZ
00001C9A                            
00001C9A                            
00001C9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C9A                            
00001C9A                            
00001C9A                            PalCycle_SYZ:				; XREF: PalCycle
00001C9A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C9E 6A00                       		bpl.s	locret_1AC6
00001CA0 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001CA6 3038 F632                  		move.w	($FFFFF632).w,d0
00001CAA 5278 F632                  		addq.w	#1,($FFFFF632).w
00001CAE 0240 0003                  		andi.w	#3,d0
00001CB2 E548                       		lsl.w	#2,d0
00001CB4 3200                       		move.w	d0,d1
00001CB6 D040                       		add.w	d0,d0
00001CB8 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CBE 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CC2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CC6 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CCA 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CD0 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CD4 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CD8 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CDE                            
00001CDE                            locret_1AC6:
00001CDE 4E75                       		rts	
00001CE0                            ; End of function PalCycle_SYZ
00001CE0                            
00001CE0                            
00001CE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CE0                            
00001CE0                            
00001CE0                            PalCycle_SBZ:				; XREF: PalCycle
00001CE0 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CE6 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CEA 6700                       		beq.s	loc_1ADA
00001CEC 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CF2                            
00001CF2                            loc_1ADA:
00001CF2 43F8 F650                  		lea	($FFFFF650).w,a1
00001CF6 321A                       		move.w	(a2)+,d1
00001CF8                            
00001CF8                            loc_1AE0:
00001CF8 5311                       		subq.b	#1,(a1)
00001CFA 6B00                       		bmi.s	loc_1AEA
00001CFC 5489                       		addq.l	#2,a1
00001CFE 5C8A                       		addq.l	#6,a2
00001D00 6000                       		bra.s	loc_1B06
00001D02                            ; ===========================================================================
00001D02                            
00001D02                            loc_1AEA:				; XREF: PalCycle_SBZ
00001D02 12DA                       		move.b	(a2)+,(a1)+
00001D04 1011                       		move.b	(a1),d0
00001D06 5200                       		addq.b	#1,d0
00001D08 B01A                       		cmp.b	(a2)+,d0
00001D0A 6500                       		bcs.s	loc_1AF6
00001D0C 7000                       		moveq	#0,d0
00001D0E                            
00001D0E                            loc_1AF6:
00001D0E 12C0                       		move.b	d0,(a1)+
00001D10 0240 000F                  		andi.w	#$F,d0
00001D14 D040                       		add.w	d0,d0
00001D16 305A                       		movea.w	(a2)+,a0
00001D18 365A                       		movea.w	(a2)+,a3
00001D1A 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D1E                            
00001D1E                            loc_1B06:				; XREF: PalCycle_SBZ
00001D1E 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D22 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D26 6A00                       		bpl.s	locret_1B64
00001D28 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D2E 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D34 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D38 6700                       		beq.s	loc_1B2E
00001D3A 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D40 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D46                            
00001D46                            loc_1B2E:
00001D46 72FF                       		moveq	#-1,d1
00001D48 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D4C 6700                       		beq.s	loc_1B38
00001D4E 4441                       		neg.w	d1
00001D50                            
00001D50                            loc_1B38:
00001D50 3038 F632                  		move.w	($FFFFF632).w,d0
00001D54 0240 0003                  		andi.w	#3,d0
00001D58 D041                       		add.w	d1,d0
00001D5A 0C40 0003                  		cmpi.w	#3,d0
00001D5E 6500                       		bcs.s	loc_1B52
00001D60 3200                       		move.w	d0,d1
00001D62 7000                       		moveq	#0,d0
00001D64 4A41                       		tst.w	d1
00001D66 6A00                       		bpl.s	loc_1B52
00001D68 7002                       		moveq	#2,d0
00001D6A                            
00001D6A                            loc_1B52:
00001D6A 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D6E D040                       		add.w	d0,d0
00001D70 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D74 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D78 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D7C                            
00001D7C                            locret_1B64:
00001D7C 4E75                       		rts	
00001D7E                            ; End of function PalCycle_SBZ
00001D7E                            
00001D7E                            ; ===========================================================================
00001D7E                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D9E                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DBE                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DDE                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DF0                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001E02                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E6A                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E8E                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001EAE                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EBE                            
00001EBE                            Pal_SBZCycList:
00001EBE                            	include "_inc\SBZ pallet script 1.asm"
00001EBE                            ; ---------------------------------------------------------------------------
00001EBE                            ; Scrap Brain Zone 1 pallet cycling script
00001EBE                            ; ---------------------------------------------------------------------------
00001EBE 0008                       	dc.w 8			; number of entries - 1
00001EC0 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001EC2 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001EC4 FB50                       	dc.w $FB50		; RAM address
00001EC6 0D08                       	dc.b $D, 8
00001EC8 0000                       	dc.w Pal_SBZCyc2
00001ECA FB52                       	dc.w $FB52
00001ECC 0E08                       	dc.b $E, 8
00001ECE 0000                       	dc.w Pal_SBZCyc3
00001ED0 FB6E                       	dc.w $FB6E
00001ED2 0B08                       	dc.b $B, 8
00001ED4 0000                       	dc.w Pal_SBZCyc5
00001ED6 FB70                       	dc.w $FB70
00001ED8 0708                       	dc.b 7,	8
00001EDA 0000                       	dc.w Pal_SBZCyc6
00001EDC FB72                       	dc.w $FB72
00001EDE 1C10                       	dc.b $1C, $10
00001EE0 0000                       	dc.w Pal_SBZCyc7
00001EE2 FB7E                       	dc.w $FB7E
00001EE4 0303                       	dc.b 3,	3
00001EE6 0000                       	dc.w Pal_SBZCyc8
00001EE8 FB78                       	dc.w $FB78
00001EEA 0303                       	dc.b 3,	3
00001EEC 0000                       	dc.w Pal_SBZCyc8+2
00001EEE FB7A                       	dc.w $FB7A
00001EF0 0303                       	dc.b 3,	3
00001EF2 0000                       	dc.w Pal_SBZCyc8+4
00001EF4 FB7C                       	dc.w $FB7C
00001EF6                            	even
00001EF6                            	even
00001EF6                            
00001EF6                            Pal_SBZCycList2:
00001EF6                            	include "_inc\SBZ pallet script 2.asm"
00001EF6                            ; ---------------------------------------------------------------------------
00001EF6                            ; Scrap Brain Zone 2 pallet cycling script
00001EF6                            ; ---------------------------------------------------------------------------
00001EF6 0006                       	dc.w 6
00001EF8 0708                       	dc.b 7,	8
00001EFA 0000                       	dc.w Pal_SBZCyc1
00001EFC FB50                       	dc.w $FB50
00001EFE 0D08                       	dc.b $D, 8
00001F00 0000                       	dc.w Pal_SBZCyc2
00001F02 FB52                       	dc.w $FB52
00001F04 0908                       	dc.b 9,	8
00001F06 0000                       	dc.w Pal_SBZCyc9
00001F08 FB70                       	dc.w $FB70
00001F0A 0708                       	dc.b 7,	8
00001F0C 0000                       	dc.w Pal_SBZCyc6
00001F0E FB72                       	dc.w $FB72
00001F10 0303                       	dc.b 3,	3
00001F12 0000                       	dc.w Pal_SBZCyc8
00001F14 FB78                       	dc.w $FB78
00001F16 0303                       	dc.b 3,	3
00001F18 0000                       	dc.w Pal_SBZCyc8+2
00001F1A FB7A                       	dc.w $FB7A
00001F1C 0303                       	dc.b 3,	3
00001F1E 0000                       	dc.w Pal_SBZCyc8+4
00001F20 FB7C                       	dc.w $FB7C
00001F22                            	even
00001F22                            	even
00001F22                            
00001F22                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F32                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F42                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F52                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F5E                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F6E                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F7E                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F9E                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001FA8                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001FB8                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FC4                            ; ---------------------------------------------------------------------------
00001FC4                            ; Subroutine to	fade out and fade in
00001FC4                            ; ---------------------------------------------------------------------------
00001FC4                            
00001FC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FC4                            
00001FC4                            
00001FC4                            Pal_FadeTo:
00001FC4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FCA                            
00001FCA                            Pal_FadeTo2:
00001FCA 7000                       		moveq	#0,d0
00001FCC 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD0 1038 F626                  		move.b	($FFFFF626).w,d0
00001FD4 D0C0                       		adda.w	d0,a0
00001FD6 7200                       		moveq	#0,d1
00001FD8 1038 F627                  		move.b	($FFFFF627).w,d0
00001FDC                            
00001FDC                            Pal_ToBlack:
00001FDC 30C1                       		move.w	d1,(a0)+
00001FDE 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FE2                            
00001FE2 383C 0015                  		move.w	#$15,d4
00001FE6 1A3C 0009                  		move.b	#9,d5
00001FEA                            
00001FEA                            loc_1DCE:
00001FEA 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FF0 6100 0000                  		bsr.w	DelayProgram
00001FF4 6100                       		bsr.s	Pal_FadeIn
00001FF6 6100 F844                  		bsr.w	RunPLC_RAM
00001FFA 51CC FFEE                  		dbf	d4,loc_1DCE
00001FFE 4E75                       		rts	
00002000                            ; End of function Pal_FadeTo
00002000                            
00002000                            ; ---------------------------------------------------------------------------
00002000                            ; Pallet fade-in subroutine
00002000                            ; ---------------------------------------------------------------------------
00002000                            
00002000                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002000                            
00002000                            
00002000                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002000 7000                       		moveq	#0,d0
00002002 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002006 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000200A 1038 F626                  		move.b	($FFFFF626).w,d0
0000200E D0C0                       		adda.w	d0,a0
00002010 D2C0                       		adda.w	d0,a1
00002012 1038 F627                  		move.b	($FFFFF627).w,d0
00002016                            
00002016                            loc_1DFA:
00002016 6100                       		bsr.s	Pal_AddColor
00002018 51C8 FFFC                  		dbf	d0,loc_1DFA
0000201C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002022 6600                       		bne.s	locret_1E24
00002024 7000                       		moveq	#0,d0
00002026 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000202A 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000202E 1038 F626                  		move.b	($FFFFF626).w,d0
00002032 D0C0                       		adda.w	d0,a0
00002034 D2C0                       		adda.w	d0,a1
00002036 1038 F627                  		move.b	($FFFFF627).w,d0
0000203A                            
0000203A                            loc_1E1E:
0000203A 6100                       		bsr.s	Pal_AddColor
0000203C 51C8 FFFC                  		dbf	d0,loc_1E1E
00002040                            
00002040                            locret_1E24:
00002040 4E75                       		rts	
00002042                            ; End of function Pal_FadeIn
00002042                            
00002042                            
00002042                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002042                            
00002042                            
00002042                            Pal_AddColor:				; XREF: Pal_FadeIn
00002042 3419                       		move.w	(a1)+,d2
00002044 3610                       		move.w	(a0),d3
00002046 B642                       		cmp.w	d2,d3
00002048 6700                       		beq.s	loc_1E4E
0000204A 3203                       		move.w	d3,d1
0000204C 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002050 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002052 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002054 30C1                       		move.w	d1,(a0)+	; update pallet
00002056 4E75                       		rts	
00002058                            ; ===========================================================================
00002058                            
00002058                            Pal_AddGreen:				; XREF: Pal_AddColor
00002058 3203                       		move.w	d3,d1
0000205A 0641 0020                  		addi.w	#$20,d1		; increase green value
0000205E B242                       		cmp.w	d2,d1
00002060 6200                       		bhi.s	Pal_AddRed
00002062 30C1                       		move.w	d1,(a0)+	; update pallet
00002064 4E75                       		rts	
00002066                            ; ===========================================================================
00002066                            
00002066                            Pal_AddRed:				; XREF: Pal_AddGreen
00002066 5458                       		addq.w	#2,(a0)+	; increase red value
00002068 4E75                       		rts	
0000206A                            ; ===========================================================================
0000206A                            
0000206A                            loc_1E4E:				; XREF: Pal_AddColor
0000206A 5448                       		addq.w	#2,a0
0000206C 4E75                       		rts	
0000206E                            ; End of function Pal_AddColor
0000206E                            
0000206E                            
0000206E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000206E                            
0000206E                            
0000206E                            Pal_FadeFrom:
0000206E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002074 383C 0015                  		move.w	#$15,d4
00002078                            loc_1E5C:
00002078 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000207E 6100 0000                  		bsr.w	DelayProgram
00002082 6100                       		bsr.s	Pal_FadeOut
00002084 6100 F7B6                  		bsr.w	RunPLC_RAM
00002088 51CC FFEE                  		dbf	d4,loc_1E5C
0000208C 4E75                       		rts	
0000208E                            ; End of function Pal_FadeFrom
0000208E                            
0000208E                            ; ---------------------------------------------------------------------------
0000208E                            ; Pallet fade-out subroutine
0000208E                            ; ---------------------------------------------------------------------------
0000208E                            
0000208E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000208E                            
0000208E                            
0000208E                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000208E 7000                       		moveq	#0,d0
00002090 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002094 1038 F626                  		move.b	($FFFFF626).w,d0
00002098 D0C0                       		adda.w	d0,a0
0000209A 1038 F627                  		move.b	($FFFFF627).w,d0
0000209E                            
0000209E                            loc_1E82:
0000209E 6100                       		bsr.s	Pal_DecColor
000020A0 51C8 FFFC                  		dbf	d0,loc_1E82
000020A4                            
000020A4 7000                       		moveq	#0,d0
000020A6 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020AA 1038 F626                  		move.b	($FFFFF626).w,d0
000020AE D0C0                       		adda.w	d0,a0
000020B0 1038 F627                  		move.b	($FFFFF627).w,d0
000020B4                            
000020B4                            loc_1E98:
000020B4 6100                       		bsr.s	Pal_DecColor
000020B6 51C8 FFFC                  		dbf	d0,loc_1E98
000020BA 4E75                       		rts	
000020BC                            ; End of function Pal_FadeOut
000020BC                            
000020BC                            
000020BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020BC                            
000020BC                            
000020BC                            Pal_DecColor:				; XREF: Pal_FadeOut
000020BC 3410                       		move.w	(a0),d2
000020BE 6700                       		beq.s	loc_1ECC
000020C0 3202                       		move.w	d2,d1
000020C2 0241 000E                  		andi.w	#$E,d1
000020C6 6700                       		beq.s	Pal_DecGreen
000020C8 5558                       		subq.w	#2,(a0)+	; decrease red value
000020CA 4E75                       		rts	
000020CC                            ; ===========================================================================
000020CC                            
000020CC                            Pal_DecGreen:				; XREF: Pal_DecColor
000020CC 3202                       		move.w	d2,d1
000020CE 0241 00E0                  		andi.w	#$E0,d1
000020D2 6700                       		beq.s	Pal_DecBlue
000020D4 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020D8 4E75                       		rts	
000020DA                            ; ===========================================================================
000020DA                            
000020DA                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020DA 3202                       		move.w	d2,d1
000020DC 0241 0E00                  		andi.w	#$E00,d1
000020E0 6700                       		beq.s	loc_1ECC
000020E2 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020E6 4E75                       		rts	
000020E8                            ; ===========================================================================
000020E8                            
000020E8                            loc_1ECC:				; XREF: Pal_DecColor
000020E8 5448                       		addq.w	#2,a0
000020EA 4E75                       		rts	
000020EC                            ; End of function Pal_DecColor
000020EC                            
000020EC                            ; ---------------------------------------------------------------------------
000020EC                            ; Subroutine to	fill the pallet	with white (special stage)
000020EC                            ; ---------------------------------------------------------------------------
000020EC                            
000020EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020EC                            
000020EC                            
000020EC                            Pal_MakeWhite:				; XREF: SpecialStage
000020EC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020F2 7000                       		moveq	#0,d0
000020F4 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020F8 1038 F626                  		move.b	($FFFFF626).w,d0
000020FC D0C0                       		adda.w	d0,a0
000020FE 323C 0EEE                  		move.w	#$EEE,d1
00002102 1038 F627                  		move.b	($FFFFF627).w,d0
00002106                            
00002106                            PalWhite_Loop:
00002106 30C1                       		move.w	d1,(a0)+
00002108 51C8 FFFC                  		dbf	d0,PalWhite_Loop
0000210C 383C 0015                  		move.w	#$15,d4
00002110                            
00002110                            loc_1EF4:
00002110 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002116 6100 0000                  		bsr.w	DelayProgram
0000211A 6100                       		bsr.s	Pal_WhiteToBlack
0000211C 6100 F71E                  		bsr.w	RunPLC_RAM
00002120 51CC FFEE                  		dbf	d4,loc_1EF4
00002124 4E75                       		rts	
00002126                            ; End of function Pal_MakeWhite
00002126                            
00002126                            
00002126                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002126                            
00002126                            
00002126                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00002126 7000                       		moveq	#0,d0
00002128 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000212C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002130 1038 F626                  		move.b	($FFFFF626).w,d0
00002134 D0C0                       		adda.w	d0,a0
00002136 D2C0                       		adda.w	d0,a1
00002138 1038 F627                  		move.b	($FFFFF627).w,d0
0000213C                            
0000213C                            loc_1F20:
0000213C 6100                       		bsr.s	Pal_DecColor2
0000213E 51C8 FFFC                  		dbf	d0,loc_1F20
00002142                            
00002142 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002148 6600                       		bne.s	locret_1F4A
0000214A 7000                       		moveq	#0,d0
0000214C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002150 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002154 1038 F626                  		move.b	($FFFFF626).w,d0
00002158 D0C0                       		adda.w	d0,a0
0000215A D2C0                       		adda.w	d0,a1
0000215C 1038 F627                  		move.b	($FFFFF627).w,d0
00002160                            
00002160                            loc_1F44:
00002160 6100                       		bsr.s	Pal_DecColor2
00002162 51C8 FFFC                  		dbf	d0,loc_1F44
00002166                            
00002166                            locret_1F4A:
00002166 4E75                       		rts	
00002168                            ; End of function Pal_WhiteToBlack
00002168                            
00002168                            
00002168                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002168                            
00002168                            
00002168                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002168 3419                       		move.w	(a1)+,d2
0000216A 3610                       		move.w	(a0),d3
0000216C B642                       		cmp.w	d2,d3
0000216E 6700                       		beq.s	loc_1F78
00002170 3203                       		move.w	d3,d1
00002172 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002176 6500                       		bcs.s	loc_1F64
00002178 B242                       		cmp.w	d2,d1
0000217A 6500                       		bcs.s	loc_1F64
0000217C 30C1                       		move.w	d1,(a0)+
0000217E 4E75                       		rts	
00002180                            ; ===========================================================================
00002180                            
00002180                            loc_1F64:				; XREF: Pal_DecColor2
00002180 3203                       		move.w	d3,d1
00002182 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002186 6500                       		bcs.s	loc_1F74
00002188 B242                       		cmp.w	d2,d1
0000218A 6500                       		bcs.s	loc_1F74
0000218C 30C1                       		move.w	d1,(a0)+
0000218E 4E75                       		rts	
00002190                            ; ===========================================================================
00002190                            
00002190                            loc_1F74:				; XREF: loc_1F64
00002190 5558                       		subq.w	#2,(a0)+	; decrease red value
00002192 4E75                       		rts	
00002194                            ; ===========================================================================
00002194                            
00002194                            loc_1F78:				; XREF: Pal_DecColor2
00002194 5448                       		addq.w	#2,a0
00002196 4E75                       		rts	
00002198                            ; End of function Pal_DecColor2
00002198                            
00002198                            ; ---------------------------------------------------------------------------
00002198                            ; Subroutine to	make a white flash when	you enter a special stage
00002198                            ; ---------------------------------------------------------------------------
00002198                            
00002198                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002198                            
00002198                            
00002198                            Pal_MakeFlash:				; XREF: SpecialStage
00002198 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000219E 383C 0015                  		move.w	#$15,d4
000021A2                            
000021A2                            loc_1F86:
000021A2 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000021A8 6100 0000                  		bsr.w	DelayProgram
000021AC 6100                       		bsr.s	Pal_ToWhite
000021AE 6100 F68C                  		bsr.w	RunPLC_RAM
000021B2 51CC FFEE                  		dbf	d4,loc_1F86
000021B6 4E75                       		rts	
000021B8                            ; End of function Pal_MakeFlash
000021B8                            
000021B8                            
000021B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021B8                            
000021B8                            
000021B8                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000021B8 7000                       		moveq	#0,d0
000021BA 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021BE 1038 F626                  		move.b	($FFFFF626).w,d0
000021C2 D0C0                       		adda.w	d0,a0
000021C4 1038 F627                  		move.b	($FFFFF627).w,d0
000021C8                            
000021C8                            loc_1FAC:
000021C8 6100                       		bsr.s	Pal_AddColor2
000021CA 51C8 FFFC                  		dbf	d0,loc_1FAC
000021CE 7000                       		moveq	#0,d0
000021D0 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021D4 1038 F626                  		move.b	($FFFFF626).w,d0
000021D8 D0C0                       		adda.w	d0,a0
000021DA 1038 F627                  		move.b	($FFFFF627).w,d0
000021DE                            
000021DE                            loc_1FC2:
000021DE 6100                       		bsr.s	Pal_AddColor2
000021E0 51C8 FFFC                  		dbf	d0,loc_1FC2
000021E4 4E75                       		rts	
000021E6                            ; End of function Pal_ToWhite
000021E6                            
000021E6                            
000021E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021E6                            
000021E6                            
000021E6                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021E6 3410                       		move.w	(a0),d2
000021E8 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021EC 6700                       		beq.s	loc_2006
000021EE 3202                       		move.w	d2,d1
000021F0 0241 000E                  		andi.w	#$E,d1
000021F4 0C41 000E                  		cmpi.w	#$E,d1
000021F8 6700                       		beq.s	loc_1FE2
000021FA 5458                       		addq.w	#2,(a0)+	; increase red value
000021FC 4E75                       		rts	
000021FE                            ; ===========================================================================
000021FE                            
000021FE                            loc_1FE2:				; XREF: Pal_AddColor2
000021FE 3202                       		move.w	d2,d1
00002200 0241 00E0                  		andi.w	#$E0,d1
00002204 0C41 00E0                  		cmpi.w	#$E0,d1
00002208 6700                       		beq.s	loc_1FF4
0000220A 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
0000220E 4E75                       		rts	
00002210                            ; ===========================================================================
00002210                            
00002210                            loc_1FF4:				; XREF: loc_1FE2
00002210 3202                       		move.w	d2,d1
00002212 0241 0E00                  		andi.w	#$E00,d1
00002216 0C41 0E00                  		cmpi.w	#$E00,d1
0000221A 6700                       		beq.s	loc_2006
0000221C 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002220 4E75                       		rts	
00002222                            ; ===========================================================================
00002222                            
00002222                            loc_2006:				; XREF: Pal_AddColor2
00002222 5448                       		addq.w	#2,a0
00002224 4E75                       		rts	
00002226                            ; End of function Pal_AddColor2
00002226                            
00002226                            ; ---------------------------------------------------------------------------
00002226                            ; Pallet cycling routine - Sega	logo
00002226                            ; ---------------------------------------------------------------------------
00002226                            
00002226                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002226                            
00002226                            
00002226                            PalCycle_Sega:				; XREF: SegaScreen
00002226 4A38 F635                  		tst.b	($FFFFF635).w
0000222A 6600                       		bne.s	loc_206A
0000222C 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002230 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002236 7205                       		moveq	#5,d1
00002238 3038 F632                  		move.w	($FFFFF632).w,d0
0000223C                            
0000223C                            loc_2020:
0000223C 6A00                       		bpl.s	loc_202A
0000223E 5448                       		addq.w	#2,a0
00002240 5341                       		subq.w	#1,d1
00002242 5440                       		addq.w	#2,d0
00002244 60F6                       		bra.s	loc_2020
00002246                            ; ===========================================================================
00002246                            
00002246                            loc_202A:				; XREF: PalCycle_Sega
00002246 3400                       		move.w	d0,d2
00002248 0242 001E                  		andi.w	#$1E,d2
0000224C 6600                       		bne.s	loc_2034
0000224E 5440                       		addq.w	#2,d0
00002250                            
00002250                            loc_2034:
00002250 0C40 0060                  		cmpi.w	#$60,d0
00002254 6400                       		bcc.s	loc_203E
00002256 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000225A                            
0000225A                            loc_203E:
0000225A 5440                       		addq.w	#2,d0
0000225C 51C9 FFE8                  		dbf	d1,loc_202A
00002260 3038 F632                  		move.w	($FFFFF632).w,d0
00002264 5440                       		addq.w	#2,d0
00002266 3400                       		move.w	d0,d2
00002268 0242 001E                  		andi.w	#$1E,d2
0000226C 6600                       		bne.s	loc_2054
0000226E 5440                       		addq.w	#2,d0
00002270                            
00002270                            loc_2054:
00002270 0C40 0064                  		cmpi.w	#$64,d0
00002274 6D00                       		blt.s	loc_2062
00002276 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000227C 70F4                       		moveq	#-$C,d0
0000227E                            
0000227E                            loc_2062:
0000227E 31C0 F632                  		move.w	d0,($FFFFF632).w
00002282 7001                       		moveq	#1,d0
00002284 4E75                       		rts	
00002286                            ; ===========================================================================
00002286                            
00002286                            loc_206A:				; XREF: loc_202A
00002286 5338 F634                  		subq.b	#1,($FFFFF634).w
0000228A 6A00                       		bpl.s	loc_20BC
0000228C 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002292 3038 F632                  		move.w	($FFFFF632).w,d0
00002296 0640 000C                  		addi.w	#$C,d0
0000229A 0C40 0030                  		cmpi.w	#$30,d0
0000229E 6500                       		bcs.s	loc_2088
000022A0 7000                       		moveq	#0,d0
000022A2 4E75                       		rts	
000022A4                            ; ===========================================================================
000022A4                            
000022A4                            loc_2088:				; XREF: loc_206A
000022A4 31C0 F632                  		move.w	d0,($FFFFF632).w
000022A8 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000022AE 41F0 0000                  		lea	(a0,d0.w),a0
000022B2 43F8 FB04                  		lea	($FFFFFB04).w,a1
000022B6 22D8                       		move.l	(a0)+,(a1)+
000022B8 22D8                       		move.l	(a0)+,(a1)+
000022BA 3298                       		move.w	(a0)+,(a1)
000022BC 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022C0 7000                       		moveq	#0,d0
000022C2 722C                       		moveq	#$2C,d1
000022C4                            
000022C4                            loc_20A8:
000022C4 3400                       		move.w	d0,d2
000022C6 0242 001E                  		andi.w	#$1E,d2
000022CA 6600                       		bne.s	loc_20B2
000022CC 5440                       		addq.w	#2,d0
000022CE                            
000022CE                            loc_20B2:
000022CE 3390 0000                  		move.w	(a0),(a1,d0.w)
000022D2 5440                       		addq.w	#2,d0
000022D4 51C9 FFEE                  		dbf	d1,loc_20A8
000022D8                            
000022D8                            loc_20BC:
000022D8 7001                       		moveq	#1,d0
000022DA 4E75                       		rts	
000022DC                            ; End of function PalCycle_Sega
000022DC                            
000022DC                            ; ===========================================================================
000022DC                            
000022DC                            Pal_Sega1:	incbin	pallet\sega1.bin
000022E8                            Pal_Sega2:	incbin	pallet\sega2.bin
00002318                            
00002318                            ; ---------------------------------------------------------------------------
00002318                            ; Subroutines to load pallets
00002318                            ; ---------------------------------------------------------------------------
00002318                            
00002318                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002318                            
00002318                            
00002318                            PalLoad1:
00002318 43F9 0000 0000             		lea	(PalPointers).l,a1
0000231E E748                       		lsl.w	#3,d0
00002320 D2C0                       		adda.w	d0,a1
00002322 2459                       		movea.l	(a1)+,a2
00002324 3659                       		movea.w	(a1)+,a3
00002326 D6FC 0080                  		adda.w	#$80,a3
0000232A 3E19                       		move.w	(a1)+,d7
0000232C                            
0000232C                            loc_2110:
0000232C 26DA                       		move.l	(a2)+,(a3)+
0000232E 51CF FFFC                  		dbf	d7,loc_2110
00002332 4E75                       		rts	
00002334                            ; End of function PalLoad1
00002334                            
00002334                            
00002334                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002334                            
00002334                            
00002334                            PalLoad2:
00002334 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233A E748                       		lsl.w	#3,d0
0000233C D2C0                       		adda.w	d0,a1
0000233E 2459                       		movea.l	(a1)+,a2
00002340 3659                       		movea.w	(a1)+,a3
00002342 3E19                       		move.w	(a1)+,d7
00002344                            
00002344                            loc_2128:
00002344 26DA                       		move.l	(a2)+,(a3)+
00002346 51CF FFFC                  		dbf	d7,loc_2128
0000234A 4E75                       		rts	
0000234C                            ; End of function PalLoad2
0000234C                            
0000234C                            ; ---------------------------------------------------------------------------
0000234C                            ; Underwater pallet loading subroutine
0000234C                            ; ---------------------------------------------------------------------------
0000234C                            
0000234C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000234C                            
0000234C                            
0000234C                            PalLoad3_Water:
0000234C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002352 E748                       		lsl.w	#3,d0
00002354 D2C0                       		adda.w	d0,a1
00002356 2459                       		movea.l	(a1)+,a2
00002358 3659                       		movea.w	(a1)+,a3
0000235A 96FC 0080                  		suba.w	#$80,a3
0000235E 3E19                       		move.w	(a1)+,d7
00002360                            
00002360                            loc_2144:
00002360 26DA                       		move.l	(a2)+,(a3)+
00002362 51CF FFFC                  		dbf	d7,loc_2144
00002366 4E75                       		rts	
00002368                            ; End of function PalLoad3_Water
00002368                            
00002368                            
00002368                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002368                            
00002368                            
00002368                            PalLoad4_Water:
00002368 43F9 0000 0000             		lea	(PalPointers).l,a1
0000236E E748                       		lsl.w	#3,d0
00002370 D2C0                       		adda.w	d0,a1
00002372 2459                       		movea.l	(a1)+,a2
00002374 3659                       		movea.w	(a1)+,a3
00002376 96FC 0100                  		suba.w	#$100,a3
0000237A 3E19                       		move.w	(a1)+,d7
0000237C                            
0000237C                            loc_2160:
0000237C 26DA                       		move.l	(a2)+,(a3)+
0000237E 51CF FFFC                  		dbf	d7,loc_2160
00002382 4E75                       		rts	
00002384                            ; End of function PalLoad4_Water
00002384                            
00002384                            ; ===========================================================================
00002384                            ; ---------------------------------------------------------------------------
00002384                            ; Pallet pointers
00002384                            ; ---------------------------------------------------------------------------
00002384                            PalPointers:
00002384                            	include "_inc\Pallet pointers.asm"
00002384                            ; ---------------------------------------------------------------------------
00002384                            ; Pallet pointers
00002384                            ; ---------------------------------------------------------------------------
00002384 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002388 FB00                       	dc.w $FB00		; RAM address
0000238A 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000238C 0000 0000                  	dc.l Pal_Title
00002390 FB00                       	dc.w $FB00
00002392 001F                       	dc.w $1F
00002394 0000 0000                  	dc.l Pal_LevelSel
00002398 FB00                       	dc.w $FB00
0000239A 001F                       	dc.w $1F
0000239C 0000 0000                  	dc.l Pal_Sonic
000023A0 FB00                       	dc.w $FB00
000023A2 0007                       	dc.w 7
000023A4 0000 0000                  	dc.l Pal_GHZ
000023A8 FB20                       	dc.w $FB20
000023AA 0017                       	dc.w $17
000023AC 0000 0000                  	dc.l Pal_LZ
000023B0 FB20                       	dc.w $FB20
000023B2 0017                       	dc.w $17
000023B4 0000 0000                  	dc.l Pal_MZ
000023B8 FB20                       	dc.w $FB20
000023BA 0017                       	dc.w $17
000023BC 0000 0000                  	dc.l Pal_SLZ
000023C0 FB20                       	dc.w $FB20
000023C2 0017                       	dc.w $17
000023C4 0000 0000                  	dc.l Pal_SYZ
000023C8 FB20                       	dc.w $FB20
000023CA 0017                       	dc.w $17
000023CC 0000 0000                  	dc.l Pal_SBZ1
000023D0 FB20                       	dc.w $FB20
000023D2 0017                       	dc.w $17
000023D4 0000 0000                  	dc.l Pal_Special
000023D8 FB00                       	dc.w $FB00
000023DA 001F                       	dc.w $1F
000023DC 0000 0000                  	dc.l Pal_LZWater
000023E0 FB00                       	dc.w $FB00
000023E2 001F                       	dc.w $1F
000023E4 0000 0000                  	dc.l Pal_SBZ3
000023E8 FB20                       	dc.w $FB20
000023EA 0017                       	dc.w $17
000023EC 0000 0000                  	dc.l Pal_SBZ3Water
000023F0 FB00                       	dc.w $FB00
000023F2 001F                       	dc.w $1F
000023F4 0000 0000                  	dc.l Pal_SBZ2
000023F8 FB20                       	dc.w $FB20
000023FA 0017                       	dc.w $17
000023FC 0000 0000                  	dc.l Pal_LZSonWater
00002400 FB00                       	dc.w $FB00
00002402 0007                       	dc.w 7
00002404 0000 0000                  	dc.l Pal_SBZ3SonWat
00002408 FB00                       	dc.w $FB00
0000240A 0007                       	dc.w 7
0000240C 0000 0000                  	dc.l Pal_SpeResult
00002410 FB00                       	dc.w $FB00
00002412 001F                       	dc.w $1F
00002414 0000 0000                  	dc.l Pal_SpeContinue
00002418 FB00                       	dc.w $FB00
0000241A 000F                       	dc.w $F
0000241C 0000 0000                  	dc.l Pal_Ending
00002420 FB00                       	dc.w $FB00
00002422 001F                       	dc.w $1F
00002424 0000 0000                  	dc.l Pal_Idiot
00002428 FB20                       	dc.w $FB20
0000242A 0007                       	dc.w 7
0000242C 0000 0000                  	dc.l Pal_BHZ
00002430 FB20                       	dc.w $FB20
00002432 0017                       	dc.w $17
00002434 0000 0000                  	dc.l Pal_Gronic
00002438 FB00                       	dc.w $FB00
0000243A 0007                       	dc.w 7
0000243C 0000 0000                  	dc.l Pal_LZGroWater
00002440 FB00                       	dc.w $FB00
00002442 0007                       	dc.w 7
00002444 0000 0000                  	dc.l Pal_SBZ3GroWat
00002448 FB00                       	dc.w $FB00
0000244A 0007                       	dc.w 7
0000244C 0000 0000                  	dc.l Pal_Anakama
00002450 FB00                       	dc.w $FB00
00002452 0007                       	dc.w 7
00002452 0007                       	dc.w 7
00002454                            
00002454                            ; ---------------------------------------------------------------------------
00002454                            ; Pallet data
00002454                            ; ---------------------------------------------------------------------------
00002454                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024D4                            Pal_Title:	incbin	pallet\title.bin
00002554                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025D4                            Pal_Sonic:	incbin	pallet\sonic.bin
000025F4                            Pal_GHZ:	incbin	pallet\ghz.bin
00002654                            Pal_LZ:		incbin	pallet\lz.bin
000026B4                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002734                            Pal_MZ:		incbin	pallet\mz.bin
00002794                            Pal_SLZ:	incbin	pallet\slz.bin
000027F4                            Pal_SYZ:	incbin	pallet\syz.bin
00002854                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
000028B4                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00002914                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002994                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029F4                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A74                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A94                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002AB4                            Pal_BHZ:	incbin	pallet\bhz.bin
00002B14                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B94                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002BD4                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002C54                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002C74                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002C94                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002CB4                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002CD4                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002D54                            
00002D54                            ; ---------------------------------------------------------------------------
00002D54                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002D54                            ; ---------------------------------------------------------------------------
00002D54                            
00002D54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D54                            
00002D54                            
00002D54                            DelayProgram:				; XREF: PauseGame
00002D54 46FC 2300                  		move	#$2300,sr
00002D58                            
00002D58                            loc_29AC:
00002D58 4A38 F62A                  		tst.b	($FFFFF62A).w
00002D5C 66FA                       		bne.s	loc_29AC
00002D5E 4E75                       		rts	
00002D60                            ; End of function DelayProgram
00002D60                            
00002D60                            ; ---------------------------------------------------------------------------
00002D60                            ; Subroutine to	generate a pseudo-random number	in d0
00002D60                            ; ---------------------------------------------------------------------------
00002D60                            
00002D60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D60                            
00002D60                            
00002D60                            RandomNumber:
00002D60 2238 F636                  		move.l	($FFFFF636).w,d1
00002D64 6600                       		bne.s	loc_29C0
00002D66 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002D6C                            
00002D6C                            loc_29C0:
00002D6C 2001                       		move.l	d1,d0
00002D6E E581                       		asl.l	#2,d1
00002D70 D280                       		add.l	d0,d1
00002D72 E781                       		asl.l	#3,d1
00002D74 D280                       		add.l	d0,d1
00002D76 3001                       		move.w	d1,d0
00002D78 4841                       		swap	d1
00002D7A D041                       		add.w	d1,d0
00002D7C 3200                       		move.w	d0,d1
00002D7E 4841                       		swap	d1
00002D80 21C1 F636                  		move.l	d1,($FFFFF636).w
00002D84 4E75                       		rts	
00002D86                            ; End of function RandomNumber
00002D86                            
00002D86                            
00002D86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D86                            
00002D86                            
00002D86                            CalcSine:				; XREF: SS_BGAnimate; et al
00002D86 0240 00FF                  		andi.w	#$FF,d0
00002D8A D040                       		add.w	d0,d0
00002D8C 0640 0080                  		addi.w	#$80,d0
00002D90 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002D94 0440 0080                  		subi.w	#$80,d0
00002D98 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D9C 4E75                       		rts	
00002D9E                            ; End of function CalcSine
00002D9E                            
00002D9E                            ; ===========================================================================
00002D9E                            
00002D9E                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
0000301E                            
0000301E                            ; ===========================================================================
0000301E 48E7 6000                  		movem.l	d1-d2,-(sp)
00003022 3200                       		move.w	d0,d1
00003024 4841                       		swap	d1
00003026 7000                       		moveq	#0,d0
00003028 3200                       		move.w	d0,d1
0000302A 7407                       		moveq	#7,d2
0000302C                            
0000302C                            loc_2C80:
0000302C E599                       		rol.l	#2,d1
0000302E D040                       		add.w	d0,d0
00003030 5240                       		addq.w	#1,d0
00003032 9240                       		sub.w	d0,d1
00003034 6400                       		bcc.s	loc_2C9A
00003036 D240                       		add.w	d0,d1
00003038 5340                       		subq.w	#1,d0
0000303A 51CA FFF0                  		dbf	d2,loc_2C80
0000303E E248                       		lsr.w	#1,d0
00003040 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003044 4E75                       		rts	
00003046                            ; ===========================================================================
00003046                            
00003046                            loc_2C9A:
00003046 5240                       		addq.w	#1,d0
00003048 51CA FFE2                  		dbf	d2,loc_2C80
0000304C E248                       		lsr.w	#1,d0
0000304E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003052 4E75                       		rts	
00003054                            
00003054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003054                            
00003054                            
00003054                            CalcAngle:
00003054 48E7 1800                  		movem.l	d3-d4,-(sp)
00003058 7600                       		moveq	#0,d3
0000305A 7800                       		moveq	#0,d4
0000305C 3601                       		move.w	d1,d3
0000305E 3802                       		move.w	d2,d4
00003060 8843                       		or.w	d3,d4
00003062 6700                       		beq.s	loc_2D04
00003064 3802                       		move.w	d2,d4
00003066 4A43                       		tst.w	d3
00003068 6A00 0000                  		bpl.w	loc_2CC2
0000306C 4443                       		neg.w	d3
0000306E                            
0000306E                            loc_2CC2:
0000306E 4A44                       		tst.w	d4
00003070 6A00 0000                  		bpl.w	loc_2CCA
00003074 4444                       		neg.w	d4
00003076                            
00003076                            loc_2CCA:
00003076 B843                       		cmp.w	d3,d4
00003078 6400 0000                  		bcc.w	loc_2CDC
0000307C E18C                       		lsl.l	#8,d4
0000307E 88C3                       		divu.w	d3,d4
00003080 7000                       		moveq	#0,d0
00003082 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003086 6000                       		bra.s	loc_2CE6
00003088                            ; ===========================================================================
00003088                            
00003088                            loc_2CDC:				; XREF: CalcAngle
00003088 E18B                       		lsl.l	#8,d3
0000308A 86C4                       		divu.w	d4,d3
0000308C 7040                       		moveq	#$40,d0
0000308E 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003092                            
00003092                            loc_2CE6:
00003092 4A41                       		tst.w	d1
00003094 6A00 0000                  		bpl.w	loc_2CF2
00003098 4440                       		neg.w	d0
0000309A 0640 0080                  		addi.w	#$80,d0
0000309E                            
0000309E                            loc_2CF2:
0000309E 4A42                       		tst.w	d2
000030A0 6A00 0000                  		bpl.w	loc_2CFE
000030A4 4440                       		neg.w	d0
000030A6 0640 0100                  		addi.w	#$100,d0
000030AA                            
000030AA                            loc_2CFE:
000030AA 4CDF 0018                  		movem.l	(sp)+,d3-d4
000030AE 4E75                       		rts	
000030B0                            ; ===========================================================================
000030B0                            
000030B0                            loc_2D04:				; XREF: CalcAngle
000030B0 303C 0040                  		move.w	#$40,d0
000030B4 4CDF 0018                  		movem.l	(sp)+,d3-d4
000030B8 4E75                       		rts	
000030BA                            ; End of function CalcAngle
000030BA                            
000030BA                            ; ===========================================================================
000030BA                            
000030BA                            Angle_Data:	incbin	misc\angles.bin
000031BC                            
000031BC                            ; ===========================================================================
000031BC                            
000031BC                            ; ---------------------------------------------------------------------------
000031BC                            ; Sega screen
000031BC                            ; ---------------------------------------------------------------------------
000031BC                            
000031BC                            SegaScreen:				; XREF: GameModeArray
000031BC 103C 00E4                  		move.b	#$E4,d0
000031C0 6100 E42A                  		bsr.w	PlaySound_Special ; stop music
000031C4 6100 E668                  		bsr.w	ClearPLC
000031C8 6100 EEA4                  		bsr.w	Pal_FadeFrom
000031CC 4DF9 00C0 0004             		lea	($C00004).l,a6
000031D2 3CBC 8004                  		move.w	#$8004,(a6)
000031D6 3CBC 8230                  		move.w	#$8230,(a6)
000031DA 3CBC 8407                  		move.w	#$8407,(a6)
000031DE 3CBC 8700                  		move.w	#$8700,(a6)
000031E2 3CBC 8B00                  		move.w	#$8B00,(a6)
000031E6 3CBC 8C81                  		move.w	#$8C81,(a6)
000031EA 4238 F64E                  		clr.b	($FFFFF64E).w
000031EE 46FC 2700                  		move	#$2700,sr
000031F2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031F6 0200 00BF                  		andi.b	#$BF,d0
000031FA 33C0 00C0 0004             		move.w	d0,($C00004).l
00003200 6100 E312                  		bsr.w	ClearScreen
00003204 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000320E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003214 6100 E47A                  		bsr.w	NemDec
00003218 43F9 00FF 0000             		lea	($FF0000).l,a1
0000321E 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003224 303C 0000                  		move.w	#0,d0
00003228 6100 E744                  		bsr.w	EniDec
0000322C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003232 203C 6510 0003             		move.l	#$65100003,d0
00003238 7217                       		moveq	#$17,d1
0000323A 7407                       		moveq	#7,d2
0000323C 6100 E432                  		bsr.w	ShowVDPGraphics
00003240 43F9 00FF 0180             		lea	($FF0180).l,a1
00003246 203C 4000 0003             		move.l	#$40000003,d0
0000324C 7227                       		moveq	#$27,d1
0000324E 741B                       		moveq	#$1B,d2
00003250 6100 E41E                  		bsr.w	ShowVDPGraphics
00003254 7000                       		moveq	#0,d0
00003256 6100 F0DC                  		bsr.w	PalLoad2	; load Sega logo pallet
0000325A 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00003260 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003266 31FC 0000 F662             		move.w	#0,($FFFFF662).w
0000326C 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00003272 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003276 0000 0040                  		ori.b	#$40,d0
0000327A 33C0 00C0 0004             		move.w	d0,($C00004).l
00003280                            
00003280                            Sega_WaitPallet:
00003280 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003286 6100 FACC                  		bsr.w	DelayProgram
0000328A 6100 EF9A                  		bsr.w	PalCycle_Sega
0000328E 66F0                       		bne.s	Sega_WaitPallet
00003290                            
00003290 103C 00E1                  		move.b	#$E1,d0
00003294 6100 E356                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003298 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
0000329E 6100 FAB4                  		bsr.w	DelayProgram
000032A2 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000032A8                            
000032A8                            Sega_WaitEnd:
000032A8 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000032AE 6100 FAA4                  		bsr.w	DelayProgram
000032B2 4A78 F614                  		tst.w	($FFFFF614).w
000032B6 6700                       		beq.s	Sega_GotoTitle
000032B8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000032BE 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000032C0                            
000032C0                            Sega_GotoTitle:
000032C0 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
000032C6 4E75                       		rts	
000032C8                            ; ===========================================================================
000032C8                            
000032C8                            ; ---------------------------------------------------------------------------
000032C8                            ; Title	screen
000032C8                            ; ---------------------------------------------------------------------------
000032C8                            
000032C8                            TitleScreen:				; XREF: GameModeArray
000032C8 103C 00E4                  		move.b	#$E4,d0
000032CC 6100 E31E                  		bsr.w	PlaySound_Special ; stop music
000032D0 6100 ED9C                  		bsr.w	Pal_FadeFrom
000032D4 6100 E558                  		bsr.w	ClearPLC
000032D8 46FC 2700                  		move	#$2700,sr
000032DC 6100 E2C4                  		bsr.w	SoundDriverLoad
000032E0 4DF9 00C0 0004             		lea	($C00004).l,a6
000032E6 3CBC 8004                  		move.w	#$8004,(a6)
000032EA 3CBC 8230                  		move.w	#$8230,(a6)
000032EE 3CBC 8407                  		move.w	#$8407,(a6)
000032F2 3CBC 9001                  		move.w	#$9001,(a6)
000032F6 3CBC 9200                  		move.w	#$9200,(a6)
000032FA 3CBC 8B03                  		move.w	#$8B03,(a6)
000032FE 3CBC 8720                  		move.w	#$8720,(a6)
00003302 4238 F64E                  		clr.b	($FFFFF64E).w
00003306 6100 E20C                  		bsr.w	ClearScreen
0000330A 43F8 D000                  		lea	($FFFFD000).w,a1
0000330E 7000                       		moveq	#0,d0
00003310 323C 07FF                  		move.w	#$7FF,d1
00003314                            
00003314                            Title_ClrObjRam:
00003314 22C0                       		move.l	d0,(a1)+
00003316 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
0000331A                            
0000331A                            ; gomer
0000331A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003324 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
0000332A 6100 E364                  		bsr.w	NemDec
0000332E 7003                       		moveq	#3,d0		; load Sonic's pallet
00003330 6100 EFE6                  		bsr.w	PalLoad1
00003334                            
00003334 43F9 00FF 0000             		lea	($FF0000).l,a1
0000333A 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
00003340 303C 0000                  		move.w	#0,d0
00003344 6100 E628                  		bsr.w	EniDec
00003348                            ; help how the fuck can i do this IT SHOWS NOTHING
00003348 6100 EC7A                  		bsr.w	Pal_FadeTo
0000334C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003352 203C 4000 0003             		move.l	#$40000003,d0
00003358 7227                       		moveq	#$27,d1
0000335A 741B                       		moveq	#$1B,d2
0000335C 6100 E312                  		bsr.w	ShowVDPGraphics
00003360                            
00003360                            
00003360 43F9 00FF 0000             		lea	($FF0000).l,a1
00003366 203C 6000 0003             		move.l	#$60000003,d0
0000336C 7227                       		moveq	#$27,d1
0000336E 741B                       		moveq	#$1B,d2
00003370                            
00003370 6100 ECFC                  		bsr.w	Pal_FadeFrom
00003374                            
00003374                            
00003374 6100 E19E                  		bsr.w	ClearScreen
00003378 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003382 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003388 6100 E306                  		bsr.w	NemDec
0000338C 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003396 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000339C 6100 E2F2                  		bsr.w	NemDec
000033A0 43F9 00FF 0000             		lea	($FF0000).l,a1
000033A6 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000033AC 303C 0000                  		move.w	#0,d0
000033B0 6100 E5BC                  		bsr.w	EniDec
000033B4 43F9 00FF 0000             		lea	($FF0000).l,a1
000033BA 203C 4000 0003             		move.l	#$40000003,d0
000033C0 7227                       		moveq	#$27,d1
000033C2 741B                       		moveq	#$1B,d2
000033C4 6100 E2AA                  		bsr.w	ShowVDPGraphics
000033C8 6100 ECA4                  		bsr.w	Pal_FadeFrom
000033CC 43F8 FB80                  		lea	($FFFFFB80).w,a1
000033D0 7000                       		moveq	#0,d0
000033D2 323C 001F                  		move.w	#$1F,d1
000033D6                            
000033D6                            
000033D6                            Title_ClrPallet:
000033D6 22C0                       		move.l	d0,(a1)+
000033D8 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000033DC                            
000033DC 7003                       		moveq	#3,d0		; load Sonic's pallet
000033DE 6100 EF38                  		bsr.w	PalLoad1
000033E2 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000033E8 4EB9 0000 0000             		jsr	ObjectsLoad
000033EE 4EB9 0000 0000             		jsr	BuildSprites
000033F4 6100 EBCE                  		bsr.w	Pal_FadeTo
000033F8 46FC 2700                  		move	#$2700,sr
000033FC 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003406 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000340C 6100 E282                  		bsr.w	NemDec
00003410 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
0000341A 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003420 6100 E26E                  		bsr.w	NemDec
00003424 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
0000342E 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003434 6100 E25A                  		bsr.w	NemDec
00003438 4DF9 00C0 0000             		lea	($C00000).l,a6
0000343E 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003446 4BF9 0000 060E             		lea	(Art_Text).l,a5
0000344C 323C 0BCA                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003450                            
00003450                            Title_LoadText:
00003450 2C9D                       		move.l	(a5)+,(a6)
00003452 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003456                            
00003456 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000345C 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003462 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003468 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000346E 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003474 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
0000347A 6100 0000                  		bsr.w	LevelSizeLoad
0000347E 6100 0000                  		bsr.w	DeformBgLayer
00003482                            
00003482 43F8 B000                  		lea	($FFFFB000).w,a1
00003486 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
0000348C 303C 0000                  		move.w	#0,d0
00003490 6100 E4DC                  		bsr.w	EniDec
00003494 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
0000349A 43F9 00FF 0000             		lea	($FF0000).l,a1
000034A0 6100 E64A                  		bsr.w	KosDec
000034A4 6100 0000                  		bsr.w	LevelLayoutLoad
000034A8                            
000034A8 46FC 2700                  		move	#$2700,sr
000034AC 6100 E066                  		bsr.w	ClearScreen
000034B0 4BF9 00C0 0004             		lea	($C00004).l,a5
000034B6 4DF9 00C0 0000             		lea	($C00000).l,a6
000034BC 47F8 F708                  		lea	($FFFFF708).w,a3
000034C0 49F8 A440                  		lea	($FFFFA440).w,a4
000034C4 343C 6000                  		move.w	#$6000,d2
000034C8 6100 0000                  		bsr.w	LoadTilesFromStart2
000034CC 43F9 00FF 0000             		lea	($FF0000).l,a1
000034D2 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000034D8 303C 0000                  		move.w	#0,d0
000034DC 6100 E490                  		bsr.w	EniDec
000034E0 43F9 00FF 0000             		lea	($FF0000).l,a1
000034E6 203C 4206 0003             		move.l	#$42060003,d0
000034EC 7221                       		moveq	#$21,d1
000034EE 7415                       		moveq	#$15,d2
000034F0 6100 E17E                  		bsr.w	ShowVDPGraphics
000034F4 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000034FE 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003504 6100 E18A                  		bsr.w	NemDec
00003508 7001                       		moveq	#1,d0		; load title screen pallet
0000350A 6100 EE0C                  		bsr.w	PalLoad1
0000350E 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003512 6100 E0D8                  		bsr.w	PlaySound_Special
00003516 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
0000351C 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003522 43F8 D080                  		lea	($FFFFD080).w,a1
00003526 7000                       		moveq	#0,d0
00003528 323C 000F                  		move.w	#$F,d1
0000352C                            
0000352C                            Title_ClrObjRam2:
0000352C 22C0                       		move.l	d0,(a1)+
0000352E 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003532                            
00003532 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003538 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
0000353E 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003544 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000354A 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003550 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003556 4EB9 0000 0000             		jsr	ObjectsLoad
0000355C 6100 0000                  		bsr.w	DeformBgLayer
00003560 4EB9 0000 0000             		jsr	BuildSprites
00003566 7000                       		moveq	#0,d0
00003568 6100 E298                  		bsr.w	LoadPLC2
0000356C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003572 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003578 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000357C 0000 0040                  		ori.b	#$40,d0
00003580 33C0 00C0 0004             		move.w	d0,($C00004).l
00003586 6100 EA3C                  		bsr.w	Pal_FadeTo
0000358A                            
0000358A                            loc_317C:
0000358A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003590 6100 F7C2                  		bsr.w	DelayProgram
00003594 4EB9 0000 0000             		jsr	ObjectsLoad
0000359A 6100 0000                  		bsr.w	DeformBgLayer
0000359E 4EB9 0000 0000             		jsr	BuildSprites
000035A4 6100 E608                  		bsr.w	PalCycle_Title
000035A8 6100 E292                  		bsr.w	RunPLC_RAM
000035AC 3038 D008                  		move.w	($FFFFD008).w,d0
000035B0 5440                       		addq.w	#2,d0
000035B2 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000035B6 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000035BA 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000035BC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000035C2 4E75                       		rts	
000035C4                            ; ===========================================================================
000035C4                            
000035C4                            Title_ChkRegion:
000035C4 0838 0004 FFF8             		btst	#4,($FFFFFFF8).w		; check	if the machine is US or	Japanese
000035CA 6700                       		beq.s	Title_RegionJ			; if Japanese, branch
000035CC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0	; load US code
000035D2 6000                       		bra.s	Title_EnterCheat
000035D4                            ; ===========================================================================
000035D4                            
000035D4                            Title_RegionJ:				; XREF: Title_ChkRegion
000035D4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000035DA                            
000035DA                            Title_EnterCheat:			; XREF: Title_ChkRegion
000035DA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000035DE D0C0                       		adda.w	d0,a0
000035E0 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000035E4 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000035E8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000035EA 6600                       		bne.s	loc_3210	; if not, branch
000035EC 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000035F0 4A00                       		tst.b	d0
000035F2 6600                       		bne.s	Title_CountC
000035F4 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000035F8 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000035FC E249                       		lsr.w	#1,d1
000035FE 0241 0003                  		andi.w	#3,d1
00003602 6700                       		beq.s	Title_PlayRing
00003604 0838 0004 FFF8             		btst	#4,($FFFFFFF8).w
0000360A 6700                       		beq.s	Title_PlayRing
0000360C 7201                       		moveq	#1,d1
0000360E 1181 1001                  		move.b	d1,1(a0,d1.w)
00003612                            
00003612                            Title_PlayRing:
00003612 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003618 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000361C 6100 DFCE                  		bsr.w	PlaySound_Special
00003620 6000                       		bra.s	Title_CountC
00003622                            ; ===========================================================================
00003622                            
00003622                            loc_3210:				; XREF: Title_EnterCheat
00003622 4A00                       		tst.b	d0
00003624 6700                       		beq.s	Title_CountC
00003626 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
0000362C 6700                       		beq.s	Title_CountC
0000362E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003634                            
00003634                            Title_CountC:
00003634 1038 F605                  		move.b	($FFFFF605).w,d0
00003638 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000363C 6700                       		beq.s	loc_3230	; if not, branch
0000363E 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003642                            
00003642                            loc_3230:
00003642 4A78 F614                  		tst.w	($FFFFF614).w
00003646 6700 0000                  		beq.w	Demo
0000364A                            		; (temporary until we have an actual options screen)
0000364A 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
00003650 6700                       		beq.s	@notc
00003652                            
00003652 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
00003656 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
0000365C 6D00                       		blt.s	@notoverflow
0000365E 11FC 0000 FFE8             		move.b	#0,(v_character).w
00003664                            	@notoverflow:
00003664 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003668 6100 DF82                  		bsr.w	PlaySound_Special
0000366C                            	@notc:
0000366C 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003672 6700 FF16                  		beq.w	loc_317C	; if not, branch
00003676                            
00003676                            Title_ChkLevSel:
00003676 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
0000367C 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003680                            		
00003680                            		
00003680 7002                       		moveq	#2,d0
00003682 6100 ECB0                  		bsr.w	PalLoad2	; load level select pallet
00003686 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000368A 7000                       		moveq	#0,d0
0000368C 323C 00FF                  		move.w	#$FF,d1
00003690                            
00003690                            Title_ClrScroll:
00003690 22C0                       		move.l	d0,(a1)+
00003692 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003696                            
00003696 21C0 F616                  		move.l	d0,($FFFFF616).w
0000369A 46FC 2700                  		move	#$2700,sr
0000369E 4DF9 00C0 0000             		lea	($C00000).l,a6
000036A4 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000036AE 323C 03FF                  		move.w	#$3FF,d1
000036B2                            
000036B2                            Title_ClrVram:
000036B2 2C80                       		move.l	d0,(a6)
000036B4 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
000036B8                            
000036B8 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000036BC 6700 0000                  		beq.w	GotoOptions	; if not, play level
000036C0                            
000036C0 6100 0000                  		bsr.w	LevSelTextLoad
000036C4                            		
000036C4                            		; sound test fix
000036C4 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000036C8 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000036CE                            		
000036CE 363C C65F                  		move.w	#$C680-$21,d3 ; selected
000036D2 0C46 0014                  		cmpi.w	#$14,d6
000036D6 6700                       		beq.s	@issndtst
000036D8 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
000036DC                            	@issndtst:
000036DC 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000036E0 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000036E4                            		
000036E4 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000036E8 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000036F0                            		
000036F0 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000036F6 6700                       		beq.s	@issndtst2
000036F8                            		
000036F8 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
000036FE 6100 0000                  		bsr.w	CStringSlop
00003702 6000                       		bra.s	LevelSelect
00003704                            	@issndtst2:
00003704 43F9 0000 0000             		lea	(Controls_SND).l,a1
0000370A 6100 0000                  		bsr.w	CStringSlop
0000370E                            		
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            ; Level	Select
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            LevelSelect:
0000370E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003714 6100 F63E                  		bsr.w	DelayProgram
00003718 6100 0000                  		bsr.w	LevSelControls
0000371C 6100 E11E                  		bsr.w	RunPLC_RAM
00003720 4AB8 F680                  		tst.l	($FFFFF680).w
00003724 66E8                       		bne.s	LevelSelect
00003726 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
0000372C 67E0                       		beq.s	LevelSelect	; if not, branch
0000372E 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003732 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003736 6600                       		bne.s	@dont	; if not, dont blow this place up
00003738                            			
00003738 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
0000373E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003744 6100 F60E                  		bsr.w	DelayProgram
00003748                            	@dont:
00003748 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
0000374C 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
0000374E                            		
0000374E 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
00003754 67B8                       		beq.s	LevelSelect	; if not, branch
00003756                            		
00003756 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
0000375C 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
0000375E                            		
0000375E 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003762 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003766                            		
00003766 4EB9 0000 0000             		jsr		ShowNow_Playing
0000376C 60A0                       		bra.s	LevelSelect
0000376E                            ; ===========================================================================
0000376E                            
0000376E                            LevSel_SEGA:				; XREF: LevelSelect
0000376E 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
00003774 4E75                       		rts	
00003776                            ; ===========================================================================
00003776                            
00003776                            LevSel_Ending:				; XREF: LevelSelect
00003776 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
0000377C 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003782 4E75                       		rts	
00003784                            ; ===========================================================================
00003784                            
00003784                            LevSel_Credits:				; XREF: LevelSelect
00003784 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
0000378A 103C 0091                  		move.b	#$91,d0
0000378E 6100 DE5C                  		bsr.w	PlaySound_Special ; play credits music
00003792 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003798 4E75                       		rts	
0000379A                            ; ===========================================================================
0000379A                            
0000379A                            LevSel_Level_SS:			; XREF: LevelSelect
0000379A D040                       		add.w	d0,d0
0000379C 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000037A0 6B00 FF6C                  		bmi.w	LevelSelect
000037A4 0C40 FFFF                  		cmpi.w	#$FFFF,d0	; check	if level is 0700 (Special Stage)
000037A8 6600                       		bne.s	LevSel_Level	; if not, branch
000037AA 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000037B0 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000037B4 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000037BA 7000                       		moveq	#0,d0
000037BC 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000037C0 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000037C4 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000037C8 4E75                       		rts	
000037CA                            ; ===========================================================================
000037CA                            
000037CA                            LevSel_Level:				; XREF: LevSel_Level_SS
000037CA 0240 3FFF                  		andi.w	#$3FFF,d0
000037CE 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000037D2                            
000037D2                            PlayLevel:				; XREF: ROM:00003246j ...
000037D2 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000037D8 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000037DE 7000                       		moveq	#0,d0
000037E0 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000037E4 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000037E8 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000037EC 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
000037F0 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000037F4 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
000037F8 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000037FC 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003800 103C 00E0                  		move.b	#$E0,d0
00003804 6100 DDE6                  		bsr.w	PlaySound_Special ; fade out music
00003808 4E75                       		rts	
0000380A                            ; ===========================================================================
0000380A                            ; ---------------------------------------------------------------------------
0000380A                            ; Level	select - level pointers
0000380A                            ; ---------------------------------------------------------------------------
0000380A                            LSelectPointers:
0000380A 0000                       		dc.w $0000 ; crz
0000380C 0001                       		dc.w $0001
0000380E 0002                       		dc.w $0002
00003810 0100                       		dc.w $0100 ; ilfez
00003812 0101                       		dc.w $0101
00003814 0102                       		dc.w $0102
00003816 0200                       		dc.w $0200 ; mz
00003818 0201                       		dc.w $0201
0000381A 0202                       		dc.w $0202
0000381C 0300                       		dc.w $0300 ; dgrotz
0000381E 0301                       		dc.w $0301 
00003820 0302                       		dc.w $0302 
00003822 0700                       		dc.w $0700 ; the other mz...
00003824 0701                       		dc.w $0701 
00003826 0702                       		dc.w $0702 
00003828 0400                       		dc.w $0400 ; tpfbz
0000382A 0401                       		dc.w $0401
0000382C 0402                       		dc.w $0402
0000382E 0500                       		dc.w $0500 ; zzzzz
00003830 0501                       		dc.w $0501 
00003832 0103                       		dc.w $0103 
00003834 0502                       		dc.w $0502 ; fz
00003836 FFFF                       		dc.w $FFFF ; special
00003838 8000                       		dc.w $8000 ; sound test
0000383A                            		even
0000383A                            ; --------------------------------------
0000383A                            ; ---------------------------------------------------------------------------
0000383A                            ; Level	select codes
0000383A                            ; ---------------------------------------------------------------------------
0000383A                            LevelSelectCode_J:
0000383A                            		incbin	misc\ls_jcode.bin
00003840                            		even
00003840                            
00003840                            LevelSelectCode_US:
00003840                            		incbin	misc\ls_ucode.bin
00003846                            		even
00003846                            ; ===========================================================================
00003846                            
00003846                            ; ---------------------------------------------------------------------------
00003846                            ; Demo mode
00003846                            ; ---------------------------------------------------------------------------
00003846                            
00003846                            Demo:					; XREF: TitleScreen
00003846 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000384C                            
0000384C                            loc_33B6:				; XREF: loc_33E4
0000384C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003852 6100 F500                  		bsr.w	DelayProgram
00003856 6100 0000                  		bsr.w	DeformBgLayer
0000385A 6100 E330                  		bsr.w	PalCycle_Load
0000385E 6100 DFDC                  		bsr.w	RunPLC_RAM
00003862 3038 D008                  		move.w	($FFFFD008).w,d0
00003866 5440                       		addq.w	#2,d0
00003868 31C0 D008                  		move.w	d0,($FFFFD008).w
0000386C 0C40 1C00                  		cmpi.w	#$1C00,d0
00003870 6500                       		bcs.s	loc_33E4
00003872 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003878 4E75                       		rts	
0000387A                            ; ===========================================================================
0000387A                            
0000387A                            loc_33E4:				; XREF: Demo
0000387A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003880 6600 FDF4                  		bne.w	Title_ChkLevSel	; if yes, branch
00003884 4A78 F614                  		tst.w	($FFFFF614).w
00003888 6600 FFC2                  		bne.w	loc_33B6
0000388C 103C 00E0                  		move.b	#$E0,d0
00003890 6100 DD5A                  		bsr.w	PlaySound_Special ; fade out music
00003894 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003898 0240 0007                  		andi.w	#7,d0
0000389C D040                       		add.w	d0,d0
0000389E 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000038A2 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000038A6 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000038AA 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000038B0 6500                       		bcs.s	loc_3422	; if yes, branch
000038B2 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000038B8                            
000038B8                            loc_3422:
000038B8 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000038BE 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000038C4 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000038C8 6600                       		bne.s	Demo_Level	; if not, branch
000038CA 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000038D0 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000038D4 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000038D8                            
000038D8                            Demo_Level:
000038D8 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000038DE 7000                       		moveq	#0,d0
000038E0 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000038E4 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000038E8 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000038EC 4E75                       		rts	
000038EE                            ; ===========================================================================
000038EE                            ; ---------------------------------------------------------------------------
000038EE                            ; Levels used in demos
000038EE                            ; ---------------------------------------------------------------------------
000038EE                            Demo_Levels:	incbin	misc\dm_ord1.bin
000038F6                            		even
000038F6                            
000038F6                            ; ---------------------------------------------------------------------------
000038F6                            ; Subroutine to	change what you're selecting in the level select
000038F6                            ; ---------------------------------------------------------------------------
000038F6                            
000038F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038F6                            
000038F6                            
000038F6                            LevSelControls:				; XREF: LevelSelect
000038F6 1238 F605                  		move.b	($FFFFF605).w,d1
000038FA 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000038FE 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003900 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003904 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
00003908                            
00003908                            LevSel_UpDown:
00003908 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000390E 1238 F604                  		move.b	($FFFFF604).w,d1
00003912 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003916 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
0000391A 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000391E 0801 0000                  		btst	#0,d1		; is up	pressed?
00003922 6700                       		beq.s	LevSel_Down	; if not, branch
00003924 5346                       		subq.w	#1,d6		; move up 1 selection
00003926 6400                       		bcc.s	LevSel_Down
00003928 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
0000392A                            
0000392A                            LevSel_Down:
0000392A 0801 0001                  		btst	#1,d1		; is down pressed?
0000392E 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003930 5246                       		addq.w	#1,d6		; move down 1 selection
00003932 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003936 6500                       		bcs.s	LevSel_Refresh
00003938 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
0000393A 6000                       		bra.s	LevSel_Refresh
0000393C                            		
0000393C                            LevSel_LR:
0000393C 0801 0002                  		btst	#2,d1		; is left pressed?
00003940 6700                       		beq.s	LevSel_Right	; if not, branch
00003942 0446 0000                  		sub.w	#lsrow2size,d6
00003946 64E2                       		bcc.s	LevSel_Down
00003948 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
0000394C                            LevSel_Right:
0000394C 0801 0003                  		btst	#3,d1		; is right pressed?
00003950 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003952 0646 0000                  		add.w	#lsrow1size,d6
00003956 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000395A 6500                       		bcs.s	LevSel_Refresh
0000395C 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003960                            ; ===========================================================================
00003960                            LevSel_Refresh:
00003960                            		
00003960 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003964 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003968                            		
00003968 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
0000396E 6600                       		bne.s	@exitsndtest
00003970                            		
00003970 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003974 43F9 0000 0000             		lea	(Controls_Normal).l,a1
0000397A 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003982 6100 0000                  		bsr.w	CStringSlop
00003986                            	@exitsndtest:
00003986                            	
00003986 363C C65F                  		move.w	#$C680-$21,d3
0000398A 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
0000398E 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003992                            		
00003992 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
00003998 6600                       		bne.s	@entersndtest
0000399A                            		
0000399A 363C C65F                  		move.w	#$C680-$21,d3
0000399E 43F9 0000 0000             		lea	(Controls_SND).l,a1
000039A4 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000039AC 6100 0000                  		bsr.w	CStringSlop
000039B0                            	@entersndtest:
000039B0 4E75                       		rts	
000039B2                            		
000039B2                            LevSel_SndTest:				; XREF: LevSelControls
000039B2 1238 F605                  		move.b	($FFFFF605).w,d1
000039B6 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
000039BA 6700                       		beq.s	LevSel_NoMove	; if not, branch
000039BC 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
000039C2 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
000039C6                            		
000039C6 1038 FF84                  		move.b	($FFFFFF84).w,d0
000039CA 0801 0002                  		btst	#2,d1		; is left pressed?
000039CE 6700                       		beq.s	SndTest_Right	; if not, branch
000039D0 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
000039D2                            		; no need the fact it's a byte does the trick
000039D2                            
000039D2                            SndTest_Right:
000039D2 0801 0003                  		btst	#3,d1		; is right pressed?
000039D6 6700                       		beq.s	SndTest_A	; if not, branch
000039D8 5200                       		addq.b	#1,d0		; add 1	to sound test
000039DA                            		; same here
000039DA                            		
000039DA                            SndTest_A:
000039DA 0801 0006                  		btst	#6,d1		; is A pressed?
000039DE 6700                       		beq.s	SndTest_B	; if not, branch
000039E0 5100                       		subq.b	#8,d0		; subtract $10 to sound test
000039E2 5100                       		subq.b	#8,d0
000039E4                            		
000039E4                            SndTest_B:
000039E4 0801 0004                  		btst	#4,d1		; is B pressed?
000039E8 6700                       		beq.s	SndTest_Refresh	; if not, branch
000039EA 5000                       		addq.b	#8,d0		; add $10 to sound test
000039EC 5000                       		addq.b	#8,d0
000039EE                            
000039EE                            SndTest_Refresh:
000039EE 363C C65F                  		move.w	#$C680-$21,d3
000039F2 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
000039F6 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000039FA                            
000039FA                            LevSel_NoMove:
000039FA 4E75                       		rts	
000039FC                            ; End of function LevSelControls
000039FC                            
000039FC                            ; ---------------------------------------------------------------------------
000039FC                            ; Subroutine to load level select text
000039FC                            ; ---------------------------------------------------------------------------
000039FC                            
000039FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039FC                            
000039FC                            LevSelTextLoad_loop:
000039FC 2D44 0004                  		move.l	d4,4(a6)
00003A00 6100 0000                  		bsr.w	LevSel_ChgLine
00003A04 0684 0080 0000             		addi.l	#$800000,d4
00003A0A 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
00003A0E 4E75                       		rts
00003A10                            LevSelTextLoad:				; XREF: TitleScreen
00003A10 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003A16 4DF9 00C0 0000             		lea	($C00000).l,a6
00003A1C 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003A20 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003A26                            		
00003A26 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
00003A2A 61D0                       		bsr.s	LevSelTextLoad_loop
00003A2C                            		
00003A2C                            		
00003A2C 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003A32 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00003A36 61C4                       		bsr.s	LevSelTextLoad_loop
00003A38 363C C65F                  		move.w	#$C680-$21,d3
00003A3C                            		
00003A3C                            LevSelHighlightCode:
00003A3C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003A42 7000                       		moveq	#0,d0
00003A44 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003A48 3200                       		move.w	d0,d1
00003A4A 283C 6086 0003             		move.l	#lsscrpos,d4
00003A50                            		
00003A50 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003A54 6D00                       		blt.s	@notsecond
00003A56                            		
00003A56 0440 0000                  		sub.w	#lsrow1size,d0
00003A5A 0684 0024 0000             		addi.l	#lsoff,d4
00003A60                            	@notsecond:
00003A60 EF48                       		lsl.w	#7,d0
00003A62 4840                       		swap	d0
00003A64 D880                       		add.l	d0,d4
00003A66 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003A6C E749                       		lsl.w	#3,d1
00003A6E D241                       		add.w	d1,d1
00003A70 D2C1                       		adda.w	d1,a1
00003A72 2D44 0004                  		move.l	d4,4(a6)
00003A76 6100 0000                  		bsr.w	LevSel_ChgLine
00003A7A 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003A80 6700                       		beq.s	LevSelSndTest
00003A82 4E75                       		rts
00003A84                            
00003A84                            LevSelSndTest:
00003A84 0643 0030                  		add.w	#$30,d3
00003A88 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003A92 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003A96 1400                       		move.b	d0,d2
00003A98 E808                       		lsr.b	#4,d0
00003A9A 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A9E 1002                       		move.b	d2,d0
00003AA0 6100 0000                  		bsr.w	LevSel_ChgSnd
00003AA4 4E75                       		rts	
00003AA6                            ; End of function LevSelTextLoad
00003AA6                            
00003AA6                            
00003AA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003AA6                            
00003AA6                            
00003AA6                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003AA6 0240 000F                  		andi.w	#$F,d0
00003AAA 0C00 000A                  		cmpi.b	#$A,d0
00003AAE 6500                       		bcs.s	loc_3580
00003AB0 5E00                       		addi.b	#7,d0
00003AB2                            
00003AB2                            loc_3580:
00003AB2 D043                       		add.w	d3,d0
00003AB4 3C80                       		move.w	d0,(a6)
00003AB6 4E75                       		rts	
00003AB8                            ; End of function LevSel_ChgSnd
00003AB8                            
00003AB8                            
00003AB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003AB8                            
00003AB8                            
00003AB8                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003AB8 740F                       		moveq	#$10-1,d2		; number of characters per line
00003ABA                            
00003ABA                            @loop:
00003ABA 7000                       		moveq	#0,d0
00003ABC 1019                       		move.b	(a1)+,d0
00003ABE 0C00 0020                  		cmpi.b	#$20,d0
00003AC2 6E00                       		bgt.s	@draw
00003AC4 3CBC 0000                  		move.w	#0,(a6)
00003AC8 51CA FFF0                  		dbf	d2,@loop
00003ACC 4E75                       		rts	
00003ACE                            ; ===========================================================================
00003ACE                            
00003ACE                            @draw:				; XREF: LevSel_ChgLine
00003ACE D043                       		add.w	d3,d0
00003AD0 3C80                       		move.w	d0,(a6)
00003AD2 51CA FFE6                  		dbf	d2,@loop
00003AD6 4E75                       		rts	
00003AD8                            ; End of function LevSel_ChgLine
00003AD8                            		
00003AD8                            CStringSlop_draw:
00003AD8 D043                       		add.w	d3,d0
00003ADA 3C80                       		move.w	d0,(a6)
00003ADC                            CStringSlop:				; XREF: LevSelTextLoad
00003ADC 7000                       		moveq	#0,d0
00003ADE 1019                       		move.b	(a1)+,d0
00003AE0 0C00 0020                  		cmpi.b	#$20,d0
00003AE4 6EF2                       		bgt.s	CStringSlop_draw
00003AE6                            		
00003AE6 0C00 0001                  		cmpi.b	#1,d0
00003AEA 6700                       		beq.s	@InsertSpaces
00003AEC 6500                       		blo.s	@end
00003AEE                            		
00003AEE 3CBC 0000                  		move.w	#0,(a6)
00003AF2 60E8                       		bra.s	CStringSlop
00003AF4                            	@end:
00003AF4 4E75                       		rts
00003AF6                            	@InsertSpaces:
00003AF6 7000                       		moveq	#0,d0
00003AF8 1019                       		move.b	(a1)+,d0
00003AFA                            		
00003AFA                            	@insert:
00003AFA 3CBC 0000                  		move.w	#0,(a6)
00003AFE 51C8 FFFA                  		dbf.w	d0,@insert
00003B02 60D8                       		bra.s	CStringSlop
00003B04                            ; End of function LevSel_ChgLine
00003B04                            
00003B04                            ; ===========================================================================
00003B04                            ; ---------------------------------------------------------------------------
00003B04                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003B04                            ; ---------------------------------------------------------------------------
00003B04                            LevelMenuText:	
00003B04 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003B14 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B24 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B34 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003B44 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003B54 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B64 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003B74 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B84 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B94 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003BA4 2020 2020 2020 2020 2020+          dc.b    "               2"
00003BB4 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BC4 4D41 4B4F 544F 2020 2020+          dc.b    "MAKOTO         1"
00003BD4 2020 2020 2020 2020 2020+          dc.b    "               2"
00003BE4 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BF4                            LMTSecondRow:
00003BF4 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003C04 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003C14 2020 2020 2020 2020 2020+          dc.b    "               3"
00003C24 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003C34 2020 2020 2020 2020 2020+          dc.b    "               2"
00003C44 2020 2020 2020 2020 2020+          dc.b    "               3"
00003C54 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003C64 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003C74 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003C84 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003C94 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003CA4                            LMTSelectableEnd:
00003CA4 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003CB4                            LMTEnd:
00003CB4                            
00003CB4                            Now_Playing:
00003CB4 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003CC4                            		even
00003CC4                            NP_Track:
00003CC4 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003CCC                            		even
00003CCC                            NP_SFX:
00003CCC 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003CD4                            		even
00003CD4                            
00003CD4                            ShowNow_Playing:
00003CD4 1C00                       		move.b	d0,d6
00003CD6 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003CDA 43FA FFD8                  		lea	Now_Playing(pc),a1
00003CDE 4DF9 00C0 0000             		lea		($C00000).l,a6
00003CE4 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003CEC 6100 FDEE                  		bsr.w	CStringSlop
00003CF0                            		
00003CF0 43FA FFD2                  		lea	NP_Track(pc),a1
00003CF4 0C06 00A0                  		cmpi.b	#$A0,d6
00003CF8 6D00                       		blt.s	@track
00003CFA                            		
00003CFA 43FA FFD0                  		lea	NP_SFX(pc),a1
00003CFE                            	@track:
00003CFE 6100 FDDC                  		bsr.w	CStringSlop
00003D02                            		
00003D02 0643 0030                  		add.w	#$30,d3
00003D06 1006                       		move.b	d6,d0
00003D08 1400                       		move.b	d0,d2
00003D0A E808                       		lsr.b	#4,d0
00003D0C 6100 FD98                  		bsr.w	LevSel_ChgSnd
00003D10 1002                       		move.b	d2,d0
00003D12 6100 FD92                  		bsr.w	LevSel_ChgSnd
00003D16 4E75                       		rts	
00003D18                            
00003D18                            ; 1 is insert spaces btw
00003D18                            Controls_Normal:
00003D18 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003D24                            		even		
00003D24                            Controls_SND:
00003D24 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003D4A 00                         		even
00003D4A                            		
00003D4A                            OptionMenuText:	
00003D4A 504C 4159 2054 4845 2047+  		dc.b    "PLAY THE GAME!!!"
00003D5A 4348 4152 4143 5445 5220+          dc.b    "CHARACTER       "
00003D6A                            OMTEnd:
00003D6A                            		
00003D6A                            ; ---------------------------------------------------------------------------
00003D6A                            ; Level	Select
00003D6A                            ; ---------------------------------------------------------------------------
00003D6A                            GotoOptions:
00003D6A 43F9 0000 3D4A             		lea	(OptionMenuText).l,a1
00003D70 4DF9 00C0 0000             		lea	($C00000).l,a6
00003D76 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003D7A 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003D80                            		
00003D80 323C 0000                  		move.w	#optamm-1,d1		; number of lines of text (first row)
00003D84 6100 FC76                  		bsr.w	LevSelTextLoad_loop
00003D88                            
00003D88                            OptionsMenu:
00003D88 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003D8E 6100 EFC4                  		bsr.w	DelayProgram
00003D92 6100 0000                  		bsr.w	OptControls
00003D96 6100 DAA4                  		bsr.w	RunPLC_RAM
00003D9A 4AB8 F680                  		tst.l	($FFFFF680).w
00003D9E 66E8                       		bne.s	OptionsMenu
00003DA0 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003DA6 67E0                       		beq.s	OptionsMenu	; if not, branch
00003DA8 4E71                       		nop
00003DAA 60DC                       		bra.s	OptionsMenu
00003DAC                            		
00003DAC                            OptReturn:
00003DAC 4E75                       		rts
00003DAE                            OptControls:				; XREF: LevelSelect
00003DAE 1238 F605                  		move.b	($FFFFF605).w,d1
00003DB2 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003DB6 6600                       		bne.s	Opt_UpDown	; if yes, branch
00003DB8 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003DBC 6AEE                       		bpl.s	OptReturn	; if time remains, branch
00003DBE                            Opt_UpDown:
00003DBE 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003DC4 1238 F604                  		move.b	($FFFFF604).w,d1
00003DC8 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003DCC 0801 0000                  		btst	#0,d1		; is up	pressed?
00003DD0 6700                       		beq.s	Opt_Down	; if not, branch
00003DD2 5346                       		subq.w	#1,d6		; move up 1 selection
00003DD4 6400                       		bcc.s	Opt_Down
00003DD6 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003DD8                            
00003DD8                            Opt_Down:
00003DD8 0801 0001                  		btst	#1,d1		; is down pressed?
00003DDC 6700                       		beq.s	Opt_Refresh	; if not, branch
00003DDE 5246                       		addq.w	#1,d6		; move down 1 selection
00003DE0 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003DE4 6500                       		bcs.s	Opt_Refresh
00003DE6 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003DE8                            Opt_Refresh:
00003DE8                            		
00003DE8                            ; ---------------------------------------------------------------------------
00003DE8                            ; Music	playlist
00003DE8                            ; ---------------------------------------------------------------------------
00003DE8                            MusicList1:	incbin	misc\muslist1.bin
00003DF0                            		even
00003DF0                            MusicList2:	incbin	misc\muslist2.bin
00003DF8                            		even
00003DF8                            MusicList3:	incbin	misc\muslist3.bin
00003E00                            		even
00003E00                            MusicList4:	incbin	misc\muslist4.bin
00003E08                            		even
00003E08                            ; ===========================================================================
00003E08                            
00003E08                            ; ---------------------------------------------------------------------------
00003E08                            ; Level
00003E08                            ; ---------------------------------------------------------------------------
00003E08                            
00003E08                            Level:					; XREF: GameModeArray
00003E08 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003E0E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E12 6B00                       		bmi.s	loc_37B6
00003E14 103C 00E0                  		move.b	#$E0,d0
00003E18 6100 D7D2                  		bsr.w	PlaySound_Special ; fade out music
00003E1C                            
00003E1C                            loc_37B6:
00003E1C 6100 DA10                  		bsr.w	ClearPLC
00003E20 6100 E24C                  		bsr.w	Pal_FadeFrom
00003E24 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E28 6B00                       		bmi.s	Level_ClrRam
00003E2A 46FC 2700                  		move	#$2700,sr
00003E2E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003E38 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003E3E 6100 D850                  		bsr.w	NemDec
00003E42 46FC 2300                  		move	#$2300,sr
00003E46 7000                       		moveq	#0,d0
00003E48 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E4C E948                       		lsl.w	#4,d0
00003E4E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003E54 45F2 0000                  		lea	(a2,d0.w),a2
00003E58 7000                       		moveq	#0,d0
00003E5A 1012                       		move.b	(a2),d0
00003E5C 6700                       		beq.s	loc_37FC
00003E5E 6100 D970                  		bsr.w	LoadPLC		; load level patterns
00003E62                            
00003E62                            loc_37FC:
00003E62 7001                       		moveq	#1,d0
00003E64 6100 D96A                  		bsr.w	LoadPLC		; load standard	patterns
00003E68                            
00003E68                            Level_ClrRam:
00003E68 43F8 D000                  		lea	($FFFFD000).w,a1
00003E6C 7000                       		moveq	#0,d0
00003E6E 323C 07FF                  		move.w	#$7FF,d1
00003E72                            
00003E72                            Level_ClrObjRam:
00003E72 22C0                       		move.l	d0,(a1)+
00003E74 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003E78                            
00003E78 43F8 F628                  		lea	($FFFFF628).w,a1
00003E7C 7000                       		moveq	#0,d0
00003E7E 323C 0015                  		move.w	#$15,d1
00003E82                            
00003E82                            Level_ClrVars:
00003E82 22C0                       		move.l	d0,(a1)+
00003E84 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003E88                            
00003E88 43F8 F700                  		lea	($FFFFF700).w,a1
00003E8C 7000                       		moveq	#0,d0
00003E8E 323C 003F                  		move.w	#$3F,d1
00003E92                            
00003E92                            Level_ClrVars2:
00003E92 22C0                       		move.l	d0,(a1)+
00003E94 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003E98                            
00003E98 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003E9C 7000                       		moveq	#0,d0
00003E9E 323C 0047                  		move.w	#$47,d1
00003EA2                            
00003EA2                            Level_ClrVars3:
00003EA2 22C0                       		move.l	d0,(a1)+
00003EA4 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003EA8                            
00003EA8 46FC 2700                  		move	#$2700,sr
00003EAC 6100 D666                  		bsr.w	ClearScreen
00003EB0 4DF9 00C0 0004             		lea	($C00004).l,a6
00003EB6 3CBC 8B03                  		move.w	#$8B03,(a6)
00003EBA 3CBC 8230                  		move.w	#$8230,(a6)
00003EBE 3CBC 8407                  		move.w	#$8407,(a6)
00003EC2 3CBC 857C                  		move.w	#$857C,(a6)
00003EC6 3CBC 9001                  		move.w	#$9001,(a6)
00003ECA 3CBC 8004                  		move.w	#$8004,(a6)
00003ECE 3CBC 8720                  		move.w	#$8720,(a6)
00003ED2 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003ED8 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003EDC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003EE2 6600                       		bne.s	Level_LoadPal	; if not, branch
00003EE4 3CBC 8014                  		move.w	#$8014,(a6)
00003EE8 7000                       		moveq	#0,d0
00003EEA 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003EEE D040                       		add.w	d0,d0
00003EF0 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003EF6 3031 0000                  		move.w	(a1,d0.w),d0
00003EFA 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003EFE 31C0 F648                  		move.w	d0,($FFFFF648).w
00003F02 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003F06 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003F0A 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003F0E 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003F14 6000 0000                  		bra.w	Level_LoadPal
00003F18                            Player_Palette:
00003F18                            		; normal, lz, sbz, blank
00003F18 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003F20                            		
00003F20 0016 0017 0018 0000        		dc.w	22,23,24,0 ; Pal_Gronic 
00003F28 0019 0017 0018 0000        		dc.w	25,23,24,0 ; Pal_Anakama 
00003F30 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
00003F38                            
00003F38                            		; add more player palettes
00003F38                            Level_LoadPal:
00003F38 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003F3E 46FC 2300                  		move	#$2300,sr
00003F42                            
00003F42 7200                       		moveq	#0,d1
00003F44 1238 FFE8                  		move.b	(v_character),d1
00003F48 D241                       		add.w	d1,d1
00003F4A D241                       		add.w	d1,d1
00003F4C D241                       		add.w	d1,d1
00003F4E 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003F52                            		
00003F52 6100 E3E0                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003F56 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003F5C 6600                       		bne.s	Level_GetBgm	; if not, branch
00003F5E 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003F62 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003F68 6600                       		bne.s	Level_WaterPal	; if not, branch
00003F6A 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003F6E                            
00003F6E                            Level_WaterPal:
00003F6E 6100 E3DC                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003F72 4A38 FE30                  		tst.b	($FFFFFE30).w
00003F76 6700                       		beq.s	Level_GetBgm
00003F78 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003F7E                            
00003F7E                            ; NineKode begins here - How to play different songs on different acts
00003F7E                             
00003F7E                            Level_GetBgm:
00003F7E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F82 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003F86 7000                       		moveq	#0,d0
00003F88 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F8C                             
00003F8C 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003F92 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003F94 43F9 0000 3DE8             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003F9A 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F9C                             
00003F9C                            Level_GetBgm2:
00003F9C 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003FA2 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003FA4 43F9 0000 3DF0             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003FAA 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003FAC                             
00003FAC                            Level_GetBgm3:
00003FAC 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003FB2 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003FB4 43F9 0000 3DF8             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003FBA 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003FBC                             
00003FBC                            Level_GetBgm4:
00003FBC 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003FC2 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003FC4 43F9 0000 3E00             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003FCA                             
00003FCA                            Level_PlayBgm:
00003FCA 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003FCE 6100 D616                  		bsr.w	PlaySound	; play music
00003FD2 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003FD8                             
00003FD8                            ; NineKode ends here
00003FD8                            
00003FD8                            Level_TtlCard:
00003FD8 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003FDE 6100 ED74                  		bsr.w	DelayProgram
00003FE2 4EB9 0000 0000             		jsr	ObjectsLoad
00003FE8 4EB9 0000 0000             		jsr	BuildSprites
00003FEE 6100 D84C                  		bsr.w	RunPLC_RAM
00003FF2 3038 D108                  		move.w	($FFFFD108).w,d0
00003FF6 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003FFA 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003FFC 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00004000 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00004002 4EB9 0000 0000             		jsr	Hud_Base
00004008                            
00004008                            loc_3946:
00004008 7003                       		moveq	#3,d0
0000400A 6100 E30C                  		bsr.w	PalLoad1	; load Sonic's pallet line
0000400E 6100 0000                  		bsr.w	LevelSizeLoad
00004012 6100 0000                  		bsr.w	DeformBgLayer
00004016 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000401C 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00004020 6100 0000                  		bsr.w	LoadTilesFromStart
00004024 4EB9 0000 0000             		jsr	FloorLog_Unk
0000402A 6100 0000                  		bsr.w	ColIndexLoad
0000402E 6100 0000                  		bsr.w	LZWaterEffects
00004032 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00004038 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000403C 6B00                       		bmi.s	Level_ChkDebug
0000403E 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00004044                            
00004044                            Level_ChkDebug:
00004044 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004048 6700                       		beq.s	Level_ChkWater	; if not, branch
0000404A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004050 6700                       		beq.s	Level_ChkWater	; if not, branch
00004052 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004058                            
00004058                            Level_ChkWater:
00004058 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0000405E 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00004064 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000406A 6600                       		bne.s	Level_LoadObj	; if not, branch
0000406C 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00004072 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00004078 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
0000407E 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00004084                            
00004084                            Level_LoadObj:
00004084 4EB9 0000 0000             		jsr	ObjPosLoad
0000408A 4EB9 0000 0000             		jsr	ObjectsLoad
00004090 4EB9 0000 0000             		jsr	BuildSprites
00004096 7000                       		moveq	#0,d0
00004098 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
0000409C 6600                       		bne.s	loc_39E8	; if yes, branch
0000409E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000040A2 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000040A6 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
000040AA                            
000040AA                            loc_39E8:
000040AA 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
000040AE 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
000040B2 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
000040B6 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
000040BA                            		; move.b	d0,($FFFFFE2F).w
000040BA 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
000040C0 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000040C4 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000040C8 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000040CC 6100 0000                  		bsr.w	OscillateNumInit
000040D0 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000040D6 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
000040DC 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
000040E2 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000040E8 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
000040EE 7000                       		moveq	#0,d0
000040F0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000040F4 E548                       		lsl.w	#2,d0
000040F6 2271 0000                  		movea.l	(a1,d0.w),a1
000040FA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040FE 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004100 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00004106 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000410A 5340                       		subq.w	#1,d0
0000410C E548                       		lsl.w	#2,d0
0000410E 2271 0000                  		movea.l	(a1,d0.w),a1
00004112                            
00004112                            Level_Demo:
00004112 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00004118 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
0000411C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004122 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004126 6A00                       		bpl.s	Level_ChkWaterPal
00004128 31FC 021C F614             		move.w	#540,($FFFFF614).w
0000412E 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00004134 6600                       		bne.s	Level_ChkWaterPal
00004136 31FC 01FE F614             		move.w	#510,($FFFFF614).w
0000413C                            
0000413C                            Level_ChkWaterPal:
0000413C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00004142 6600                       		bne.s	Level_Delay	; if not, branch
00004144 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00004146 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
0000414C 6600                       		bne.s	Level_WaterPal2	; if not, branch
0000414E 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00004150                            
00004150                            Level_WaterPal2:
00004150 6100 E216                  		bsr.w	PalLoad4_Water
00004154                            
00004154                            Level_Delay:
00004154 323C 0003                  		move.w	#3,d1
00004158                            
00004158                            Level_DelayLoop:
00004158 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000415E 6100 EBF4                  		bsr.w	DelayProgram
00004162 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004166                            
00004166 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000416C 6100 DE5C                  		bsr.w	Pal_FadeTo2
00004170 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004174 6B00                       		bmi.s	Level_ClrCardArt
00004176 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
0000417A 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
0000417E 5838 D124                  		addq.b	#4,($FFFFD124).w
00004182 5838 D164                  		addq.b	#4,($FFFFD164).w
00004186 6000                       		bra.s	Level_StartGame
00004188                            ; ===========================================================================
00004188                            
00004188                            Level_ClrCardArt:
00004188 7002                       		moveq	#2,d0
0000418A 4EB9 0000 17D0             		jsr	(LoadPLC).l	; load explosion patterns
00004190 7000                       		moveq	#0,d0
00004192 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004196 0640 0015                  		addi.w	#$15,d0
0000419A 4EB9 0000 17D0             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
000041A0                            
000041A0                            Level_StartGame:
000041A0 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
000041A6                            
000041A6                            ; ---------------------------------------------------------------------------
000041A6                            ; Main level loop (when	all title card and loading sequences are finished)
000041A6                            ; ---------------------------------------------------------------------------
000041A6                            
000041A6                            Level_MainLoop:
000041A6 6100 D450                  		bsr.w	PauseGame
000041AA 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000041B0 6100 EBA2                  		bsr.w	DelayProgram
000041B4 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
000041B8 6100 0000                  		bsr.w	MoveSonicInDemo
000041BC 6100 0000                  		bsr.w	LZWaterEffects
000041C0 4EB9 0000 0000             		jsr	ObjectsLoad
000041C6 4A78 FE08                  		tst.w	($FFFFFE08).w
000041CA 6600                       		bne.s	loc_3B10
000041CC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000041D2 6400                       		bcc.s	loc_3B14
000041D4                            
000041D4                            loc_3B10:
000041D4 6100 0000                  		bsr.w	DeformBgLayer
000041D8                            
000041D8                            loc_3B14:
000041D8 4EB9 0000 0000             		jsr	BuildSprites
000041DE 4EB9 0000 0000             		jsr	ObjPosLoad
000041E4 6100 D9A6                  		bsr.w	PalCycle_Load
000041E8 6100 D652                  		bsr.w	RunPLC_RAM
000041EC 6100 0000                  		bsr.w	OscillateNumDo
000041F0 6100 0000                  		bsr.w	ChangeRingFrame
000041F4 6100 0000                  		bsr.w	SignpostArtLoad
000041F8 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000041FE 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00004200 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00004204 6600 FC02                  		bne.w	Level		; if yes, branch
00004208 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000420E 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00004212 4E75                       		rts	
00004214                            ; ===========================================================================
00004214                            
00004214                            Level_ChkDemo:				; XREF: Level_MainLoop
00004214 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00004218 6600                       		bne.s	Level_EndDemo	; if yes, branch
0000421A 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000421E 6700                       		beq.s	Level_EndDemo	; if not, branch
00004220 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00004226 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
0000422A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004230 4E75                       		rts	
00004232                            ; ===========================================================================
00004232                            
00004232                            Level_EndDemo:				; XREF: Level_ChkDemo
00004232 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00004238 6600                       		bne.s	loc_3B88	; if not, branch
0000423A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004240 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004244 6A00                       		bpl.s	loc_3B88	; if yes, branch
00004246 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
0000424C                            
0000424C                            loc_3B88:
0000424C 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00004252 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004258 4278 F794                  		clr.w	($FFFFF794).w
0000425C                            
0000425C                            loc_3B98:
0000425C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004262 6100 EAF0                  		bsr.w	DelayProgram
00004266 6100 0000                  		bsr.w	MoveSonicInDemo
0000426A 4EB9 0000 0000             		jsr	ObjectsLoad
00004270 4EB9 0000 0000             		jsr	BuildSprites
00004276 4EB9 0000 0000             		jsr	ObjPosLoad
0000427C 5378 F794                  		subq.w	#1,($FFFFF794).w
00004280 6A00                       		bpl.s	loc_3BC8
00004282 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004288 6100 DE04                  		bsr.w	Pal_FadeOut
0000428C                            
0000428C                            loc_3BC8:
0000428C 4A78 F614                  		tst.w	($FFFFF614).w
00004290 66CA                       		bne.s	loc_3B98
00004292 4E75                       		rts	
00004294                            ; ===========================================================================
00004294                            ; ---------------------------------------------------------------------------
00004294                            ; Subroutine to	do special water effects in Labyrinth Zone
00004294                            ; ---------------------------------------------------------------------------
00004294                            
00004294                            LZWaterEffects:				; XREF: Level
00004294 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000429A 6600                       		bne.s	locret_3C28	; if not, branch
0000429C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000042A2 6400                       		bcc.s	LZMoveWater
000042A4 6100 0000                  		bsr.w	LZWindTunnels
000042A8 6100 0000                  		bsr.w	LZWaterSlides
000042AC 6100 0000                  		bsr.w	LZDynamicWater
000042B0                            
000042B0                            LZMoveWater:
000042B0 4238 F64E                  		clr.b	($FFFFF64E).w
000042B4 7000                       		moveq	#0,d0
000042B6 1038 FE60                  		move.b	($FFFFFE60).w,d0
000042BA E248                       		lsr.w	#1,d0
000042BC D078 F648                  		add.w	($FFFFF648).w,d0
000042C0 31C0 F646                  		move.w	d0,($FFFFF646).w
000042C4 3038 F646                  		move.w	($FFFFF646).w,d0
000042C8 9078 F704                  		sub.w	($FFFFF704).w,d0
000042CC 6400                       		bcc.s	loc_3C1A
000042CE 4A40                       		tst.w	d0
000042D0 6A00                       		bpl.s	loc_3C1A
000042D2 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
000042D8 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
000042DE                            
000042DE                            loc_3C1A:
000042DE 0C40 00DF                  		cmpi.w	#$DF,d0
000042E2 6500                       		bcs.s	loc_3C24
000042E4 303C 00DF                  		move.w	#$DF,d0
000042E8                            
000042E8                            loc_3C24:
000042E8 11C0 F625                  		move.b	d0,($FFFFF625).w
000042EC                            
000042EC                            locret_3C28:
000042EC 4E75                       		rts	
000042EE                            ; ===========================================================================
000042EE                            ; ---------------------------------------------------------------------------
000042EE                            ; Labyrinth default water heights
000042EE                            ; ---------------------------------------------------------------------------
000042EE                            WaterHeight:	incbin	misc\lz_heigh.bin
000042F6                            		even
000042F6                            ; ===========================================================================
000042F6                            
000042F6                            ; ---------------------------------------------------------------------------
000042F6                            ; Labyrinth dynamic water routines
000042F6                            ; ---------------------------------------------------------------------------
000042F6                            
000042F6                            LZDynamicWater:				; XREF: LZWaterEffects
000042F6 7000                       		moveq	#0,d0
000042F8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042FC D040                       		add.w	d0,d0
000042FE 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004302 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004306 7200                       		moveq	#0,d1
00004308 1238 F64C                  		move.b	($FFFFF64C).w,d1
0000430C 3038 F64A                  		move.w	($FFFFF64A).w,d0
00004310 9078 F648                  		sub.w	($FFFFF648).w,d0
00004314 6700                       		beq.s	locret_3C5A
00004316 6400                       		bcc.s	loc_3C56
00004318 4441                       		neg.w	d1
0000431A                            
0000431A                            loc_3C56:
0000431A D378 F648                  		add.w	d1,($FFFFF648).w
0000431E                            
0000431E                            locret_3C5A:
0000431E 4E75                       		rts	
00004320                            ; ===========================================================================
00004320 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004322 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004324 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004326 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004328                            ; ===========================================================================
00004328                            
00004328                            DynWater_LZ1:				; XREF: DynWater_Index
00004328 3038 F700                  		move.w	($FFFFF700).w,d0
0000432C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004330 6600                       		bne.s	loc_3CD0
00004332 323C 00B8                  		move.w	#$B8,d1
00004336 0C40 0600                  		cmpi.w	#$600,d0
0000433A 6500                       		bcs.s	loc_3CB4
0000433C 323C 0108                  		move.w	#$108,d1
00004340 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00004346 6500                       		bcs.s	loc_3CBA
00004348 0C40 0C00                  		cmpi.w	#$C00,d0
0000434C 6500                       		bcs.s	loc_3CB4
0000434E 323C 0318                  		move.w	#$318,d1
00004352 0C40 1080                  		cmpi.w	#$1080,d0
00004356 6500                       		bcs.s	loc_3CB4
00004358 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000435E 323C 05C8                  		move.w	#$5C8,d1
00004362 0C40 1380                  		cmpi.w	#$1380,d0
00004366 6500                       		bcs.s	loc_3CB4
00004368 323C 03A8                  		move.w	#$3A8,d1
0000436C B278 F648                  		cmp.w	($FFFFF648).w,d1
00004370 6600                       		bne.s	loc_3CB4
00004372 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004378                            
00004378                            loc_3CB4:
00004378 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000437C 4E75                       		rts	
0000437E                            ; ===========================================================================
0000437E                            
0000437E                            loc_3CBA:				; XREF: DynWater_LZ1
0000437E 0C40 0C80                  		cmpi.w	#$C80,d0
00004382 65F4                       		bcs.s	loc_3CB4
00004384 323C 00E8                  		move.w	#$E8,d1
00004388 0C40 1500                  		cmpi.w	#$1500,d0
0000438C 65EA                       		bcs.s	loc_3CB4
0000438E 323C 0108                  		move.w	#$108,d1
00004392 60E4                       		bra.s	loc_3CB4
00004394                            ; ===========================================================================
00004394                            
00004394                            loc_3CD0:				; XREF: DynWater_LZ1
00004394 5302                       		subq.b	#1,d2
00004396 6600                       		bne.s	locret_3CF4
00004398 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000439E 6400                       		bcc.s	locret_3CF4
000043A0 323C 03A8                  		move.w	#$3A8,d1
000043A4 0C40 1300                  		cmpi.w	#$1300,d0
000043A8 6500                       		bcs.s	loc_3CF0
000043AA 323C 0108                  		move.w	#$108,d1
000043AE 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000043B4                            
000043B4                            loc_3CF0:
000043B4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043B8                            
000043B8                            locret_3CF4:
000043B8 4E75                       		rts	
000043BA                            ; ===========================================================================
000043BA                            
000043BA                            DynWater_LZ2:				; XREF: DynWater_Index
000043BA 3038 F700                  		move.w	($FFFFF700).w,d0
000043BE 323C 0328                  		move.w	#$328,d1
000043C2 0C40 0500                  		cmpi.w	#$500,d0
000043C6 6500                       		bcs.s	loc_3D12
000043C8 323C 03C8                  		move.w	#$3C8,d1
000043CC 0C40 0B00                  		cmpi.w	#$B00,d0
000043D0 6500                       		bcs.s	loc_3D12
000043D2 323C 0428                  		move.w	#$428,d1
000043D6                            
000043D6                            loc_3D12:
000043D6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043DA 4E75                       		rts	
000043DC                            ; ===========================================================================
000043DC                            
000043DC                            DynWater_LZ3:				; XREF: DynWater_Index
000043DC 3038 F700                  		move.w	($FFFFF700).w,d0
000043E0 1438 F64D                  		move.b	($FFFFF64D).w,d2
000043E4 6600                       		bne.s	loc_3D5E
000043E6 323C 0500                  		move.w	#$500,d1
000043EA 0C40 0600                  		cmpi.w	#$600,d0
000043EE 6500                       		bcs.s	loc_3D54
000043F0 0C40 1B00                  		cmpi.w	#$1B00,d0
000043F4 6500                       		bcs.s	loc_3D54
000043F6 323C 0850                  		move.w	#$850,d1
000043FA                            
000043FA                            loc_3D54:
000043FA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043FE 31C1 F648                  		move.w	d1,($FFFFF648).w
00004402 4E75                       		rts	
00004404                            ; ===========================================================================
00004404                            
00004404                            loc_3D5E:				; XREF: DynWater_LZ3
00004404 5302                       		subq.b	#1,d2
00004406 6600                       		bne.s	loc_3DA8
00004408 323C 04C8                  		move.w	#$4C8,d1
0000440C 0C40 0770                  		cmpi.w	#$770,d0
00004410 6500                       		bcs.s	loc_3DA2
00004412 323C 0308                  		move.w	#$308,d1
00004416 0C40 1400                  		cmpi.w	#$1400,d0
0000441A 6500                       		bcs.s	loc_3DA2
0000441C 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00004422 6700                       		beq.s	loc_3D8E
00004424 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000442A 6400                       		bcc.s	loc_3D8E
0000442C 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004432 6400                       		bcc.s	loc_3DA2
00004434                            
00004434                            loc_3D8E:
00004434 323C 0508                  		move.w	#$508,d1
00004438 31C1 F648                  		move.w	d1,($FFFFF648).w
0000443C 0C40 1770                  		cmpi.w	#$1770,d0
00004440 6500                       		bcs.s	loc_3DA2
00004442 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004448                            
00004448                            loc_3DA2:
00004448 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000444C 4E75                       		rts	
0000444E                            ; ===========================================================================
0000444E                            
0000444E                            loc_3DA8:
0000444E 5302                       		subq.b	#1,d2
00004450 6600                       		bne.s	loc_3DD2
00004452 323C 0508                  		move.w	#$508,d1
00004456 0C40 1860                  		cmpi.w	#$1860,d0
0000445A 6500                       		bcs.s	loc_3DCC
0000445C 323C 0188                  		move.w	#$188,d1
00004460 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004464 6400                       		bcc.s	loc_3DC6
00004466 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000446A 6600                       		bne.s	loc_3DCC
0000446C                            
0000446C                            loc_3DC6:
0000446C 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004472                            
00004472                            loc_3DCC:
00004472 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004476 4E75                       		rts	
00004478                            ; ===========================================================================
00004478                            
00004478                            loc_3DD2:
00004478 5302                       		subq.b	#1,d2
0000447A 6600                       		bne.s	loc_3E0E
0000447C 323C 0188                  		move.w	#$188,d1
00004480 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004484 6500                       		bcs.s	loc_3E04
00004486 323C 0900                  		move.w	#$900,d1
0000448A 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000448E 6500                       		bcs.s	loc_3E04
00004490 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004496 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
0000449C 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
000044A2 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
000044A8 4E75                       		rts	
000044AA                            ; ===========================================================================
000044AA                            
000044AA                            loc_3E04:
000044AA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000044AE 31C1 F648                  		move.w	d1,($FFFFF648).w
000044B2 4E75                       		rts	
000044B4                            ; ===========================================================================
000044B4                            
000044B4                            loc_3E0E:
000044B4 0C40 1E00                  		cmpi.w	#$1E00,d0
000044B8 6500                       		bcs.s	locret_3E1A
000044BA 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
000044C0                            
000044C0                            locret_3E1A:
000044C0 4E75                       		rts	
000044C2                            ; ===========================================================================
000044C2                            
000044C2                            DynWater_SBZ3:				; XREF: DynWater_Index
000044C2 323C 0228                  		move.w	#$228,d1
000044C6 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000044CC 6500                       		bcs.s	loc_3E2C
000044CE 323C 04C8                  		move.w	#$4C8,d1
000044D2                            
000044D2                            loc_3E2C:
000044D2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000044D6 4E75                       		rts
000044D8                            
000044D8                            ; ---------------------------------------------------------------------------
000044D8                            ; Labyrinth Zone "wind tunnels"	subroutine
000044D8                            ; ---------------------------------------------------------------------------
000044D8                            
000044D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044D8                            
000044D8                            
000044D8                            LZWindTunnels:				; XREF: LZWaterEffects
000044D8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000044DC 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000044E0 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000044E6 7000                       		moveq	#0,d0
000044E8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000044EC E748                       		lsl.w	#3,d0
000044EE D4C0                       		adda.w	d0,a2
000044F0 7200                       		moveq	#0,d1
000044F2 4A38 FE11                  		tst.b	($FFFFFE11).w
000044F6 6600                       		bne.s	loc_3E56
000044F8 7201                       		moveq	#1,d1
000044FA 514A                       		subq.w	#8,a2
000044FC                            
000044FC                            loc_3E56:
000044FC 43F8 D000                  		lea	($FFFFD000).w,a1
00004500                            
00004500                            LZWind_Loop:
00004500 3029 0008                  		move.w	8(a1),d0
00004504 B052                       		cmp.w	(a2),d0
00004506 6500 0000                  		bcs.w	loc_3EF4
0000450A B06A 0004                  		cmp.w	4(a2),d0
0000450E 6400 0000                  		bcc.w	loc_3EF4
00004512 3429 000C                  		move.w	$C(a1),d2
00004516 B46A 0002                  		cmp.w	2(a2),d2
0000451A 6500                       		bcs.s	loc_3EF4
0000451C B46A 0006                  		cmp.w	6(a2),d2
00004520 6400                       		bcc.s	loc_3EF4
00004522 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004526 0200 003F                  		andi.b	#$3F,d0
0000452A 6600                       		bne.s	loc_3E90
0000452C 303C 00D0                  		move.w	#$D0,d0
00004530 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004536                            
00004536                            loc_3E90:
00004536 4A38 F7C9                  		tst.b	($FFFFF7C9).w
0000453A 6600 0000                  		bne.w	locret_3F0A
0000453E 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004544 6400                       		bcc.s	loc_3F06
00004546 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
0000454C 0440 0080                  		subi.w	#$80,d0
00004550 B052                       		cmp.w	(a2),d0
00004552 6400                       		bcc.s	LZWind_Move
00004554 7002                       		moveq	#2,d0
00004556 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000455C 6600                       		bne.s	loc_3EBA
0000455E 4440                       		neg.w	d0
00004560                            
00004560                            loc_3EBA:
00004560 D169 000C                  		add.w	d0,$C(a1)
00004564                            
00004564                            LZWind_Move:
00004564 5869 0008                  		addq.w	#4,8(a1)
00004568 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
0000456E 337C 0000 0012             		move.w	#0,$12(a1)
00004574 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
0000457A 08E9 0001 0022             		bset	#1,$22(a1)
00004580 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004586 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004588 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000458C                            
0000458C                            LZWind_MoveDown:
0000458C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004592 6700                       		beq.s	locret_3EF2	; if not, branch
00004594 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004598                            
00004598                            locret_3EF2:
00004598 4E75                       		rts	
0000459A                            ; ===========================================================================
0000459A                            
0000459A                            loc_3EF4:				; XREF: LZWindTunnels
0000459A 504A                       		addq.w	#8,a2
0000459C 51C9 FF62                  		dbf	d1,LZWind_Loop
000045A0 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000045A4 6700                       		beq.s	locret_3F0A
000045A6 137C 0000 001C             		move.b	#0,$1C(a1)
000045AC                            
000045AC                            loc_3F06:
000045AC 4238 F7C7                  		clr.b	($FFFFF7C7).w
000045B0                            
000045B0                            locret_3F0A:
000045B0 4E75                       		rts	
000045B2                            ; End of function LZWindTunnels
000045B2                            
000045B2                            ; ===========================================================================
000045B2 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
000045BA 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000045CC 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000045DA                            					; XREF: LZWindTunnels
000045DA                            		even
000045DA                            
000045DA                            ; ---------------------------------------------------------------------------
000045DA                            ; Labyrinth Zone water slide subroutine
000045DA                            ; ---------------------------------------------------------------------------
000045DA                            
000045DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045DA                            
000045DA                            
000045DA                            LZWaterSlides:				; XREF: LZWaterEffects
000045DA 43F8 D000                  		lea	($FFFFD000).w,a1
000045DE 0829 0001 0022             		btst	#1,$22(a1)
000045E4 6600                       		bne.s	loc_3F6A
000045E6 3029 000C                  		move.w	$C(a1),d0
000045EA E248                       		lsr.w	#1,d0
000045EC 0240 0380                  		andi.w	#$380,d0
000045F0 1229 0008                  		move.b	8(a1),d1
000045F4 0241 007F                  		andi.w	#$7F,d1
000045F8 D041                       		add.w	d1,d0
000045FA 45F8 A400                  		lea	($FFFFA400).w,a2
000045FE 1032 0000                  		move.b	(a2,d0.w),d0
00004602 45FA 0000                  		lea	byte_3FCF(pc),a2
00004606 7206                       		moveq	#6,d1
00004608                            
00004608                            loc_3F62:
00004608 B022                       		cmp.b	-(a2),d0
0000460A 57C9 FFFC                  		dbeq	d1,loc_3F62
0000460E 6700                       		beq.s	LZSlide_Move
00004610                            
00004610                            loc_3F6A:
00004610 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004614 6700                       		beq.s	locret_3F7A
00004616 337C 0005 003E             		move.w	#5,$3E(a1)
0000461C 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004620                            
00004620                            locret_3F7A:
00004620 4E75                       		rts	
00004622                            ; ===========================================================================
00004622                            
00004622                            LZSlide_Move:				; XREF: LZWaterSlides
00004622 0C41 0003                  		cmpi.w	#3,d1
00004626 6400                       		bcc.s	loc_3F84
00004628 4E71                       		nop	
0000462A                            
0000462A                            loc_3F84:
0000462A 08A9 0000 0022             		bclr	#0,$22(a1)
00004630 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004634 1340 0014                  		move.b	d0,$14(a1)
00004638 6A00                       		bpl.s	loc_3F9A
0000463A 08E9 0000 0022             		bset	#0,$22(a1)
00004640                            
00004640                            loc_3F9A:
00004640 4229 0015                  		clr.b	$15(a1)
00004644 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
0000464A 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004650 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004654 0200 001F                  		andi.b	#$1F,d0
00004658 6600                       		bne.s	locret_3FBE
0000465A 303C 00D0                  		move.w	#$D0,d0
0000465E 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play water sound
00004664                            
00004664                            locret_3FBE:
00004664 4E75                       		rts	
00004666                            ; End of function LZWaterSlides
00004666                            
00004666                            ; ===========================================================================
00004666 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004675 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004676                            		even
00004676                            
00004676                            ; ---------------------------------------------------------------------------
00004676                            ; Subroutine to	move Sonic in demo mode
00004676                            ; ---------------------------------------------------------------------------
00004676                            
00004676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004676                            
00004676                            
00004676                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004676 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000467A 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000467C 4E75                       		rts	
0000467E                            ; ===========================================================================
0000467E                            
0000467E                            ; This is an unused subroutine for recording a demo
0000467E                            
0000467E                            MoveDemo_Record:
0000467E 43F9 0008 0000             		lea	($80000).l,a1
00004684 3038 F790                  		move.w	($FFFFF790).w,d0
00004688 D2C0                       		adda.w	d0,a1
0000468A 1038 F604                  		move.b	($FFFFF604).w,d0
0000468E B011                       		cmp.b	(a1),d0
00004690 6600                       		bne.s	loc_3FFA
00004692 5229 0001                  		addq.b	#1,1(a1)
00004696 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000469C 6700                       		beq.s	loc_3FFA
0000469E 4E75                       		rts	
000046A0                            ; ===========================================================================
000046A0                            
000046A0                            loc_3FFA:				; XREF: MoveDemo_Record
000046A0 1340 0002                  		move.b	d0,2(a1)
000046A4 137C 0000 0003             		move.b	#0,3(a1)
000046AA 5478 F790                  		addq.w	#2,($FFFFF790).w
000046AE 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000046B4 4E75                       		rts	
000046B6                            ; ===========================================================================
000046B6                            
000046B6                            MoveDemo_On:				; XREF: MoveSonicInDemo
000046B6 4A38 F604                  		tst.b	($FFFFF604).w
000046BA 6A00                       		bpl.s	loc_4022
000046BC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000046C0 6B00                       		bmi.s	loc_4022
000046C2 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000046C8                            
000046C8                            loc_4022:
000046C8 43F9 0000 0000             		lea	(Demo_Index).l,a1
000046CE 7000                       		moveq	#0,d0
000046D0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000046D4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000046DA 6600                       		bne.s	loc_4038
000046DC 7006                       		moveq	#6,d0
000046DE                            
000046DE                            loc_4038:
000046DE E548                       		lsl.w	#2,d0
000046E0 2271 0000                  		movea.l	(a1,d0.w),a1
000046E4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000046E8 6A00                       		bpl.s	loc_4056
000046EA 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000046F0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000046F4 5340                       		subq.w	#1,d0
000046F6 E548                       		lsl.w	#2,d0
000046F8 2271 0000                  		movea.l	(a1,d0.w),a1
000046FC                            
000046FC                            loc_4056:
000046FC 3038 F790                  		move.w	($FFFFF790).w,d0
00004700 D2C0                       		adda.w	d0,a1
00004702 1011                       		move.b	(a1),d0
00004704 41F8 F604                  		lea	($FFFFF604).w,a0
00004708 1200                       		move.b	d0,d1
0000470A 1410                       		move.b	(a0),d2
0000470C B500                       		eor.b	d2,d0
0000470E 10C1                       		move.b	d1,(a0)+
00004710 C001                       		and.b	d1,d0
00004712 10C0                       		move.b	d0,(a0)+
00004714 5338 F792                  		subq.b	#1,($FFFFF792).w
00004718 6400                       		bcc.s	locret_407E
0000471A 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004720 5478 F790                  		addq.w	#2,($FFFFF790).w
00004724                            
00004724                            locret_407E:
00004724 4E75                       		rts	
00004726                            ; End of function MoveSonicInDemo
00004726                            
00004726                            ; ===========================================================================
00004726                            ; ---------------------------------------------------------------------------
00004726                            ; Demo sequence	pointers
00004726                            ; ---------------------------------------------------------------------------
00004726                            Demo_Index:
00004726                            	include "_inc\Demo pointers for intro.asm"
00004726                            ; ---------------------------------------------------------------------------
00004726                            ; Demo sequence	pointers
00004726                            ; ---------------------------------------------------------------------------
00004726 0000 0000                  	dc.l Demo_GHZ
0000472A 0000 0000                  	dc.l Demo_GHZ
0000472E 0000 0000                  	dc.l Demo_MZ
00004732 0000 0000                  	dc.l Demo_MZ
00004736 0000 0000                  	dc.l Demo_SYZ
0000473A 0000 0000                  	dc.l Demo_SYZ
0000473E 0000 0000                  	dc.l Demo_SS
00004742 0000 0000                  	dc.l Demo_SS
00004742 0000 0000                  	dc.l Demo_SS
00004746                            
00004746                            Demo_EndIndex:
00004746                            	include "_inc\Demo pointers for ending.asm"
00004746                            ; ---------------------------------------------------------------------------
00004746                            ; Demo (ending) sequence pointers
00004746                            ; ---------------------------------------------------------------------------
00004746 0000 0000                  	dc.l Demo_EndGHZ1
0000474A 0000 0000                  	dc.l Demo_EndMZ
0000474E 0000 0000                  	dc.l Demo_EndSYZ
00004752 0000 0000                  	dc.l Demo_EndLZ
00004756 0000 0000                  	dc.l Demo_EndSLZ
0000475A 0000 0000                  	dc.l Demo_EndSBZ1
0000475E 0000 0000                  	dc.l Demo_EndSBZ2
00004762 0000 0000                  	dc.l Demo_EndGHZ2
00004762 0000 0000                  	dc.l Demo_EndGHZ2
00004766                            
00004766 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004776 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004786 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004796                            		even
00004796                            
00004796                            ; ---------------------------------------------------------------------------
00004796                            ; Collision index loading subroutine
00004796                            ; ---------------------------------------------------------------------------
00004796                            
00004796                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004796                            
00004796                            
00004796                            ColIndexLoad:				; XREF: Level
00004796 7000                       		moveq	#0,d0
00004798 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000479C E548                       		lsl.w	#2,d0
0000479E 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000047A4 4E75                       		rts	
000047A6                            ; End of function ColIndexLoad
000047A6                            
000047A6                            ; ===========================================================================
000047A6                            ; ---------------------------------------------------------------------------
000047A6                            ; Collision index pointers
000047A6                            ; ---------------------------------------------------------------------------
000047A6                            ColPointers:
000047A6                            	include "_inc\Collision index pointers.asm"
000047A6                            ; ---------------------------------------------------------------------------
000047A6                            ; Collision index pointers
000047A6                            ; ---------------------------------------------------------------------------
000047A6 0000 0000                  	dc.l Col_GHZ
000047AA 0000 0000                  	dc.l Col_LZ
000047AE 0000 0000                  	dc.l Col_MZ
000047B2 0000 0000                  	dc.l Col_SLZ
000047B6 0000 0000                  	dc.l Col_SYZ
000047BA 0000 0000                  	dc.l Col_SBZ
000047BE 0000 0000                  	dc.l Col_GHZ ; this is the ending just so it does not fuck up
000047C2 0000 0000                  	dc.l Col_BHZ
000047C2 0000 0000                  	dc.l Col_BHZ
000047C6                            
000047C6                            ; ---------------------------------------------------------------------------
000047C6                            ; Oscillating number subroutine
000047C6                            ; ---------------------------------------------------------------------------
000047C6                            
000047C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047C6                            
000047C6                            
000047C6                            OscillateNumInit:			; XREF: Level
000047C6 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000047CA 45F9 0000 0000             		lea	(Osc_Data).l,a2
000047D0 7220                       		moveq	#$20,d1
000047D2                            
000047D2                            Osc_Loop:
000047D2 32DA                       		move.w	(a2)+,(a1)+
000047D4 51C9 FFFC                  		dbf	d1,Osc_Loop
000047D8 4E75                       		rts	
000047DA                            ; End of function OscillateNumInit
000047DA                            
000047DA                            ; ===========================================================================
000047DA 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000047DE 0000 0080                  		dc.w 0,	$80
000047E2 0000 0080                  		dc.w 0,	$80
000047E6 0000 0080                  		dc.w 0,	$80
000047EA 0000 0080                  		dc.w 0,	$80
000047EE 0000 0080                  		dc.w 0,	$80
000047F2 0000 0080                  		dc.w 0,	$80
000047F6 0000 0080                  		dc.w 0,	$80
000047FA 0000 0080                  		dc.w 0,	$80
000047FE 0000 50F0                  		dc.w 0,	$50F0
00004802 011E 2080                  		dc.w $11E, $2080
00004806 00B4 3080                  		dc.w $B4, $3080
0000480A 010E 5080                  		dc.w $10E, $5080
0000480E 01C2 7080                  		dc.w $1C2, $7080
00004812 0276 0080                  		dc.w $276, $80
00004816 0000 0080                  		dc.w 0,	$80
0000481A 0000                       		dc.w 0
0000481C                            		even
0000481C                            
0000481C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000481C                            
0000481C                            
0000481C                            OscillateNumDo:				; XREF: Level
0000481C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004822 6400                       		bcc.s	locret_41C4
00004824 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004828 45F9 0000 0000             		lea	(Osc_Data2).l,a2
0000482E 3619                       		move.w	(a1)+,d3
00004830 720F                       		moveq	#$F,d1
00004832                            
00004832                            loc_4184:
00004832 341A                       		move.w	(a2)+,d2
00004834 381A                       		move.w	(a2)+,d4
00004836 0303                       		btst	d1,d3
00004838 6600                       		bne.s	loc_41A4
0000483A 3029 0002                  		move.w	2(a1),d0
0000483E D042                       		add.w	d2,d0
00004840 3340 0002                  		move.w	d0,2(a1)
00004844 D151                       		add.w	d0,0(a1)
00004846 B811                       		cmp.b	0(a1),d4
00004848 6200                       		bhi.s	loc_41BA
0000484A 03C3                       		bset	d1,d3
0000484C 6000                       		bra.s	loc_41BA
0000484E                            ; ===========================================================================
0000484E                            
0000484E                            loc_41A4:				; XREF: OscillateNumDo
0000484E 3029 0002                  		move.w	2(a1),d0
00004852 9042                       		sub.w	d2,d0
00004854 3340 0002                  		move.w	d0,2(a1)
00004858 D151                       		add.w	d0,0(a1)
0000485A B811                       		cmp.b	0(a1),d4
0000485C 6300                       		bls.s	loc_41BA
0000485E 0383                       		bclr	d1,d3
00004860                            
00004860                            loc_41BA:
00004860 5849                       		addq.w	#4,a1
00004862 51C9 FFCE                  		dbf	d1,loc_4184
00004866 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
0000486A                            
0000486A                            locret_41C4:
0000486A 4E75                       		rts	
0000486C                            ; End of function OscillateNumDo
0000486C                            
0000486C                            ; ===========================================================================
0000486C 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004870 0002 0018                  		dc.w 2,	$18
00004874 0002 0020                  		dc.w 2,	$20
00004878 0002 0030                  		dc.w 2,	$30
0000487C 0004 0020                  		dc.w 4,	$20
00004880 0008 0008                  		dc.w 8,	8
00004884 0008 0040                  		dc.w 8,	$40
00004888 0004 0040                  		dc.w 4,	$40
0000488C 0002 0050                  		dc.w 2,	$50
00004890 0002 0050                  		dc.w 2,	$50
00004894 0002 0020                  		dc.w 2,	$20
00004898 0003 0030                  		dc.w 3,	$30
0000489C 0005 0050                  		dc.w 5,	$50
000048A0 0007 0070                  		dc.w 7,	$70
000048A4 0002 0010                  		dc.w 2,	$10
000048A8 0002 0010                  		dc.w 2,	$10
000048AC                            		even
000048AC                            
000048AC                            ; ---------------------------------------------------------------------------
000048AC                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000048AC                            ; ---------------------------------------------------------------------------
000048AC                            
000048AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000048AC                            
000048AC                            
000048AC                            ChangeRingFrame:			; XREF: Level
000048AC 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000048B0 6A00                       		bpl.s	loc_421C
000048B2 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
000048B8 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000048BC 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000048C2                            
000048C2                            loc_421C:
000048C2 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000048C6 6A00                       		bpl.s	loc_4232
000048C8 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000048CE 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000048D2 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000048D8                            
000048D8                            loc_4232:
000048D8 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000048DC 6A00                       		bpl.s	loc_4250
000048DE 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
000048E4 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
000048E8 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
000048EE 6500                       		bcs.s	loc_4250
000048F0 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
000048F6                            
000048F6                            loc_4250:
000048F6 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000048FA 6700                       		beq.s	locret_4272
000048FC 7000                       		moveq	#0,d0
000048FE 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004902 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004906 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000490A EF58                       		rol.w	#7,d0
0000490C 0240 0003                  		andi.w	#3,d0
00004910 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004914 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004918                            
00004918                            locret_4272:
00004918 4E75                       		rts	
0000491A                            ; End of function ChangeRingFrame
0000491A                            
0000491A                            ; ---------------------------------------------------------------------------
0000491A                            ; End-of-act signpost pattern loading subroutine
0000491A                            ; ---------------------------------------------------------------------------
0000491A                            
0000491A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000491A                            
0000491A                            
0000491A                            SignpostArtLoad:			; XREF: Level
0000491A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000491E 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004922 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004928 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000492A 3038 F700                  		move.w	($FFFFF700).w,d0
0000492E 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004932 0441 0100                  		subi.w	#$100,d1
00004936 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004938 6D00                       		blt.s	Signpost_Exit	; if not, branch
0000493A 4A38 FE1E                  		tst.b	($FFFFFE1E).w
0000493E 6700                       		beq.s	Signpost_Exit
00004940 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004944 6700                       		beq.s	Signpost_Exit
00004946 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
0000494A 7012                       		moveq	#$12,d0
0000494C 6000 CEB4                  		bra.w	LoadPLC2	; load signpost	patterns
00004950                            ; ===========================================================================
00004950                            
00004950                            Signpost_Exit:
00004950 4E75                       		rts	
00004952                            ; End of function SignpostArtLoad
00004952                            
00004952                            ; ===========================================================================
00004952                            Demo_GHZ:	incbin	demodata\i_ghz.bin
000049D2                            Demo_MZ:	incbin	demodata\i_mz.bin
00004B02                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004B82                            Demo_SS:	incbin	demodata\i_ss.bin
00004C82                            ; ===========================================================================
00004C82                            
00004C82                            ; ---------------------------------------------------------------------------
00004C82                            ; Special Stage
00004C82                            ; ---------------------------------------------------------------------------
00004C82                            
00004C82                            SpecialStage:				; XREF: GameModeArray
00004C82 303C 00CA                  		move.w	#$CA,d0
00004C86 6100 C964                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004C8A 6100 D50C                  		bsr.w	Pal_MakeFlash
00004C8E 46FC 2700                  		move	#$2700,sr
00004C92 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C98 3CBC 8B03                  		move.w	#$8B03,(a6)
00004C9C 3CBC 8004                  		move.w	#$8004,(a6)
00004CA0 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004CA6 3CBC 9011                  		move.w	#$9011,(a6)
00004CAA 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004CAE 0200 00BF                  		andi.b	#$BF,d0
00004CB2 33C0 00C0 0004             		move.w	d0,($C00004).l
00004CB8 6100 C85A                  		bsr.w	ClearScreen
00004CBC 46FC 2300                  		move	#$2300,sr
00004CC0 4BF9 00C0 0004             		lea	($C00004).l,a5
00004CC6 3ABC 8F01                  		move.w	#$8F01,(a5)
00004CCA 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004CD0 3ABC 9780                  		move.w	#$9780,(a5)
00004CD4 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004CDA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004CE2                            
00004CE2                            loc_463C:
00004CE2 3215                       		move.w	(a5),d1
00004CE4 0801 0001                  		btst	#1,d1
00004CE8 66F8                       		bne.s	loc_463C
00004CEA 3ABC 8F02                  		move.w	#$8F02,(a5)
00004CEE 6100 0000                  		bsr.w	SS_BGLoad
00004CF2 7014                       		moveq	#$14,d0
00004CF4 6100 CC46                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004CF8 43F8 D000                  		lea	($FFFFD000).w,a1
00004CFC 7000                       		moveq	#0,d0
00004CFE 323C 07FF                  		move.w	#$7FF,d1
00004D02                            
00004D02                            SS_ClrObjRam:
00004D02 22C0                       		move.l	d0,(a1)+
00004D04 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004D08                            
00004D08 43F8 F700                  		lea	($FFFFF700).w,a1
00004D0C 7000                       		moveq	#0,d0
00004D0E 323C 003F                  		move.w	#$3F,d1
00004D12                            
00004D12                            SS_ClrRam:
00004D12 22C0                       		move.l	d0,(a1)+
00004D14 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004D18                            
00004D18 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004D1C 7000                       		moveq	#0,d0
00004D1E 323C 0027                  		move.w	#$27,d1
00004D22                            
00004D22                            SS_ClrRam2:
00004D22 22C0                       		move.l	d0,(a1)+
00004D24 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004D28                            
00004D28 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004D2C 7000                       		moveq	#0,d0
00004D2E 323C 007F                  		move.w	#$7F,d1
00004D32                            
00004D32                            SS_ClrNemRam:
00004D32 22C0                       		move.l	d0,(a1)+
00004D34 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004D38                            
00004D38 4238 F64E                  		clr.b	($FFFFF64E).w
00004D3C 4278 FE02                  		clr.w	($FFFFFE02).w
00004D40 700A                       		moveq	#$A,d0
00004D42 6100 D5D4                  		bsr.w	PalLoad1	; load special stage pallet
00004D46 4EB9 0000 0000             		jsr	SS_Load
00004D4C 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004D54 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004D5C 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004D62 6100 0000                  		bsr.w	PalCycle_SS
00004D66 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004D6A 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
00004D6E 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00004D74 303C 0089                  		move.w	#$89,d0
00004D78 6100 C86C                  		bsr.w	PlaySound	; play special stage BG	music
00004D7C 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004D82 43F9 0000 4726             		lea	(Demo_Index).l,a1
00004D88 7006                       		moveq	#6,d0
00004D8A E548                       		lsl.w	#2,d0
00004D8C 2271 0000                  		movea.l	(a1,d0.w),a1
00004D90 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004D96 5338 F792                  		subq.b	#1,($FFFFF792).w
00004D9A 4278 FE20                  		clr.w	($FFFFFE20).w
00004D9E 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004DA2 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004DA8 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004DAE                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004DAE                            ;		beq.s	SS_NoDebug	; if not, branch
00004DAE                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
00004DAE                            ;		beq.s	SS_NoDebug	; if not, branch
00004DAE                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004DAE                            
00004DAE                            SS_NoDebug:
00004DAE 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004DB2 0000 0040                  		ori.b	#$40,d0
00004DB6 33C0 00C0 0004             		move.w	d0,($C00004).l
00004DBC 6100 D32E                  		bsr.w	Pal_MakeWhite
00004DC0                            
00004DC0                            ; ---------------------------------------------------------------------------
00004DC0                            ; Main Special Stage loop
00004DC0                            ; ---------------------------------------------------------------------------
00004DC0                            
00004DC0                            SS_MainLoop:
00004DC0 6100 C836                  		bsr.w	PauseGame
00004DC4 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004DCA 6100 DF88                  		bsr.w	DelayProgram
00004DCE 4A78 F784                          tst.w   ($FFFFF784).w
00004DD2 6700                               beq.s   SS_NotReversed
00004DD4 5378 F784                          subi.w  #1,($FFFFF784).w
00004DD8                            
00004DD8                            SS_NotReversed:
00004DD8 6100 F89C                  		bsr.w	MoveSonicInDemo
00004DDC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004DE2 4EB9 0000 0000             		jsr	ObjectsLoad
00004DE8 4EB9 0000 0000             		jsr	BuildSprites
00004DEE 4EB9 0000 0000             		jsr	SS_ShowLayout
00004DF4 6100 0000                  		bsr.w	SS_BGAnimate
00004DF8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DFC 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004DFE 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004E02 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004E06                            
00004E06                            SS_ChkEnd:
00004E06 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004E0C 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
00004E10                            
00004E10 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004E14 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004E18 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004E1E 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004E24 6500                       		bcs.s	SS_End		; if not, branch
00004E26 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004E2A                            
00004E2A                            SS_End:
00004E2A 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004E30 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004E36 4278 F794                  		clr.w	($FFFFF794).w
00004E3A                            
00004E3A                            SS_EndLoop:
00004E3A 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004E40 6100 DF12                  		bsr.w	DelayProgram
00004E44 6100 F830                  		bsr.w	MoveSonicInDemo
00004E48 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004E4E 4EB9 0000 0000             		jsr	ObjectsLoad
00004E54 4EB9 0000 0000             		jsr	BuildSprites
00004E5A 4EB9 0000 0000             		jsr	SS_ShowLayout
00004E60 6100 0000                  		bsr.w	SS_BGAnimate
00004E64 5378 F794                  		subq.w	#1,($FFFFF794).w
00004E68 6A00                       		bpl.s	loc_47D4
00004E6A 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004E70 6100 D346                  		bsr.w	Pal_ToWhite
00004E74                            
00004E74                            loc_47D4:
00004E74 4A78 F614                  		tst.w	($FFFFF614).w
00004E78 66C0                       		bne.s	SS_EndLoop
00004E7A                            
00004E7A 46FC 2700                  		move	#$2700,sr
00004E7E 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E84 3CBC 8230                  		move.w	#$8230,(a6)
00004E88 3CBC 8407                  		move.w	#$8407,(a6)
00004E8C 3CBC 9001                  		move.w	#$9001,(a6)
00004E90 6100 C682                  		bsr.w	ClearScreen
00004E94 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004E9E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004EA4 6100 C7EA                  		bsr.w	NemDec
00004EA8 4EB9 0000 0000             		jsr	Hud_Base
00004EAE 46FC 2300                  		move	#$2300,sr
00004EB2 7011                       		moveq	#$11,d0
00004EB4 6100 D47E                  		bsr.w	PalLoad2	; load results screen pallet
00004EB8 7000                       		moveq	#0,d0
00004EBA 6100 C946                  		bsr.w	LoadPLC2
00004EBE 701B                       		moveq	#$1B,d0
00004EC0 6100 C90E                  		bsr.w	LoadPLC		; load results screen patterns
00004EC4 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004ECA 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004ED0 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004ED4 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004ED8 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004EDC 303C 008E                  		move.w	#$8E,d0
00004EE0 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004EE6 43F8 D000                  		lea	($FFFFD000).w,a1
00004EEA 7000                       		moveq	#0,d0
00004EEC 323C 07FF                  		move.w	#$7FF,d1
00004EF0                            
00004EF0                            SS_EndClrObjRam:
00004EF0 22C0                       		move.l	d0,(a1)+
00004EF2 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004EF6                            
00004EF6 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004EFC                            
00004EFC                            SS_NormalExit:
00004EFC 6100 C6FA                  		bsr.w	PauseGame
00004F00 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004F06 6100 DE4C                  		bsr.w	DelayProgram
00004F0A 4EB9 0000 0000             		jsr	ObjectsLoad
00004F10 4EB9 0000 0000             		jsr	BuildSprites
00004F16 6100 C924                  		bsr.w	RunPLC_RAM
00004F1A 4A78 FE02                  		tst.w	($FFFFFE02).w
00004F1E 67DC                       		beq.s	SS_NormalExit
00004F20 4AB8 F680                  		tst.l	($FFFFF680).w
00004F24 66D6                       		bne.s	SS_NormalExit
00004F26 303C 00CA                  		move.w	#$CA,d0
00004F2A 6100 C6C0                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004F2E 6100 D268                  		bsr.w	Pal_MakeFlash
00004F32 4E75                       		rts	
00004F34                            ; ===========================================================================
00004F34                            
00004F34                            SS_ToSegaScreen:
00004F34 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004F3A 4E75                       		rts
00004F3C                            
00004F3C                            ; ---------------------------------------------------------------------------
00004F3C                            ; Special stage	background loading subroutine
00004F3C                            ; ---------------------------------------------------------------------------
00004F3C                            
00004F3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F3C                            
00004F3C                            
00004F3C                            SS_BGLoad:				; XREF: SpecialStage
00004F3C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F42 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004F48 303C 4051                  		move.w	#$4051,d0
00004F4C 6100 CA20                  		bsr.w	EniDec
00004F50 263C 5000 0001             		move.l	#$50000001,d3
00004F56 45F9 00FF 0080             		lea	($FF0080).l,a2
00004F5C 7E06                       		moveq	#6,d7
00004F5E                            
00004F5E                            loc_48BE:
00004F5E 2003                       		move.l	d3,d0
00004F60 7C03                       		moveq	#3,d6
00004F62 7800                       		moveq	#0,d4
00004F64 0C47 0003                  		cmpi.w	#3,d7
00004F68 6400                       		bcc.s	loc_48CC
00004F6A 7801                       		moveq	#1,d4
00004F6C                            
00004F6C                            loc_48CC:
00004F6C 7A07                       		moveq	#7,d5
00004F6E                            
00004F6E                            loc_48CE:
00004F6E 224A                       		movea.l	a2,a1
00004F70 0A04 0001                  		eori.b	#1,d4
00004F74 6600                       		bne.s	loc_48E2
00004F76 0C47 0006                  		cmpi.w	#6,d7
00004F7A 6600                       		bne.s	loc_48F2
00004F7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F82                            
00004F82                            loc_48E2:
00004F82 48E7 F800                  		movem.l	d0-d4,-(sp)
00004F86 7207                       		moveq	#7,d1
00004F88 7407                       		moveq	#7,d2
00004F8A 6100 C6E4                  		bsr.w	ShowVDPGraphics
00004F8E 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004F92                            
00004F92                            loc_48F2:
00004F92 0680 0010 0000             		addi.l	#$100000,d0
00004F98 51CD FFD4                  		dbf	d5,loc_48CE
00004F9C 0680 0380 0000             		addi.l	#$3800000,d0
00004FA2 0A04 0001                  		eori.b	#1,d4
00004FA6 51CE FFC4                  		dbf	d6,loc_48CC
00004FAA 0683 1000 0000             		addi.l	#$10000000,d3
00004FB0 6A00                       		bpl.s	loc_491C
00004FB2 4843                       		swap	d3
00004FB4 0683 0000 C000             		addi.l	#$C000,d3
00004FBA 4843                       		swap	d3
00004FBC                            
00004FBC                            loc_491C:
00004FBC D4FC 0080                  		adda.w	#$80,a2
00004FC0 51CF FF9C                  		dbf	d7,loc_48BE
00004FC4 43F9 00FF 0000             		lea	($FF0000).l,a1
00004FCA 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004FD0 303C 4000                  		move.w	#$4000,d0
00004FD4 6100 C998                  		bsr.w	EniDec
00004FD8 43F9 00FF 0000             		lea	($FF0000).l,a1
00004FDE 203C 4000 0003             		move.l	#$40000003,d0
00004FE4 723F                       		moveq	#$3F,d1
00004FE6 741F                       		moveq	#$1F,d2
00004FE8 6100 C686                  		bsr.w	ShowVDPGraphics
00004FEC 43F9 00FF 0000             		lea	($FF0000).l,a1
00004FF2 203C 5000 0003             		move.l	#$50000003,d0
00004FF8 723F                       		moveq	#$3F,d1
00004FFA 743F                       		moveq	#$3F,d2
00004FFC 6100 C672                  		bsr.w	ShowVDPGraphics
00005000 4E75                       		rts	
00005002                            ; End of function SS_BGLoad
00005002                            
00005002                            ; ---------------------------------------------------------------------------
00005002                            ; Pallet cycling routine - special stage
00005002                            ; ---------------------------------------------------------------------------
00005002                            
00005002                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005002                            
00005002                            
00005002                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00005002 4A78 F63A                  		tst.w	($FFFFF63A).w
00005006 6600                       		bne.s	locret_49E6
00005008 5378 F79C                  		subq.w	#1,($FFFFF79C).w
0000500C 6A00                       		bpl.s	locret_49E6
0000500E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005014 3038 F79A                  		move.w	($FFFFF79A).w,d0
00005018 5278 F79A                  		addq.w	#1,($FFFFF79A).w
0000501C 0240 001F                  		andi.w	#$1F,d0
00005020 E548                       		lsl.w	#2,d0
00005022 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005028 D0C0                       		adda.w	d0,a0
0000502A 1018                       		move.b	(a0)+,d0
0000502C 6A00                       		bpl.s	loc_4992
0000502E 303C 01FF                  		move.w	#$1FF,d0
00005032                            
00005032                            loc_4992:
00005032 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00005036 7000                       		moveq	#0,d0
00005038 1018                       		move.b	(a0)+,d0
0000503A 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
0000503E 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005044 43F1 0000                  		lea	(a1,d0.w),a1
00005048 303C 8200                  		move.w	#-$7E00,d0
0000504C 1019                       		move.b	(a1)+,d0
0000504E 3C80                       		move.w	d0,(a6)
00005050 11D1 F616                  		move.b	(a1),($FFFFF616).w
00005054 303C 8400                  		move.w	#-$7C00,d0
00005058 1018                       		move.b	(a0)+,d0
0000505A 3C80                       		move.w	d0,(a6)
0000505C 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00005066 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
0000506E 7000                       		moveq	#0,d0
00005070 1018                       		move.b	(a0)+,d0
00005072 6B00                       		bmi.s	loc_49E8
00005074 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
0000507A D2C0                       		adda.w	d0,a1
0000507C 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00005080 24D9                       		move.l	(a1)+,(a2)+
00005082 24D9                       		move.l	(a1)+,(a2)+
00005084 24D9                       		move.l	(a1)+,(a2)+
00005086                            
00005086                            locret_49E6:
00005086 4E75                       		rts	
00005088                            ; ===========================================================================
00005088                            
00005088                            loc_49E8:				; XREF: PalCycle_SS
00005088 3238 F79E                  		move.w	($FFFFF79E).w,d1
0000508C 0C40 008A                  		cmpi.w	#$8A,d0
00005090 6500                       		bcs.s	loc_49F4
00005092 5241                       		addq.w	#1,d1
00005094                            
00005094                            loc_49F4:
00005094 C2FC 002A                  		mulu.w	#$2A,d1
00005098 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
0000509E D2C1                       		adda.w	d1,a1
000050A0 0240 007F                  		andi.w	#$7F,d0
000050A4 0880 0000                  		bclr	#0,d0
000050A8 6700                       		beq.s	loc_4A18
000050AA 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
000050AE 24D1                       		move.l	(a1),(a2)+
000050B0 24E9 0004                  		move.l	4(a1),(a2)+
000050B4 24E9 0008                  		move.l	8(a1),(a2)+
000050B8                            
000050B8                            loc_4A18:
000050B8 D2FC 000C                  		adda.w	#$C,a1
000050BC 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
000050C0 0C40 000A                  		cmpi.w	#$A,d0
000050C4 6500                       		bcs.s	loc_4A2E
000050C6 0440 000A                  		subi.w	#$A,d0
000050CA 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
000050CE                            
000050CE                            loc_4A2E:
000050CE 3200                       		move.w	d0,d1
000050D0 D040                       		add.w	d0,d0
000050D2 D041                       		add.w	d1,d0
000050D4 D2C0                       		adda.w	d0,a1
000050D6 24D9                       		move.l	(a1)+,(a2)+
000050D8 34D9                       		move.w	(a1)+,(a2)+
000050DA 4E75                       		rts	
000050DC                            ; End of function PalCycle_SS
000050DC                            
000050DC                            ; ===========================================================================
000050DC 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
000050EC                            					; XREF: PalCycle_SS
000050EC 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000050FC 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
0000510C FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
0000511C 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
0000512C 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
0000513C 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
0000514C FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
0000515C                            		even
0000515C 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
0000516A                            					; XREF: PalCycle_SS
0000516A                            		even
0000516A                            
0000516A                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
000051B2                            		even
000051B2                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005284                            		even
00005284                            
00005284                            ; ---------------------------------------------------------------------------
00005284                            ; Subroutine to	make the special stage background animated
00005284                            ; ---------------------------------------------------------------------------
00005284                            
00005284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005284                            
00005284                            
00005284                            SS_BGAnimate:				; XREF: SpecialStage
00005284 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005288 6600                       		bne.s	loc_4BF6
0000528A 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005290 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005296                            
00005296                            loc_4BF6:
00005296 0C40 0008                  		cmpi.w	#8,d0
0000529A 6400                       		bcc.s	loc_4C4E
0000529C 0C40 0006                  		cmpi.w	#6,d0
000052A0 6600                       		bne.s	loc_4C10
000052A2 5278 F718                  		addq.w	#1,($FFFFF718).w
000052A6 5278 F70C                  		addq.w	#1,($FFFFF70C).w
000052AA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000052B0                            
000052B0                            loc_4C10:
000052B0 7000                       		moveq	#0,d0
000052B2 3038 F708                  		move.w	($FFFFF708).w,d0
000052B6 4440                       		neg.w	d0
000052B8 4840                       		swap	d0
000052BA 43F9 0000 0000             		lea	(byte_4CCC).l,a1
000052C0 47F8 AA00                  		lea	($FFFFAA00).w,a3
000052C4 7609                       		moveq	#9,d3
000052C6                            
000052C6                            loc_4C26:
000052C6 302B 0002                  		move.w	2(a3),d0
000052CA 6100 DABA                  		bsr.w	CalcSine
000052CE 7400                       		moveq	#0,d2
000052D0 1419                       		move.b	(a1)+,d2
000052D2 C1C2                       		muls.w	d2,d0
000052D4 E080                       		asr.l	#8,d0
000052D6 36C0                       		move.w	d0,(a3)+
000052D8 1419                       		move.b	(a1)+,d2
000052DA 4882                       		ext.w	d2
000052DC D55B                       		add.w	d2,(a3)+
000052DE 51CB FFE6                  		dbf	d3,loc_4C26
000052E2 47F8 AA00                  		lea	($FFFFAA00).w,a3
000052E6 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000052EC 6000                       		bra.s	loc_4C7E
000052EE                            ; ===========================================================================
000052EE                            
000052EE                            loc_4C4E:				; XREF: SS_BGAnimate
000052EE 0C40 000C                  		cmpi.w	#$C,d0
000052F2 6600                       		bne.s	loc_4C74
000052F4 5378 F718                  		subq.w	#1,($FFFFF718).w
000052F8 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052FC 243C 0001 8000             		move.l	#$18000,d2
00005302 7206                       		moveq	#6,d1
00005304                            
00005304                            loc_4C64:
00005304 2013                       		move.l	(a3),d0
00005306 9082                       		sub.l	d2,d0
00005308 26C0                       		move.l	d0,(a3)+
0000530A 0482 0000 2000             		subi.l	#$2000,d2
00005310 51C9 FFF2                  		dbf	d1,loc_4C64
00005314                            
00005314                            loc_4C74:
00005314 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005318 45F9 0000 0000             		lea	(byte_4CC4).l,a2
0000531E                            
0000531E                            loc_4C7E:
0000531E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00005322 3038 F718                  		move.w	($FFFFF718).w,d0
00005326 4440                       		neg.w	d0
00005328 4840                       		swap	d0
0000532A 7600                       		moveq	#0,d3
0000532C 161A                       		move.b	(a2)+,d3
0000532E 3438 F70C                  		move.w	($FFFFF70C).w,d2
00005332 4442                       		neg.w	d2
00005334 0242 00FF                  		andi.w	#$FF,d2
00005338 E54A                       		lsl.w	#2,d2
0000533A                            
0000533A                            loc_4C9A:
0000533A 301B                       		move.w	(a3)+,d0
0000533C 544B                       		addq.w	#2,a3
0000533E 7200                       		moveq	#0,d1
00005340 121A                       		move.b	(a2)+,d1
00005342 5341                       		subq.w	#1,d1
00005344                            
00005344                            loc_4CA4:
00005344 2380 2000                  		move.l	d0,(a1,d2.w)
00005348 5842                       		addq.w	#4,d2
0000534A 0242 03FC                  		andi.w	#$3FC,d2
0000534E 51C9 FFF4                  		dbf	d1,loc_4CA4
00005352 51CB FFE6                  		dbf	d3,loc_4C9A
00005356 4E75                       		rts	
00005358                            ; End of function SS_BGAnimate
00005358                            
00005358                            ; ===========================================================================
00005358 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005364                            		even
00005364 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
0000536C                            		even
0000536C 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005380                            		even
00005380                            					; XREF: SS_BGAnimate
00005380                            ; ===========================================================================
00005380                            
00005380                            ; ---------------------------------------------------------------------------
00005380                            ; Continue screen
00005380                            ; ---------------------------------------------------------------------------
00005380                            
00005380                            ContinueScreen:				; XREF: GameModeArray
00005380 6100 CCEC                  		bsr.w	Pal_FadeFrom
00005384 46FC 2700                  		move	#$2700,sr
00005388 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000538C 0200 00BF                  		andi.b	#$BF,d0
00005390 33C0 00C0 0004             		move.w	d0,($C00004).l
00005396 4DF9 00C0 0004             		lea	($C00004).l,a6
0000539C 3CBC 8004                  		move.w	#$8004,(a6)
000053A0 3CBC 8700                  		move.w	#$8700,(a6)
000053A4 6100 C16E                  		bsr.w	ClearScreen
000053A8 43F8 D000                  		lea	($FFFFD000).w,a1
000053AC 7000                       		moveq	#0,d0
000053AE 323C 07FF                  		move.w	#$7FF,d1
000053B2                            
000053B2                            Cont_ClrObjRam:
000053B2 22C0                       		move.l	d0,(a1)+
000053B4 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
000053B8                            
000053B8 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000053C2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000053C8 6100 C2C6                  		bsr.w	NemDec
000053CC 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
000053D6 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
000053DC 6100 C2B2                  		bsr.w	NemDec
000053E0 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
000053EA 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
000053F0 6100 C29E                  		bsr.w	NemDec
000053F4 720A                       		moveq	#10,d1
000053F6 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000053FC 7012                       		moveq	#$12,d0
000053FE 6100 CF18                  		bsr.w	PalLoad1	; load continue	screen pallet
00005402 103C 0090                  		move.b	#$90,d0
00005406 6100 C1DE                  		bsr.w	PlaySound	; play continue	music
0000540A 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00005410 42B8 F700                  		clr.l	($FFFFF700).w
00005414 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
0000541C 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00005422 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005428 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
0000542E 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005434 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
0000543A 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005440 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005446 4EB9 0000 0000             		jsr	ObjectsLoad
0000544C 4EB9 0000 0000             		jsr	BuildSprites
00005452 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005456 0000 0040                  		ori.b	#$40,d0
0000545A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005460 6100 CB62                  		bsr.w	Pal_FadeTo
00005464                            
00005464                            ; ---------------------------------------------------------------------------
00005464                            ; Continue screen main loop
00005464                            ; ---------------------------------------------------------------------------
00005464                            
00005464                            Cont_MainLoop:
00005464 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000546A 6100 D8E8                  		bsr.w	DelayProgram
0000546E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005474 6400                       		bcc.s	loc_4DF2
00005476 46FC 2700                  		move	#$2700,sr
0000547A 3238 F614                  		move.w	($FFFFF614).w,d1
0000547E 82FC 003C                  		divu.w	#$3C,d1
00005482 0281 0000 000F             		andi.l	#$F,d1
00005488 4EB9 0000 0000             		jsr	ContScrCounter
0000548E 46FC 2300                  		move	#$2300,sr
00005492                            
00005492                            loc_4DF2:
00005492 4EB9 0000 0000             		jsr	ObjectsLoad
00005498 4EB9 0000 0000             		jsr	BuildSprites
0000549E 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
000054A4 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
000054A6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000054AC 64B6                       		bcc.s	Cont_MainLoop
000054AE 4A78 F614                  		tst.w	($FFFFF614).w
000054B2 6600 FFB0                  		bne.w	Cont_MainLoop
000054B6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000054BC 4E75                       		rts	
000054BE                            ; ===========================================================================
000054BE                            
000054BE                            Cont_GotoLevel:				; XREF: Cont_MainLoop
000054BE 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000054C4 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000054CA 7000                       		moveq	#0,d0
000054CC 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000054D0 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000054D4 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000054D8 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
000054DC 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
000054E0 4E75                       		rts	
000054E2                            ; ===========================================================================
000054E2                            
000054E2                            ; ---------------------------------------------------------------------------
000054E2                            ; Object 80 - Continue screen elements
000054E2                            ; ---------------------------------------------------------------------------
000054E2                            
000054E2                            Obj80:					; XREF: Obj_Index
000054E2 7000                       		moveq	#0,d0
000054E4 1028 0024                  		move.b	$24(a0),d0
000054E8 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
000054EC 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
000054F0                            ; ===========================================================================
000054F0 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000054F2 0000                       		dc.w Obj80_Display-Obj80_Index
000054F4 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000054F6 0000                       		dc.w Obj80_ChkType-Obj80_Index
000054F8                            ; ===========================================================================
000054F8                            
000054F8                            Obj80_Main:				; XREF: Obj80_Index
000054F8 5428 0024                  		addq.b	#2,$24(a0)
000054FC 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005504 317C 8500 0002             		move.w	#$8500,2(a0)
0000550A 117C 0000 0001             		move.b	#0,1(a0)
00005510 117C 003C 0019             		move.b	#$3C,$19(a0)
00005516 317C 0120 0008             		move.w	#$120,8(a0)
0000551C 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005522 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005528                            
00005528                            Obj80_Display:				; XREF: Obj80_Index
00005528 4EF9 0000 0000             		jmp	DisplaySprite
0000552E                            ; ===========================================================================
0000552E                            Obj80_MiniSonicPos:
0000552E 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005540 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000554C                            ; ===========================================================================
0000554C                            
0000554C                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000554C 2248                       		movea.l	a0,a1
0000554E 45F9 0000 552E             		lea	(Obj80_MiniSonicPos).l,a2
00005554 7200                       		moveq	#0,d1
00005556 1238 FE18                  		move.b	($FFFFFE18).w,d1
0000555A 5501                       		subq.b	#2,d1
0000555C 6400                       		bcc.s	loc_4EC4
0000555E 4EF9 0000 0000             		jmp	DeleteObject
00005564                            ; ===========================================================================
00005564                            
00005564                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005564 7601                       		moveq	#1,d3
00005566 0C01 000E                  		cmpi.b	#$E,d1
0000556A 6500                       		bcs.s	loc_4ED0
0000556C 7600                       		moveq	#0,d3
0000556E 720E                       		moveq	#$E,d1
00005570                            
00005570                            loc_4ED0:
00005570 1401                       		move.b	d1,d2
00005572 0202 0001                  		andi.b	#1,d2
00005576                            
00005576                            Obj80_MiniSonLoop:
00005576 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000557A 335A 0008                  		move.w	(a2)+,8(a1)
0000557E 4A02                       		tst.b	d2
00005580 6700                       		beq.s	loc_4EEA
00005582 0469 000A 0008             		subi.w	#$A,8(a1)
00005588                            
00005588                            loc_4EEA:
00005588 337C 00D0 000A             		move.w	#$D0,$A(a1)
0000558E 137C 0006 001A             		move.b	#6,$1A(a1)
00005594 137C 0006 0024             		move.b	#6,$24(a1)
0000559A 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000055A2 337C 8551 0002             		move.w	#$8551,2(a1)
000055A8 137C 0000 0001             		move.b	#0,1(a1)
000055AE 43E9 0040                  		lea	$40(a1),a1
000055B2 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000055B6 43E9 FFC0                  		lea	-$40(a1),a1
000055BA 1343 0028                  		move.b	d3,$28(a1)
000055BE                            
000055BE                            Obj80_ChkType:				; XREF: Obj80_Index
000055BE 4A28 0028                  		tst.b	$28(a0)
000055C2 6700                       		beq.s	loc_4F40
000055C4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000055CA 6500                       		bcs.s	loc_4F40
000055CC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000055D0 0200 0001                  		andi.b	#1,d0
000055D4 6600                       		bne.s	loc_4F40
000055D6 4A78 D010                  		tst.w	($FFFFD010).w
000055DA 6600                       		bne.s	Obj80_Delete
000055DC 4E75                       		rts	
000055DE                            ; ===========================================================================
000055DE                            
000055DE                            loc_4F40:				; XREF: Obj80_ChkType
000055DE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000055E2 0200 000F                  		andi.b	#$F,d0
000055E6 6600                       		bne.s	Obj80_Display2
000055E8 0868 0000 001A             		bchg	#0,$1A(a0)
000055EE                            
000055EE                            Obj80_Display2:
000055EE 4EF9 0000 0000             		jmp	DisplaySprite
000055F4                            ; ===========================================================================
000055F4                            
000055F4                            Obj80_Delete:				; XREF: Obj80_ChkType
000055F4 4EF9 0000 0000             		jmp	DeleteObject
000055FA                            ; ===========================================================================
000055FA                            
000055FA                            ; ---------------------------------------------------------------------------
000055FA                            ; Object 81 - Sonic on the continue screen
000055FA                            ; ---------------------------------------------------------------------------
000055FA                            
000055FA                            Obj81:					; XREF: Obj_Index
000055FA 7000                       		moveq	#0,d0
000055FC 1028 0024                  		move.b	$24(a0),d0
00005600 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005604 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005608 4EF9 0000 0000             		jmp	DisplaySprite
0000560E                            ; ===========================================================================
0000560E 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00005610 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00005612 0000                       		dc.w Obj81_Animate-Obj81_Index
00005614 0000                       		dc.w Obj81_Run-Obj81_Index
00005616                            ; ===========================================================================
00005616                            
00005616                            Obj81_Main:				; XREF: Obj81_Index
00005616 5428 0024                  		addq.b	#2,$24(a0)
0000561A 317C 00A0 0008             		move.w	#$A0,8(a0)
00005620 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005626 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000562E 317C 0780 0002             		move.w	#$780,2(a0)
00005634 117C 0004 0001             		move.b	#4,1(a0)
0000563A 117C 0002 0018             		move.b	#2,$18(a0)
00005640 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005646 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
0000564C                            
0000564C                            Obj81_ChkLand:				; XREF: Obj81_Index
0000564C 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005652 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005654 5428 0024                  		addq.b	#2,$24(a0)
00005658 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
0000565C 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005664 317C 8500 0002             		move.w	#$8500,2(a0)
0000566A 117C 0000 001C             		move.b	#0,$1C(a0)
00005670 6000                       		bra.s	Obj81_Animate
00005672                            ; ===========================================================================
00005672                            
00005672                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005672 4EB9 0000 0000             		jsr	SpeedToPos
00005678 4EB9 0000 0000             		jsr	Sonic_Animate
0000567E 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005684                            ; ===========================================================================
00005684                            
00005684                            Obj81_Animate:				; XREF: Obj81_Index
00005684 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005688 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000568A 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005690 4EF9 0000 0000             		jmp	AnimateSprite
00005696                            ; ===========================================================================
00005696                            
00005696                            Obj81_GetUp:				; XREF: Obj81_Animate
00005696 5428 0024                  		addq.b	#2,$24(a0)
0000569A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000056A2 317C 0780 0002             		move.w	#$780,2(a0)
000056A8 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000056AE 4268 0014                  		clr.w	$14(a0)
000056B2 5168 000C                  		subq.w	#8,$C(a0)
000056B6 103C 00E0                  		move.b	#$E0,d0
000056BA 6100 BF30                  		bsr.w	PlaySound_Special ; fade out music
000056BE                            
000056BE                            Obj81_Run:				; XREF: Obj81_Index
000056BE 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
000056C4 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000056C6 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000056CC 6000                       		bra.s	Obj81_ShowRun
000056CE                            ; ===========================================================================
000056CE                            
000056CE                            Obj81_AddSpeed:				; XREF: Obj81_Run
000056CE 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
000056D4                            
000056D4                            Obj81_ShowRun:				; XREF: Obj81_Run
000056D4 4EB9 0000 0000             		jsr	SpeedToPos
000056DA 4EB9 0000 0000             		jsr	Sonic_Animate
000056E0 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000056E6                            ; ===========================================================================
000056E6                            Ani_obj81:
000056E6                            	include "_anim\obj81.asm"
000056E6                            ; ---------------------------------------------------------------------------
000056E6                            ; Animation script - Sonic on the continue screen
000056E6                            ; ---------------------------------------------------------------------------
000056E6 0000                       		dc.w byte_504A-Ani_obj81
000056E8 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
000056F4 00                         		even
000056F4 00                         		even
000056F4                            
000056F4                            ; ---------------------------------------------------------------------------
000056F4                            ; Sprite mappings - Continue screen
000056F4                            ; ---------------------------------------------------------------------------
000056F4                            Map_obj80:
000056F4                            	include "_maps\obj80.asm"
000056F4                            ; ---------------------------------------------------------------------------
000056F4                            ; Sprite mappings - Continue screen
000056F4                            ; ---------------------------------------------------------------------------
000056F4 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000056F8 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000056FC 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005700 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005704 0B                         byte_5066:	dc.b $B
00005705 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
0000570A F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
0000570F F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005714 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005719 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
0000571E F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005723 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005728 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
0000572D 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005732 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005737 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
0000573C 03                         byte_509E:	dc.b 3
0000573D 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005742 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005747 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000574C 03                         byte_50AE:	dc.b 3
0000574D 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005752 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005757 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000575C 03                         byte_50BE:	dc.b 3
0000575D 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005762 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005767 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000576C 02                         byte_50CE:	dc.b 2
0000576D 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005772 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005777 01                         byte_50D9:	dc.b 1
00005778 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
0000577D 01                         byte_50DF:	dc.b 1
0000577E 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005784 00                         		even
00005784 00                         		even
00005784                            
00005784                            ; ===========================================================================
00005784                            ; ---------------------------------------------------------------------------
00005784                            ; Ending sequence in Green Hill	Zone
00005784                            ; ---------------------------------------------------------------------------
00005784                            
00005784                            EndingSequence:				; XREF: GameModeArray
00005784 103C 00E4                  		move.b	#$E4,d0
00005788 6100 BE62                  		bsr.w	PlaySound_Special ; stop music
0000578C 6100 C8E0                  		bsr.w	Pal_FadeFrom
00005790 43F8 D000                  		lea	($FFFFD000).w,a1
00005794 7000                       		moveq	#0,d0
00005796 323C 07FF                  		move.w	#$7FF,d1
0000579A                            
0000579A                            End_ClrObjRam:
0000579A 22C0                       		move.l	d0,(a1)+
0000579C 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000057A0                            
000057A0 43F8 F628                  		lea	($FFFFF628).w,a1
000057A4 7000                       		moveq	#0,d0
000057A6 323C 0015                  		move.w	#$15,d1
000057AA                            
000057AA                            End_ClrRam:
000057AA 22C0                       		move.l	d0,(a1)+
000057AC 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
000057B0                            
000057B0 43F8 F700                  		lea	($FFFFF700).w,a1
000057B4 7000                       		moveq	#0,d0
000057B6 323C 003F                  		move.w	#$3F,d1
000057BA                            
000057BA                            End_ClrRam2:
000057BA 22C0                       		move.l	d0,(a1)+
000057BC 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000057C0                            
000057C0 43F8 FE60                  		lea	($FFFFFE60).w,a1
000057C4 7000                       		moveq	#0,d0
000057C6 323C 0047                  		move.w	#$47,d1
000057CA                            
000057CA                            End_ClrRam3:
000057CA 22C0                       		move.l	d0,(a1)+
000057CC 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000057D0                            
000057D0 46FC 2700                  		move	#$2700,sr
000057D4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000057D8 0200 00BF                  		andi.b	#$BF,d0
000057DC 33C0 00C0 0004             		move.w	d0,($C00004).l
000057E2 6100 BD30                  		bsr.w	ClearScreen
000057E6 4DF9 00C0 0004             		lea	($C00004).l,a6
000057EC 3CBC 8B03                  		move.w	#$8B03,(a6)
000057F0 3CBC 8230                  		move.w	#$8230,(a6)
000057F4 3CBC 8407                  		move.w	#$8407,(a6)
000057F8 3CBC 857C                  		move.w	#$857C,(a6)
000057FC 3CBC 9001                  		move.w	#$9001,(a6)
00005800 3CBC 8004                  		move.w	#$8004,(a6)
00005804 3CBC 8720                  		move.w	#$8720,(a6)
00005808 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000580E 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005812 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005818 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
0000581E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005824 6700                       		beq.s	End_LoadData	; if yes, branch
00005826 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
0000582C                            
0000582C                            End_LoadData:
0000582C 701C                       		moveq	#$1C,d0
0000582E 6100 C10C                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005832 4EB9 0000 0000             		jsr	Hud_Base
00005838 6100 0000                  		bsr.w	LevelSizeLoad
0000583C 6100 0000                  		bsr.w	DeformBgLayer
00005840 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005846 6100 0000                  		bsr.w	MainLoadBlockLoad
0000584A 6100 0000                  		bsr.w	LoadTilesFromStart
0000584E 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005856 46FC 2300                  		move	#$2300,sr
0000585A 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005860 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005864 6100 C286                  		bsr.w	KosDec
00005868 7003                       		moveq	#3,d0
0000586A 6100 CAAC                  		bsr.w	PalLoad1	; load Sonic's pallet
0000586E 303C 008B                  		move.w	#$8B,d0
00005872 6100 BD72                  		bsr.w	PlaySound	; play ending sequence music
00005876 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0000587C 6700                       		beq.s	End_LoadSonic	; if not, branch
0000587E 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005884                            
00005884                            End_LoadSonic:
00005884 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000588A 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005890 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005896 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
0000589C 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
000058A2 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000058A8 4EB9 0000 0000             		jsr	ObjPosLoad
000058AE 4EB9 0000 0000             		jsr	ObjectsLoad
000058B4 4EB9 0000 0000             		jsr	BuildSprites
000058BA 7000                       		moveq	#0,d0
000058BC 31C0 FE20                  		move.w	d0,($FFFFFE20).w
000058C0 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000058C4 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000058C8 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
000058CC 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000058D0 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
000058D4 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000058D8 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000058DC 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000058E0 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000058E4 6100 EEE0                  		bsr.w	OscillateNumInit
000058E8 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
000058EE 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
000058F4 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000058FA 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005900 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005906 6100 D44C                  		bsr.w	DelayProgram
0000590A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000590E 0000 0040                  		ori.b	#$40,d0
00005912 33C0 00C0 0004             		move.w	d0,($C00004).l
00005918 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000591E 6100 C6A4                  		bsr.w	Pal_FadeTo
00005922                            
00005922                            ; ---------------------------------------------------------------------------
00005922                            ; Main ending sequence loop
00005922                            ; ---------------------------------------------------------------------------
00005922                            
00005922                            End_MainLoop:
00005922 6100 BCD4                  		bsr.w	PauseGame
00005926 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000592C 6100 D426                  		bsr.w	DelayProgram
00005930 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005934 6100 0000                  		bsr.w	End_MoveSonic
00005938 4EB9 0000 0000             		jsr	ObjectsLoad
0000593E 6100 0000                  		bsr.w	DeformBgLayer
00005942 4EB9 0000 0000             		jsr	BuildSprites
00005948 4EB9 0000 0000             		jsr	ObjPosLoad
0000594E 6100 C23C                  		bsr.w	PalCycle_Load
00005952 6100 EEC8                  		bsr.w	OscillateNumDo
00005956 6100 EF54                  		bsr.w	ChangeRingFrame
0000595A 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005960 6700                       		beq.s	loc_52DA	; if yes, branch
00005962 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005968 103C 0091                  		move.b	#$91,d0
0000596C 6100 BC7E                  		bsr.w	PlaySound_Special ; play credits music
00005970 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005976 4E75                       		rts	
00005978                            ; ===========================================================================
00005978                            
00005978                            loc_52DA:
00005978 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000597C 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005980                            
00005980 4278 FE02                  		clr.w	($FFFFFE02).w
00005984 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000598A 4278 F794                  		clr.w	($FFFFF794).w
0000598E                            
0000598E                            End_AllEmlds:				; XREF: loc_5334
0000598E 6100 BC68                  		bsr.w	PauseGame
00005992 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005998 6100 D3BA                  		bsr.w	DelayProgram
0000599C 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000059A0 6100 0000                  		bsr.w	End_MoveSonic
000059A4 4EB9 0000 0000             		jsr	ObjectsLoad
000059AA 6100 0000                  		bsr.w	DeformBgLayer
000059AE 4EB9 0000 0000             		jsr	BuildSprites
000059B4 4EB9 0000 0000             		jsr	ObjPosLoad
000059BA 6100 EE60                  		bsr.w	OscillateNumDo
000059BE 6100 EEEC                  		bsr.w	ChangeRingFrame
000059C2 5378 F794                  		subq.w	#1,($FFFFF794).w
000059C6 6A00                       		bpl.s	loc_5334
000059C8 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000059CE 6100 C7E8                  		bsr.w	Pal_ToWhite
000059D2                            
000059D2                            loc_5334:
000059D2 4A78 FE02                  		tst.w	($FFFFFE02).w
000059D6 6700 FFB6                  		beq.w	End_AllEmlds
000059DA 4278 FE02                  		clr.w	($FFFFFE02).w
000059DE 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
000059E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000059EA 4DF9 00C0 0000             		lea	($C00000).l,a6
000059F0 47F8 F700                  		lea	($FFFFF700).w,a3
000059F4 49F8 A400                  		lea	($FFFFA400).w,a4
000059F8 343C 4000                  		move.w	#$4000,d2
000059FC 6100 0000                  		bsr.w	LoadTilesFromStart2
00005A00 7013                       		moveq	#$13,d0
00005A02 6100 C914                  		bsr.w	PalLoad1	; load ending pallet
00005A06 6100 C6E4                  		bsr.w	Pal_MakeWhite
00005A0A 6000 FF16                  		bra.w	End_MainLoop
00005A0E                            
00005A0E                            ; ---------------------------------------------------------------------------
00005A0E                            ; Subroutine controlling Sonic on the ending sequence
00005A0E                            ; ---------------------------------------------------------------------------
00005A0E                            
00005A0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005A0E                            
00005A0E                            
00005A0E                            End_MoveSonic:				; XREF: End_MainLoop
00005A0E 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005A12 6600                       		bne.s	End_MoveSonic2
00005A14 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005A1A 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005A1C 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A20 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005A26 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005A2C 4E75                       		rts	
00005A2E                            ; ===========================================================================
00005A2E                            
00005A2E                            End_MoveSonic2:				; XREF: End_MoveSonic
00005A2E 5500                       		subq.b	#2,d0
00005A30 6600                       		bne.s	End_MoveSonic3
00005A32 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005A38 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005A3A 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A3E 7000                       		moveq	#0,d0
00005A40 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005A44 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005A48 31C0 D014                  		move.w	d0,($FFFFD014).w
00005A4C 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005A52 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005A58 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005A5E 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005A64 4E75                       		rts	
00005A66                            ; ===========================================================================
00005A66                            
00005A66                            End_MoveSonic3:				; XREF: End_MoveSonic
00005A66 5500                       		subq.b	#2,d0
00005A68 6600                       		bne.s	End_MoveSonExit
00005A6A 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A6E 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005A74 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005A7A 4278 D024                  		clr.w	($FFFFD024).w
00005A7E                            
00005A7E                            End_MoveSonExit:
00005A7E 4E75                       		rts	
00005A80                            ; End of function End_MoveSonic
00005A80                            
00005A80                            ; ===========================================================================
00005A80                            ; ---------------------------------------------------------------------------
00005A80                            ; Object 87 - Sonic on ending sequence
00005A80                            ; ---------------------------------------------------------------------------
00005A80                            
00005A80                            Obj87:					; XREF: Obj_Index
00005A80 7000                       		moveq	#0,d0
00005A82 1028 0025                  		move.b	$25(a0),d0
00005A86 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005A8A 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005A8E 4EF9 0000 0000             		jmp	DisplaySprite
00005A94                            ; ===========================================================================
00005A94 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005A98 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005A9C 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005AA0 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005AA4 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005AA8                            ; ===========================================================================
00005AA8                            
00005AA8                            Obj87_Main:				; XREF: Obj87_Index
00005AA8 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005AAE 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005AB0 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005AB6 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005ABC 4E75                       		rts	
00005ABE                            ; ===========================================================================
00005ABE                            
00005ABE                            Obj87_Main2:				; XREF: Obj87_Main
00005ABE 5428 0025                  		addq.b	#2,$25(a0)
00005AC2 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005ACA 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005AD0 117C 0004 0001             		move.b	#4,1(a0)
00005AD6 4228 0022                  		clr.b	$22(a0)
00005ADA 117C 0002 0018             		move.b	#2,$18(a0)
00005AE0 117C 0000 001A             		move.b	#0,$1A(a0)
00005AE6 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005AEC                            
00005AEC                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005AEC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005AF0 6600                       		bne.s	Obj87_Wait
00005AF2 5428 0025                  		addq.b	#2,$25(a0)
00005AF6 317C 0001 001C             		move.w	#1,$1C(a0)
00005AFC 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005B02                            
00005B02                            Obj87_Wait:
00005B02 4E75                       		rts	
00005B04                            ; ===========================================================================
00005B04                            
00005B04                            Obj87_LookUp:				; XREF: Obj87_Index
00005B04 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005B0C 6600                       		bne.s	locret_5480
00005B0E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005B14 317C 005A 0030             		move.w	#$5A,$30(a0)
00005B1A 5428 0025                  		addq.b	#2,$25(a0)
00005B1E                            
00005B1E                            locret_5480:
00005B1E 4E75                       		rts	
00005B20                            ; ===========================================================================
00005B20                            
00005B20                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005B20 5368 0030                  		subq.w	#1,$30(a0)
00005B24 6600                       		bne.s	Obj87_Wait2
00005B26 43F8 D400                  		lea	($FFFFD400).w,a1
00005B2A 323C 00FF                  		move.w	#$FF,d1
00005B2E                            
00005B2E                            Obj87_ClrLoop:
00005B2E 4299                       		clr.l	(a1)+
00005B30 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005B34 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005B3A 5428 0025                  		addq.b	#2,$25(a0)
00005B3E 117C 0001 001C             		move.b	#1,$1C(a0)
00005B44 317C 003C 0030             		move.w	#$3C,$30(a0)
00005B4A                            
00005B4A                            Obj87_Wait2:
00005B4A 4E75                       		rts	
00005B4C                            ; ===========================================================================
00005B4C                            
00005B4C                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005B4C 5368 0030                  		subq.w	#1,$30(a0)
00005B50 6600                       		bne.s	Obj87_Wait3
00005B52 5428 0025                  		addq.b	#2,$25(a0)
00005B56 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005B5C 117C 0002 001C             		move.b	#2,$1C(a0)
00005B62 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B68                            
00005B68                            Obj87_Wait3:
00005B68 4E75                       		rts	
00005B6A                            ; ===========================================================================
00005B6A                            
00005B6A                            Obj87_Animate:				; XREF: Obj87_Index
00005B6A 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005B70 4EF9 0000 0000             		jmp	AnimateSprite
00005B76                            ; ===========================================================================
00005B76                            
00005B76                            Obj87_Leap:				; XREF: Obj87_Index
00005B76 5368 0030                  		subq.w	#1,$30(a0)
00005B7A 6600                       		bne.s	Obj87_Wait4
00005B7C 5428 0025                  		addq.b	#2,$25(a0)
00005B80 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005B88 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005B8E 117C 0004 0001             		move.b	#4,1(a0)
00005B94 4228 0022                  		clr.b	$22(a0)
00005B98 117C 0002 0018             		move.b	#2,$18(a0)
00005B9E 117C 0005 001A             		move.b	#5,$1A(a0)
00005BA4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005BAA 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005BB0 60B8                       		bra.s	Obj87_Animate
00005BB2                            ; ===========================================================================
00005BB2                            
00005BB2                            Obj87_Wait4:				; XREF: Obj87_Leap
00005BB2 4E75                       		rts	
00005BB4                            ; ===========================================================================
00005BB4                            Ani_obj87:
00005BB4                            	include "_anim\obj87.asm"
00005BB4                            ; ---------------------------------------------------------------------------
00005BB4                            ; Animation script - Sonic on the ending sequence
00005BB4                            ; ---------------------------------------------------------------------------
00005BB4 0000                       		dc.w byte_551C-Ani_obj87
00005BB6 0000                       		dc.w byte_552A-Ani_obj87
00005BB8 0000                       		dc.w byte_5534-Ani_obj87
00005BBA 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005BC8 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005BD2 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005BDA                            		even
00005BDA                            		even
00005BDA                            
00005BDA                            ; ===========================================================================
00005BDA                            ; ---------------------------------------------------------------------------
00005BDA                            ; Object 88 - chaos emeralds on	the ending sequence
00005BDA                            ; ---------------------------------------------------------------------------
00005BDA                            
00005BDA                            Obj88:					; XREF: Obj_Index
00005BDA 7000                       		moveq	#0,d0
00005BDC 1028 0024                  		move.b	$24(a0),d0
00005BE0 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005BE4 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005BE8 4EF9 0000 0000             		jmp	DisplaySprite
00005BEE                            ; ===========================================================================
00005BEE 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005BF0 0000                       		dc.w Obj88_Move-Obj88_Index
00005BF2                            ; ===========================================================================
00005BF2                            
00005BF2                            Obj88_Main:				; XREF: Obj88_Index
00005BF2 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005BF8 6700                       		beq.s	Obj88_Main2
00005BFA 588F                       		addq.l	#4,sp
00005BFC 4E75                       		rts	
00005BFE                            ; ===========================================================================
00005BFE                            
00005BFE                            Obj88_Main2:				; XREF: Obj88_Main
00005BFE 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005C04 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005C0A 2248                       		movea.l	a0,a1
00005C0C 7600                       		moveq	#0,d3
00005C0E 7401                       		moveq	#1,d2
00005C10 7205                       		moveq	#5,d1
00005C12                            
00005C12                            Obj88_MainLoop:
00005C12 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005C16 5429 0024                  		addq.b	#2,$24(a1)
00005C1A 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005C22 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005C28 137C 0004 0001             		move.b	#4,1(a1)
00005C2E 137C 0001 0018             		move.b	#1,$18(a1)
00005C34 3368 0008 0038             		move.w	8(a0),$38(a1)
00005C3A 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005C40 1342 001C                  		move.b	d2,$1C(a1)
00005C44 1342 001A                  		move.b	d2,$1A(a1)
00005C48 5202                       		addq.b	#1,d2
00005C4A 1343 0026                  		move.b	d3,$26(a1)
00005C4E 0603 002A                  		addi.b	#$2A,d3
00005C52 43E9 0040                  		lea	$40(a1),a1
00005C56 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005C5A                            
00005C5A                            Obj88_Move:				; XREF: Obj88_Index
00005C5A 3028 003E                  		move.w	$3E(a0),d0
00005C5E D168 0026                  		add.w	d0,$26(a0)
00005C62 1028 0026                  		move.b	$26(a0),d0
00005C66 4EB9 0000 2D86             		jsr	(CalcSine).l
00005C6C 7800                       		moveq	#0,d4
00005C6E 1828 003C                  		move.b	$3C(a0),d4
00005C72 C3C4                       		muls.w	d4,d1
00005C74 E081                       		asr.l	#8,d1
00005C76 C1C4                       		muls.w	d4,d0
00005C78 E080                       		asr.l	#8,d0
00005C7A D268 0038                  		add.w	$38(a0),d1
00005C7E D068 003A                  		add.w	$3A(a0),d0
00005C82 3141 0008                  		move.w	d1,8(a0)
00005C86 3140 000C                  		move.w	d0,$C(a0)
00005C8A 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005C90 6700                       		beq.s	loc_55FA
00005C92 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005C98                            
00005C98                            loc_55FA:
00005C98 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005C9E 6700                       		beq.s	loc_5608
00005CA0 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005CA6                            
00005CA6                            loc_5608:
00005CA6 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005CAC 6700                       		beq.s	locret_5614
00005CAE 5368 003A                  		subq.w	#1,$3A(a0)
00005CB2                            
00005CB2                            locret_5614:
00005CB2 4E75                       		rts	
00005CB4                            ; ===========================================================================
00005CB4                            ; ---------------------------------------------------------------------------
00005CB4                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005CB4                            ; ---------------------------------------------------------------------------
00005CB4                            
00005CB4                            Obj89:					; XREF: Obj_Index
00005CB4 7000                       		moveq	#0,d0
00005CB6 1028 0024                  		move.b	$24(a0),d0
00005CBA 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005CBE 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005CC2                            ; ===========================================================================
00005CC2 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005CC4 0000                       		dc.w Obj89_Move-Obj89_Index
00005CC6 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005CC8                            ; ===========================================================================
00005CC8                            
00005CC8                            Obj89_Main:				; XREF: Obj89_Index
00005CC8 5428 0024                  		addq.b	#2,$24(a0)
00005CCC 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005CD2 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005CD8 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005CE0 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005CE6 117C 0000 0001             		move.b	#0,1(a0)
00005CEC 117C 0000 0018             		move.b	#0,$18(a0)
00005CF2                            
00005CF2                            Obj89_Move:				; XREF: Obj89_Index
00005CF2 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005CF8 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005CFA 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005D00 4EB9 0000 0000             		jsr	DisplaySprite
00005D06                            ; ===========================================================================
00005D06                            
00005D06                            Obj89_Delay:				; XREF: Obj89_Move
00005D06 5428 0024                  		addq.b	#2,$24(a0)
00005D0A 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005D10                            
00005D10                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005D10 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005D14 6A00                       		bpl.s	Obj89_Display
00005D16 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005D1C                            
00005D1C                            Obj89_Display:
00005D1C 4EB9 0000 0000             		jsr	DisplaySprite
00005D22                            ; ===========================================================================
00005D22                            ; ---------------------------------------------------------------------------
00005D22                            ; Sprite mappings - Sonic on the ending	sequence
00005D22                            ; ---------------------------------------------------------------------------
00005D22                            Map_obj87:
00005D22                            	include "_maps\obj87.asm"
00005D22                            ; ---------------------------------------------------------------------------
00005D22                            ; Sprite mappings - Sonic on the ending	sequence
00005D22                            ; ---------------------------------------------------------------------------
00005D22 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005D26 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005D2A 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005D2E 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005D32 02                         byte_5690:	dc.b 2
00005D33 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005D38 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005D3D 03                         byte_569B:	dc.b 3
00005D3E FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005D43 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005D48 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005D4D 02                         byte_56AB:	dc.b 2
00005D4E EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005D53 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005D58 02                         byte_56B6:	dc.b 2
00005D59 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005D5E FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005D63 02                         byte_56C1:	dc.b 2
00005D64 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005D69 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005D6E 03                         byte_56CC:	dc.b 3
00005D6F EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005D74 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005D79 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005D7E 07                         byte_56DC:	dc.b 7
00005D7F B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005D84 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005D89 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005D8E CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005D93 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005D98 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005D9D EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005DA2 18                         byte_5700:	dc.b $18
00005DA3 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005DA8 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005DAD 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005DB2 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005DB7 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005DBC 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005DC1 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005DC6 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005DCB B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005DD0 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005DD5 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005DDA C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005DDF C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005DE4 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005DE9 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005DEE D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005DF3 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005DF8 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005DFD E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005E02 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005E07 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005E0C E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005E11 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005E16 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005E1C 00                         		even
00005E1C 00                         		even
00005E1C                            
00005E1C                            ; ---------------------------------------------------------------------------
00005E1C                            ; Sprite mappings - chaos emeralds on the ending sequence
00005E1C                            ; ---------------------------------------------------------------------------
00005E1C                            Map_obj88:
00005E1C                            	include "_maps\obj88.asm"
00005E1C                            ; ---------------------------------------------------------------------------
00005E1C                            ; Sprite mappings - chaos emeralds on the ending sequence
00005E1C                            ; ---------------------------------------------------------------------------
00005E1C 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005E20 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005E24 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005E28 0000                       		dc.w byte_57AC-Map_obj88
00005E2A 01                         byte_5788:	dc.b 1
00005E2B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005E30 01                         byte_578E:	dc.b 1
00005E31 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005E36 01                         byte_5794:	dc.b 1
00005E37 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005E3C 01                         byte_579A:	dc.b 1
00005E3D F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005E42 01                         byte_57A0:	dc.b 1
00005E43 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005E48 01                         byte_57A6:	dc.b 1
00005E49 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005E4E 01                         byte_57AC:	dc.b 1
00005E4F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005E54                            		even
00005E54                            		even
00005E54                            
00005E54                            ; ---------------------------------------------------------------------------
00005E54                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005E54                            ; ---------------------------------------------------------------------------
00005E54                            Map_obj89:
00005E54                            	include "_maps\obj89.asm"
00005E54                            ; ---------------------------------------------------------------------------
00005E54                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005E54                            ; ---------------------------------------------------------------------------
00005E54 0000                       		dc.w byte_57B4-Map_obj89
00005E56 03                         byte_57B4:	dc.b 3
00005E57 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005E5C F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005E61 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005E66                            		even
00005E66                            		even
00005E66                            
00005E66                            ; ===========================================================================
00005E66                            ; ---------------------------------------------------------------------------
00005E66                            ; Credits ending sequence
00005E66                            ; ---------------------------------------------------------------------------
00005E66                            
00005E66                            Credits:				; XREF: GameModeArray
00005E66 6100 B9C6                  		bsr.w	ClearPLC
00005E6A 6100 C202                  		bsr.w	Pal_FadeFrom
00005E6E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E74 3CBC 8004                  		move.w	#$8004,(a6)
00005E78 3CBC 8230                  		move.w	#$8230,(a6)
00005E7C 3CBC 8407                  		move.w	#$8407,(a6)
00005E80 3CBC 9001                  		move.w	#$9001,(a6)
00005E84 3CBC 9200                  		move.w	#$9200,(a6)
00005E88 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E8C 3CBC 8720                  		move.w	#$8720,(a6)
00005E90 4238 F64E                  		clr.b	($FFFFF64E).w
00005E94 6100 B67E                  		bsr.w	ClearScreen
00005E98 43F8 D000                  		lea	($FFFFD000).w,a1
00005E9C 7000                       		moveq	#0,d0
00005E9E 323C 07FF                  		move.w	#$7FF,d1
00005EA2                            
00005EA2                            Cred_ClrObjRam:
00005EA2 22C0                       		move.l	d0,(a1)+
00005EA4 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005EA8                            
00005EA8 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005EB2 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005EB8 6100 B7D6                  		bsr.w	NemDec
00005EBC 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005EC0 7000                       		moveq	#0,d0
00005EC2 323C 001F                  		move.w	#$1F,d1
00005EC6                            
00005EC6                            Cred_ClrPallet:
00005EC6 22C0                       		move.l	d0,(a1)+
00005EC8 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005ECC                            
00005ECC 7003                       		moveq	#3,d0
00005ECE 6100 C448                  		bsr.w	PalLoad1	; load Sonic's pallet
00005ED2 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005ED8 4EB9 0000 0000             		jsr	ObjectsLoad
00005EDE 4EB9 0000 0000             		jsr	BuildSprites
00005EE4 6100 0000                  		bsr.w	EndingDemoLoad
00005EE8 7000                       		moveq	#0,d0
00005EEA 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005EEE E948                       		lsl.w	#4,d0
00005EF0 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005EF6 45F2 0000                  		lea	(a2,d0.w),a2
00005EFA 7000                       		moveq	#0,d0
00005EFC 1012                       		move.b	(a2),d0
00005EFE 6700                       		beq.s	loc_5862
00005F00 6100 B8CE                  		bsr.w	LoadPLC		; load level patterns
00005F04                            
00005F04                            loc_5862:
00005F04 7001                       		moveq	#1,d0
00005F06 6100 B8C8                  		bsr.w	LoadPLC		; load standard	level patterns
00005F0A 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005F10 6100 C0B2                  		bsr.w	Pal_FadeTo
00005F14                            
00005F14                            Cred_WaitLoop:
00005F14 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005F1A 6100 CE38                  		bsr.w	DelayProgram
00005F1E 6100 B91C                  		bsr.w	RunPLC_RAM
00005F22 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005F26 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005F28 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005F2C 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005F2E 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005F34 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005F38 4E75                       		rts	
00005F3A                            
00005F3A                            ; ---------------------------------------------------------------------------
00005F3A                            ; Ending sequence demo loading subroutine
00005F3A                            ; ---------------------------------------------------------------------------
00005F3A                            
00005F3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005F3A                            
00005F3A                            
00005F3A                            EndingDemoLoad:				; XREF: Credits
00005F3A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005F3E 0240 000F                  		andi.w	#$F,d0
00005F42 D040                       		add.w	d0,d0
00005F44 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005F48 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005F4C 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005F50 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005F56 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005F58 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005F5E 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005F64 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005F6A 7000                       		moveq	#0,d0
00005F6C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005F70 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005F74 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005F78 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005F7C 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005F82 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005F84 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005F8A 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005F8E 303C 0008                  		move.w	#8,d0
00005F92                            
00005F92                            EndDemo_LampLoad:
00005F92 24D9                       		move.l	(a1)+,(a2)+
00005F94 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005F98                            
00005F98                            EndDemo_Exit:
00005F98 4E75                       		rts	
00005F9A                            ; End of function EndingDemoLoad
00005F9A                            
00005F9A                            ; ===========================================================================
00005F9A                            ; ---------------------------------------------------------------------------
00005F9A                            ; Levels used in the end sequence demos
00005F9A                            ; ---------------------------------------------------------------------------
00005F9A                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005FAA                            
00005FAA                            ; ---------------------------------------------------------------------------
00005FAA                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005FAA                            ; ---------------------------------------------------------------------------
00005FAA                            EndDemo_LampVar:
00005FAA 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005FAC 0A00 062C 000D             		dc.w $A00, $62C, $D
00005FB2 0000 0000                  		dc.l 0
00005FB6 0000                       		dc.b 0,	0
00005FB8 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005FCC 0101                       		dc.b 1,	1
00005FCE                            ; ===========================================================================
00005FCE                            ; ---------------------------------------------------------------------------
00005FCE                            ; "TRY AGAIN" and "END"	screens
00005FCE                            ; ---------------------------------------------------------------------------
00005FCE                            
00005FCE                            TryAgainEnd:				; XREF: Credits
00005FCE 6100 B85E                  		bsr.w	ClearPLC
00005FD2 6100 C09A                  		bsr.w	Pal_FadeFrom
00005FD6 4DF9 00C0 0004             		lea	($C00004).l,a6
00005FDC 3CBC 8004                  		move.w	#$8004,(a6)
00005FE0 3CBC 8230                  		move.w	#$8230,(a6)
00005FE4 3CBC 8407                  		move.w	#$8407,(a6)
00005FE8 3CBC 9001                  		move.w	#$9001,(a6)
00005FEC 3CBC 9200                  		move.w	#$9200,(a6)
00005FF0 3CBC 8B03                  		move.w	#$8B03,(a6)
00005FF4 3CBC 8720                  		move.w	#$8720,(a6)
00005FF8 4238 F64E                  		clr.b	($FFFFF64E).w
00005FFC 6100 B516                  		bsr.w	ClearScreen
00006000 43F8 D000                  		lea	($FFFFD000).w,a1
00006004 7000                       		moveq	#0,d0
00006006 323C 07FF                  		move.w	#$7FF,d1
0000600A                            
0000600A                            TryAg_ClrObjRam:
0000600A 22C0                       		move.l	d0,(a1)+
0000600C 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00006010                            
00006010 701D                       		moveq	#$1D,d0
00006012 6100 B928                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00006016 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000601A 7000                       		moveq	#0,d0
0000601C 323C 001F                  		move.w	#$1F,d1
00006020                            
00006020                            TryAg_ClrPallet:
00006020 22C0                       		move.l	d0,(a1)+
00006022 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00006026                            
00006026 7013                       		moveq	#$13,d0
00006028 6100 C2EE                  		bsr.w	PalLoad1	; load ending pallet
0000602C 4278 FBC0                  		clr.w	($FFFFFBC0).w
00006030 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00006036 4EB9 0000 0000             		jsr	ObjectsLoad
0000603C 4EB9 0000 0000             		jsr	BuildSprites
00006042 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00006048 6100 BF7A                  		bsr.w	Pal_FadeTo
0000604C                            
0000604C                            ; ---------------------------------------------------------------------------
0000604C                            ; "TRY AGAIN" and "END"	screen main loop
0000604C                            ; ---------------------------------------------------------------------------
0000604C                            TryAg_MainLoop:
0000604C 6100 B5AA                  		bsr.w	PauseGame
00006050 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00006056 6100 CCFC                  		bsr.w	DelayProgram
0000605A 4EB9 0000 0000             		jsr	ObjectsLoad
00006060 4EB9 0000 0000             		jsr	BuildSprites
00006066 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000606C 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000606E 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00006072 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006074 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
0000607A 67D0                       		beq.s	TryAg_MainLoop
0000607C                            
0000607C                            TryAg_Exit:
0000607C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006082 4E75                       		rts	
00006084                            
00006084                            ; ===========================================================================
00006084                            ; ---------------------------------------------------------------------------
00006084                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006084                            ; ---------------------------------------------------------------------------
00006084                            
00006084                            Obj8B:					; XREF: Obj_Index
00006084 7000                       		moveq	#0,d0
00006086 1028 0024                  		move.b	$24(a0),d0
0000608A 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
0000608E 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00006092 4EF9 0000 0000             		jmp	DisplaySprite
00006098                            ; ===========================================================================
00006098 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
0000609A 0000                       		dc.w Obj8B_Animate-Obj8B_Index
0000609C 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
0000609E 0000                       		dc.w loc_5A8E-Obj8B_Index
000060A0                            ; ===========================================================================
000060A0                            
000060A0                            Obj8B_Main:				; XREF: Obj8B_Index
000060A0 5428 0024                  		addq.b	#2,$24(a0)
000060A4 317C 0120 0008             		move.w	#$120,8(a0)
000060AA 317C 00F4 000A             		move.w	#$F4,$A(a0)
000060B0 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
000060B8 317C 03E1 0002             		move.w	#$3E1,2(a0)
000060BE 117C 0000 0001             		move.b	#0,1(a0)
000060C4 117C 0002 0018             		move.b	#2,$18(a0)
000060CA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
000060D0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000060D6 6700                       		beq.s	Obj8B_Animate	; if yes, branch
000060D8 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
000060DE 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
000060E4 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
000060EA 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
000060F0                            
000060F0                            Obj8B_Animate:				; XREF: Obj8B_Index
000060F0 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
000060F6 4EF9 0000 0000             		jmp	AnimateSprite
000060FC                            ; ===========================================================================
000060FC                            
000060FC                            Obj8B_Juggle:				; XREF: Obj8B_Index
000060FC 5428 0024                  		addq.b	#2,$24(a0)
00006100 7002                       		moveq	#2,d0
00006102 0828 0000 001C             		btst	#0,$1C(a0)
00006108 6700                       		beq.s	loc_5A6A
0000610A 4440                       		neg.w	d0
0000610C                            
0000610C                            loc_5A6A:
0000610C 43F8 D800                  		lea	($FFFFD800).w,a1
00006110 7205                       		moveq	#5,d1
00006112                            
00006112                            loc_5A70:
00006112 1340 003E                  		move.b	d0,$3E(a1)
00006116 3400                       		move.w	d0,d2
00006118 E742                       		asl.w	#3,d2
0000611A D529 0026                  		add.b	d2,$26(a1)
0000611E 43E9 0040                  		lea	$40(a1),a1
00006122 51C9 FFEE                  		dbf	d1,loc_5A70
00006126 5228 001A                  		addq.b	#1,$1A(a0)
0000612A 317C 0070 0030             		move.w	#112,$30(a0)
00006130                            
00006130                            loc_5A8E:				; XREF: Obj8B_Index
00006130 5368 0030                  		subq.w	#1,$30(a0)
00006134 6A00                       		bpl.s	locret_5AA0
00006136 0868 0000 001C             		bchg	#0,$1C(a0)
0000613C 117C 0002 0024             		move.b	#2,$24(a0)
00006142                            
00006142                            locret_5AA0:
00006142 4E75                       		rts	
00006144                            ; ===========================================================================
00006144                            Ani_obj8B:
00006144                            	include "_anim\obj8B.asm"
00006144                            ; ---------------------------------------------------------------------------
00006144                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006144                            ; ---------------------------------------------------------------------------
00006144 0000                       		dc.w byte_5AA8-Ani_obj8B
00006146 0000                       		dc.w byte_5AAC-Ani_obj8B
00006148 0000                       		dc.w byte_5AB0-Ani_obj8B
0000614A 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
0000614E 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00006152 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00006164                            		even
00006164                            		even
00006164                            
00006164                            ; ===========================================================================
00006164                            ; ---------------------------------------------------------------------------
00006164                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006164                            ; ---------------------------------------------------------------------------
00006164                            
00006164                            Obj8C:					; XREF: Obj_Index
00006164 7000                       		moveq	#0,d0
00006166 1028 0024                  		move.b	$24(a0),d0
0000616A 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
0000616E 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006172 4EF9 0000 0000             		jmp	DisplaySprite
00006178                            ; ===========================================================================
00006178 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
0000617A 0000                       		dc.w Obj8C_Move-Obj8C_Index
0000617C                            ; ===========================================================================
0000617C                            
0000617C                            Obj8C_Main:				; XREF: Obj8C_Index
0000617C 2248                       		movea.l	a0,a1
0000617E 7400                       		moveq	#0,d2
00006180 7600                       		moveq	#0,d3
00006182 7205                       		moveq	#5,d1
00006184 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00006188                            
00006188                            Obj8C_MakeEms:				; XREF: loc_5B42
00006188 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
0000618C 5429 0024                  		addq.b	#2,$24(a1)
00006190 237C 0000 5E1C 0004        		move.l	#Map_obj88,4(a1)
00006198 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000619E 137C 0000 0001             		move.b	#0,1(a1)
000061A4 137C 0001 0018             		move.b	#1,$18(a1)
000061AA 337C 0104 0008             		move.w	#$104,8(a1)
000061B0 337C 0120 0038             		move.w	#$120,$38(a1)
000061B6 337C 00EC 000A             		move.w	#$EC,$A(a1)
000061BC 3369 000A 003A             		move.w	$A(a1),$3A(a1)
000061C2 137C 001C 003C             		move.b	#$1C,$3C(a1)
000061C8 47F8 FE58                  		lea	($FFFFFE58).w,a3
000061CC                            
000061CC                            Obj8C_ChkEms:
000061CC 7000                       		moveq	#0,d0
000061CE 1038 FE57                  		move.b	($FFFFFE57).w,d0
000061D2 5340                       		subq.w	#1,d0
000061D4 6500                       		bcs.s	loc_5B42
000061D6                            
000061D6                            Obj8C_ChkEmLoop:
000061D6 B433 0000                  		cmp.b	(a3,d0.w),d2
000061DA 6600                       		bne.s	loc_5B3E
000061DC 5202                       		addq.b	#1,d2
000061DE 60EC                       		bra.s	Obj8C_ChkEms
000061E0                            ; ===========================================================================
000061E0                            
000061E0                            loc_5B3E:
000061E0 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
000061E4                            
000061E4                            loc_5B42:
000061E4 1342 001A                  		move.b	d2,$1A(a1)
000061E8 5229 001A                  		addq.b	#1,$1A(a1)
000061EC 5202                       		addq.b	#1,d2
000061EE 137C 0080 0026             		move.b	#$80,$26(a1)
000061F4 1343 001E                  		move.b	d3,$1E(a1)
000061F8 1343 001F                  		move.b	d3,$1F(a1)
000061FC 0643 000A                  		addi.w	#$A,d3
00006200 43E9 0040                  		lea	$40(a1),a1
00006204 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00006208                            
00006208                            Obj8C_Move:				; XREF: Obj8C_Index
00006208 4A68 003E                  		tst.w	$3E(a0)
0000620C 6700                       		beq.s	locret_5BBA
0000620E 4A28 001E                  		tst.b	$1E(a0)
00006212 6700                       		beq.s	loc_5B78
00006214 5328 001E                  		subq.b	#1,$1E(a0)
00006218 6600                       		bne.s	loc_5B80
0000621A                            
0000621A                            loc_5B78:
0000621A 3028 003E                  		move.w	$3E(a0),d0
0000621E D168 0026                  		add.w	d0,$26(a0)
00006222                            
00006222                            loc_5B80:
00006222 1028 0026                  		move.b	$26(a0),d0
00006226 6700                       		beq.s	loc_5B8C
00006228 0C00 0080                  		cmpi.b	#$80,d0
0000622C 6600                       		bne.s	loc_5B96
0000622E                            
0000622E                            loc_5B8C:
0000622E 4268 003E                  		clr.w	$3E(a0)
00006232 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00006238                            
00006238                            loc_5B96:
00006238 4EB9 0000 2D86             		jsr	(CalcSine).l
0000623E 7800                       		moveq	#0,d4
00006240 1828 003C                  		move.b	$3C(a0),d4
00006244 C3C4                       		muls.w	d4,d1
00006246 E081                       		asr.l	#8,d1
00006248 C1C4                       		muls.w	d4,d0
0000624A E080                       		asr.l	#8,d0
0000624C D268 0038                  		add.w	$38(a0),d1
00006250 D068 003A                  		add.w	$3A(a0),d0
00006254 3141 0008                  		move.w	d1,8(a0)
00006258 3140 000A                  		move.w	d0,$A(a0)
0000625C                            
0000625C                            locret_5BBA:
0000625C 4E75                       		rts	
0000625E                            ; ===========================================================================
0000625E                            ; ---------------------------------------------------------------------------
0000625E                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
0000625E                            ; ---------------------------------------------------------------------------
0000625E                            Map_obj8B:
0000625E                            	include "_maps\obj8B.asm"
0000625E                            ; ---------------------------------------------------------------------------
0000625E                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
0000625E                            ; ---------------------------------------------------------------------------
0000625E 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006262 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006266 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
0000626A 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
0000626E 08                         byte_5BCC:	dc.b 8
0000626F E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006274 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006279 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000627E F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006283 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006288 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000628D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006292 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006297 08                         byte_5BF5:	dc.b 8
00006298 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000629D F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
000062A2 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
000062A7 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
000062AC 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000062B1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000062B6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000062BB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000062C0 08                         byte_5C1E:	dc.b 8
000062C1 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
000062C6 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
000062CB E905 0800 00               		dc.b $E9, 5, 8,	0, 0
000062D0 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
000062D5 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000062DA 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000062DF 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000062E4 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000062E9 08                         byte_5C47:	dc.b 8
000062EA E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
000062EF F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000062F4 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000062F9 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000062FE 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006303 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006308 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000630D 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006312 0C                         byte_5C70:	dc.b $C
00006313 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006318 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
0000631D 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006322 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006327 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
0000632C F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006331 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006336 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
0000633B 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006340 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006345 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000634A 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000634F 0A                         byte_5CAD:	dc.b $A
00006350 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006355 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
0000635A F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
0000635F D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006364 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006369 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
0000636E 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006373 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006378 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000637D 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006382 0A                         byte_5CE0:	dc.b $A
00006383 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006388 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
0000638D EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006392 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006397 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000639C EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
000063A1 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000063A6 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000063AB 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
000063B0 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
000063B5 0C                         byte_5D13:	dc.b $C
000063B6 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
000063BB FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
000063C0 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
000063C5 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
000063CA F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
000063CF FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000063D4 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000063D9 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
000063DE 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
000063E3 180C 0087 00               		dc.b $18, $C, 0, $87, 0
000063E8 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000063ED 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000063F2                            		even
000063F2                            		even
000063F2                            
000063F2                            ; ---------------------------------------------------------------------------
000063F2                            ; Ending sequence demos
000063F2                            ; ---------------------------------------------------------------------------
000063F2                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00006420                            		even
00006420                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006460                            		even
00006460                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006490                            		even
00006490                            Demo_EndLZ:	incbin	demodata\e_lz.bin
000064C0                            		even
000064C0                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000064E0                            		even
000064E0                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00006500                            		even
00006500                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006530                            		even
00006530                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006560                            		even
00006560                            
00006560                            ; ---------------------------------------------------------------------------
00006560                            ; Subroutine to	load level boundaries and start	locations
00006560                            ; ---------------------------------------------------------------------------
00006560                            
00006560                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006560                            
00006560                            
00006560                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006560 7000                       		moveq	#0,d0
00006562 11C0 F740                  		move.b	d0,($FFFFF740).w
00006566 11C0 F741                  		move.b	d0,($FFFFF741).w
0000656A 11C0 F746                  		move.b	d0,($FFFFF746).w
0000656E 11C0 F748                  		move.b	d0,($FFFFF748).w
00006572 11C0 F742                  		move.b	d0,($FFFFF742).w
00006576 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000657A ED08                       		lsl.b	#6,d0
0000657C E848                       		lsr.w	#4,d0
0000657E 3200                       		move.w	d0,d1
00006580 D040                       		add.w	d0,d0
00006582 D041                       		add.w	d1,d0
00006584 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006588 3018                       		move.w	(a0)+,d0
0000658A 31C0 F730                  		move.w	d0,($FFFFF730).w
0000658E 2018                       		move.l	(a0)+,d0
00006590 21C0 F728                  		move.l	d0,($FFFFF728).w
00006594 21C0 F720                  		move.l	d0,($FFFFF720).w
00006598 2018                       		move.l	(a0)+,d0
0000659A 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000659E 21C0 F724                  		move.l	d0,($FFFFF724).w
000065A2 3038 F728                  		move.w	($FFFFF728).w,d0
000065A6 0640 0240                  		addi.w	#$240,d0
000065AA 31C0 F732                  		move.w	d0,($FFFFF732).w
000065AE 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000065B4 3018                       		move.w	(a0)+,d0
000065B6 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000065BA 6000 0000                  		bra.w	LevSz_ChkLamp
000065BE                            ; ===========================================================================
000065BE                            ; ---------------------------------------------------------------------------
000065BE                            ; Level size array and ending start location array
000065BE                            ; ---------------------------------------------------------------------------
000065BE                            LevelSizeArray:        ; GHZ
000065BE 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000065CA 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000065D6 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000065E2 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000065EE                                    ; LZ
000065EE 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
000065FA 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
00006606 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
00006612 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
0000661E                                    ; MZ
0000661E 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
0000662A 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
00006636 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
00006642 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
0000664E                                    ; SLZ
0000664E 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
0000665A 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
00006666 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006672 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
0000667E                                    ; SYZ
0000667E 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
0000668A 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006696 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
000066A2 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
000066AE                                    ; SBZ
000066AE 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
000066BA 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
000066C6 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
000066D2 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
000066DE                                    ; Ending
000066DE 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
000066EA 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
000066F6 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
00006702 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
0000670E                                    ; BHZ
0000670E 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
0000671A 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006726 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006732 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
0000673E                                    even
0000673E                            
0000673E                            ; ===========================================================================
0000673E                            
0000673E                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
0000673E 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006742 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006744 4EB9 0000 0000             		jsr	Obj79_LoadInfo
0000674A 3238 D008                  		move.w	($FFFFD008).w,d1
0000674E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006752 6000 0000                  		bra.w	loc_60D0
00006756                            ; ===========================================================================
00006756                            
00006756                            
00006756                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006756 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000675A ED08                       		lsl.b	#6,d0
0000675C E848                       		lsr.w	#4,d0
0000675E 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006762 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006766 6A00 0000                  		bpl.w	LevSz_SonicPos	; if not, branch
0000676A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000676E 5340                       		subq.w	#1,d0
00006770 E548                       		lsl.w	#2,d0
00006772 43FB 0000                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006776 6000 0000                  		bra.w	LevSz_SonicPos
0000677A                            
0000677A                            EndingStLocArray:
0000677A                            		incbin	misc\sloc_end.bin
0000679A                            		even
0000679A                            		
0000679A                            ; ===========================================================================
0000679A                            ; ---------------------------------------------------------------------------
0000679A                            ; Sonic	start location array
0000679A                            ; ---------------------------------------------------------------------------
0000679A                            StartLocArray:	incbin	misc\sloc_lev.bin
0000681A                            		even
0000681A                            
0000681A                            LevSz_SonicPos:
0000681A 7200                       		moveq	#0,d1
0000681C 3219                       		move.w	(a1)+,d1
0000681E 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006822 7000                       		moveq	#0,d0
00006824 3011                       		move.w	(a1),d0
00006826 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
0000682A                            
0000682A                            loc_60D0:				; XREF: LevSz_ChkLamp
0000682A 0441 00A0                  		subi.w	#$A0,d1
0000682E 6400                       		bcc.s	loc_60D8
00006830 7200                       		moveq	#0,d1
00006832                            
00006832                            loc_60D8:
00006832 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006836 B242                       		cmp.w	d2,d1
00006838 6500                       		bcs.s	loc_60E2
0000683A 3202                       		move.w	d2,d1
0000683C                            
0000683C                            loc_60E2:
0000683C 31C1 F700                  		move.w	d1,($FFFFF700).w
00006840 0440 0060                  		subi.w	#$60,d0
00006844 6400                       		bcc.s	loc_60EE
00006846 7000                       		moveq	#0,d0
00006848                            
00006848                            loc_60EE:
00006848 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000684C 6D00                       		blt.s	loc_60F8
0000684E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006852                            
00006852                            loc_60F8:
00006852 31C0 F704                  		move.w	d0,($FFFFF704).w
00006856 6100 0000                  		bsr.w	BgScrollSpeed
0000685A 7000                       		moveq	#0,d0
0000685C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006860 E508                       		lsl.b	#2,d0
00006862 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006868 6000 0000                  		bra.w	LevSz_Unk
0000686C                            
0000686C                            ; ---------------------------------------------------------------------------
0000686C                            ; Which	256x256	tiles contain loops or roll-tunnels
0000686C                            ; ---------------------------------------------------------------------------
0000686C                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000686C                            ; loop,	loop, tunnel, tunnel
0000686C                            ; ---------------------------------------------------------------------------
0000686C                            LoopTileNums:	incbin	misc\loopnums.bin
0000688C                            		even
0000688C                            ; this is from the cwa source code i will share kaito x gakupo mpreg if this does not work i swear t ogod if this does not
0000688C                            ; ITS GONJE HELP
0000688C                            ; ===========================================================================
0000688C                            
0000688C                            LevSz_Unk:				; XREF: LevelSizeLoad
0000688C 7000                       		moveq	#0,d0
0000688E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006892 E748                       		lsl.w	#3,d0
00006894 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006898 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
0000689C 24D9                       		move.l	(a1)+,(a2)+
0000689E 24D9                       		move.l	(a1)+,(a2)+
000068A0 4E75                       		rts	
000068A2                            ; End of function LevelSizeLoad
000068A2                            
000068A2                            ; ===========================================================================
000068A2 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000068AA 0800 0100 0100 0000        		dc.l $8000100, $1000000
000068B2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000068BA 0800 0100 0100 0000        		dc.l $8000100, $1000000
000068C2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000068CA 0800 0100 0100 0000        		dc.l $8000100, $1000000
000068D2 0070 0100 0100 0100        		dc.l $700100, $1000100
000068DA                            
000068DA                            ; ---------------------------------------------------------------------------
000068DA                            ; Subroutine to	set scroll speed of some backgrounds
000068DA                            ; ---------------------------------------------------------------------------
000068DA                            
000068DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068DA                            
000068DA                            
000068DA                            BgScrollSpeed:				; XREF: LevelSizeLoad
000068DA 4A38 FE30                  		tst.b	($FFFFFE30).w
000068DE 6600                       		bne.s	loc_6206
000068E0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068E4 31C0 F714                  		move.w	d0,($FFFFF714).w
000068E8 31C1 F708                  		move.w	d1,($FFFFF708).w
000068EC 31C1 F710                  		move.w	d1,($FFFFF710).w
000068F0 31C1 F718                  		move.w	d1,($FFFFF718).w
000068F4                            
000068F4                            loc_6206:
000068F4 7400                       		moveq	#0,d2
000068F6 1438 FE10                  		move.b	($FFFFFE10).w,d2
000068FA D442                       		add.w	d2,d2
000068FC 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006900 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006904                            ; End of function BgScrollSpeed
00006904                            
00006904                            ; ===========================================================================
00006904 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006908 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000690C 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006910 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_GHZ-BgScroll_Index
00006914                            ; ===========================================================================
00006914                            
00006914                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006914 6000 0000                  		bra.w	Deform_GHZ
00006918                            ; ===========================================================================
00006918                            
00006918                            BgScroll_LZ:				; XREF: BgScroll_Index
00006918 E280                       		asr.l	#1,d0
0000691A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000691E 4E75                       		rts	
00006920                            ; ===========================================================================
00006920                            
00006920                            BgScroll_MZ:				; XREF: BgScroll_Index
00006920 4E75                       		rts	
00006922                            ; ===========================================================================
00006922                            
00006922                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006922 E280                       		asr.l	#1,d0
00006924 0640 00C0                  		addi.w	#$C0,d0
00006928 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000692C 4E75                       		rts	
0000692E                            ; ===========================================================================
0000692E                            
0000692E                            BgScroll_SYZ:				; XREF: BgScroll_Index
0000692E E980                       		asl.l	#4,d0
00006930 2400                       		move.l	d0,d2
00006932 E380                       		asl.l	#1,d0
00006934 D082                       		add.l	d2,d0
00006936 E080                       		asr.l	#8,d0
00006938 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000693C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006940 4E75                       		rts	
00006942                            ; ===========================================================================
00006942                            
00006942                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006942 E980                       		asl.l	#4,d0
00006944 E380                       		asl.l	#1,d0
00006946 E080                       		asr.l	#8,d0
00006948 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000694C 4E75                       		rts	
0000694E                            ; ===========================================================================
0000694E                            
0000694E                            BgScroll_End:				; XREF: BgScroll_Index
0000694E 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006954 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000695A 4E75                       		rts	
0000695C                            ; ===========================================================================
0000695C 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006962 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006968 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000696E 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006974 4E75                       		rts
00006976                            
00006976                            ; ---------------------------------------------------------------------------
00006976                            ; Background layer deformation subroutines
00006976                            ; ---------------------------------------------------------------------------
00006976                            
00006976                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006976                            
00006976                            
00006976                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006976 4A38 F744                  		tst.b	($FFFFF744).w
0000697A 6700                       		beq.s	loc_628E
0000697C 4E75                       		rts	
0000697E                            ; ===========================================================================
0000697E                            
0000697E                            loc_628E:
0000697E 4278 F754                  		clr.w	($FFFFF754).w
00006982 4278 F756                  		clr.w	($FFFFF756).w
00006986 4278 F758                  		clr.w	($FFFFF758).w
0000698A 4278 F75A                  		clr.w	($FFFFF75A).w
0000698E 6100 0000                  		bsr.w	ScrollHoriz
00006992 6100 0000                  		bsr.w	ScrollVertical
00006996 6100 0000                  		bsr.w	DynScrResizeLoad
0000699A 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000069A0 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000069A6 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000069AC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069B2 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000069B8 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000069BE 4879 0000 0000             		pea	Deform_Ripple
000069C4 7000                       		moveq	#0,d0
000069C6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000069CA D040                       		add.w	d0,d0
000069CC 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000069D0 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000069D4                            ; End of function DeformBgLayer
000069D4                            
000069D4                            ; ===========================================================================
000069D4                            ; ---------------------------------------------------------------------------
000069D4                            ; Offset index for background layer deformation	code
000069D4                            ; ---------------------------------------------------------------------------
000069D4 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000069D8 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000069DC 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000069E0 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_GHZ-Deform_Index
000069E4                            ; ---------------------------------------------------------------------------
000069E4                            ; Green	Hill Zone background layer deformation code
000069E4                            ; ---------------------------------------------------------------------------
000069E4                            
000069E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069E4                            
000069E4                            
000069E4                            Deform_GHZ:				; XREF: Deform_Index
000069E4 3838 F73A                  		move.w	($FFFFF73A).w,d4
000069E8 48C4                       		ext.l	d4
000069EA EB84                       		asl.l	#5,d4
000069EC 2204                       		move.l	d4,d1
000069EE E384                       		asl.l	#1,d4
000069F0 D881                       		add.l	d1,d4
000069F2 7A00                       		moveq	#0,d5
000069F4 6100 0000                  		bsr.w	ScrollBlock1
000069F8 6100 0000                  		bsr.w	ScrollBlock4
000069FC 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A00 3038 F704                  		move.w	($FFFFF704).w,d0
00006A04 0240 07FF                  		andi.w	#$7FF,d0
00006A08 EA48                       		lsr.w	#5,d0
00006A0A 4440                       		neg.w	d0
00006A0C 0640 0026                  		addi.w	#$26,d0
00006A10 31C0 F714                  		move.w	d0,($FFFFF714).w
00006A14 3800                       		move.w	d0,d4
00006A16 6100 0000                  		bsr.w	ScrollBlock3
00006A1A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A20 323C 006F                  		move.w	#$6F,d1
00006A24 9244                       		sub.w	d4,d1
00006A26 3038 F700                  		move.w	($FFFFF700).w,d0
00006A2A 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006A30 6600                       		bne.s	loc_633C
00006A32 7000                       		moveq	#0,d0
00006A34                            
00006A34                            loc_633C:
00006A34 4440                       		neg.w	d0
00006A36 4840                       		swap	d0
00006A38 3038 F708                  		move.w	($FFFFF708).w,d0
00006A3C 4440                       		neg.w	d0
00006A3E                            
00006A3E                            loc_6346:
00006A3E 22C0                       		move.l	d0,(a1)+
00006A40 51C9 FFFC                  		dbf	d1,loc_6346
00006A44 323C 0027                  		move.w	#$27,d1
00006A48 3038 F710                  		move.w	($FFFFF710).w,d0
00006A4C 4440                       		neg.w	d0
00006A4E                            
00006A4E                            loc_6356:
00006A4E 22C0                       		move.l	d0,(a1)+
00006A50 51C9 FFFC                  		dbf	d1,loc_6356
00006A54 3038 F710                  		move.w	($FFFFF710).w,d0
00006A58 0640 0000                  		addi.w	#0,d0
00006A5C 3438 F700                  		move.w	($FFFFF700).w,d2
00006A60 0642 FE00                  		addi.w	#-$200,d2
00006A64 9440                       		sub.w	d0,d2
00006A66 48C2                       		ext.l	d2
00006A68 E182                       		asl.l	#8,d2
00006A6A 85FC 0068                  		divs.w	#$68,d2
00006A6E 48C2                       		ext.l	d2
00006A70 E182                       		asl.l	#8,d2
00006A72 7600                       		moveq	#0,d3
00006A74 3600                       		move.w	d0,d3
00006A76 323C 0047                  		move.w	#$47,d1
00006A7A D244                       		add.w	d4,d1
00006A7C                            
00006A7C                            loc_6384:
00006A7C 3003                       		move.w	d3,d0
00006A7E 4440                       		neg.w	d0
00006A80 22C0                       		move.l	d0,(a1)+
00006A82 4843                       		swap	d3
00006A84 D682                       		add.l	d2,d3
00006A86 4843                       		swap	d3
00006A88 51C9 FFF2                  		dbf	d1,loc_6384
00006A8C 4E75                       		rts	
00006A8E                            ; End of function Deform_GHZ
00006A8E                            
00006A8E                            ; ---------------------------------------------------------------------------
00006A8E                            ; Labyrinth Zone background layer deformation code
00006A8E                            ; ---------------------------------------------------------------------------
00006A8E                            
00006A8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A8E                            
00006A8E                            
00006A8E                            Deform_LZ:				; XREF: Deform_Index
00006A8E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A92 48C4                       		ext.l	d4
00006A94 EF84                       		asl.l	#7,d4
00006A96 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006A9A 48C5                       		ext.l	d5
00006A9C EF85                       		asl.l	#7,d5
00006A9E 6100 0000                  		bsr.w	ScrollBlock1
00006AA2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006AA8 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AAC 323C 00DF                  		move.w	#224-1,d1
00006AB0 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00006AB4 6A00                       		bpl.s	@60hz
00006AB6 323C 00EF                  		move.w	#240-1,d1
00006ABA                            @60hz:
00006ABA 3038 F700                  		move.w	($FFFFF700).w,d0
00006ABE 4440                       		neg.w	d0
00006AC0 4840                       		swap	d0
00006AC2 3038 F708                  		move.w	($FFFFF708).w,d0
00006AC6 4440                       		neg.w	d0
00006AC8                            
00006AC8                            loc_63C6:
00006AC8 22C0                       		move.l	d0,(a1)+
00006ACA 51C9 FFFC                  		dbf	d1,loc_63C6
00006ACE 3038 F646                  		move.w	($FFFFF646).w,d0
00006AD2 9078 F704                  		sub.w	($FFFFF704).w,d0
00006AD6 4E75                       		rts	
00006AD8                            ; End of function Deform_LZ
00006AD8                            
00006AD8                            ; ---------------------------------------------------------------------------
00006AD8                            ; Marble Zone background layer deformation code
00006AD8                            ; ---------------------------------------------------------------------------
00006AD8                            
00006AD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AD8                            
00006AD8                            
00006AD8                            Deform_MZ:				; XREF: Deform_Index
00006AD8 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006ADC 48C4                       		ext.l	d4
00006ADE ED84                       		asl.l	#6,d4
00006AE0 2204                       		move.l	d4,d1
00006AE2 E384                       		asl.l	#1,d4
00006AE4 D881                       		add.l	d1,d4
00006AE6 7A00                       		moveq	#0,d5
00006AE8 6100 0000                  		bsr.w	ScrollBlock1
00006AEC 303C 0200                  		move.w	#$200,d0
00006AF0 3238 F704                  		move.w	($FFFFF704).w,d1
00006AF4 0441 01C8                  		subi.w	#$1C8,d1
00006AF8 6500                       		bcs.s	loc_6402
00006AFA 3401                       		move.w	d1,d2
00006AFC D241                       		add.w	d1,d1
00006AFE D242                       		add.w	d2,d1
00006B00 E441                       		asr.w	#2,d1
00006B02 D041                       		add.w	d1,d0
00006B04                            
00006B04                            loc_6402:
00006B04 31C0 F714                  		move.w	d0,($FFFFF714).w
00006B08 6100 0000                  		bsr.w	ScrollBlock3
00006B0C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B12 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B16 323C 00DF                  		move.w	#224-1,d1
00006B1A 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00006B1E 6A00                       		bpl.s	@60hz
00006B20 323C 00EF                  		move.w	#240-1,d1
00006B24                            @60hz:
00006B24 3038 F700                  		move.w	($FFFFF700).w,d0
00006B28 4440                       		neg.w	d0
00006B2A 4840                       		swap	d0
00006B2C 3038 F708                  		move.w	($FFFFF708).w,d0
00006B30 4440                       		neg.w	d0
00006B32                            
00006B32                            loc_6426:
00006B32 22C0                       		move.l	d0,(a1)+
00006B34 51C9 FFFC                  		dbf	d1,loc_6426
00006B38 4E75                       		rts	
00006B3A                            ; End of function Deform_MZ
00006B3A                            
00006B3A                            ; ---------------------------------------------------------------------------
00006B3A                            ; Star Light Zone background layer deformation code
00006B3A                            ; ---------------------------------------------------------------------------
00006B3A                            
00006B3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B3A                            
00006B3A                            
00006B3A                            Deform_SLZ:				; XREF: Deform_Index
00006B3A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B3E 48C4                       		ext.l	d4
00006B40 EB84                       		asl.l	#5,d4
00006B42 2204                       		move.l	d4,d1
00006B44 E384                       		asl.l	#1,d4
00006B46 D881                       		add.l	d1,d4
00006B48 7A00                       		moveq	#0,d5
00006B4A 6100 0000                  		bsr.w	ScrollBlock1
00006B4E 6100 0000                  		bsr.w	ScrollBlock3
00006B52 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B56                            	;	move.w	($FFFFF704).w,d0
00006B56                            	;	andi.w	#$7FF,d0
00006B56 EA48                       		lsr.w	#5,d0
00006B58 4440                       		neg.w	d0
00006B5A 0640 0026                  		addi.w	#$26,d0
00006B5E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006B62 3800                       		move.w	d0,d4
00006B64                            	;	bsr.w	ScrollBlock3
00006B64 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006B6A 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006B6E                            
00006B6E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B72 4440                       		neg.w	d0			; negate (positive to negative)
00006B74 4840                       		swap	d0			; send to the left side of d0
00006B76 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B7A 45F8 A800                  		lea	($FFFFA800).w,a2
00006B7E 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B84 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B8A 3038 A800                  		move.w	($FFFFA800).w,d0
00006B8E 4440                       		neg.w	d0			; negate (positive to negative)
00006B90 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006B92 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B96                            slz_DeformLoop_1:
00006B96 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B98 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006B9C                            
00006B9C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BA0 4440                       		neg.w	d0			; negate (positive to negative)
00006BA2 4840                       		swap	d0			; send to the left side of d0
00006BA4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BA8 45F8 A800                  		lea	($FFFFA800).w,a2
00006BAC 069A 0000 5000             		addi.l	#$5000,(a2)+
00006BB2 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BB8 3038 A800                  		move.w	($FFFFA800).w,d0
00006BBC 4440                       		neg.w	d0			; negate (positive to negative)
00006BBE E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006BC0 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BC4                            slz_DeformLoop_2:
00006BC4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BC6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006BCA                            
00006BCA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BCE 4440                       		neg.w	d0			; negate (positive to negative)
00006BD0 4840                       		swap	d0			; send to the left side of d0
00006BD2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BD6 45F8 A800                  		lea	($FFFFA800).w,a2
00006BDA 069A 0000 5000             		addi.l	#$5000,(a2)+
00006BE0 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BE6 3038 A800                  		move.w	($FFFFA800).w,d0
00006BEA 4440                       		neg.w	d0			; negate (positive to negative)
00006BEC E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006BEE 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BF2                            slz_DeformLoop_3:
00006BF2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BF4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006BF8                            
00006BF8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BFC 4440                       		neg.w	d0			; negate (positive to negative)
00006BFE 4840                       		swap	d0			; send to the left side of d0
00006C00 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C04 45F8 A800                  		lea	($FFFFA800).w,a2
00006C08 069A 0000 5000             		addi.l	#$5000,(a2)+
00006C0E 069A 0000 C000             		addi.l	#$C000,(a2)+
00006C14 3038 A800                  		move.w	($FFFFA800).w,d0
00006C18 4440                       		neg.w	d0			; negate (positive to negative)
00006C1A E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006C1C 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C20                            slz_DeformLoop_4:
00006C20 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C22 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006C26                            
00006C26 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C2A 4440                       		neg.w	d0			; negate (positive to negative)
00006C2C 4840                       		swap	d0			; send to the left side of d0
00006C2E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C32 45F8 A800                  		lea	($FFFFA800).w,a2
00006C36 069A 0000 5000             		addi.l	#$5000,(a2)+
00006C3C 069A 0000 C000             		addi.l	#$C000,(a2)+
00006C42 3038 A800                  		move.w	($FFFFA800).w,d0
00006C46 4440                       		neg.w	d0			; negate (positive to negative)
00006C48 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006C4A 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C4E                            slz_DeformLoop_5:
00006C4E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C50 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006C54                            
00006C54 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C58 4440                       		neg.w	d0			; negate (positive to negative)
00006C5A 4840                       		swap	d0			; send to the left side of d0
00006C5C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C60 4440                       		neg.w	d0			; negate (positive to negative)
00006C62 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006C64 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C68                            slz_DeformLoop_6:
00006C68 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C6A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006C6E                            
00006C6E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C72 4440                       		neg.w	d0			; negate (positive to negative)
00006C74 4840                       		swap	d0			; send to the left side of d0
00006C76 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C7A 4440                       		neg.w	d0			; negate (positive to negative)
00006C7C EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006C7E 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C82                            slz_DeformLoop_7:
00006C82 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C84 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006C88                            
00006C88 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C8C 4440                       		neg.w	d0			; negate (positive to negative)
00006C8E 4840                       		swap	d0			; send to the left side of d0
00006C90 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C94 4440                       		neg.w	d0			; negate (positive to negative)
00006C96 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006C98 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C9C                            slz_DeformLoop_8:
00006C9C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C9E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006CA2                            
00006CA2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006CA6 4440                       		neg.w	d0			; negate (positive to negative)
00006CA8 4840                       		swap	d0			; send to the left side of d0
00006CAA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CAE 4440                       		neg.w	d0			; negate (positive to negative)
00006CB0 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006CB2 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CB6                            slz_DeformLoop_9:
00006CB6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CB8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006CBC                            
00006CBC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006CC0 4440                       		neg.w	d0			; negate (positive to negative)
00006CC2 4840                       		swap	d0			; send to the left side of d0
00006CC4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CC8 4440                       		neg.w	d0			; negate (positive to negative)
00006CCA E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006CCC 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CD0                            slz_DeformLoop_10:
00006CD0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CD2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006CD6                            
00006CD6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006CDA 4440                       		neg.w	d0			; negate (positive to negative)
00006CDC 4840                       		swap	d0			; send to the left side of d0
00006CDE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CE2 4440                       		neg.w	d0			; negate (positive to negative)
00006CE4 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006CE6 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CEA                            slz_DeformLoop_11:
00006CEA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CEC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006CF0                            
00006CF0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006CF4 4440                       		neg.w	d0			; negate (positive to negative)
00006CF6 4840                       		swap	d0			; send to the left side of d0
00006CF8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CFC 4440                       		neg.w	d0			; negate (positive to negative)
00006CFE E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006D00 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006D04                            slz_DeformLoop_12:
00006D04 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006D06 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006D0A                            
00006D0A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006D0E 4440                       		neg.w	d0			; negate (positive to negative)
00006D10 4840                       		swap	d0			; send to the left side of d0
00006D12 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006D16 4440                       		neg.w	d0			; negate (positive to negative)
00006D18 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006D1A 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006D1E                            slz_DeformLoop_13:
00006D1E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006D20 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006D24 4E75                       		rts	
00006D26                            ; End of function Deform_SLZ
00006D26 4E75                       		rts	
00006D28                            ; End of function Deform_SLZ_2
00006D28                            
00006D28                            ; ---------------------------------------------------------------------------
00006D28                            ; Spring Yard Zone background layer deformation	code
00006D28                            ; ---------------------------------------------------------------------------
00006D28                            
00006D28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D28                            
00006D28                            
00006D28                            Deform_SYZ:				; XREF: Deform_Index
00006D28 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006D2C 48C4                       		ext.l	d4
00006D2E ED84                       		asl.l	#6,d4
00006D30 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006D34 48C5                       		ext.l	d5
00006D36 E985                       		asl.l	#4,d5
00006D38 2205                       		move.l	d5,d1
00006D3A E385                       		asl.l	#1,d5
00006D3C DA81                       		add.l	d1,d5
00006D3E 6100 0000                  		bsr.w	ScrollBlock1
00006D42 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D48 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D4C 323C 00DF                  		move.w	#224-1,d1
00006D50 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00006D54 6A00                       		bpl.s	@60hz
00006D56 323C 00EF                  		move.w	#240-1,d1
00006D5A                            @60hz:
00006D5A 3038 F700                  		move.w	($FFFFF700).w,d0
00006D5E 4440                       		neg.w	d0
00006D60 4840                       		swap	d0
00006D62 3038 F708                  		move.w	($FFFFF708).w,d0
00006D66 4440                       		neg.w	d0
00006D68                            
00006D68                            loc_653C:
00006D68 22C0                       		move.l	d0,(a1)+
00006D6A 51C9 FFFC                  		dbf	d1,loc_653C
00006D6E 4E75                       		rts	
00006D70                            ; End of function Deform_SYZ
00006D70                            
00006D70                            ; ---------------------------------------------------------------------------
00006D70                            ; Scrap	Brain Zone background layer deformation	code
00006D70                            ; ---------------------------------------------------------------------------
00006D70                            
00006D70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D70                            
00006D70                            
00006D70                            Deform_SBZ:				; XREF: Deform_Index
00006D70 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006D74 48C4                       		ext.l	d4
00006D76 ED84                       		asl.l	#6,d4
00006D78 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006D7C 48C5                       		ext.l	d5
00006D7E E985                       		asl.l	#4,d5
00006D80 E385                       		asl.l	#1,d5
00006D82 6100 0000                  		bsr.w	ScrollBlock1
00006D86 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D8C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D90 323C 00DF                  		move.w	#224-1,d1
00006D94 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00006D98 6A00                       		bpl.s	@60hz
00006D9A 323C 00EF                  		move.w	#240-1,d1
00006D9E                            @60hz:
00006D9E 3038 F700                  		move.w	($FFFFF700).w,d0
00006DA2 4440                       		neg.w	d0
00006DA4 4840                       		swap	d0
00006DA6 3038 F708                  		move.w	($FFFFF708).w,d0
00006DAA 4440                       		neg.w	d0
00006DAC                            
00006DAC                            loc_6576:
00006DAC 22C0                       		move.l	d0,(a1)+
00006DAE 51C9 FFFC                  		dbf	d1,loc_6576
00006DB2 4E75                       		rts	
00006DB4                            ; End of function Deform_SBZ
00006DB4                            ; ---------------------------------------------------------------------------
00006DB4                            ; guys, ripple effects are cheap AF they just coded it badly
00006DB4                            Deform_Ripple:
00006DB4 41F8 CC00                  		lea	($FFFFCC00).w,a0	; hscroll line buffer
00006DB8 323C 00DF                  		move.w	#224-1,d1
00006DBC 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00006DC0 6A00                       		bpl.s	@60hz
00006DC2 323C 00EF                  		move.w	#240-1,d1
00006DC6                            @60hz:
00006DC6 4240                       		clr.w	d0
00006DC8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0	; vblank timer
00006DCC                            ;		addq.b	#1,($FFFF8000).w
00006DCC 43FB 0000                  		lea	@ripple(pc,d0.w),a1
00006DD0                            @loop:
00006DD0 1019                       		move.b	(a1)+,d0
00006DD2 4880                       		ext.w	d0
00006DD4 D158                       		add.w	d0,(a0)+
00006DD6 5448                       		addq.w	#2,a0
00006DD8 51C9 FFF6                  		dbf	d1,@loop
00006DDC 4E75                       		rts
00006DDE                            @ripple:
00006DDE                            	rept 2
00006DDE                            	dc.b  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00006DDE                            	dc.b  2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00006DDE                            	dc.b  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00006DDE                            	dc.b  2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00006DDE                            	dc.b  0,-1,-1,-1,-1,-1,-2,-2,-2,-2,-2,-3,-3,-3,-3,-3
00006DDE                            	dc.b -3,-3,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4
00006DDE                            	dc.b -4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-3
00006DDE                            	dc.b -3,-3,-3,-3,-3,-3,-2,-2,-2,-2,-2,-1,-1,-1,-1,-1
00006DDE                            	dc.b  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00006DDE                            	dc.b  2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00006DDE                            	dc.b  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00006DDE                            	dc.b  2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00006DDE                            	dc.b  0,-1,-1,-1,-1,-1,-2,-2,-2,-2,-2,-3,-3,-3,-3,-3
00006DDE                            	dc.b -3,-3,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4
00006DDE                            	dc.b -4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-3
00006DDE                            	dc.b -3,-3,-3,-3,-3,-3,-2,-2,-2,-2,-2,-1,-1,-1,-1,-1
00006DDE 0000 0000 0000 0101 0101+  	endr
00006FDE                            ; ---------------------------------------------------------------------------
00006FDE                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006FDE                            ; ---------------------------------------------------------------------------
00006FDE                            
00006FDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FDE                            
00006FDE                            
00006FDE                            ScrollHoriz:				; XREF: DeformBgLayer
00006FDE 3838 F700                  		move.w	($FFFFF700).w,d4
00006FE2 6100                       		bsr.s	ScrollHoriz2
00006FE4 3038 F700                  		move.w	($FFFFF700).w,d0
00006FE8 0240 0010                  		andi.w	#$10,d0
00006FEC 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006FF0 B300                       		eor.b	d1,d0
00006FF2 6600                       		bne.s	locret_65B0
00006FF4 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006FFA 3038 F700                  		move.w	($FFFFF700).w,d0
00006FFE 9044                       		sub.w	d4,d0
00007000 6A00                       		bpl.s	loc_65AA
00007002 08F8 0002 F754             		bset	#2,($FFFFF754).w
00007008 4E75                       		rts	
0000700A                            ; ===========================================================================
0000700A                            
0000700A                            loc_65AA:
0000700A 08F8 0003 F754             		bset	#3,($FFFFF754).w
00007010                            
00007010                            locret_65B0:
00007010 4E75                       		rts	
00007012                            ; End of function ScrollHoriz
00007012                            
00007012                            
00007012                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007012                            
00007012                            
00007012                            ScrollHoriz2:				; XREF: ScrollHoriz
00007012 3038 D008                  		move.w	($FFFFD008).w,d0
00007016 9078 F700                  		sub.w	($FFFFF700).w,d0
0000701A 0440 0090                  		subi.w	#$90,d0
0000701E 6500                       		bcs.s	loc_65F6
00007020 0440 0010                  		subi.w	#$10,d0
00007024 6400                       		bcc.s	loc_65CC
00007026 4278 F73A                  		clr.w	($FFFFF73A).w
0000702A 4E75                       		rts	
0000702C                            ; ===========================================================================
0000702C                            
0000702C                            loc_65CC:
0000702C 0C40 0010                  		cmpi.w	#$10,d0
00007030 6500                       		bcs.s	loc_65D6
00007032 303C 0010                  		move.w	#$10,d0
00007036                            
00007036                            loc_65D6:
00007036 D078 F700                  		add.w	($FFFFF700).w,d0
0000703A B078 F72A                  		cmp.w	($FFFFF72A).w,d0
0000703E 6D00                       		blt.s	loc_65E4
00007040 3038 F72A                  		move.w	($FFFFF72A).w,d0
00007044                            
00007044                            loc_65E4:
00007044 3200                       		move.w	d0,d1
00007046 9278 F700                  		sub.w	($FFFFF700).w,d1
0000704A E141                       		asl.w	#8,d1
0000704C 31C0 F700                  		move.w	d0,($FFFFF700).w
00007050 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00007054 4E75                       		rts	
00007056                            ; ===========================================================================
00007056                            
00007056                            loc_65F6:				; XREF: ScrollHoriz2
00007056 D078 F700                  		add.w	($FFFFF700).w,d0
0000705A B078 F728                  		cmp.w	($FFFFF728).w,d0
0000705E 6EE4                       		bgt.s	loc_65E4
00007060 3038 F728                  		move.w	($FFFFF728).w,d0
00007064 60DE                       		bra.s	loc_65E4
00007066                            ; End of function ScrollHoriz2
00007066                            
00007066                            ; ===========================================================================
00007066 4A40                       		tst.w	d0
00007068 6A00                       		bpl.s	loc_6610
0000706A 303C FFFE                  		move.w	#-2,d0
0000706E 60E6                       		bra.s	loc_65F6
00007070                            ; ===========================================================================
00007070                            
00007070                            loc_6610:
00007070 303C 0002                  		move.w	#2,d0
00007074 60B6                       		bra.s	loc_65CC
00007076                            
00007076                            ; ---------------------------------------------------------------------------
00007076                            ; Subroutine to	scroll the level vertically as Sonic moves
00007076                            ; ---------------------------------------------------------------------------
00007076                            
00007076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007076                            
00007076                            
00007076                            ScrollVertical:				; XREF: DeformBgLayer
00007076 7200                       		moveq	#0,d1
00007078 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000707C 9078 F704                  		sub.w	($FFFFF704).w,d0
00007080 0838 0002 D022             		btst	#2,($FFFFD022).w
00007086 6700                       		beq.s	loc_662A
00007088 5B40                       		subq.w	#5,d0
0000708A                            
0000708A                            loc_662A:
0000708A 0838 0001 D022             		btst	#1,($FFFFD022).w
00007090 6700                       		beq.s	loc_664A
00007092 0640 0020                  		addi.w	#$20,d0
00007096 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000709A 6500                       		bcs.s	loc_6696
0000709C 0440 0040                  		subi.w	#$40,d0
000070A0 6400                       		bcc.s	loc_6696
000070A2 4A38 F75C                  		tst.b	($FFFFF75C).w
000070A6 6600                       		bne.s	loc_66A8
000070A8 6000                       		bra.s	loc_6656
000070AA                            ; ===========================================================================
000070AA                            
000070AA                            loc_664A:
000070AA 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000070AE 6600                       		bne.s	loc_665C
000070B0 4A38 F75C                  		tst.b	($FFFFF75C).w
000070B4 6600                       		bne.s	loc_66A8
000070B6                            
000070B6                            loc_6656:
000070B6 4278 F73C                  		clr.w	($FFFFF73C).w
000070BA 4E75                       		rts	
000070BC                            ; ===========================================================================
000070BC                            
000070BC                            loc_665C:
000070BC 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
000070C2 6600                       		bne.s	loc_6684
000070C4 3238 D014                  		move.w	($FFFFD014).w,d1
000070C8 6A00                       		bpl.s	loc_666C
000070CA 4441                       		neg.w	d1
000070CC                            
000070CC                            loc_666C:
000070CC 0C41 0800                  		cmpi.w	#$800,d1
000070D0 6400                       		bcc.s	loc_6696
000070D2 323C 0600                  		move.w	#$600,d1
000070D6 0C40 0006                  		cmpi.w	#6,d0
000070DA 6E00                       		bgt.s	loc_66F6
000070DC 0C40 FFFA                  		cmpi.w	#-6,d0
000070E0 6D00                       		blt.s	loc_66C0
000070E2 6000                       		bra.s	loc_66AE
000070E4                            ; ===========================================================================
000070E4                            
000070E4                            loc_6684:
000070E4 323C 0200                  		move.w	#$200,d1
000070E8 0C40 0002                  		cmpi.w	#2,d0
000070EC 6E00                       		bgt.s	loc_66F6
000070EE 0C40 FFFE                  		cmpi.w	#-2,d0
000070F2 6D00                       		blt.s	loc_66C0
000070F4 6000                       		bra.s	loc_66AE
000070F6                            ; ===========================================================================
000070F6                            
000070F6                            loc_6696:
000070F6 323C 1000                  		move.w	#$1000,d1
000070FA 0C40 0010                  		cmpi.w	#$10,d0
000070FE 6E00                       		bgt.s	loc_66F6
00007100 0C40 FFF0                  		cmpi.w	#-$10,d0
00007104 6D00                       		blt.s	loc_66C0
00007106 6000                       		bra.s	loc_66AE
00007108                            ; ===========================================================================
00007108                            
00007108                            loc_66A8:
00007108 7000                       		moveq	#0,d0
0000710A 11C0 F75C                  		move.b	d0,($FFFFF75C).w
0000710E                            
0000710E                            loc_66AE:
0000710E 7200                       		moveq	#0,d1
00007110 3200                       		move.w	d0,d1
00007112 D278 F704                  		add.w	($FFFFF704).w,d1
00007116 4A40                       		tst.w	d0
00007118 6A00 0000                  		bpl.w	loc_6700
0000711C 6000 0000                  		bra.w	loc_66CC
00007120                            ; ===========================================================================
00007120                            
00007120                            loc_66C0:
00007120 4441                       		neg.w	d1
00007122 48C1                       		ext.l	d1
00007124 E181                       		asl.l	#8,d1
00007126 D2B8 F704                  		add.l	($FFFFF704).w,d1
0000712A 4841                       		swap	d1
0000712C                            
0000712C                            loc_66CC:
0000712C B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00007130 6E00                       		bgt.s	loc_6724
00007132 0C41 FF00                  		cmpi.w	#-$100,d1
00007136 6E00                       		bgt.s	loc_66F0
00007138 0241 07FF                  		andi.w	#$7FF,d1
0000713C 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007142 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00007148 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000714E 6000                       		bra.s	loc_6724
00007150                            ; ===========================================================================
00007150                            
00007150                            loc_66F0:
00007150 3238 F72C                  		move.w	($FFFFF72C).w,d1
00007154 6000                       		bra.s	loc_6724
00007156                            ; ===========================================================================
00007156                            
00007156                            loc_66F6:
00007156 48C1                       		ext.l	d1
00007158 E181                       		asl.l	#8,d1
0000715A D2B8 F704                  		add.l	($FFFFF704).w,d1
0000715E 4841                       		swap	d1
00007160                            
00007160                            loc_6700:
00007160 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00007164 6D00                       		blt.s	loc_6724
00007166 0441 0800                  		subi.w	#$800,d1
0000716A 6500                       		bcs.s	loc_6720
0000716C 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007172 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00007178 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000717E 6000                       		bra.s	loc_6724
00007180                            ; ===========================================================================
00007180                            
00007180                            loc_6720:
00007180 3238 F72E                  		move.w	($FFFFF72E).w,d1
00007184                            
00007184                            loc_6724:
00007184 3838 F704                  		move.w	($FFFFF704).w,d4
00007188 4841                       		swap	d1
0000718A 2601                       		move.l	d1,d3
0000718C 96B8 F704                  		sub.l	($FFFFF704).w,d3
00007190 E09B                       		ror.l	#8,d3
00007192 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00007196 21C1 F704                  		move.l	d1,($FFFFF704).w
0000719A 3038 F704                  		move.w	($FFFFF704).w,d0
0000719E 0240 0010                  		andi.w	#$10,d0
000071A2 1238 F74B                  		move.b	($FFFFF74B).w,d1
000071A6 B300                       		eor.b	d1,d0
000071A8 6600                       		bne.s	locret_6766
000071AA 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
000071B0 3038 F704                  		move.w	($FFFFF704).w,d0
000071B4 9044                       		sub.w	d4,d0
000071B6 6A00                       		bpl.s	loc_6760
000071B8 08F8 0000 F754             		bset	#0,($FFFFF754).w
000071BE 4E75                       		rts	
000071C0                            ; ===========================================================================
000071C0                            
000071C0                            loc_6760:
000071C0 08F8 0001 F754             		bset	#1,($FFFFF754).w
000071C6                            
000071C6                            locret_6766:
000071C6 4E75                       		rts	
000071C8                            ; End of function ScrollVertical
000071C8                            
000071C8                            
000071C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071C8                            
000071C8                            
000071C8                            ScrollBlock1:				; XREF: Deform_GHZ; et al
000071C8 2438 F708                  		move.l	($FFFFF708).w,d2
000071CC 2002                       		move.l	d2,d0
000071CE D084                       		add.l	d4,d0
000071D0 21C0 F708                  		move.l	d0,($FFFFF708).w
000071D4 2200                       		move.l	d0,d1
000071D6 4841                       		swap	d1
000071D8 0241 0010                  		andi.w	#$10,d1
000071DC 1638 F74C                  		move.b	($FFFFF74C).w,d3
000071E0 B701                       		eor.b	d3,d1
000071E2 6600                       		bne.s	loc_679C
000071E4 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
000071EA 9082                       		sub.l	d2,d0
000071EC 6A00                       		bpl.s	loc_6796
000071EE 08F8 0002 F756             		bset	#2,($FFFFF756).w
000071F4 6000                       		bra.s	loc_679C
000071F6                            ; ===========================================================================
000071F6                            
000071F6                            loc_6796:
000071F6 08F8 0003 F756             		bset	#3,($FFFFF756).w
000071FC                            
000071FC                            loc_679C:
000071FC 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007200 2003                       		move.l	d3,d0
00007202 D085                       		add.l	d5,d0
00007204 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007208 2200                       		move.l	d0,d1
0000720A 4841                       		swap	d1
0000720C 0241 0010                  		andi.w	#$10,d1
00007210 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007214 B501                       		eor.b	d2,d1
00007216 6600                       		bne.s	locret_67D0
00007218 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000721E 9083                       		sub.l	d3,d0
00007220 6A00                       		bpl.s	loc_67CA
00007222 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007228 4E75                       		rts	
0000722A                            ; ===========================================================================
0000722A                            
0000722A                            loc_67CA:
0000722A 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007230                            
00007230                            locret_67D0:
00007230 4E75                       		rts	
00007232                            ; End of function ScrollBlock1
00007232                            
00007232                            
00007232                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007232                            
00007232                            
00007232                            ScrollBlock2:				; XREF: Deform_SLZ
00007232 2438 F708                  		move.l	($FFFFF708).w,d2
00007236 2002                       		move.l	d2,d0
00007238 D084                       		add.l	d4,d0
0000723A 21C0 F708                  		move.l	d0,($FFFFF708).w
0000723E 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007242 2003                       		move.l	d3,d0
00007244 D085                       		add.l	d5,d0
00007246 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000724A 2200                       		move.l	d0,d1
0000724C 4841                       		swap	d1
0000724E 0241 0010                  		andi.w	#$10,d1
00007252 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007256 B501                       		eor.b	d2,d1
00007258 6600                       		bne.s	locret_6812
0000725A 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007260 9083                       		sub.l	d3,d0
00007262 6A00                       		bpl.s	loc_680C
00007264 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000726A 4E75                       		rts	
0000726C                            ; ===========================================================================
0000726C                            
0000726C                            loc_680C:
0000726C 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007272                            
00007272                            locret_6812:
00007272 4E75                       		rts	
00007274                            ; End of function ScrollBlock2
00007274                            
00007274                            
00007274                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007274                            
00007274                            
00007274                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00007274 3638 F70C                  		move.w	($FFFFF70C).w,d3
00007278 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000727C 3200                       		move.w	d0,d1
0000727E 0241 0010                  		andi.w	#$10,d1
00007282 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007286 B501                       		eor.b	d2,d1
00007288 6600                       		bne.s	locret_6842
0000728A 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007290 9043                       		sub.w	d3,d0
00007292 6A00                       		bpl.s	loc_683C
00007294 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000729A 4E75                       		rts	
0000729C                            ; ===========================================================================
0000729C                            
0000729C                            loc_683C:
0000729C 08F8 0001 F756             		bset	#1,($FFFFF756).w
000072A2                            
000072A2                            locret_6842:
000072A2 4E75                       		rts	
000072A4                            ; End of function ScrollBlock3
000072A4                            
000072A4                            
000072A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072A4                            
000072A4                            
000072A4                            ScrollBlock4:				; XREF: Deform_GHZ
000072A4 3438 F710                  		move.w	($FFFFF710).w,d2
000072A8 3638 F714                  		move.w	($FFFFF714).w,d3
000072AC 3038 F73A                  		move.w	($FFFFF73A).w,d0
000072B0 48C0                       		ext.l	d0
000072B2 EF80                       		asl.l	#7,d0
000072B4 D1B8 F710                  		add.l	d0,($FFFFF710).w
000072B8 3038 F710                  		move.w	($FFFFF710).w,d0
000072BC 0240 0010                  		andi.w	#$10,d0
000072C0 1238 F74E                  		move.b	($FFFFF74E).w,d1
000072C4 B300                       		eor.b	d1,d0
000072C6 6600                       		bne.s	locret_6884
000072C8 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
000072CE 3038 F710                  		move.w	($FFFFF710).w,d0
000072D2 9042                       		sub.w	d2,d0
000072D4 6A00                       		bpl.s	loc_687E
000072D6 08F8 0002 F758             		bset	#2,($FFFFF758).w
000072DC 6000                       		bra.s	locret_6884
000072DE                            ; ===========================================================================
000072DE                            
000072DE                            loc_687E:
000072DE 08F8 0003 F758             		bset	#3,($FFFFF758).w
000072E4                            
000072E4                            locret_6884:
000072E4 4E75                       		rts	
000072E6                            ; End of function ScrollBlock4
000072E6                            
000072E6                            
000072E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072E6                            
000072E6                            
000072E6                            sub_6886:				; XREF: loc_C44
000072E6 4BF9 00C0 0004             		lea	($C00004).l,a5
000072EC 4DF9 00C0 0000             		lea	($C00000).l,a6
000072F2 45F8 F756                  		lea	($FFFFF756).w,a2
000072F6 47F8 F708                  		lea	($FFFFF708).w,a3
000072FA 49F8 A440                  		lea	($FFFFA440).w,a4
000072FE 343C 6000                  		move.w	#$6000,d2
00007302 6100 0000                  		bsr.w	sub_6954
00007306 45F8 F758                  		lea	($FFFFF758).w,a2
0000730A 47F8 F710                  		lea	($FFFFF710).w,a3
0000730E 6000 0000                  		bra.w	sub_69F4
00007312                            ; End of function sub_6886
00007312                            
00007312                            ; ---------------------------------------------------------------------------
00007312                            ; Subroutine to	display	correct	tiles as you move
00007312                            ; ---------------------------------------------------------------------------
00007312                            
00007312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007312                            
00007312                            
00007312                            LoadTilesAsYouMove:			; XREF: Demo_Time
00007312 4BF9 00C0 0004             		lea	($C00004).l,a5
00007318 4DF9 00C0 0000             		lea	($C00000).l,a6
0000731E 45F8 FF32                  		lea	($FFFFFF32).w,a2
00007322 47F8 FF18                  		lea	($FFFFFF18).w,a3
00007326 49F8 A440                  		lea	($FFFFA440).w,a4
0000732A 343C 6000                  		move.w	#$6000,d2
0000732E 6100 0000                  		bsr.w	sub_6954
00007332 45F8 FF34                  		lea	($FFFFFF34).w,a2
00007336 47F8 FF20                  		lea	($FFFFFF20).w,a3
0000733A 6100 0000                  		bsr.w	sub_69F4
0000733E 45F8 FF30                  		lea	($FFFFFF30).w,a2
00007342 47F8 FF10                  		lea	($FFFFFF10).w,a3
00007346 49F8 A400                  		lea	($FFFFA400).w,a4
0000734A 343C 4000                  		move.w	#$4000,d2
0000734E 4A12                       		tst.b	(a2)
00007350 6700                       		beq.s	locret_6952
00007352 0892 0000                  		bclr	#0,(a2)
00007356 6700                       		beq.s	loc_6908
00007358 78F0                       		moveq	#-$10,d4
0000735A 7AF0                       		moveq	#-$10,d5
0000735C 6100 0000                  		bsr.w	sub_6C20
00007360 78F0                       		moveq	#-$10,d4
00007362 7AF0                       		moveq	#-$10,d5
00007364 6100 0000                  		bsr.w	sub_6AD8
00007368                            
00007368                            loc_6908:
00007368 0892 0001                  		bclr	#1,(a2)
0000736C 6700                       		beq.s	loc_6922
0000736E 383C 00E0                  		move.w	#$E0,d4
00007372 7AF0                       		moveq	#-$10,d5
00007374 6100 0000                  		bsr.w	sub_6C20
00007378 383C 00E0                  		move.w	#$E0,d4
0000737C 7AF0                       		moveq	#-$10,d5
0000737E 6100 0000                  		bsr.w	sub_6AD8
00007382                            
00007382                            loc_6922:
00007382 0892 0002                  		bclr	#2,(a2)
00007386 6700                       		beq.s	loc_6938
00007388 78F0                       		moveq	#-$10,d4
0000738A 7AF0                       		moveq	#-$10,d5
0000738C 6100 0000                  		bsr.w	sub_6C20
00007390 78F0                       		moveq	#-$10,d4
00007392 7AF0                       		moveq	#-$10,d5
00007394 6100 0000                  		bsr.w	sub_6B04
00007398                            
00007398                            loc_6938:
00007398 0892 0003                  		bclr	#3,(a2)
0000739C 6700                       		beq.s	locret_6952
0000739E 78F0                       		moveq	#-$10,d4
000073A0 3A3C 0140                  		move.w	#$140,d5
000073A4 6100 0000                  		bsr.w	sub_6C20
000073A8 78F0                       		moveq	#-$10,d4
000073AA 3A3C 0140                  		move.w	#$140,d5
000073AE 6100 0000                  		bsr.w	sub_6B04
000073B2                            
000073B2                            locret_6952:
000073B2 4E75                       		rts	
000073B4                            ; End of function LoadTilesAsYouMove
000073B4                            
000073B4                            
000073B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073B4                            
000073B4                            
000073B4                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
000073B4 4A12                       		tst.b	(a2)
000073B6 6700 0000                  		beq.w	locret_69F2
000073BA 0892 0000                  		bclr	#0,(a2)
000073BE 6700                       		beq.s	loc_6972
000073C0 78F0                       		moveq	#-$10,d4
000073C2 7AF0                       		moveq	#-$10,d5
000073C4 6100 0000                  		bsr.w	sub_6C20
000073C8 78F0                       		moveq	#-$10,d4
000073CA 7AF0                       		moveq	#-$10,d5
000073CC 7C1F                       		moveq	#$1F,d6
000073CE 6100 0000                  		bsr.w	sub_6ADA
000073D2                            
000073D2                            loc_6972:
000073D2 0892 0001                  		bclr	#1,(a2)
000073D6 6700                       		beq.s	loc_698E
000073D8 383C 00E0                  		move.w	#$E0,d4
000073DC 7AF0                       		moveq	#-$10,d5
000073DE 6100 0000                  		bsr.w	sub_6C20
000073E2 383C 00E0                  		move.w	#$E0,d4
000073E6 7AF0                       		moveq	#-$10,d5
000073E8 7C1F                       		moveq	#$1F,d6
000073EA 6100 0000                  		bsr.w	sub_6ADA
000073EE                            
000073EE                            loc_698E:
000073EE 0892 0002                  		bclr	#2,(a2)
000073F2 6700                       		beq.s	loc_69BE
000073F4 78F0                       		moveq	#-$10,d4
000073F6 7AF0                       		moveq	#-$10,d5
000073F8 6100 0000                  		bsr.w	sub_6C20
000073FC 78F0                       		moveq	#-$10,d4
000073FE 7AF0                       		moveq	#-$10,d5
00007400 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007404 322B 0004                  		move.w	4(a3),d1
00007408 0241 FFF0                  		andi.w	#-$10,d1
0000740C 9C41                       		sub.w	d1,d6
0000740E 6D00                       		blt.s	loc_69BE
00007410 E84E                       		lsr.w	#4,d6
00007412 0C46 000F                  		cmpi.w	#$F,d6
00007416 6500                       		bcs.s	loc_69BA
00007418 7C0F                       		moveq	#$F,d6
0000741A                            
0000741A                            loc_69BA:
0000741A 6100 0000                  		bsr.w	sub_6B06
0000741E                            
0000741E                            loc_69BE:
0000741E 0892 0003                  		bclr	#3,(a2)
00007422 6700                       		beq.s	locret_69F2
00007424 78F0                       		moveq	#-$10,d4
00007426 3A3C 0140                  		move.w	#$140,d5
0000742A 6100 0000                  		bsr.w	sub_6C20
0000742E 78F0                       		moveq	#-$10,d4
00007430 3A3C 0140                  		move.w	#$140,d5
00007434 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007438 322B 0004                  		move.w	4(a3),d1
0000743C 0241 FFF0                  		andi.w	#-$10,d1
00007440 9C41                       		sub.w	d1,d6
00007442 6D00                       		blt.s	locret_69F2
00007444 E84E                       		lsr.w	#4,d6
00007446 0C46 000F                  		cmpi.w	#$F,d6
0000744A 6500                       		bcs.s	loc_69EE
0000744C 7C0F                       		moveq	#$F,d6
0000744E                            
0000744E                            loc_69EE:
0000744E 6100 0000                  		bsr.w	sub_6B06
00007452                            
00007452                            locret_69F2:
00007452 4E75                       		rts	
00007454                            ; End of function sub_6954
00007454                            
00007454                            
00007454                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007454                            
00007454                            
00007454                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00007454 4A12                       		tst.b	(a2)
00007456 6700 0000                  		beq.w	locret_6A80
0000745A 0892 0002                  		bclr	#2,(a2)
0000745E 6700                       		beq.s	loc_6A3E
00007460 0C53 0010                  		cmpi.w	#$10,(a3)
00007464 6500                       		bcs.s	loc_6A3E
00007466 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000746A 322B 0004                  		move.w	4(a3),d1
0000746E 0241 FFF0                  		andi.w	#-$10,d1
00007472 9841                       		sub.w	d1,d4
00007474 3F04                       		move.w	d4,-(sp)
00007476 7AF0                       		moveq	#-$10,d5
00007478 6100 0000                  		bsr.w	sub_6C20
0000747C 381F                       		move.w	(sp)+,d4
0000747E 7AF0                       		moveq	#-$10,d5
00007480 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007484 322B 0004                  		move.w	4(a3),d1
00007488 0241 FFF0                  		andi.w	#-$10,d1
0000748C 9C41                       		sub.w	d1,d6
0000748E 6D00                       		blt.s	loc_6A3E
00007490 E84E                       		lsr.w	#4,d6
00007492 0446 000E                  		subi.w	#$E,d6
00007496 6400                       		bcc.s	loc_6A3E
00007498 4446                       		neg.w	d6
0000749A 6100 0000                  		bsr.w	sub_6B06
0000749E                            
0000749E                            loc_6A3E:
0000749E 0892 0003                  		bclr	#3,(a2)
000074A2 6700                       		beq.s	locret_6A80
000074A4 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000074A8 322B 0004                  		move.w	4(a3),d1
000074AC 0241 FFF0                  		andi.w	#-$10,d1
000074B0 9841                       		sub.w	d1,d4
000074B2 3F04                       		move.w	d4,-(sp)
000074B4 3A3C 0140                  		move.w	#$140,d5
000074B8 6100 0000                  		bsr.w	sub_6C20
000074BC 381F                       		move.w	(sp)+,d4
000074BE 3A3C 0140                  		move.w	#$140,d5
000074C2 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000074C6 322B 0004                  		move.w	4(a3),d1
000074CA 0241 FFF0                  		andi.w	#-$10,d1
000074CE 9C41                       		sub.w	d1,d6
000074D0 6D00                       		blt.s	locret_6A80
000074D2 E84E                       		lsr.w	#4,d6
000074D4 0446 000E                  		subi.w	#$E,d6
000074D8 6400                       		bcc.s	locret_6A80
000074DA 4446                       		neg.w	d6
000074DC 6100 0000                  		bsr.w	sub_6B06
000074E0                            
000074E0                            locret_6A80:
000074E0 4E75                       		rts	
000074E2                            ; End of function sub_69F4
000074E2                            
000074E2                            ; ===========================================================================
000074E2 4A12                       		tst.b	(a2)
000074E4 6700                       		beq.s	locret_6AD6
000074E6 0892 0002                  		bclr	#2,(a2)
000074EA 6700                       		beq.s	loc_6AAC
000074EC 383C 00D0                  		move.w	#$D0,d4
000074F0 322B 0004                  		move.w	4(a3),d1
000074F4 0241 FFF0                  		andi.w	#-$10,d1
000074F8 9841                       		sub.w	d1,d4
000074FA 3F04                       		move.w	d4,-(sp)
000074FC 7AF0                       		moveq	#-$10,d5
000074FE 6100 0000                  		bsr.w	sub_6C3C
00007502 381F                       		move.w	(sp)+,d4
00007504 7AF0                       		moveq	#-$10,d5
00007506 7C02                       		moveq	#2,d6
00007508 6100 0000                  		bsr.w	sub_6B06
0000750C                            
0000750C                            loc_6AAC:
0000750C 0892 0003                  		bclr	#3,(a2)
00007510 6700                       		beq.s	locret_6AD6
00007512 383C 00D0                  		move.w	#$D0,d4
00007516 322B 0004                  		move.w	4(a3),d1
0000751A 0241 FFF0                  		andi.w	#-$10,d1
0000751E 9841                       		sub.w	d1,d4
00007520 3F04                       		move.w	d4,-(sp)
00007522 3A3C 0140                  		move.w	#$140,d5
00007526 6100 0000                  		bsr.w	sub_6C3C
0000752A 381F                       		move.w	(sp)+,d4
0000752C 3A3C 0140                  		move.w	#$140,d5
00007530 7C02                       		moveq	#2,d6
00007532 6100 0000                  		bsr.w	sub_6B06
00007536                            
00007536                            locret_6AD6:
00007536 4E75                       		rts	
00007538                            
00007538                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007538                            
00007538                            
00007538                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00007538 7C15                       		moveq	#$15,d6
0000753A                            ; End of function sub_6AD8
0000753A                            
0000753A                            
0000753A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000753A                            
0000753A                            
0000753A                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
0000753A 2E3C 0080 0000             		move.l	#$800000,d7
00007540 2200                       		move.l	d0,d1
00007542                            
00007542                            loc_6AE2:
00007542 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007546 6100 0000                  		bsr.w	sub_6BD6
0000754A 2001                       		move.l	d1,d0
0000754C 6100 0000                  		bsr.w	sub_6B32
00007550 5801                       		addq.b	#4,d1
00007552 0201 007F                  		andi.b	#$7F,d1
00007556 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000755A 0645 0010                  		addi.w	#$10,d5
0000755E 51CE FFE2                  		dbf	d6,loc_6AE2
00007562 4E75                       		rts	
00007564                            ; End of function sub_6ADA
00007564                            
00007564                            
00007564                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007564                            
00007564                            
00007564                            sub_6B04:				; XREF: LoadTilesAsYouMove
00007564 7C0F                       		moveq	#$F,d6
00007566                            ; End of function sub_6B04
00007566                            
00007566                            
00007566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007566                            
00007566                            
00007566                            sub_6B06:				; XREF: sub_6954
00007566 2E3C 0080 0000             		move.l	#$800000,d7
0000756C 2200                       		move.l	d0,d1
0000756E                            
0000756E                            loc_6B0E:
0000756E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007572 6100 0000                  		bsr.w	sub_6BD6
00007576 2001                       		move.l	d1,d0
00007578 6100 0000                  		bsr.w	sub_6B32
0000757C 0641 0100                  		addi.w	#$100,d1
00007580 0241 0FFF                  		andi.w	#$FFF,d1
00007584 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007588 0644 0010                  		addi.w	#$10,d4
0000758C 51CE FFE0                  		dbf	d6,loc_6B0E
00007590 4E75                       		rts	
00007592                            ; End of function sub_6B06
00007592                            
00007592                            
00007592                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007592                            
00007592                            
00007592                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007592 8042                       		or.w	d2,d0
00007594 4840                       		swap	d0
00007596 0810 0004                  		btst	#4,(a0)
0000759A 6600                       		bne.s	loc_6B6E
0000759C 0810 0003                  		btst	#3,(a0)
000075A0 6600                       		bne.s	loc_6B4E
000075A2 2A80                       		move.l	d0,(a5)
000075A4 2C99                       		move.l	(a1)+,(a6)
000075A6 D087                       		add.l	d7,d0
000075A8 2A80                       		move.l	d0,(a5)
000075AA 2C99                       		move.l	(a1)+,(a6)
000075AC 4E75                       		rts	
000075AE                            ; ===========================================================================
000075AE                            
000075AE                            loc_6B4E:
000075AE 2A80                       		move.l	d0,(a5)
000075B0 2819                       		move.l	(a1)+,d4
000075B2 0A84 0800 0800             		eori.l	#$8000800,d4
000075B8 4844                       		swap	d4
000075BA 2C84                       		move.l	d4,(a6)
000075BC D087                       		add.l	d7,d0
000075BE 2A80                       		move.l	d0,(a5)
000075C0 2819                       		move.l	(a1)+,d4
000075C2 0A84 0800 0800             		eori.l	#$8000800,d4
000075C8 4844                       		swap	d4
000075CA 2C84                       		move.l	d4,(a6)
000075CC 4E75                       		rts	
000075CE                            ; ===========================================================================
000075CE                            
000075CE                            loc_6B6E:
000075CE 0810 0003                  		btst	#3,(a0)
000075D2 6600                       		bne.s	loc_6B90
000075D4 2A80                       		move.l	d0,(a5)
000075D6 2A19                       		move.l	(a1)+,d5
000075D8 2819                       		move.l	(a1)+,d4
000075DA 0A84 1000 1000             		eori.l	#$10001000,d4
000075E0 2C84                       		move.l	d4,(a6)
000075E2 D087                       		add.l	d7,d0
000075E4 2A80                       		move.l	d0,(a5)
000075E6 0A85 1000 1000             		eori.l	#$10001000,d5
000075EC 2C85                       		move.l	d5,(a6)
000075EE 4E75                       		rts	
000075F0                            ; ===========================================================================
000075F0                            
000075F0                            loc_6B90:
000075F0 2A80                       		move.l	d0,(a5)
000075F2 2A19                       		move.l	(a1)+,d5
000075F4 2819                       		move.l	(a1)+,d4
000075F6 0A84 1800 1800             		eori.l	#$18001800,d4
000075FC 4844                       		swap	d4
000075FE 2C84                       		move.l	d4,(a6)
00007600 D087                       		add.l	d7,d0
00007602 2A80                       		move.l	d0,(a5)
00007604 0A85 1800 1800             		eori.l	#$18001800,d5
0000760A 4845                       		swap	d5
0000760C 2C85                       		move.l	d5,(a6)
0000760E 4E75                       		rts	
00007610                            ; End of function sub_6B32
00007610                            
00007610                            ; ===========================================================================
00007610 4E75                       		rts	
00007612                            ; ===========================================================================
00007612 2A80                       		move.l	d0,(a5)
00007614 3A3C 2000                  		move.w	#$2000,d5
00007618 3819                       		move.w	(a1)+,d4
0000761A D845                       		add.w	d5,d4
0000761C 3C84                       		move.w	d4,(a6)
0000761E 3819                       		move.w	(a1)+,d4
00007620 D845                       		add.w	d5,d4
00007622 3C84                       		move.w	d4,(a6)
00007624 D087                       		add.l	d7,d0
00007626 2A80                       		move.l	d0,(a5)
00007628 3819                       		move.w	(a1)+,d4
0000762A D845                       		add.w	d5,d4
0000762C 3C84                       		move.w	d4,(a6)
0000762E 3819                       		move.w	(a1)+,d4
00007630 D845                       		add.w	d5,d4
00007632 3C84                       		move.w	d4,(a6)
00007634 4E75                       		rts	
00007636                            
00007636                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007636                            
00007636                            
00007636                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007636 43F8 B000                  		lea	($FFFFB000).w,a1
0000763A D86B 0004                  		add.w	4(a3),d4
0000763E DA53                       		add.w	(a3),d5
00007640 3604                       		move.w	d4,d3
00007642 E24B                       		lsr.w	#1,d3
00007644 0243 0380                  		andi.w	#$380,d3
00007648 E64D                       		lsr.w	#3,d5
0000764A 3005                       		move.w	d5,d0
0000764C EA48                       		lsr.w	#5,d0
0000764E 0240 007F                  		andi.w	#$7F,d0
00007652 D043                       		add.w	d3,d0
00007654 76FF                       		moveq	#-1,d3
00007656 1634 0000                  		move.b	(a4,d0.w),d3
0000765A 6700                       		beq.s	locret_6C1E
0000765C 5303                       		subq.b	#1,d3
0000765E 0243 007F                  		andi.w	#$7F,d3
00007662 EE5B                       		ror.w	#7,d3
00007664 D844                       		add.w	d4,d4
00007666 0244 01E0                  		andi.w	#$1E0,d4
0000766A 0245 001E                  		andi.w	#$1E,d5
0000766E D644                       		add.w	d4,d3
00007670 D645                       		add.w	d5,d3
00007672 2043                       		movea.l	d3,a0
00007674 3610                       		move.w	(a0),d3
00007676 0243 03FF                  		andi.w	#$3FF,d3
0000767A E74B                       		lsl.w	#3,d3
0000767C D2C3                       		adda.w	d3,a1
0000767E                            
0000767E                            locret_6C1E:
0000767E 4E75                       		rts	
00007680                            ; End of function sub_6BD6
00007680                            
00007680                            
00007680                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007680                            
00007680                            
00007680                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007680 D86B 0004                  		add.w	4(a3),d4
00007684 DA53                       		add.w	(a3),d5
00007686 0244 00F0                  		andi.w	#$F0,d4
0000768A 0245 01F0                  		andi.w	#$1F0,d5
0000768E E94C                       		lsl.w	#4,d4
00007690 E44D                       		lsr.w	#2,d5
00007692 D845                       		add.w	d5,d4
00007694 7003                       		moveq	#3,d0
00007696 4840                       		swap	d0
00007698 3004                       		move.w	d4,d0
0000769A 4E75                       		rts	
0000769C                            ; End of function sub_6C20
0000769C                            
0000769C                            
0000769C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000769C                            ; not used
0000769C                            
0000769C                            
0000769C                            sub_6C3C:
0000769C D86B 0004                  		add.w	4(a3),d4
000076A0 DA53                       		add.w	(a3),d5
000076A2 0244 00F0                  		andi.w	#$F0,d4
000076A6 0245 01F0                  		andi.w	#$1F0,d5
000076AA E94C                       		lsl.w	#4,d4
000076AC E44D                       		lsr.w	#2,d5
000076AE D845                       		add.w	d5,d4
000076B0 7002                       		moveq	#2,d0
000076B2 4840                       		swap	d0
000076B4 3004                       		move.w	d4,d0
000076B6 4E75                       		rts	
000076B8                            ; End of function sub_6C3C
000076B8                            
000076B8                            ; ---------------------------------------------------------------------------
000076B8                            ; Subroutine to	load tiles as soon as the level	appears
000076B8                            ; ---------------------------------------------------------------------------
000076B8                            
000076B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076B8                            
000076B8                            
000076B8                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000076B8 4BF9 00C0 0004             		lea	($C00004).l,a5
000076BE 4DF9 00C0 0000             		lea	($C00000).l,a6
000076C4 47F8 F700                  		lea	($FFFFF700).w,a3
000076C8 49F8 A400                  		lea	($FFFFA400).w,a4
000076CC 343C 4000                  		move.w	#$4000,d2
000076D0 6100                       		bsr.s	LoadTilesFromStart2
000076D2 47F8 F708                  		lea	($FFFFF708).w,a3
000076D6 49F8 A440                  		lea	($FFFFA440).w,a4
000076DA 343C 6000                  		move.w	#$6000,d2
000076DE                            ; End of function LoadTilesFromStart
000076DE                            
000076DE                            
000076DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076DE                            
000076DE                            
000076DE                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000076DE 78F0                       		moveq	#-$10,d4
000076E0 7C0F                       		moveq	#$F,d6
000076E2                            
000076E2                            loc_6C82:
000076E2 48E7 0E00                  		movem.l	d4-d6,-(sp)
000076E6 7A00                       		moveq	#0,d5
000076E8 3204                       		move.w	d4,d1
000076EA 6100 FF94                  		bsr.w	sub_6C20
000076EE 3801                       		move.w	d1,d4
000076F0 7A00                       		moveq	#0,d5
000076F2 7C1F                       		moveq	#$1F,d6
000076F4 6100 FE44                  		bsr.w	sub_6ADA
000076F8 4CDF 0070                  		movem.l	(sp)+,d4-d6
000076FC 0644 0010                  		addi.w	#$10,d4
00007700 51CE FFE0                  		dbf	d6,loc_6C82
00007704 4E75                       		rts	
00007706                            ; End of function LoadTilesFromStart2
00007706                            
00007706                            ; ---------------------------------------------------------------------------
00007706                            ; Main Load Block loading subroutine
00007706                            ; ---------------------------------------------------------------------------
00007706                            
00007706                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007706                            
00007706                            
00007706                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007706 7000                       		moveq	#0,d0
00007708 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000770C E948                       		lsl.w	#4,d0
0000770E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007714 45F2 0000                  		lea	(a2,d0.w),a2
00007718 2F0A                       		move.l	a2,-(sp)
0000771A 588A                       		addq.l	#4,a2
0000771C 205A                       		movea.l	(a2)+,a0
0000771E 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007722 303C 0000                  		move.w	#0,d0
00007726 6100 A246                  		bsr.w	EniDec
0000772A 205A                       		movea.l	(a2)+,a0
0000772C 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007732 6100 A3B8                  		bsr.w	KosDec
00007736 6100 0000                  		bsr.w	LevelLayoutLoad
0000773A 301A                       		move.w	(a2)+,d0
0000773C 3012                       		move.w	(a2),d0
0000773E 0240 00FF                  		andi.w	#$FF,d0
00007742 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007748 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
0000774A 700C                       		moveq	#$C,d0		; use SB3 pallet
0000774C                            
0000774C                            MLB_ChkSBZPal:
0000774C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007752 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007754 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000775A 6600                       		bne.s	MLB_NormalPal	; if not, branch
0000775C                            
0000775C                            MLB_UsePal0E:
0000775C 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000775E                            
0000775E                            MLB_NormalPal:
0000775E 6100 ABB8                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007762 245F                       		movea.l	(sp)+,a2
00007764 584A                       		addq.w	#4,a2
00007766 7000                       		moveq	#0,d0
00007768 1012                       		move.b	(a2),d0
0000776A 6700                       		beq.s	locret_6D10
0000776C 6100 A062                  		bsr.w	LoadPLC		; load pattern load cues
00007770                            
00007770                            locret_6D10:
00007770 4E75                       		rts	
00007772                            ; End of function MainLoadBlockLoad
00007772                            
00007772                            ; ---------------------------------------------------------------------------
00007772                            ; Level	layout loading subroutine
00007772                            ; ---------------------------------------------------------------------------
00007772                            
00007772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007772                            
00007772                            
00007772                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007772 47F8 A400                  		lea	($FFFFA400).w,a3
00007776 323C 01FF                  		move.w	#$1FF,d1
0000777A 7000                       		moveq	#0,d0
0000777C                            
0000777C                            LevLoad_ClrRam:
0000777C 26C0                       		move.l	d0,(a3)+
0000777E 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007782                            
00007782 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007786 7200                       		moveq	#0,d1
00007788 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
0000778C 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007790 7202                       		moveq	#2,d1
00007792                            ; End of function LevelLayoutLoad
00007792                            
00007792                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007792                            
00007792                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007792                            
00007792                            
00007792                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007792 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007796 ED08                       		lsl.b	#6,d0
00007798 EA48                       		lsr.w	#5,d0
0000779A 3400                       		move.w	d0,d2
0000779C D040                       		add.w	d0,d0
0000779E D042                       		add.w	d2,d0
000077A0 D041                       		add.w	d1,d0
000077A2 43F9 0000 0000             		lea	(Level_Index).l,a1
000077A8 3031 0000                  		move.w	(a1,d0.w),d0
000077AC 43F1 0000                  		lea	(a1,d0.w),a1
000077B0 7200                       		moveq	#0,d1
000077B2 3401                       		move.w	d1,d2
000077B4 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000077B6 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000077B8                            
000077B8                            LevLoad_NumRows:
000077B8 3001                       		move.w	d1,d0
000077BA 204B                       		movea.l	a3,a0
000077BC                            
000077BC                            LevLoad_Row:
000077BC 10D9                       		move.b	(a1)+,(a0)+
000077BE 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000077C2 47EB 0080                  		lea	$80(a3),a3	; do next row
000077C6 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000077CA 4E75                       		rts	
000077CC                            ; End of function LevelLayoutLoad2
000077CC                            
000077CC                            ; ---------------------------------------------------------------------------
000077CC                            ; Dynamic screen resize	loading	subroutine
000077CC                            ; ---------------------------------------------------------------------------
000077CC                            
000077CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077CC                            
000077CC                            
000077CC                            DynScrResizeLoad:			; XREF: DeformBgLayer
000077CC 7000                       		moveq	#0,d0
000077CE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000077D2 D040                       		add.w	d0,d0
000077D4 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000077D8 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000077DC 7202                       		moveq	#2,d1
000077DE 3038 F726                  		move.w	($FFFFF726).w,d0
000077E2 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000077E6 6700                       		beq.s	locret_6DAA
000077E8 6400                       		bcc.s	loc_6DAC
000077EA 4441                       		neg.w	d1
000077EC 3038 F704                  		move.w	($FFFFF704).w,d0
000077F0 B078 F726                  		cmp.w	($FFFFF726).w,d0
000077F4 6300                       		bls.s	loc_6DA0
000077F6 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000077FA 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007800                            
00007800                            loc_6DA0:
00007800 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007804 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000780A                            
0000780A                            locret_6DAA:
0000780A 4E75                       		rts	
0000780C                            ; ===========================================================================
0000780C                            
0000780C                            loc_6DAC:				; XREF: DynScrResizeLoad
0000780C 3038 F704                  		move.w	($FFFFF704).w,d0
00007810 5040                       		addq.w	#8,d0
00007812 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007816 6500                       		bcs.s	loc_6DC4
00007818 0838 0001 D022             		btst	#1,($FFFFD022).w
0000781E 6700                       		beq.s	loc_6DC4
00007820 D241                       		add.w	d1,d1
00007822 D241                       		add.w	d1,d1
00007824                            
00007824                            loc_6DC4:
00007824 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007828 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000782E 4E75                       		rts	
00007830                            ; End of function DynScrResizeLoad
00007830                            
00007830                            ; ===========================================================================
00007830                            ; ---------------------------------------------------------------------------
00007830                            ; Offset index for dynamic screen resizing
00007830                            ; ---------------------------------------------------------------------------
00007830 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007834 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007838 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
0000783C 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_GHZ-Resize_Index
00007840                            ; ===========================================================================
00007840                            ; ---------------------------------------------------------------------------
00007840                            ; Green	Hill Zone dynamic screen resizing
00007840                            ; ---------------------------------------------------------------------------
00007840                            
00007840                            Resize_GHZ:				; XREF: Resize_Index
00007840 7000                       		moveq	#0,d0
00007842 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007846 D040                       		add.w	d0,d0
00007848 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
0000784C 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007850                            ; ===========================================================================
00007850 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007852 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007854 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007856                            ; ===========================================================================
00007856                            
00007856                            Resize_GHZ1:
00007856 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
0000785C 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007862 6500                       		bcs.s	locret_6E08	; if not, branch
00007864 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
0000786A                            
0000786A                            locret_6E08:
0000786A 4E75                       		rts	
0000786C                            ; ===========================================================================
0000786C                            
0000786C                            Resize_GHZ2:
0000786C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007872 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007878 6500                       		bcs.s	locret_6E3A
0000787A 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007880 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007886 6500                       		bcs.s	locret_6E3A
00007888 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000788E 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
00007894 6500                       		bcs.s	locret_6E3A
00007896 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
0000789C 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
000078A2 6500                       		bcs.s	locret_6E3A
000078A4 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
000078AA                            		
000078AA                            locret_6E3A:
000078AA 4E75                       		rts	
000078AC                            ; ===========================================================================
000078AC                            
000078AC                            Resize_GHZ3:
000078AC 7000                       		moveq	#0,d0
000078AE 1038 F742                  		move.b	($FFFFF742).w,d0
000078B2 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000078B6 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000078BA                            ; ===========================================================================
000078BA 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000078BC 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000078BE 0000                       		dc.w Resize_GHZ3end-off_6E4A
000078C0                            ; ===========================================================================
000078C0                            
000078C0                            Resize_GHZ3main:
000078C0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000078C6 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000078CC 6500                       		bcs.s	locret_6E96
000078CE 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000078D4 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000078DA 6500                       		bcs.s	locret_6E96
000078DC 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000078E2 6500                       		bcs.s	loc_6E98
000078E4 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000078EA 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000078F0 6400                       		bcc.s	loc_6E8E
000078F2 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000078F8 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000078FE                            
000078FE                            loc_6E8E:
000078FE 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007904 6400                       		bcc.s	loc_6E98
00007906                            
00007906                            locret_6E96:
00007906 4E75                       		rts	
00007908                            ; ===========================================================================
00007908                            
00007908                            loc_6E98:
00007908 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000790E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007912 4E75                       		rts	
00007914                            ; ===========================================================================
00007914                            
00007914                            Resize_GHZ3boss:
00007914 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000791A 6400                       		bcc.s	loc_6EB0
0000791C 5538 F742                  		subq.b	#2,($FFFFF742).w
00007920                            
00007920                            loc_6EB0:
00007920 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007926 6500                       		bcs.s	locret_6EE8
00007928 6100 0000                  		bsr.w	SingleObjLoad
0000792C 6600                       		bne.s	loc_6ED0
0000792E 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007932 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007938 337C 0280 000C             		move.w	#$280,$C(a1)
0000793E                            
0000793E                            loc_6ED0:
0000793E 303C 008C                  		move.w	#$8C,d0
00007942 6100 9CA2                  		bsr.w	PlaySound	; play boss music
00007946 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000794C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007950 7011                       		moveq	#$11,d0
00007952 6000 9E7C                  		bra.w	LoadPLC		; load boss patterns
00007956                            ; ===========================================================================
00007956                            
00007956                            locret_6EE8:
00007956 4E75                       		rts	
00007958                            ; ===========================================================================
00007958                            
00007958                            Resize_GHZ3end:
00007958 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000795E 4E75                       		rts	
00007960                            ; ===========================================================================
00007960                            ; ---------------------------------------------------------------------------
00007960                            ; Labyrinth Zone dynamic screen	resizing
00007960                            ; ---------------------------------------------------------------------------
00007960                            
00007960                            Resize_LZ:				; XREF: Resize_Index
00007960 7000                       		moveq	#0,d0
00007962 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007966 D040                       		add.w	d0,d0
00007968 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000796C 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007970                            ; ===========================================================================
00007970 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007972 0000                       		dc.w Resize_LZ12-Resize_LZx
00007974 0000                       		dc.w Resize_LZ3-Resize_LZx
00007976 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007978                            ; ===========================================================================
00007978                            
00007978                            Resize_LZ12:
00007978 4E75                       		rts	
0000797A                            ; ===========================================================================
0000797A                            
0000797A                            Resize_LZ3:
0000797A 7000                       		moveq	#0,d0
0000797C 1038 F742                  		move.b	($FFFFF742).w,d0
00007980 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
00007984 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
00007988                            ; ===========================================================================
00007988                            off_6E4A2:	
00007988 0000                       		dc.w Resize_LZ3boss-off_6E4A2
0000798A 0000                       		dc.w Resize_LZ3end-off_6E4A2
0000798C                            ; ===========================================================================
0000798C                            Resize_LZ3boss:
0000798C 4A38 F742                  		tst.b	($FFFFF742).w
00007990 6600                       		bne.s	locret_6F62
00007992 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007998 6500                       		bcs.s	locret_6F62
0000799A 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
000079A0 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000079A6                            
000079A6 6100 0000                  		bsr.w	SingleObjLoad
000079AA 6600                       		bne.s	loc_6F4A
000079AC 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000079B0 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
000079B6 337C 06E0 000C             		move.w	#$6E0,$C(a1)
000079BC                            loc_6F4A:
000079BC 303C 008C                  		move.w	#$8C,d0
000079C0 6100 9C24                  		bsr.w	PlaySound	; play boss music
000079C4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000079CA 5438 F742                  		addq.b	#2,($FFFFF742).w
000079CE 7022                       		moveq	#$22,d0
000079D0 6000 9DFE                  		bra.w	LoadPLC		; load boss patterns
000079D4                            ; ===========================================================================
000079D4                            
000079D4                            locret_6F62:
000079D4 4E75                       		rts	
000079D6                            ; ===========================================================================
000079D6                            
000079D6                            Resize_LZ3end:
000079D6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000079DC 4E75                       		rts	
000079DE                            ; ===========================================================================
000079DE                            
000079DE                            Resize_SBZ3:
000079DE 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000079E4 6500                       		bcs.s	locret_6F8C
000079E6 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000079EC 6400                       		bcc.s	locret_6F8C	; if not, branch
000079EE 4238 FE30                  		clr.b	($FFFFFE30).w
000079F2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000079F8 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000079FE 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007A04                            
00007A04                            locret_6F8C:
00007A04 4E75                       		rts	
00007A06                            ; ===========================================================================
00007A06                            ; ---------------------------------------------------------------------------
00007A06                            ; Marble Zone dynamic screen resizing
00007A06                            ; ---------------------------------------------------------------------------
00007A06                            
00007A06                            Resize_MZ:				; XREF: Resize_Index
00007A06 7000                       		moveq	#0,d0
00007A08 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007A0C D040                       		add.w	d0,d0
00007A0E 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007A12 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007A16                            ; ===========================================================================
00007A16 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007A18 0000                       		dc.w Resize_MZ2-Resize_MZx
00007A1A 0000                       		dc.w Resize_MZ3-Resize_MZx
00007A1C                            ; ===========================================================================
00007A1C                            
00007A1C                            Resize_MZ1:
00007A1C 7000                       		moveq	#0,d0
00007A1E 1038 F742                  		move.b	($FFFFF742).w,d0
00007A22 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007A26 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007A2A                            ; ===========================================================================
00007A2A 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007A2C 0000                       		dc.w loc_6FEA-off_6FB2
00007A2E 0000                       		dc.w loc_702E-off_6FB2
00007A30 0000                       		dc.w loc_7050-off_6FB2
00007A32                            ; ===========================================================================
00007A32                            
00007A32                            loc_6FBA:
00007A32 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007A38 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007A3E 6500                       		bcs.s	locret_6FE8
00007A40 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007A46 0C78 09A0 F700             		cmpi.w	#$9A0,($FFFFF700).w
00007A4C 6500                       		bcs.s	locret_6FE8
00007A4E 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007A54 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007A5A 6500                       		bcs.s	locret_6FE8
00007A5C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A60                            
00007A60                            locret_6FE8:
00007A60 4E75                       		rts	
00007A62                            ; ===========================================================================
00007A62                            
00007A62                            loc_6FEA:
00007A62 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007A68 6400                       		bcc.s	loc_6FF8
00007A6A 5538 F742                  		subq.b	#2,($FFFFF742).w
00007A6E 4E75                       		rts	
00007A70                            ; ===========================================================================
00007A70                            
00007A70                            loc_6FF8:
00007A70 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007A76 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007A7C 6400                       		bcc.s	locret_702C
00007A7E 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007A84 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007A8A 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007A90 6400                       		bcc.s	locret_702C
00007A92 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007A98 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007A9E 6500                       		bcs.s	locret_702C
00007AA0 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AA4                            
00007AA4                            locret_702C:
00007AA4 4E75                       		rts	
00007AA6                            ; ===========================================================================
00007AA6                            
00007AA6                            loc_702E:
00007AA6 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007AAC 6400                       		bcc.s	loc_703C
00007AAE 5538 F742                  		subq.b	#2,($FFFFF742).w
00007AB2 4E75                       		rts	
00007AB4                            ; ===========================================================================
00007AB4                            
00007AB4                            loc_703C:
00007AB4 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007ABA 6500                       		bcs.s	locret_704E
00007ABC 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007AC2 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AC6                            
00007AC6                            locret_704E:
00007AC6 4E75                       		rts	
00007AC8                            ; ===========================================================================
00007AC8                            
00007AC8                            loc_7050:
00007AC8 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007ACE 6500                       		bcs.s	locret_7072
00007AD0 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007AD6 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007ADC 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007AE2 6500                       		bcs.s	locret_7072
00007AE4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007AEA                            
00007AEA                            locret_7072:
00007AEA 4E75                       		rts	
00007AEC                            ; ===========================================================================
00007AEC                            
00007AEC                            Resize_MZ2:
00007AEC 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007AF2 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007AF8 6500                       		bcs.s	locret_7088
00007AFA 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007B00                            
00007B00                            locret_7088:
00007B00 4E75                       		rts	
00007B02                            ; ===========================================================================
00007B02                            
00007B02                            Resize_MZ3:
00007B02 7000                       		moveq	#0,d0
00007B04 1038 F742                  		move.b	($FFFFF742).w,d0
00007B08 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007B0C 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007B10                            ; ===========================================================================
00007B10 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007B12 0000                       		dc.w Resize_MZ3end-off_7098
00007B14                            ; ===========================================================================
00007B14                            
00007B14                            Resize_MZ3boss:
00007B14 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007B1A 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007B20 6500                       		bcs.s	locret_70E8
00007B22 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007B28 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007B2E 6500                       		bcs.s	locret_70E8
00007B30 6100 0000                  		bsr.w	SingleObjLoad
00007B34 6600                       		bne.s	loc_70D0
00007B36 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007B3A 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007B40 337C 022C 000C             		move.w	#$22C,$C(a1)
00007B46                            
00007B46                            loc_70D0:
00007B46 303C 008C                  		move.w	#$8C,d0
00007B4A 6100 9A9A                  		bsr.w	PlaySound	; play boss music
00007B4E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007B54 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B58 7011                       		moveq	#$11,d0
00007B5A 6000 9C74                  		bra.w	LoadPLC		; load boss patterns
00007B5E                            ; ===========================================================================
00007B5E                            
00007B5E                            locret_70E8:
00007B5E 4E75                       		rts	
00007B60                            ; ===========================================================================
00007B60                            
00007B60                            Resize_MZ3end:
00007B60 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007B66 4E75                       		rts	
00007B68                            ; ===========================================================================
00007B68                            ; ---------------------------------------------------------------------------
00007B68                            ; Star Light Zone dynamic screen resizing
00007B68                            ; ---------------------------------------------------------------------------
00007B68                            
00007B68                            Resize_SLZ:				; XREF: Resize_Index
00007B68 7000                       		moveq	#0,d0
00007B6A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007B6E D040                       		add.w	d0,d0
00007B70 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007B74 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007B78                            ; ===========================================================================
00007B78 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
00007B7A 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00007B7C 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007B7E                            ; ===========================================================================
00007B7E                            
00007B7E                            Resize_SLZ1:
00007B7E 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
00007B84 4E75                       		rts	
00007B86                            
00007B86                            Resize_SLZ2:
00007B86 4E75                       		rts	
00007B88                            ; ===========================================================================
00007B88                            
00007B88                            Resize_SLZ3:
00007B88 7000                       		moveq	#0,d0
00007B8A 1038 F742                  		move.b	($FFFFF742).w,d0
00007B8E 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007B92 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007B96                            ; ===========================================================================
00007B96 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007B98 0000                       		dc.w Resize_SLZ3boss-off_7118
00007B9A 0000                       		dc.w Resize_SLZ3end-off_7118
00007B9C                            ; ===========================================================================
00007B9C                            
00007B9C                            Resize_SLZ3main:
00007B9C 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007BA2 6500                       		bcs.s	locret_7130
00007BA4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007BAA 5438 F742                  		addq.b	#2,($FFFFF742).w
00007BAE                            
00007BAE                            locret_7130:
00007BAE 4E75                       		rts	
00007BB0                            ; ===========================================================================
00007BB0                            
00007BB0                            Resize_SLZ3boss:
00007BB0 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007BB6 6500                       		bcs.s	locret_715C
00007BB8 6100 0000                  		bsr.w	SingleObjLoad
00007BBC 6600                       		bne.s	loc_7144
00007BBE 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007BC2                            
00007BC2                            loc_7144:
00007BC2 303C 008C                  		move.w	#$8C,d0
00007BC6 6100 9A1E                  		bsr.w	PlaySound	; play boss music
00007BCA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007BD0 5438 F742                  		addq.b	#2,($FFFFF742).w
00007BD4 7011                       		moveq	#$11,d0
00007BD6 6000 9BF8                  		bra.w	LoadPLC		; load boss patterns
00007BDA                            ; ===========================================================================
00007BDA                            
00007BDA                            locret_715C:
00007BDA 4E75                       		rts	
00007BDC                            ; ===========================================================================
00007BDC                            
00007BDC                            Resize_SLZ3end:
00007BDC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007BE2 4E75                       		rts
00007BE4 4E75                       		rts
00007BE6                            ; ===========================================================================
00007BE6                            ; ---------------------------------------------------------------------------
00007BE6                            ; Spring Yard Zone dynamic screen resizing
00007BE6                            ; ---------------------------------------------------------------------------
00007BE6                            
00007BE6                            Resize_SYZ:				; XREF: Resize_Index
00007BE6 7000                       		moveq	#0,d0
00007BE8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007BEC D040                       		add.w	d0,d0
00007BEE 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007BF2 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007BF6                            ; ===========================================================================
00007BF6 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007BF8 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007BFA 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007BFC                            ; ===========================================================================
00007BFC                            
00007BFC                            Resize_SYZ1:
00007BFC 4E75                       		rts	
00007BFE                            ; ===========================================================================
00007BFE                            
00007BFE                            Resize_SYZ2:
00007BFE 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007C04 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007C0A 6500                       		bcs.s	locret_71A2
00007C0C 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007C12 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007C18 6500                       		bcs.s	locret_71A2
00007C1A 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007C20                            
00007C20                            locret_71A2:
00007C20 4E75                       		rts	
00007C22                            ; ===========================================================================
00007C22                            
00007C22                            Resize_SYZ3:
00007C22 7000                       		moveq	#0,d0
00007C24 1038 F742                  		move.b	($FFFFF742).w,d0
00007C28 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007C2C 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007C30                            ; ===========================================================================
00007C30 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007C32 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007C34 0000                       		dc.w Resize_SYZ3end-off_71B2
00007C36                            ; ===========================================================================
00007C36                            
00007C36                            Resize_SYZ3main:
00007C36 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007C3C 6500                       		bcs.s	locret_71CE
00007C3E 6100 0000                  		bsr.w	SingleObjLoad
00007C42 6600                       		bne.s	locret_71CE
00007C44 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007C48 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C4C                            
00007C4C                            locret_71CE:
00007C4C 4E75                       		rts	
00007C4E                            ; ===========================================================================
00007C4E                            
00007C4E                            Resize_SYZ3boss:
00007C4E 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007C54 6500                       		bcs.s	locret_7200
00007C56 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007C5C 6100 0000                  		bsr.w	SingleObjLoad
00007C60 6600                       		bne.s	loc_71EC
00007C62 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007C66 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C6A                            
00007C6A                            loc_71EC:
00007C6A 303C 008C                  		move.w	#$8C,d0
00007C6E 6100 9976                  		bsr.w	PlaySound	; play boss music
00007C72 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007C78 7011                       		moveq	#$11,d0
00007C7A 6000 9B54                  		bra.w	LoadPLC		; load boss patterns
00007C7E                            ; ===========================================================================
00007C7E                            
00007C7E                            locret_7200:
00007C7E 4E75                       		rts	
00007C80                            ; ===========================================================================
00007C80                            
00007C80                            Resize_SYZ3end:
00007C80 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007C86 4E75                       		rts	
00007C88                            ; ===========================================================================
00007C88                            ; ---------------------------------------------------------------------------
00007C88                            ; Scrap	Brain Zone dynamic screen resizing
00007C88                            ; ---------------------------------------------------------------------------
00007C88                            
00007C88                            Resize_SBZ:				; XREF: Resize_Index
00007C88 7000                       		moveq	#0,d0
00007C8A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007C8E D040                       		add.w	d0,d0
00007C90 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007C94 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007C98                            ; ===========================================================================
00007C98 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007C9A 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007C9C 0000                       		dc.w Resize_FZ-Resize_SBZx
00007C9E                            ; ===========================================================================
00007C9E                            
00007C9E                            Resize_SBZ1:
00007C9E 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007CA4 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007CAA 6500                       		bcs.s	locret_7242
00007CAC 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007CB2 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007CB8 6500                       		bcs.s	locret_7242
00007CBA 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007CC0                            
00007CC0                            locret_7242:
00007CC0 4E75                       		rts	
00007CC2                            ; ===========================================================================
00007CC2                            
00007CC2                            Resize_SBZ2:
00007CC2 7000                       		moveq	#0,d0
00007CC4 1038 F742                  		move.b	($FFFFF742).w,d0
00007CC8 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007CCC 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007CD0                            ; ===========================================================================
00007CD0 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007CD2 0000                       		dc.w Resize_SBZ2boss-off_7252
00007CD4 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007CD6 0000                       		dc.w Resize_SBZ2end-off_7252
00007CD8                            ; ===========================================================================
00007CD8                            
00007CD8                            Resize_SBZ2main:
00007CD8 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007CDE 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007CE4 6500                       		bcs.s	locret_727A
00007CE6 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007CEC 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007CF2 6500                       		bcs.s	locret_727A
00007CF4 5438 F742                  		addq.b	#2,($FFFFF742).w
00007CF8                            
00007CF8                            locret_727A:
00007CF8 4E75                       		rts	
00007CFA                            ; ===========================================================================
00007CFA                            
00007CFA                            Resize_SBZ2boss:
00007CFA 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007D00 6500                       		bcs.s	locret_7298
00007D02 6100 0000                  		bsr.w	SingleObjLoad
00007D06 6600                       		bne.s	locret_7298
00007D08 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007D0C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D10 701E                       		moveq	#$1E,d0
00007D12 6000 9ABC                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007D16                            ; ===========================================================================
00007D16                            
00007D16                            locret_7298:
00007D16 4E75                       		rts	
00007D18                            ; ===========================================================================
00007D18                            
00007D18                            Resize_SBZ2boss2:
00007D18 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007D1E 6500                       		bcs.s	loc_72B6
00007D20 6100 0000                  		bsr.w	SingleObjLoad
00007D24 6600                       		bne.s	loc_72B0
00007D26 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007D2A 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D2E                            
00007D2E                            loc_72B0:
00007D2E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007D34                            
00007D34                            loc_72B6:
00007D34 6000                       		bra.s	loc_72C2
00007D36                            ; ===========================================================================
00007D36                            
00007D36                            Resize_SBZ2end:
00007D36 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007D3C 6500                       		bcs.s	loc_72C2
00007D3E 4E75                       		rts	
00007D40                            ; ===========================================================================
00007D40                            
00007D40                            loc_72C2:
00007D40 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007D46 4E75                       		rts	
00007D48                            ; ===========================================================================
00007D48                            
00007D48                            Resize_FZ:
00007D48 7000                       		moveq	#0,d0
00007D4A 1038 F742                  		move.b	($FFFFF742).w,d0
00007D4E 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007D52 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007D56                            ; ===========================================================================
00007D56 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007D5A 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007D5E 0000                       		dc.w Resize_FZend2-off_72D8
00007D60                            ; ===========================================================================
00007D60                            
00007D60                            Resize_FZmain:
00007D60 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007D66 6500                       		bcs.s	loc_72F4
00007D68 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D6C 701F                       		moveq	#$1F,d0
00007D6E 6100 9A60                  		bsr.w	LoadPLC		; load FZ boss patterns
00007D72 103C 00E0                  		move.b	#$E0,d0		; fade song
00007D76 4EB8 15EC                  		jsr	PlaySound_Special
00007D7A                            loc_72F4:
00007D7A 60C4                       		bra.s	loc_72C2
00007D7C                            ; ===========================================================================
00007D7C                            
00007D7C                            Resize_FZboss:
00007D7C 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007D82 6500                       		bcs.s	loc_7312
00007D84 6100 0000                  		bsr.w	SingleObjLoad
00007D88 6600                       		bne.s	loc_7312
00007D8A 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007D8E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D92 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007D98                            
00007D98                            loc_7312:
00007D98 60A6                       		bra.s	loc_72C2
00007D9A                            ; ===========================================================================
00007D9A                            
00007D9A                            Resize_FZend:
00007D9A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007DA0 6500                       		bcs.s	loc_7320
00007DA2 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DA6                            
00007DA6                            loc_7320:
00007DA6 6098                       		bra.s	loc_72C2
00007DA8                            ; ===========================================================================
00007DA8                            
00007DA8                            locret_7322:
00007DA8 4E75                       		rts	
00007DAA                            ; ===========================================================================
00007DAA                            
00007DAA                            Resize_FZend2:
00007DAA 6094                       		bra.s	loc_72C2
00007DAC                            ; ===========================================================================
00007DAC                            ; ---------------------------------------------------------------------------
00007DAC                            ; Ending sequence dynamic screen resizing (empty)
00007DAC                            ; ---------------------------------------------------------------------------
00007DAC                            
00007DAC                            Resize_Ending:				; XREF: Resize_Index
00007DAC 4E75                       		rts	
00007DAE                            ; ===========================================================================
00007DAE                            ; ---------------------------------------------------------------------------
00007DAE                            ; Object 11 - GHZ bridge
00007DAE                            ; ---------------------------------------------------------------------------
00007DAE                            
00007DAE                            Obj11:					; XREF: Obj_Index
00007DAE 7000                       		moveq	#0,d0
00007DB0 1028 0024                  		move.b	$24(a0),d0
00007DB4 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007DB8 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007DBC                            ; ===========================================================================
00007DBC 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007DC0 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007DC4 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007DC8                            ; ===========================================================================
00007DC8                            
00007DC8                            Obj11_Main:				; XREF: Obj11_Index
00007DC8 5428 0024                  		addq.b	#2,$24(a0)
00007DCC 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007DD4 317C 438E 0002             		move.w	#$438E,2(a0)
00007DDA 117C 0004 0001             		move.b	#4,1(a0)
00007DE0 117C 0003 0018             		move.b	#3,$18(a0)
00007DE6 117C 0080 0019             		move.b	#$80,$19(a0)
00007DEC 3428 000C                  		move.w	$C(a0),d2
00007DF0 3628 0008                  		move.w	8(a0),d3
00007DF4 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007DF6 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007DFA 7200                       		moveq	#0,d1
00007DFC 1212                       		move.b	(a2),d1		; copy a2 to d1
00007DFE 14FC 0000                  		move.b	#0,(a2)+
00007E02 3001                       		move.w	d1,d0
00007E04 E248                       		lsr.w	#1,d0
00007E06 E948                       		lsl.w	#4,d0
00007E08 9640                       		sub.w	d0,d3
00007E0A 5501                       		subq.b	#2,d1
00007E0C 6500                       		bcs.s	Obj11_Action
00007E0E                            
00007E0E                            Obj11_MakeBdg:
00007E0E 6100 0000                  		bsr.w	SingleObjLoad
00007E12 6600                       		bne.s	Obj11_Action
00007E14 5228 0028                  		addq.b	#1,$28(a0)
00007E18 B668 0008                  		cmp.w	8(a0),d3
00007E1C 6600                       		bne.s	loc_73B8
00007E1E 0643 0010                  		addi.w	#$10,d3
00007E22 3142 000C                  		move.w	d2,$C(a0)
00007E26 3142 003C                  		move.w	d2,$3C(a0)
00007E2A 3A08                       		move.w	a0,d5
00007E2C 0445 D000                  		subi.w	#-$3000,d5
00007E30 EC4D                       		lsr.w	#6,d5
00007E32 0245 007F                  		andi.w	#$7F,d5
00007E36 14C5                       		move.b	d5,(a2)+
00007E38 5228 0028                  		addq.b	#1,$28(a0)
00007E3C                            
00007E3C                            loc_73B8:				; XREF: ROM:00007398j
00007E3C 3A09                       		move.w	a1,d5
00007E3E 0445 D000                  		subi.w	#-$3000,d5
00007E42 EC4D                       		lsr.w	#6,d5
00007E44 0245 007F                  		andi.w	#$7F,d5
00007E48 14C5                       		move.b	d5,(a2)+
00007E4A 137C 000A 0024             		move.b	#$A,$24(a1)
00007E50 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007E52 3342 000C                  		move.w	d2,$C(a1)
00007E56 3342 003C                  		move.w	d2,$3C(a1)
00007E5A 3343 0008                  		move.w	d3,8(a1)
00007E5E 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007E66 337C 438E 0002             		move.w	#$438E,2(a1)
00007E6C 137C 0004 0001             		move.b	#4,1(a1)
00007E72 137C 0003 0018             		move.b	#3,$18(a1)
00007E78 137C 0008 0019             		move.b	#8,$19(a1)
00007E7E 0643 0010                  		addi.w	#$10,d3
00007E82 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007E86                            
00007E86                            Obj11_Action:				; XREF: Obj11_Index
00007E86 6100                       		bsr.s	Obj11_Solid
00007E88 4A28 003E                  		tst.b	$3E(a0)
00007E8C 6700                       		beq.s	Obj11_Display
00007E8E 5928 003E                  		subq.b	#4,$3E(a0)
00007E92 6100 0000                  		bsr.w	Obj11_Bend
00007E96                            
00007E96                            Obj11_Display:
00007E96 6100 0000                  		bsr.w	DisplaySprite
00007E9A 6000 0000                  		bra.w	Obj11_ChkDel
00007E9E                            
00007E9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E9E                            
00007E9E                            
00007E9E                            Obj11_Solid:				; XREF: Obj11_Action
00007E9E 7200                       		moveq	#0,d1
00007EA0 1228 0028                  		move.b	$28(a0),d1
00007EA4 E749                       		lsl.w	#3,d1
00007EA6 3401                       		move.w	d1,d2
00007EA8 5041                       		addq.w	#8,d1
00007EAA D442                       		add.w	d2,d2
00007EAC 43F8 D000                  		lea	($FFFFD000).w,a1
00007EB0 4A69 0012                  		tst.w	$12(a1)
00007EB4 6B00 0000                  		bmi.w	locret_751E
00007EB8 3029 0008                  		move.w	8(a1),d0
00007EBC 9068 0008                  		sub.w	8(a0),d0
00007EC0 D041                       		add.w	d1,d0
00007EC2 6B00 0000                  		bmi.w	locret_751E
00007EC6 B042                       		cmp.w	d2,d0
00007EC8 6400 0000                  		bcc.w	locret_751E
00007ECC 6000                       		bra.s	Platform2
00007ECE                            ; End of function Obj11_Solid
00007ECE                            
00007ECE                            ; ---------------------------------------------------------------------------
00007ECE                            ; Platform subroutine
00007ECE                            ; ---------------------------------------------------------------------------
00007ECE                            
00007ECE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ECE                            
00007ECE                            
00007ECE                            PlatformObject:
00007ECE 43F8 D000                  		lea	($FFFFD000).w,a1
00007ED2 4A69 0012                  		tst.w	$12(a1)
00007ED6 6B00 0000                  		bmi.w	locret_751E
00007EDA 3029 0008                  		move.w	8(a1),d0
00007EDE 9068 0008                  		sub.w	8(a0),d0
00007EE2 D041                       		add.w	d1,d0
00007EE4 6B00 0000                  		bmi.w	locret_751E
00007EE8 D241                       		add.w	d1,d1
00007EEA B041                       		cmp.w	d1,d0
00007EEC 6400 0000                  		bcc.w	locret_751E
00007EF0                            
00007EF0                            Platform2:
00007EF0 3028 000C                  		move.w	$C(a0),d0
00007EF4 5140                       		subq.w	#8,d0
00007EF6                            
00007EF6                            Platform3:
00007EF6 3429 000C                  		move.w	$C(a1),d2
00007EFA 1229 0016                  		move.b	$16(a1),d1
00007EFE 4881                       		ext.w	d1
00007F00 D242                       		add.w	d2,d1
00007F02 5841                       		addq.w	#4,d1
00007F04 9041                       		sub.w	d1,d0
00007F06 6200 0000                  		bhi.w	locret_751E
00007F0A 0C40 FFF0                  		cmpi.w	#-$10,d0
00007F0E 6500 0000                  		bcs.w	locret_751E
00007F12 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007F16 6B00 0000                  		bmi.w	locret_751E
00007F1A 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007F20 6400 0000                  		bcc.w	locret_751E
00007F24 D440                       		add.w	d0,d2
00007F26 5642                       		addq.w	#3,d2
00007F28 3342 000C                  		move.w	d2,$C(a1)
00007F2C 5428 0024                  		addq.b	#2,$24(a0)
00007F30                            
00007F30                            loc_74AE:
00007F30 0829 0003 0022             		btst	#3,$22(a1)
00007F36 6700                       		beq.s	loc_74DC
00007F38 7000                       		moveq	#0,d0
00007F3A 1029 003D                  		move.b	$3D(a1),d0
00007F3E ED48                       		lsl.w	#6,d0
00007F40 0680 00FF D000             		addi.l	#$FFD000,d0
00007F46 2440                       		movea.l	d0,a2
00007F48 08AA 0003 0022             		bclr	#3,$22(a2)
00007F4E 422A 0025                  		clr.b	$25(a2)
00007F52 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007F58 6600                       		bne.s	loc_74DC
00007F5A 552A 0024                  		subq.b	#2,$24(a2)
00007F5E                            
00007F5E                            loc_74DC:
00007F5E 3008                       		move.w	a0,d0
00007F60 0440 D000                  		subi.w	#-$3000,d0
00007F64 EC48                       		lsr.w	#6,d0
00007F66 0240 007F                  		andi.w	#$7F,d0
00007F6A 1340 003D                  		move.b	d0,$3D(a1)
00007F6E 137C 0000 0026             		move.b	#0,$26(a1)
00007F74 337C 0000 0012             		move.w	#0,$12(a1)
00007F7A 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007F80 0829 0001 0022             		btst	#1,$22(a1)
00007F86 6700                       		beq.s	loc_7512
00007F88 2F08                       		move.l	a0,-(sp)
00007F8A 2049                       		movea.l	a1,a0
00007F8C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007F92 205F                       		movea.l	(sp)+,a0
00007F94                            
00007F94                            loc_7512:
00007F94 08E9 0003 0022             		bset	#3,$22(a1)
00007F9A 08E8 0003 0022             		bset	#3,$22(a0)
00007FA0                            
00007FA0                            locret_751E:
00007FA0 4E75                       		rts	
00007FA2                            ; End of function PlatformObject
00007FA2                            
00007FA2                            ; ---------------------------------------------------------------------------
00007FA2                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007FA2                            ; ---------------------------------------------------------------------------
00007FA2                            
00007FA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FA2                            
00007FA2                            
00007FA2                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007FA2 43F8 D000                  		lea	($FFFFD000).w,a1
00007FA6 4A69 0012                  		tst.w	$12(a1)
00007FAA 6B00 FFF4                  		bmi.w	locret_751E
00007FAE 3029 0008                  		move.w	8(a1),d0
00007FB2 9068 0008                  		sub.w	8(a0),d0
00007FB6 D041                       		add.w	d1,d0
00007FB8 6BE6                       		bmi.s	locret_751E
00007FBA D241                       		add.w	d1,d1
00007FBC B041                       		cmp.w	d1,d0
00007FBE 64E0                       		bcc.s	locret_751E
00007FC0 0828 0000 0001             		btst	#0,1(a0)
00007FC6 6700                       		beq.s	loc_754A
00007FC8 4640                       		not.w	d0
00007FCA D041                       		add.w	d1,d0
00007FCC                            
00007FCC                            loc_754A:
00007FCC E248                       		lsr.w	#1,d0
00007FCE 7600                       		moveq	#0,d3
00007FD0 1632 0000                  		move.b	(a2,d0.w),d3
00007FD4 3028 000C                  		move.w	$C(a0),d0
00007FD8 9043                       		sub.w	d3,d0
00007FDA 6000 FF1A                  		bra.w	Platform3
00007FDE                            ; End of function SlopeObject
00007FDE                            
00007FDE                            
00007FDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FDE                            
00007FDE                            
00007FDE                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007FDE 43F8 D000                  		lea	($FFFFD000).w,a1
00007FE2 4A69 0012                  		tst.w	$12(a1)
00007FE6 6B00 FFB8                  		bmi.w	locret_751E
00007FEA 3029 0008                  		move.w	8(a1),d0
00007FEE 9068 0008                  		sub.w	8(a0),d0
00007FF2 D041                       		add.w	d1,d0
00007FF4 6B00 FFAA                  		bmi.w	locret_751E
00007FF8 D241                       		add.w	d1,d1
00007FFA B041                       		cmp.w	d1,d0
00007FFC 6400 FFA2                  		bcc.w	locret_751E
00008000 3028 000C                  		move.w	$C(a0),d0
00008004 9043                       		sub.w	d3,d0
00008006 6000 FEEE                  		bra.w	Platform3
0000800A                            ; End of function Obj15_Solid
0000800A                            
0000800A                            ; ===========================================================================
0000800A                            
0000800A                            Obj11_Action2:				; XREF: Obj11_Index
0000800A 6100                       		bsr.s	Obj11_WalkOff
0000800C 6100 0000                  		bsr.w	DisplaySprite
00008010 6000 0000                  		bra.w	Obj11_ChkDel
00008014                            
00008014                            ; ---------------------------------------------------------------------------
00008014                            ; Subroutine allowing Sonic to walk off a bridge
00008014                            ; ---------------------------------------------------------------------------
00008014                            
00008014                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008014                            
00008014                            
00008014                            Obj11_WalkOff:				; XREF: Obj11_Action2
00008014 7200                       		moveq	#0,d1
00008016 1228 0028                  		move.b	$28(a0),d1
0000801A E749                       		lsl.w	#3,d1
0000801C 3401                       		move.w	d1,d2
0000801E 5041                       		addq.w	#8,d1
00008020 6100                       		bsr.s	ExitPlatform2
00008022 6400                       		bcc.s	locret_75BE
00008024 E848                       		lsr.w	#4,d0
00008026 1140 003F                  		move.b	d0,$3F(a0)
0000802A 1028 003E                  		move.b	$3E(a0),d0
0000802E 0C00 0040                  		cmpi.b	#$40,d0
00008032 6700                       		beq.s	loc_75B6
00008034 5828 003E                  		addq.b	#4,$3E(a0)
00008038                            
00008038                            loc_75B6:
00008038 6100 0000                  		bsr.w	Obj11_Bend
0000803C 6100 0000                  		bsr.w	Obj11_MoveSonic
00008040                            
00008040                            locret_75BE:
00008040 4E75                       		rts	
00008042                            ; End of function Obj11_WalkOff
00008042                            
00008042                            ; ---------------------------------------------------------------------------
00008042                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008042                            ; ---------------------------------------------------------------------------
00008042                            
00008042                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008042                            
00008042                            
00008042                            ExitPlatform:
00008042 3401                       		move.w	d1,d2
00008044                            
00008044                            ExitPlatform2:
00008044 D442                       		add.w	d2,d2
00008046 43F8 D000                  		lea	($FFFFD000).w,a1
0000804A 0829 0001 0022             		btst	#1,$22(a1)
00008050 6600                       		bne.s	loc_75E0
00008052 3029 0008                  		move.w	8(a1),d0
00008056 9068 0008                  		sub.w	8(a0),d0
0000805A D041                       		add.w	d1,d0
0000805C 6B00                       		bmi.s	loc_75E0
0000805E B042                       		cmp.w	d2,d0
00008060 6500                       		bcs.s	locret_75F2
00008062                            
00008062                            loc_75E0:
00008062 08A9 0003 0022             		bclr	#3,$22(a1)
00008068 117C 0002 0024             		move.b	#2,$24(a0)
0000806E 08A8 0003 0022             		bclr	#3,$22(a0)
00008074                            
00008074                            locret_75F2:
00008074 4E75                       		rts	
00008076                            ; End of function ExitPlatform
00008076                            
00008076                            
00008076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008076                            
00008076                            
00008076                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00008076 7000                       		moveq	#0,d0
00008078 1028 003F                  		move.b	$3F(a0),d0
0000807C 1030 0029                  		move.b	$29(a0,d0.w),d0
00008080 ED48                       		lsl.w	#6,d0
00008082 0680 00FF D000             		addi.l	#$FFD000,d0
00008088 2440                       		movea.l	d0,a2
0000808A 43F8 D000                  		lea	($FFFFD000).w,a1
0000808E 302A 000C                  		move.w	$C(a2),d0
00008092 5140                       		subq.w	#8,d0
00008094 7200                       		moveq	#0,d1
00008096 1229 0016                  		move.b	$16(a1),d1
0000809A 9041                       		sub.w	d1,d0
0000809C 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
000080A0 4E75                       		rts	
000080A2                            ; End of function Obj11_MoveSonic
000080A2                            
000080A2                            
000080A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080A2                            
000080A2                            
000080A2                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
000080A2 1028 003E                  		move.b	$3E(a0),d0
000080A6 6100 ACDE                  		bsr.w	CalcSine
000080AA 3800                       		move.w	d0,d4
000080AC 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000080B2 7000                       		moveq	#0,d0
000080B4 1028 0028                  		move.b	$28(a0),d0
000080B8 E948                       		lsl.w	#4,d0
000080BA 7600                       		moveq	#0,d3
000080BC 1628 003F                  		move.b	$3F(a0),d3
000080C0 3403                       		move.w	d3,d2
000080C2 D640                       		add.w	d0,d3
000080C4 7A00                       		moveq	#0,d5
000080C6 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
000080CC 1A35 3000                  		move.b	(a5,d3.w),d5
000080D0 0243 000F                  		andi.w	#$F,d3
000080D4 E94B                       		lsl.w	#4,d3
000080D6 47F4 3000                  		lea	(a4,d3.w),a3
000080DA 45E8 0029                  		lea	$29(a0),a2
000080DE                            
000080DE                            loc_765C:
000080DE 7000                       		moveq	#0,d0
000080E0 101A                       		move.b	(a2)+,d0
000080E2 ED48                       		lsl.w	#6,d0
000080E4 0680 00FF D000             		addi.l	#$FFD000,d0
000080EA 2240                       		movea.l	d0,a1
000080EC 7000                       		moveq	#0,d0
000080EE 101B                       		move.b	(a3)+,d0
000080F0 5240                       		addq.w	#1,d0
000080F2 C0C5                       		mulu.w	d5,d0
000080F4 C0C4                       		mulu.w	d4,d0
000080F6 4840                       		swap	d0
000080F8 D069 003C                  		add.w	$3C(a1),d0
000080FC 3340 000C                  		move.w	d0,$C(a1)
00008100 51CA FFDC                  		dbf	d2,loc_765C
00008104 7000                       		moveq	#0,d0
00008106 1028 0028                  		move.b	$28(a0),d0
0000810A 7600                       		moveq	#0,d3
0000810C 1628 003F                  		move.b	$3F(a0),d3
00008110 5203                       		addq.b	#1,d3
00008112 9600                       		sub.b	d0,d3
00008114 4403                       		neg.b	d3
00008116 6B00                       		bmi.s	locret_76CA
00008118 3403                       		move.w	d3,d2
0000811A E94B                       		lsl.w	#4,d3
0000811C 47F4 3000                  		lea	(a4,d3.w),a3
00008120 D6C2                       		adda.w	d2,a3
00008122 5342                       		subq.w	#1,d2
00008124 6500                       		bcs.s	locret_76CA
00008126                            
00008126                            loc_76A4:
00008126 7000                       		moveq	#0,d0
00008128 101A                       		move.b	(a2)+,d0
0000812A ED48                       		lsl.w	#6,d0
0000812C 0680 00FF D000             		addi.l	#$FFD000,d0
00008132 2240                       		movea.l	d0,a1
00008134 7000                       		moveq	#0,d0
00008136 1023                       		move.b	-(a3),d0
00008138 5240                       		addq.w	#1,d0
0000813A C0C5                       		mulu.w	d5,d0
0000813C C0C4                       		mulu.w	d4,d0
0000813E 4840                       		swap	d0
00008140 D069 003C                  		add.w	$3C(a1),d0
00008144 3340 000C                  		move.w	d0,$C(a1)
00008148 51CA FFDC                  		dbf	d2,loc_76A4
0000814C                            
0000814C                            locret_76CA:
0000814C 4E75                       		rts	
0000814E                            ; End of function Obj11_Bend
0000814E                            
0000814E                            ; ===========================================================================
0000814E                            ; ---------------------------------------------------------------------------
0000814E                            ; GHZ bridge-bending data
0000814E                            ; (Defines how the bridge bends	when Sonic walks across	it)
0000814E                            ; ---------------------------------------------------------------------------
0000814E                            Obj11_BendData:	incbin	misc\ghzbend1.bin
0000825E                            		even
0000825E                            Obj11_BendData2:incbin	misc\ghzbend2.bin
0000835E                            		even
0000835E                            
0000835E                            ; ===========================================================================
0000835E                            
0000835E                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
0000835E 3028 0008                  		move.w	8(a0),d0
00008362 0240 FF80                  		andi.w	#$FF80,d0
00008366 3238 F700                  		move.w	($FFFFF700).w,d1
0000836A 0441 0080                  		subi.w	#$80,d1
0000836E 0241 FF80                  		andi.w	#$FF80,d1
00008372 9041                       		sub.w	d1,d0
00008374 0C40 0280                  		cmpi.w	#$280,d0
00008378 6200 0000                  		bhi.w	Obj11_DelAll
0000837C 4E75                       		rts	
0000837E                            ; ===========================================================================
0000837E                            
0000837E                            Obj11_DelAll:				; XREF: Obj11_ChkDel
0000837E 7400                       		moveq	#0,d2
00008380 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00008384 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00008386 5302                       		subq.b	#1,d2		; subtract 1
00008388 6500                       		bcs.s	Obj11_Delete
0000838A                            
0000838A                            Obj11_DelLoop:
0000838A 7000                       		moveq	#0,d0
0000838C 101A                       		move.b	(a2)+,d0
0000838E ED48                       		lsl.w	#6,d0
00008390 0680 00FF D000             		addi.l	#$FFD000,d0
00008396 2240                       		movea.l	d0,a1
00008398 B048                       		cmp.w	a0,d0
0000839A 6700                       		beq.s	loc_791E
0000839C 6100 0000                  		bsr.w	DeleteObject2
000083A0                            
000083A0                            loc_791E:
000083A0 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000083A4                            
000083A4                            Obj11_Delete:
000083A4 6100 0000                  		bsr.w	DeleteObject
000083A8 4E75                       		rts	
000083AA                            ; ===========================================================================
000083AA                            
000083AA                            Obj11_Delete2:				; XREF: Obj11_Index
000083AA 6100 0000                  		bsr.w	DeleteObject
000083AE 4E75                       		rts	
000083B0                            ; ===========================================================================
000083B0                            
000083B0                            Obj11_Display2:				; XREF: Obj11_Index
000083B0 6100 0000                  		bsr.w	DisplaySprite
000083B4 4E75                       		rts	
000083B6                            ; ===========================================================================
000083B6                            ; ---------------------------------------------------------------------------
000083B6                            ; Sprite mappings - GHZ	bridge
000083B6                            ; ---------------------------------------------------------------------------
000083B6                            Map_obj11:
000083B6                            	include "_maps\obj11.asm"
000083B6                            ; ---------------------------------------------------------------------------
000083B6                            ; Sprite mappings - GHZ	bridge
000083B6                            ; ---------------------------------------------------------------------------
000083B6 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
000083BA 0000                       		dc.w byte_794B-Map_obj11
000083BC 01                         byte_793A:	dc.b 1
000083BD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000083C2 02                         byte_7940:	dc.b 2
000083C3 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
000083C8 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
000083CD 01                         byte_794B:	dc.b 1
000083CE FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
000083D4 00                         		even
000083D4 00                         		even
000083D4                            
000083D4                            ; ===========================================================================
000083D4                            ; ---------------------------------------------------------------------------
000083D4                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
000083D4                            ;	    - spiked ball on a chain (SBZ)
000083D4                            ; ---------------------------------------------------------------------------
000083D4                            
000083D4                            Obj15:					; XREF: Obj_Index
000083D4 7000                       		moveq	#0,d0
000083D6 1028 0024                  		move.b	$24(a0),d0
000083DA 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
000083DE 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
000083E2                            ; ===========================================================================
000083E2 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
000083E6 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
000083EA 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
000083EE 0000                       		dc.w Obj15_Action-Obj15_Index
000083F0                            ; ===========================================================================
000083F0                            
000083F0                            Obj15_Main:				; XREF: Obj15_Index
000083F0 5428 0024                  		addq.b	#2,$24(a0)
000083F4 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
000083FC 317C 4380 0002             		move.w	#$4380,2(a0)
00008402 117C 0004 0001             		move.b	#4,1(a0)
00008408 117C 0003 0018             		move.b	#3,$18(a0)
0000840E 117C 0018 0019             		move.b	#$18,$19(a0)
00008414 117C 0008 0016             		move.b	#8,$16(a0)
0000841A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008420 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008426 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000842C 6600                       		bne.s	Obj15_NotSLZ
0000842E 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008436 317C 43DC 0002             		move.w	#$43DC,2(a0)
0000843C 117C 0020 0019             		move.b	#$20,$19(a0)
00008442 117C 0010 0016             		move.b	#$10,$16(a0)
00008448 117C 0099 0020             		move.b	#$99,$20(a0)
0000844E                            
0000844E                            Obj15_NotSLZ:
0000844E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008454 6600                       		bne.s	Obj15_SetLength
00008456 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
0000845E 317C 0391 0002             		move.w	#$391,2(a0)
00008464 117C 0018 0019             		move.b	#$18,$19(a0)
0000846A 117C 0018 0016             		move.b	#$18,$16(a0)
00008470 117C 0086 0020             		move.b	#$86,$20(a0)
00008476 117C 000C 0024             		move.b	#$C,$24(a0)
0000847C                            
0000847C                            Obj15_SetLength:
0000847C 1810                       		move.b	0(a0),d4
0000847E 7200                       		moveq	#0,d1
00008480 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008484 1212                       		move.b	(a2),d1		; move a2 to d1
00008486 3F01                       		move.w	d1,-(sp)
00008488 0241 000F                  		andi.w	#$F,d1
0000848C 14FC 0000                  		move.b	#0,(a2)+
00008490 3601                       		move.w	d1,d3
00008492 E94B                       		lsl.w	#4,d3
00008494 5003                       		addq.b	#8,d3
00008496 1143 003C                  		move.b	d3,$3C(a0)
0000849A 5103                       		subq.b	#8,d3
0000849C 4A28 001A                  		tst.b	$1A(a0)
000084A0 6700                       		beq.s	Obj15_MakeChain
000084A2 5003                       		addq.b	#8,d3
000084A4 5341                       		subq.w	#1,d1
000084A6                            
000084A6                            Obj15_MakeChain:
000084A6 6100 0000                  		bsr.w	SingleObjLoad
000084AA 6600                       		bne.s	loc_7A92
000084AC 5228 0028                  		addq.b	#1,$28(a0)
000084B0 3A09                       		move.w	a1,d5
000084B2 0445 D000                  		subi.w	#-$3000,d5
000084B6 EC4D                       		lsr.w	#6,d5
000084B8 0245 007F                  		andi.w	#$7F,d5
000084BC 14C5                       		move.b	d5,(a2)+
000084BE 137C 000A 0024             		move.b	#$A,$24(a1)
000084C4 1284                       		move.b	d4,0(a1)	; load swinging	object
000084C6 2368 0004 0004             		move.l	4(a0),4(a1)
000084CC 3368 0002 0002             		move.w	2(a0),2(a1)
000084D2 08A9 0006 0002             		bclr	#6,2(a1)
000084D8 137C 0004 0001             		move.b	#4,1(a1)
000084DE 137C 0004 0018             		move.b	#4,$18(a1)
000084E4 137C 0008 0019             		move.b	#8,$19(a1)
000084EA 137C 0001 001A             		move.b	#1,$1A(a1)
000084F0 1343 003C                  		move.b	d3,$3C(a1)
000084F4 0403 0010                  		subi.b	#$10,d3
000084F8 6400                       		bcc.s	loc_7A8E
000084FA 137C 0002 001A             		move.b	#2,$1A(a1)
00008500 137C 0003 0018             		move.b	#3,$18(a1)
00008506 08E9 0006 0002             		bset	#6,2(a1)
0000850C                            
0000850C                            loc_7A8E:
0000850C 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008510                            
00008510                            loc_7A92:
00008510 3A08                       		move.w	a0,d5
00008512 0445 D000                  		subi.w	#-$3000,d5
00008516 EC4D                       		lsr.w	#6,d5
00008518 0245 007F                  		andi.w	#$7F,d5
0000851C 14C5                       		move.b	d5,(a2)+
0000851E 317C 4080 0026             		move.w	#$4080,$26(a0)
00008524 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000852A 321F                       		move.w	(sp)+,d1
0000852C 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008530 6700                       		beq.s	loc_7AD4	; if not, branch
00008532 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
0000853A 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008540 117C 0001 001A             		move.b	#1,$1A(a0)
00008546 117C 0002 0018             		move.b	#2,$18(a0)
0000854C 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008552                            
00008552                            loc_7AD4:
00008552 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008558 6700                       		beq.s	Obj15_Action	; if yes, branch
0000855A                            
0000855A                            Obj15_SetSolid:				; XREF: Obj15_Index
0000855A 7200                       		moveq	#0,d1
0000855C 1228 0019                  		move.b	$19(a0),d1
00008560 7600                       		moveq	#0,d3
00008562 1628 0016                  		move.b	$16(a0),d3
00008566 6100 FA76                  		bsr.w	Obj15_Solid
0000856A                            
0000856A                            Obj15_Action:				; XREF: Obj15_Index
0000856A 6100 0000                  		bsr.w	Obj15_Move
0000856E 6100 0000                  		bsr.w	DisplaySprite
00008572 6000 0000                  		bra.w	Obj15_ChkDel
00008576                            ; ===========================================================================
00008576                            
00008576                            Obj15_Action2:				; XREF: Obj15_Index
00008576 7200                       		moveq	#0,d1
00008578 1228 0019                  		move.b	$19(a0),d1
0000857C 6100 FAC4                  		bsr.w	ExitPlatform
00008580 3F28 0008                  		move.w	8(a0),-(sp)
00008584 6100 0000                  		bsr.w	Obj15_Move
00008588 341F                       		move.w	(sp)+,d2
0000858A 7600                       		moveq	#0,d3
0000858C 1628 0016                  		move.b	$16(a0),d3
00008590 5203                       		addq.b	#1,d3
00008592 6100 0000                  		bsr.w	MvSonicOnPtfm
00008596 6100 0000                  		bsr.w	DisplaySprite
0000859A 6000 0000                  		bra.w	Obj15_ChkDel
0000859E                            
0000859E 4E75                       		rts
000085A0                            
000085A0                            ; ---------------------------------------------------------------------------
000085A0                            ; Subroutine to	change Sonic's position with a platform
000085A0                            ; ---------------------------------------------------------------------------
000085A0                            
000085A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085A0                            
000085A0                            
000085A0                            MvSonicOnPtfm:
000085A0 43F8 D000                  		lea	($FFFFD000).w,a1
000085A4 3028 000C                  		move.w	$C(a0),d0
000085A8 9043                       		sub.w	d3,d0
000085AA 6000                       		bra.s	MvSonic2
000085AC                            ; End of function MvSonicOnPtfm
000085AC                            
000085AC                            ; ---------------------------------------------------------------------------
000085AC                            ; Subroutine to	change Sonic's position with a platform
000085AC                            ; ---------------------------------------------------------------------------
000085AC                            
000085AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085AC                            
000085AC                            
000085AC                            MvSonicOnPtfm2:
000085AC 43F8 D000                  		lea	($FFFFD000).w,a1
000085B0 3028 000C                  		move.w	$C(a0),d0
000085B4 0440 0009                  		subi.w	#9,d0
000085B8                            
000085B8                            MvSonic2:
000085B8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000085BC 6B00                       		bmi.s	locret_7B62
000085BE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000085C4 6400                       		bcc.s	locret_7B62
000085C6 4A78 FE08                  		tst.w	($FFFFFE08).w
000085CA 6600                       		bne.s	locret_7B62
000085CC 7200                       		moveq	#0,d1
000085CE 1229 0016                  		move.b	$16(a1),d1
000085D2 9041                       		sub.w	d1,d0
000085D4 3340 000C                  		move.w	d0,$C(a1)
000085D8 9468 0008                  		sub.w	8(a0),d2
000085DC 9569 0008                  		sub.w	d2,8(a1)
000085E0                            
000085E0                            locret_7B62:
000085E0 4E75                       		rts	
000085E2                            ; End of function MvSonicOnPtfm2
000085E2                            
000085E2                            
000085E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085E2                            
000085E2                            
000085E2                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
000085E2 1038 FE78                  		move.b	($FFFFFE78).w,d0
000085E6 323C 0080                  		move.w	#$80,d1
000085EA 0828 0000 0022             		btst	#0,$22(a0)
000085F0 6700                       		beq.s	loc_7B78
000085F2 4440                       		neg.w	d0
000085F4 D041                       		add.w	d1,d0
000085F6                            
000085F6                            loc_7B78:
000085F6 6000                       		bra.s	Obj15_Move2
000085F8                            ; End of function Obj15_Move
000085F8                            
000085F8                            
000085F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085F8                            
000085F8                            
000085F8                            Obj48_Move:				; XREF: Obj48_Display2
000085F8 4A28 003D                  		tst.b	$3D(a0)
000085FC 6600                       		bne.s	loc_7B9C
000085FE 3028 003E                  		move.w	$3E(a0),d0
00008602 5040                       		addq.w	#8,d0
00008604 3140 003E                  		move.w	d0,$3E(a0)
00008608 D168 0026                  		add.w	d0,$26(a0)
0000860C 0C40 0200                  		cmpi.w	#$200,d0
00008610 6600                       		bne.s	loc_7BB6
00008612 117C 0001 003D             		move.b	#1,$3D(a0)
00008618 6000                       		bra.s	loc_7BB6
0000861A                            ; ===========================================================================
0000861A                            
0000861A                            loc_7B9C:
0000861A 3028 003E                  		move.w	$3E(a0),d0
0000861E 5140                       		subq.w	#8,d0
00008620 3140 003E                  		move.w	d0,$3E(a0)
00008624 D168 0026                  		add.w	d0,$26(a0)
00008628 0C40 FE00                  		cmpi.w	#-$200,d0
0000862C 6600                       		bne.s	loc_7BB6
0000862E 117C 0000 003D             		move.b	#0,$3D(a0)
00008634                            
00008634                            loc_7BB6:
00008634 1028 0026                  		move.b	$26(a0),d0
00008638                            ; End of function Obj48_Move
00008638                            
00008638                            
00008638                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008638                            
00008638                            
00008638                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008638 6100 A74C                  		bsr.w	CalcSine
0000863C 3428 0038                  		move.w	$38(a0),d2
00008640 3628 003A                  		move.w	$3A(a0),d3
00008644 45E8 0028                  		lea	$28(a0),a2
00008648 7C00                       		moveq	#0,d6
0000864A 1C1A                       		move.b	(a2)+,d6
0000864C                            
0000864C                            loc_7BCE:
0000864C 7800                       		moveq	#0,d4
0000864E 181A                       		move.b	(a2)+,d4
00008650 ED4C                       		lsl.w	#6,d4
00008652 0684 00FF D000             		addi.l	#$FFD000,d4
00008658 2244                       		movea.l	d4,a1
0000865A 7800                       		moveq	#0,d4
0000865C 1829 003C                  		move.b	$3C(a1),d4
00008660 2A04                       		move.l	d4,d5
00008662 C9C0                       		muls.w	d0,d4
00008664 E084                       		asr.l	#8,d4
00008666 CBC1                       		muls.w	d1,d5
00008668 E085                       		asr.l	#8,d5
0000866A D842                       		add.w	d2,d4
0000866C DA43                       		add.w	d3,d5
0000866E 3344 000C                  		move.w	d4,$C(a1)
00008672 3345 0008                  		move.w	d5,8(a1)
00008676 51CE FFD4                  		dbf	d6,loc_7BCE
0000867A 4E75                       		rts	
0000867C                            ; End of function Obj15_Move2
0000867C                            
0000867C                            ; ===========================================================================
0000867C                            
0000867C                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000867C 3028 003A                  		move.w	$3A(a0),d0
00008680 0240 FF80                  		andi.w	#$FF80,d0
00008684 3238 F700                  		move.w	($FFFFF700).w,d1
00008688 0441 0080                  		subi.w	#$80,d1
0000868C 0241 FF80                  		andi.w	#$FF80,d1
00008690 9041                       		sub.w	d1,d0
00008692 0C40 0280                  		cmpi.w	#$280,d0
00008696 6200 0000                  		bhi.w	Obj15_DelAll
0000869A 4E75                       		rts	
0000869C                            ; ===========================================================================
0000869C                            
0000869C                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000869C 7400                       		moveq	#0,d2
0000869E 45E8 0028                  		lea	$28(a0),a2
000086A2 141A                       		move.b	(a2)+,d2
000086A4                            
000086A4                            Obj15_DelLoop:
000086A4 7000                       		moveq	#0,d0
000086A6 101A                       		move.b	(a2)+,d0
000086A8 ED48                       		lsl.w	#6,d0
000086AA 0680 00FF D000             		addi.l	#$FFD000,d0
000086B0 2240                       		movea.l	d0,a1
000086B2 6100 0000                  		bsr.w	DeleteObject2
000086B6 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000086BA 4E75                       		rts	
000086BC                            ; ===========================================================================
000086BC                            
000086BC                            Obj15_Delete:				; XREF: Obj15_Index
000086BC 6100 0000                  		bsr.w	DeleteObject
000086C0 4E75                       		rts	
000086C2                            ; ===========================================================================
000086C2                            
000086C2                            Obj15_Display:				; XREF: Obj15_Index
000086C2 6000 0000                  		bra.w	DisplaySprite
000086C6                            ; ===========================================================================
000086C6                            ; ---------------------------------------------------------------------------
000086C6                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086C6                            ; ---------------------------------------------------------------------------
000086C6                            Map_obj15:
000086C6                            	include "_maps\obj15ghz.asm"
000086C6                            ; ---------------------------------------------------------------------------
000086C6                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086C6                            ; ---------------------------------------------------------------------------
000086C6 0000                       		dc.w byte_7C4E-Map_obj15
000086C8 0000                       		dc.w byte_7C59-Map_obj15
000086CA 0000                       		dc.w byte_7C5F-Map_obj15
000086CC 02                         byte_7C4E:	dc.b 2
000086CD F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000086D2 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000086D7 01                         byte_7C59:	dc.b 1
000086D8 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000086DD 01                         byte_7C5F:	dc.b 1
000086DE F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000086E4 00                         		even
000086E4 00                         		even
000086E4                            
000086E4                            ; ---------------------------------------------------------------------------
000086E4                            ; Sprite mappings - SLZ	swinging platforms
000086E4                            ; ---------------------------------------------------------------------------
000086E4                            Map_obj15a:
000086E4                            	include "_maps\obj15slz.asm"
000086E4                            ; ---------------------------------------------------------------------------
000086E4                            ; Sprite mappings - SLZ	swinging platforms
000086E4                            ; ---------------------------------------------------------------------------
000086E4 0000                       		dc.w byte_7C6C-Map_obj15a
000086E6 0000                       		dc.w byte_7C95-Map_obj15a
000086E8 0000                       		dc.w byte_7C9B-Map_obj15a
000086EA 08                         byte_7C6C:	dc.b 8
000086EB F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000086F0 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000086F5 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000086FA F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000086FF 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008704 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008709 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000870E 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008713 01                         byte_7C95:	dc.b 1
00008714 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008719 01                         byte_7C9B:	dc.b 1
0000871A F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008720 00                         		even
00008720 00                         		even
00008720                            
00008720                            ; ===========================================================================
00008720                            ; ---------------------------------------------------------------------------
00008720                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008720                            ; ---------------------------------------------------------------------------
00008720                            
00008720                            Obj17:					; XREF: Obj_Index
00008720 7000                       		moveq	#0,d0
00008722 1028 0024                  		move.b	$24(a0),d0
00008726 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000872A 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000872E                            ; ===========================================================================
0000872E 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008730 0000                       		dc.w Obj17_Action-Obj17_Index
00008732 0000                       		dc.w Obj17_Action-Obj17_Index
00008734 0000                       		dc.w Obj17_Delete-Obj17_Index
00008736 0000                       		dc.w Obj17_Display-Obj17_Index
00008738                            ; ===========================================================================
00008738                            
00008738                            Obj17_Main:				; XREF: Obj17_Index
00008738 5428 0024                  		addq.b	#2,$24(a0)
0000873C 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008744 317C 4398 0002             		move.w	#$4398,2(a0)
0000874A 117C 0007 0022             		move.b	#7,$22(a0)
00008750 117C 0004 0001             		move.b	#4,1(a0)
00008756 117C 0003 0018             		move.b	#3,$18(a0)
0000875C 117C 0008 0019             		move.b	#8,$19(a0)
00008762 3428 000C                  		move.w	$C(a0),d2
00008766 3628 0008                  		move.w	8(a0),d3
0000876A 1810                       		move.b	0(a0),d4
0000876C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008770 7200                       		moveq	#0,d1
00008772 1212                       		move.b	(a2),d1		; move a2 to d1
00008774 14FC 0000                  		move.b	#0,(a2)+
00008778 3001                       		move.w	d1,d0
0000877A E248                       		lsr.w	#1,d0
0000877C E948                       		lsl.w	#4,d0
0000877E 9640                       		sub.w	d0,d3
00008780 5501                       		subq.b	#2,d1
00008782 6500                       		bcs.s	Obj17_Action
00008784 7C00                       		moveq	#0,d6
00008786                            
00008786                            Obj17_MakeHelix:
00008786 6100 0000                  		bsr.w	SingleObjLoad
0000878A 6600                       		bne.s	Obj17_Action
0000878C 5228 0028                  		addq.b	#1,$28(a0)
00008790 3A09                       		move.w	a1,d5
00008792 0445 D000                  		subi.w	#$D000,d5
00008796 EC4D                       		lsr.w	#6,d5
00008798 0245 007F                  		andi.w	#$7F,d5
0000879C 14C5                       		move.b	d5,(a2)+
0000879E 137C 0008 0024             		move.b	#8,$24(a1)
000087A4 1284                       		move.b	d4,0(a1)
000087A6 3342 000C                  		move.w	d2,$C(a1)
000087AA 3343 0008                  		move.w	d3,8(a1)
000087AE 2368 0004 0004             		move.l	4(a0),4(a1)
000087B4 337C 4398 0002             		move.w	#$4398,2(a1)
000087BA 137C 0004 0001             		move.b	#4,1(a1)
000087C0 137C 0003 0018             		move.b	#3,$18(a1)
000087C6 137C 0008 0019             		move.b	#8,$19(a1)
000087CC 1346 003E                  		move.b	d6,$3E(a1)
000087D0 5206                       		addq.b	#1,d6
000087D2 0206 0007                  		andi.b	#7,d6
000087D6 0643 0010                  		addi.w	#$10,d3
000087DA B668 0008                  		cmp.w	8(a0),d3
000087DE 6600                       		bne.s	loc_7D78
000087E0 1146 003E                  		move.b	d6,$3E(a0)
000087E4 5206                       		addq.b	#1,d6
000087E6 0206 0007                  		andi.b	#7,d6
000087EA 0643 0010                  		addi.w	#$10,d3
000087EE 5228 0028                  		addq.b	#1,$28(a0)
000087F2                            
000087F2                            loc_7D78:
000087F2 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000087F6                            
000087F6                            Obj17_Action:				; XREF: Obj17_Index
000087F6 6100 0000                  		bsr.w	Obj17_RotateSpikes
000087FA 6100 0000                  		bsr.w	DisplaySprite
000087FE 6000 0000                  		bra.w	Obj17_ChkDel
00008802                            
00008802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008802                            
00008802                            
00008802                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008802 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008806 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000880C D028 003E                  		add.b	$3E(a0),d0
00008810 0200 0007                  		andi.b	#7,d0
00008814 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008818 6600                       		bne.s	locret_7DA6
0000881A 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008820                            
00008820                            locret_7DA6:
00008820 4E75                       		rts	
00008822                            ; End of function Obj17_RotateSpikes
00008822                            
00008822                            ; ===========================================================================
00008822                            
00008822                            Obj17_ChkDel:				; XREF: Obj17_Action
00008822 3028 0008                  		move.w	8(a0),d0
00008826 0240 FF80                  		andi.w	#$FF80,d0
0000882A 3238 F700                  		move.w	($FFFFF700).w,d1
0000882E 0441 0080                  		subi.w	#$80,d1
00008832 0241 FF80                  		andi.w	#$FF80,d1
00008836 9041                       		sub.w	d1,d0
00008838 0C40 0280                  		cmpi.w	#$280,d0
0000883C 6200 0000                  		bhi.w	Obj17_DelAll
00008840 4E75                       		rts	
00008842                            ; ===========================================================================
00008842                            
00008842                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008842 7400                       		moveq	#0,d2
00008844 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008848 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000884A 5502                       		subq.b	#2,d2
0000884C 6500                       		bcs.s	Obj17_Delete
0000884E                            
0000884E                            Obj17_DelLoop:
0000884E 7000                       		moveq	#0,d0
00008850 101A                       		move.b	(a2)+,d0
00008852 ED48                       		lsl.w	#6,d0
00008854 0680 00FF D000             		addi.l	#$FFD000,d0
0000885A 2240                       		movea.l	d0,a1
0000885C 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008860 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008864                            
00008864                            Obj17_Delete:				; XREF: Obj17_Index
00008864 6100 0000                  		bsr.w	DeleteObject
00008868 4E75                       		rts	
0000886A                            ; ===========================================================================
0000886A                            
0000886A                            Obj17_Display:				; XREF: Obj17_Index
0000886A 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000886E 6000 0000                  		bra.w	DisplaySprite
00008872                            ; ===========================================================================
00008872                            ; ---------------------------------------------------------------------------
00008872                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008872                            ; ---------------------------------------------------------------------------
00008872                            Map_obj17:
00008872                            	include "_maps\obj17.asm"
00008872                            ; ---------------------------------------------------------------------------
00008872                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008872                            ; ---------------------------------------------------------------------------
00008872 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008876 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000887A 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000887E 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008882 01                         byte_7E08:	dc.b 1
00008883 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008888 01                         byte_7E0E:	dc.b 1
00008889 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000888E 01                         byte_7E14:	dc.b 1
0000888F F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008894 01                         byte_7E1A:	dc.b 1
00008895 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000889A 01                         byte_7E20:	dc.b 1
0000889B 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000088A0 01                         byte_7E26:	dc.b 1
000088A1 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000088A6 01                         byte_7E2C:	dc.b 1
000088A7 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000088AC                            		even
000088AC                            		even
000088AC                            
000088AC                            ; ===========================================================================
000088AC                            ; ---------------------------------------------------------------------------
000088AC                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000088AC                            ; ---------------------------------------------------------------------------
000088AC                            
000088AC                            Obj18:					; XREF: Obj_Index
000088AC 7000                       		moveq	#0,d0
000088AE 1028 0024                  		move.b	$24(a0),d0
000088B2 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000088B6 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000088BA                            ; ===========================================================================
000088BA 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000088BC 0000                       		dc.w Obj18_Solid-Obj18_Index
000088BE 0000                       		dc.w Obj18_Action2-Obj18_Index
000088C0 0000                       		dc.w Obj18_Delete-Obj18_Index
000088C2 0000                       		dc.w Obj18_Action-Obj18_Index
000088C4                            ; ===========================================================================
000088C4                            
000088C4                            Obj18_Main:				; XREF: Obj18_Index
000088C4 5428 0024                  		addq.b	#2,$24(a0)
000088C8 317C 4000 0002             		move.w	#$4000,2(a0)
000088CE 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000088D6 117C 0020 0019             		move.b	#$20,$19(a0)
000088DC 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000088E2 6600                       		bne.s	Obj18_NotSYZ
000088E4 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000088EC 117C 0020 0019             		move.b	#$20,$19(a0)
000088F2                            
000088F2                            Obj18_NotSYZ:
000088F2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000088F8 6600                       		bne.s	Obj18_NotSLZ
000088FA 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008902 117C 0020 0019             		move.b	#$20,$19(a0)
00008908 317C 4000 0002             		move.w	#$4000,2(a0)
0000890E 117C 0003 0028             		move.b	#3,$28(a0)
00008914                            
00008914                            Obj18_NotSLZ:
00008914 117C 0004 0001             		move.b	#4,1(a0)
0000891A 117C 0004 0018             		move.b	#4,$18(a0)
00008920 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008926 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000892C 3168 0008 0032             		move.w	8(a0),$32(a0)
00008932 317C 0080 0026             		move.w	#$80,$26(a0)
00008938 7200                       		moveq	#0,d1
0000893A 1028 0028                  		move.b	$28(a0),d0
0000893E 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008942 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008944 5201                       		addq.b	#1,d1		; use frame #1
00008946 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000894C                            
0000894C                            Obj18_SetFrame:
0000894C 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008950                            
00008950                            Obj18_Solid:				; XREF: Obj18_Index
00008950 4A28 0038                  		tst.b	$38(a0)
00008954 6700                       		beq.s	loc_7EE0
00008956 5928 0038                  		subq.b	#4,$38(a0)
0000895A                            
0000895A                            loc_7EE0:
0000895A 7200                       		moveq	#0,d1
0000895C 1228 0019                  		move.b	$19(a0),d1
00008960 6100 F56C                  		bsr.w	PlatformObject
00008964                            
00008964                            Obj18_Action:				; XREF: Obj18_Index
00008964 6100 0000                  		bsr.w	Obj18_Move
00008968 6100 0000                  		bsr.w	Obj18_Nudge
0000896C 6100 0000                  		bsr.w	DisplaySprite
00008970 6000 0000                  		bra.w	Obj18_ChkDel
00008974                            ; ===========================================================================
00008974                            
00008974                            Obj18_Action2:				; XREF: Obj18_Index
00008974 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000897A 6700                       		beq.s	loc_7F06
0000897C 5828 0038                  		addq.b	#4,$38(a0)
00008980                            
00008980                            loc_7F06:
00008980 7200                       		moveq	#0,d1
00008982 1228 0019                  		move.b	$19(a0),d1
00008986 6100 F6BA                  		bsr.w	ExitPlatform
0000898A 3F28 0008                  		move.w	8(a0),-(sp)
0000898E 6100 0000                  		bsr.w	Obj18_Move
00008992 6100 0000                  		bsr.w	Obj18_Nudge
00008996 341F                       		move.w	(sp)+,d2
00008998 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000899C 6100 0000                  		bsr.w	DisplaySprite
000089A0 6000 0000                  		bra.w	Obj18_ChkDel
000089A4                            
000089A4 4E75                       		rts
000089A6                            
000089A6                            ; ---------------------------------------------------------------------------
000089A6                            ; Subroutine to	move platform slightly when you	stand on it
000089A6                            ; ---------------------------------------------------------------------------
000089A6                            
000089A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089A6                            
000089A6                            
000089A6                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000089A6 1028 0038                  		move.b	$38(a0),d0
000089AA 6100 A3DA                  		bsr.w	CalcSine
000089AE 323C 0400                  		move.w	#$400,d1
000089B2 C1C1                       		muls.w	d1,d0
000089B4 4840                       		swap	d0
000089B6 D068 002C                  		add.w	$2C(a0),d0
000089BA 3140 000C                  		move.w	d0,$C(a0)
000089BE 4E75                       		rts	
000089C0                            ; End of function Obj18_Nudge
000089C0                            
000089C0                            ; ---------------------------------------------------------------------------
000089C0                            ; Subroutine to	move platforms
000089C0                            ; ---------------------------------------------------------------------------
000089C0                            
000089C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089C0                            
000089C0                            
000089C0                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000089C0 7000                       		moveq	#0,d0
000089C2 1028 0028                  		move.b	$28(a0),d0
000089C6 0240 000F                  		andi.w	#$F,d0
000089CA D040                       		add.w	d0,d0
000089CC 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000089D0 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000089D4                            ; End of function Obj18_Move
000089D4                            
000089D4                            ; ===========================================================================
000089D4 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000089D8 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000089DC 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000089E0 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000089E4 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000089E8 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000089EC 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000089EE                            ; ===========================================================================
000089EE                            
000089EE                            Obj18_Type00:
000089EE 4E75                       		rts			; platform 00 doesn't move
000089F0                            ; ===========================================================================
000089F0                            
000089F0                            Obj18_Type05:
000089F0 3028 0032                  		move.w	$32(a0),d0
000089F4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000089F8 4401                       		neg.b	d1		; reverse platform-motion
000089FA 0601 0040                  		addi.b	#$40,d1
000089FE 6000                       		bra.s	Obj18_01_Move
00008A00                            ; ===========================================================================
00008A00                            
00008A00                            Obj18_Type01:
00008A00 3028 0032                  		move.w	$32(a0),d0
00008A04 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A08 0401 0040                  		subi.b	#$40,d1
00008A0C                            
00008A0C                            Obj18_01_Move:
00008A0C 4881                       		ext.w	d1
00008A0E D041                       		add.w	d1,d0
00008A10 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008A14 6000 0000                  		bra.w	Obj18_ChgMotion
00008A18                            ; ===========================================================================
00008A18                            
00008A18                            Obj18_Type0C:
00008A18 3028 0034                  		move.w	$34(a0),d0
00008A1C 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A20 4401                       		neg.b	d1		; reverse platform-motion
00008A22 0601 0030                  		addi.b	#$30,d1
00008A26 6000                       		bra.s	Obj18_02_Move
00008A28                            ; ===========================================================================
00008A28                            
00008A28                            Obj18_Type0B:
00008A28 3028 0034                  		move.w	$34(a0),d0
00008A2C 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A30 0401 0030                  		subi.b	#$30,d1
00008A34 6000                       		bra.s	Obj18_02_Move
00008A36                            ; ===========================================================================
00008A36                            
00008A36                            Obj18_Type06:
00008A36 3028 0034                  		move.w	$34(a0),d0
00008A3A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A3E 4401                       		neg.b	d1		; reverse platform-motion
00008A40 0601 0040                  		addi.b	#$40,d1
00008A44 6000                       		bra.s	Obj18_02_Move
00008A46                            ; ===========================================================================
00008A46                            
00008A46                            Obj18_Type02:
00008A46 3028 0034                  		move.w	$34(a0),d0
00008A4A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A4E 0401 0040                  		subi.b	#$40,d1
00008A52                            
00008A52                            Obj18_02_Move:
00008A52 4881                       		ext.w	d1
00008A54 D041                       		add.w	d1,d0
00008A56 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008A5A 6000 0000                  		bra.w	Obj18_ChgMotion
00008A5E                            ; ===========================================================================
00008A5E                            
00008A5E                            Obj18_Type03:
00008A5E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008A62 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008A64 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008A6A 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008A6C 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008A72                            
00008A72                            Obj18_03_NoMove:
00008A72 4E75                       		rts	
00008A74                            ; ===========================================================================
00008A74                            
00008A74                            Obj18_03_Wait:
00008A74 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008A78 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008A7A 317C 0020 003A             		move.w	#32,$3A(a0)
00008A80 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008A84 4E75                       		rts	
00008A86                            ; ===========================================================================
00008A86                            
00008A86                            Obj18_Type04:
00008A86 4A68 003A                  		tst.w	$3A(a0)
00008A8A 6700                       		beq.s	loc_8048
00008A8C 5368 003A                  		subq.w	#1,$3A(a0)
00008A90 6600                       		bne.s	loc_8048
00008A92 0828 0003 0022             		btst	#3,$22(a0)
00008A98 6700                       		beq.s	loc_8042
00008A9A 08E9 0001 0022             		bset	#1,$22(a1)
00008AA0 08A9 0003 0022             		bclr	#3,$22(a1)
00008AA6 137C 0002 0024             		move.b	#2,$24(a1)
00008AAC 08A8 0003 0022             		bclr	#3,$22(a0)
00008AB2 4228 0025                  		clr.b	$25(a0)
00008AB6 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008ABC                            
00008ABC                            loc_8042:
00008ABC 117C 0008 0024             		move.b	#8,$24(a0)
00008AC2                            
00008AC2                            loc_8048:
00008AC2 2628 002C                  		move.l	$2C(a0),d3
00008AC6 3028 0012                  		move.w	$12(a0),d0
00008ACA 48C0                       		ext.l	d0
00008ACC E180                       		asl.l	#8,d0
00008ACE D680                       		add.l	d0,d3
00008AD0 2143 002C                  		move.l	d3,$2C(a0)
00008AD4 0668 0038 0012             		addi.w	#$38,$12(a0)
00008ADA 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008ADE 0640 00E0                  		addi.w	#$E0,d0
00008AE2 B068 002C                  		cmp.w	$2C(a0),d0
00008AE6 6400                       		bcc.s	locret_8074
00008AE8 117C 0006 0024             		move.b	#6,$24(a0)
00008AEE                            
00008AEE                            locret_8074:
00008AEE 4E75                       		rts	
00008AF0                            ; ===========================================================================
00008AF0                            
00008AF0                            Obj18_Type07:
00008AF0 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008AF4 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008AF6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008AFA 7000                       		moveq	#0,d0
00008AFC 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008B00 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008B02 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008B06 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008B08 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008B0E                            
00008B0E                            Obj18_07_NoMove:
00008B0E 4E75                       		rts	
00008B10                            ; ===========================================================================
00008B10                            
00008B10                            Obj18_07_Wait:
00008B10 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008B14 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008B16 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008B1A 4E75                       		rts	
00008B1C                            ; ===========================================================================
00008B1C                            
00008B1C                            Obj18_Type08:
00008B1C 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008B20 3028 0034                  		move.w	$34(a0),d0
00008B24 0440 0200                  		subi.w	#$200,d0
00008B28 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008B2C 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008B2E 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008B32                            
00008B32                            Obj18_08_NoStop:
00008B32 4E75                       		rts	
00008B34                            ; ===========================================================================
00008B34                            
00008B34                            Obj18_Type0A:
00008B34 3028 0034                  		move.w	$34(a0),d0
00008B38 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008B3C 0401 0040                  		subi.b	#$40,d1
00008B40 4881                       		ext.w	d1
00008B42 E241                       		asr.w	#1,d1
00008B44 D041                       		add.w	d1,d0
00008B46 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008B4A                            
00008B4A                            Obj18_ChgMotion:
00008B4A 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008B50 4E75                       		rts	
00008B52                            ; ===========================================================================
00008B52                            
00008B52                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008B52 3028 0032                  		move.w	$32(a0),d0
00008B56 0240 FF80                  		andi.w	#$FF80,d0
00008B5A 3238 F700                  		move.w	($FFFFF700).w,d1
00008B5E 0441 0080                  		subi.w	#$80,d1
00008B62 0241 FF80                  		andi.w	#$FF80,d1
00008B66 9041                       		sub.w	d1,d0
00008B68 0C40 0280                  		cmpi.w	#$280,d0
00008B6C 6200                       		bhi.s	Obj18_Delete
00008B6E 4E75                       		rts	
00008B70                            ; ===========================================================================
00008B70                            
00008B70                            Obj18_Delete:				; XREF: Obj18_Index
00008B70 6000 0000                  		bra.w	DeleteObject
00008B74                            ; ===========================================================================
00008B74                            ; ---------------------------------------------------------------------------
00008B74                            ; Sprite mappings - unused
00008B74                            ; ---------------------------------------------------------------------------
00008B74                            Map_obj18x:
00008B74                            	include "_maps\obj18x.asm"
00008B74                            ; ---------------------------------------------------------------------------
00008B74                            ; Sprite mappings - unused
00008B74                            ; ---------------------------------------------------------------------------
00008B74 0000                       		dc.w byte_80FE-Map_obj18x
00008B76 0000                       		dc.w byte_8109-Map_obj18x
00008B78 02                         byte_80FE:	dc.b 2
00008B79 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008B7E F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008B83 0A                         byte_8109:	dc.b $A
00008B84 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008B89 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008B8E 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008B93 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008B98 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008B9D F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008BA2 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008BA7 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008BAC 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008BB1 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008BB6                            		even
00008BB6                            		even
00008BB6                            
00008BB6                            ; ---------------------------------------------------------------------------
00008BB6                            ; Sprite mappings - GHZ	platforms
00008BB6                            ; ---------------------------------------------------------------------------
00008BB6                            Map_obj18:
00008BB6                            	include "_maps\obj18ghz.asm"
00008BB6                            ; ---------------------------------------------------------------------------
00008BB6                            ; Sprite mappings - GHZ	platforms
00008BB6                            ; ---------------------------------------------------------------------------
00008BB6 0000                       		dc.w byte_8140-Map_obj18
00008BB8 0000                       		dc.w byte_8155-Map_obj18
00008BBA 04                         byte_8140:	dc.b 4
00008BBB F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008BC0 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008BC5 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008BCA F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008BCF 0A                         byte_8155:	dc.b $A
00008BD0 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008BD5 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008BDA 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008BDF 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008BE4 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008BE9 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008BEE 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008BF3 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008BF8 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008BFD 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008C02                            		even
00008C02                            		even
00008C02                            
00008C02                            ; ---------------------------------------------------------------------------
00008C02                            ; Sprite mappings - SYZ	platforms
00008C02                            ; ---------------------------------------------------------------------------
00008C02                            Map_obj18a:
00008C02                            	include "_maps\obj18syz.asm"
00008C02                            ; ---------------------------------------------------------------------------
00008C02                            ; Sprite mappings - SYZ	platforms
00008C02                            ; ---------------------------------------------------------------------------
00008C02 0000                       		dc.w byte_818A-Map_obj18a
00008C04 03                         byte_818A:	dc.b 3
00008C05 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008C0A F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008C0F F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008C14                            		even
00008C14                            		even
00008C14                            
00008C14                            ; ---------------------------------------------------------------------------
00008C14                            ; Sprite mappings - SLZ	platforms
00008C14                            ; ---------------------------------------------------------------------------
00008C14                            Map_obj18b:
00008C14                            	include "_maps\obj18slz.asm"
00008C14                            ; ---------------------------------------------------------------------------
00008C14                            ; Sprite mappings - SLZ	platforms
00008C14                            ; ---------------------------------------------------------------------------
00008C14 0000                       		dc.w byte_819C-Map_obj18b
00008C16 02                         byte_819C:	dc.b 2
00008C17 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008C1C F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008C22 00                         		even
00008C22 00                         		even
00008C22                            
00008C22                            ; ===========================================================================
00008C22                            ; ---------------------------------------------------------------------------
00008C22                            ; Object 19 - Pearto bombs
00008C22                            ; ---------------------------------------------------------------------------
00008C22                            Obj19:					; XREF: Obj_Index
00008C22 7000                       		moveq	#0,d0
00008C24 1028 0024                  		move.b	$24(a0),d0
00008C28 323B 0000                  		move.w	off_7070(pc,d0.w),d1
00008C2C 4EFB 1000                  		jmp	off_7070(pc,d1.w)
00008C30                            ; ---------------------------------------------------------------------------
00008C30                            
00008C30 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
00008C36                            ; ---------------------------------------------------------------------------
00008C36                            
00008C36                            loc_7076:
00008C36 5428 0024                  		addq.b	#2,$24(a0)
00008C3A 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
00008C42 317C 0480 0002             		move.w	#($9000/$20),2(a0)
00008C48 117C 0004 0001             		move.b	#4,1(a0)
00008C4E 117C 0003 0019             		move.b	#3,$19(a0)
00008C54 117C 0087 0020             		move.b	#$87,$20(a0)
00008C5A 117C 0008 0018             		move.b	#8,$18(a0)
00008C60 317C 0018 0030             		move.w	#$18,$30(a0)
00008C66                            
00008C66                            loc_70A6:
00008C66 0828 0007 0022             		btst	#7,$22(a0)
00008C6C 6600                       		bne.s	loc_70C2
00008C6E 4A68 0030                  		tst.w	$30(a0)
00008C72 6600                       		bne.s	loc_70D2
00008C74 4EB9 0000 0000             		jsr	ObjHitFloor
00008C7A 4A41                       		tst.w	d1
00008C7C 6A00                       		bpl.s	loc_70D6
00008C7E D368 000C                  		add.w	d1,$C(a0)
00008C82                            
00008C82                            loc_70C2:
00008C82 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
00008C86 117C 0000 0024             		move.b	#0,$24(a0)
00008C8C                            ; ---------------------------------------------------------------------------
00008C8C                            
00008C8C                            loc_70D2:
00008C8C 5368 0030                  		subq.w	#1,$30(a0)
00008C90                            
00008C90                            loc_70D6:
00008C90 6100 0000                  		bsr.w	ObjectFall
00008C94 6100 0000                  		bsr.w	DisplaySprite
00008C98 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008C9C 0640 00E0                  		addi.w	#$E0,d0
00008CA0 B068 000C                  		cmp.w	$C(a0),d0
00008CA4 6500                       		bcs.s	loc_70EE
00008CA6 4E75                       		rts
00008CA8                            ; ---------------------------------------------------------------------------
00008CA8                            
00008CA8                            loc_70EE:
00008CA8 6100 0000                  		bsr.w	DeleteObject
00008CAC 4E75                       		rts
00008CAE                            		
00008CAE                            Map_obj19:
00008CAE                            	include "_maps\obj19.asm"
00008CAE                            Map_02b4:
00008CAE 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
00008CB0 01                         Map_02b4_2: 	dc.b $1
00008CB1 F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
00008CB6                            	even
00008CB6                            	even
00008CB6                            ; ===========================================================================
00008CB6                            ; ---------------------------------------------------------------------------
00008CB6                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008CB6                            ; ---------------------------------------------------------------------------
00008CB6                            Map_obj48:
00008CB6                            	include "_maps\obj48.asm"
00008CB6                            ; ---------------------------------------------------------------------------
00008CB6                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008CB6                            ; ---------------------------------------------------------------------------
00008CB6 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008CBA 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008CBE 06                         byte_81B2:	dc.b 6
00008CBF F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008CC4 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008CC9 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008CCE E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008CD3 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008CD8 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008CDD 04                         byte_81D1:	dc.b 4
00008CDE E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008CE3 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008CE8 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008CED 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008CF2 04                         byte_81E6:	dc.b 4
00008CF3 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008CF8 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008CFD 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008D02 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008D07 04                         byte_81FB:	dc.b 4
00008D08 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008D0D E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008D12 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008D17 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008D1C                            		even
00008D1C                            		even
00008D1C                            
00008D1C                            ; ===========================================================================
00008D1C                            ; ---------------------------------------------------------------------------
00008D1C                            ; Object 1A - GHZ collapsing ledge
00008D1C                            ; ---------------------------------------------------------------------------
00008D1C                            
00008D1C                            Obj1A:					; XREF: Obj_Index
00008D1C 7000                       		moveq	#0,d0
00008D1E 1028 0024                  		move.b	$24(a0),d0
00008D22 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008D26 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008D2A                            ; ===========================================================================
00008D2A 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008D2E 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008D32 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008D36                            ; ===========================================================================
00008D36                            
00008D36                            Obj1A_Main:				; XREF: Obj1A_Index
00008D36 5428 0024                  		addq.b	#2,$24(a0)
00008D3A 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008D42 317C 4000 0002             		move.w	#$4000,2(a0)
00008D48 0028 0004 0001             		ori.b	#4,1(a0)
00008D4E 117C 0004 0018             		move.b	#4,$18(a0)
00008D54 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008D5A 117C 0064 0019             		move.b	#$64,$19(a0)
00008D60 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008D66 117C 0038 0016             		move.b	#$38,$16(a0)
00008D6C 08E8 0004 0001             		bset	#4,1(a0)
00008D72                            
00008D72                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008D72 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008D76 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008D78 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008D7C 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008D80 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008D84                            
00008D84                            Obj1A_Slope:
00008D84 323C 0030                  		move.w	#$30,d1
00008D88 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008D8E 6100 F212                  		bsr.w	SlopeObject
00008D92 6000 0000                  		bra.w	MarkObjGone
00008D96                            ; ===========================================================================
00008D96                            
00008D96                            Obj1A_Touch:				; XREF: Obj1A_Index
00008D96 4A28 0038                  		tst.b	$38(a0)
00008D9A 6700 0000                  		beq.w	loc_847A
00008D9E 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008DA4 5328 0038                  		subq.b	#1,$38(a0)
00008DA8                            
00008DA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DA8                            
00008DA8                            
00008DA8                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008DA8 323C 0030                  		move.w	#$30,d1
00008DAC 6100 F294                  		bsr.w	ExitPlatform
00008DB0 323C 0030                  		move.w	#$30,d1
00008DB4 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008DBA 3428 0008                  		move.w	8(a0),d2
00008DBE 6100 0000                  		bsr.w	SlopeObject2
00008DC2 6000 0000                  		bra.w	MarkObjGone
00008DC6                            ; End of function Obj1A_WalkOff
00008DC6                            
00008DC6                            ; ===========================================================================
00008DC6                            
00008DC6                            Obj1A_Display:				; XREF: Obj1A_Index
00008DC6 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008DCA 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008DCC 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008DD0 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008DD4 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008DD8 6000 0000                  		bra.w	DisplaySprite
00008DDC                            ; ===========================================================================
00008DDC                            
00008DDC                            loc_82D0:				; XREF: Obj1A_Display
00008DDC 5328 0038                  		subq.b	#1,$38(a0)
00008DE0 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008DE4 43F8 D000                  		lea	($FFFFD000).w,a1
00008DE8 0829 0003 0022             		btst	#3,$22(a1)
00008DEE 6700                       		beq.s	loc_82FC
00008DF0 4A28 0038                  		tst.b	$38(a0)
00008DF4 6600                       		bne.s	locret_8308
00008DF6 08A9 0003 0022             		bclr	#3,$22(a1)
00008DFC 08A9 0005 0022             		bclr	#5,$22(a1)
00008E02 137C 0001 001D             		move.b	#1,$1D(a1)
00008E08                            
00008E08                            loc_82FC:
00008E08 117C 0000 003A             		move.b	#0,$3A(a0)
00008E0E 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008E14                            
00008E14                            locret_8308:
00008E14 4E75                       		rts	
00008E16                            ; ===========================================================================
00008E16                            
00008E16                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008E16 6100 0000                  		bsr.w	ObjectFall
00008E1A 6100 0000                  		bsr.w	DisplaySprite
00008E1E 4A28 0001                  		tst.b	1(a0)
00008E22 6A00                       		bpl.s	Obj1A_Delete
00008E24 4E75                       		rts	
00008E26                            ; ===========================================================================
00008E26                            
00008E26                            Obj1A_Delete:				; XREF: Obj1A_Index
00008E26 6100 0000                  		bsr.w	DeleteObject
00008E2A 4E75                       		rts	
00008E2C                            ; ===========================================================================
00008E2C                            ; ---------------------------------------------------------------------------
00008E2C                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008E2C                            ; ---------------------------------------------------------------------------
00008E2C                            
00008E2C                            Obj53:					; XREF: Obj_Index
00008E2C 7000                       		moveq	#0,d0
00008E2E 1028 0024                  		move.b	$24(a0),d0
00008E32 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008E36 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008E3A                            ; ===========================================================================
00008E3A 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008E3E 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008E42 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008E46                            ; ===========================================================================
00008E46                            
00008E46                            Obj53_Main:				; XREF: Obj53_Index
00008E46 5428 0024                  		addq.b	#2,$24(a0)
00008E4A 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008E52 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008E58 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008E5E 6600                       		bne.s	Obj53_NotSLZ
00008E60 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008E66 5428 001A                  		addq.b	#2,$1A(a0)
00008E6A                            
00008E6A                            Obj53_NotSLZ:
00008E6A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008E70 6600                       		bne.s	Obj53_NotSBZ
00008E72 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008E78                            
00008E78                            Obj53_NotSBZ:
00008E78 0028 0004 0001             		ori.b	#4,1(a0)
00008E7E 117C 0004 0018             		move.b	#4,$18(a0)
00008E84 117C 0007 0038             		move.b	#7,$38(a0)
00008E8A 117C 0044 0019             		move.b	#$44,$19(a0)
00008E90                            
00008E90                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008E90 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008E94 6700                       		beq.s	Obj53_Solid	; if not, branch
00008E96 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008E9A 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008E9E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008EA2                            
00008EA2                            Obj53_Solid:
00008EA2 323C 0020                  		move.w	#$20,d1
00008EA6 6100 F026                  		bsr.w	PlatformObject
00008EAA 4A28 0028                  		tst.b	$28(a0)
00008EAE 6A00                       		bpl.s	Obj53_MarkAsGone
00008EB0 0829 0003 0022             		btst	#3,$22(a1)
00008EB6 6700                       		beq.s	Obj53_MarkAsGone
00008EB8 08A8 0000 0001             		bclr	#0,1(a0)
00008EBE 3029 0008                  		move.w	8(a1),d0
00008EC2 9068 0008                  		sub.w	8(a0),d0
00008EC6 6400                       		bcc.s	Obj53_MarkAsGone
00008EC8 08E8 0000 0001             		bset	#0,1(a0)
00008ECE                            
00008ECE                            Obj53_MarkAsGone:
00008ECE 6000 0000                  		bra.w	MarkObjGone
00008ED2                            ; ===========================================================================
00008ED2                            
00008ED2                            Obj53_Touch:				; XREF: Obj53_Index
00008ED2 4A28 0038                  		tst.b	$38(a0)
00008ED6 6700 0000                  		beq.w	loc_8458
00008EDA 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008EE0 5328 0038                  		subq.b	#1,$38(a0)
00008EE4                            
00008EE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EE4                            
00008EE4                            
00008EE4                            Obj53_WalkOff:				; XREF: Obj53_Index
00008EE4 323C 0020                  		move.w	#$20,d1
00008EE8 6100 F158                  		bsr.w	ExitPlatform
00008EEC 3428 0008                  		move.w	8(a0),d2
00008EF0 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008EF4 6000 0000                  		bra.w	MarkObjGone
00008EF8                            ; End of function Obj53_WalkOff
00008EF8                            
00008EF8                            ; ===========================================================================
00008EF8                            
00008EF8                            Obj53_Display:				; XREF: Obj53_Index
00008EF8 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008EFC 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008EFE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008F02 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008F06 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008F0A 6000 0000                  		bra.w	DisplaySprite
00008F0E                            ; ===========================================================================
00008F0E                            
00008F0E                            loc_8402:
00008F0E 5328 0038                  		subq.b	#1,$38(a0)
00008F12 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008F16 43F8 D000                  		lea	($FFFFD000).w,a1
00008F1A 0829 0003 0022             		btst	#3,$22(a1)
00008F20 6700                       		beq.s	loc_842E
00008F22 4A28 0038                  		tst.b	$38(a0)
00008F26 6600                       		bne.s	locret_843A
00008F28 08A9 0003 0022             		bclr	#3,$22(a1)
00008F2E 08A9 0005 0022             		bclr	#5,$22(a1)
00008F34 137C 0001 001D             		move.b	#1,$1D(a1)
00008F3A                            
00008F3A                            loc_842E:
00008F3A 117C 0000 003A             		move.b	#0,$3A(a0)
00008F40 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008F46                            
00008F46                            locret_843A:
00008F46 4E75                       		rts	
00008F48                            ; ===========================================================================
00008F48                            
00008F48                            Obj53_TimeZero:				; XREF: Obj53_Display
00008F48 6100 0000                  		bsr.w	ObjectFall
00008F4C 6100 0000                  		bsr.w	DisplaySprite
00008F50 4A28 0001                  		tst.b	1(a0)
00008F54 6A00                       		bpl.s	Obj53_Delete
00008F56 4E75                       		rts	
00008F58                            ; ===========================================================================
00008F58                            
00008F58                            Obj53_Delete:				; XREF: Obj53_Index
00008F58 6100 0000                  		bsr.w	DeleteObject
00008F5C 4E75                       		rts	
00008F5E                            ; ===========================================================================
00008F5E                            
00008F5E                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008F5E 117C 0000 003A             		move.b	#0,$3A(a0)
00008F64                            
00008F64                            loc_8458:				; XREF: Obj53_Touch
00008F64 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008F6A 0828 0000 0028             		btst	#0,$28(a0)
00008F70 6700                       		beq.s	loc_846C
00008F72 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008F78                            
00008F78                            loc_846C:
00008F78 7207                       		moveq	#7,d1
00008F7A 5228 001A                  		addq.b	#1,$1A(a0)
00008F7E 6000                       		bra.s	loc_8486
00008F80                            ; ===========================================================================
00008F80                            
00008F80                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008F80 117C 0000 003A             		move.b	#0,$3A(a0)
00008F86                            
00008F86                            loc_847A:				; XREF: Obj1A_Touch
00008F86 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008F8C 7218                       		moveq	#$18,d1
00008F8E 5428 001A                  		addq.b	#2,$1A(a0)
00008F92                            
00008F92                            loc_8486:				; XREF: Obj53_Collapse
00008F92 7000                       		moveq	#0,d0
00008F94 1028 001A                  		move.b	$1A(a0),d0
00008F98 D040                       		add.w	d0,d0
00008F9A 2668 0004                  		movea.l	4(a0),a3
00008F9E D6F3 0000                  		adda.w	(a3,d0.w),a3
00008FA2 524B                       		addq.w	#1,a3
00008FA4 08E8 0005 0001             		bset	#5,1(a0)
00008FAA 1810                       		move.b	0(a0),d4
00008FAC 1A28 0001                  		move.b	1(a0),d5
00008FB0 2248                       		movea.l	a0,a1
00008FB2 6000                       		bra.s	loc_84B2
00008FB4                            ; ===========================================================================
00008FB4                            
00008FB4                            loc_84AA:
00008FB4 6100 0000                  		bsr.w	SingleObjLoad
00008FB8 6600                       		bne.s	loc_84F2
00008FBA 5A4B                       		addq.w	#5,a3
00008FBC                            
00008FBC                            loc_84B2:
00008FBC 137C 0006 0024             		move.b	#6,$24(a1)
00008FC2 1284                       		move.b	d4,0(a1)
00008FC4 234B 0004                  		move.l	a3,4(a1)
00008FC8 1345 0001                  		move.b	d5,1(a1)
00008FCC 3368 0008 0008             		move.w	8(a0),8(a1)
00008FD2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008FD8 3368 0002 0002             		move.w	2(a0),2(a1)
00008FDE 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008FE4 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008FEA 135C 0038                  		move.b	(a4)+,$38(a1)
00008FEE B3C8                       		cmpa.l	a0,a1
00008FF0 6400                       		bcc.s	loc_84EE
00008FF2 6100 0000                  		bsr.w	DisplaySprite2
00008FF6                            
00008FF6                            loc_84EE:
00008FF6 51C9 FFBC                  		dbf	d1,loc_84AA
00008FFA                            
00008FFA                            loc_84F2:
00008FFA 6100 0000                  		bsr.w	DisplaySprite
00008FFE 303C 00B9                  		move.w	#$B9,d0
00009002 4EF9 0000 15EC             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00009008                            ; ===========================================================================
00009008                            ; ---------------------------------------------------------------------------
00009008                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009008                            ; ---------------------------------------------------------------------------
00009008 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009018 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009022 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000902A 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009032                            
00009032                            ; ---------------------------------------------------------------------------
00009032                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009032                            ; ---------------------------------------------------------------------------
00009032                            
00009032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009032                            
00009032                            
00009032                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00009032 43F8 D000                  		lea	($FFFFD000).w,a1
00009036 0829 0003 0022             		btst	#3,$22(a1)
0000903C 6700                       		beq.s	locret_856E
0000903E 3029 0008                  		move.w	8(a1),d0
00009042 9068 0008                  		sub.w	8(a0),d0
00009046 D041                       		add.w	d1,d0
00009048 E248                       		lsr.w	#1,d0
0000904A 0828 0000 0001             		btst	#0,1(a0)
00009050 6700                       		beq.s	loc_854E
00009052 4640                       		not.w	d0
00009054 D041                       		add.w	d1,d0
00009056                            
00009056                            loc_854E:
00009056 7200                       		moveq	#0,d1
00009058 1232 0000                  		move.b	(a2,d0.w),d1
0000905C 3028 000C                  		move.w	$C(a0),d0
00009060 9041                       		sub.w	d1,d0
00009062 7200                       		moveq	#0,d1
00009064 1229 0016                  		move.b	$16(a1),d1
00009068 9041                       		sub.w	d1,d0
0000906A 3340 000C                  		move.w	d0,$C(a1)
0000906E 9468 0008                  		sub.w	8(a0),d2
00009072 9569 0008                  		sub.w	d2,8(a1)
00009076                            
00009076                            locret_856E:
00009076 4E75                       		rts	
00009078                            ; End of function SlopeObject2
00009078                            
00009078                            ; ===========================================================================
00009078                            ; ---------------------------------------------------------------------------
00009078                            ; Collision data for GHZ collapsing ledge
00009078                            ; ---------------------------------------------------------------------------
00009078                            Obj1A_SlopeData:
00009078                            		incbin	misc\ghzledge.bin
000090A8                            		even
000090A8                            
000090A8                            ; ---------------------------------------------------------------------------
000090A8                            ; Sprite mappings - GHZ	collapsing ledge
000090A8                            ; ---------------------------------------------------------------------------
000090A8                            Map_obj1A:
000090A8                            	include "_maps\obj1A.asm"
000090A8                            ; ---------------------------------------------------------------------------
000090A8                            ; Sprite mappings - GHZ	collapsing ledge
000090A8                            ; ---------------------------------------------------------------------------
000090A8 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000090AC 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000090B0 10                         byte_85A8:	dc.b $10
000090B1 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000090B6 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000090BB E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000090C0 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000090C5 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000090CA D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000090CF F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000090D4 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000090D9 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000090DE F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000090E3 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000090E8 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000090ED 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000090F2 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000090F7 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000090FC 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009101 10                         byte_85F9:	dc.b $10
00009102 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009107 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000910C E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009111 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009116 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000911B D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009120 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009125 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000912A F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000912F F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009134 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009139 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000913E 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009143 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009148 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000914D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009152 19                         byte_864A:	dc.b $19
00009153 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00009158 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000915D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009162 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009167 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000916C E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009171 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009176 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000917B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009180 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009185 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000918A F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000918F F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009194 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009199 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000919E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000091A3 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000091A8 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000091AD 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000091B2 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000091B7 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000091BC 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000091C1 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000091C6 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000091CB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000091D0 19                         byte_86C8:	dc.b $19
000091D1 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
000091D6 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000091DB D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000091E0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000091E5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000091EA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000091EF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000091F4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000091F9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000091FE D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009203 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009208 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000920D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009212 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009217 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000921C F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009221 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009226 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000922B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009230 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009235 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000923A 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000923F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009244 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009249 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000924E                            		even
0000924E                            		even
0000924E                            
0000924E                            ; ---------------------------------------------------------------------------
0000924E                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000924E                            ; ---------------------------------------------------------------------------
0000924E                            Map_obj53:
0000924E                            	include "_maps\obj53.asm"
0000924E                            ; ---------------------------------------------------------------------------
0000924E                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000924E                            ; ---------------------------------------------------------------------------
0000924E 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00009252 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00009256 04                         byte_874E:	dc.b 4
00009257 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000925C 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00009261 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009266 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000926B 08                         byte_8763:	dc.b 8
0000926C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009271 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00009276 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000927B F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00009280 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00009285 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000928A 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000928F 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00009294 04                         byte_878C:	dc.b 4
00009295 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000929A 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000929F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000092A4 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
000092A9 08                         byte_87A1:	dc.b 8
000092AA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000092AF F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
000092B4 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000092B9 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
000092BE 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
000092C3 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
000092C8 0805 0008 00               		dc.b 8,	5, 0, 8, 0
000092CD 0805 000C 10               		dc.b 8,	5, 0, $C, $10
000092D2                            		even
000092D2                            		even
000092D2                            
000092D2                            ; ===========================================================================
000092D2                            ; ---------------------------------------------------------------------------
000092D2                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
000092D2                            ; ---------------------------------------------------------------------------
000092D2                            
000092D2                            Obj1C:					; XREF: Obj_Index
000092D2 7000                       		moveq	#0,d0
000092D4 1028 0024                  		move.b	$24(a0),d0
000092D8 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
000092DC 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
000092E0                            ; ===========================================================================
000092E0 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
000092E2 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
000092E4                            ; ===========================================================================
000092E4                            
000092E4                            Obj1C_Main:				; XREF: Obj1C_Index
000092E4 5428 0024                  		addq.b	#2,$24(a0)
000092E8 7000                       		moveq	#0,d0
000092EA 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
000092EE C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
000092F2 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
000092F6 2159 0004                  		move.l	(a1)+,4(a0)
000092FA 3159 0002                  		move.w	(a1)+,2(a0)
000092FE 0028 0004 0001             		ori.b	#4,1(a0)
00009304 1159 001A                  		move.b	(a1)+,$1A(a0)
00009308 1159 0019                  		move.b	(a1)+,$19(a0)
0000930C 1159 0018                  		move.b	(a1)+,$18(a0)
00009310 1159 0020                  		move.b	(a1)+,$20(a0)
00009314                            
00009314                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00009314 3028 0008                  		move.w	8(a0),d0
00009318 0240 FF80                  		andi.w	#$FF80,d0
0000931C 3238 F700                  		move.w	($FFFFF700).w,d1
00009320 0441 0080                  		subi.w	#$80,d1
00009324 0241 FF80                  		andi.w	#$FF80,d1
00009328 9041                       		sub.w	d1,d0
0000932A 0C40 0280                  		cmpi.w	#$280,d0
0000932E 6200 0000                  		bhi.w	DeleteObject
00009332 6000 0000                  		bra.w	DisplaySprite
00009336                            ; ===========================================================================
00009336                            ; ---------------------------------------------------------------------------
00009336                            ; Variables for	object $1C are stored in an array
00009336                            ; ---------------------------------------------------------------------------
00009336 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
0000933A 44D8                       		dc.w $44D8		; VRAM setting
0000933C 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00009340 0000 0000                  		dc.l Map_obj1C
00009344 44D8                       		dc.w $44D8
00009346 0008 0200                  		dc.b 0,	8, 2, 0
0000934A 0000 0000                  		dc.l Map_obj1C
0000934E 44D8                       		dc.w $44D8
00009350 0008 0200                  		dc.b 0,	8, 2, 0
00009354 0000 83B6                  		dc.l Map_obj11
00009358 438E                       		dc.w $438E
0000935A 0110 0100                  		dc.b 1,	$10, 1,	0
0000935E                            ; ---------------------------------------------------------------------------
0000935E                            ; Sprite mappings - SLZ	lava thrower
0000935E                            ; ---------------------------------------------------------------------------
0000935E                            Map_obj1C:
0000935E                            	include "_maps\obj1C.asm"
0000935E                            ; ---------------------------------------------------------------------------
0000935E                            ; Sprite mappings - SLZ	lava thrower
0000935E                            ; ---------------------------------------------------------------------------
0000935E 0000                       		dc.w byte_8858-Map_obj1C
00009360 01                         byte_8858:	dc.b 1
00009361 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00009366                            		even
00009366                            		even
00009366                            
00009366                            ; ===========================================================================
00009366                            ; ---------------------------------------------------------------------------
00009366                            ; Object 1D - switch that activates when Sonic touches it
00009366                            ; (this	is not used anywhere in	the game)
00009366                            ; ---------------------------------------------------------------------------
00009366                            
00009366                            Obj1D:					; XREF: Obj_Index
00009366 7000                       		moveq	#0,d0
00009368 1028 0024                  		move.b	$24(a0),d0
0000936C 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00009370 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00009374                            ; ===========================================================================
00009374 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00009376 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009378 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000937A                            ; ===========================================================================
0000937A                            
0000937A                            Obj1D_Main:				; XREF: Obj1D_Index
0000937A 5428 0024                  		addq.b	#2,$24(a0)
0000937E 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00009386 317C 4000 0002             		move.w	#$4000,2(a0)
0000938C 117C 0004 0001             		move.b	#4,1(a0)
00009392 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009398 117C 0010 0019             		move.b	#$10,$19(a0)
0000939E 117C 0005 0018             		move.b	#5,$18(a0)
000093A4                            
000093A4                            Obj1D_Action:				; XREF: Obj1D_Index
000093A4 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
000093AA 323C 0010                  		move.w	#$10,d1
000093AE 6100 0000                  		bsr.w	Obj1D_ChkTouch
000093B2 6700                       		beq.s	Obj1D_ChkDel
000093B4 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
000093B8 7001                       		moveq	#1,d0
000093BA 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
000093BE                            
000093BE                            Obj1D_ChkDel:
000093BE 6100 0000                  		bsr.w	DisplaySprite
000093C2 3028 0008                  		move.w	8(a0),d0
000093C6 0240 FF80                  		andi.w	#$FF80,d0
000093CA 3238 F700                  		move.w	($FFFFF700).w,d1
000093CE 0441 0080                  		subi.w	#$80,d1
000093D2 0241 FF80                  		andi.w	#$FF80,d1
000093D6 9041                       		sub.w	d1,d0
000093D8 0C40 0280                  		cmpi.w	#$280,d0
000093DC 6200 0000                  		bhi.w	Obj1D_Delete
000093E0 4E75                       		rts	
000093E2                            ; ===========================================================================
000093E2                            
000093E2                            Obj1D_Delete:				; XREF: Obj1D_Index
000093E2 6100 0000                  		bsr.w	DeleteObject
000093E6 4E75                       		rts	
000093E8                            ; ---------------------------------------------------------------------------
000093E8                            ; Subroutine to	check if Sonic touches the object
000093E8                            ; ---------------------------------------------------------------------------
000093E8                            
000093E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000093E8                            
000093E8                            
000093E8                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
000093E8 43F8 D000                  		lea	($FFFFD000).w,a1
000093EC 3029 0008                  		move.w	8(a1),d0
000093F0 9068 0008                  		sub.w	8(a0),d0
000093F4 D041                       		add.w	d1,d0
000093F6 6B00                       		bmi.s	loc_8918
000093F8 D241                       		add.w	d1,d1
000093FA B041                       		cmp.w	d1,d0
000093FC 6400                       		bcc.s	loc_8918
000093FE 3429 000C                  		move.w	$C(a1),d2
00009402 1229 0016                  		move.b	$16(a1),d1
00009406 4881                       		ext.w	d1
00009408 D242                       		add.w	d2,d1
0000940A 3028 000C                  		move.w	$C(a0),d0
0000940E 0440 0010                  		subi.w	#$10,d0
00009412 9041                       		sub.w	d1,d0
00009414 6200                       		bhi.s	loc_8918
00009416 0C40 FFF0                  		cmpi.w	#-$10,d0
0000941A 6500                       		bcs.s	loc_8918
0000941C 70FF                       		moveq	#-1,d0
0000941E 4E75                       		rts	
00009420                            ; ===========================================================================
00009420                            
00009420                            loc_8918:
00009420 7000                       		moveq	#0,d0
00009422 4E75                       		rts	
00009424                            ; End of function Obj1D_ChkTouch
00009424                            
00009424                            ; ===========================================================================
00009424                            ; ---------------------------------------------------------------------------
00009424                            ; Sprite mappings - object 1D
00009424                            ; ---------------------------------------------------------------------------
00009424                            Map_obj1D:
00009424                            	include "_maps\obj1D.asm"
00009424                            ; ---------------------------------------------------------------------------
00009424                            ; Sprite mappings - object 1D
00009424                            ; ---------------------------------------------------------------------------
00009424 0000                       		dc.w byte_891E-Map_obj1D
00009426 04                         byte_891E:	dc.b 4
00009427 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000942C 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00009431 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00009436 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000943C 00                         		even
0000943C 00                         		even
0000943C                            
0000943C                            ; ===========================================================================
0000943C                            ; ---------------------------------------------------------------------------
0000943C                            ; Object 2A - doors (SBZ)
0000943C                            ; ---------------------------------------------------------------------------
0000943C                            
0000943C                            Obj2A:					; XREF: Obj_Index
0000943C 7000                       		moveq	#0,d0
0000943E 1028 0024                  		move.b	$24(a0),d0
00009442 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00009446 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0000944A                            ; ===========================================================================
0000944A 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
0000944C 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0000944E                            ; ===========================================================================
0000944E                            
0000944E                            Obj2A_Main:				; XREF: Obj2A_Index
0000944E 5428 0024                  		addq.b	#2,$24(a0)
00009452 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000945A 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009460 0028 0004 0001             		ori.b	#4,1(a0)
00009466 117C 0008 0019             		move.b	#8,$19(a0)
0000946C 117C 0004 0018             		move.b	#4,$18(a0)
00009472                            
00009472                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009472 323C 0040                  		move.w	#$40,d1
00009476 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000947A 3038 D008                  		move.w	($FFFFD008).w,d0
0000947E D041                       		add.w	d1,d0
00009480 B068 0008                  		cmp.w	8(a0),d0
00009484 6500                       		bcs.s	Obj2A_Animate
00009486 9041                       		sub.w	d1,d0
00009488 9041                       		sub.w	d1,d0
0000948A B068 0008                  		cmp.w	8(a0),d0
0000948E 6400                       		bcc.s	Obj2A_Animate
00009490 D041                       		add.w	d1,d0
00009492 B068 0008                  		cmp.w	8(a0),d0
00009496 6400                       		bcc.s	loc_899A
00009498 0828 0000 0022             		btst	#0,$22(a0)
0000949E 6600                       		bne.s	Obj2A_Animate
000094A0 6000                       		bra.s	Obj2A_Open
000094A2                            ; ===========================================================================
000094A2                            
000094A2                            loc_899A:				; XREF: Obj2A_OpenShut
000094A2 0828 0000 0022             		btst	#0,$22(a0)
000094A8 6700                       		beq.s	Obj2A_Animate
000094AA                            
000094AA                            Obj2A_Open:				; XREF: Obj2A_OpenShut
000094AA 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
000094B0                            
000094B0                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
000094B0 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
000094B6 6100 0000                  		bsr.w	AnimateSprite
000094BA 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000094BE 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
000094C0 323C 0011                  		move.w	#$11,d1
000094C4 343C 0020                  		move.w	#$20,d2
000094C8 3602                       		move.w	d2,d3
000094CA 5243                       		addq.w	#1,d3
000094CC 3828 0008                  		move.w	8(a0),d4
000094D0 6100 0000                  		bsr.w	SolidObject
000094D4                            
000094D4                            Obj2A_MarkAsUsed:
000094D4 6000 0000                  		bra.w	MarkObjGone
000094D8                            ; ===========================================================================
000094D8                            Ani_obj2A:
000094D8                            	include "_anim\obj2A.asm"
000094D8                            ; ---------------------------------------------------------------------------
000094D8                            ; Animation script - doors (SBZ)
000094D8                            ; ---------------------------------------------------------------------------
000094D8 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
000094DA 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
000094DC 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
000094E8 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
000094F4                            		even
000094F4                            		even
000094F4                            
000094F4                            ; ---------------------------------------------------------------------------
000094F4                            ; Sprite mappings - doors (SBZ)
000094F4                            ; ---------------------------------------------------------------------------
000094F4                            Map_obj2A:
000094F4                            	include "_maps\obj2A.asm"
000094F4                            ; ---------------------------------------------------------------------------
000094F4                            ; Sprite mappings - doors (SBZ)
000094F4                            ; ---------------------------------------------------------------------------
000094F4 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
000094F8 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
000094FC 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009500 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009504 0000                       		dc.w byte_8A56-Map_obj2A
00009506 02                         byte_89FE:	dc.b 2
00009507 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000950C 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009511 02                         byte_8A09:	dc.b 2
00009512 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009517 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0000951C 02                         byte_8A14:	dc.b 2
0000951D D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009522 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009527 02                         byte_8A1F:	dc.b 2
00009528 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
0000952D 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009532 02                         byte_8A2A:	dc.b 2
00009533 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009538 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
0000953D 02                         byte_8A35:	dc.b 2
0000953E CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009543 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009548 02                         byte_8A40:	dc.b 2
00009549 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
0000954E 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009553 02                         byte_8A4B:	dc.b 2
00009554 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009559 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
0000955E 02                         byte_8A56:	dc.b 2
0000955F C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009564 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0000956A 00                         		even
0000956A 00                         		even
0000956A                            
0000956A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000956A                            
0000956A                            
0000956A                            Obj44_SolidWall:			; XREF: Obj44_Solid
0000956A 6100 0000                  		bsr.w	Obj44_SolidWall2
0000956E 6700                       		beq.s	loc_8AA8
00009570 6B00 0000                  		bmi.w	loc_8AC4
00009574 4A40                       		tst.w	d0
00009576 6700 0000                  		beq.w	loc_8A92
0000957A 6B00                       		bmi.s	loc_8A7C
0000957C 4A69 0010                  		tst.w	$10(a1)
00009580 6B00                       		bmi.s	loc_8A92
00009582 6000                       		bra.s	loc_8A82
00009584                            ; ===========================================================================
00009584                            
00009584                            loc_8A7C:
00009584 4A69 0010                  		tst.w	$10(a1)
00009588 6A00                       		bpl.s	loc_8A92
0000958A                            
0000958A                            loc_8A82:
0000958A 9169 0008                  		sub.w	d0,8(a1)
0000958E 337C 0000 0014             		move.w	#0,$14(a1)
00009594 337C 0000 0010             		move.w	#0,$10(a1)
0000959A                            
0000959A                            loc_8A92:
0000959A 0829 0001 0022             		btst	#1,$22(a1)
000095A0 6600                       		bne.s	loc_8AB6
000095A2 08E9 0005 0022             		bset	#5,$22(a1)
000095A8 08E8 0005 0022             		bset	#5,$22(a0)
000095AE 4E75                       		rts	
000095B0                            ; ===========================================================================
000095B0                            
000095B0                            loc_8AA8:
000095B0 0828 0005 0022             		btst	#5,$22(a0)
000095B6 6700                       		beq.s	locret_8AC2
000095B8 337C 0001 001C             		move.w	#1,$1C(a1)
000095BE                            
000095BE                            loc_8AB6:
000095BE 08A8 0005 0022             		bclr	#5,$22(a0)
000095C4 08A9 0005 0022             		bclr	#5,$22(a1)
000095CA                            
000095CA                            locret_8AC2:
000095CA 4E75                       		rts	
000095CC                            ; ===========================================================================
000095CC                            
000095CC                            loc_8AC4:
000095CC 4A69 0012                  		tst.w	$12(a1)
000095D0 6A00                       		bpl.s	locret_8AD8
000095D2 4A43                       		tst.w	d3
000095D4 6A00                       		bpl.s	locret_8AD8
000095D6 9769 000C                  		sub.w	d3,$C(a1)
000095DA 337C 0000 0012             		move.w	#0,$12(a1)
000095E0                            
000095E0                            locret_8AD8:
000095E0 4E75                       		rts	
000095E2                            ; End of function Obj44_SolidWall
000095E2                            
000095E2                            
000095E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095E2                            
000095E2                            
000095E2                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
000095E2 43F8 D000                  		lea	($FFFFD000).w,a1
000095E6 3029 0008                  		move.w	8(a1),d0
000095EA 9068 0008                  		sub.w	8(a0),d0
000095EE D041                       		add.w	d1,d0
000095F0 6B00                       		bmi.s	loc_8B48
000095F2 3601                       		move.w	d1,d3
000095F4 D643                       		add.w	d3,d3
000095F6 B043                       		cmp.w	d3,d0
000095F8 6200                       		bhi.s	loc_8B48
000095FA 1629 0016                  		move.b	$16(a1),d3
000095FE 4883                       		ext.w	d3
00009600 D443                       		add.w	d3,d2
00009602 3629 000C                  		move.w	$C(a1),d3
00009606 9668 000C                  		sub.w	$C(a0),d3
0000960A D642                       		add.w	d2,d3
0000960C 6B00                       		bmi.s	loc_8B48
0000960E 3802                       		move.w	d2,d4
00009610 D844                       		add.w	d4,d4
00009612 B644                       		cmp.w	d4,d3
00009614 6400                       		bcc.s	loc_8B48
00009616 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000961A 6B00                       		bmi.s	loc_8B48
0000961C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009622 6400                       		bcc.s	loc_8B48
00009624 4A78 FE08                  		tst.w	($FFFFFE08).w
00009628 6600                       		bne.s	loc_8B48
0000962A 3A00                       		move.w	d0,d5
0000962C B240                       		cmp.w	d0,d1
0000962E 6400                       		bcc.s	loc_8B30
00009630 D241                       		add.w	d1,d1
00009632 9041                       		sub.w	d1,d0
00009634 3A00                       		move.w	d0,d5
00009636 4445                       		neg.w	d5
00009638                            
00009638                            loc_8B30:
00009638 3203                       		move.w	d3,d1
0000963A B443                       		cmp.w	d3,d2
0000963C 6400                       		bcc.s	loc_8B3C
0000963E 9644                       		sub.w	d4,d3
00009640 3203                       		move.w	d3,d1
00009642 4441                       		neg.w	d1
00009644                            
00009644                            loc_8B3C:
00009644 BA41                       		cmp.w	d1,d5
00009646 6200                       		bhi.s	loc_8B44
00009648 7801                       		moveq	#1,d4
0000964A 4E75                       		rts	
0000964C                            ; ===========================================================================
0000964C                            
0000964C                            loc_8B44:
0000964C 78FF                       		moveq	#-1,d4
0000964E 4E75                       		rts	
00009650                            ; ===========================================================================
00009650                            
00009650                            loc_8B48:
00009650 7800                       		moveq	#0,d4
00009652 4E75                       		rts	
00009654                            ; End of function Obj44_SolidWall2
00009654                            
00009654                            ; ===========================================================================
00009654                            ; ---------------------------------------------------------------------------
00009654                            ; Object 1E - Ball Hog enemy (SBZ)
00009654                            ; ---------------------------------------------------------------------------
00009654                            
00009654                            Obj1E:					; XREF: Obj_Index
00009654 7000                       		moveq	#0,d0
00009656 1028 0024                  		move.b	$24(a0),d0
0000965A 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000965E 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009662                            ; ===========================================================================
00009662 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009664 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009666                            ; ===========================================================================
00009666                            
00009666                            Obj1E_Main:				; XREF: Obj1E_Index
00009666 117C 0013 0016             		move.b	#$13,$16(a0)
0000966C 117C 0008 0017             		move.b	#8,$17(a0)
00009672 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000967A 317C 2302 0002             		move.w	#$2302,2(a0)
00009680 117C 0004 0001             		move.b	#4,1(a0)
00009686 117C 0004 0018             		move.b	#4,$18(a0)
0000968C 117C 0005 0020             		move.b	#5,$20(a0)
00009692 117C 000C 0019             		move.b	#$C,$19(a0)
00009698 6100 0000                  		bsr.w	ObjectFall
0000969C 4EB9 0000 0000             		jsr	ObjHitFloor
000096A2 4A41                       		tst.w	d1
000096A4 6A00                       		bpl.s	locret_8BAC
000096A6 D368 000C                  		add.w	d1,$C(a0)
000096AA 317C 0000 0012             		move.w	#0,$12(a0)
000096B0 5428 0024                  		addq.b	#2,$24(a0)
000096B4                            
000096B4                            locret_8BAC:
000096B4 4E75                       		rts	
000096B6                            ; ===========================================================================
000096B6                            
000096B6                            Obj1E_Action:				; XREF: Obj1E_Index
000096B6 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
000096BC 6100 0000                  		bsr.w	AnimateSprite
000096C0 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
000096C6 6600                       		bne.s	Obj1E_SetBall	; if not, branch
000096C8 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
000096CC 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
000096CE 6000                       		bra.s	Obj1E_MarkAsGone
000096D0                            ; ===========================================================================
000096D0                            
000096D0                            Obj1E_SetBall:				; XREF: Obj1E_Action
000096D0 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
000096D4                            
000096D4                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
000096D4 6000 0000                  		bra.w	MarkObjGone
000096D8                            ; ===========================================================================
000096D8                            
000096D8                            Obj1E_MakeBall:				; XREF: Obj1E_Action
000096D8 117C 0001 0032             		move.b	#1,$32(a0)
000096DE 6100 0000                  		bsr.w	SingleObjLoad
000096E2 6600                       		bne.s	loc_8C1A
000096E4 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
000096E8 3368 0008 0008             		move.w	8(a0),8(a1)
000096EE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000096F4 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
000096FA 337C 0000 0012             		move.w	#0,$12(a1)
00009700 70FC                       		moveq	#-4,d0
00009702 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009708 6700                       		beq.s	loc_8C0A	; if not, branch
0000970A 4440                       		neg.w	d0
0000970C 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009710                            
00009710                            loc_8C0A:
00009710 D169 0008                  		add.w	d0,8(a1)
00009714 0669 000C 000C             		addi.w	#$C,$C(a1)
0000971A 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009720                            
00009720                            loc_8C1A:
00009720 60B2                       		bra.s	Obj1E_MarkAsGone
00009722                            ; ===========================================================================
00009722                            ; ---------------------------------------------------------------------------
00009722                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009722                            ; ---------------------------------------------------------------------------
00009722                            
00009722                            Obj20:					; XREF: Obj_Index
00009722 7000                       		moveq	#0,d0
00009724 1028 0024                  		move.b	$24(a0),d0
00009728 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000972C 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009730                            ; ===========================================================================
00009730 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009732 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009734                            ; ===========================================================================
00009734                            
00009734                            Obj20_Main:				; XREF: Obj20_Index
00009734 5428 0024                  		addq.b	#2,$24(a0)
00009738 117C 0007 0016             		move.b	#7,$16(a0)
0000973E 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009746 317C 2302 0002             		move.w	#$2302,2(a0)
0000974C 117C 0004 0001             		move.b	#4,1(a0)
00009752 117C 0003 0018             		move.b	#3,$18(a0)
00009758 117C 0087 0020             		move.b	#$87,$20(a0)
0000975E 117C 0008 0019             		move.b	#8,$19(a0)
00009764 7000                       		moveq	#0,d0
00009766 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000976A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000976E 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009772 117C 0004 001A             		move.b	#4,$1A(a0)
00009778                            
00009778                            Obj20_Bounce:				; XREF: Obj20_Index
00009778 4EB9 0000 0000             		jsr	ObjectFall
0000977E 4A68 0012                  		tst.w	$12(a0)
00009782 6B00                       		bmi.s	Obj20_ChkExplode
00009784 4EB9 0000 0000             		jsr	ObjHitFloor
0000978A 4A41                       		tst.w	d1
0000978C 6A00                       		bpl.s	Obj20_ChkExplode
0000978E D368 000C                  		add.w	d1,$C(a0)
00009792 317C FD00 0012             		move.w	#-$300,$12(a0)
00009798 4A03                       		tst.b	d3
0000979A 6700                       		beq.s	Obj20_ChkExplode
0000979C 6B00                       		bmi.s	loc_8CA4
0000979E 4A68 0010                  		tst.w	$10(a0)
000097A2 6A00                       		bpl.s	Obj20_ChkExplode
000097A4 4468 0010                  		neg.w	$10(a0)
000097A8 6000                       		bra.s	Obj20_ChkExplode
000097AA                            ; ===========================================================================
000097AA                            
000097AA                            loc_8CA4:				; XREF: Obj20_Bounce
000097AA 4A68 0010                  		tst.w	$10(a0)
000097AE 6B00                       		bmi.s	Obj20_ChkExplode
000097B0 4468 0010                  		neg.w	$10(a0)
000097B4                            
000097B4                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000097B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000097B8 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000097BA 10BC 0024                  		move.b	#$24,0(a0)
000097BE 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
000097C2 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
000097C8 6000 0000                  		bra.w	Obj3F		; jump to explosion code
000097CC                            ; ===========================================================================
000097CC                            
000097CC                            Obj20_Animate:				; XREF: Obj20_ChkExplode
000097CC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000097D0 6A00                       		bpl.s	Obj20_Display
000097D2 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
000097D8 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000097DE                            
000097DE                            Obj20_Display:
000097DE 6100 0000                  		bsr.w	DisplaySprite
000097E2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000097E6 0640 00E0                  		addi.w	#$E0,d0
000097EA B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
000097EE 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
000097F2 4E75                       		rts	
000097F4                            ; ===========================================================================
000097F4                            ; ---------------------------------------------------------------------------
000097F4                            ; Object 24 - explosion	from a destroyed monitor
000097F4                            ; ---------------------------------------------------------------------------
000097F4                            
000097F4                            Obj24:					; XREF: Obj_Index
000097F4 7000                       		moveq	#0,d0
000097F6 1028 0024                  		move.b	$24(a0),d0
000097FA 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
000097FE 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009802                            ; ===========================================================================
00009802 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009804 0000                       		dc.w Obj24_Animate-Obj24_Index
00009806                            ; ===========================================================================
00009806                            
00009806                            Obj24_Main:				; XREF: Obj24_Index
00009806 5428 0024                  		addq.b	#2,$24(a0)
0000980A 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009812 317C 041C 0002             		move.w	#$41C,2(a0)
00009818 117C 0004 0001             		move.b	#4,1(a0)
0000981E 117C 0001 0018             		move.b	#1,$18(a0)
00009824 117C 0000 0020             		move.b	#0,$20(a0)
0000982A 117C 000C 0019             		move.b	#$C,$19(a0)
00009830 117C 0009 001E             		move.b	#9,$1E(a0)
00009836 117C 0000 001A             		move.b	#0,$1A(a0)
0000983C 303C 00A5                  		move.w	#$A5,d0
00009840 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play explosion sound
00009846                            
00009846                            Obj24_Animate:				; XREF: Obj24_Index
00009846 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000984A 6A00                       		bpl.s	Obj24_Display
0000984C 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009852 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009856 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000985C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009860                            
00009860                            Obj24_Display:
00009860 6000 0000                  		bra.w	DisplaySprite
00009864                            ; ===========================================================================
00009864                            ; ---------------------------------------------------------------------------
00009864                            ; Object 27 - explosion	from a destroyed enemy
00009864                            ; ---------------------------------------------------------------------------
00009864                            
00009864                            Obj27:					; XREF: Obj_Index
00009864 7000                       		moveq	#0,d0
00009866 1028 0024                  		move.b	$24(a0),d0
0000986A 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000986E 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009872                            ; ===========================================================================
00009872 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009874 0000                       		dc.w Obj27_Main-Obj27_Index
00009876 0000                       		dc.w Obj27_Animate-Obj27_Index
00009878                            ; ===========================================================================
00009878                            
00009878                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009878 5428 0024                  		addq.b	#2,$24(a0)
0000987C 6100 0000                  		bsr.w	SingleObjLoad
00009880 6600                       		bne.s	Obj27_Main
00009882 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009886 3368 0008 0008             		move.w	8(a0),8(a1)
0000988C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009892 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009898                            
00009898                            Obj27_Main:				; XREF: Obj27_Index
00009898 5428 0024                  		addq.b	#2,$24(a0)
0000989C 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000098A4 317C 05A0 0002             		move.w	#$5A0,2(a0)
000098AA 117C 0004 0001             		move.b	#4,1(a0)
000098B0 117C 0001 0018             		move.b	#1,$18(a0)
000098B6 117C 0000 0020             		move.b	#0,$20(a0)
000098BC 117C 000C 0019             		move.b	#$C,$19(a0)
000098C2                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000098C2 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000098C8 117C 0000 001A             		move.b	#0,$1A(a0)
000098CE 303C 00C1                  		move.w	#$C1,d0
000098D2 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
000098D8                            
000098D8 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
000098DE 1028 0028                  		move.b	$28(a0),d0
000098E2 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
000098E8 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
000098EE                            
000098EE                            Obj27_Animate:				; XREF: Obj27_Index
000098EE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000098F2 6A00                       		bpl.s	Obj27_Display
000098F4                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000098F4 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000098FA 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000098FE 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009904 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009908                            
00009908                            Obj27_Display:
00009908 4EB9 0000 0000             		jsr	ObjectFall
0000990E 6000 0000                  		bra.w	DisplaySprite
00009912                            ; ===========================================================================
00009912                            ; ---------------------------------------------------------------------------
00009912                            Obj27_ExplosionXYSpd:
00009912                            		; dc.w	-$350, -$300	; Left
00009912                            		; dc.w	-$200, -$450	; Near middle (left)
00009912                            		; dc.w	0, -$500	; Middle
00009912                            		; dc.w	$200, -$450	; Near middle (right)
00009912                            		; dc.w	$350, -$300	; Right
00009912                            
00009912 FEB0 FC00                  		dc.w	-$150, -$400	; Left
00009916 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
0000991A 0000 FA00                  		dc.w	0, -$600	; Middle
0000991E 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009922 0150 FC00                  		dc.w	$150, -$400	; Right
00009926                            
00009926 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009940                            ; ---------------------------------------------------------------------------
00009940                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009940                            ; ---------------------------------------------------------------------------
00009940                            
00009940                            Obj3F:					; XREF: Obj_Index
00009940 7000                       		moveq	#0,d0
00009942 1028 0024                  		move.b	$24(a0),d0
00009946 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000994A 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000994E                            ; ===========================================================================
0000994E 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009950 FFA0                       		dc.w Obj27_Animate-Obj3F_Index
00009952                            ; ===========================================================================
00009952                            
00009952                            Obj3F_Main:				; XREF: Obj3F_Index
00009952 5428 0024                  		addq.b	#2,$24(a0)
00009956 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000995E 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009964 117C 0004 0001             		move.b	#4,1(a0)
0000996A 117C 0001 0018             		move.b	#1,$18(a0)
00009970 117C 0000 0020             		move.b	#0,$20(a0)
00009976 117C 000C 0019             		move.b	#$C,$19(a0)
0000997C 117C 0007 001E             		move.b	#7,$1E(a0)
00009982 117C 0000 001A             		move.b	#0,$1A(a0)
00009988 303C 00C4                  		move.w	#$C4,d0
0000998C 4EF9 0000 15EC             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009992                            ; ===========================================================================
00009992                            Ani_obj1E:
00009992                            	include "_anim\obj1E.asm"
00009992                            ; ---------------------------------------------------------------------------
00009992                            ; Animation script - doors (SBZ)
00009992                            ; ---------------------------------------------------------------------------
00009992 0000                       		dc.w byte_8E4A-Ani_obj1E
00009994 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000099AC 00                         		even
000099AC 00                         		even
000099AC                            
000099AC                            ; ---------------------------------------------------------------------------
000099AC                            ; Sprite mappings - Ball Hog enemy (SBZ)
000099AC                            ; ---------------------------------------------------------------------------
000099AC                            Map_obj1E:
000099AC                            	include "_maps\obj1E.asm"
000099AC                            Map_a7ad:
000099AC 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
000099AE 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
000099B0 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
000099B2 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
000099B4 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
000099B6 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
000099B8 02                         Map_a7ad_C: 	dc.b $2
000099B9 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
000099BE FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
000099C3 02                         Map_a7ad_17: 	dc.b $2
000099C4 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
000099C9 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
000099CE 02                         Map_a7ad_22: 	dc.b $2
000099CF F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
000099D4 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
000099D9 02                         Map_a7ad_2D: 	dc.b $2
000099DA E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
000099DF F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
000099E4 02                         Map_a7ad_38: 	dc.b $2
000099E5 F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
000099EA E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
000099EF 02                         Map_a7ad_43: 	dc.b $2
000099F0 F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
000099F5 E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
000099FA                            	even
000099FA                            	even
000099FA                            
000099FA                            ; ---------------------------------------------------------------------------
000099FA                            ; Sprite mappings - explosion
000099FA                            ; ---------------------------------------------------------------------------
000099FA                            Map_obj24:
000099FA                            	include "_maps\obj24.asm"
000099FA                            ; ---------------------------------------------------------------------------
000099FA                            ; Sprite mappings - explosion
000099FA                            ; ---------------------------------------------------------------------------
000099FA 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
000099FE 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009A02 01                         byte_8EAE:	dc.b 1
00009A03 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009A08 01                         byte_8EB4:	dc.b 1
00009A09 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009A0E 01                         byte_8EBA:	dc.b 1
00009A0F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009A14 01                         byte_8EC0:	dc.b 1
00009A15 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009A1A                            		even
00009A1A                            		even
00009A1A                            
00009A1A                            ; ---------------------------------------------------------------------------
00009A1A                            ; Sprite mappings - explosion
00009A1A                            ; ---------------------------------------------------------------------------
00009A1A 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009A1E 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009A22 0000                       		dc.w byte_8EF7-Map_obj27
00009A24 01                         byte_8ED0:	dc.b 1
00009A25 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009A2A 01                         byte_8ED6:	dc.b 1
00009A2B F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009A30 01                         byte_8EDC:	dc.b 1
00009A31 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009A36 04                         byte_8EE2:	dc.b 4
00009A37 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009A3C EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009A41 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009A46 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009A4B 04                         byte_8EF7:	dc.b 4
00009A4C EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009A51 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009A56 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009A5B FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009A60                            		even
00009A60                            ; ---------------------------------------------------------------------------
00009A60                            ; Sprite mappings - explosion from when	a boss is destroyed
00009A60                            ; ---------------------------------------------------------------------------
00009A60 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009A62 0000                       		dc.w byte_8F16-Map_obj3F
00009A64 0000                       		dc.w byte_8F1C-Map_obj3F
00009A66 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009A68 FFEB                       		dc.w byte_8EF7-Map_obj3F
00009A6A 01                         byte_8F16:	dc.b 1
00009A6B F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009A70 01                         byte_8F1C:	dc.b 1
00009A71 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009A76                            		even
00009A76                            ; ===========================================================================
00009A76                            ; ---------------------------------------------------------------------------
00009A76                            ; Object 28 - animals
00009A76                            ; ---------------------------------------------------------------------------
00009A76                            
00009A76                            Obj28:					; XREF: Obj_Index
00009A76 7000                       		moveq	#0,d0
00009A78 1028 0024                  		move.b	$24(a0),d0
00009A7C 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009A80 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009A84                            ; ===========================================================================
00009A84 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009A88 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009A8C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009A90 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009A94 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009A98 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009A9C 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009AA0 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009AA4 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009AA8 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009AAC 0000                       		dc.w loc_92D6-Obj28_Index
00009AAE                            
00009AAE 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1, 0,	5, 0,	5
00009ABE                            
00009ABE FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009AC2 0000 0000                  		dc.l Map_obj28
00009AC6 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009ACA 0000 0000                  		dc.l Map_obj28a		; mappings address
00009ACE FE80 FD00                  		dc.w $FE80, $FD00
00009AD2 0000 0000                  		dc.l Map_obj28
00009AD6 FEC0 FE80                  		dc.w $FEC0, $FE80
00009ADA 0000 0000                  		dc.l Map_obj28a
00009ADE FE40 FD00                  		dc.w $FE40, $FD00
00009AE2 0000 0000                  		dc.l Map_obj28b
00009AE6 FD00 FC00                  		dc.w $FD00, $FC00
00009AEA 0000 0000                  		dc.l Map_obj28a
00009AEE FD80 FC80                  		dc.w $FD80, $FC80
00009AF2 0000 0000                  		dc.l Map_obj28b
00009AF6                            
00009AF6 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009B06 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009B16 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009B22                            
00009B22 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009B36 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009B4A 0000 0000                  		dc.l Map_obj28b
00009B4E                            
00009B4E 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009B60 0565 05B3                  		dc.w $565, $5B3
00009B64                            ; ===========================================================================
00009B64                            
00009B64                            Obj28_Ending:				; XREF: Obj28_Index
00009B64 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009B68 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009B6C 7000                       		moveq	#0,d0
00009B6E 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009B72 D040                       		add.w	d0,d0		; multiply d0 by 2
00009B74 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009B78 0440 0014                  		subi.w	#$14,d0
00009B7C 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009B82 D040                       		add.w	d0,d0
00009B84 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009B8A 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009B8E 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009B94 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009B9A 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009BA0 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009BA6 117C 000C 0016             		move.b	#$C,$16(a0)
00009BAC 117C 0004 0001             		move.b	#4,1(a0)
00009BB2 08E8 0000 0001             		bset	#0,1(a0)
00009BB8 117C 0006 0018             		move.b	#6,$18(a0)
00009BBE 117C 0008 0019             		move.b	#8,$19(a0)
00009BC4 117C 0007 001E             		move.b	#7,$1E(a0)
00009BCA 6000 0000                  		bra.w	DisplaySprite
00009BCE                            ; ===========================================================================
00009BCE                            
00009BCE                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009BCE 5428 0024                  		addq.b	#2,$24(a0)
00009BD2 6100 918C                  		bsr.w	RandomNumber
00009BD6 0240 0001                  		andi.w	#1,d0
00009BDA 7200                       		moveq	#0,d1
00009BDC 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009BE0 D241                       		add.w	d1,d1
00009BE2 D240                       		add.w	d0,d1
00009BE4 43FA FEC8                  		lea	Obj28_VarIndex(pc),a1
00009BE8 1031 1000                  		move.b	(a1,d1.w),d0
00009BEC 1140 0030                  		move.b	d0,$30(a0)
00009BF0 E748                       		lsl.w	#3,d0
00009BF2 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009BF6 D2C0                       		adda.w	d0,a1
00009BF8 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009BFC 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009C00 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009C04 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009C0A 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009C10 6700                       		beq.s	loc_90C0	; if yes, branch
00009C12 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009C18                            
00009C18                            loc_90C0:
00009C18 117C 000C 0016             		move.b	#$C,$16(a0)
00009C1E 117C 0004 0001             		move.b	#4,1(a0)
00009C24 08E8 0000 0001             		bset	#0,1(a0)
00009C2A 117C 0006 0018             		move.b	#6,$18(a0)
00009C30 117C 0008 0019             		move.b	#8,$19(a0)
00009C36 117C 0007 001E             		move.b	#7,$1E(a0)
00009C3C 117C 0002 001A             		move.b	#2,$1A(a0)
00009C42 317C FC00 0012             		move.w	#-$400,$12(a0)
00009C48 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009C4C 6600                       		bne.s	loc_911C
00009C4E 6100 0000                  		bsr.w	SingleObjLoad
00009C52 6600                       		bne.s	Obj28_Display
00009C54 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009C58 3368 0008 0008             		move.w	8(a0),8(a1)
00009C5E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009C64 3028 003E                  		move.w	$3E(a0),d0
00009C68 E248                       		lsr.w	#1,d0
00009C6A 1340 001A                  		move.b	d0,$1A(a1)
00009C6E                            
00009C6E                            Obj28_Display:
00009C6E 6000 0000                  		bra.w	DisplaySprite
00009C72                            ; ===========================================================================
00009C72                            
00009C72                            loc_911C:
00009C72 117C 0012 0024             		move.b	#$12,$24(a0)
00009C78 4268 0010                  		clr.w	$10(a0)
00009C7C 6000 0000                  		bra.w	DisplaySprite
00009C80                            ; ===========================================================================
00009C80                            
00009C80                            loc_912A:				; XREF: Obj28_Index
00009C80 4A28 0001                  		tst.b	1(a0)
00009C84 6A00 0000                  		bpl.w	DeleteObject
00009C88 6100 0000                  		bsr.w	ObjectFall
00009C8C 4A68 0012                  		tst.w	$12(a0)
00009C90 6B00                       		bmi.s	loc_9180
00009C92 4EB9 0000 0000             		jsr	ObjHitFloor
00009C98 4A41                       		tst.w	d1
00009C9A 6A00                       		bpl.s	loc_9180
00009C9C D368 000C                  		add.w	d1,$C(a0)
00009CA0 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009CA6 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009CAC 117C 0001 001A             		move.b	#1,$1A(a0)
00009CB2 1028 0030                  		move.b	$30(a0),d0
00009CB6 D000                       		add.b	d0,d0
00009CB8 5800                       		addq.b	#4,d0
00009CBA 1140 0024                  		move.b	d0,$24(a0)
00009CBE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009CC2 6700                       		beq.s	loc_9180
00009CC4 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009CCA 6700                       		beq.s	loc_9180
00009CCC 4468 0010                  		neg.w	$10(a0)
00009CD0 0868 0000 0001             		bchg	#0,1(a0)
00009CD6                            
00009CD6                            loc_9180:
00009CD6 6000 0000                  		bra.w	DisplaySprite
00009CDA                            ; ===========================================================================
00009CDA                            
00009CDA                            loc_9184:				; XREF: Obj28_Index
00009CDA 6100 0000                  		bsr.w	ObjectFall
00009CDE 117C 0001 001A             		move.b	#1,$1A(a0)
00009CE4 4A68 0012                  		tst.w	$12(a0)
00009CE8 6B00                       		bmi.s	loc_91AE
00009CEA 117C 0000 001A             		move.b	#0,$1A(a0)
00009CF0 4EB9 0000 0000             		jsr	ObjHitFloor
00009CF6 4A41                       		tst.w	d1
00009CF8 6A00                       		bpl.s	loc_91AE
00009CFA D368 000C                  		add.w	d1,$C(a0)
00009CFE 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009D04                            
00009D04                            loc_91AE:
00009D04 4A28 0028                  		tst.b	$28(a0)
00009D08 6600                       		bne.s	loc_9224
00009D0A 4A28 0001                  		tst.b	1(a0)
00009D0E 6A00 0000                  		bpl.w	DeleteObject
00009D12 6000 0000                  		bra.w	DisplaySprite
00009D16                            ; ===========================================================================
00009D16                            
00009D16                            loc_91C0:				; XREF: Obj28_Index
00009D16 7218                       		moveq	#$18,d1
00009D18 4EB9 0000 0000             		jsr	ObjectFallCustom
00009D1E 4A68 0012                  		tst.w	$12(a0)
00009D22 6B00                       		bmi.s	loc_91FC
00009D24 4EB9 0000 0000             		jsr	ObjHitFloor
00009D2A 4A41                       		tst.w	d1
00009D2C 6A00                       		bpl.s	loc_91FC
00009D2E D368 000C                  		add.w	d1,$C(a0)
00009D32 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009D38 4A28 0028                  		tst.b	$28(a0)
00009D3C 6700                       		beq.s	loc_91FC
00009D3E 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009D44 6700                       		beq.s	loc_91FC
00009D46 4468 0010                  		neg.w	$10(a0)
00009D4A 0868 0000 0001             		bchg	#0,1(a0)
00009D50                            
00009D50                            loc_91FC:
00009D50 5328 001E                  		subq.b	#1,$1E(a0)
00009D54 6A00                       		bpl.s	loc_9212
00009D56 117C 0001 001E             		move.b	#1,$1E(a0)
00009D5C 5228 001A                  		addq.b	#1,$1A(a0)
00009D60 0228 0001 001A             		andi.b	#1,$1A(a0)
00009D66                            
00009D66                            loc_9212:
00009D66 4A28 0028                  		tst.b	$28(a0)
00009D6A 6600                       		bne.s	loc_9224
00009D6C 4A28 0001                  		tst.b	1(a0)
00009D70 6A00 0000                  		bpl.w	DeleteObject
00009D74 6000 0000                  		bra.w	DisplaySprite
00009D78                            ; ===========================================================================
00009D78                            
00009D78                            loc_9224:				; XREF: Obj28_Index
00009D78 3028 0008                  		move.w	8(a0),d0
00009D7C 9078 D008                  		sub.w	($FFFFD008).w,d0
00009D80 6500                       		bcs.s	loc_923C
00009D82 0440 0180                  		subi.w	#$180,d0
00009D86 6A00                       		bpl.s	loc_923C
00009D88 4A28 0001                  		tst.b	1(a0)
00009D8C 6A00 0000                  		bpl.w	DeleteObject
00009D90                            
00009D90                            loc_923C:
00009D90 6000 0000                  		bra.w	DisplaySprite
00009D94                            ; ===========================================================================
00009D94                            
00009D94                            loc_9240:				; XREF: Obj28_Index
00009D94 4A28 0001                  		tst.b	1(a0)
00009D98 6A00 0000                  		bpl.w	DeleteObject
00009D9C 5368 0036                  		subq.w	#1,$36(a0)
00009DA0 6600 0000                  		bne.w	loc_925C
00009DA4 117C 0002 0024             		move.b	#2,$24(a0)
00009DAA 117C 0003 0018             		move.b	#3,$18(a0)
00009DB0                            
00009DB0                            loc_925C:
00009DB0 6000 0000                  		bra.w	DisplaySprite
00009DB4                            ; ===========================================================================
00009DB4                            
00009DB4                            loc_9260:				; XREF: Obj28_Index
00009DB4 6100 0000                  		bsr.w	sub_9404
00009DB8 6400                       		bcc.s	loc_927C
00009DBA 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009DC0 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009DC6 117C 000E 0024             		move.b	#$E,$24(a0)
00009DCC 6000 FF48                  		bra.w	loc_91C0
00009DD0                            ; ===========================================================================
00009DD0                            
00009DD0                            loc_927C:
00009DD0 6000 FFA6                  		bra.w	loc_9224
00009DD4                            ; ===========================================================================
00009DD4                            
00009DD4                            loc_9280:				; XREF: Obj28_Index
00009DD4 6100 0000                  		bsr.w	sub_9404
00009DD8 6A00                       		bpl.s	loc_92B6
00009DDA 4268 0010                  		clr.w	$10(a0)
00009DDE 4268 0032                  		clr.w	$32(a0)
00009DE2 7218                       		moveq	#$18,d1
00009DE4 4EB9 0000 0000             		jsr	ObjectFallCustom
00009DEA 6100 0000                  		bsr.w	loc_93C4
00009DEE 6100 0000                  		bsr.w	loc_93EC
00009DF2 5328 001E                  		subq.b	#1,$1E(a0)
00009DF6 6A00                       		bpl.s	loc_92B6
00009DF8 117C 0001 001E             		move.b	#1,$1E(a0)
00009DFE 5228 001A                  		addq.b	#1,$1A(a0)
00009E02 0228 0001 001A             		andi.b	#1,$1A(a0)
00009E08                            
00009E08                            loc_92B6:
00009E08 6000 FF6E                  		bra.w	loc_9224
00009E0C                            ; ===========================================================================
00009E0C                            
00009E0C                            loc_92BA:				; XREF: Obj28_Index
00009E0C 6100 0000                  		bsr.w	sub_9404
00009E10 6A00                       		bpl.s	loc_9310
00009E12 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009E18 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E1E 117C 0004 0024             		move.b	#4,$24(a0)
00009E24 6000 FEB4                  		bra.w	loc_9184
00009E28                            ; ===========================================================================
00009E28                            
00009E28                            loc_92D6:				; XREF: Obj28_Index
00009E28 6100 0000                  		bsr.w	ObjectFall
00009E2C 117C 0001 001A             		move.b	#1,$1A(a0)
00009E32 4A68 0012                  		tst.w	$12(a0)
00009E36 6B00                       		bmi.s	loc_9310
00009E38 117C 0000 001A             		move.b	#0,$1A(a0)
00009E3E 4EB9 0000 0000             		jsr	ObjHitFloor
00009E44 4A41                       		tst.w	d1
00009E46 6A00                       		bpl.s	loc_9310
00009E48 4628 0029                  		not.b	$29(a0)
00009E4C 6600                       		bne.s	loc_9306
00009E4E 4468 0010                  		neg.w	$10(a0)
00009E52 0868 0000 0001             		bchg	#0,1(a0)
00009E58                            
00009E58                            loc_9306:
00009E58 D368 000C                  		add.w	d1,$C(a0)
00009E5C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E62                            
00009E62                            loc_9310:
00009E62 6000 FF14                  		bra.w	loc_9224
00009E66                            ; ===========================================================================
00009E66                            
00009E66                            loc_9314:				; XREF: Obj28_Index
00009E66 6100 0000                  		bsr.w	sub_9404
00009E6A 6A00                       		bpl.s	loc_932E
00009E6C 4268 0010                  		clr.w	$10(a0)
00009E70 4268 0032                  		clr.w	$32(a0)
00009E74 6100 0000                  		bsr.w	ObjectFall
00009E78 6100 0000                  		bsr.w	loc_93C4
00009E7C 6100 0000                  		bsr.w	loc_93EC
00009E80                            
00009E80                            loc_932E:
00009E80 6000 FEF6                  		bra.w	loc_9224
00009E84                            ; ===========================================================================
00009E84                            
00009E84                            loc_9332:				; XREF: Obj28_Index
00009E84 6100 0000                  		bsr.w	sub_9404
00009E88 6A00                       		bpl.s	loc_936C
00009E8A 6100 0000                  		bsr.w	ObjectFall
00009E8E 117C 0001 001A             		move.b	#1,$1A(a0)
00009E94 4A68 0012                  		tst.w	$12(a0)
00009E98 6B00                       		bmi.s	loc_936C
00009E9A 117C 0000 001A             		move.b	#0,$1A(a0)
00009EA0 4EB9 0000 0000             		jsr	ObjHitFloor
00009EA6 4A41                       		tst.w	d1
00009EA8 6A00                       		bpl.s	loc_936C
00009EAA 4468 0010                  		neg.w	$10(a0)
00009EAE 0868 0000 0001             		bchg	#0,1(a0)
00009EB4 D368 000C                  		add.w	d1,$C(a0)
00009EB8 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009EBE                            
00009EBE                            loc_936C:
00009EBE 6000 FEB8                  		bra.w	loc_9224
00009EC2                            ; ===========================================================================
00009EC2                            
00009EC2                            loc_9370:				; XREF: Obj28_Index
00009EC2 6100 0000                  		bsr.w	sub_9404
00009EC6 6A00                       		bpl.s	loc_93C0
00009EC8 7218                       		moveq	#$18,d1
00009ECA 4EB9 0000 0000             		jsr	ObjectFallCustom
00009ED0 4A68 0012                  		tst.w	$12(a0)
00009ED4 6B00                       		bmi.s	loc_93AA
00009ED6 4EB9 0000 0000             		jsr	ObjHitFloor
00009EDC 4A41                       		tst.w	d1
00009EDE 6A00                       		bpl.s	loc_93AA
00009EE0 4628 0029                  		not.b	$29(a0)
00009EE4 6600                       		bne.s	loc_93A0
00009EE6 4468 0010                  		neg.w	$10(a0)
00009EEA 0868 0000 0001             		bchg	#0,1(a0)
00009EF0                            
00009EF0                            loc_93A0:
00009EF0 D368 000C                  		add.w	d1,$C(a0)
00009EF4 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009EFA                            
00009EFA                            loc_93AA:
00009EFA 5328 001E                  		subq.b	#1,$1E(a0)
00009EFE 6A00                       		bpl.s	loc_93C0
00009F00 117C 0001 001E             		move.b	#1,$1E(a0)
00009F06 5228 001A                  		addq.b	#1,$1A(a0)
00009F0A 0228 0001 001A             		andi.b	#1,$1A(a0)
00009F10                            
00009F10                            loc_93C0:
00009F10 6000 FE66                  		bra.w	loc_9224
00009F14                            ; ===========================================================================
00009F14                            
00009F14                            loc_93C4:
00009F14 117C 0001 001A             		move.b	#1,$1A(a0)
00009F1A 4A68 0012                  		tst.w	$12(a0)
00009F1E 6B00                       		bmi.s	locret_93EA
00009F20 117C 0000 001A             		move.b	#0,$1A(a0)
00009F26 4EB9 0000 0000             		jsr	ObjHitFloor
00009F2C 4A41                       		tst.w	d1
00009F2E 6A00                       		bpl.s	locret_93EA
00009F30 D368 000C                  		add.w	d1,$C(a0)
00009F34 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009F3A                            
00009F3A                            locret_93EA:
00009F3A 4E75                       		rts	
00009F3C                            ; ===========================================================================
00009F3C                            
00009F3C                            loc_93EC:
00009F3C 08E8 0000 0001             		bset	#0,1(a0)
00009F42 3028 0008                  		move.w	8(a0),d0
00009F46 9078 D008                  		sub.w	($FFFFD008).w,d0
00009F4A 6400                       		bcc.s	locret_9402
00009F4C 08A8 0000 0001             		bclr	#0,1(a0)
00009F52                            
00009F52                            locret_9402:
00009F52 4E75                       		rts	
00009F54                            
00009F54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F54                            
00009F54                            
00009F54                            sub_9404:
00009F54 3038 D008                  		move.w	($FFFFD008).w,d0
00009F58 9068 0008                  		sub.w	8(a0),d0
00009F5C 0440 00B8                  		subi.w	#$B8,d0
00009F60 4E75                       		rts	
00009F62                            ; End of function sub_9404
00009F62                            
00009F62                            ; ===========================================================================
00009F62                            ; ---------------------------------------------------------------------------
00009F62                            ; Object 29 - points that appear when you destroy something
00009F62                            ; ---------------------------------------------------------------------------
00009F62                            
00009F62                            Obj29:					; XREF: Obj_Index
00009F62 7000                       		moveq	#0,d0
00009F64 1028 0024                  		move.b	$24(a0),d0
00009F68 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009F6C 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009F70 6000 0000                  		bra.w	DisplaySprite
00009F74                            ; ===========================================================================
00009F74 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009F76 0000                       		dc.w Obj29_Slower-Obj29_Index
00009F78                            ; ===========================================================================
00009F78                            
00009F78                            Obj29_Main:				; XREF: Obj29_Index
00009F78 5428 0024                  		addq.b	#2,$24(a0)
00009F7C 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009F84 317C 2797 0002             		move.w	#$2797,2(a0)
00009F8A 117C 0004 0001             		move.b	#4,1(a0)
00009F90 117C 0001 0018             		move.b	#1,$18(a0)
00009F96 117C 0008 0019             		move.b	#8,$19(a0)
00009F9C 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009FA2                            
00009FA2                            Obj29_Slower:				; XREF: Obj29_Index
00009FA2 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009FA6 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009FAA 7218                       		moveq	#$18,d1
00009FAC 4EF9 0000 0000             		jmp	ObjectFallCustom
00009FB2                            ; ===========================================================================
00009FB2                            ; ---------------------------------------------------------------------------
00009FB2                            ; Sprite mappings - animals
00009FB2                            ; ---------------------------------------------------------------------------
00009FB2                            Map_obj28:
00009FB2                            	include "_maps\obj28.asm"
00009FB2                            ; ---------------------------------------------------------------------------
00009FB2                            ; Sprite mappings - animals
00009FB2                            ; ---------------------------------------------------------------------------
00009FB2 0000                       		dc.w byte_9472-Map_obj28
00009FB4 0000                       		dc.w byte_9478-Map_obj28
00009FB6 0000                       		dc.w byte_946C-Map_obj28
00009FB8 01                         byte_946C:	dc.b 1
00009FB9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009FBE 01                         byte_9472:	dc.b 1
00009FBF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009FC4 01                         byte_9478:	dc.b 1
00009FC5 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009FCA                            		even
00009FCA                            		even
00009FCA                            
00009FCA                            Map_obj28a:
00009FCA                            	include "_maps\obj28a.asm"
00009FCA                            ; ---------------------------------------------------------------------------
00009FCA                            ; Sprite mappings - animals
00009FCA                            ; ---------------------------------------------------------------------------
00009FCA 0000                       		dc.w byte_948A-Map_obj28a
00009FCC 0000                       		dc.w byte_9490-Map_obj28a
00009FCE 0000                       		dc.w byte_9484-Map_obj28a
00009FD0 01                         byte_9484:	dc.b 1
00009FD1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009FD6 01                         byte_948A:	dc.b 1
00009FD7 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009FDC 01                         byte_9490:	dc.b 1
00009FDD FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009FE2                            		even
00009FE2                            		even
00009FE2                            
00009FE2                            Map_obj28b:
00009FE2                            	include "_maps\obj28b.asm"
00009FE2                            ; ---------------------------------------------------------------------------
00009FE2                            ; Sprite mappings - animals
00009FE2                            ; ---------------------------------------------------------------------------
00009FE2 0000                       		dc.w byte_94A2-Map_obj28b
00009FE4 0000                       		dc.w byte_94A8-Map_obj28b
00009FE6 0000                       		dc.w byte_949C-Map_obj28b
00009FE8 01                         byte_949C:	dc.b 1
00009FE9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009FEE 01                         byte_94A2:	dc.b 1
00009FEF FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009FF4 01                         byte_94A8:	dc.b 1
00009FF5 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009FFA                            		even
00009FFA                            		even
00009FFA                            
00009FFA                            ; ---------------------------------------------------------------------------
00009FFA                            ; Sprite mappings - points that	appear when you	destroy	something
00009FFA                            ; ---------------------------------------------------------------------------
00009FFA                            Map_obj29:
00009FFA                            	include "_maps\obj29.asm"
00009FFA                            ; ---------------------------------------------------------------------------
00009FFA                            ; Sprite mappings - points that	appear when you	destroy	something
00009FFA                            ; ---------------------------------------------------------------------------
00009FFA 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009FFE 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000A002 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000A006 0000                       		dc.w byte_94E5-Map_obj29
0000A008 01                         byte_94BC:	dc.b 1
0000A009 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000A00E 01                         byte_94C2:	dc.b 1
0000A00F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000A014 01                         byte_94C8:	dc.b 1
0000A015 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000A01A 01                         byte_94CE:	dc.b 1
0000A01B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000A020 01                         byte_94D4:	dc.b 1
0000A021 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000A026 02                         byte_94DA:	dc.b 2
0000A027 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000A02C FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000A031 02                         byte_94E5:	dc.b 2
0000A032 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000A037 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000A03C                            		even
0000A03C                            		even
0000A03C                            
0000A03C                            ; ===========================================================================
0000A03C                            ; ---------------------------------------------------------------------------
0000A03C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000A03C                            ; ---------------------------------------------------------------------------
0000A03C                            
0000A03C                            Obj1F:					; XREF: Obj_Index
0000A03C 7000                       		moveq	#0,d0
0000A03E 1028 0024                  		move.b	$24(a0),d0
0000A042 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000A046 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000A04A                            ; ===========================================================================
0000A04A 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000A04C 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000A04E 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000A050 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000A052 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000A054                            ; ===========================================================================
0000A054                            
0000A054                            Obj1F_Main:				; XREF: Obj1F_Index
0000A054 117C 0010 0016             		move.b	#$10,$16(a0)
0000A05A 117C 0008 0017             		move.b	#8,$17(a0)
0000A060 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A068 317C 0400 0002             		move.w	#$400,2(a0)
0000A06E 117C 0004 0001             		move.b	#4,1(a0)
0000A074 117C 0003 0018             		move.b	#3,$18(a0)
0000A07A 117C 0006 0020             		move.b	#6,$20(a0)
0000A080 117C 0015 0019             		move.b	#$15,$19(a0)
0000A086 6100 0000                  		bsr.w	ObjectFall
0000A08A 4EB9 0000 0000             		jsr	ObjHitFloor
0000A090 4A41                       		tst.w	d1
0000A092 6A00                       		bpl.s	locret_955A
0000A094 D368 000C                  		add.w	d1,$C(a0)
0000A098 1143 0026                  		move.b	d3,$26(a0)
0000A09C 317C 0000 0012             		move.w	#0,$12(a0)
0000A0A2 5428 0024                  		addq.b	#2,$24(a0)
0000A0A6                            
0000A0A6                            locret_955A:
0000A0A6 4E75                       		rts	
0000A0A8                            ; ===========================================================================
0000A0A8                            
0000A0A8                            Obj1F_Action:				; XREF: Obj1F_Index
0000A0A8 7000                       		moveq	#0,d0
0000A0AA 1028 0025                  		move.b	$25(a0),d0
0000A0AE 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000A0B2 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000A0B6 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A0BC 6100 0000                  		bsr.w	AnimateSprite
0000A0C0 6000 0000                  		bra.w	MarkObjGone
0000A0C4                            ; ===========================================================================
0000A0C4 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000A0C6 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000A0C8                            ; ===========================================================================
0000A0C8                            
0000A0C8                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000A0C8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000A0CC 6A00                       		bpl.s	locret_95B6
0000A0CE 4A28 0001                  		tst.b	1(a0)
0000A0D2 6A00                       		bpl.s	Obj1F_Move
0000A0D4 0868 0001 0032             		bchg	#1,$32(a0)
0000A0DA 6600                       		bne.s	Obj1F_MakeFire
0000A0DC                            
0000A0DC                            Obj1F_Move:
0000A0DC 5428 0025                  		addq.b	#2,$25(a0)
0000A0E0 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A0E6 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A0EC 6100 0000                  		bsr.w	Obj1F_SetAni
0000A0F0 5600                       		addq.b	#3,d0
0000A0F2 1140 001C                  		move.b	d0,$1C(a0)
0000A0F6 0868 0000 0022             		bchg	#0,$22(a0)
0000A0FC 6600                       		bne.s	locret_95B6
0000A0FE 4468 0010                  		neg.w	$10(a0)		; change direction
0000A102                            
0000A102                            locret_95B6:
0000A102 4E75                       		rts	
0000A104                            ; ===========================================================================
0000A104                            
0000A104                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A104 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A10A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A110 6100 0000                  		bsr.w	SingleObjLoad
0000A114 6600                       		bne.s	Obj1F_MakeFire2
0000A116 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A11A 137C 0006 0024             		move.b	#6,$24(a1)
0000A120 3368 0008 0008             		move.w	8(a0),8(a1)
0000A126 0469 0010 0008             		subi.w	#$10,8(a1)
0000A12C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A132 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A138                            
0000A138                            Obj1F_MakeFire2:
0000A138 6100 0000                  		bsr.w	SingleObjLoad
0000A13C 6600                       		bne.s	locret_9618
0000A13E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A142 137C 0006 0024             		move.b	#6,$24(a1)
0000A148 3368 0008 0008             		move.w	8(a0),8(a1)
0000A14E 0669 0010 0008             		addi.w	#$10,8(a1)
0000A154 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A15A 337C 0100 0010             		move.w	#$100,$10(a1)
0000A160                            
0000A160                            locret_9618:
0000A160 4E75                       		rts	
0000A162                            ; ===========================================================================
0000A162                            
0000A162                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A162 5368 0030                  		subq.w	#1,$30(a0)
0000A166 6B00                       		bmi.s	loc_966E
0000A168 6100 0000                  		bsr.w	SpeedToPos
0000A16C 0868 0000 0032             		bchg	#0,$32(a0)
0000A172 6600                       		bne.s	loc_9654
0000A174 3628 0008                  		move.w	8(a0),d3
0000A178 0643 0010                  		addi.w	#$10,d3
0000A17C 0828 0000 0022             		btst	#0,$22(a0)
0000A182 6700                       		beq.s	loc_9640
0000A184 0443 0020                  		subi.w	#$20,d3
0000A188                            
0000A188                            loc_9640:
0000A188 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A18E 0C41 FFF8                  		cmpi.w	#-8,d1
0000A192 6D00                       		blt.s	loc_966E
0000A194 0C41 000C                  		cmpi.w	#$C,d1
0000A198 6C00                       		bge.s	loc_966E
0000A19A 4E75                       		rts	
0000A19C                            ; ===========================================================================
0000A19C                            
0000A19C                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A19C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A1A2 D368 000C                  		add.w	d1,$C(a0)
0000A1A6 1143 0026                  		move.b	d3,$26(a0)
0000A1AA 6100 0000                  		bsr.w	Obj1F_SetAni
0000A1AE 5600                       		addq.b	#3,d0
0000A1B0 1140 001C                  		move.b	d0,$1C(a0)
0000A1B4 4E75                       		rts	
0000A1B6                            ; ===========================================================================
0000A1B6                            
0000A1B6                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A1B6 5528 0025                  		subq.b	#2,$25(a0)
0000A1BA 317C 003B 0030             		move.w	#59,$30(a0)
0000A1C0 317C 0000 0010             		move.w	#0,$10(a0)
0000A1C6 6100 0000                  		bsr.w	Obj1F_SetAni
0000A1CA 1140 001C                  		move.b	d0,$1C(a0)
0000A1CE 4E75                       		rts	
0000A1D0                            ; ---------------------------------------------------------------------------
0000A1D0                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A1D0                            ; ---------------------------------------------------------------------------
0000A1D0                            
0000A1D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A1D0                            
0000A1D0                            
0000A1D0                            Obj1F_SetAni:				; XREF: loc_966E
0000A1D0 7000                       		moveq	#0,d0
0000A1D2 1628 0026                  		move.b	$26(a0),d3
0000A1D6 6B00                       		bmi.s	loc_96A4
0000A1D8 0C03 0006                  		cmpi.b	#6,d3
0000A1DC 6500                       		bcs.s	locret_96A2
0000A1DE 7001                       		moveq	#1,d0
0000A1E0 0828 0000 0022             		btst	#0,$22(a0)
0000A1E6 6600                       		bne.s	locret_96A2
0000A1E8 7002                       		moveq	#2,d0
0000A1EA                            
0000A1EA                            locret_96A2:
0000A1EA 4E75                       		rts	
0000A1EC                            ; ===========================================================================
0000A1EC                            
0000A1EC                            loc_96A4:				; XREF: Obj1F_SetAni
0000A1EC 0C03 00FA                  		cmpi.b	#-6,d3
0000A1F0 6200                       		bhi.s	locret_96B6
0000A1F2 7002                       		moveq	#2,d0
0000A1F4 0828 0000 0022             		btst	#0,$22(a0)
0000A1FA 6600                       		bne.s	locret_96B6
0000A1FC 7001                       		moveq	#1,d0
0000A1FE                            
0000A1FE                            locret_96B6:
0000A1FE 4E75                       		rts	
0000A200                            ; End of function Obj1F_SetAni
0000A200                            
0000A200                            ; ===========================================================================
0000A200                            
0000A200                            Obj1F_Delete:				; XREF: Obj1F_Index
0000A200 6100 0000                  		bsr.w	DeleteObject
0000A204 4E75                       		rts	
0000A206                            ; ===========================================================================
0000A206                            ; ---------------------------------------------------------------------------
0000A206                            ; Sub-object - missile that the	Crabmeat throws
0000A206                            ; ---------------------------------------------------------------------------
0000A206                            
0000A206                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000A206 5428 0024                  		addq.b	#2,$24(a0)
0000A20A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A212 317C 0400 0002             		move.w	#$400,2(a0)
0000A218 117C 0004 0001             		move.b	#4,1(a0)
0000A21E 117C 0003 0018             		move.b	#3,$18(a0)
0000A224 117C 0087 0020             		move.b	#$87,$20(a0)
0000A22A 117C 0008 0019             		move.b	#8,$19(a0)
0000A230 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A236 117C 0007 001C             		move.b	#7,$1C(a0)
0000A23C                            
0000A23C                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000A23C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A242 6100 0000                  		bsr.w	AnimateSprite
0000A246 6100 0000                  		bsr.w	ObjectFall
0000A24A 6100 0000                  		bsr.w	DisplaySprite
0000A24E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A252 0640 00E0                  		addi.w	#$E0,d0
0000A256 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A25A 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000A25C 4E75                       		rts	
0000A25E                            ; ===========================================================================
0000A25E                            
0000A25E                            Obj1F_Delete2:
0000A25E 6000 0000                  		bra.w	DeleteObject
0000A262                            ; ===========================================================================
0000A262                            Ani_obj1F:
0000A262                            	include "_anim\obj1F.asm"
0000A262                            ; ---------------------------------------------------------------------------
0000A262                            ; Animation script - Crabmeat enemy
0000A262                            ; ---------------------------------------------------------------------------
0000A262 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A268 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A26E 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A272 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A276 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A27A 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A27E 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A284 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A28A 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A290 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A294 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A298                            		even
0000A298                            		even
0000A298                            
0000A298                            ; ---------------------------------------------------------------------------
0000A298                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A298                            ; ---------------------------------------------------------------------------
0000A298                            Map_obj1F:
0000A298                            	include "_maps\obj1F.asm"
0000A298                            Map_1514:
0000A298 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
0000A29A 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
0000A29C 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
0000A29E 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
0000A2A0 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
0000A2A2 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
0000A2A4 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
0000A2A6 03                         Map_1514_E: 	dc.b $3
0000A2A7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A2AC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A2B1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A2B6 03                         Map_1514_1E: 	dc.b $3
0000A2B7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A2BC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A2C1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A2C6 03                         Map_1514_2E: 	dc.b $3
0000A2C7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A2CC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A2D1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A2D6 03                         Map_1514_3E: 	dc.b $3
0000A2D7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A2DC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A2E1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A2E6 03                         Map_1514_4E: 	dc.b $3
0000A2E7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A2EC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A2F1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A2F6 01                         Map_1514_5E: 	dc.b $1
0000A2F7 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
0000A2FC 01                         Map_1514_64: 	dc.b $1
0000A2FD F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
0000A302                            	even
0000A302                            	even
0000A302                            
0000A302                            ; ===========================================================================
0000A302                            ; ---------------------------------------------------------------------------
0000A302                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A302                            ; ---------------------------------------------------------------------------
0000A302                            
0000A302                            Obj22:					; XREF: Obj_Index
0000A302 7000                       		moveq	#0,d0
0000A304 1028 0024                  		move.b	$24(a0),d0
0000A308 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A30C 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A310                            ; ===========================================================================
0000A310 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A312 0000                       		dc.w Obj22_Action-Obj22_Index
0000A314 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A316                            ; ===========================================================================
0000A316                            
0000A316                            Obj22_Main:				; XREF: Obj22_Index
0000A316 5428 0024                  		addq.b	#2,$24(a0)
0000A31A 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A322 317C 0444 0002             		move.w	#$444,2(a0)
0000A328 117C 0004 0001             		move.b	#4,1(a0)
0000A32E 117C 0003 0018             		move.b	#3,$18(a0)
0000A334 117C 0008 0020             		move.b	#8,$20(a0)
0000A33A 117C 0018 0019             		move.b	#$18,$19(a0)
0000A340                            
0000A340                            Obj22_Action:				; XREF: Obj22_Index
0000A340 7000                       		moveq	#0,d0
0000A342 1028 0025                  		move.b	$25(a0),d0
0000A346 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A34A 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A34E 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A354 6100 0000                  		bsr.w	AnimateSprite
0000A358 6000 0000                  		bra.w	MarkObjGone
0000A35C                            ; ===========================================================================
0000A35C 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A35E 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A360                            ; ===========================================================================
0000A360                            
0000A360                            Obj22_Move:				; XREF: Obj22_Index2
0000A360 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A364 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A366 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A36C 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A36E 5428 0025                  		addq.b	#2,$25(a0)
0000A372 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A378 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A37E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A384 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A38A 6600                       		bne.s	locret_986C	; if not, branch
0000A38C 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A390                            
0000A390                            locret_986C:
0000A390 4E75                       		rts	
0000A392                            ; ===========================================================================
0000A392                            
0000A392                            Obj22_Fire:				; XREF: Obj22_Move
0000A392 6100 0000                  		bsr.w	SingleObjLoad
0000A396 6600                       		bne.s	locret_98D0
0000A398 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A39C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A3A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3A8 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A3AE 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A3B4 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A3BA 303C 0018                  		move.w	#$18,d0
0000A3BE 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A3C4 6600                       		bne.s	loc_98AA	; if not, branch
0000A3C6 4440                       		neg.w	d0
0000A3C8 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A3CC                            
0000A3CC                            loc_98AA:
0000A3CC D169 0008                  		add.w	d0,8(a1)
0000A3D0 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A3D6 337C 000E 0032             		move.w	#$E,$32(a1)
0000A3DC 2348 003C                  		move.l	a0,$3C(a1)
0000A3E0 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A3E6 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A3EC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A3F2                            
0000A3F2                            locret_98D0:
0000A3F2 4E75                       		rts	
0000A3F4                            ; ===========================================================================
0000A3F4                            
0000A3F4                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A3F4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A3F8 6B00                       		bmi.s	Obj22_ChgDir
0000A3FA 6100 0000                  		bsr.w	SpeedToPos
0000A3FE 4A28 0034                  		tst.b	$34(a0)
0000A402 6600                       		bne.s	locret_992A
0000A404 3038 D008                  		move.w	($FFFFD008).w,d0
0000A408 9068 0008                  		sub.w	8(a0),d0
0000A40C 6A00                       		bpl.s	Obj22_SetNrSonic
0000A40E 4440                       		neg.w	d0
0000A410                            
0000A410                            Obj22_SetNrSonic:
0000A410 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A414 6400                       		bcc.s	locret_992A	; if not, branch
0000A416 4A28 0001                  		tst.b	1(a0)
0000A41A 6A00                       		bpl.s	locret_992A
0000A41C 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A422 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A428 6000                       		bra.s	Obj22_Stop
0000A42A                            ; ===========================================================================
0000A42A                            
0000A42A                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A42A 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A430 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A436 317C 003B 0032             		move.w	#59,$32(a0)
0000A43C                            
0000A43C                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A43C 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A440 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A446 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A44C                            
0000A44C                            locret_992A:
0000A44C 4E75                       		rts	
0000A44E                            ; ===========================================================================
0000A44E                            
0000A44E                            Obj22_Delete:				; XREF: Obj22_Index
0000A44E 6100 0000                  		bsr.w	DeleteObject
0000A452 4E75                       		rts	
0000A454                            ; ===========================================================================
0000A454                            ; ---------------------------------------------------------------------------
0000A454                            ; Object 23 - missile that Buzz	Bomber throws
0000A454                            ; ---------------------------------------------------------------------------
0000A454                            
0000A454                            Obj23:					; XREF: Obj_Index
0000A454 7000                       		moveq	#0,d0
0000A456 1028 0024                  		move.b	$24(a0),d0
0000A45A 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A45E 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A462                            ; ===========================================================================
0000A462 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A464 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A466 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A468 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A46A 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A46C                            ; ===========================================================================
0000A46C                            
0000A46C                            Obj23_Main:				; XREF: Obj23_Index
0000A46C 5368 0032                  		subq.w	#1,$32(a0)
0000A470 6A00                       		bpl.s	Obj23_ChkCancel
0000A472 5428 0024                  		addq.b	#2,$24(a0)
0000A476 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A47E 317C 2444 0002             		move.w	#$2444,2(a0)
0000A484 117C 0004 0001             		move.b	#4,1(a0)
0000A48A 117C 0003 0018             		move.b	#3,$18(a0)
0000A490 117C 0008 0019             		move.b	#8,$19(a0)
0000A496 0228 0003 0022             		andi.b	#3,$22(a0)
0000A49C 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A4A0 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A4A2 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A4A8 117C 0087 0020             		move.b	#$87,$20(a0)
0000A4AE 117C 0001 001C             		move.b	#1,$1C(a0)
0000A4B4 6000                       		bra.s	Obj23_Animate2
0000A4B6                            ; ===========================================================================
0000A4B6                            
0000A4B6                            Obj23_Animate:				; XREF: Obj23_Index
0000A4B6 6100                       		bsr.s	Obj23_ChkCancel
0000A4B8 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A4BE 6100 0000                  		bsr.w	AnimateSprite
0000A4C2 6000 0000                  		bra.w	DisplaySprite
0000A4C6                            ; ---------------------------------------------------------------------------
0000A4C6                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A4C6                            ; destroyed, and if it has, then cancel	the missile
0000A4C6                            ; ---------------------------------------------------------------------------
0000A4C6                            
0000A4C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4C6                            
0000A4C6                            
0000A4C6                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A4C6 2268 003C                  		movea.l	$3C(a0),a1
0000A4CA 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A4CE 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A4D0 4E75                       		rts	
0000A4D2                            ; End of function Obj23_ChkCancel
0000A4D2                            
0000A4D2                            ; ===========================================================================
0000A4D2                            
0000A4D2                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A4D2 0828 0007 0022             		btst	#7,$22(a0)
0000A4D8 6600                       		bne.s	Obj23_Explode
0000A4DA 117C 0087 0020             		move.b	#$87,$20(a0)
0000A4E0 117C 0001 001C             		move.b	#1,$1C(a0)
0000A4E6 6100 0000                  		bsr.w	SpeedToPos
0000A4EA 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A4F0 6100 0000                  		bsr.w	AnimateSprite
0000A4F4 6100 0000                  		bsr.w	DisplaySprite
0000A4F8 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A4FC 0640 00E0                  		addi.w	#$E0,d0
0000A500 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A504 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A506 4E75                       		rts	
0000A508                            ; ===========================================================================
0000A508                            
0000A508                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A508 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A50C 117C 0000 0024             		move.b	#0,$24(a0)
0000A512 6000 F2E0                  		bra.w	Obj24
0000A516                            ; ===========================================================================
0000A516                            
0000A516                            Obj23_Delete:				; XREF: Obj23_Index
0000A516 6100 0000                  		bsr.w	DeleteObject
0000A51A 4E75                       		rts	
0000A51C                            ; ===========================================================================
0000A51C                            
0000A51C                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A51C 4A28 0001                  		tst.b	1(a0)
0000A520 6AF4                       		bpl.s	Obj23_Delete
0000A522 6100 0000                  		bsr.w	SpeedToPos
0000A526                            
0000A526                            Obj23_Animate2:				; XREF: Obj23_Main
0000A526 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A52C 6100 0000                  		bsr.w	AnimateSprite
0000A530 6100 0000                  		bsr.w	DisplaySprite
0000A534 4E75                       		rts	
0000A536                            ; ===========================================================================
0000A536                            Ani_obj22:
0000A536                            	include "_anim\obj22.asm"
0000A536                            ; ---------------------------------------------------------------------------
0000A536                            ; Animation script - Buzz Bomber enemy
0000A536                            ; ---------------------------------------------------------------------------
0000A536 0000                       		dc.w byte_9A1E-Ani_obj22
0000A538 0000                       		dc.w byte_9A22-Ani_obj22
0000A53A 0000                       		dc.w byte_9A26-Ani_obj22
0000A53C 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A540 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A544 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A548                            		even
0000A548                            		even
0000A548                            
0000A548                            Ani_obj23:
0000A548                            	include "_anim\obj23.asm"
0000A548                            ; ---------------------------------------------------------------------------
0000A548                            ; Animation script - missile that Buzz Bomber throws
0000A548                            ; ---------------------------------------------------------------------------
0000A548 0000                       		dc.w byte_9A2E-Ani_obj23
0000A54A 0000                       		dc.w byte_9A32-Ani_obj23
0000A54C 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A550 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A554                            		even
0000A554                            		even
0000A554                            
0000A554                            ; ---------------------------------------------------------------------------
0000A554                            ; Sprite mappings - Buzz Bomber	enemy
0000A554                            ; ---------------------------------------------------------------------------
0000A554                            Map_obj22:
0000A554                            	include "_maps\obj22.asm"
0000A554                            Map_e97a:
0000A554 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A556 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A558 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A55A 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A55C 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A55E 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A560 06                         Map_e97a_C: 	dc.b $6
0000A561 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A566 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A56B 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A570 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A575 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A57A F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A57F 06                         Map_e97a_2B: 	dc.b $6
0000A580 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A585 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A58A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A58F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A594 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A599 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A59E 07                         Map_e97a_4A: 	dc.b $7
0000A59F 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A5A4 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A5A9 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A5AE 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A5B3 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A5B8 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A5BD F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A5C2 07                         Map_e97a_6E: 	dc.b $7
0000A5C3 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A5C8 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A5CD F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A5D2 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A5D7 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A5DC F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A5E1 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A5E6 06                         Map_e97a_92: 	dc.b $6
0000A5E7 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A5EC 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A5F1 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A5F6 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A5FB F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A600 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A605 04                         Map_e97a_B1: 	dc.b $4
0000A606 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A60B 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A610 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A615 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A61A                            	even
0000A61A                            	even
0000A61A                            
0000A61A                            ; ---------------------------------------------------------------------------
0000A61A                            ; Sprite mappings - missile that Buzz Bomber throws
0000A61A                            ; ---------------------------------------------------------------------------
0000A61A                            Map_obj23:
0000A61A                            	include "_maps\obj23.asm"
0000A61A                            ; ---------------------------------------------------------------------------
0000A61A                            ; Sprite mappings - missile that Buzz Bomber throws
0000A61A                            ; ---------------------------------------------------------------------------
0000A61A 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A61E 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A622 01                         byte_9B0E:	dc.b 1
0000A623 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A628 01                         byte_9B14:	dc.b 1
0000A629 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A62E 01                         byte_9B1A:	dc.b 1
0000A62F F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A634 01                         byte_9B20:	dc.b 1
0000A635 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A63A                            		even
0000A63A                            		even
0000A63A                            
0000A63A                            ; ===========================================================================
0000A63A                            ; ---------------------------------------------------------------------------
0000A63A                            ; Object 25 - rings
0000A63A                            ; ---------------------------------------------------------------------------
0000A63A                            
0000A63A                            Obj25:					; XREF: Obj_Index
0000A63A 7000                       		moveq	#0,d0
0000A63C 1028 0024                  		move.b	$24(a0),d0
0000A640 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A644 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A648                            ; ===========================================================================
0000A648 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A64A 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A64C 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A64E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A650 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A652                            ; ---------------------------------------------------------------------------
0000A652                            ; Distances between rings (format: horizontal, vertical)
0000A652                            ; ---------------------------------------------------------------------------
0000A652 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A654 1800                       		dc.b $18, 0		; horizontal normal
0000A656 2000                       		dc.b $20, 0		; horizontal wide
0000A658 0010                       		dc.b 0,	$10		; vertical tight
0000A65A 0018                       		dc.b 0,	$18		; vertical normal
0000A65C 0020                       		dc.b 0,	$20		; vertical wide
0000A65E 1010                       		dc.b $10, $10		; diagonal
0000A660 1818                       		dc.b $18, $18
0000A662 2020                       		dc.b $20, $20
0000A664 F010                       		dc.b $F0, $10
0000A666 E818                       		dc.b $E8, $18
0000A668 E020                       		dc.b $E0, $20
0000A66A 1008                       		dc.b $10, 8
0000A66C 1810                       		dc.b $18, $10
0000A66E F008                       		dc.b $F0, 8
0000A670 E810                       		dc.b $E8, $10
0000A672                            ; ===========================================================================
0000A672                            
0000A672                            Obj25_Main:				; XREF: Obj25_Index
0000A672 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A676 7000                       		moveq	#0,d0
0000A678 1028 0023                  		move.b	$23(a0),d0
0000A67C 45F2 0002                  		lea	2(a2,d0.w),a2
0000A680 1812                       		move.b	(a2),d4
0000A682 1228 0028                  		move.b	$28(a0),d1
0000A686 1001                       		move.b	d1,d0
0000A688 0241 0007                  		andi.w	#7,d1
0000A68C 0C41 0007                  		cmpi.w	#7,d1
0000A690 6600                       		bne.s	loc_9B80
0000A692 7206                       		moveq	#6,d1
0000A694                            
0000A694                            loc_9B80:
0000A694 4841                       		swap	d1
0000A696 323C 0000                  		move.w	#0,d1
0000A69A E808                       		lsr.b	#4,d0
0000A69C D040                       		add.w	d0,d0
0000A69E 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A6A2 4885                       		ext.w	d5
0000A6A4 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A6A8 4886                       		ext.w	d6
0000A6AA 2248                       		movea.l	a0,a1
0000A6AC 3428 0008                  		move.w	8(a0),d2
0000A6B0 3628 000C                  		move.w	$C(a0),d3
0000A6B4 E20C                       		lsr.b	#1,d4
0000A6B6 6500                       		bcs.s	loc_9C02
0000A6B8 0892 0007                  		bclr	#7,(a2)
0000A6BC 6000                       		bra.s	loc_9BBA
0000A6BE                            ; ===========================================================================
0000A6BE                            
0000A6BE                            Obj25_MakeRings:
0000A6BE 4841                       		swap	d1
0000A6C0 E20C                       		lsr.b	#1,d4
0000A6C2 6500                       		bcs.s	loc_9C02
0000A6C4 0892 0007                  		bclr	#7,(a2)
0000A6C8 6100 0000                  		bsr.w	SingleObjLoad
0000A6CC 6600                       		bne.s	loc_9C0E
0000A6CE                            
0000A6CE                            loc_9BBA:				; XREF: Obj25_Main
0000A6CE 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A6D2 5429 0024                  		addq.b	#2,$24(a1)
0000A6D6 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A6DA 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A6E0 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A6E4 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A6EC 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A6F2 137C 0004 0001             		move.b	#4,1(a1)
0000A6F8 137C 0002 0018             		move.b	#2,$18(a1)
0000A6FE 137C 0047 0020             		move.b	#$47,$20(a1)
0000A704 137C 0008 0019             		move.b	#8,$19(a1)
0000A70A 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A710 1341 0034                  		move.b	d1,$34(a1)
0000A714                            
0000A714                            loc_9C02:
0000A714 5241                       		addq.w	#1,d1
0000A716 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A718 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A71A 4841                       		swap	d1
0000A71C 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A720                            
0000A720                            loc_9C0E:
0000A720 0812 0000                  		btst	#0,(a2)
0000A724 6600 0000                  		bne.w	DeleteObject
0000A728                            
0000A728                            Obj25_Animate:				; XREF: Obj25_Index
0000A728 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A72E 6100 0000                  		bsr.w	DisplaySprite
0000A732 3028 0032                  		move.w	$32(a0),d0
0000A736 0240 FF80                  		andi.w	#$FF80,d0
0000A73A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A73E 0441 0080                  		subi.w	#$80,d1
0000A742 0241 FF80                  		andi.w	#$FF80,d1
0000A746 9041                       		sub.w	d1,d0
0000A748 0C40 0280                  		cmpi.w	#$280,d0
0000A74C 6200                       		bhi.s	Obj25_Delete
0000A74E 4E75                       		rts	
0000A750                            ; ===========================================================================
0000A750                            
0000A750                            Obj25_Collect:				; XREF: Obj25_Index
0000A750 5428 0024                  		addq.b	#2,$24(a0)
0000A754 117C 0000 0020             		move.b	#0,$20(a0)
0000A75A 117C 0001 0018             		move.b	#1,$18(a0)
0000A760 6100 0000                  		bsr.w	CollectRing
0000A764 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A768 7000                       		moveq	#0,d0
0000A76A 1028 0023                  		move.b	$23(a0),d0
0000A76E 1228 0034                  		move.b	$34(a0),d1
0000A772 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A776                            
0000A776                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A776 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A77C 6100 0000                  		bsr.w	AnimateSprite
0000A780 6000 0000                  		bra.w	DisplaySprite
0000A784                            ; ===========================================================================
0000A784                            
0000A784                            Obj25_Delete:				; XREF: Obj25_Index
0000A784 6000 0000                  		bra.w	DeleteObject
0000A788                            
0000A788                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A788                            
0000A788                            
0000A788                            CollectRing:				; XREF: Obj25_Collect
0000A788 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A78C 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A792 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A796 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A79C 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A79E 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A7A4 6700                       		beq.s	loc_9CA4
0000A7A6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A7AC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A7AE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A7B4 6600                       		bne.s	Obj25_PlaySnd
0000A7B6                            
0000A7B6                            loc_9CA4:
0000A7B6 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A7BA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A7BE 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A7C2                            
0000A7C2                            Obj25_PlaySnd:
0000A7C2 4EF9 0000 15EC             		jmp	(PlaySound_Special).l
0000A7C8                            ; End of function CollectRing
0000A7C8                            
0000A7C8                            ; ===========================================================================
0000A7C8                            ; ---------------------------------------------------------------------------
0000A7C8                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A7C8                            ; ---------------------------------------------------------------------------
0000A7C8                            
0000A7C8                            Obj37:					; XREF: Obj_Index
0000A7C8 7000                       		moveq	#0,d0
0000A7CA 1028 0024                  		move.b	$24(a0),d0
0000A7CE 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A7D2 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A7D6                            ; ===========================================================================
0000A7D6 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A7D8 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A7DA 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A7DC 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A7DE 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A7E0                            ; ===========================================================================
0000A7E0                            
0000A7E0                            Obj37_CountRings:			; XREF: Obj37_Index
0000A7E0 2248                       		movea.l	a0,a1
0000A7E2 7A00                       		moveq	#0,d5
0000A7E4 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A7E8 7020                       		moveq	#32,d0
0000A7EA BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A7EC 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A7EE 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A7F0                            
0000A7F0                            loc_9CDE:
0000A7F0 5345                       		subq.w	#1,d5
0000A7F2 383C 0288                  		move.w	#$288,d4
0000A7F6 6000                       		bra.s	Obj37_MakeRings
0000A7F8                            ; ===========================================================================
0000A7F8                            
0000A7F8                            Obj37_Loop:
0000A7F8 6100 0000                  		bsr.w	SingleObjLoad
0000A7FC 6600 0000                  		bne.w	Obj37_ResetCounter
0000A800                            
0000A800                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A800 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A804 5429 0024                  		addq.b	#2,$24(a1)
0000A808 137C 0008 0016             		move.b	#8,$16(a1)
0000A80E 137C 0008 0017             		move.b	#8,$17(a1)
0000A814 3368 0008 0008             		move.w	8(a0),8(a1)
0000A81A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A820 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A828 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A82E 137C 0004 0001             		move.b	#4,1(a1)
0000A834 137C 0003 0018             		move.b	#3,$18(a1)
0000A83A 137C 0047 0020             		move.b	#$47,$20(a1)
0000A840 137C 0008 0019             		move.b	#8,$19(a1)
0000A846 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A84C 4A44                       		tst.w	d4
0000A84E 6B00                       		bmi.s	loc_9D62
0000A850 3004                       		move.w	d4,d0
0000A852 6100 8532                  		bsr.w	CalcSine
0000A856 3404                       		move.w	d4,d2
0000A858 E04A                       		lsr.w	#8,d2
0000A85A E560                       		asl.w	d2,d0
0000A85C E561                       		asl.w	d2,d1
0000A85E 3400                       		move.w	d0,d2
0000A860 3601                       		move.w	d1,d3
0000A862 0604 0010                  		addi.b	#$10,d4
0000A866 6400                       		bcc.s	loc_9D62
0000A868 0444 0080                  		subi.w	#$80,d4
0000A86C 6400                       		bcc.s	loc_9D62
0000A86E 383C 0288                  		move.w	#$288,d4
0000A872                            
0000A872                            loc_9D62:
0000A872 3342 0010                  		move.w	d2,$10(a1)
0000A876 3343 0012                  		move.w	d3,$12(a1)
0000A87A 4442                       		neg.w	d2
0000A87C 4444                       		neg.w	d4
0000A87E 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A882                            
0000A882                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A882 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A888 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A88E 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A894 303C 00C6                  		move.w	#$C6,d0
0000A898 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A89E                            
0000A89E                            Obj37_Bounce:				; XREF: Obj37_Index
0000A89E 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A8A4 7218                       		moveq	#$18,d1
0000A8A6 4EB9 0000 0000             		jsr	ObjectFallCustom
0000A8AC 4A68 0012                  		tst.w	$12(a0)
0000A8B0 6B00                       		bmi.s	Obj37_ChkDel
0000A8B2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A8B6 D007                       		add.b	d7,d0
0000A8B8 0200 0003                  		andi.b	#3,d0
0000A8BC 6600                       		bne.s	Obj37_ChkDel
0000A8BE 4EB9 0000 0000             		jsr	ObjHitFloor
0000A8C4 4A41                       		tst.w	d1
0000A8C6 6A00                       		bpl.s	Obj37_ChkDel
0000A8C8 D368 000C                  		add.w	d1,$C(a0)
0000A8CC 3028 0012                  		move.w	$12(a0),d0
0000A8D0 E440                       		asr.w	#2,d0
0000A8D2 9168 0012                  		sub.w	d0,$12(a0)
0000A8D6 4468 0012                  		neg.w	$12(a0)
0000A8DA                            
0000A8DA                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A8DA 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A8DE 6700                       		beq.s	Obj37_Delete
0000A8E0 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A8E4 0640 00E0                  		addi.w	#$E0,d0
0000A8E8 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A8EC 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A8EE 6000 0000                  		bra.w	DisplaySprite
0000A8F2                            ; ===========================================================================
0000A8F2                            
0000A8F2                            Obj37_Collect:				; XREF: Obj37_Index
0000A8F2 5428 0024                  		addq.b	#2,$24(a0)
0000A8F6 117C 0000 0020             		move.b	#0,$20(a0)
0000A8FC 117C 0001 0018             		move.b	#1,$18(a0)
0000A902 6100 FE84                  		bsr.w	CollectRing
0000A906                            
0000A906                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A906 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A90C 6100 0000                  		bsr.w	AnimateSprite
0000A910 6000 0000                  		bra.w	DisplaySprite
0000A914                            ; ===========================================================================
0000A914                            
0000A914                            Obj37_Delete:				; XREF: Obj37_Index
0000A914 6000 0000                  		bra.w	DeleteObject
0000A918                            ; ===========================================================================
0000A918                            ; ---------------------------------------------------------------------------
0000A918                            ; Object 4B - giant ring for entry to special stage
0000A918                            ; ---------------------------------------------------------------------------
0000A918                            
0000A918                            Obj4B:					; XREF: Obj_Index
0000A918 7000                       		moveq	#0,d0
0000A91A 1028 0024                  		move.b	$24(a0),d0
0000A91E 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A922 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A926                            ; ===========================================================================
0000A926 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A928 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A92A 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A92C 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A92E                            ; ===========================================================================
0000A92E                            
0000A92E                            Obj4B_Main:				; XREF: Obj4B_Index
0000A92E 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A936 317C 2400 0002             		move.w	#$2400,2(a0)
0000A93C 0028 0004 0001             		ori.b	#4,1(a0)
0000A942 117C 0040 0019             		move.b	#$40,$19(a0)
0000A948 4A28 0001                  		tst.b	1(a0)
0000A94C 6A00                       		bpl.s	Obj4B_Animate
0000A94E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A954 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A958 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A95E 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A960 4E75                       		rts	
0000A962                            ; ===========================================================================
0000A962                            
0000A962                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A962 5428 0024                  		addq.b	#2,$24(a0)
0000A966 117C 0002 0018             		move.b	#2,$18(a0)
0000A96C 117C 0052 0020             		move.b	#$52,$20(a0)
0000A972 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A978                            
0000A978                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A978 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A97E 3028 0008                  		move.w	8(a0),d0
0000A982 0240 FF80                  		andi.w	#$FF80,d0
0000A986 3238 F700                  		move.w	($FFFFF700).w,d1
0000A98A 0441 0080                  		subi.w	#$80,d1
0000A98E 0241 FF80                  		andi.w	#$FF80,d1
0000A992 9041                       		sub.w	d1,d0
0000A994 0C40 0280                  		cmpi.w	#$280,d0
0000A998 6200 0000                  		bhi.w	DeleteObject
0000A99C 6000 0000                  		bra.w	DisplaySprite
0000A9A0                            ; ===========================================================================
0000A9A0                            
0000A9A0                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A9A0 5528 0024                  		subq.b	#2,$24(a0)
0000A9A4 117C 0000 0020             		move.b	#0,$20(a0)
0000A9AA 6100 0000                  		bsr.w	SingleObjLoad
0000A9AE 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A9B2 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A9B6 3368 0008 0008             		move.w	8(a0),8(a1)
0000A9BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A9C2 2348 003C                  		move.l	a0,$3C(a1)
0000A9C6 3038 D008                  		move.w	($FFFFD008).w,d0
0000A9CA B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A9CE 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A9D0 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A9D6                            
0000A9D6                            Obj4B_PlaySnd:
0000A9D6 303C 00C3                  		move.w	#$C3,d0
0000A9DA 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A9E0 6096                       		bra.s	Obj4B_Animate
0000A9E2                            ; ===========================================================================
0000A9E2                            
0000A9E2                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A9E2 6000 0000                  		bra.w	DeleteObject
0000A9E6                            ; ===========================================================================
0000A9E6                            ; ---------------------------------------------------------------------------
0000A9E6                            ; Object 7C - flash effect when	you collect the	giant ring
0000A9E6                            ; ---------------------------------------------------------------------------
0000A9E6                            
0000A9E6                            Obj7C:					; XREF: Obj_Index
0000A9E6 7000                       		moveq	#0,d0
0000A9E8 1028 0024                  		move.b	$24(a0),d0
0000A9EC 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A9F0 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A9F4                            ; ===========================================================================
0000A9F4 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A9F6 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A9F8 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A9FA                            ; ===========================================================================
0000A9FA                            
0000A9FA                            Obj7C_Main:				; XREF: Obj7C_Index
0000A9FA 5428 0024                  		addq.b	#2,$24(a0)
0000A9FE 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000AA06 317C 2462 0002             		move.w	#$2462,2(a0)
0000AA0C 0028 0004 0001             		ori.b	#4,1(a0)
0000AA12 117C 0000 0018             		move.b	#0,$18(a0)
0000AA18 117C 0020 0019             		move.b	#$20,$19(a0)
0000AA1E 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000AA24                            
0000AA24                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000AA24 6100                       		bsr.s	Obj7C_Collect
0000AA26 3028 0008                  		move.w	8(a0),d0
0000AA2A 0240 FF80                  		andi.w	#$FF80,d0
0000AA2E 3238 F700                  		move.w	($FFFFF700).w,d1
0000AA32 0441 0080                  		subi.w	#$80,d1
0000AA36 0241 FF80                  		andi.w	#$FF80,d1
0000AA3A 9041                       		sub.w	d1,d0
0000AA3C 0C40 0280                  		cmpi.w	#$280,d0
0000AA40 6200 0000                  		bhi.w	DeleteObject
0000AA44 6000 0000                  		bra.w	DisplaySprite
0000AA48                            
0000AA48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AA48                            
0000AA48                            
0000AA48                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000AA48 5328 001E                  		subq.b	#1,$1E(a0)
0000AA4C 6A00                       		bpl.s	locret_9F76
0000AA4E 117C 0001 001E             		move.b	#1,$1E(a0)
0000AA54 5228 001A                  		addq.b	#1,$1A(a0)
0000AA58 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000AA5E 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000AA60 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000AA66 6600                       		bne.s	locret_9F76	; if not, branch
0000AA68 2268 003C                  		movea.l	$3C(a0),a1
0000AA6C 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000AA72 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000AA78 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000AA7E 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000AA82 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000AA86                            
0000AA86                            locret_9F76:
0000AA86 4E75                       		rts	
0000AA88                            ; ===========================================================================
0000AA88                            
0000AA88                            Obj7C_End:				; XREF: Obj7C_Collect
0000AA88 5428 0024                  		addq.b	#2,$24(a0)
0000AA8C 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000AA92 588F                       		addq.l	#4,sp
0000AA94 4E75                       		rts	
0000AA96                            ; End of function Obj7C_Collect
0000AA96                            
0000AA96                            ; ===========================================================================
0000AA96                            
0000AA96                            Obj7C_Delete:				; XREF: Obj7C_Index
0000AA96 6000 0000                  		bra.w	DeleteObject
0000AA9A                            ; ===========================================================================
0000AA9A                            Ani_obj25:
0000AA9A                            	include "_anim\obj25.asm"
0000AA9A                            ; ---------------------------------------------------------------------------
0000AA9A                            ; Animation script - ring
0000AA9A                            ; ---------------------------------------------------------------------------
0000AA9A 0000                       		dc.w byte_9F8C-Ani_obj25
0000AA9C 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000AAA2                            		even
0000AAA2                            		even
0000AAA2                            
0000AAA2                            ; ---------------------------------------------------------------------------
0000AAA2                            ; Sprite mappings - rings
0000AAA2                            ; ---------------------------------------------------------------------------
0000AAA2                            Map_obj25:
0000AAA2                            	include "_maps\obj25.asm"
0000AAA2                            ; ---------------------------------------------------------------------------
0000AAA2                            ; Sprite mappings - rings
0000AAA2                            ; ---------------------------------------------------------------------------
0000AAA2 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000AAA6 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000AAAA 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000AAAE 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000AAB2 01                         byte_9FA2:	dc.b 1
0000AAB3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000AAB8 01                         byte_9FA8:	dc.b 1
0000AAB9 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000AABE 01                         byte_9FAE:	dc.b 1
0000AABF F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000AAC4 01                         byte_9FB4:	dc.b 1
0000AAC5 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000AACA 01                         byte_9FBA:	dc.b 1
0000AACB F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000AAD0 01                         byte_9FC0:	dc.b 1
0000AAD1 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000AAD6 01                         byte_9FC6:	dc.b 1
0000AAD7 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000AADC 01                         byte_9FCC:	dc.b 1
0000AADD F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000AAE2                            		even
0000AAE2                            		even
0000AAE2                            
0000AAE2                            ; ---------------------------------------------------------------------------
0000AAE2                            ; Sprite mappings - giant ring
0000AAE2                            ; ---------------------------------------------------------------------------
0000AAE2                            Map_obj4B:
0000AAE2                            	include "_maps\obj4B.asm"
0000AAE2                            ; ---------------------------------------------------------------------------
0000AAE2                            ; Sprite mappings - giant ring
0000AAE2                            ; ---------------------------------------------------------------------------
0000AAE2 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000AAE6 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000AAEA 0A                         byte_9FDA:	dc.b $A
0000AAEB E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000AAF0 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000AAF5 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000AAFA E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000AAFF F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000AB04 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000AB09 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000AB0E 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000AB13 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000AB18 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000AB1D 08                         byte_A00D:	dc.b 8
0000AB1E E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000AB23 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000AB28 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000AB2D F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000AB32 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000AB37 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000AB3C 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000AB41 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000AB46 04                         byte_A036:	dc.b 4
0000AB47 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000AB4C E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000AB51 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000AB56 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000AB5B 08                         byte_A04B:	dc.b 8
0000AB5C E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000AB61 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000AB66 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000AB6B F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000AB70 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000AB75 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000AB7A 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000AB7F 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000AB84                            		even
0000AB84                            		even
0000AB84                            
0000AB84                            ; ---------------------------------------------------------------------------
0000AB84                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB84                            ; ---------------------------------------------------------------------------
0000AB84                            Map_obj7C:
0000AB84                            	include "_maps\obj7C.asm"
0000AB84                            ; ---------------------------------------------------------------------------
0000AB84                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB84                            ; ---------------------------------------------------------------------------
0000AB84 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000AB88 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000AB8C 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000AB90 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000AB94 02                         byte_A084:	dc.b 2
0000AB95 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000AB9A 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000AB9F 04                         byte_A08F:	dc.b 4
0000ABA0 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000ABA5 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000ABAA 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000ABAF 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000ABB4 04                         byte_A0A4:	dc.b 4
0000ABB5 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000ABBA E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000ABBF 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000ABC4 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000ABC9 04                         byte_A0B9:	dc.b 4
0000ABCA E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000ABCF E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000ABD4 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000ABD9 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000ABDE 04                         byte_A0CE:	dc.b 4
0000ABDF E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000ABE4 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000ABE9 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000ABEE 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000ABF3 04                         byte_A0E3:	dc.b 4
0000ABF4 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000ABF9 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000ABFE 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000AC03 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000AC08 02                         byte_A0F8:	dc.b 2
0000AC09 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000AC0E 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000AC13 04                         byte_A103:	dc.b 4
0000AC14 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000AC19 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000AC1E 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000AC23 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000AC28                            		even
0000AC28                            		even
0000AC28                            
0000AC28                            ; ===========================================================================
0000AC28                            ; ---------------------------------------------------------------------------
0000AC28                            ; Object 26 - monitors
0000AC28                            ; ---------------------------------------------------------------------------
0000AC28                            
0000AC28                            Obj26:					; XREF: Obj_Index
0000AC28 7000                       		moveq	#0,d0
0000AC2A 1028 0024                  		move.b	$24(a0),d0
0000AC2E 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000AC32 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000AC36                            ; ===========================================================================
0000AC36 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000AC38 0000                       		dc.w Obj26_Solid-Obj26_Index
0000AC3A 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000AC3C 0000                       		dc.w Obj26_Animate-Obj26_Index
0000AC3E 0000                       		dc.w Obj26_Display-Obj26_Index
0000AC40                            ; ===========================================================================
0000AC40                            
0000AC40                            Obj26_Main:				; XREF: Obj26_Index
0000AC40 5428 0024                  		addq.b	#2,$24(a0)
0000AC44 117C 000E 0016             		move.b	#$E,$16(a0)
0000AC4A 117C 000E 0017             		move.b	#$E,$17(a0)
0000AC50 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000AC58 317C 0680 0002             		move.w	#$680,2(a0)
0000AC5E 117C 0004 0001             		move.b	#4,1(a0)
0000AC64 117C 0003 0018             		move.b	#3,$18(a0)
0000AC6A 117C 000F 0019             		move.b	#$F,$19(a0)
0000AC70 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AC74 7000                       		moveq	#0,d0
0000AC76 1028 0023                  		move.b	$23(a0),d0
0000AC7A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000AC80 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000AC86 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000AC88 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000AC8E 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000AC94 4E75                       		rts	
0000AC96                            ; ===========================================================================
0000AC96                            
0000AC96                            Obj26_NotBroken:			; XREF: Obj26_Main
0000AC96 117C 0046 0020             		move.b	#$46,$20(a0)
0000AC9C 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000ACA2                            
0000ACA2                            Obj26_Solid:				; XREF: Obj26_Index
0000ACA2 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000ACA6 6700                       		beq.s	loc_A1EC	; if not, branch
0000ACA8 5500                       		subq.b	#2,d0
0000ACAA 6600                       		bne.s	Obj26_Fall
0000ACAC 7200                       		moveq	#0,d1
0000ACAE 1228 0019                  		move.b	$19(a0),d1
0000ACB2 0641 000B                  		addi.w	#$B,d1
0000ACB6 6100 D38A                  		bsr.w	ExitPlatform
0000ACBA 0829 0003 0022             		btst	#3,$22(a1)
0000ACC0 6600 0000                  		bne.w	loc_A1BC
0000ACC4 4228 0025                  		clr.b	$25(a0)
0000ACC8 6000 0000                  		bra.w	Obj26_Animate
0000ACCC                            ; ===========================================================================
0000ACCC                            
0000ACCC                            loc_A1BC:				; XREF: Obj26_Solid
0000ACCC 363C 0010                  		move.w	#$10,d3
0000ACD0 3428 0008                  		move.w	8(a0),d2
0000ACD4 6100 D8CA                  		bsr.w	MvSonicOnPtfm
0000ACD8 6000 0000                  		bra.w	Obj26_Animate
0000ACDC                            ; ===========================================================================
0000ACDC                            
0000ACDC                            Obj26_Fall:				; XREF: Obj26_Solid
0000ACDC 6100 0000                  		bsr.w	ObjectFall
0000ACE0 4EB9 0000 0000             		jsr	ObjHitFloor
0000ACE6 4A41                       		tst.w	d1
0000ACE8 6A00 0000                  		bpl.w	Obj26_Animate
0000ACEC D368 000C                  		add.w	d1,$C(a0)
0000ACF0 4268 0012                  		clr.w	$12(a0)
0000ACF4 4228 0025                  		clr.b	$25(a0)
0000ACF8 6000 0000                  		bra.w	Obj26_Animate
0000ACFC                            ; ===========================================================================
0000ACFC                            
0000ACFC                            loc_A1EC:				; XREF: Obj26_Solid
0000ACFC 323C 001A                  		move.w	#$1A,d1
0000AD00 343C 000F                  		move.w	#$F,d2
0000AD04 6100 0000                  		bsr.w	Obj26_SolidSides
0000AD08 6700 0000                  		beq.w	loc_A25C
0000AD0C 4A69 0012                  		tst.w	$12(a1)
0000AD10 6B00                       		bmi.s	loc_A20A
0000AD12 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000AD18 6700                       		beq.s	loc_A25C	; if yes, branch
0000AD1A                            
0000AD1A                            loc_A20A:
0000AD1A 4A41                       		tst.w	d1
0000AD1C 6A00                       		bpl.s	loc_A220
0000AD1E 9769 000C                  		sub.w	d3,$C(a1)
0000AD22 6100 D20C                  		bsr.w	loc_74AE
0000AD26 117C 0002 0025             		move.b	#2,$25(a0)
0000AD2C 6000 0000                  		bra.w	Obj26_Animate
0000AD30                            ; ===========================================================================
0000AD30                            
0000AD30                            loc_A220:
0000AD30 4A40                       		tst.w	d0
0000AD32 6700 0000                  		beq.w	loc_A246
0000AD36 6B00                       		bmi.s	loc_A230
0000AD38 4A69 0010                  		tst.w	$10(a1)
0000AD3C 6B00                       		bmi.s	loc_A246
0000AD3E 6000                       		bra.s	loc_A236
0000AD40                            ; ===========================================================================
0000AD40                            
0000AD40                            loc_A230:
0000AD40 4A69 0010                  		tst.w	$10(a1)
0000AD44 6A00                       		bpl.s	loc_A246
0000AD46                            
0000AD46                            loc_A236:
0000AD46 9169 0008                  		sub.w	d0,8(a1)
0000AD4A 337C 0000 0014             		move.w	#0,$14(a1)
0000AD50 337C 0000 0010             		move.w	#0,$10(a1)
0000AD56                            
0000AD56                            loc_A246:
0000AD56 0829 0001 0022             		btst	#1,$22(a1)
0000AD5C 6600                       		bne.s	loc_A26A
0000AD5E 08E9 0005 0022             		bset	#5,$22(a1)
0000AD64 08E8 0005 0022             		bset	#5,$22(a0)
0000AD6A 6000                       		bra.s	Obj26_Animate
0000AD6C                            ; ===========================================================================
0000AD6C                            
0000AD6C                            loc_A25C:
0000AD6C 0828 0005 0022             		btst	#5,$22(a0)
0000AD72 6700                       		beq.s	Obj26_Animate
0000AD74 337C 0001 001C             		move.w	#1,$1C(a1)
0000AD7A                            
0000AD7A                            loc_A26A:
0000AD7A 08A8 0005 0022             		bclr	#5,$22(a0)
0000AD80 08A9 0005 0022             		bclr	#5,$22(a1)
0000AD86                            
0000AD86                            Obj26_Animate:				; XREF: Obj26_Index
0000AD86 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AD8C 6100 0000                  		bsr.w	AnimateSprite
0000AD90                            
0000AD90                            Obj26_Display:				; XREF: Obj26_Index
0000AD90 6100 0000                  		bsr.w	DisplaySprite
0000AD94 3028 0008                  		move.w	8(a0),d0
0000AD98 0240 FF80                  		andi.w	#$FF80,d0
0000AD9C 3238 F700                  		move.w	($FFFFF700).w,d1
0000ADA0 0441 0080                  		subi.w	#$80,d1
0000ADA4 0241 FF80                  		andi.w	#$FF80,d1
0000ADA8 9041                       		sub.w	d1,d0
0000ADAA 0C40 0280                  		cmpi.w	#$280,d0
0000ADAE 6200 0000                  		bhi.w	DeleteObject
0000ADB2 4E75                       		rts	
0000ADB4                            ; ===========================================================================
0000ADB4                            
0000ADB4                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000ADB4 5428 0024                  		addq.b	#2,$24(a0)
0000ADB8 117C 0000 0020             		move.b	#0,$20(a0)
0000ADBE 6100 0000                  		bsr.w	SingleObjLoad
0000ADC2 6600                       		bne.s	Obj26_Explode
0000ADC4 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000ADC8 3368 0008 0008             		move.w	8(a0),8(a1)
0000ADCE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ADD4 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000ADDA 7400                       		moveq	#0,d2	; GMZ
0000ADDC 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000ADDE                            
0000ADDE                            Obj26_Explode:
0000ADDE 6100 0000                  		bsr.w	SingleObjLoad
0000ADE2 6600                       		bne.s	Obj26_SetBroken
0000ADE4 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000ADE8 5429 0024                  		addq.b	#2,$24(a1)
0000ADEC 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000ADF0 3368 0008 0008             		move.w	8(a0),8(a1)
0000ADF6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ADFC                            
0000ADFC                            Obj26_NextExplosion:
0000ADFC 5802                       		addq.b	#4,d2
0000ADFE 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000AE02                            
0000AE02                            Obj26_SetBroken:
0000AE02 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AE06 7000                       		moveq	#0,d0
0000AE08 1028 0023                  		move.b	$23(a0),d0
0000AE0C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000AE12 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000AE18 6000 0000                  		bra.w	DisplaySprite
0000AE1C                            ; ===========================================================================
0000AE1C                            ; ---------------------------------------------------------------------------
0000AE1C                            ; Object 2E - contents of monitors
0000AE1C                            ; ---------------------------------------------------------------------------
0000AE1C                            
0000AE1C                            Obj2E:					; XREF: Obj_Index
0000AE1C 7000                       		moveq	#0,d0
0000AE1E 1028 0024                  		move.b	$24(a0),d0
0000AE22 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000AE26 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000AE2A 6000 0000                  		bra.w	DisplaySprite
0000AE2E                            ; ===========================================================================
0000AE2E 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000AE30 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000AE32 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000AE34                            ; ===========================================================================
0000AE34                            
0000AE34                            Obj2E_Main:				; XREF: Obj2E_Index
0000AE34 5428 0024                  		addq.b	#2,$24(a0)
0000AE38 317C 0680 0002             		move.w	#$680,2(a0)
0000AE3E 117C 0024 0001             		move.b	#$24,1(a0)
0000AE44 117C 0003 0018             		move.b	#3,$18(a0)
0000AE4A 117C 0008 0019             		move.b	#8,$19(a0)
0000AE50 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AE56 7000                       		moveq	#0,d0
0000AE58 1028 001C                  		move.b	$1C(a0),d0
0000AE5C 5400                       		addq.b	#2,d0
0000AE5E 1140 001A                  		move.b	d0,$1A(a0)
0000AE62 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AE68 D000                       		add.b	d0,d0
0000AE6A D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AE6E 5249                       		addq.w	#1,a1
0000AE70 2149 0004                  		move.l	a1,4(a0)
0000AE74                            
0000AE74                            Obj2E_Move:				; XREF: Obj2E_Index
0000AE74 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AE78 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AE7C 7218                       		moveq	#$18,d1
0000AE7E 4EF9 0000 0000             		jmp	ObjectFallCustom
0000AE84                            ; ===========================================================================
0000AE84                            
0000AE84                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AE84 5428 0024                  		addq.b	#2,$24(a0)
0000AE88 317C 001D 001E             		move.w	#29,$1E(a0)
0000AE8E 1028 001C                  		move.b	$1C(a0),d0
0000AE92 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AE96 6600                       		bne.s	Obj2E_ChkSonic
0000AE98 4E75                       		rts			; Eggman monitor does nothing
0000AE9A                            ; ===========================================================================
0000AE9A                            
0000AE9A                            Obj2E_ChkSonic:
0000AE9A 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AE9E 6600                       		bne.s	Obj2E_ChkShoes
0000AEA0                            
0000AEA0                            ExtraLife:
0000AEA0 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AEA4 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AEA8 303C 0088                  		move.w	#$88,d0
0000AEAC 4EF9 0000 15E6             		jmp	(PlaySound).l	; play extra life music
0000AEB2                            ; ===========================================================================
0000AEB2                            
0000AEB2                            Obj2E_ChkShoes:
0000AEB2 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AEB6 6600                       		bne.s	Obj2E_ChkShield
0000AEB8 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AEBE 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AEC4 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AECA 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AED0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AED6 303C 00E2                  		move.w	#$E2,d0
0000AEDA 4EF9 0000 15E6             		jmp	(PlaySound).l	; Speed	up the music
0000AEE0                            ; ===========================================================================
0000AEE0                            
0000AEE0                            Obj2E_ChkShield:
0000AEE0 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AEE4 6600                       		bne.s	Obj2E_ChkInvinc
0000AEE6 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AEEC 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AEF2 303C 00AF                  		move.w	#$AF,d0
0000AEF6 4EF9 0000 15E6             		jmp	(PlaySound).l	; play shield sound
0000AEFC                            ; ===========================================================================
0000AEFC                            
0000AEFC                            Obj2E_ChkInvinc:
0000AEFC 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AF00 6600                       		bne.s	Obj2E_ChkRings
0000AF02 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AF08 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AF0E 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AF14 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AF1A 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AF20 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AF26 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AF2C 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AF32 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AF38 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AF3E 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AF42 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AF44 303C 0087                  		move.w	#$87,d0
0000AF48 4EF9 0000 15E6             		jmp	(PlaySound).l	; play invincibility music
0000AF4E                            ; ===========================================================================
0000AF4E                            
0000AF4E                            Obj2E_NoMusic:
0000AF4E 4E75                       		rts	
0000AF50                            ; ===========================================================================
0000AF50                            
0000AF50                            Obj2E_ChkRings:
0000AF50 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AF54 6600                       		bne.s	Obj2E_ChkS
0000AF56 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AF5C 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AF62 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AF68 6500                       		bcs.s	Obj2E_RingSound
0000AF6A 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AF70 6700 FF2E                  		beq.w	ExtraLife
0000AF74 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AF7A 6500                       		bcs.s	Obj2E_RingSound
0000AF7C 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AF82 6700 FF1C                  		beq.w	ExtraLife
0000AF86                            
0000AF86                            Obj2E_RingSound:
0000AF86 303C 00B5                  		move.w	#$B5,d0
0000AF8A 4EF9 0000 15E6             		jmp	(PlaySound).l	; play ring sound
0000AF90                            ; ===========================================================================
0000AF90                            
0000AF90                            Obj2E_ChkS:
0000AF90 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AF94 6600                       		bne.s	Obj2E_ChkEnd
0000AF96                            		; nop	
0000AF96 7201                       		moveq	#1,d1
0000AF98 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AF9C                            
0000AF9C                            Obj2E_ChkEnd:
0000AF9C 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AF9E                            ; ===========================================================================
0000AF9E                            
0000AF9E                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AF9E 5368 001E                  		subq.w	#1,$1E(a0)
0000AFA2 6B00 0000                  		bmi.w	DeleteObject
0000AFA6 4E75                       		rts	
0000AFA8                            ; ---------------------------------------------------------------------------
0000AFA8                            ; Subroutine to	make the sides of a monitor solid
0000AFA8                            ; ---------------------------------------------------------------------------
0000AFA8                            
0000AFA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AFA8                            
0000AFA8                            
0000AFA8                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AFA8 43F8 D000                  		lea	($FFFFD000).w,a1
0000AFAC 3029 0008                  		move.w	8(a1),d0
0000AFB0 9068 0008                  		sub.w	8(a0),d0
0000AFB4 D041                       		add.w	d1,d0
0000AFB6 6B00                       		bmi.s	loc_A4E6
0000AFB8 3601                       		move.w	d1,d3
0000AFBA D643                       		add.w	d3,d3
0000AFBC B043                       		cmp.w	d3,d0
0000AFBE 6200                       		bhi.s	loc_A4E6
0000AFC0 1629 0016                  		move.b	$16(a1),d3
0000AFC4 4883                       		ext.w	d3
0000AFC6 D443                       		add.w	d3,d2
0000AFC8 3629 000C                  		move.w	$C(a1),d3
0000AFCC 9668 000C                  		sub.w	$C(a0),d3
0000AFD0 D642                       		add.w	d2,d3
0000AFD2 6B00                       		bmi.s	loc_A4E6
0000AFD4 D442                       		add.w	d2,d2
0000AFD6 B642                       		cmp.w	d2,d3
0000AFD8 6400                       		bcc.s	loc_A4E6
0000AFDA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AFDE 6B00                       		bmi.s	loc_A4E6
0000AFE0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AFE6 6400                       		bcc.s	loc_A4E6
0000AFE8 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AFEC 6600                       		bne.s	loc_A4E6
0000AFEE B240                       		cmp.w	d0,d1
0000AFF0 6400                       		bcc.s	loc_A4DC
0000AFF2 D241                       		add.w	d1,d1
0000AFF4 9041                       		sub.w	d1,d0
0000AFF6                            
0000AFF6                            loc_A4DC:
0000AFF6 0C43 0010                  		cmpi.w	#$10,d3
0000AFFA 6500                       		bcs.s	loc_A4EA
0000AFFC                            
0000AFFC                            loc_A4E2:
0000AFFC 7201                       		moveq	#1,d1
0000AFFE 4E75                       		rts	
0000B000                            ; ===========================================================================
0000B000                            
0000B000                            loc_A4E6:
0000B000 7200                       		moveq	#0,d1
0000B002 4E75                       		rts	
0000B004                            ; ===========================================================================
0000B004                            
0000B004                            loc_A4EA:
0000B004 7200                       		moveq	#0,d1
0000B006 1228 0019                  		move.b	$19(a0),d1
0000B00A 5841                       		addq.w	#4,d1
0000B00C 3401                       		move.w	d1,d2
0000B00E D442                       		add.w	d2,d2
0000B010 D269 0008                  		add.w	8(a1),d1
0000B014 9268 0008                  		sub.w	8(a0),d1
0000B018 6BE2                       		bmi.s	loc_A4E2
0000B01A B242                       		cmp.w	d2,d1
0000B01C 64DE                       		bcc.s	loc_A4E2
0000B01E 72FF                       		moveq	#-1,d1
0000B020 4E75                       		rts	
0000B022                            ; End of function Obj26_SolidSides
0000B022                            
0000B022                            ; ===========================================================================
0000B022                            Ani_obj26:
0000B022                            	include "_anim\obj26.asm"
0000B022                            ; ---------------------------------------------------------------------------
0000B022                            ; Animation script - monitors
0000B022                            ; ---------------------------------------------------------------------------
0000B022 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B028 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B02E 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B034 0000                       		dc.w byte_A582-Ani_obj26
0000B036 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B03C 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B048 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B054 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B060 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B06C 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B078 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B084 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B090 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B09C 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B0A4                            		even
0000B0A4                            		even
0000B0A4                            
0000B0A4                            ; ---------------------------------------------------------------------------
0000B0A4                            ; Sprite mappings - monitors
0000B0A4                            ; ---------------------------------------------------------------------------
0000B0A4                            Map_obj26:
0000B0A4                            	include "_maps\obj26.asm"
0000B0A4                            ; ================================================================================
0000B0A4                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000B0A4                            ; ================================================================================
0000B0A4                            
0000B0A4                            DATAY1U343IF3L:
0000B0A4 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000B0A8 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000B0AC 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000B0B0 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000B0B4 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000B0B8 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000B0BC 05                         DATAY1U343IF3L_0: dc.b $5
0000B0BD E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B0C2 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B0C7 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B0CC 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B0D1 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B0D6 06                         DATAY1U343IF3L_1: dc.b $6
0000B0D7 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000B0DC E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B0E1 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B0E6 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B0EB 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B0F0 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B0F5 05                         DATAY1U343IF3L_2: dc.b $5
0000B0F6 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B0FB 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B100 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B105 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B10A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B10F 05                         DATAY1U343IF3L_3: dc.b $5
0000B110 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B115 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B11A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B11F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B124 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B129 06                         DATAY1U343IF3L_4: dc.b $6
0000B12A F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000B12F E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B134 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B139 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B13E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B143 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B148 06                         DATAY1U343IF3L_5: dc.b $6
0000B149 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000B14E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B153 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B158 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B15D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B162 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B167 06                         DATAY1U343IF3L_6: dc.b $6
0000B168 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000B16D E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B172 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B177 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B17C 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B181 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B186 06                         DATAY1U343IF3L_7: dc.b $6
0000B187 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000B18C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B191 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B196 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B19B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B1A0 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B1A5 06                         DATAY1U343IF3L_8: dc.b $6
0000B1A6 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000B1AB E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B1B0 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B1B5 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B1BA 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B1BF 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B1C4 06                         DATAY1U343IF3L_9: dc.b $6
0000B1C5 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000B1CA E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B1CF 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B1D4 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B1D9 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B1DE 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B1E3 05                         DATAY1U343IF3L_A: dc.b $5
0000B1E4 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B1E9 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B1EE E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B1F3 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B1F8 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B1FD 01                         DATAY1U343IF3L_B: dc.b $1
0000B1FE FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000B204 00                         	even
0000B204 00                         	even
0000B204                            
0000B204                            ; ===========================================================================
0000B204                            ; ---------------------------------------------------------------------------
0000B204                            ; Object 0E - Sonic on the title screen
0000B204                            ; ---------------------------------------------------------------------------
0000B204                            
0000B204                            Obj0E:					; XREF: Obj_Index
0000B204 7000                       		moveq	#0,d0
0000B206 1028 0024                  		move.b	$24(a0),d0
0000B20A 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B20E 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B212                            ; ===========================================================================
0000B212 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B214 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B216 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B218 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B21A                            ; ===========================================================================
0000B21A                            
0000B21A                            Obj0E_Main:				; XREF: Obj0E_Index
0000B21A 5428 0024                  		addq.b	#2,$24(a0)
0000B21E 317C 00F0 0008             		move.w	#$F0,8(a0)
0000B224 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B22A 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B232 317C 2300 0002             		move.w	#$2300,2(a0)
0000B238 117C 0001 0018             		move.b	#1,$18(a0)
0000B23E 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B244 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B24A 6100 0000                  		bsr.w	AnimateSprite
0000B24E                            
0000B24E                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B24E 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B252 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B254 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B258 6000 0000                  		bra.w	DisplaySprite
0000B25C                            ; ===========================================================================
0000B25C                            
0000B25C                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B25C 4E75                       		rts	
0000B25E                            ; ===========================================================================
0000B25E                            
0000B25E                            Obj0E_Move:				; XREF: Obj0E_Index
0000B25E 5168 000A                  		subq.w	#8,$A(a0)
0000B262 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B268 6600                       		bne.s	Obj0E_Display
0000B26A 5428 0024                  		addq.b	#2,$24(a0)
0000B26E                            
0000B26E                            Obj0E_Display:
0000B26E 6000 0000                  		bra.w	DisplaySprite
0000B272                            ; ===========================================================================
0000B272 4E75                       		rts	
0000B274                            ; ===========================================================================
0000B274                            
0000B274                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B274 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B27A 6100 0000                  		bsr.w	AnimateSprite
0000B27E 6000 0000                  		bra.w	DisplaySprite
0000B282                            ; ===========================================================================
0000B282 4E75                       		rts	
0000B284                            ; ===========================================================================
0000B284                            ; ---------------------------------------------------------------------------
0000B284                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B284                            ; ---------------------------------------------------------------------------
0000B284                            
0000B284                            Obj0F:					; XREF: Obj_Index
0000B284 7000                       		moveq	#0,d0
0000B286 1028 0024                  		move.b	$24(a0),d0
0000B28A 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B28E 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B292 6000 0000                  		bra.w	DisplaySprite
0000B296                            ; ===========================================================================
0000B296 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B298 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B29A 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B29C                            ; ===========================================================================
0000B29C                            
0000B29C                            Obj0F_Main:				; XREF: Obj0F_Index
0000B29C 5428 0024                  		addq.b	#2,$24(a0)
0000B2A0 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B2A6 317C 0130 000A             		move.w	#$130,$A(a0)
0000B2AC 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B2B4 317C 0200 0002             		move.w	#$200,2(a0)
0000B2BA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B2C0 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B2C2 5428 0024                  		addq.b	#2,$24(a0)
0000B2C6 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B2CC 6600                       		bne.s	locret_A6F8	; if not, branch
0000B2CE 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B2D4 317C 0170 0008             		move.w	#$170,8(a0)
0000B2DA 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B2E0                            
0000B2E0                            locret_A6F8:				; XREF: Obj0F_Index
0000B2E0 4E75                       		rts	
0000B2E2                            ; ===========================================================================
0000B2E2                            
0000B2E2                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B2E2 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B2E8 6000 0000                  		bra.w	AnimateSprite
0000B2EC                            ; ===========================================================================
0000B2EC                            Ani_obj0E:
0000B2EC                            	include "_anim\obj0E.asm"
0000B2EC                            ; ---------------------------------------------------------------------------
0000B2EC                            ; Animation script - Sonic on the title screen
0000B2EC                            ; ---------------------------------------------------------------------------
0000B2EC 0000                       		dc.w byte_A706-Ani_obj0E
0000B2EE 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B2FA                            		even
0000B2FA                            		even
0000B2FA                            
0000B2FA                            Ani_obj0F:
0000B2FA                            	include "_anim\obj0F.asm"
0000B2FA                            ; ---------------------------------------------------------------------------
0000B2FA                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B2FA                            ; ---------------------------------------------------------------------------
0000B2FA 0000                       		dc.w byte_A714-Ani_obj0F
0000B2FC 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B300                            		even
0000B300                            		even
0000B300                            
0000B300                            ; ---------------------------------------------------------------------------
0000B300                            ; Subroutine to	animate	a sprite using an animation script
0000B300                            ; ---------------------------------------------------------------------------
0000B300                            
0000B300                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B300                            
0000B300                            
0000B300                            AnimateSprite:
0000B300 7000                       		moveq	#0,d0
0000B302 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B306 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B30A 6700                       		beq.s	Anim_Run	; if not, branch
0000B30C 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B310 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B316 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B31C                            
0000B31C                            Anim_Run:
0000B31C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B320 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B322 D040                       		add.w	d0,d0
0000B324 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B328 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B32C 7200                       		moveq	#0,d1
0000B32E 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B332 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B336 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B338                            
0000B338                            Anim_Next:
0000B338 1200                       		move.b	d0,d1
0000B33A 0200 001F                  		andi.b	#$1F,d0
0000B33E 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B342 1028 0022                  		move.b	$22(a0),d0
0000B346 E719                       		rol.b	#3,d1
0000B348 B101                       		eor.b	d0,d1
0000B34A 0201 0003                  		andi.b	#3,d1
0000B34E 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B354 8328 0001                  		or.b	d1,1(a0)
0000B358 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B35C                            
0000B35C                            Anim_Wait:
0000B35C 4E75                       		rts	
0000B35E                            ; ===========================================================================
0000B35E                            
0000B35E                            Anim_End_FF:
0000B35E 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B360 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B362 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B368 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B36C 60CA                       		bra.s	Anim_Next
0000B36E                            ; ===========================================================================
0000B36E                            
0000B36E                            Anim_End_FE:
0000B36E 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B370 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B372 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B376 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B37A 9200                       		sub.b	d0,d1
0000B37C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B380 60B6                       		bra.s	Anim_Next
0000B382                            ; ===========================================================================
0000B382                            
0000B382                            Anim_End_FD:
0000B382 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B384 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B386 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B38C                            
0000B38C                            Anim_End_FC:
0000B38C 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B38E 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B390 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B394                            
0000B394                            Anim_End_FB:
0000B394 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B396 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B398 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B39E 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B3A2                            
0000B3A2                            Anim_End_FA:
0000B3A2 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B3A4 6600                       		bne.s	Anim_End	; if not, branch
0000B3A6 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B3AA                            
0000B3AA                            Anim_End:
0000B3AA 4E75                       		rts	
0000B3AC                            ; End of function AnimateSprite
0000B3AC                            
0000B3AC                            ; ===========================================================================
0000B3AC                            ; ---------------------------------------------------------------------------
0000B3AC                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B3AC                            ; ---------------------------------------------------------------------------
0000B3AC                            Map_obj0F:
0000B3AC                            	include "_maps\obj0F.asm"
0000B3AC                            ; ---------------------------------------------------------------------------
0000B3AC                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B3AC                            ; ---------------------------------------------------------------------------
0000B3AC 0000                       		dc.w byte_A7CD-Map_obj0F
0000B3AE 0000                       		dc.w byte_A7CC-Map_obj0F
0000B3B0 0000                       		dc.w byte_A7EB-Map_obj0F
0000B3B2 0000                       		dc.w byte_A882-Map_obj0F
0000B3B4 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B3B5 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B3BA 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B3BF 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B3C4 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B3C9 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B3CE 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B3D3 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B3D4 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3D9 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3DE B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3E3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3E8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3ED B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3F2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3F7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B3FC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B401 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B406 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B40B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B410 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B415 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B41A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B41F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B424 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B429 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B42E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B433 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B438 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B43D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B442 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B447 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B44C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B451 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B456 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B45B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B460 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B465 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B46A 01                         byte_A882:	dc.b 1			; "TM"
0000B46B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B470                            		even
0000B470                            		even
0000B470                            
0000B470                            ; ---------------------------------------------------------------------------
0000B470                            ; Sprite mappings - Sonic on the title screen
0000B470                            ; ---------------------------------------------------------------------------
0000B470                            Map_obj0E:
0000B470                            	include "_maps\obj0E.asm"
0000B470                            ; ================================================================================
0000B470                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B470                            ; ================================================================================
0000B470                            
0000B470                            DATAGKI0HYDQBXP:
0000B470 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B474 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B478 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B47C 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B480 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B481 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B486 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B48B 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B490 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B495 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B49A 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B49F 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B4A4 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B4A9 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B4AA 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B4AF 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B4B4 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B4B9 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B4BE 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B4C3 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B4C8 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B4CD 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B4D2 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B4D7 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B4DC 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B4E1 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B4E2 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B4E7 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B4EC F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B4F1 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B4F6 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B4FB 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B500 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B505 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B50A 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B50F 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B514 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B519 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B51A FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B51F F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B524 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B529 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B52E 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B533 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B538 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B53D 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B542 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B547 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B54C 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B54D F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B552 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B557 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B55C 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B561 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B566 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B56B 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B570 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B575 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B57A 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B57F 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B584 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B589 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B58E 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B593 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B598 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B59D 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B59E 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B5A3 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B5A8 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B5AD 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B5B2 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B5B7 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B5BC 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B5C1 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B5C6 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B5CB 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B5D0 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B5D5 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B5D6 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B5DB 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B5E0 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B5E5 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B5EA 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B5EF 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B5F4 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B5F9 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B5FE 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B603 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B608 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B60D 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B612 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B617 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B61C 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B621 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B622 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B627 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B62C 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B631 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B636 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B63B 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B640 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B645 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B64A 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B64F EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B654 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B659 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B65E EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B663 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B668 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B66E 00                         	even
0000B66E 00                         	even
0000B66E                            
0000B66E                            ; ===========================================================================
0000B66E                            ; ---------------------------------------------------------------------------
0000B66E                            ; Object 2B - Chopper enemy (GHZ)
0000B66E                            ; ---------------------------------------------------------------------------
0000B66E                            
0000B66E                            Obj2B:					; XREF: Obj_Index
0000B66E 7000                       		moveq	#0,d0
0000B670 1028 0024                  		move.b	$24(a0),d0
0000B674 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B678 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B67C 6000 0000                  		bra.w	MarkObjGone
0000B680                            ; ===========================================================================
0000B680 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B682 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B684                            ; ===========================================================================
0000B684                            
0000B684                            Obj2B_Main:				; XREF: Obj2B_Index
0000B684 5428 0024                  		addq.b	#2,$24(a0)
0000B688 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B690 317C 047B 0002             		move.w	#$47B,2(a0)
0000B696 117C 0004 0001             		move.b	#4,1(a0)
0000B69C 117C 0004 0018             		move.b	#4,$18(a0)
0000B6A2 117C 0009 0020             		move.b	#9,$20(a0)
0000B6A8 117C 0010 0019             		move.b	#$10,$19(a0)
0000B6AE 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B6B4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B6BA                            
0000B6BA                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B6BA 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B6C0 6100 FC3E                  		bsr.w	AnimateSprite
0000B6C4 7218                       		moveq	#$18,d1
0000B6C6 4EB9 0000 0000             		jsr	ObjectFallCustom
0000B6CC 3028 0030                  		move.w	$30(a0),d0
0000B6D0 B068 000C                  		cmp.w	$C(a0),d0
0000B6D4 6400                       		bcc.s	Obj2B_ChgAni
0000B6D6 3140 000C                  		move.w	d0,$C(a0)
0000B6DA 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B6E0                            
0000B6E0                            Obj2B_ChgAni:
0000B6E0 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B6E6 0440 00C0                  		subi.w	#$C0,d0
0000B6EA B068 000C                  		cmp.w	$C(a0),d0
0000B6EE 6400                       		bcc.s	locret_ABB6
0000B6F0 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B6F6 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B6FA 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B6FC 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B702                            
0000B702                            locret_ABB6:
0000B702 4E75                       		rts	
0000B704                            ; ===========================================================================
0000B704                            Ani_obj2B:
0000B704                            	include "_anim\obj2B.asm"
0000B704                            ; ---------------------------------------------------------------------------
0000B704                            ; Animation script - Chopper enemy
0000B704                            ; ---------------------------------------------------------------------------
0000B704 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B706 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B708 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B70A 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B70E 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B712 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B716 00                         		even
0000B716 00                         		even
0000B716                            
0000B716                            ; ---------------------------------------------------------------------------
0000B716                            ; Sprite mappings - Chopper enemy (GHZ)
0000B716                            ; ---------------------------------------------------------------------------
0000B716                            Map_obj2B:
0000B716                            	include "_maps\obj2B.asm"
0000B716                            Map_1ff1:
0000B716 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B718 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B71A 02                         Map_1ff1_4: 	dc.b $2
0000B71B E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B720 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B725 02                         Map_1ff1_F: 	dc.b $2
0000B726 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B72B 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B730                            	even
0000B730                            	even
0000B730                            
0000B730                            ; ===========================================================================
0000B730                            ; ---------------------------------------------------------------------------
0000B730                            ; Object 2C - Jaws enemy (LZ)
0000B730                            ; ---------------------------------------------------------------------------
0000B730                            
0000B730                            Obj2C:					; XREF: Obj_Index
0000B730 7000                       		moveq	#0,d0
0000B732 1028 0024                  		move.b	$24(a0),d0
0000B736 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B73A 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B73E                            ; ===========================================================================
0000B73E 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B740 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B742                            ; ===========================================================================
0000B742                            
0000B742                            Obj2C_Main:				; XREF: Obj2C_Index
0000B742 5428 0024                  		addq.b	#2,$24(a0)
0000B746 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B74E 317C 2486 0002             		move.w	#$2486,2(a0)
0000B754 0028 0004 0001             		ori.b	#4,1(a0)
0000B75A 117C 000A 0020             		move.b	#$A,$20(a0)
0000B760 117C 0004 0018             		move.b	#4,$18(a0)
0000B766 117C 0010 0019             		move.b	#$10,$19(a0)
0000B76C 7000                       		moveq	#0,d0
0000B76E 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B772 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B774 5340                       		subq.w	#1,d0
0000B776 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B77A 3140 0032                  		move.w	d0,$32(a0)
0000B77E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B784 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B78A 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B78C 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B790                            
0000B790                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B790 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B794 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B796 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B79C 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B7A0 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B7A6 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B7AC                            
0000B7AC                            Obj2C_Animate:
0000B7AC 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B7B2 6100 FB4C                  		bsr.w	AnimateSprite
0000B7B6 6100 0000                  		bsr.w	SpeedToPos
0000B7BA 6000 0000                  		bra.w	MarkObjGone
0000B7BE                            ; ===========================================================================
0000B7BE                            Ani_obj2C:
0000B7BE                            	include "_anim\obj2C.asm"
0000B7BE                            ; ---------------------------------------------------------------------------
0000B7BE                            ; Animation script - Jaws enemy
0000B7BE                            ; ---------------------------------------------------------------------------
0000B7BE 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B7C0 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B7C6                            		even
0000B7C6                            		even
0000B7C6                            
0000B7C6                            ; ---------------------------------------------------------------------------
0000B7C6                            ; Sprite mappings - Jaws enemy (LZ)
0000B7C6                            ; ---------------------------------------------------------------------------
0000B7C6                            Map_obj2C:
0000B7C6                            	include "_maps\obj2C.asm"
0000B7C6                            ; ---------------------------------------------------------------------------
0000B7C6                            ; Sprite mappings - Jaws enemy (LZ)
0000B7C6                            ; ---------------------------------------------------------------------------
0000B7C6 0000                       		dc.w byte_AC78-Map_obj2C
0000B7C8 0000                       		dc.w byte_AC83-Map_obj2C
0000B7CA 0000                       		dc.w byte_AC8E-Map_obj2C
0000B7CC 0000                       		dc.w byte_AC99-Map_obj2C
0000B7CE 02                         byte_AC78:	dc.b 2
0000B7CF F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B7D4 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B7D9 02                         byte_AC83:	dc.b 2
0000B7DA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B7DF F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B7E4 02                         byte_AC8E:	dc.b 2
0000B7E5 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B7EA F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B7EF 02                         byte_AC99:	dc.b 2
0000B7F0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B7F5 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B7FA                            		even
0000B7FA                            		even
0000B7FA                            
0000B7FA                            ; ===========================================================================
0000B7FA                            ; ---------------------------------------------------------------------------
0000B7FA                            ; Object 2D - Burrobot enemy (LZ)
0000B7FA                            ; ---------------------------------------------------------------------------
0000B7FA                            
0000B7FA                            Obj2D:					; XREF: Obj_Index
0000B7FA 7000                       		moveq	#0,d0
0000B7FC 1028 0024                  		move.b	$24(a0),d0
0000B800 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B804 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B808                            ; ===========================================================================
0000B808 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B80A 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B80C                            ; ===========================================================================
0000B80C                            
0000B80C                            Obj2D_Main:				; XREF: Obj2D_Index
0000B80C 5428 0024                  		addq.b	#2,$24(a0)
0000B810 117C 0013 0016             		move.b	#$13,$16(a0)
0000B816 117C 0008 0017             		move.b	#8,$17(a0)
0000B81C 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B824 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B82A 0028 0004 0001             		ori.b	#4,1(a0)
0000B830 117C 0004 0018             		move.b	#4,$18(a0)
0000B836 117C 0005 0020             		move.b	#5,$20(a0)
0000B83C 117C 000C 0019             		move.b	#$C,$19(a0)
0000B842 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B846 117C 0002 001C             		move.b	#2,$1C(a0)
0000B84C                            
0000B84C                            Obj2D_Action:				; XREF: Obj2D_Index
0000B84C 7000                       		moveq	#0,d0
0000B84E 1028 0025                  		move.b	$25(a0),d0
0000B852 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B856 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B85A 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B860 6100 FA9E                  		bsr.w	AnimateSprite
0000B864 6000 0000                  		bra.w	MarkObjGone
0000B868                            ; ===========================================================================
0000B868 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B86A 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B86C 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B86E 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B870                            ; ===========================================================================
0000B870                            
0000B870                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B870 5368 0030                  		subq.w	#1,$30(a0)
0000B874 6A00                       		bpl.s	locret_AD42
0000B876 5428 0025                  		addq.b	#2,$25(a0)
0000B87A 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B880 317C 0080 0010             		move.w	#$80,$10(a0)
0000B886 117C 0001 001C             		move.b	#1,$1C(a0)
0000B88C 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B892 6700                       		beq.s	locret_AD42
0000B894 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B898                            
0000B898                            locret_AD42:
0000B898 4E75                       		rts	
0000B89A                            ; ===========================================================================
0000B89A                            
0000B89A                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B89A 5368 0030                  		subq.w	#1,$30(a0)
0000B89E 6B00                       		bmi.s	loc_AD84
0000B8A0 6100 0000                  		bsr.w	SpeedToPos
0000B8A4 0868 0000 0032             		bchg	#0,$32(a0)
0000B8AA 6600                       		bne.s	loc_AD78
0000B8AC 3628 0008                  		move.w	8(a0),d3
0000B8B0 0643 000C                  		addi.w	#$C,d3
0000B8B4 0828 0000 0022             		btst	#0,$22(a0)
0000B8BA 6600                       		bne.s	loc_AD6A
0000B8BC 0443 0018                  		subi.w	#$18,d3
0000B8C0                            
0000B8C0                            loc_AD6A:
0000B8C0 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B8C6 0C41 000C                  		cmpi.w	#$C,d1
0000B8CA 6C00                       		bge.s	loc_AD84
0000B8CC 4E75                       		rts	
0000B8CE                            ; ===========================================================================
0000B8CE                            
0000B8CE                            loc_AD78:				; XREF: Obj2D_Move
0000B8CE 4EB9 0000 0000             		jsr	ObjHitFloor
0000B8D4 D368 000C                  		add.w	d1,$C(a0)
0000B8D8 4E75                       		rts	
0000B8DA                            ; ===========================================================================
0000B8DA                            
0000B8DA                            loc_AD84:				; XREF: Obj2D_Move
0000B8DA 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B8E0 6700                       		beq.s	loc_ADA4
0000B8E2 5528 0025                  		subq.b	#2,$25(a0)
0000B8E6 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B8EC 317C 0000 0010             		move.w	#0,$10(a0)
0000B8F2 117C 0000 001C             		move.b	#0,$1C(a0)
0000B8F8 4E75                       		rts	
0000B8FA                            ; ===========================================================================
0000B8FA                            
0000B8FA                            loc_ADA4:
0000B8FA 5428 0025                  		addq.b	#2,$25(a0)
0000B8FE 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B904 117C 0002 001C             		move.b	#2,$1C(a0)
0000B90A 4E75                       		rts	
0000B90C                            ; ===========================================================================
0000B90C                            
0000B90C                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B90C 7218                       		moveq	#$18,d1
0000B90E 4EB9 0000 0000             		jsr	ObjectFallCustom
0000B914 4A68 0012                  		tst.w	$12(a0)
0000B918 6B00                       		bmi.s	locret_ADF0
0000B91A 117C 0003 001C             		move.b	#3,$1C(a0)
0000B920 4EB9 0000 0000             		jsr	ObjHitFloor
0000B926 4A41                       		tst.w	d1
0000B928 6A00                       		bpl.s	locret_ADF0
0000B92A D368 000C                  		add.w	d1,$C(a0)
0000B92E 317C 0000 0012             		move.w	#0,$12(a0)
0000B934 117C 0001 001C             		move.b	#1,$1C(a0)
0000B93A 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B940 5528 0025                  		subq.b	#2,$25(a0)
0000B944 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B948                            
0000B948                            locret_ADF0:
0000B948 4E75                       		rts	
0000B94A                            ; ===========================================================================
0000B94A                            
0000B94A                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B94A 343C 0060                  		move.w	#$60,d2
0000B94E 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B952 6400                       		bcc.s	locret_AE20
0000B954 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B958 9068 000C                  		sub.w	$C(a0),d0
0000B95C 6400                       		bcc.s	locret_AE20
0000B95E 0C40 FF80                  		cmpi.w	#-$80,d0
0000B962 6500                       		bcs.s	locret_AE20
0000B964 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B968 6600                       		bne.s	locret_AE20
0000B96A 5528 0025                  		subq.b	#2,$25(a0)
0000B96E 3141 0010                  		move.w	d1,$10(a0)
0000B972 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B978                            
0000B978                            locret_AE20:
0000B978 4E75                       		rts	
0000B97A                            
0000B97A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B97A                            
0000B97A                            
0000B97A                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B97A 323C 0080                  		move.w	#$80,d1
0000B97E 08E8 0000 0022             		bset	#0,$22(a0)
0000B984 3038 D008                  		move.w	($FFFFD008).w,d0
0000B988 9068 0008                  		sub.w	8(a0),d0
0000B98C 6400                       		bcc.s	loc_AE40
0000B98E 4440                       		neg.w	d0
0000B990 4441                       		neg.w	d1
0000B992 08A8 0000 0022             		bclr	#0,$22(a0)
0000B998                            
0000B998                            loc_AE40:
0000B998 B042                       		cmp.w	d2,d0
0000B99A 4E75                       		rts	
0000B99C                            ; End of function Obj2D_ChkSonic2
0000B99C                            
0000B99C                            ; ===========================================================================
0000B99C                            Ani_obj2D:
0000B99C                            	include "_anim\obj2D.asm"
0000B99C                            ; ---------------------------------------------------------------------------
0000B99C                            ; Animation script - Burrobot enemy but craig
0000B99C                            ; ---------------------------------------------------------------------------
0000B99C 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B99E 0000                       		dc.w byte_AE50-Ani_obj2D
0000B9A0 0000                       		dc.w byte_AE54-Ani_obj2D
0000B9A2 0000                       		dc.w byte_AE58-Ani_obj2D
0000B9A4 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B9A7 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B9AB 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B9B9 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B9BC                            		even
0000B9BC                            		even
0000B9BC                            
0000B9BC                            ; ---------------------------------------------------------------------------
0000B9BC                            ; Sprite mappings - Burrobot enemy (LZ)
0000B9BC                            ; ---------------------------------------------------------------------------
0000B9BC                            Map_obj2D:
0000B9BC                            	include "_maps\obj2D.asm"
0000B9BC                            Map_e3a3:
0000B9BC 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B9BE 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B9C0 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B9C2 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B9C4 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B9C6 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B9C8 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B9CA 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B9CC 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B9CE 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B9D0 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B9D2 02                         Map_e3a3_16: 	dc.b $2
0000B9D3 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B9D8 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B9DD 02                         Map_e3a3_21: 	dc.b $2
0000B9DE EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B9E3 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B9E8 02                         Map_e3a3_2C: 	dc.b $2
0000B9E9 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B9EE 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B9F3 02                         Map_e3a3_37: 	dc.b $2
0000B9F4 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B9F9 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B9FE 02                         Map_e3a3_42: 	dc.b $2
0000B9FF EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000BA04 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000BA09 02                         Map_e3a3_4D: 	dc.b $2
0000BA0A EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000BA0F FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000BA14 02                         Map_e3a3_58: 	dc.b $2
0000BA15 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000BA1A FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000BA1F 02                         Map_e3a3_63: 	dc.b $2
0000BA20 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000BA25 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000BA2A 02                         Map_e3a3_6E: 	dc.b $2
0000BA2B EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000BA30 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000BA35 02                         Map_e3a3_79: 	dc.b $2
0000BA36 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000BA3B 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000BA40 02                         Map_e3a3_84: 	dc.b $2
0000BA41 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000BA46 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000BA4C 00                         	even
0000BA4C 00                         	even
0000BA4C                            
0000BA4C                            ; ===========================================================================
0000BA4C                            ; ---------------------------------------------------------------------------
0000BA4C                            ; Object 2F - large moving platforms (MZ)
0000BA4C                            ; ---------------------------------------------------------------------------
0000BA4C                            
0000BA4C                            Obj2F:					; XREF: Obj_Index
0000BA4C 7000                       		moveq	#0,d0
0000BA4E 1028 0024                  		move.b	$24(a0),d0
0000BA52 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000BA56 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000BA5A                            ; ===========================================================================
0000BA5A 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000BA5C 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000BA5E                            
0000BA5E 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000BA60 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000BA62 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000BA64 0140                       		dc.b 1,	$40
0000BA66 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000BA68 0220                       		dc.b 2,	$20
0000BA6A                            ; ===========================================================================
0000BA6A                            
0000BA6A                            Obj2F_Main:				; XREF: Obj2F_Index
0000BA6A 5428 0024                  		addq.b	#2,$24(a0)
0000BA6E 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000BA76 317C C000 0002             		move.w	#$C000,2(a0)
0000BA7C 117C 0004 0001             		move.b	#4,1(a0)
0000BA82 117C 0005 0018             		move.b	#5,$18(a0)
0000BA88 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000BA8E 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BA94 7000                       		moveq	#0,d0
0000BA96 1028 0028                  		move.b	$28(a0),d0
0000BA9A E448                       		lsr.w	#2,d0
0000BA9C 0240 001C                  		andi.w	#$1C,d0
0000BAA0 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000BAA4 3019                       		move.w	(a1)+,d0
0000BAA6 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000BAAA 214A 0030                  		move.l	a2,$30(a0)
0000BAAE 1159 001A                  		move.b	(a1)+,$1A(a0)
0000BAB2 1151 0019                  		move.b	(a1),$19(a0)
0000BAB6 0228 000F 0028             		andi.b	#$F,$28(a0)
0000BABC 117C 0040 0016             		move.b	#$40,$16(a0)
0000BAC2 08E8 0004 0001             		bset	#4,1(a0)
0000BAC8                            
0000BAC8                            Obj2F_Action:				; XREF: Obj2F_Index
0000BAC8 6100 0000                  		bsr.w	Obj2F_Types
0000BACC 4A28 0025                  		tst.b	$25(a0)
0000BAD0 6700                       		beq.s	Obj2F_Solid
0000BAD2 7200                       		moveq	#0,d1
0000BAD4 1228 0019                  		move.b	$19(a0),d1
0000BAD8 0641 000B                  		addi.w	#$B,d1
0000BADC 6100 C564                  		bsr.w	ExitPlatform
0000BAE0 0829 0003 0022             		btst	#3,$22(a1)
0000BAE6 6600 0000                  		bne.w	Obj2F_Slope
0000BAEA 4228 0025                  		clr.b	$25(a0)
0000BAEE 6000                       		bra.s	Obj2F_Display
0000BAF0                            ; ===========================================================================
0000BAF0                            
0000BAF0                            Obj2F_Slope:				; XREF: Obj2F_Action
0000BAF0 7200                       		moveq	#0,d1
0000BAF2 1228 0019                  		move.b	$19(a0),d1
0000BAF6 0641 000B                  		addi.w	#$B,d1
0000BAFA 2468 0030                  		movea.l	$30(a0),a2
0000BAFE 3428 0008                  		move.w	8(a0),d2
0000BB02 6100 D52E                  		bsr.w	SlopeObject2
0000BB06 6000                       		bra.s	Obj2F_Display
0000BB08                            ; ===========================================================================
0000BB08                            
0000BB08                            Obj2F_Solid:				; XREF: Obj2F_Action
0000BB08 7200                       		moveq	#0,d1
0000BB0A 1228 0019                  		move.b	$19(a0),d1
0000BB0E 0641 000B                  		addi.w	#$B,d1
0000BB12 343C 0020                  		move.w	#$20,d2
0000BB16 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000BB1C 6600                       		bne.s	loc_AF8E
0000BB1E 343C 0030                  		move.w	#$30,d2
0000BB22                            
0000BB22                            loc_AF8E:
0000BB22 2468 0030                  		movea.l	$30(a0),a2
0000BB26 6100 0000                  		bsr.w	SolidObject2F
0000BB2A                            
0000BB2A                            Obj2F_Display:				; XREF: Obj2F_Action
0000BB2A 6100 0000                  		bsr.w	DisplaySprite
0000BB2E 6000 0000                  		bra.w	Obj2F_ChkDel
0000BB32                            
0000BB32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB32                            
0000BB32                            
0000BB32                            Obj2F_Types:				; XREF: Obj2F_Action
0000BB32 7000                       		moveq	#0,d0
0000BB34 1028 0028                  		move.b	$28(a0),d0
0000BB38 0240 0007                  		andi.w	#7,d0
0000BB3C D040                       		add.w	d0,d0
0000BB3E 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000BB42 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000BB46                            ; End of function Obj2F_Types
0000BB46                            
0000BB46                            ; ===========================================================================
0000BB46 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000BB48 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000BB4A 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000BB4C 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000BB4E 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000BB50 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000BB52                            ; ===========================================================================
0000BB52                            
0000BB52                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000BB52 4E75                       		rts			; type 00 platform doesn't move
0000BB54                            ; ===========================================================================
0000BB54                            
0000BB54                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000BB54 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000BB58 323C 0020                  		move.w	#$20,d1
0000BB5C 6000                       		bra.s	Obj2F_Move
0000BB5E                            ; ===========================================================================
0000BB5E                            
0000BB5E                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000BB5E 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000BB62 323C 0030                  		move.w	#$30,d1
0000BB66 6000                       		bra.s	Obj2F_Move
0000BB68                            ; ===========================================================================
0000BB68                            
0000BB68                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000BB68 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000BB6C 323C 0040                  		move.w	#$40,d1
0000BB70 6000                       		bra.s	Obj2F_Move
0000BB72                            ; ===========================================================================
0000BB72                            
0000BB72                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000BB72 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000BB76 323C 0060                  		move.w	#$60,d1
0000BB7A                            
0000BB7A                            Obj2F_Move:
0000BB7A 0828 0003 0028             		btst	#3,$28(a0)
0000BB80 6700                       		beq.s	loc_AFF2
0000BB82 4440                       		neg.w	d0
0000BB84 D041                       		add.w	d1,d0
0000BB86                            
0000BB86                            loc_AFF2:
0000BB86 3228 002C                  		move.w	$2C(a0),d1
0000BB8A 9240                       		sub.w	d0,d1
0000BB8C 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000BB90 4E75                       		rts	
0000BB92                            ; ===========================================================================
0000BB92                            
0000BB92                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000BB92 1028 0034                  		move.b	$34(a0),d0
0000BB96 4A28 0025                  		tst.b	$25(a0)
0000BB9A 6600                       		bne.s	loc_B010
0000BB9C 5500                       		subq.b	#2,d0
0000BB9E 6400                       		bcc.s	loc_B01C
0000BBA0 7000                       		moveq	#0,d0
0000BBA2 6000                       		bra.s	loc_B01C
0000BBA4                            ; ===========================================================================
0000BBA4                            
0000BBA4                            loc_B010:
0000BBA4 5800                       		addq.b	#4,d0
0000BBA6 0C00 0040                  		cmpi.b	#$40,d0
0000BBAA 6500                       		bcs.s	loc_B01C
0000BBAC 103C 0040                  		move.b	#$40,d0
0000BBB0                            
0000BBB0                            loc_B01C:
0000BBB0 1140 0034                  		move.b	d0,$34(a0)
0000BBB4 4EB9 0000 2D86             		jsr	(CalcSine).l
0000BBBA E848                       		lsr.w	#4,d0
0000BBBC 3200                       		move.w	d0,d1
0000BBBE D068 002C                  		add.w	$2C(a0),d0
0000BBC2 3140 000C                  		move.w	d0,$C(a0)
0000BBC6 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000BBCC 6600                       		bne.s	loc_B07A
0000BBCE 4A28 0035                  		tst.b	$35(a0)
0000BBD2 6600                       		bne.s	loc_B07A
0000BBD4 117C 0001 0035             		move.b	#1,$35(a0)
0000BBDA 6100 0000                  		bsr.w	SingleObjLoad2
0000BBDE 6600                       		bne.s	loc_B07A
0000BBE0 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000BBE4 3368 0008 0008             		move.w	8(a0),8(a1)
0000BBEA 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000BBF0 5069 002C                  		addq.w	#8,$2C(a1)
0000BBF4 5769 002C                  		subq.w	#3,$2C(a1)
0000BBF8 0469 0040 0008             		subi.w	#$40,8(a1)
0000BBFE 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000BC04 2348 0038                  		move.l	a0,$38(a1)
0000BC08 2448                       		movea.l	a0,a2
0000BC0A 6100                       		bsr.s	sub_B09C
0000BC0C                            
0000BC0C                            loc_B07A:
0000BC0C 7400                       		moveq	#0,d2
0000BC0E 45E8 0036                  		lea	$36(a0),a2
0000BC12 141A                       		move.b	(a2)+,d2
0000BC14 5302                       		subq.b	#1,d2
0000BC16 6500                       		bcs.s	locret_B09A
0000BC18                            
0000BC18                            loc_B086:
0000BC18 7000                       		moveq	#0,d0
0000BC1A 101A                       		move.b	(a2)+,d0
0000BC1C ED48                       		lsl.w	#6,d0
0000BC1E 0640 D000                  		addi.w	#-$3000,d0
0000BC22 3240                       		movea.w	d0,a1
0000BC24 3341 003C                  		move.w	d1,$3C(a1)
0000BC28 51CA FFEE                  		dbf	d2,loc_B086
0000BC2C                            
0000BC2C                            locret_B09A:
0000BC2C 4E75                       		rts	
0000BC2E                            
0000BC2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BC2E                            
0000BC2E                            
0000BC2E                            sub_B09C:
0000BC2E 45EA 0036                  		lea	$36(a2),a2
0000BC32 7000                       		moveq	#0,d0
0000BC34 1012                       		move.b	(a2),d0
0000BC36 5212                       		addq.b	#1,(a2)
0000BC38 45F2 0001                  		lea	1(a2,d0.w),a2
0000BC3C 3009                       		move.w	a1,d0
0000BC3E 0440 D000                  		subi.w	#-$3000,d0
0000BC42 EC48                       		lsr.w	#6,d0
0000BC44 0240 007F                  		andi.w	#$7F,d0
0000BC48 1480                       		move.b	d0,(a2)
0000BC4A 4E75                       		rts	
0000BC4C                            ; End of function sub_B09C
0000BC4C                            
0000BC4C                            ; ===========================================================================
0000BC4C                            
0000BC4C                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000BC4C 4A28 0035                  		tst.b	$35(a0)
0000BC50 6700                       		beq.s	loc_B0C6
0000BC52 4A28 0001                  		tst.b	1(a0)
0000BC56 6A00                       		bpl.s	Obj2F_DelFlames
0000BC58                            
0000BC58                            loc_B0C6:
0000BC58 3028 002A                  		move.w	$2A(a0),d0
0000BC5C 0240 FF80                  		andi.w	#$FF80,d0
0000BC60 3238 F700                  		move.w	($FFFFF700).w,d1
0000BC64 0441 0080                  		subi.w	#$80,d1
0000BC68 0241 FF80                  		andi.w	#$FF80,d1
0000BC6C 9041                       		sub.w	d1,d0
0000BC6E 0C40 0280                  		cmpi.w	#$280,d0
0000BC72 6200 0000                  		bhi.w	DeleteObject
0000BC76 4E75                       		rts	
0000BC78                            ; ===========================================================================
0000BC78                            
0000BC78                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000BC78 7400                       		moveq	#0,d2
0000BC7A                            
0000BC7A                            loc_B0E8:
0000BC7A 45E8 0036                  		lea	$36(a0),a2
0000BC7E 1412                       		move.b	(a2),d2
0000BC80 421A                       		clr.b	(a2)+
0000BC82 5302                       		subq.b	#1,d2
0000BC84 6500                       		bcs.s	locret_B116
0000BC86                            
0000BC86                            loc_B0F4:
0000BC86 7000                       		moveq	#0,d0
0000BC88 1012                       		move.b	(a2),d0
0000BC8A 421A                       		clr.b	(a2)+
0000BC8C ED48                       		lsl.w	#6,d0
0000BC8E 0640 D000                  		addi.w	#-$3000,d0
0000BC92 3240                       		movea.w	d0,a1
0000BC94 6100 0000                  		bsr.w	DeleteObject2
0000BC98 51CA FFEC                  		dbf	d2,loc_B0F4
0000BC9C 117C 0000 0035             		move.b	#0,$35(a0)
0000BCA2 117C 0000 0034             		move.b	#0,$34(a0)
0000BCA8                            
0000BCA8                            locret_B116:
0000BCA8 4E75                       		rts	
0000BCAA                            ; ===========================================================================
0000BCAA                            ; ---------------------------------------------------------------------------
0000BCAA                            ; Collision data for large moving platforms (MZ)
0000BCAA                            ; ---------------------------------------------------------------------------
0000BCAA                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BCF6                            		even
0000BCF6                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BD22                            		even
0000BD22                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BD6E                            		even
0000BD6E                            ; ===========================================================================
0000BD6E                            ; ---------------------------------------------------------------------------
0000BD6E                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BD6E                            ; (appears when	you walk on sinking platforms)
0000BD6E                            ; ---------------------------------------------------------------------------
0000BD6E                            
0000BD6E                            Obj35:					; XREF: Obj_Index
0000BD6E 7000                       		moveq	#0,d0
0000BD70 1028 0024                  		move.b	$24(a0),d0
0000BD74 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BD78 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BD7C                            ; ===========================================================================
0000BD7C 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BD7E 0000                       		dc.w loc_B238-Obj35_Index
0000BD80 0000                       		dc.w Obj35_Move-Obj35_Index
0000BD82                            ; ===========================================================================
0000BD82                            
0000BD82                            Obj35_Main:				; XREF: Obj35_Index
0000BD82 5428 0024                  		addq.b	#2,$24(a0)
0000BD86 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BD8E 317C 0345 0002             		move.w	#$345,2(a0)
0000BD94 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BD9A 117C 0004 0001             		move.b	#4,1(a0)
0000BDA0 117C 0001 0018             		move.b	#1,$18(a0)
0000BDA6 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BDAC 117C 0008 0019             		move.b	#8,$19(a0)
0000BDB2 303C 00C8                  		move.w	#$C8,d0
0000BDB6 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play flame sound
0000BDBC 4A28 0028                  		tst.b	$28(a0)
0000BDC0 6700                       		beq.s	loc_B238
0000BDC2 5428 0024                  		addq.b	#2,$24(a0)
0000BDC6 6000 0000                  		bra.w	Obj35_Move
0000BDCA                            ; ===========================================================================
0000BDCA                            
0000BDCA                            loc_B238:				; XREF: Obj35_Index
0000BDCA 2268 0030                  		movea.l	$30(a0),a1
0000BDCE 3228 0008                  		move.w	8(a0),d1
0000BDD2 9268 002A                  		sub.w	$2A(a0),d1
0000BDD6 0641 000C                  		addi.w	#$C,d1
0000BDDA 3001                       		move.w	d1,d0
0000BDDC E248                       		lsr.w	#1,d0
0000BDDE 1031 0000                  		move.b	(a1,d0.w),d0
0000BDE2 4440                       		neg.w	d0
0000BDE4 D068 002C                  		add.w	$2C(a0),d0
0000BDE8 3400                       		move.w	d0,d2
0000BDEA D068 003C                  		add.w	$3C(a0),d0
0000BDEE 3140 000C                  		move.w	d0,$C(a0)
0000BDF2 0C41 0084                  		cmpi.w	#$84,d1
0000BDF6 6400                       		bcc.s	loc_B2B0
0000BDF8 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BE00 0C41 0080                  		cmpi.w	#$80,d1
0000BE04 6400                       		bcc.s	loc_B2B0
0000BE06 2028 0008                  		move.l	8(a0),d0
0000BE0A 0680 0008 0000             		addi.l	#$80000,d0
0000BE10 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BE16 6600                       		bne.s	loc_B2B0
0000BE18 6100 0000                  		bsr.w	SingleObjLoad2
0000BE1C 6600                       		bne.s	loc_B2B0
0000BE1E 12BC 0035                  		move.b	#$35,0(a1)
0000BE22 3368 0008 0008             		move.w	8(a0),8(a1)
0000BE28 3342 002C                  		move.w	d2,$2C(a1)
0000BE2C 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BE32 137C 0001 0028             		move.b	#1,$28(a1)
0000BE38 2468 0038                  		movea.l	$38(a0),a2
0000BE3C 6100 FDF0                  		bsr.w	sub_B09C
0000BE40                            
0000BE40                            loc_B2B0:
0000BE40 6000                       		bra.s	Obj35_Animate
0000BE42                            ; ===========================================================================
0000BE42                            
0000BE42                            Obj35_Move:				; XREF: Obj35_Index
0000BE42 3028 002C                  		move.w	$2C(a0),d0
0000BE46 D068 003C                  		add.w	$3C(a0),d0
0000BE4A 3140 000C                  		move.w	d0,$C(a0)
0000BE4E                            
0000BE4E                            Obj35_Animate:				; XREF: loc_B238
0000BE4E 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BE54 6100 F4AA                  		bsr.w	AnimateSprite
0000BE58 6000 0000                  		bra.w	DisplaySprite
0000BE5C                            ; ===========================================================================
0000BE5C                            Ani_obj35:
0000BE5C                            	include "_anim\obj35.asm"
0000BE5C                            ; ---------------------------------------------------------------------------
0000BE5C                            ; Animation script - fireball that sits on the	floor (MZ)
0000BE5C                            ; ---------------------------------------------------------------------------
0000BE5C 0000                       		dc.w byte_B2CE-Ani_obj35
0000BE5E 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BE64                            		even
0000BE64                            		even
0000BE64                            
0000BE64                            ; ---------------------------------------------------------------------------
0000BE64                            ; Sprite mappings - large moving platforms (MZ)
0000BE64                            ; ---------------------------------------------------------------------------
0000BE64                            Map_obj2F:
0000BE64                            	include "_maps\obj2F.asm"
0000BE64                            ; ---------------------------------------------------------------------------
0000BE64                            ; Sprite mappings - large moving platforms (MZ)
0000BE64                            ; ---------------------------------------------------------------------------
0000BE64 0000                       		dc.w byte_B2DA-Map_obj2F
0000BE66 0000                       		dc.w byte_B31C-Map_obj2F
0000BE68 0000                       		dc.w byte_B34F-Map_obj2F
0000BE6A 0D                         byte_B2DA:	dc.b $D
0000BE6B D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BE70 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BE75 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BE7A D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BE7F F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BE84 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BE89 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BE8E D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BE93 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BE98 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BE9D 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BEA2 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BEA7 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BEAC 0A                         byte_B31C:	dc.b $A
0000BEAD D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BEB2 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BEB7 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BEBC C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BEC1 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BEC6 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BECB C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BED0 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BED5 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BEDA E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BEDF 06                         byte_B34F:	dc.b 6
0000BEE0 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BEE5 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BEEA 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BEEF D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BEF4 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BEF9 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BEFE                            		even
0000BEFE                            		even
0000BEFE                            
0000BEFE                            ; ---------------------------------------------------------------------------
0000BEFE                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BEFE                            ; ---------------------------------------------------------------------------
0000BEFE                            Map_obj14:
0000BEFE                            	include "_maps\obj14.asm"
0000BEFE                            ; --------------------------------------------------------------------------------
0000BEFE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BEFE                            ; --------------------------------------------------------------------------------
0000BEFE                            
0000BEFE                            SME_C6wT7:	
0000BEFE 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BF02 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BF06 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BF0A 01                         SME_C6wT7_C:	dc.b 1	
0000BF0B E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BF10 01                         SME_C6wT7_12:	dc.b 1	
0000BF11 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BF16 02                         SME_C6wT7_18:	dc.b 2	
0000BF17 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BF1C E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BF21 01                         SME_C6wT7_23:	dc.b 1	
0000BF22 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BF27 01                         SME_C6wT7_29:	dc.b 1	
0000BF28 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BF2D 01                         SME_C6wT7_2F:	dc.b 1	
0000BF2E F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BF34 00                         		even
0000BF34 00                         		even
0000BF34                            
0000BF34                            ; ===========================================================================
0000BF34                            ; ---------------------------------------------------------------------------
0000BF34                            ; Object 30 - large green glassy blocks	(MZ)
0000BF34                            ; ---------------------------------------------------------------------------
0000BF34                            
0000BF34                            Obj30:					; XREF: Obj_Index
0000BF34 7000                       		moveq	#0,d0
0000BF36 1028 0024                  		move.b	$24(a0),d0
0000BF3A 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BF3E 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BF42 3028 0008                  		move.w	8(a0),d0
0000BF46 0240 FF80                  		andi.w	#$FF80,d0
0000BF4A 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF4E 0441 0080                  		subi.w	#$80,d1
0000BF52 0241 FF80                  		andi.w	#$FF80,d1
0000BF56 9041                       		sub.w	d1,d0
0000BF58 0C40 0280                  		cmpi.w	#$280,d0
0000BF5C 6200 0000                  		bhi.w	Obj30_Delete
0000BF60 6000 0000                  		bra.w	DisplaySprite
0000BF64                            ; ===========================================================================
0000BF64                            
0000BF64                            Obj30_Delete:
0000BF64 6000 0000                  		bra.w	DeleteObject
0000BF68                            ; ===========================================================================
0000BF68 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BF6A 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BF6C 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BF6E 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BF70 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BF72                            
0000BF72 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BF75 0400 01                    		dc.b 4,	0, 1
0000BF78 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BF7B 0800 01                    		dc.b 8,	0, 1
0000BF7E                            ; ===========================================================================
0000BF7E                            
0000BF7E                            Obj30_Main:				; XREF: Obj30_Index
0000BF7E 45F9 0000 BF72             		lea	(Obj30_Vars1).l,a2
0000BF84 7201                       		moveq	#1,d1
0000BF86 117C 0048 0016             		move.b	#$48,$16(a0)
0000BF8C 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BF92 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BF94 45F9 0000 BF78             		lea	(Obj30_Vars2).l,a2
0000BF9A 7201                       		moveq	#1,d1
0000BF9C 117C 0038 0016             		move.b	#$38,$16(a0)
0000BFA2                            
0000BFA2                            loc_B40C:
0000BFA2 2248                       		movea.l	a0,a1
0000BFA4 6000                       		bra.s	Obj30_Load	; load main object
0000BFA6                            ; ===========================================================================
0000BFA6                            
0000BFA6                            Obj30_Loop:
0000BFA6 6100 0000                  		bsr.w	SingleObjLoad2
0000BFAA 6600                       		bne.s	loc_B480
0000BFAC                            
0000BFAC                            Obj30_Load:				; XREF: Obj30_Main
0000BFAC 135A 0024                  		move.b	(a2)+,$24(a1)
0000BFB0 12BC 0030                  		move.b	#$30,0(a1)
0000BFB4 3368 0008 0008             		move.w	8(a0),8(a1)
0000BFBA 101A                       		move.b	(a2)+,d0
0000BFBC 4880                       		ext.w	d0
0000BFBE D068 000C                  		add.w	$C(a0),d0
0000BFC2 3340 000C                  		move.w	d0,$C(a1)
0000BFC6 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BFCE 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BFD4 137C 0004 0001             		move.b	#4,1(a1)
0000BFDA 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BFE0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BFE6 137C 0020 0019             		move.b	#$20,$19(a1)
0000BFEC 137C 0004 0018             		move.b	#4,$18(a1)
0000BFF2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BFF6 2348 003C                  		move.l	a0,$3C(a1)
0000BFFA 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BFFE                            
0000BFFE 137C 0010 0019             		move.b	#$10,$19(a1)
0000C004 137C 0003 0018             		move.b	#3,$18(a1)
0000C00A 5029 0028                  		addq.b	#8,$28(a1)
0000C00E 0229 000F 0028             		andi.b	#$F,$28(a1)
0000C014                            
0000C014                            loc_B480:
0000C014 317C 0090 0032             		move.w	#$90,$32(a0)
0000C01A 08E8 0004 0001             		bset	#4,1(a0)
0000C020                            
0000C020                            Obj30_Block012:				; XREF: Obj30_Index
0000C020 6100 0000                  		bsr.w	Obj30_Types
0000C024 323C 002B                  		move.w	#$2B,d1
0000C028 343C 0048                  		move.w	#$48,d2
0000C02C 363C 0049                  		move.w	#$49,d3
0000C030 3828 0008                  		move.w	8(a0),d4
0000C034 6000 0000                  		bra.w	SolidObject
0000C038                            ; ===========================================================================
0000C038                            
0000C038                            Obj30_Reflect012:			; XREF: Obj30_Index
0000C038 2268 003C                  		movea.l	$3C(a0),a1
0000C03C 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C042 6000 0000                  		bra.w	Obj30_Types
0000C046                            ; ===========================================================================
0000C046                            
0000C046                            Obj30_Block34:				; XREF: Obj30_Index
0000C046 6100 0000                  		bsr.w	Obj30_Types
0000C04A 323C 002B                  		move.w	#$2B,d1
0000C04E 343C 0038                  		move.w	#$38,d2
0000C052 363C 0039                  		move.w	#$39,d3
0000C056 3828 0008                  		move.w	8(a0),d4
0000C05A 6000 0000                  		bra.w	SolidObject
0000C05E                            ; ===========================================================================
0000C05E                            
0000C05E                            Obj30_Reflect34:			; XREF: Obj30_Index
0000C05E 2268 003C                  		movea.l	$3C(a0),a1
0000C062 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C068 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000C06E 6000 0002                  		bra.w	*+4
0000C072                            
0000C072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C072                            
0000C072                            
0000C072                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000C072 7000                       		moveq	#0,d0
0000C074 1028 0028                  		move.b	$28(a0),d0
0000C078 0240 0007                  		andi.w	#7,d0
0000C07C D040                       		add.w	d0,d0
0000C07E 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000C082 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000C086                            ; End of function Obj30_Types
0000C086                            
0000C086                            ; ===========================================================================
0000C086 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000C088 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000C08A 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000C08C 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000C08E 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000C090                            ; ===========================================================================
0000C090                            
0000C090                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000C090 4E75                       		rts	
0000C092                            ; ===========================================================================
0000C092                            
0000C092                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000C092 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C096 323C 0040                  		move.w	#$40,d1
0000C09A 6000                       		bra.s	loc_B514
0000C09C                            ; ===========================================================================
0000C09C                            
0000C09C                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C09C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C0A0 323C 0040                  		move.w	#$40,d1
0000C0A4 4440                       		neg.w	d0
0000C0A6 D041                       		add.w	d1,d0
0000C0A8                            
0000C0A8                            loc_B514:				; XREF: Obj30_Type01
0000C0A8 0828 0003 0028             		btst	#3,$28(a0)
0000C0AE 6700                       		beq.s	loc_B526
0000C0B0 4440                       		neg.w	d0
0000C0B2 D041                       		add.w	d1,d0
0000C0B4 E208                       		lsr.b	#1,d0
0000C0B6 0640 0020                  		addi.w	#$20,d0
0000C0BA                            
0000C0BA                            loc_B526:
0000C0BA 6000 0000                  		bra.w	loc_B5EE
0000C0BE                            ; ===========================================================================
0000C0BE                            
0000C0BE                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C0BE 0828 0003 0028             		btst	#3,$28(a0)
0000C0C4 6700                       		beq.s	loc_B53E
0000C0C6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C0CA 0440 0010                  		subi.w	#$10,d0
0000C0CE 6000 0000                  		bra.w	loc_B5EE
0000C0D2                            ; ===========================================================================
0000C0D2                            
0000C0D2                            loc_B53E:
0000C0D2 0828 0003 0022             		btst	#3,$22(a0)
0000C0D8 6600                       		bne.s	loc_B54E
0000C0DA 08A8 0000 0034             		bclr	#0,$34(a0)
0000C0E0 6000                       		bra.s	loc_B582
0000C0E2                            ; ===========================================================================
0000C0E2                            
0000C0E2                            loc_B54E:
0000C0E2 4A28 0034                  		tst.b	$34(a0)
0000C0E6 6600                       		bne.s	loc_B582
0000C0E8 117C 0001 0034             		move.b	#1,$34(a0)
0000C0EE 08E8 0000 0035             		bset	#0,$35(a0)
0000C0F4 6700                       		beq.s	loc_B582
0000C0F6 08E8 0007 0034             		bset	#7,$34(a0)
0000C0FC 317C 0010 0036             		move.w	#$10,$36(a0)
0000C102 117C 000A 0038             		move.b	#$A,$38(a0)
0000C108 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C10E 6600                       		bne.s	loc_B582
0000C110 317C 0040 0036             		move.w	#$40,$36(a0)
0000C116                            
0000C116                            loc_B582:
0000C116 4A28 0034                  		tst.b	$34(a0)
0000C11A 6A00                       		bpl.s	loc_B5AA
0000C11C 4A28 0038                  		tst.b	$38(a0)
0000C120 6700                       		beq.s	loc_B594
0000C122 5328 0038                  		subq.b	#1,$38(a0)
0000C126 6600                       		bne.s	loc_B5AA
0000C128                            
0000C128                            loc_B594:
0000C128 4A68 0032                  		tst.w	$32(a0)
0000C12C 6700                       		beq.s	loc_B5A4
0000C12E 5368 0032                  		subq.w	#1,$32(a0)
0000C132 5368 0036                  		subq.w	#1,$36(a0)
0000C136 6600                       		bne.s	loc_B5AA
0000C138                            
0000C138                            loc_B5A4:
0000C138 08A8 0007 0034             		bclr	#7,$34(a0)
0000C13E                            
0000C13E                            loc_B5AA:
0000C13E 3028 0032                  		move.w	$32(a0),d0
0000C142 6000                       		bra.s	loc_B5EE
0000C144                            ; ===========================================================================
0000C144                            
0000C144                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C144 0828 0003 0028             		btst	#3,$28(a0)
0000C14A 6700                       		beq.s	Obj30_ChkSwitch
0000C14C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C150 0440 0010                  		subi.w	#$10,d0
0000C154 6000                       		bra.s	loc_B5EE
0000C156                            ; ===========================================================================
0000C156                            
0000C156                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C156 4A28 0034                  		tst.b	$34(a0)
0000C15A 6600                       		bne.s	loc_B5E0
0000C15C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C160 7000                       		moveq	#0,d0
0000C162 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C166 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C168 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C16C 6700                       		beq.s	loc_B5EA	; if not, branch
0000C16E 117C 0001 0034             		move.b	#1,$34(a0)
0000C174                            
0000C174                            loc_B5E0:
0000C174 4A68 0032                  		tst.w	$32(a0)
0000C178 6700                       		beq.s	loc_B5EA
0000C17A 5568 0032                  		subq.w	#2,$32(a0)
0000C17E                            
0000C17E                            loc_B5EA:
0000C17E 3028 0032                  		move.w	$32(a0),d0
0000C182                            
0000C182                            loc_B5EE:
0000C182 3228 0030                  		move.w	$30(a0),d1
0000C186 9240                       		sub.w	d0,d1
0000C188 3141 000C                  		move.w	d1,$C(a0)
0000C18C 4E75                       		rts	
0000C18E                            ; ===========================================================================
0000C18E                            ; ---------------------------------------------------------------------------
0000C18E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C18E                            ; ---------------------------------------------------------------------------
0000C18E                            Map_obj30:
0000C18E                            	include "_maps\obj30.asm"
0000C18E                            ; ---------------------------------------------------------------------------
0000C18E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C18E                            ; ---------------------------------------------------------------------------
0000C18E 0000                       		dc.w byte_B600-Map_obj30
0000C190 0000                       		dc.w byte_B63D-Map_obj30
0000C192 0000                       		dc.w byte_B648-Map_obj30
0000C194 0C                         byte_B600:	dc.b $C
0000C195 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C19A B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C19F C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C1A4 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C1A9 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C1AE E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C1B3 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C1B8 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C1BD 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C1C2 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C1C7 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C1CC 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C1D1 02                         byte_B63D:	dc.b 2
0000C1D2 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C1D7 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C1DC 0A                         byte_B648:	dc.b $A
0000C1DD C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C1E2 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C1E7 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C1EC D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C1F1 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C1F6 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C1FB 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C200 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C205 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C20A 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C210 00                         		even
0000C210 00                         		even
0000C210                            
0000C210                            ; ===========================================================================
0000C210                            ; ---------------------------------------------------------------------------
0000C210                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C210                            ; ---------------------------------------------------------------------------
0000C210                            
0000C210                            Obj31:					; XREF: Obj_Index
0000C210 7000                       		moveq	#0,d0
0000C212 1028 0024                  		move.b	$24(a0),d0
0000C216 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C21A 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C21E                            ; ===========================================================================
0000C21E 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C220 0000                       		dc.w loc_B798-Obj31_Index
0000C222 0000                       		dc.w loc_B7FE-Obj31_Index
0000C224 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C226 0000                       		dc.w loc_B7E2-Obj31_Index
0000C228                            
0000C228 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C22A 0100                       		dc.b 1,	0
0000C22C                            
0000C22C 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C22F 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C232 08CC 03                    		dc.b 8,	$CC, 3
0000C235 06F0 02                    		dc.b 6,	$F0, 2
0000C238                            
0000C238 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C23C 5000 7800                  		dc.w $5000, $7800
0000C240 3800 5800                  		dc.w $3800, $5800
0000C244 B800                       		dc.w $B800
0000C246                            ; ===========================================================================
0000C246                            
0000C246                            Obj31_Main:				; XREF: Obj31_Index
0000C246 7000                       		moveq	#0,d0
0000C248 1028 0028                  		move.b	$28(a0),d0
0000C24C 6A00                       		bpl.s	loc_B6CE
0000C24E 0240 007F                  		andi.w	#$7F,d0
0000C252 D040                       		add.w	d0,d0
0000C254 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C258 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C25C 101A                       		move.b	(a2)+,d0
0000C25E 1140 0028                  		move.b	d0,$28(a0)
0000C262                            
0000C262                            loc_B6CE:
0000C262 0200 000F                  		andi.b	#$F,d0
0000C266 D040                       		add.w	d0,d0
0000C268 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C26C 4A40                       		tst.w	d0
0000C26E 6600                       		bne.s	loc_B6E0
0000C270 3142 0032                  		move.w	d2,$32(a0)
0000C274                            
0000C274                            loc_B6E0:
0000C274 45F9 0000 C22C             		lea	(Obj31_Var).l,a2
0000C27A 2248                       		movea.l	a0,a1
0000C27C 7203                       		moveq	#3,d1
0000C27E 6000                       		bra.s	Obj31_MakeStomper
0000C280                            ; ===========================================================================
0000C280                            
0000C280                            Obj31_Loop:
0000C280 6100 0000                  		bsr.w	SingleObjLoad2
0000C284 6600 0000                  		bne.w	Obj31_SetSize
0000C288                            
0000C288                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C288 135A 0024                  		move.b	(a2)+,$24(a1)
0000C28C 12BC 0031                  		move.b	#$31,0(a1)
0000C290 3368 0008 0008             		move.w	8(a0),8(a1)
0000C296 101A                       		move.b	(a2)+,d0
0000C298 4880                       		ext.w	d0
0000C29A D068 000C                  		add.w	$C(a0),d0
0000C29E 3340 000C                  		move.w	d0,$C(a1)
0000C2A2 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C2AA 337C 0300 0002             		move.w	#$300,2(a1)
0000C2B0 137C 0004 0001             		move.b	#4,1(a1)
0000C2B6 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C2BC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C2C2 137C 0010 0019             		move.b	#$10,$19(a1)
0000C2C8 3342 0034                  		move.w	d2,$34(a1)
0000C2CC 137C 0004 0018             		move.b	#4,$18(a1)
0000C2D2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C2D6 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C2DC 6600                       		bne.s	loc_B76A
0000C2DE 5341                       		subq.w	#1,d1
0000C2E0 1028 0028                  		move.b	$28(a0),d0
0000C2E4 0240 00F0                  		andi.w	#$F0,d0
0000C2E8 0C40 0020                  		cmpi.w	#$20,d0
0000C2EC 679A                       		beq.s	Obj31_MakeStomper
0000C2EE 137C 0038 0019             		move.b	#$38,$19(a1)
0000C2F4 137C 0090 0020             		move.b	#$90,$20(a1)
0000C2FA 5241                       		addq.w	#1,d1
0000C2FC                            
0000C2FC                            loc_B76A:
0000C2FC 2348 003C                  		move.l	a0,$3C(a1)
0000C300 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C304                            
0000C304 137C 0003 0018             		move.b	#3,$18(a1)
0000C30A                            
0000C30A                            Obj31_SetSize:
0000C30A 7000                       		moveq	#0,d0
0000C30C 1028 0028                  		move.b	$28(a0),d0
0000C310 E648                       		lsr.w	#3,d0
0000C312 0200 000E                  		andi.b	#$E,d0
0000C316 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C31A 115A 0019                  		move.b	(a2)+,$19(a0)
0000C31E 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C322 6000                       		bra.s	loc_B798
0000C324                            ; ===========================================================================
0000C324 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C326 3009                       		dc.b $30, 9
0000C328 100A                       		dc.b $10, $A
0000C32A                            ; ===========================================================================
0000C32A                            
0000C32A                            loc_B798:				; XREF: Obj31_Index
0000C32A 6100 0000                  		bsr.w	Obj31_Types
0000C32E 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C334 7200                       		moveq	#0,d1
0000C336 1228 0019                  		move.b	$19(a0),d1
0000C33A 0641 000B                  		addi.w	#$B,d1
0000C33E 343C 000C                  		move.w	#$C,d2
0000C342 363C 000D                  		move.w	#$D,d3
0000C346 3828 0008                  		move.w	8(a0),d4
0000C34A 6100 0000                  		bsr.w	SolidObject
0000C34E 0828 0003 0022             		btst	#3,$22(a0)
0000C354 6700                       		beq.s	Obj31_Display
0000C356 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C35C 6400                       		bcc.s	Obj31_Display
0000C35E 2448                       		movea.l	a0,a2
0000C360 41F8 D000                  		lea	($FFFFD000).w,a0
0000C364 4EB9 0000 0000             		jsr	KillSonic
0000C36A 204A                       		movea.l	a2,a0
0000C36C                            
0000C36C                            Obj31_Display:
0000C36C 6100 0000                  		bsr.w	DisplaySprite
0000C370 6000 0000                  		bra.w	Obj31_ChkDel
0000C374                            ; ===========================================================================
0000C374                            
0000C374                            loc_B7E2:				; XREF: Obj31_Index
0000C374 117C 0080 0016             		move.b	#$80,$16(a0)
0000C37A 08E8 0004 0001             		bset	#4,1(a0)
0000C380 2268 003C                  		movea.l	$3C(a0),a1
0000C384 1029 0032                  		move.b	$32(a1),d0
0000C388 EA08                       		lsr.b	#5,d0
0000C38A 5600                       		addq.b	#3,d0
0000C38C 1140 001A                  		move.b	d0,$1A(a0)
0000C390                            
0000C390                            loc_B7FE:				; XREF: Obj31_Index
0000C390 2268 003C                  		movea.l	$3C(a0),a1
0000C394 7000                       		moveq	#0,d0
0000C396 1029 0032                  		move.b	$32(a1),d0
0000C39A D068 0030                  		add.w	$30(a0),d0
0000C39E 3140 000C                  		move.w	d0,$C(a0)
0000C3A2                            
0000C3A2                            Obj31_Display2:				; XREF: Obj31_Index
0000C3A2 6100 0000                  		bsr.w	DisplaySprite
0000C3A6                            
0000C3A6                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C3A6 3028 0008                  		move.w	8(a0),d0
0000C3AA 0240 FF80                  		andi.w	#$FF80,d0
0000C3AE 3238 F700                  		move.w	($FFFFF700).w,d1
0000C3B2 0441 0080                  		subi.w	#$80,d1
0000C3B6 0241 FF80                  		andi.w	#$FF80,d1
0000C3BA 9041                       		sub.w	d1,d0
0000C3BC 0C40 0280                  		cmpi.w	#$280,d0
0000C3C0 6200 0000                  		bhi.w	DeleteObject
0000C3C4 4E75                       		rts	
0000C3C6                            ; ===========================================================================
0000C3C6                            
0000C3C6                            Obj31_Types:				; XREF: loc_B798
0000C3C6 1028 0028                  		move.b	$28(a0),d0
0000C3CA 0240 000F                  		andi.w	#$F,d0
0000C3CE D040                       		add.w	d0,d0
0000C3D0 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C3D4 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C3D8                            ; ===========================================================================
0000C3D8 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C3DA 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C3DC 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C3DE 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C3E0 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C3E2 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C3E4 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C3E6                            ; ===========================================================================
0000C3E6                            
0000C3E6                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C3E6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C3EA 7000                       		moveq	#0,d0
0000C3EC 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C3F0 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C3F4 6700                       		beq.s	loc_B8A8	; if not, branch
0000C3F6 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C3FA 6A00                       		bpl.s	loc_B872
0000C3FC 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C402 6700                       		beq.s	loc_B8A0
0000C404                            
0000C404                            loc_B872:
0000C404 4A68 0032                  		tst.w	$32(a0)
0000C408 6700                       		beq.s	loc_B8A0
0000C40A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C40E 0200 000F                  		andi.b	#$F,d0
0000C412 6600                       		bne.s	loc_B892
0000C414 4A28 0001                  		tst.b	1(a0)
0000C418 6A00                       		bpl.s	loc_B892
0000C41A 303C 00C7                  		move.w	#$C7,d0
0000C41E 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C424                            
0000C424                            loc_B892:
0000C424 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C42A 6400                       		bcc.s	Obj31_Restart
0000C42C 317C 0000 0032             		move.w	#0,$32(a0)
0000C432                            
0000C432                            loc_B8A0:
0000C432 317C 0000 0012             		move.w	#0,$12(a0)
0000C438 6000                       		bra.s	Obj31_Restart
0000C43A                            ; ===========================================================================
0000C43A                            
0000C43A                            loc_B8A8:				; XREF: Obj31_Type00
0000C43A 3228 0034                  		move.w	$34(a0),d1
0000C43E B268 0032                  		cmp.w	$32(a0),d1
0000C442 6700                       		beq.s	Obj31_Restart
0000C444 3028 0012                  		move.w	$12(a0),d0
0000C448 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C44E D168 0032                  		add.w	d0,$32(a0)
0000C452 B268 0032                  		cmp.w	$32(a0),d1
0000C456 6200                       		bhi.s	Obj31_Restart
0000C458 3141 0032                  		move.w	d1,$32(a0)
0000C45C 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C462 4A28 0001                  		tst.b	1(a0)
0000C466 6A00                       		bpl.s	Obj31_Restart
0000C468 303C 00BD                  		move.w	#$BD,d0
0000C46C 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C472                            
0000C472                            Obj31_Restart:
0000C472 7000                       		moveq	#0,d0
0000C474 1028 0032                  		move.b	$32(a0),d0
0000C478 D068 0030                  		add.w	$30(a0),d0
0000C47C 3140 000C                  		move.w	d0,$C(a0)
0000C480 4E75                       		rts	
0000C482                            ; ===========================================================================
0000C482                            
0000C482                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C482 4A68 0036                  		tst.w	$36(a0)
0000C486 6700                       		beq.s	loc_B938
0000C488 4A68 0038                  		tst.w	$38(a0)
0000C48C 6700                       		beq.s	loc_B902
0000C48E 5368 0038                  		subq.w	#1,$38(a0)
0000C492 6000                       		bra.s	loc_B97C
0000C494                            ; ===========================================================================
0000C494                            
0000C494                            loc_B902:
0000C494 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C498 0200 000F                  		andi.b	#$F,d0
0000C49C 6600                       		bne.s	loc_B91C
0000C49E 4A28 0001                  		tst.b	1(a0)
0000C4A2 6A00                       		bpl.s	loc_B91C
0000C4A4 303C 00C7                  		move.w	#$C7,d0
0000C4A8 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C4AE                            
0000C4AE                            loc_B91C:
0000C4AE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C4B4 6400                       		bcc.s	loc_B97C
0000C4B6 317C 0000 0032             		move.w	#0,$32(a0)
0000C4BC 317C 0000 0012             		move.w	#0,$12(a0)
0000C4C2 317C 0000 0036             		move.w	#0,$36(a0)
0000C4C8 6000                       		bra.s	loc_B97C
0000C4CA                            ; ===========================================================================
0000C4CA                            
0000C4CA                            loc_B938:				; XREF: Obj31_Type01
0000C4CA 3228 0034                  		move.w	$34(a0),d1
0000C4CE B268 0032                  		cmp.w	$32(a0),d1
0000C4D2 6700                       		beq.s	loc_B97C
0000C4D4 3028 0012                  		move.w	$12(a0),d0
0000C4D8 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C4DE D168 0032                  		add.w	d0,$32(a0)
0000C4E2 B268 0032                  		cmp.w	$32(a0),d1
0000C4E6 6200                       		bhi.s	loc_B97C
0000C4E8 3141 0032                  		move.w	d1,$32(a0)
0000C4EC 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C4F2 317C 0001 0036             		move.w	#1,$36(a0)
0000C4F8 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C4FE 4A28 0001                  		tst.b	1(a0)
0000C502 6A00                       		bpl.s	loc_B97C
0000C504 303C 00BD                  		move.w	#$BD,d0
0000C508 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C50E                            
0000C50E                            loc_B97C:
0000C50E 6000 FF62                  		bra.w	Obj31_Restart
0000C512                            ; ===========================================================================
0000C512                            
0000C512                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C512 3038 D008                  		move.w	($FFFFD008).w,d0
0000C516 9068 0008                  		sub.w	8(a0),d0
0000C51A 6400                       		bcc.s	loc_B98C
0000C51C 4440                       		neg.w	d0
0000C51E                            
0000C51E                            loc_B98C:
0000C51E 0C40 0090                  		cmpi.w	#$90,d0
0000C522 6400                       		bcc.s	loc_B996
0000C524 5228 0028                  		addq.b	#1,$28(a0)
0000C528                            
0000C528                            loc_B996:
0000C528 6000 FF48                  		bra.w	Obj31_Restart
0000C52C                            ; ===========================================================================
0000C52C                            ; ---------------------------------------------------------------------------
0000C52C                            ; Object 45 - spiked metal block from beta version (MZ)
0000C52C                            ; ---------------------------------------------------------------------------
0000C52C                            
0000C52C                            Obj45:					; XREF: Obj_Index
0000C52C 7000                       		moveq	#0,d0
0000C52E 1028 0024                  		move.b	$24(a0),d0
0000C532 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C536 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C53A                            ; ===========================================================================
0000C53A 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C53C 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C53E 0000                       		dc.w loc_BA8E-Obj45_Index
0000C540 0000                       		dc.w Obj45_Display-Obj45_Index
0000C542 0000                       		dc.w loc_BA7A-Obj45_Index
0000C544                            
0000C544 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C547 04E4 01                    		dc.b	4, $E4,	  1
0000C54A 0834 03                    		dc.b	8, $34,	  3
0000C54D 0628 02                    		dc.b	6, $28,	  2
0000C550                            
0000C550 3800                       word_B9BE:	dc.w $3800
0000C552 A000                       		dc.w -$6000
0000C554 5000                       		dc.w $5000
0000C556                            ; ===========================================================================
0000C556                            
0000C556                            Obj45_Main:				; XREF: Obj45_Index
0000C556 7000                       		moveq	#0,d0
0000C558 1028 0028                  		move.b	$28(a0),d0
0000C55C D040                       		add.w	d0,d0
0000C55E 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C562 45F9 0000 C544             		lea	(Obj45_Var).l,a2
0000C568 2248                       		movea.l	a0,a1
0000C56A 7203                       		moveq	#3,d1
0000C56C 6000                       		bra.s	Obj45_Load
0000C56E                            ; ===========================================================================
0000C56E                            
0000C56E                            Obj45_Loop:
0000C56E 6100 0000                  		bsr.w	SingleObjLoad2
0000C572 6600                       		bne.s	loc_BA52
0000C574                            
0000C574                            Obj45_Load:				; XREF: Obj45_Main
0000C574 135A 0024                  		move.b	(a2)+,$24(a1)
0000C578 12BC 0045                  		move.b	#$45,0(a1)
0000C57C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C582 101A                       		move.b	(a2)+,d0
0000C584 4880                       		ext.w	d0
0000C586 D068 0008                  		add.w	8(a0),d0
0000C58A 3340 0008                  		move.w	d0,8(a1)
0000C58E 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C596 337C 0300 0002             		move.w	#$300,2(a1)
0000C59C 137C 0004 0001             		move.b	#4,1(a1)
0000C5A2 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C5A8 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C5AE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C5B4 137C 0020 0019             		move.b	#$20,$19(a1)
0000C5BA 3342 0034                  		move.w	d2,$34(a1)
0000C5BE 137C 0004 0018             		move.b	#4,$18(a1)
0000C5C4 0C12 0001                  		cmpi.b	#1,(a2)
0000C5C8 6600                       		bne.s	loc_BA40
0000C5CA 137C 0091 0020             		move.b	#$91,$20(a1)
0000C5D0                            
0000C5D0                            loc_BA40:
0000C5D0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C5D4 2348 003C                  		move.l	a0,$3C(a1)
0000C5D8 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C5DC                            
0000C5DC 137C 0003 0018             		move.b	#3,$18(a1)
0000C5E2                            
0000C5E2                            loc_BA52:
0000C5E2 117C 0010 0019             		move.b	#$10,$19(a0)
0000C5E8                            
0000C5E8                            Obj45_Solid:				; XREF: Obj45_Index
0000C5E8 3F28 0008                  		move.w	8(a0),-(sp)
0000C5EC 6100 0000                  		bsr.w	Obj45_Move
0000C5F0 323C 0017                  		move.w	#$17,d1
0000C5F4 343C 0020                  		move.w	#$20,d2
0000C5F8 363C 0020                  		move.w	#$20,d3
0000C5FC 381F                       		move.w	(sp)+,d4
0000C5FE 6100 0000                  		bsr.w	SolidObject
0000C602 6100 0000                  		bsr.w	DisplaySprite
0000C606 6000 0000                  		bra.w	Obj45_ChkDel
0000C60A                            ; ===========================================================================
0000C60A                            
0000C60A                            loc_BA7A:				; XREF: Obj45_Index
0000C60A 2268 003C                  		movea.l	$3C(a0),a1
0000C60E 1029 0032                  		move.b	$32(a1),d0
0000C612 0600 0010                  		addi.b	#$10,d0
0000C616 EA08                       		lsr.b	#5,d0
0000C618 5600                       		addq.b	#3,d0
0000C61A 1140 001A                  		move.b	d0,$1A(a0)
0000C61E                            
0000C61E                            loc_BA8E:				; XREF: Obj45_Index
0000C61E 2268 003C                  		movea.l	$3C(a0),a1
0000C622 7000                       		moveq	#0,d0
0000C624 1029 0032                  		move.b	$32(a1),d0
0000C628 4440                       		neg.w	d0
0000C62A D068 0030                  		add.w	$30(a0),d0
0000C62E 3140 0008                  		move.w	d0,8(a0)
0000C632                            
0000C632                            Obj45_Display:				; XREF: Obj45_Index
0000C632 6100 0000                  		bsr.w	DisplaySprite
0000C636                            
0000C636                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C636 3028 003A                  		move.w	$3A(a0),d0
0000C63A 0240 FF80                  		andi.w	#$FF80,d0
0000C63E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C642 0441 0080                  		subi.w	#$80,d1
0000C646 0241 FF80                  		andi.w	#$FF80,d1
0000C64A 9041                       		sub.w	d1,d0
0000C64C 0C40 0280                  		cmpi.w	#$280,d0
0000C650 6200 0000                  		bhi.w	DeleteObject
0000C654 4E75                       		rts	
0000C656                            
0000C656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C656                            
0000C656                            
0000C656                            Obj45_Move:				; XREF: Obj45_Solid
0000C656 7000                       		moveq	#0,d0
0000C658 1028 0028                  		move.b	$28(a0),d0
0000C65C D040                       		add.w	d0,d0
0000C65E 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C662 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C666                            ; End of function Obj45_Move
0000C666                            
0000C666                            ; ===========================================================================
0000C666 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C668 0000                       		dc.w loc_BADA-off_BAD6
0000C66A                            ; ===========================================================================
0000C66A                            
0000C66A                            loc_BADA:				; XREF: off_BAD6
0000C66A 4A68 0036                  		tst.w	$36(a0)
0000C66E 6700                       		beq.s	loc_BB08
0000C670 4A68 0038                  		tst.w	$38(a0)
0000C674 6700                       		beq.s	loc_BAEC
0000C676 5368 0038                  		subq.w	#1,$38(a0)
0000C67A 6000                       		bra.s	loc_BB3C
0000C67C                            ; ===========================================================================
0000C67C                            
0000C67C                            loc_BAEC:
0000C67C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C682 6400                       		bcc.s	loc_BB3C
0000C684 317C 0000 0032             		move.w	#0,$32(a0)
0000C68A 317C 0000 0010             		move.w	#0,$10(a0)
0000C690 317C 0000 0036             		move.w	#0,$36(a0)
0000C696 6000                       		bra.s	loc_BB3C
0000C698                            ; ===========================================================================
0000C698                            
0000C698                            loc_BB08:				; XREF: loc_BADA
0000C698 3228 0034                  		move.w	$34(a0),d1
0000C69C B268 0032                  		cmp.w	$32(a0),d1
0000C6A0 6700                       		beq.s	loc_BB3C
0000C6A2 3028 0010                  		move.w	$10(a0),d0
0000C6A6 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C6AC D168 0032                  		add.w	d0,$32(a0)
0000C6B0 B268 0032                  		cmp.w	$32(a0),d1
0000C6B4 6200                       		bhi.s	loc_BB3C
0000C6B6 3141 0032                  		move.w	d1,$32(a0)
0000C6BA 317C 0000 0010             		move.w	#0,$10(a0)
0000C6C0 317C 0001 0036             		move.w	#1,$36(a0)
0000C6C6 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C6CC                            
0000C6CC                            loc_BB3C:
0000C6CC 7000                       		moveq	#0,d0
0000C6CE 1028 0032                  		move.b	$32(a0),d0
0000C6D2 4440                       		neg.w	d0
0000C6D4 D068 0030                  		add.w	$30(a0),d0
0000C6D8 3140 0008                  		move.w	d0,8(a0)
0000C6DC 4E75                       		rts	
0000C6DE                            ; ===========================================================================
0000C6DE                            ; ---------------------------------------------------------------------------
0000C6DE                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C6DE                            ; ---------------------------------------------------------------------------
0000C6DE                            Map_obj31:
0000C6DE                            	include "_maps\obj31.asm"
0000C6DE                            ; ---------------------------------------------------------------------------
0000C6DE                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C6DE                            ; ---------------------------------------------------------------------------
0000C6DE 0000                       		dc.w byte_BB64-Map_obj31
0000C6E0 0000                       		dc.w byte_BB7E-Map_obj31
0000C6E2 0000                       		dc.w byte_BB98-Map_obj31
0000C6E4 0000                       		dc.w byte_BB9E-Map_obj31
0000C6E6 0000                       		dc.w byte_BBA9-Map_obj31
0000C6E8 0000                       		dc.w byte_BBBE-Map_obj31
0000C6EA 0000                       		dc.w byte_BBDD-Map_obj31
0000C6EC 0000                       		dc.w byte_BC06-Map_obj31
0000C6EE 0000                       		dc.w byte_BC06-Map_obj31
0000C6F0 0000                       		dc.w byte_BC39-Map_obj31
0000C6F2 0000                       		dc.w byte_BC53-Map_obj31
0000C6F4 05                         byte_BB64:	dc.b 5
0000C6F5 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C6FA F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C6FF EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C704 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C709 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C70E 05                         byte_BB7E:	dc.b 5
0000C70F F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C714 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C719 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C71E F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C723 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C728 01                         byte_BB98:	dc.b 1
0000C729 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C72E 02                         byte_BB9E:	dc.b 2
0000C72F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C734 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C739 04                         byte_BBA9:	dc.b 4
0000C73A E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C73F F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C744 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C749 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C74E 06                         byte_BBBE:	dc.b 6
0000C74F C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C754 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C759 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C75E F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C763 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C768 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C76D 08                         byte_BBDD:	dc.b 8
0000C76E A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C773 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C778 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C77D D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C782 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C787 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C78C 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C791 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C796 0A                         byte_BC06:	dc.b $A
0000C797 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C79C 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C7A1 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C7A6 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C7AB C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C7B0 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C7B5 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C7BA F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C7BF 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C7C4 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C7C9 05                         byte_BC39:	dc.b 5
0000C7CA F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C7CF F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C7D4 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C7D9 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C7DE EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C7E3 01                         byte_BC53:	dc.b 1
0000C7E4 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C7EA 00                         		even
0000C7EA 00                         		even
0000C7EA                            
0000C7EA                            ; ---------------------------------------------------------------------------
0000C7EA                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C7EA                            ; ---------------------------------------------------------------------------
0000C7EA                            Map_obj45:
0000C7EA                            	include "_maps\obj45.asm"
0000C7EA                            ; ---------------------------------------------------------------------------
0000C7EA                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C7EA                            ; ---------------------------------------------------------------------------
0000C7EA 0000                       		dc.w byte_BC6C-Map_obj45
0000C7EC 0000                       		dc.w byte_BC7C-Map_obj45
0000C7EE 0000                       		dc.w byte_BC8C-Map_obj45
0000C7F0 0000                       		dc.w byte_BC92-Map_obj45
0000C7F2 0000                       		dc.w byte_BC9D-Map_obj45
0000C7F4 0000                       		dc.w byte_BCB2-Map_obj45
0000C7F6 0000                       		dc.w byte_BCD1-Map_obj45
0000C7F8 0000                       		dc.w byte_BCFA-Map_obj45
0000C7FA 0000                       		dc.w byte_BCFA-Map_obj45
0000C7FC 03                         byte_BC6C:	dc.b 3
0000C7FD E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C802 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C807 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C80C 03                         byte_BC7C:	dc.b 3
0000C80D E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C812 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C817 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C81C 01                         byte_BC8C:	dc.b 1
0000C81D F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C822 02                         byte_BC92:	dc.b 2
0000C823 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C828 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C82D 04                         byte_BC9D:	dc.b 4
0000C82E F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C833 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C838 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C83D F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C842 06                         byte_BCB2:	dc.b 6
0000C843 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C848 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C84D F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C852 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C857 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C85C F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C861 08                         byte_BCD1:	dc.b 8
0000C862 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C867 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C86C F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C871 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C876 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C87B F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C880 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C885 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C88A 08                         byte_BCFA:	dc.b 8
0000C88B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C890 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C895 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C89A F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C89F F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C8A4 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C8A9 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C8AE F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C8B3 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C8B8 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C8BE 00                         		even
0000C8BE 00                         		even
0000C8BE                            
0000C8BE                            ; ===========================================================================
0000C8BE                            ; ---------------------------------------------------------------------------
0000C8BE                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C8BE                            ; ---------------------------------------------------------------------------
0000C8BE                            
0000C8BE                            Obj32:					; XREF: Obj_Index
0000C8BE 7000                       		moveq	#0,d0
0000C8C0 1028 0024                  		move.b	$24(a0),d0
0000C8C4 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C8C8 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C8CC                            ; ===========================================================================
0000C8CC 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C8CE 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C8D0                            ; ===========================================================================
0000C8D0                            
0000C8D0                            Obj32_Main:				; XREF: Obj32_Index
0000C8D0 5428 0024                  		addq.b	#2,$24(a0)
0000C8D4 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C8DC 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C8E2 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C8E8 6700                       		beq.s	loc_BD60
0000C8EA 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C8F0                            
0000C8F0                            loc_BD60:
0000C8F0 117C 0004 0001             		move.b	#4,1(a0)
0000C8F6 117C 0010 0019             		move.b	#$10,$19(a0)
0000C8FC 117C 0004 0018             		move.b	#4,$18(a0)
0000C902 5668 000C                  		addq.w	#3,$C(a0)
0000C906                            
0000C906                            Obj32_Pressed:				; XREF: Obj32_Index
0000C906 4A28 0001                  		tst.b	1(a0)
0000C90A 6A00                       		bpl.s	Obj32_Display
0000C90C 323C 001B                  		move.w	#$1B,d1
0000C910 343C 0005                  		move.w	#5,d2
0000C914 363C 0005                  		move.w	#5,d3
0000C918 3828 0008                  		move.w	8(a0),d4
0000C91C 6100 0000                  		bsr.w	SolidObject
0000C920 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C926 1028 0028                  		move.b	$28(a0),d0
0000C92A 0240 000F                  		andi.w	#$F,d0
0000C92E 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C932 47F3 0000                  		lea	(a3,d0.w),a3
0000C936 7600                       		moveq	#0,d3
0000C938 0828 0006 0028             		btst	#6,$28(a0)
0000C93E 6700                       		beq.s	loc_BDB2
0000C940 7607                       		moveq	#7,d3
0000C942                            
0000C942                            loc_BDB2:
0000C942 4A28 0028                  		tst.b	$28(a0)
0000C946 6A00                       		bpl.s	loc_BDBE
0000C948 6100 0000                  		bsr.w	Obj32_MZBlock
0000C94C 6600                       		bne.s	loc_BDC8
0000C94E                            
0000C94E                            loc_BDBE:
0000C94E 4A28 0025                  		tst.b	$25(a0)
0000C952 6600                       		bne.s	loc_BDC8
0000C954 0793                       		bclr	d3,(a3)
0000C956 6000                       		bra.s	loc_BDDE
0000C958                            ; ===========================================================================
0000C958                            
0000C958                            loc_BDC8:
0000C958 4A13                       		tst.b	(a3)
0000C95A 6600                       		bne.s	loc_BDD6
0000C95C 303C 00CD                  		move.w	#$CD,d0
0000C960 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play switch sound
0000C966                            
0000C966                            loc_BDD6:
0000C966 07D3                       		bset	d3,(a3)
0000C968 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C96E                            
0000C96E                            loc_BDDE:
0000C96E 0828 0005 0028             		btst	#5,$28(a0)
0000C974 6700                       		beq.s	Obj32_Display
0000C976 5328 001E                  		subq.b	#1,$1E(a0)
0000C97A 6A00                       		bpl.s	Obj32_Display
0000C97C 117C 0007 001E             		move.b	#7,$1E(a0)
0000C982 0868 0001 001A             		bchg	#1,$1A(a0)
0000C988                            
0000C988                            Obj32_Display:
0000C988 6100 0000                  		bsr.w	DisplaySprite
0000C98C 3028 0008                  		move.w	8(a0),d0
0000C990 0240 FF80                  		andi.w	#$FF80,d0
0000C994 3238 F700                  		move.w	($FFFFF700).w,d1
0000C998 0441 0080                  		subi.w	#$80,d1
0000C99C 0241 FF80                  		andi.w	#$FF80,d1
0000C9A0 9041                       		sub.w	d1,d0
0000C9A2 0C40 0280                  		cmpi.w	#$280,d0
0000C9A6 6200 0000                  		bhi.w	Obj32_Delete
0000C9AA 4E75                       		rts	
0000C9AC                            ; ===========================================================================
0000C9AC                            
0000C9AC                            Obj32_Delete:
0000C9AC 6100 0000                  		bsr.w	DeleteObject
0000C9B0 4E75                       		rts	
0000C9B2                            
0000C9B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C9B2                            
0000C9B2                            
0000C9B2                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C9B2 3F03                       		move.w	d3,-(sp)
0000C9B4 3428 0008                  		move.w	8(a0),d2
0000C9B8 3628 000C                  		move.w	$C(a0),d3
0000C9BC 0442 0010                  		subi.w	#$10,d2
0000C9C0 5143                       		subq.w	#8,d3
0000C9C2 383C 0020                  		move.w	#$20,d4
0000C9C6 3A3C 0010                  		move.w	#$10,d5
0000C9CA 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C9CE 3C3C 005F                  		move.w	#$5F,d6
0000C9D2                            
0000C9D2                            Obj32_MZLoop:
0000C9D2 4A29 0001                  		tst.b	1(a1)
0000C9D6 6A00                       		bpl.s	loc_BE4E
0000C9D8 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C9DC 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C9DE                            
0000C9DE                            loc_BE4E:
0000C9DE 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C9E2 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C9E6                            
0000C9E6 361F                       		move.w	(sp)+,d3
0000C9E8 7000                       		moveq	#0,d0
0000C9EA                            
0000C9EA                            locret_BE5A:
0000C9EA 4E75                       		rts	
0000C9EC                            ; ===========================================================================
0000C9EC 1010                       Obj32_MZData:	dc.b $10, $10
0000C9EE                            ; ===========================================================================
0000C9EE                            
0000C9EE                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C9EE 7001                       		moveq	#1,d0
0000C9F0 0240 003F                  		andi.w	#$3F,d0
0000C9F4 D040                       		add.w	d0,d0
0000C9F6 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C9FA 121A                       		move.b	(a2)+,d1
0000C9FC 4881                       		ext.w	d1
0000C9FE 3029 0008                  		move.w	8(a1),d0
0000CA02 9041                       		sub.w	d1,d0
0000CA04 9042                       		sub.w	d2,d0
0000CA06 6400                       		bcc.s	loc_BE80
0000CA08 D241                       		add.w	d1,d1
0000CA0A D041                       		add.w	d1,d0
0000CA0C 6500                       		bcs.s	loc_BE84
0000CA0E 60CE                       		bra.s	loc_BE4E
0000CA10                            ; ===========================================================================
0000CA10                            
0000CA10                            loc_BE80:
0000CA10 B044                       		cmp.w	d4,d0
0000CA12 62CA                       		bhi.s	loc_BE4E
0000CA14                            
0000CA14                            loc_BE84:
0000CA14 121A                       		move.b	(a2)+,d1
0000CA16 4881                       		ext.w	d1
0000CA18 3029 000C                  		move.w	$C(a1),d0
0000CA1C 9041                       		sub.w	d1,d0
0000CA1E 9043                       		sub.w	d3,d0
0000CA20 6400                       		bcc.s	loc_BE9A
0000CA22 D241                       		add.w	d1,d1
0000CA24 D041                       		add.w	d1,d0
0000CA26 6500                       		bcs.s	loc_BE9E
0000CA28 60B4                       		bra.s	loc_BE4E
0000CA2A                            ; ===========================================================================
0000CA2A                            
0000CA2A                            loc_BE9A:
0000CA2A B045                       		cmp.w	d5,d0
0000CA2C 62B0                       		bhi.s	loc_BE4E
0000CA2E                            
0000CA2E                            loc_BE9E:
0000CA2E 361F                       		move.w	(sp)+,d3
0000CA30 7001                       		moveq	#1,d0
0000CA32 4E75                       		rts	
0000CA34                            ; End of function Obj32_MZBlock
0000CA34                            
0000CA34                            ; ===========================================================================
0000CA34                            ; ---------------------------------------------------------------------------
0000CA34                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000CA34                            ; ---------------------------------------------------------------------------
0000CA34                            Map_obj32:
0000CA34                            	include "_maps\obj32.asm"
0000CA34                            ; ---------------------------------------------------------------------------
0000CA34                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000CA34                            ; ---------------------------------------------------------------------------
0000CA34 0000                       		dc.w byte_BEAC-Map_obj32
0000CA36 0000                       		dc.w byte_BEB7-Map_obj32
0000CA38 0000                       		dc.w byte_BEC2-Map_obj32
0000CA3A 0000                       		dc.w byte_BEB7-Map_obj32
0000CA3C 02                         byte_BEAC:	dc.b 2
0000CA3D F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000CA42 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000CA47 02                         byte_BEB7:	dc.b 2
0000CA48 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000CA4D F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000CA52 02                         byte_BEC2:	dc.b 2
0000CA53 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000CA58 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000CA5D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000CA62                            		even
0000CA62                            		even
0000CA62                            
0000CA62                            ; ===========================================================================
0000CA62                            ; ---------------------------------------------------------------------------
0000CA62                            ; Object 33 - pushable blocks (MZ, LZ)
0000CA62                            ; ---------------------------------------------------------------------------
0000CA62                            
0000CA62                            Obj33:					; XREF: Obj_Index
0000CA62 7000                       		moveq	#0,d0
0000CA64 1028 0024                  		move.b	$24(a0),d0
0000CA68 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000CA6C 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000CA70                            ; ===========================================================================
0000CA70 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000CA72 0000                       		dc.w loc_BF6E-Obj33_Index
0000CA74 0000                       		dc.w loc_C02C-Obj33_Index
0000CA76                            
0000CA76 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000CA78 4001                       		dc.b $40, 1
0000CA7A                            ; ===========================================================================
0000CA7A                            
0000CA7A                            Obj33_Main:				; XREF: Obj33_Index
0000CA7A 5428 0024                  		addq.b	#2,$24(a0)
0000CA7E 117C 000F 0016             		move.b	#$F,$16(a0)
0000CA84 117C 000F 0017             		move.b	#$F,$17(a0)
0000CA8A 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000CA92 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000CA98 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000CA9E 6600                       		bne.s	loc_BF16
0000CAA0 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000CAA6                            
0000CAA6                            loc_BF16:
0000CAA6 117C 0004 0001             		move.b	#4,1(a0)
0000CAAC 117C 0003 0018             		move.b	#3,$18(a0)
0000CAB2 3168 0008 0034             		move.w	8(a0),$34(a0)
0000CAB8 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000CABE 7000                       		moveq	#0,d0
0000CAC0 1028 0028                  		move.b	$28(a0),d0
0000CAC4 D040                       		add.w	d0,d0
0000CAC6 0240 000E                  		andi.w	#$E,d0
0000CACA 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000CACE 115A 0019                  		move.b	(a2)+,$19(a0)
0000CAD2 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CAD6 4A28 0028                  		tst.b	$28(a0)
0000CADA 6700                       		beq.s	Obj33_ChkGone
0000CADC 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000CAE2                            
0000CAE2                            Obj33_ChkGone:
0000CAE2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CAE6 7000                       		moveq	#0,d0
0000CAE8 1028 0023                  		move.b	$23(a0),d0
0000CAEC 6700                       		beq.s	loc_BF6E
0000CAEE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000CAF4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000CAFA 6600 0000                  		bne.w	DeleteObject
0000CAFE                            
0000CAFE                            loc_BF6E:				; XREF: Obj33_Index
0000CAFE 4A28 0032                  		tst.b	$32(a0)
0000CB02 6600 0000                  		bne.w	loc_C046
0000CB06 7200                       		moveq	#0,d1
0000CB08 1228 0019                  		move.b	$19(a0),d1
0000CB0C 0641 000B                  		addi.w	#$B,d1
0000CB10 343C 0010                  		move.w	#$10,d2
0000CB14 363C 0011                  		move.w	#$11,d3
0000CB18 3828 0008                  		move.w	8(a0),d4
0000CB1C 6100 0000                  		bsr.w	loc_C186
0000CB20 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000CB26 6600                       		bne.s	loc_BFC6	; if not, branch
0000CB28 08A8 0007 0028             		bclr	#7,$28(a0)
0000CB2E 3028 0008                  		move.w	8(a0),d0
0000CB32 0C40 0A20                  		cmpi.w	#$A20,d0
0000CB36 6500                       		bcs.s	loc_BFC6
0000CB38 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000CB3C 6400                       		bcc.s	loc_BFC6
0000CB3E 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000CB42 0440 001C                  		subi.w	#$1C,d0
0000CB46 3140 000C                  		move.w	d0,$C(a0)
0000CB4A 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000CB50 08E8 0007 0028             		bset	#7,$28(a0)
0000CB56                            
0000CB56                            loc_BFC6:
0000CB56 3028 0008                  		move.w	8(a0),d0
0000CB5A 0240 FF80                  		andi.w	#$FF80,d0
0000CB5E 3238 F700                  		move.w	($FFFFF700).w,d1
0000CB62 0441 0080                  		subi.w	#$80,d1
0000CB66 0241 FF80                  		andi.w	#$FF80,d1
0000CB6A 9041                       		sub.w	d1,d0
0000CB6C 0C40 0280                  		cmpi.w	#$280,d0
0000CB70 6200                       		bhi.s	loc_BFE6
0000CB72 6000 0000                  		bra.w	DisplaySprite
0000CB76                            ; ===========================================================================
0000CB76                            
0000CB76                            loc_BFE6:
0000CB76 3028 0034                  		move.w	$34(a0),d0
0000CB7A 0240 FF80                  		andi.w	#$FF80,d0
0000CB7E 3238 F700                  		move.w	($FFFFF700).w,d1
0000CB82 0441 0080                  		subi.w	#$80,d1
0000CB86 0241 FF80                  		andi.w	#$FF80,d1
0000CB8A 9041                       		sub.w	d1,d0
0000CB8C 0C40 0280                  		cmpi.w	#$280,d0
0000CB90 6200                       		bhi.s	loc_C016
0000CB92 3168 0034 0008             		move.w	$34(a0),8(a0)
0000CB98 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000CB9E 117C 0004 0024             		move.b	#4,$24(a0)
0000CBA4 6000                       		bra.s	loc_C02C
0000CBA6                            ; ===========================================================================
0000CBA6                            
0000CBA6                            loc_C016:
0000CBA6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CBAA 7000                       		moveq	#0,d0
0000CBAC 1028 0023                  		move.b	$23(a0),d0
0000CBB0 6700                       		beq.s	loc_C028
0000CBB2 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000CBB8                            
0000CBB8                            loc_C028:
0000CBB8 6000 0000                  		bra.w	DeleteObject
0000CBBC                            ; ===========================================================================
0000CBBC                            
0000CBBC                            loc_C02C:				; XREF: Obj33_Index
0000CBBC 6100 0000                  		bsr.w	ChkObjOnScreen2
0000CBC0 6700                       		beq.s	locret_C044
0000CBC2 117C 0002 0024             		move.b	#2,$24(a0)
0000CBC8 4228 0032                  		clr.b	$32(a0)
0000CBCC 4268 0010                  		clr.w	$10(a0)
0000CBD0 4268 0012                  		clr.w	$12(a0)
0000CBD4                            
0000CBD4                            locret_C044:
0000CBD4 4E75                       		rts	
0000CBD6                            ; ===========================================================================
0000CBD6                            
0000CBD6                            loc_C046:				; XREF: loc_BF6E
0000CBD6 3F28 0008                  		move.w	8(a0),-(sp)
0000CBDA 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000CBE0 6400                       		bcc.s	loc_C056
0000CBE2 6100 0000                  		bsr.w	SpeedToPos
0000CBE6                            
0000CBE6                            loc_C056:
0000CBE6 0828 0001 0022             		btst	#1,$22(a0)
0000CBEC 6700                       		beq.s	loc_C0A0
0000CBEE 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CBF4 4EB9 0000 0000             		jsr	ObjHitFloor
0000CBFA 4A41                       		tst.w	d1
0000CBFC 6A00 0000                  		bpl.w	loc_C09E
0000CC00 D368 000C                  		add.w	d1,$C(a0)
0000CC04 4268 0012                  		clr.w	$12(a0)
0000CC08 08A8 0001 0022             		bclr	#1,$22(a0)
0000CC0E 3011                       		move.w	(a1),d0
0000CC10 0240 03FF                  		andi.w	#$3FF,d0
0000CC14 0C40 016A                  		cmpi.w	#$16A,d0
0000CC18 6500                       		bcs.s	loc_C09E
0000CC1A 3028 0030                  		move.w	$30(a0),d0
0000CC1E E640                       		asr.w	#3,d0
0000CC20 3140 0010                  		move.w	d0,$10(a0)
0000CC24 117C 0001 0032             		move.b	#1,$32(a0)
0000CC2A 4268 000E                  		clr.w	$E(a0)
0000CC2E                            
0000CC2E                            loc_C09E:
0000CC2E 6000                       		bra.s	loc_C0E6
0000CC30                            ; ===========================================================================
0000CC30                            
0000CC30                            loc_C0A0:
0000CC30 4A68 0010                  		tst.w	$10(a0)
0000CC34 6700 0000                  		beq.w	loc_C0D6
0000CC38 6B00                       		bmi.s	loc_C0BC
0000CC3A 7600                       		moveq	#0,d3
0000CC3C 1628 0019                  		move.b	$19(a0),d3
0000CC40 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CC46 4A41                       		tst.w	d1		; has block touched a wall?
0000CC48 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CC4A 6000                       		bra.s	loc_C0E6
0000CC4C                            ; ===========================================================================
0000CC4C                            
0000CC4C                            loc_C0BC:
0000CC4C 7600                       		moveq	#0,d3
0000CC4E 1628 0019                  		move.b	$19(a0),d3
0000CC52 4643                       		not.w	d3
0000CC54 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CC5A 4A41                       		tst.w	d1		; has block touched a wall?
0000CC5C 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CC5E 6000                       		bra.s	loc_C0E6
0000CC60                            ; ===========================================================================
0000CC60                            
0000CC60                            Obj33_StopPush:
0000CC60 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000CC64 6000                       		bra.s	loc_C0E6
0000CC66                            ; ===========================================================================
0000CC66                            
0000CC66                            loc_C0D6:
0000CC66 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000CC6E 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000CC74 6400                       		bcc.s	loc_C104
0000CC76                            
0000CC76                            loc_C0E6:
0000CC76 7200                       		moveq	#0,d1
0000CC78 1228 0019                  		move.b	$19(a0),d1
0000CC7C 0641 000B                  		addi.w	#$B,d1
0000CC80 343C 0010                  		move.w	#$10,d2
0000CC84 363C 0011                  		move.w	#$11,d3
0000CC88 381F                       		move.w	(sp)+,d4
0000CC8A 6100 0000                  		bsr.w	loc_C186
0000CC8E 6100                       		bsr.s	Obj33_ChkLava
0000CC90 6000 FEC4                  		bra.w	loc_BFC6
0000CC94                            ; ===========================================================================
0000CC94                            
0000CC94                            loc_C104:
0000CC94 381F                       		move.w	(sp)+,d4
0000CC96 43F8 D000                  		lea	($FFFFD000).w,a1
0000CC9A 08A9 0003 0022             		bclr	#3,$22(a1)
0000CCA0 08A8 0003 0022             		bclr	#3,$22(a0)
0000CCA6 6000 FECE                  		bra.w	loc_BFE6
0000CCAA                            ; ===========================================================================
0000CCAA                            
0000CCAA                            Obj33_ChkLava:
0000CCAA 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000CCB0 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000CCB2 343C FFE0                  		move.w	#-$20,d2
0000CCB6 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000CCBC 6700                       		beq.s	Obj33_LoadLava
0000CCBE 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000CCC4 6700                       		beq.s	Obj33_LoadLava
0000CCC6 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000CCCC 6700                       		beq.s	Obj33_LoadLava
0000CCCE 4E75                       		rts	
0000CCD0                            ; ===========================================================================
0000CCD0                            
0000CCD0                            Obj33_ChkLava2:
0000CCD0 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000CCD6 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000CCD8 343C 0020                  		move.w	#$20,d2
0000CCDC 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000CCE2 6700                       		beq.s	Obj33_LoadLava
0000CCE4 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CCEA 6700                       		beq.s	Obj33_LoadLava
0000CCEC                            
0000CCEC                            Obj33_NoLava:
0000CCEC 4E75                       		rts	
0000CCEE                            ; ===========================================================================
0000CCEE                            
0000CCEE                            Obj33_LoadLava:
0000CCEE 6100 0000                  		bsr.w	SingleObjLoad
0000CCF2 6600                       		bne.s	locret_C184
0000CCF4 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CCF8 3368 0008 0008             		move.w	8(a0),8(a1)
0000CCFE D569 0008                  		add.w	d2,8(a1)
0000CD02 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CD08 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CD0E 2348 003C                  		move.l	a0,$3C(a1)
0000CD12                            
0000CD12                            locret_C184:
0000CD12 4E75                       		rts	
0000CD14                            ; ===========================================================================
0000CD14                            
0000CD14                            loc_C186:				; XREF: loc_BF6E
0000CD14 1028 0025                  		move.b	$25(a0),d0
0000CD18 6700 0000                  		beq.w	loc_C218
0000CD1C 5500                       		subq.b	#2,d0
0000CD1E 6600                       		bne.s	loc_C1AA
0000CD20 6100 B320                  		bsr.w	ExitPlatform
0000CD24 0829 0003 0022             		btst	#3,$22(a1)
0000CD2A 6600                       		bne.s	loc_C1A4
0000CD2C 4228 0025                  		clr.b	$25(a0)
0000CD30 4E75                       		rts	
0000CD32                            ; ===========================================================================
0000CD32                            
0000CD32                            loc_C1A4:
0000CD32 3404                       		move.w	d4,d2
0000CD34 6000 B86A                  		bra.w	MvSonicOnPtfm
0000CD38                            ; ===========================================================================
0000CD38                            
0000CD38                            loc_C1AA:
0000CD38 5500                       		subq.b	#2,d0
0000CD3A 6600                       		bne.s	loc_C1F2
0000CD3C 7218                       		moveq	#$18,d1
0000CD3E 4EB9 0000 0000             		jsr	ObjectFallCustom
0000CD44 4EB9 0000 0000             		jsr	ObjHitFloor
0000CD4A 4A41                       		tst.w	d1
0000CD4C 6A00 0000                  		bpl.w	locret_C1F0
0000CD50 D368 000C                  		add.w	d1,$C(a0)
0000CD54 4268 0012                  		clr.w	$12(a0)
0000CD58 4228 0025                  		clr.b	$25(a0)
0000CD5C 3011                       		move.w	(a1),d0
0000CD5E 0240 03FF                  		andi.w	#$3FF,d0
0000CD62 0C40 016A                  		cmpi.w	#$16A,d0
0000CD66 6500                       		bcs.s	locret_C1F0
0000CD68 3028 0030                  		move.w	$30(a0),d0
0000CD6C E640                       		asr.w	#3,d0
0000CD6E 3140 0010                  		move.w	d0,$10(a0)
0000CD72 117C 0001 0032             		move.b	#1,$32(a0)
0000CD78 4268 000E                  		clr.w	$E(a0)
0000CD7C                            
0000CD7C                            locret_C1F0:
0000CD7C 4E75                       		rts	
0000CD7E                            ; ===========================================================================
0000CD7E                            
0000CD7E                            loc_C1F2:
0000CD7E 6100 0000                  		bsr.w	SpeedToPos
0000CD82 3028 0008                  		move.w	8(a0),d0
0000CD86 0240 000C                  		andi.w	#$C,d0
0000CD8A 6600 0000                  		bne.w	locret_C2E4
0000CD8E 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CD94 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CD9A 4268 0010                  		clr.w	$10(a0)
0000CD9E 5528 0025                  		subq.b	#2,$25(a0)
0000CDA2 4E75                       		rts	
0000CDA4                            ; ===========================================================================
0000CDA4                            
0000CDA4                            loc_C218:
0000CDA4 6100 0000                  		bsr.w	loc_FAC8
0000CDA8 4A44                       		tst.w	d4
0000CDAA 6700 0000                  		beq.w	locret_C2E4
0000CDAE 6B00 0000                  		bmi.w	locret_C2E4
0000CDB2 4A28 0032                  		tst.b	$32(a0)
0000CDB6 6700                       		beq.s	loc_C230
0000CDB8 6000 0000                  		bra.w	locret_C2E4
0000CDBC                            ; ===========================================================================
0000CDBC                            
0000CDBC                            loc_C230:
0000CDBC 4A40                       		tst.w	d0
0000CDBE 6700 0000                  		beq.w	locret_C2E4
0000CDC2 6B00                       		bmi.s	loc_C268
0000CDC4 0829 0000 0022             		btst	#0,$22(a1)
0000CDCA 6600 0000                  		bne.w	locret_C2E4
0000CDCE 3F00                       		move.w	d0,-(sp)
0000CDD0 7600                       		moveq	#0,d3
0000CDD2 1628 0019                  		move.b	$19(a0),d3
0000CDD6 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CDDC 301F                       		move.w	(sp)+,d0
0000CDDE 4A41                       		tst.w	d1
0000CDE0 6B00 0000                  		bmi.w	locret_C2E4
0000CDE4 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CDEC 7001                       		moveq	#1,d0
0000CDEE 323C 0040                  		move.w	#$40,d1
0000CDF2 6000                       		bra.s	loc_C294
0000CDF4                            ; ===========================================================================
0000CDF4                            
0000CDF4                            loc_C268:
0000CDF4 0829 0000 0022             		btst	#0,$22(a1)
0000CDFA 6700                       		beq.s	locret_C2E4
0000CDFC 3F00                       		move.w	d0,-(sp)
0000CDFE 7600                       		moveq	#0,d3
0000CE00 1628 0019                  		move.b	$19(a0),d3
0000CE04 4643                       		not.w	d3
0000CE06 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CE0C 301F                       		move.w	(sp)+,d0
0000CE0E 4A41                       		tst.w	d1
0000CE10 6B00                       		bmi.s	locret_C2E4
0000CE12 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CE1A 70FF                       		moveq	#-1,d0
0000CE1C 323C FFC0                  		move.w	#-$40,d1
0000CE20                            
0000CE20                            loc_C294:
0000CE20 43F8 D000                  		lea	($FFFFD000).w,a1
0000CE24 D169 0008                  		add.w	d0,8(a1)
0000CE28 3341 0014                  		move.w	d1,$14(a1)
0000CE2C 337C 0000 0010             		move.w	#0,$10(a1)
0000CE32 3F00                       		move.w	d0,-(sp)
0000CE34 303C 00A7                  		move.w	#$A7,d0
0000CE38 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CE3E 301F                       		move.w	(sp)+,d0
0000CE40 4A28 0028                  		tst.b	$28(a0)
0000CE44 6B00                       		bmi.s	locret_C2E4
0000CE46 3F00                       		move.w	d0,-(sp)
0000CE48 4EB9 0000 0000             		jsr	ObjHitFloor
0000CE4E 301F                       		move.w	(sp)+,d0
0000CE50 0C41 0004                  		cmpi.w	#4,d1
0000CE54 6F00                       		ble.s	loc_C2E0
0000CE56 317C 0400 0010             		move.w	#$400,$10(a0)
0000CE5C 4A40                       		tst.w	d0
0000CE5E 6A00                       		bpl.s	loc_C2D8
0000CE60 4468 0010                  		neg.w	$10(a0)
0000CE64                            
0000CE64                            loc_C2D8:
0000CE64 117C 0006 0025             		move.b	#6,$25(a0)
0000CE6A 6000                       		bra.s	locret_C2E4
0000CE6C                            ; ===========================================================================
0000CE6C                            
0000CE6C                            loc_C2E0:
0000CE6C D368 000C                  		add.w	d1,$C(a0)
0000CE70                            
0000CE70                            locret_C2E4:
0000CE70 4E75                       		rts	
0000CE72                            ; ===========================================================================
0000CE72                            ; ---------------------------------------------------------------------------
0000CE72                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CE72                            ; ---------------------------------------------------------------------------
0000CE72                            Map_obj33:
0000CE72                            	include "_maps\obj33.asm"
0000CE72                            ; ---------------------------------------------------------------------------
0000CE72                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CE72                            ; ---------------------------------------------------------------------------
0000CE72 0000                       		dc.w byte_C2EA-Map_obj33
0000CE74 0000                       		dc.w byte_C2F0-Map_obj33
0000CE76 01                         byte_C2EA:	dc.b 1
0000CE77 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CE7C 04                         byte_C2F0:	dc.b 4
0000CE7D F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CE82 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CE87 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CE8C F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CE92 00                         		even
0000CE92 00                         		even
0000CE92                            
0000CE92                            ; ===========================================================================
0000CE92                            ; ---------------------------------------------------------------------------
0000CE92                            ; Object 34 - zone title cards
0000CE92                            ; ---------------------------------------------------------------------------
0000CE92                            Obj34:					; XREF: Obj_Index
0000CE92 7000                       		moveq	#0,d0
0000CE94 1028 0024                  		move.b	$24(a0),d0
0000CE98 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CE9C 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CEA0                            ; ===========================================================================
0000CEA0 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CEA2 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CEA4 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CEA6 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CEA8                            ; ===========================================================================
0000CEA8                            
0000CEA8                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CEA8 2248                       		movea.l	a0,a1
0000CEAA 7000                       		moveq	#0,d0
0000CEAC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CEB0 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CEB6 6600                       		bne.s	Obj34_CheckFZ
0000CEB8 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CEBA                            
0000CEBA                            Obj34_CheckFZ:
0000CEBA 3400                       		move.w	d0,d2
0000CEBC 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CEC2 6600                       		bne.s	Obj34_LoadConfig
0000CEC4 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CEC6 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CEC8                            
0000CEC8                            Obj34_LoadConfig:
0000CEC8 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CECE E948                       		lsl.w	#4,d0
0000CED0 D6C0                       		adda.w	d0,a3
0000CED2 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CED8 7203                       		moveq	#3,d1
0000CEDA                            
0000CEDA                            Obj34_Loop:
0000CEDA 12BC 0034                  		move.b	#$34,0(a1)
0000CEDE 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CEE2 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CEE6 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CEEA 335A 000A                  		move.w	(a2)+,$A(a1)
0000CEEE 135A 0024                  		move.b	(a2)+,$24(a1)
0000CEF2 101A                       		move.b	(a2)+,d0
0000CEF4 6600                       		bne.s	Obj34_ActNumber
0000CEF6 1002                       		move.b	d2,d0
0000CEF8                            
0000CEF8                            Obj34_ActNumber:
0000CEF8 0C00 0007                  		cmpi.b	#7,d0
0000CEFC 6600                       		bne.s	Obj34_MakeSprite
0000CEFE D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CF02 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CF08 6600                       		bne.s	Obj34_MakeSprite
0000CF0A 5300                       		subq.b	#1,d0
0000CF0C                            
0000CF0C                            Obj34_MakeSprite:
0000CF0C 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CF10 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CF18 337C 8580 0002             		move.w	#$8580,2(a1)
0000CF1E 137C 0078 0019             		move.b	#$78,$19(a1)
0000CF24 137C 0000 0001             		move.b	#0,1(a1)
0000CF2A 137C 0000 0018             		move.b	#0,$18(a1)
0000CF30 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CF36 43E9 0040                  		lea	$40(a1),a1	; next object
0000CF3A 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CF3E                            
0000CF3E                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CF3E 7210                       		moveq	#$10,d1		; set horizontal speed
0000CF40 3028 0030                  		move.w	$30(a0),d0
0000CF44 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CF48 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CF4A 6C00                       		bge.s	Obj34_Move
0000CF4C 4441                       		neg.w	d1
0000CF4E                            
0000CF4E                            Obj34_Move:
0000CF4E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CF52                            
0000CF52                            loc_C3C8:
0000CF52 3028 0008                  		move.w	8(a0),d0
0000CF56 6B00                       		bmi.s	locret_C3D8
0000CF58 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF5C 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CF5E 6000 0000                  		bra.w	DisplaySprite
0000CF62                            ; ===========================================================================
0000CF62                            
0000CF62                            locret_C3D8:
0000CF62 4E75                       		rts	
0000CF64                            ; ===========================================================================
0000CF64                            
0000CF64                            Obj34_Wait:				; XREF: Obj34_Index
0000CF64 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CF68 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CF6A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CF6E 6000 0000                  		bra.w	DisplaySprite
0000CF72                            ; ===========================================================================
0000CF72                            
0000CF72                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CF72 4A28 0001                  		tst.b	1(a0)
0000CF76 6A00                       		bpl.s	Obj34_ChangeArt
0000CF78 7220                       		moveq	#$20,d1
0000CF7A 3028 0032                  		move.w	$32(a0),d0
0000CF7E B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CF82 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CF84 6C00                       		bge.s	Obj34_Move2
0000CF86 4441                       		neg.w	d1
0000CF88                            
0000CF88                            Obj34_Move2:
0000CF88 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CF8C 3028 0008                  		move.w	8(a0),d0
0000CF90 6B00                       		bmi.s	locret_C412
0000CF92 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF96 6400                       		bcc.s	locret_C412	; if yes, branch
0000CF98 6000 0000                  		bra.w	DisplaySprite
0000CF9C                            ; ===========================================================================
0000CF9C                            
0000CF9C                            locret_C412:
0000CF9C 4E75                       		rts	
0000CF9E                            ; ===========================================================================
0000CF9E                            
0000CF9E                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CF9E 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CFA4 6600                       		bne.s	Obj34_Delete
0000CFA6 7002                       		moveq	#2,d0
0000CFA8 4EB9 0000 17D0             		jsr	(LoadPLC).l	; load explosion patterns
0000CFAE 7000                       		moveq	#0,d0
0000CFB0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CFB4 103B 0000                  		move.b	Obj34_AnimalPLC(pc,d0.w),d0
0000CFB8 4EB9 0000 17D0             		jsr	(LoadPLC).l	; load animal patterns
0000CFBE                            
0000CFBE                            Obj34_Delete:
0000CFBE 6000 0000                  		bra.w	DeleteObject
0000CFC2                            
0000CFC2                            ; ===========================================================================
0000CFC2                            Obj34_AnimalPLC:
0000CFC2 15                         		dc.b $15	; "GHZ"
0000CFC3 16                         		dc.b $16
0000CFC4 17                         		dc.b $17
0000CFC5 18                         		dc.b $18
0000CFC6 19                         		dc.b $19
0000CFC7 1A                         		dc.b $1A	; "SBZ"
0000CFC8 15                         		dc.b $15	; Ending (placeholder?
0000CFC9 1A                         		dc.b $1A	; MAKOTO
0000CFCA                            	even
0000CFCA 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CFCC 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CFCE 00E4                       		dc.w $E4
0000CFD0 0206                       		dc.b 2,	6
0000CFD2 00EA                       		dc.w $EA
0000CFD4 0207                       		dc.b 2,	7
0000CFD6 00E0                       		dc.w $E0
0000CFD8 020A                       		dc.b 2,	$A
0000CFDA                            ; ---------------------------------------------------------------------------
0000CFDA                            ; Title	card configuration data
0000CFDA                            ; Format:
0000CFDA                            ; 4 bytes per item (YYYY XXXX)
0000CFDA                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CFDA                            ; ---------------------------------------------------------------------------
0000CFDA 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CFEA 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CFFA 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000D00A 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000D01A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000D02A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000D03A 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000D04A 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D05A 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D06A                            ; ===========================================================================
0000D06A                            ; ---------------------------------------------------------------------------
0000D06A                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000D06A                            ; ---------------------------------------------------------------------------
0000D06A                            
0000D06A                            Obj39:					; XREF: Obj_Index
0000D06A 7000                       		moveq	#0,d0
0000D06C 1028 0024                  		move.b	$24(a0),d0
0000D070 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000D074 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000D078                            ; ===========================================================================
0000D078 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000D07A 0000                       		dc.w loc_C50C-Obj39_Index
0000D07C 0000                       		dc.w Obj39_Wait-Obj39_Index
0000D07E                            ; ===========================================================================
0000D07E                            
0000D07E                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000D07E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D082 6700                       		beq.s	Obj39_Main	; if yes, branch
0000D084 4E75                       		rts	
0000D086                            ; ===========================================================================
0000D086                            
0000D086                            Obj39_Main:
0000D086 5428 0024                  		addq.b	#2,$24(a0)
0000D08A 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000D090 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000D096 6700                       		beq.s	loc_C4EC	; if not, branch
0000D098 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000D09E                            
0000D09E                            loc_C4EC:
0000D09E 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000D0A4 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000D0AC 317C 855E 0002             		move.w	#$855E,2(a0)
0000D0B2 117C 0000 0001             		move.b	#0,1(a0)
0000D0B8 117C 0000 0018             		move.b	#0,$18(a0)
0000D0BE                            
0000D0BE                            loc_C50C:				; XREF: Obj39_Index
0000D0BE 7210                       		moveq	#$10,d1		; set horizontal speed
0000D0C0 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000D0C6 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000D0C8 6500                       		bcs.s	Obj39_Move
0000D0CA 4441                       		neg.w	d1
0000D0CC                            
0000D0CC                            Obj39_Move:
0000D0CC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D0D0 6000 0000                  		bra.w	DisplaySprite
0000D0D4                            ; ===========================================================================
0000D0D4                            
0000D0D4                            Obj39_SetWait:				; XREF: Obj39_Main
0000D0D4 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000D0DA 5428 0024                  		addq.b	#2,$24(a0)
0000D0DE 4E75                       		rts	
0000D0E0                            ; ===========================================================================
0000D0E0                            
0000D0E0                            Obj39_Wait:				; XREF: Obj39_Index
0000D0E0 1038 F605                  		move.b	($FFFFF605).w,d0
0000D0E4 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D0E8 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D0EA 0828 0000 001A             		btst	#0,$1A(a0)
0000D0F0 6600                       		bne.s	Obj39_Display
0000D0F2 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D0F6 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D0F8 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D0FC 6000 0000                  		bra.w	DisplaySprite
0000D100                            ; ===========================================================================
0000D100                            
0000D100                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D100 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D104 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D106 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D10C 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D110 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D112 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D118 6000                       		bra.s	Obj39_Display
0000D11A                            ; ===========================================================================
0000D11A                            
0000D11A                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D11A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D120                            
0000D120                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D120 6000 0000                  		bra.w	DisplaySprite
0000D124                            ; ===========================================================================
0000D124                            ; ---------------------------------------------------------------------------
0000D124                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D124                            ; ---------------------------------------------------------------------------
0000D124                            
0000D124                            Obj3A:					; XREF: Obj_Index
0000D124 7000                       		moveq	#0,d0
0000D126 1028 0024                  		move.b	$24(a0),d0
0000D12A 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D12E 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D132                            ; ===========================================================================
0000D132 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D134 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D136 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D138 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D13A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D13C 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D13E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D140 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D142 0000                       		dc.w loc_C766-Obj3A_Index
0000D144                            ; ===========================================================================
0000D144                            
0000D144                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D144 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D148 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D14A 4E75                       		rts	
0000D14C                            ; ===========================================================================
0000D14C                            
0000D14C                            Obj3A_Main:
0000D14C 2248                       		movea.l	a0,a1
0000D14E 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D154 7206                       		moveq	#6,d1
0000D156                            
0000D156                            Obj3A_Loop:
0000D156 12BC 003A                  		move.b	#$3A,0(a1)
0000D15A 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D15E 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D162 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D166 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D16A 135A 0024                  		move.b	(a2)+,$24(a1)
0000D16E 101A                       		move.b	(a2)+,d0
0000D170 0C00 0006                  		cmpi.b	#6,d0
0000D174 6600                       		bne.s	loc_C5CA
0000D176 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D17A                            
0000D17A                            loc_C5CA:
0000D17A 1340 001A                  		move.b	d0,$1A(a1)
0000D17E 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D186 337C 8580 0002             		move.w	#$8580,2(a1)
0000D18C 137C 0000 0001             		move.b	#0,1(a1)
0000D192 43E9 0040                  		lea	$40(a1),a1
0000D196 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D19A                            
0000D19A                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D19A 7210                       		moveq	#$10,d1		; set horizontal speed
0000D19C 3028 0030                  		move.w	$30(a0),d0
0000D1A0 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D1A4 6700                       		beq.s	loc_C61A	; if yes, branch
0000D1A6 6C00                       		bge.s	Obj3A_Move
0000D1A8 4441                       		neg.w	d1
0000D1AA                            
0000D1AA                            Obj3A_Move:
0000D1AA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D1AE                            
0000D1AE                            loc_C5FE:				; XREF: loc_C61A
0000D1AE 3028 0008                  		move.w	8(a0),d0
0000D1B2 6B00                       		bmi.s	locret_C60E
0000D1B4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D1B8 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D1BA 6000 0000                  		bra.w	DisplaySprite
0000D1BE                            ; ===========================================================================
0000D1BE                            
0000D1BE                            locret_C60E:
0000D1BE 4E75                       		rts	
0000D1C0                            ; ===========================================================================
0000D1C0                            
0000D1C0                            loc_C610:				; XREF: loc_C61A
0000D1C0 117C 000E 0024             		move.b	#$E,$24(a0)
0000D1C6 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D1CA                            ; ===========================================================================
0000D1CA                            
0000D1CA                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D1CA 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D1D0 67EE                       		beq.s	loc_C610
0000D1D2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D1D8 66D4                       		bne.s	loc_C5FE
0000D1DA 5428 0024                  		addq.b	#2,$24(a0)
0000D1DE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D1E4                            
0000D1E4                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D1E4 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D1E8 6600                       		bne.s	Obj3A_Display
0000D1EA 5428 0024                  		addq.b	#2,$24(a0)
0000D1EE                            
0000D1EE                            Obj3A_Display:
0000D1EE 6000 0000                  		bra.w	DisplaySprite
0000D1F2                            ; ===========================================================================
0000D1F2                            
0000D1F2                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D1F2 6100 0000                  		bsr.w	DisplaySprite
0000D1F6 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D1FC 7000                       		moveq	#0,d0
0000D1FE 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D202 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D204 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D208 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D20E                            
0000D20E                            Obj3A_RingBonus:
0000D20E 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D212 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D214 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D218 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D21E                            
0000D21E                            Obj3A_ChkBonus:
0000D21E 4A40                       		tst.w	d0		; is there any bonus?
0000D220 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D222 303C 00C5                  		move.w	#$C5,d0
0000D226 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D22C 5428 0024                  		addq.b	#2,$24(a0)
0000D230 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D236 6600                       		bne.s	Obj3A_SetDelay
0000D238 5828 0024                  		addq.b	#4,$24(a0)
0000D23C                            
0000D23C                            Obj3A_SetDelay:
0000D23C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D242                            
0000D242                            locret_C692:
0000D242 4E75                       		rts	
0000D244                            ; ===========================================================================
0000D244                            
0000D244                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D244 4EB9 0000 0000             		jsr	AddPoints
0000D24A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D24E 0200 0003                  		andi.b	#3,d0
0000D252 66EE                       		bne.s	locret_C692
0000D254 303C 00CD                  		move.w	#$CD,d0
0000D258 4EF9 0000 15EC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D25E                            ; ===========================================================================
0000D25E                            
0000D25E                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D25E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D262 0240 0007                  		andi.w	#7,d0
0000D266 E748                       		lsl.w	#3,d0
0000D268 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D26C 0241 0003                  		andi.w	#3,d1
0000D270 D241                       		add.w	d1,d1
0000D272 D041                       		add.w	d1,d0
0000D274 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D278 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D27C 4A40                       		tst.w	d0
0000D27E 6600                       		bne.s	Obj3A_ChkSS
0000D280 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D286 6000                       		bra.s	Obj3A_Display2
0000D288                            ; ===========================================================================
0000D288                            
0000D288                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D288 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D28C 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D290 6700                       		beq.s	loc_C6EA	; if not, branch
0000D292 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D298 6000                       		bra.s	Obj3A_Display2
0000D29A                            ; ===========================================================================
0000D29A                            
0000D29A                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D29A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D2A0                            
0000D2A0                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D2A0 6000 0000                  		bra.w	DisplaySprite
0000D2A4                            ; ===========================================================================
0000D2A4                            ; ---------------------------------------------------------------------------
0000D2A4                            ; Level	order array
0000D2A4                            ; ---------------------------------------------------------------------------
0000D2A4                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D2DC                            		even
0000D2DC                            ; ===========================================================================
0000D2DC                            
0000D2DC                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D2DC 7220                       		moveq	#$20,d1		; set horizontal speed
0000D2DE 3028 0032                  		move.w	$32(a0),d0
0000D2E2 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D2E6 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D2E8 6C00                       		bge.s	Obj3A_Move2
0000D2EA 4441                       		neg.w	d1
0000D2EC                            
0000D2EC                            Obj3A_Move2:
0000D2EC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D2F0 3028 0008                  		move.w	8(a0),d0
0000D2F4 6B00                       		bmi.s	locret_C748
0000D2F6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D2FA 6400                       		bcc.s	locret_C748	; if yes, branch
0000D2FC 6000 0000                  		bra.w	DisplaySprite
0000D300                            ; ===========================================================================
0000D300                            
0000D300                            locret_C748:
0000D300 4E75                       		rts	
0000D302                            ; ===========================================================================
0000D302                            
0000D302                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D302 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D308 6600 0000                  		bne.w	DeleteObject
0000D30C 5428 0024                  		addq.b	#2,$24(a0)
0000D310 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D314 303C 008D                  		move.w	#$8D,d0
0000D318 4EF9 0000 15E6             		jmp	(PlaySound).l	; play FZ music
0000D31E                            ; ===========================================================================
0000D31E                            
0000D31E                            loc_C766:				; XREF: Obj3A_Index
0000D31E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D322 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D328 6700 0000                  		beq.w	DeleteObject
0000D32C 4E75                       		rts	
0000D32E                            ; ===========================================================================
0000D32E 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D334 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D336 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D33C 0201                       		dc.b 2,	1
0000D33E 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D344 0206                       		dc.b 2,	6
0000D346 0520 0120 00EC             		dc.w $520, $120, $EC
0000D34C 0202                       		dc.b 2,	2
0000D34E 0540 0120 00FC             		dc.w $540, $120, $FC
0000D354 0203                       		dc.b 2,	3
0000D356 0560 0120 010C             		dc.w $560, $120, $10C
0000D35C 0204                       		dc.b 2,	4
0000D35E 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D364 0205                       		dc.b 2,	5
0000D366                            ; ===========================================================================
0000D366                            ; ---------------------------------------------------------------------------
0000D366                            ; Object 7E - special stage results screen
0000D366                            ; ---------------------------------------------------------------------------
0000D366                            
0000D366                            Obj7E:					; XREF: Obj_Index
0000D366 7000                       		moveq	#0,d0
0000D368 1028 0024                  		move.b	$24(a0),d0
0000D36C 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D370 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D374                            ; ===========================================================================
0000D374 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D376 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D378 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D37A 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D37C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D37E 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D380 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D382 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D384 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D386 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D388 0000                       		dc.w loc_C91A-Obj7E_Index
0000D38A                            ; ===========================================================================
0000D38A                            
0000D38A                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D38A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D38E 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D390 4E75                       		rts	
0000D392                            ; ===========================================================================
0000D392                            
0000D392                            Obj7E_Main:
0000D392 2248                       		movea.l	a0,a1
0000D394 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D39A 7203                       		moveq	#3,d1
0000D39C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D3A2 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D3A4 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D3A6                            
0000D3A6                            Obj7E_Loop:
0000D3A6 12BC 007E                  		move.b	#$7E,0(a1)
0000D3AA 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D3AE 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D3B2 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D3B6 135A 0024                  		move.b	(a2)+,$24(a1)
0000D3BA 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D3BE 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D3C6 337C 8580 0002             		move.w	#$8580,2(a1)
0000D3CC 137C 0000 0001             		move.b	#0,1(a1)
0000D3D2 43E9 0040                  		lea	$40(a1),a1
0000D3D6 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D3DA                            
0000D3DA 7007                       		moveq	#7,d0
0000D3DC 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D3E0 6700                       		beq.s	loc_C842
0000D3E2 7000                       		moveq	#0,d0
0000D3E4 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D3E8 6600                       		bne.s	loc_C842	; if not, branch
0000D3EA 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D3EC 317C 0018 0008             		move.w	#$18,8(a0)
0000D3F2 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D3F8                            
0000D3F8                            loc_C842:
0000D3F8 1140 001A                  		move.b	d0,$1A(a0)
0000D3FC                            
0000D3FC                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D3FC 7210                       		moveq	#$10,d1		; set horizontal speed
0000D3FE 3028 0030                  		move.w	$30(a0),d0
0000D402 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D406 6700                       		beq.s	loc_C86C	; if yes, branch
0000D408 6C00                       		bge.s	Obj7E_Move
0000D40A 4441                       		neg.w	d1
0000D40C                            
0000D40C                            Obj7E_Move:
0000D40C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D410                            
0000D410                            loc_C85A:				; XREF: loc_C86C
0000D410 3028 0008                  		move.w	8(a0),d0
0000D414 6B00                       		bmi.s	locret_C86A
0000D416 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D41A 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D41C 6000 0000                  		bra.w	DisplaySprite
0000D420                            ; ===========================================================================
0000D420                            
0000D420                            locret_C86A:
0000D420 4E75                       		rts	
0000D422                            ; ===========================================================================
0000D422                            
0000D422                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D422 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D428 66E6                       		bne.s	loc_C85A
0000D42A 5428 0024                  		addq.b	#2,$24(a0)
0000D42E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D434 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D43A                            
0000D43A                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D43A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D43E 6600                       		bne.s	Obj7E_Display
0000D440 5428 0024                  		addq.b	#2,$24(a0)
0000D444                            
0000D444                            Obj7E_Display:
0000D444 6000 0000                  		bra.w	DisplaySprite
0000D448                            ; ===========================================================================
0000D448                            
0000D448                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D448 6100 0000                  		bsr.w	DisplaySprite
0000D44C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D452 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D456 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D458 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D45E 700A                       		moveq	#10,d0		; add 10 to score
0000D460 4EB9 0000 0000             		jsr	AddPoints
0000D466 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D46A 0200 0003                  		andi.b	#3,d0
0000D46E 6600                       		bne.s	locret_C8EA
0000D470 303C 00CD                  		move.w	#$CD,d0
0000D474 4EF9 0000 15EC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D47A                            ; ===========================================================================
0000D47A                            
0000D47A                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D47A 303C 00C5                  		move.w	#$C5,d0
0000D47E 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D484 5428 0024                  		addq.b	#2,$24(a0)
0000D488 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D48E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D494 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D496 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D49C 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D4A0                            
0000D4A0                            locret_C8EA:
0000D4A0 4E75                       		rts	
0000D4A2                            ; ===========================================================================
0000D4A2                            
0000D4A2                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D4A2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D4A8 6000 0000                  		bra.w	DisplaySprite
0000D4AC                            ; ===========================================================================
0000D4AC                            
0000D4AC                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D4AC 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D4B2 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D4B8 303C 00BF                  		move.w	#$BF,d0
0000D4BC 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play continues music
0000D4C2 5428 0024                  		addq.b	#2,$24(a0)
0000D4C6 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D4CC 6000 0000                  		bra.w	DisplaySprite
0000D4D0                            ; ===========================================================================
0000D4D0                            
0000D4D0                            loc_C91A:				; XREF: Obj7E_Index
0000D4D0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D4D4 0200 000F                  		andi.b	#$F,d0
0000D4D8 6600                       		bne.s	Obj7E_Display2
0000D4DA 0868 0000 001A             		bchg	#0,$1A(a0)
0000D4E0                            
0000D4E0                            Obj7E_Display2:
0000D4E0 6000 0000                  		bra.w	DisplaySprite
0000D4E4                            ; ===========================================================================
0000D4E4 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D4EA 0200                       		dc.b 2,	0		; rountine number, frame number
0000D4EC 0320 0120 0118             		dc.w $320, $120, $118
0000D4F2 0201                       		dc.b 2,	1
0000D4F4 0360 0120 0128             		dc.w $360, $120, $128
0000D4FA 0202                       		dc.b 2,	2
0000D4FC 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D502 0203                       		dc.b 2,	3
0000D504 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D50A 0206                       		dc.b 2,	6
0000D50C                            ; ===========================================================================
0000D50C                            ; ---------------------------------------------------------------------------
0000D50C                            ; Object 7F - chaos emeralds from the special stage results screen
0000D50C                            ; ---------------------------------------------------------------------------
0000D50C                            
0000D50C                            Obj7F:					; XREF: Obj_Index
0000D50C 7000                       		moveq	#0,d0
0000D50E 1028 0024                  		move.b	$24(a0),d0
0000D512 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D516 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D51A                            ; ===========================================================================
0000D51A 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D51C 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D51E                            
0000D51E                            ; ---------------------------------------------------------------------------
0000D51E                            ; X-axis positions for chaos emeralds
0000D51E                            ; ---------------------------------------------------------------------------
0000D51E 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D52A                            ; ===========================================================================
0000D52A                            
0000D52A                            Obj7F_Main:				; XREF: Obj7F_Index
0000D52A 2248                       		movea.l	a0,a1
0000D52C 45F9 0000 D51E             		lea	(Obj7F_PosData).l,a2
0000D532 7400                       		moveq	#0,d2
0000D534 7200                       		moveq	#0,d1
0000D536 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D53A 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D53C 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D540                            
0000D540                            Obj7F_Loop:
0000D540 12BC 007F                  		move.b	#$7F,0(a1)
0000D544 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D548 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D54E 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D552 1633 2000                  		move.b	(a3,d2.w),d3
0000D556 1343 001A                  		move.b	d3,$1A(a1)
0000D55A 1343 001C                  		move.b	d3,$1C(a1)
0000D55E 5202                       		addq.b	#1,d2
0000D560 5429 0024                  		addq.b	#2,$24(a1)
0000D564 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D56C 337C 8541 0002             		move.w	#$8541,2(a1)
0000D572 137C 0000 0001             		move.b	#0,1(a1)
0000D578 43E9 0040                  		lea	$40(a1),a1	; next object
0000D57C 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D580                            
0000D580                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D580 1028 001A                  		move.b	$1A(a0),d0
0000D584 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D58A 0C00 0006                  		cmpi.b	#6,d0
0000D58E 6600                       		bne.s	Obj7F_Display
0000D590 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D596                            
0000D596                            Obj7F_Display:
0000D596 6000 0000                  		bra.w	DisplaySprite
0000D59A                            ; ===========================================================================
0000D59A                            ; ---------------------------------------------------------------------------
0000D59A                            ; Sprite mappings - zone title cards
0000D59A                            ; ---------------------------------------------------------------------------
0000D59A                            Map_obj34:
0000D59A                                    include "_maps\obj34.asm"
0000D59A                            Map_c5df:
0000D59A 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000D59C 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000D59E 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000D5A0 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000D5A2 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000D5A4 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000D5A6 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000D5A8 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000D5AA 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000D5AC 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000D5AE 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000D5B0 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000D5B2 0C                         Map_c5df_18: 	dc.b $C
0000D5B3 F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000D5B8 F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000D5BD F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000D5C2 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000D5C7 F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000D5CC F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000D5D1 F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000D5D6 F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000D5DB F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000D5E0 F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000D5E5 F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000D5EA F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000D5EF 16                         Map_c5df_55: 	dc.b $16
0000D5F0 F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000D5F5 F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000D5FA F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000D5FF F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000D604 F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000D609 F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000D60E F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D613 F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000D618 F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000D61D F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000D622 F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000D627 F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000D62C F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000D631 F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000D636 F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000D63B F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000D640 F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000D645 F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000D64A F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000D64F F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000D654 F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000D659 F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000D65E 05                         Map_c5df_C4: 	dc.b $5
0000D65F F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000D664 F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000D669 F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000D66E F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000D673 F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000D678 11                         Map_c5df_DE: 	dc.b $11
0000D679 F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000D67E F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000D683 F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000D688 F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000D68D F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000D692 F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000D697 F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000D69C F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000D6A1 F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000D6A6 F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000D6AB F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000D6B0 F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000D6B5 F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000D6BA F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000D6BF F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000D6C4 F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000D6C9 F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000D6CE 15                         Map_c5df_134: 	dc.b $15
0000D6CF F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000D6D4 F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000D6D9 F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000D6DE F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D6E3 F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000D6E8 F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000D6ED F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000D6F2 F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000D6F7 F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000D6FC F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000D701 F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000D706 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000D70B F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000D710 F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000D715 F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000D71A F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000D71F F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000D724 F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000D729 F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000D72E F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000D733 F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000D738 07                         Map_c5df_19E: 	dc.b $7
0000D739 F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000D73E F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000D743 F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000D748 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D74D F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000D752 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D757 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D75C 04                         Map_c5df_1C2: 	dc.b $4
0000D75D F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D762 F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000D767 F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000D76C F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000D771 02                         Map_c5df_1D7: 	dc.b $2
0000D772 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D777 F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000D77C 02                         Map_c5df_1E2: 	dc.b $2
0000D77D 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D782 F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000D787 02                         Map_c5df_1ED: 	dc.b $2
0000D788 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D78D F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000D792 0D                         Map_c5df_1F8: 	dc.b $D
0000D793 E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000D798 E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000D79D EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000D7A2 F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000D7A7 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000D7AC 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000D7B1 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000D7B6 FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000D7BB EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000D7C0 F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000D7C5 FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000D7CA 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000D7CF 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000D7D4 05                         Map_c5df_23A: 	dc.b $5
0000D7D5 F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000D7DA F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000D7DF F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000D7E4 F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000D7E9 F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000D7EE                            	even
0000D7EE                            	even
0000D7EE                            ; ---------------------------------------------------------------------------
0000D7EE                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D7EE                            ; ---------------------------------------------------------------------------
0000D7EE                            Map_obj39:
0000D7EE                            	include "_maps\obj39.asm"
0000D7EE                            ; ---------------------------------------------------------------------------
0000D7EE                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D7EE                            ; ---------------------------------------------------------------------------
0000D7EE 0000                       		dc.w byte_CBAC-Map_obj39
0000D7F0 0000                       		dc.w byte_CBB7-Map_obj39
0000D7F2 0000                       		dc.w byte_CBC2-Map_obj39
0000D7F4 0000                       		dc.w byte_CBCD-Map_obj39
0000D7F6 02                         byte_CBAC:	dc.b 2
0000D7F7 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D7FC F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D801 02                         byte_CBB7:	dc.b 2
0000D802 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D807 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D80C 02                         byte_CBC2:	dc.b 2
0000D80D F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D812 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D817 02                         byte_CBCD:	dc.b 2
0000D818 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D81D F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D822                            		even
0000D822                            		even
0000D822                            
0000D822                            ; ---------------------------------------------------------------------------
0000D822                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D822                            ; ---------------------------------------------------------------------------
0000D822 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D824 0000                       		dc.w byte_CC13-Map_obj3A
0000D826 0000                       		dc.w byte_CC32-Map_obj3A
0000D828 0000                       		dc.w byte_CC51-Map_obj3A
0000D82A 0000                       		dc.w byte_CC75-Map_obj3A
0000D82C                            		;dc.w byte_CB47-Map_obj3A
0000D82C                            		;dc.w byte_CB26-Map_obj3A
0000D82C                            		;dc.w byte_CB31-Map_obj3A
0000D82C                            		;dc.w byte_CB3C-Map_obj3A
0000D82C 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D82D F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D832 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D837 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D83C F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D841 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D846 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D84B F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D850 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D855 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D85A F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D85F F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D864 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D869 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D86E F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D873 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D878 06                         byte_CC13:	dc.b 6			; PASSED
0000D879 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D87E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D883 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D888 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D88D F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D892 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D897 06                         byte_CC32:	dc.b 6			; SCORE
0000D898 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D89D F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D8A2 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D8A7 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D8AC F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D8B1 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D8B6 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D8B7 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D8BC F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D8C1 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D8C6 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D8CB FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D8D0 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D8D5 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D8DA 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D8DB F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D8E0 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D8E5 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D8EA F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D8EF FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D8F4 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D8F9 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D8FE                            		even
0000D8FE                            ; ---------------------------------------------------------------------------
0000D8FE                            ; Sprite mappings - special stage results screen
0000D8FE                            ; ---------------------------------------------------------------------------
0000D8FE 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D900 0000                       		dc.w byte_CCEE-Map_obj7E
0000D902 0000                       		dc.w byte_CD0D-Map_obj7E
0000D904                            		;dc.w byte_CB47-Map_obj7E
0000D904 0000                       		dc.w byte_CD31-Map_obj7E
0000D906 0000                       		dc.w byte_CD46-Map_obj7E
0000D908 0000                       		dc.w byte_CD5B-Map_obj7E
0000D90A 0000                       		dc.w byte_CD6B-Map_obj7E
0000D90C 0000                       		dc.w byte_CDA8-Map_obj7E
0000D90E 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D90F F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D914 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D919 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D91E F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D923 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D928 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D92D F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D932 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D937 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D93C F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D941 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D946 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D94B F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D950 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D951 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D956 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D95B F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D960 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D965 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D96A FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D96F 07                         byte_CD0D:	dc.b 7
0000D970 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D975 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D97A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D97F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D984 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D989 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D98E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D993 04                         byte_CD31:	dc.b 4
0000D994 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D999 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D99E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D9A3 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D9A8 04                         byte_CD46:	dc.b 4
0000D9A9 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D9AE F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D9B3 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D9B8 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D9BD 03                         byte_CD5B:	dc.b 3
0000D9BE F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D9C3 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D9C8 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D9CD 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D9CE F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D9D3 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D9D8 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D9DD F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D9E2 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D9E7 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D9EC F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D9F1 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D9F6 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D9FB F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000DA00 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000DA05 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000DA0A 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000DA0B F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000DA10 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000DA15 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000DA1A F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000DA1F F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000DA24 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000DA29 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000DA2E F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000DA33 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000DA38 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000DA3D F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000DA42 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000DA47 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000DA4C F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000DA51 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000DA56                            		even
0000DA56                            ; ---------------------------------------------------------------------------
0000DA56                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DA56                            ; ---------------------------------------------------------------------------
0000DA56                            Map_obj7F:
0000DA56                            	include "_maps\obj7F.asm"
0000DA56                            ; ---------------------------------------------------------------------------
0000DA56                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DA56                            ; ---------------------------------------------------------------------------
0000DA56 0000                       		dc.w byte_CE02-Map_obj7F
0000DA58 0000                       		dc.w byte_CE08-Map_obj7F
0000DA5A 0000                       		dc.w byte_CE0E-Map_obj7F
0000DA5C 0000                       		dc.w byte_CE14-Map_obj7F
0000DA5E 0000                       		dc.w byte_CE1A-Map_obj7F
0000DA60 0000                       		dc.w byte_CE20-Map_obj7F
0000DA62 0000                       		dc.w byte_CE26-Map_obj7F
0000DA64 01                         byte_CE02:	dc.b 1
0000DA65 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000DA6A 01                         byte_CE08:	dc.b 1
0000DA6B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DA70 01                         byte_CE0E:	dc.b 1
0000DA71 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000DA76 01                         byte_CE14:	dc.b 1
0000DA77 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000DA7C 01                         byte_CE1A:	dc.b 1
0000DA7D F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000DA82 01                         byte_CE20:	dc.b 1
0000DA83 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000DA88 00                         byte_CE26:	dc.b 0			; Blank frame
0000DA8A 00                         		even
0000DA8A 00                         		even
0000DA8A                            
0000DA8A                            ; ===========================================================================
0000DA8A                            ; ---------------------------------------------------------------------------
0000DA8A                            ; Object 36 - spikes
0000DA8A                            ; ---------------------------------------------------------------------------
0000DA8A                            
0000DA8A                            Obj36:					; XREF: Obj_Index
0000DA8A 7000                       		moveq	#0,d0
0000DA8C 1028 0024                  		move.b	$24(a0),d0
0000DA90 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000DA94 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000DA98                            ; ===========================================================================
0000DA98 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000DA9A 0000                       		dc.w Obj36_Solid-Obj36_Index
0000DA9C                            
0000DA9C 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000DA9E 0110                       		dc.b 1,	$10
0000DAA0 0204                       		dc.b 2,	4
0000DAA2 031C                       		dc.b 3,	$1C
0000DAA4 0440                       		dc.b 4,	$40
0000DAA6 0510                       		dc.b 5,	$10
0000DAA8                            ; ===========================================================================
0000DAA8                            
0000DAA8                            Obj36_Main:				; XREF: Obj36_Index
0000DAA8 5428 0024                  		addq.b	#2,$24(a0)
0000DAAC 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000DAB4 317C 051B 0002             		move.w	#$51B,2(a0)
0000DABA 0028 0004 0001             		ori.b	#4,1(a0)
0000DAC0 117C 0004 0018             		move.b	#4,$18(a0)
0000DAC6 1028 0028                  		move.b	$28(a0),d0
0000DACA 0228 000F 0028             		andi.b	#$F,$28(a0)
0000DAD0 0240 00F0                  		andi.w	#$F0,d0
0000DAD4 43F9 0000 DA9C             		lea	(Obj36_Var).l,a1
0000DADA E648                       		lsr.w	#3,d0
0000DADC D2C0                       		adda.w	d0,a1
0000DADE 1159 001A                  		move.b	(a1)+,$1A(a0)
0000DAE2 1159 0019                  		move.b	(a1)+,$19(a0)
0000DAE6 3168 0008 0030             		move.w	8(a0),$30(a0)
0000DAEC 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000DAF2                            
0000DAF2                            Obj36_Solid:				; XREF: Obj36_Index
0000DAF2 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000DAF6 343C 0004                  		move.w	#4,d2
0000DAFA 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000DB00 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000DB02 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000DB08 6600                       		bne.s	Obj36_Upright	; if not, branch
0000DB0A 343C 0014                  		move.w	#$14,d2
0000DB0E                            
0000DB0E                            ; Spikes types $1x and $5x face	sideways
0000DB0E                            
0000DB0E                            Obj36_SideWays:				; XREF: Obj36_Solid
0000DB0E 323C 001B                  		move.w	#$1B,d1
0000DB12 3602                       		move.w	d2,d3
0000DB14 5243                       		addq.w	#1,d3
0000DB16 3828 0008                  		move.w	8(a0),d4
0000DB1A 6100 0000                  		bsr.w	SolidObject
0000DB1E 0828 0003 0022             		btst	#3,$22(a0)
0000DB24 6600                       		bne.s	Obj36_Display
0000DB26 0C44 0001                  		cmpi.w	#1,d4
0000DB2A 6700                       		beq.s	Obj36_Hurt
0000DB2C 6000                       		bra.s	Obj36_Display
0000DB2E                            ; ===========================================================================
0000DB2E                            
0000DB2E                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000DB2E                            
0000DB2E                            Obj36_Upright:				; XREF: Obj36_Solid
0000DB2E 7200                       		moveq	#0,d1
0000DB30 1228 0019                  		move.b	$19(a0),d1
0000DB34 0641 000B                  		addi.w	#$B,d1
0000DB38 343C 0010                  		move.w	#$10,d2
0000DB3C 363C 0011                  		move.w	#$11,d3
0000DB40 3828 0008                  		move.w	8(a0),d4
0000DB44 6100 0000                  		bsr.w	SolidObject
0000DB48 0828 0003 0022             		btst	#3,$22(a0)
0000DB4E 6600                       		bne.s	Obj36_Hurt
0000DB50 4A44                       		tst.w	d4
0000DB52 6A00                       		bpl.s	Obj36_Display
0000DB54                            
0000DB54                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000DB54 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000DB58 6600                       		bne.s	Obj36_Display	; if yes, branch
0000DB5A 2F08                       		move.l	a0,-(sp)
0000DB5C 2448                       		movea.l	a0,a2
0000DB5E 41F8 D000                  		lea	($FFFFD000).w,a0
0000DB62 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000DB68 6400                       		bcc.s	loc_CF20
0000DB6A 2628 000C                  		move.l	$C(a0),d3
0000DB6E 3028 0012                  		move.w	$12(a0),d0
0000DB72 48C0                       		ext.l	d0
0000DB74 E180                       		asl.l	#8,d0
0000DB76 9680                       		sub.l	d0,d3
0000DB78 2143 000C                  		move.l	d3,$C(a0)
0000DB7C 4EB9 0000 0000             		jsr	HurtSonic
0000DB82                            
0000DB82                            loc_CF20:
0000DB82 205F                       		movea.l	(sp)+,a0
0000DB84                            
0000DB84                            Obj36_Display:
0000DB84 6100 0000                  		bsr.w	DisplaySprite
0000DB88 3028 0030                  		move.w	$30(a0),d0
0000DB8C 0240 FF80                  		andi.w	#$FF80,d0
0000DB90 3238 F700                  		move.w	($FFFFF700).w,d1
0000DB94 0441 0080                  		subi.w	#$80,d1
0000DB98 0241 FF80                  		andi.w	#$FF80,d1
0000DB9C 9041                       		sub.w	d1,d0
0000DB9E 0C40 0280                  		cmpi.w	#$280,d0
0000DBA2 6200 0000                  		bhi.w	DeleteObject
0000DBA6 4E75                       		rts	
0000DBA8                            ; ===========================================================================
0000DBA8                            
0000DBA8                            Obj36_Type0x:				; XREF: Obj36_Solid
0000DBA8 7000                       		moveq	#0,d0
0000DBAA 1028 0028                  		move.b	$28(a0),d0
0000DBAE D040                       		add.w	d0,d0
0000DBB0 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000DBB4 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000DBB8                            ; ===========================================================================
0000DBB8 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000DBBA 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000DBBC 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000DBBE                            ; ===========================================================================
0000DBBE                            
0000DBBE                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000DBBE 4E75                       		rts			; don't move the object
0000DBC0                            ; ===========================================================================
0000DBC0                            
0000DBC0                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000DBC0 6100 0000                  		bsr.w	Obj36_Wait
0000DBC4 7000                       		moveq	#0,d0
0000DBC6 1028 0034                  		move.b	$34(a0),d0
0000DBCA D068 0032                  		add.w	$32(a0),d0
0000DBCE 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000DBD2 4E75                       		rts	
0000DBD4                            ; ===========================================================================
0000DBD4                            
0000DBD4                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000DBD4 6100 0000                  		bsr.w	Obj36_Wait
0000DBD8 7000                       		moveq	#0,d0
0000DBDA 1028 0034                  		move.b	$34(a0),d0
0000DBDE D068 0030                  		add.w	$30(a0),d0
0000DBE2 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000DBE6 4E75                       		rts	
0000DBE8                            ; ===========================================================================
0000DBE8                            
0000DBE8                            Obj36_Wait:
0000DBE8 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000DBEC 6700                       		beq.s	loc_CFA4	; if yes, branch
0000DBEE 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000DBF2 6600                       		bne.s	locret_CFE6
0000DBF4 4A28 0001                  		tst.b	1(a0)
0000DBF8 6A00                       		bpl.s	locret_CFE6
0000DBFA 303C 00B6                  		move.w	#$B6,d0
0000DBFE 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000DC04 6000                       		bra.s	locret_CFE6
0000DC06                            ; ===========================================================================
0000DC06                            
0000DC06                            loc_CFA4:
0000DC06 4A68 0036                  		tst.w	$36(a0)
0000DC0A 6700                       		beq.s	loc_CFC6
0000DC0C 0468 0800 0034             		subi.w	#$800,$34(a0)
0000DC12 6400                       		bcc.s	locret_CFE6
0000DC14 317C 0000 0034             		move.w	#0,$34(a0)
0000DC1A 317C 0000 0036             		move.w	#0,$36(a0)
0000DC20 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DC26 6000                       		bra.s	locret_CFE6
0000DC28                            ; ===========================================================================
0000DC28                            
0000DC28                            loc_CFC6:
0000DC28 0668 0800 0034             		addi.w	#$800,$34(a0)
0000DC2E 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000DC34 6500                       		bcs.s	locret_CFE6
0000DC36 317C 2000 0034             		move.w	#$2000,$34(a0)
0000DC3C 317C 0001 0036             		move.w	#1,$36(a0)
0000DC42 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DC48                            
0000DC48                            locret_CFE6:
0000DC48 4E75                       		rts	
0000DC4A                            ; ===========================================================================
0000DC4A                            ; ---------------------------------------------------------------------------
0000DC4A                            ; Sprite mappings - spikes
0000DC4A                            ; ---------------------------------------------------------------------------
0000DC4A                            Map_obj36:
0000DC4A                            	include "_maps\obj36.asm"
0000DC4A                            Map_obj36_inner:
0000DC4A 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000DC4C 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000DC4E 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000DC50 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000DC52 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000DC54 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000DC56 03                         Map_obj36_inner_C: 	dc.b $3
0000DC57 F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000DC5C F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DC61 F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000DC66 03                         Map_obj36_inner_1C: 	dc.b $3
0000DC67 EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000DC6C FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000DC71 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000DC76 01                         Map_obj36_inner_2C: 	dc.b $1
0000DC77 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DC7C 03                         Map_obj36_inner_32: 	dc.b $3
0000DC7D F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000DC82 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DC87 F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000DC8C 06                         Map_obj36_inner_42: 	dc.b $6
0000DC8D F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000DC92 F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000DC97 F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000DC9C F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000DCA1 F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000DCA6 F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000DCAB 01                         Map_obj36_inner_61: 	dc.b $1
0000DCAC FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000DCB2 00                         	even
0000DCB2 00                         	even
0000DCB2                            
0000DCB2                            ; ===========================================================================
0000DCB2                            ; ---------------------------------------------------------------------------
0000DCB2                            ; Object 3B - purple rock (GHZ)
0000DCB2                            ; ---------------------------------------------------------------------------
0000DCB2                            
0000DCB2                            Obj3B:					; XREF: Obj_Index
0000DCB2 7000                       		moveq	#0,d0
0000DCB4 1028 0024                  		move.b	$24(a0),d0
0000DCB8 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000DCBC 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000DCC0                            ; ===========================================================================
0000DCC0 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000DCC2 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000DCC4                            ; ===========================================================================
0000DCC4                            
0000DCC4                            Obj3B_Main:				; XREF: Obj3B_Index
0000DCC4 5428 0024                  		addq.b	#2,$24(a0)
0000DCC8 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000DCD0 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000DCD6 117C 0004 0001             		move.b	#4,1(a0)
0000DCDC 117C 0013 0019             		move.b	#$13,$19(a0)
0000DCE2 117C 0004 0018             		move.b	#4,$18(a0)
0000DCE8                            
0000DCE8                            Obj3B_Solid:				; XREF: Obj3B_Index
0000DCE8 323C 001B                  		move.w	#$1B,d1
0000DCEC 343C 0010                  		move.w	#$10,d2
0000DCF0 363C 0010                  		move.w	#$10,d3
0000DCF4 3828 0008                  		move.w	8(a0),d4
0000DCF8 6100 0000                  		bsr.w	SolidObject
0000DCFC 6100 0000                  		bsr.w	DisplaySprite
0000DD00 3028 0008                  		move.w	8(a0),d0
0000DD04 0240 FF80                  		andi.w	#$FF80,d0
0000DD08 3238 F700                  		move.w	($FFFFF700).w,d1
0000DD0C 0441 0080                  		subi.w	#$80,d1
0000DD10 0241 FF80                  		andi.w	#$FF80,d1
0000DD14 9041                       		sub.w	d1,d0
0000DD16 0C40 0280                  		cmpi.w	#$280,d0
0000DD1A 6200 0000                  		bhi.w	DeleteObject
0000DD1E 4E75                       		rts	
0000DD20                            ; ===========================================================================
0000DD20                            ; ---------------------------------------------------------------------------
0000DD20                            ; Object 49 - waterfall	sound effect (GHZ)
0000DD20                            ; ---------------------------------------------------------------------------
0000DD20                            
0000DD20                            Obj49:					; XREF: Obj_Index
0000DD20 7000                       		moveq	#0,d0
0000DD22 1028 0024                  		move.b	$24(a0),d0
0000DD26 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000DD2A 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000DD2E                            ; ===========================================================================
0000DD2E 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000DD30 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000DD32                            ; ===========================================================================
0000DD32                            
0000DD32                            Obj49_Main:				; XREF: Obj49_Index
0000DD32 5428 0024                  		addq.b	#2,$24(a0)
0000DD36 117C 0004 0001             		move.b	#4,1(a0)
0000DD3C                            
0000DD3C                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000DD3C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DD40 0200 003F                  		andi.b	#$3F,d0
0000DD44 6600                       		bne.s	Obj49_ChkDel
0000DD46 303C 00D0                  		move.w	#$D0,d0
0000DD4A 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000DD50                            
0000DD50                            Obj49_ChkDel:
0000DD50 3028 0008                  		move.w	8(a0),d0
0000DD54 0240 FF80                  		andi.w	#$FF80,d0
0000DD58 3238 F700                  		move.w	($FFFFF700).w,d1
0000DD5C 0441 0080                  		subi.w	#$80,d1
0000DD60 0241 FF80                  		andi.w	#$FF80,d1
0000DD64 9041                       		sub.w	d1,d0
0000DD66 0C40 0280                  		cmpi.w	#$280,d0
0000DD6A 6200 0000                  		bhi.w	DeleteObject
0000DD6E 4E75                       		rts	
0000DD70                            ; ===========================================================================
0000DD70                            ; ---------------------------------------------------------------------------
0000DD70                            ; Sprite mappings - purple rock	(GHZ)
0000DD70                            ; ---------------------------------------------------------------------------
0000DD70                            Map_obj3B:
0000DD70                            	include "_maps\obj3B.asm"
0000DD70                            ; ---------------------------------------------------------------------------
0000DD70                            ; Sprite mappings - purple rock	(GHZ)
0000DD70                            ; ---------------------------------------------------------------------------
0000DD70 0000                       		dc.w byte_D110-Map_obj3B
0000DD72 02                         byte_D110:	dc.b 2
0000DD73 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000DD78 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000DD7E 00                         		even
0000DD7E 00                         		even
0000DD7E                            
0000DD7E                            ; ===========================================================================
0000DD7E                            ; ---------------------------------------------------------------------------
0000DD7E                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000DD7E                            ; ---------------------------------------------------------------------------
0000DD7E                            
0000DD7E                            Obj3C:					; XREF: Obj_Index
0000DD7E 7000                       		moveq	#0,d0
0000DD80 1028 0024                  		move.b	$24(a0),d0
0000DD84 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000DD88 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000DD8C 6000 0000                  		bra.w	MarkObjGone
0000DD90                            ; ===========================================================================
0000DD90 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000DD92 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000DD94 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000DD96                            ; ===========================================================================
0000DD96                            
0000DD96                            Obj3C_Main:				; XREF: Obj3C_Index
0000DD96 5428 0024                  		addq.b	#2,$24(a0)
0000DD9A 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000DDA2 317C 450F 0002             		move.w	#$450F,2(a0)
0000DDA8 117C 0004 0001             		move.b	#4,1(a0)
0000DDAE 117C 0010 0019             		move.b	#$10,$19(a0)
0000DDB4 117C 0004 0018             		move.b	#4,$18(a0)
0000DDBA 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DDC0                            
0000DDC0                            Obj3C_Solid:				; XREF: Obj3C_Index
0000DDC0 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000DDC6 323C 001B                  		move.w	#$1B,d1
0000DDCA 343C 0020                  		move.w	#$20,d2
0000DDCE 363C 0020                  		move.w	#$20,d3
0000DDD2 3828 0008                  		move.w	8(a0),d4
0000DDD6 6100 0000                  		bsr.w	SolidObject
0000DDDA 0828 0005 0022             		btst	#5,$22(a0)
0000DDE0 6600                       		bne.s	Obj3C_ChkRoll
0000DDE2                            
0000DDE2                            locret_D180:
0000DDE2 4E75                       		rts	
0000DDE4                            ; ===========================================================================
0000DDE4                            
0000DDE4                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000DDE4 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000DDEA 66F6                       		bne.s	locret_D180	; if not, branch
0000DDEC 3028 0030                  		move.w	$30(a0),d0
0000DDF0 6A00                       		bpl.s	Obj3C_ChkSpeed
0000DDF2 4440                       		neg.w	d0
0000DDF4                            
0000DDF4                            Obj3C_ChkSpeed:
0000DDF4 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000DDF8 65E8                       		bcs.s	locret_D180	; if not, branch
0000DDFA 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DE00 5869 0008                  		addq.w	#4,8(a1)
0000DE04 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DE0A 3028 0008                  		move.w	8(a0),d0
0000DE0E B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DE12 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DE14 5169 0008                  		subq.w	#8,8(a1)
0000DE18 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DE1E                            
0000DE1E                            Obj3C_Smash:
0000DE1E 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DE24 08A8 0005 0022             		bclr	#5,$22(a0)
0000DE2A 08A9 0005 0022             		bclr	#5,$22(a1)
0000DE30 7207                       		moveq	#7,d1		; load 8 fragments
0000DE32 343C 0070                  		move.w	#$70,d2
0000DE36 6100                       		bsr.s	SmashObject
0000DE38                            
0000DE38                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DE38 4A28 0001                  		tst.b	1(a0)
0000DE3C 6A00 0000                  		bpl.w	DeleteObject
0000DE40 7270                       		moveq	#$70,d1
0000DE42 4EB9 0000 0000             		jsr	ObjectFallCustom
0000DE48 6000 0000                  		bra.w	DisplaySprite	
0000DE4C                            
0000DE4C                            ; ---------------------------------------------------------------------------
0000DE4C                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DE4C                            ; ---------------------------------------------------------------------------
0000DE4C                            
0000DE4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE4C                            
0000DE4C                            
0000DE4C                            SmashObject:				; XREF: Obj3C_Smash
0000DE4C 7000                       		moveq	#0,d0
0000DE4E 1028 001A                  		move.b	$1A(a0),d0
0000DE52 D040                       		add.w	d0,d0
0000DE54 2668 0004                  		movea.l	4(a0),a3
0000DE58 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DE5C 524B                       		addq.w	#1,a3
0000DE5E 08E8 0005 0001             		bset	#5,1(a0)
0000DE64 1810                       		move.b	0(a0),d4
0000DE66 1A28 0001                  		move.b	1(a0),d5
0000DE6A 2248                       		movea.l	a0,a1
0000DE6C 6000                       		bra.s	Smash_LoadFrag
0000DE6E                            ; ===========================================================================
0000DE6E                            
0000DE6E                            Smash_Loop:
0000DE6E 6100 0000                  		bsr.w	SingleObjLoad
0000DE72 6600                       		bne.s	Smash_PlaySnd
0000DE74 5A4B                       		addq.w	#5,a3
0000DE76                            
0000DE76                            Smash_LoadFrag:				; XREF: SmashObject
0000DE76 137C 0004 0024             		move.b	#4,$24(a1)
0000DE7C 1284                       		move.b	d4,0(a1)
0000DE7E 234B 0004                  		move.l	a3,4(a1)
0000DE82 1345 0001                  		move.b	d5,1(a1)
0000DE86 3368 0008 0008             		move.w	8(a0),8(a1)
0000DE8C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DE92 3368 0002 0002             		move.w	2(a0),2(a1)
0000DE98 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DE9E 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DEA4 335C 0010                  		move.w	(a4)+,$10(a1)
0000DEA8 335C 0012                  		move.w	(a4)+,$12(a1)
0000DEAC B3C8                       		cmpa.l	a0,a1
0000DEAE 6400                       		bcc.s	loc_D268
0000DEB0 2F08                       		move.l	a0,-(sp)
0000DEB2 2049                       		movea.l	a1,a0
0000DEB4 6100 0000                  		bsr.w	SpeedToPos
0000DEB8 D568 0012                  		add.w	d2,$12(a0)
0000DEBC 205F                       		movea.l	(sp)+,a0
0000DEBE 6100 0000                  		bsr.w	DisplaySprite2
0000DEC2                            
0000DEC2                            loc_D268:
0000DEC2 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DEC6                            
0000DEC6                            Smash_PlaySnd:
0000DEC6 303C 00CB                  		move.w	#$CB,d0
0000DECA 4EF9 0000 15EC             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DED0                            ; End of function SmashObject
0000DED0                            
0000DED0                            ; ===========================================================================
0000DED0                            ; Smashed block	fragment speeds
0000DED0                            ;
0000DED0 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DED4 0600 FF00                  		dc.w $600, $FF00
0000DED8 0600 0100                  		dc.w $600, $100
0000DEDC 0400 0500                  		dc.w $400, $500
0000DEE0 0600 FA00                  		dc.w $600, $FA00
0000DEE4 0800 FE00                  		dc.w $800, $FE00
0000DEE8 0800 0200                  		dc.w $800, $200
0000DEEC 0600 0600                  		dc.w $600, $600
0000DEF0                            
0000DEF0 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DEF4 F800 FE00                  		dc.w $F800, $FE00
0000DEF8 F800 0200                  		dc.w $F800, $200
0000DEFC FA00 0600                  		dc.w $FA00, $600
0000DF00 FC00 FB00                  		dc.w $FC00, $FB00
0000DF04 FA00 FF00                  		dc.w $FA00, $FF00
0000DF08 FA00 0100                  		dc.w $FA00, $100
0000DF0C FC00 0500                  		dc.w $FC00, $500
0000DF10                            ; ---------------------------------------------------------------------------
0000DF10                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DF10                            ; ---------------------------------------------------------------------------
0000DF10                            Map_obj3C:
0000DF10                            	include "_maps\obj3C.asm"
0000DF10                            ; ---------------------------------------------------------------------------
0000DF10                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DF10                            ; ---------------------------------------------------------------------------
0000DF10 0000                       		dc.w byte_D2BC-Map_obj3C
0000DF12 0000                       		dc.w byte_D2E5-Map_obj3C
0000DF14 0000                       		dc.w byte_D30E-Map_obj3C
0000DF16 08                         byte_D2BC:	dc.b 8
0000DF17 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DF1C F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DF21 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DF26 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DF2B E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DF30 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DF35 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DF3A 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DF3F 08                         byte_D2E5:	dc.b 8
0000DF40 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DF45 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DF4A 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DF4F 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DF54 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DF59 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DF5E 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DF63 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DF68 08                         byte_D30E:	dc.b 8
0000DF69 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DF6E F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DF73 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DF78 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DF7D E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DF82 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DF87 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DF8C 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DF92 00                         		even
0000DF92 00                         		even
0000DF92                            
0000DF92                            ; ---------------------------------------------------------------------------
0000DF92                            ; Object code loading subroutine
0000DF92                            ; ---------------------------------------------------------------------------
0000DF92                            
0000DF92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF92                            
0000DF92                            
0000DF92                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DF92 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DF96 7E7F                       		moveq	#$7F,d7
0000DF98 7000                       		moveq	#0,d0
0000DF9A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DFA0 6400                       		bcc.s	loc_D362
0000DFA2                            
0000DFA2                            loc_D348:
0000DFA2 1010                       		move.b	(a0),d0		; load object number from RAM
0000DFA4 6700                       		beq.s	loc_D358
0000DFA6 D040                       		add.w	d0,d0
0000DFA8 D040                       		add.w	d0,d0
0000DFAA 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DFAE 4E91                       		jsr	(a1)		; run the object's code
0000DFB0 7000                       		moveq	#0,d0
0000DFB2                            
0000DFB2                            loc_D358:
0000DFB2 41E8 0040                  		lea	$40(a0),a0	; next object
0000DFB6 51CF FFEA                  		dbf	d7,loc_D348
0000DFBA 4E75                       		rts	
0000DFBC                            ; ===========================================================================
0000DFBC                            
0000DFBC                            loc_D362:
0000DFBC 7E1F                       		moveq	#$1F,d7
0000DFBE 61E2                       		bsr.s	loc_D348
0000DFC0 7E5F                       		moveq	#$5F,d7
0000DFC2                            
0000DFC2                            loc_D368:
0000DFC2 7000                       		moveq	#0,d0
0000DFC4 1010                       		move.b	(a0),d0
0000DFC6 6700                       		beq.s	loc_D378
0000DFC8 4A28 0001                  		tst.b	1(a0)
0000DFCC 6A00                       		bpl.s	loc_D378
0000DFCE 6100 0000                  		bsr.w	DisplaySprite
0000DFD2                            
0000DFD2                            loc_D378:
0000DFD2 41E8 0040                  		lea	$40(a0),a0
0000DFD6                            
0000DFD6                            loc_D37C:
0000DFD6 51CF FFEA                  		dbf	d7,loc_D368
0000DFDA 4E75                       		rts	
0000DFDC                            ; End of function ObjectsLoad
0000DFDC                            
0000DFDC                            ; ===========================================================================
0000DFDC                            ; ---------------------------------------------------------------------------
0000DFDC                            ; Object pointers
0000DFDC                            ; ---------------------------------------------------------------------------
0000DFDC                            Obj_Index:
0000DFDC                            	include "_inc\Object pointers.asm"
0000DFDC                            ; ---------------------------------------------------------------------------
0000DFDC                            ; Object pointers
0000DFDC                            ; ---------------------------------------------------------------------------
0000DFDC 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DFEC 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DFFC 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000E00C 0000 0000 0000 B204 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000E01C 0000 7DAE 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000E02C 0000 83D4 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000E03C 0000 8C22 0000 8D1C 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000E04C 0000 9366 0000 9654 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000E05C 0000 0000 0000 A302 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000E06C 0000 A63A 0000 AC28 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000E07C 0000 9F62 0000 943C 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000E08C 0000 B7FA 0000 AE1C 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000E09C 0000 C210 0000 C8BE 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000E0AC 0000 BD6E 0000 DA8A 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000E0BC 0000 D06A 0000 D124 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000E0CC 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000E0DC 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000E0EC 0000 C52C 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000E0FC 0000 DD20 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000E10C 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000E11C 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000E12C 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000E13C 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000E14C 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000E15C 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000E16C 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E17C 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E18C 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E19C 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E1AC 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E1BC 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E1CC 0000 0000 0000 D366 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E1DC 0000 55FA 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E1EC 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E1FC 0000 5CB4 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E1FC 0000 5CB4 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E20C                            
0000E20C                            ; ---------------------------------------------------------------------------
0000E20C                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E20C                            ; ---------------------------------------------------------------------------
0000E20C                            
0000E20C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E20C                            
0000E20C                            
0000E20C                            ObjectFall:
0000E20C 7238                       		moveq	#$38,d1
0000E20E                            
0000E20E                            ObjectFallCustom:
0000E20E 6100                       		bsr.s	SpeedToPos
0000E210 D368 0012                  		add.w	d1,$12(a0)
0000E214 4A38 FFF8                  		tst.b	($FFFFFFF8).w
0000E218 6A00                       		bpl.s	@62hz
0000E21A 4A41                       		tst.w	d1
0000E21C 6B00                       		bmi.s	@upward
0000E21E E449                       		lsr.w	#2,d1
0000E220 D368 0012                  		add.w	d1,$12(a0)
0000E224                            @62hz:
0000E224 4E75                       		rts
0000E226                            @upward:
0000E226 4441                       		neg.w	d1
0000E228 E449                       		lsr.w	#2,d1
0000E22A 9368 0012                  		sub.w	d1,$12(a0)
0000E22E 4E75                       		rts
0000E230                            ; End of function ObjectFall
0000E230                            
0000E230                            ; ---------------------------------------------------------------------------
0000E230                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E230                            ; ---------------------------------------------------------------------------
0000E230                            
0000E230                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E230                            
0000E230                            
0000E230                            ObjectFallNoJump:
0000E230 4CA8 0005 0010             		movem.w	$10(a0),d0/d2	; load horizontal speed
0000E236 E180                       		asl.l	#8,d0		; multiply speed by $100
0000E238 E182                       		asl.l	#8,d2		; multiply speed by $100
0000E23A D1A8 0008                  		add.l	d0,8(a0)	; update x-axis	position
0000E23E D5A8 000C                  		add.l	d2,$C(a0)	; update y-axis	position
0000E242 5868 000C                  		addq.w	#4,$C(a0)	; increase vertical speed
0000E246 4E75                       		rts	
0000E248                            
0000E248                            ; End of function ObjectFall
0000E248                            
0000E248                            JumpFallSonic:
0000E248 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000E24E                                    
0000E24E E180                               asl.l    #8,d0                ; Apply X speed
0000E250 D1A8 0008                          add.l    d0,$8(a0)
0000E254                                    
0000E254 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000E258 4A41                               tst.w    d1                ; Are we falling?
0000E25A 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000E25C 4440                               neg.w    d0                ; Make Y movement go up
0000E25E                                    
0000E25E                            .SetYSpeed:
0000E25E 48C0                               ext.l    d0                ; Apply Y speed
0000E260 E180                               asl.l    #8,d0
0000E262 D1A8 000C                          add.l    d0,$C(a0)
0000E266 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000E26C 4E75                               rts
0000E26E                            
0000E26E                            ; ---------------------------------------------------------------------------
0000E26E                            ; Subroutine translating object	speed to update	object position
0000E26E                            ; ---------------------------------------------------------------------------
0000E26E                            
0000E26E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E26E                            
0000E26E                            
0000E26E                            SpeedToPos:
0000E26E 4CA8 0005 0010             		movem.w	$10(a0),d0/d2	; load horizontal speed
0000E274 E180                       		asl.l	#8,d0		; multiply speed by $100
0000E276 E182                       		asl.l	#8,d2		; multiply speed by $100
0000E278                            
0000E278 4A38 FFF8                  		tst.b	($FFFFFFF8).w
0000E27C 6A00                       		bpl.s	@60hz
0000E27E 2600                       		move.l	d0,d3
0000E280 6A00                       		bpl.s	@xflip
0000E282 4483                       		neg.l	d3
0000E284 E48B                       		lsr.l	#2,d3
0000E286 9083                       		sub.l	d3,d0
0000E288 6000                       		bra.s	@xcont
0000E28A                            @xflip:
0000E28A E48B                       		lsr.l	#2,d3
0000E28C D083                       		add.l	d3,d0
0000E28E                            @xcont:
0000E28E 2602                       		move.l	d2,d3
0000E290 6A00                       		bpl.s	@yflip
0000E292 4483                       		neg.l	d3
0000E294 E48B                       		lsr.l	#2,d3
0000E296 9483                       		sub.l	d3,d2
0000E298 6000                       		bra.s	@ycont
0000E29A                            @yflip:
0000E29A E48B                       		lsr.l	#2,d3
0000E29C D483                       		add.l	d3,d2
0000E29E                            @ycont:
0000E29E                            @60hz:
0000E29E D1A8 0008                  		add.l	d0,8(a0)	; update x-axis	position
0000E2A2 D5A8 000C                  		add.l	d2,$C(a0)	; update y-axis	position
0000E2A6 4E75                       		rts	
0000E2A8                            ; End of function SpeedToPos
0000E2A8                            
0000E2A8                            ; ---------------------------------------------------------------------------
0000E2A8                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E2A8                            ; ---------------------------------------------------------------------------
0000E2A8                            
0000E2A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2A8                            
0000E2A8                            
0000E2A8                            DisplaySprite:
0000E2A8 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E2AC 3028 0018                  		move.w	$18(a0),d0
0000E2B0 E248                       		lsr.w	#1,d0
0000E2B2 0240 0380                  		andi.w	#$380,d0
0000E2B6 D2C0                       		adda.w	d0,a1
0000E2B8 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E2BC 6400                       		bcc.s	locret_D620
0000E2BE 5451                       		addq.w	#2,(a1)
0000E2C0 D2D1                       		adda.w	(a1),a1
0000E2C2 3288                       		move.w	a0,(a1)
0000E2C4                            
0000E2C4                            locret_D620:
0000E2C4 4E75                       		rts	
0000E2C6                            ; End of function DisplaySprite
0000E2C6                            
0000E2C6                            ; ---------------------------------------------------------------------------
0000E2C6                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E2C6                            ; ---------------------------------------------------------------------------
0000E2C6                            
0000E2C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2C6                            
0000E2C6                            
0000E2C6                            DisplaySprite2:
0000E2C6 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E2CA 3029 0018                  		move.w	$18(a1),d0
0000E2CE E248                       		lsr.w	#1,d0
0000E2D0 0240 0380                  		andi.w	#$380,d0
0000E2D4 D4C0                       		adda.w	d0,a2
0000E2D6 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E2DA 6400                       		bcc.s	locret_D63E
0000E2DC 5452                       		addq.w	#2,(a2)
0000E2DE D4D2                       		adda.w	(a2),a2
0000E2E0 3489                       		move.w	a1,(a2)
0000E2E2                            
0000E2E2                            locret_D63E:
0000E2E2 4E75                       		rts	
0000E2E4                            ; End of function DisplaySprite2
0000E2E4                            
0000E2E4                            ; ---------------------------------------------------------------------------
0000E2E4                            ; Subroutine to	delete an object
0000E2E4                            ; ---------------------------------------------------------------------------
0000E2E4                            
0000E2E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2E4                            
0000E2E4                            
0000E2E4                            DeleteObject:
0000E2E4 2248                       		movea.l	a0,a1
0000E2E6                            
0000E2E6                            DeleteObject2:
0000E2E6 7200                       		moveq	#0,d1
0000E2E8 700F                       		moveq	#$F,d0
0000E2EA                            
0000E2EA                            loc_D646:
0000E2EA 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E2EC 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E2F0 4E75                       		rts	
0000E2F2                            ; End of function DeleteObject
0000E2F2                            
0000E2F2                            ; ===========================================================================
0000E2F2 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E2F6 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E2FA 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E2FE 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E302                            ; ---------------------------------------------------------------------------
0000E302                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E302                            ; ---------------------------------------------------------------------------
0000E302                            
0000E302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E302                            
0000E302                            
0000E302                            BuildSprites:				; XREF: TitleScreen; et al
0000E302 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E306 7A00                       		moveq	#0,d5
0000E308 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E30C 7E07                       		moveq	#7,d7
0000E30E                            
0000E30E                            loc_D66A:
0000E30E 4A54                       		tst.w	(a4)
0000E310 6700 0000                  		beq.w	loc_D72E
0000E314 7C02                       		moveq	#2,d6
0000E316                            
0000E316                            loc_D672:
0000E316 3074 6000                  		movea.w	(a4,d6.w),a0
0000E31A 4A10                       		tst.b	(a0)
0000E31C 6700 0000                  		beq.w	loc_D726
0000E320 08A8 0007 0001             		bclr	#7,1(a0)
0000E326 1028 0001                  		move.b	1(a0),d0
0000E32A 1800                       		move.b	d0,d4
0000E32C 0240 000C                  		andi.w	#$C,d0
0000E330 6700                       		beq.s	loc_D6DE
0000E332 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E336 7000                       		moveq	#0,d0
0000E338 1028 0019                  		move.b	$19(a0),d0
0000E33C 3628 0008                  		move.w	8(a0),d3
0000E340 9651                       		sub.w	(a1),d3
0000E342 3203                       		move.w	d3,d1
0000E344 D240                       		add.w	d0,d1
0000E346 6B00 0000                  		bmi.w	loc_D726
0000E34A 3203                       		move.w	d3,d1
0000E34C 9240                       		sub.w	d0,d1
0000E34E 0C41 0140                  		cmpi.w	#$140,d1
0000E352 6C00                       		bge.s	loc_D726
0000E354 0643 0080                  		addi.w	#$80,d3
0000E358 0804 0004                  		btst	#4,d4
0000E35C 6700                       		beq.s	loc_D6E8
0000E35E 7000                       		moveq	#0,d0
0000E360 1028 0016                  		move.b	$16(a0),d0
0000E364 3428 000C                  		move.w	$C(a0),d2
0000E368 9469 0004                  		sub.w	4(a1),d2
0000E36C 3202                       		move.w	d2,d1
0000E36E D240                       		add.w	d0,d1
0000E370 6B00                       		bmi.s	loc_D726
0000E372 3202                       		move.w	d2,d1
0000E374 9240                       		sub.w	d0,d1
0000E376 0C41 00E0                  		cmpi.w	#$E0,d1
0000E37A 6C00                       		bge.s	loc_D726
0000E37C 0642 0080                  		addi.w	#$80,d2
0000E380 6000                       		bra.s	loc_D700
0000E382                            ; ===========================================================================
0000E382                            
0000E382                            loc_D6DE:
0000E382 3428 000A                  		move.w	$A(a0),d2
0000E386 3628 0008                  		move.w	8(a0),d3
0000E38A 6000                       		bra.s	loc_D700
0000E38C                            ; ===========================================================================
0000E38C                            
0000E38C                            loc_D6E8:
0000E38C 3428 000C                  		move.w	$C(a0),d2
0000E390 9469 0004                  		sub.w	4(a1),d2
0000E394 0642 0080                  		addi.w	#$80,d2
0000E398 0C42 0060                  		cmpi.w	#$60,d2
0000E39C 6500                       		bcs.s	loc_D726
0000E39E 0C42 0180                  		cmpi.w	#$180,d2
0000E3A2 6400                       		bcc.s	loc_D726
0000E3A4                            
0000E3A4                            loc_D700:
0000E3A4 2268 0004                  		movea.l	4(a0),a1
0000E3A8 7200                       		moveq	#0,d1
0000E3AA 0804 0005                  		btst	#5,d4
0000E3AE 6600                       		bne.s	loc_D71C
0000E3B0 1228 001A                  		move.b	$1A(a0),d1
0000E3B4 D201                       		add.b	d1,d1
0000E3B6 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E3BA 1219                       		move.b	(a1)+,d1
0000E3BC 5301                       		subq.b	#1,d1
0000E3BE 6B00                       		bmi.s	loc_D720
0000E3C0                            
0000E3C0                            loc_D71C:
0000E3C0 6100 0000                  		bsr.w	sub_D750
0000E3C4                            
0000E3C4                            loc_D720:
0000E3C4 08E8 0007 0001             		bset	#7,1(a0)
0000E3CA                            
0000E3CA                            loc_D726:
0000E3CA 5446                       		addq.w	#2,d6
0000E3CC 5554                       		subq.w	#2,(a4)
0000E3CE 6600 FF46                  		bne.w	loc_D672
0000E3D2                            
0000E3D2                            loc_D72E:
0000E3D2 49EC 0080                  		lea	$80(a4),a4
0000E3D6 51CF FF36                  		dbf	d7,loc_D66A
0000E3DA 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E3DE 0C05 0050                  		cmpi.b	#$50,d5
0000E3E2 6700                       		beq.s	loc_D748
0000E3E4 24BC 0000 0000             		move.l	#0,(a2)
0000E3EA 4E75                       		rts	
0000E3EC                            ; ===========================================================================
0000E3EC                            
0000E3EC                            loc_D748:
0000E3EC 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E3F2 4E75                       		rts	
0000E3F4                            ; End of function BuildSprites
0000E3F4                            
0000E3F4                            
0000E3F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E3F4                            
0000E3F4                            
0000E3F4                            sub_D750:				; XREF: BuildSprites
0000E3F4 3668 0002                  		movea.w	2(a0),a3
0000E3F8 0804 0000                  		btst	#0,d4
0000E3FC 6600                       		bne.s	loc_D796
0000E3FE 0804 0001                  		btst	#1,d4
0000E402 6600 0000                  		bne.w	loc_D7E4
0000E406                            ; End of function sub_D750
0000E406                            
0000E406                            
0000E406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E406                            
0000E406                            
0000E406                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E406 0C05 0050                  		cmpi.b	#$50,d5
0000E40A 6700                       		beq.s	locret_D794
0000E40C 1019                       		move.b	(a1)+,d0
0000E40E 4880                       		ext.w	d0
0000E410 D042                       		add.w	d2,d0
0000E412 34C0                       		move.w	d0,(a2)+
0000E414 14D9                       		move.b	(a1)+,(a2)+
0000E416 5205                       		addq.b	#1,d5
0000E418 14C5                       		move.b	d5,(a2)+
0000E41A 1019                       		move.b	(a1)+,d0
0000E41C E148                       		lsl.w	#8,d0
0000E41E 1019                       		move.b	(a1)+,d0
0000E420 D04B                       		add.w	a3,d0
0000E422 34C0                       		move.w	d0,(a2)+
0000E424 1019                       		move.b	(a1)+,d0
0000E426 4880                       		ext.w	d0
0000E428 D043                       		add.w	d3,d0
0000E42A 0240 01FF                  		andi.w	#$1FF,d0
0000E42E 6600                       		bne.s	loc_D78E
0000E430 5240                       		addq.w	#1,d0
0000E432                            
0000E432                            loc_D78E:
0000E432 34C0                       		move.w	d0,(a2)+
0000E434 51C9 FFD0                  		dbf	d1,sub_D762
0000E438                            
0000E438                            locret_D794:
0000E438 4E75                       		rts	
0000E43A                            ; End of function sub_D762
0000E43A                            
0000E43A                            ; ===========================================================================
0000E43A                            
0000E43A                            loc_D796:
0000E43A 0804 0001                  		btst	#1,d4
0000E43E 6600 0000                  		bne.w	loc_D82A
0000E442                            
0000E442                            loc_D79E:
0000E442 0C05 0050                  		cmpi.b	#$50,d5
0000E446 6700                       		beq.s	locret_D7E2
0000E448 1019                       		move.b	(a1)+,d0
0000E44A 4880                       		ext.w	d0
0000E44C D042                       		add.w	d2,d0
0000E44E 34C0                       		move.w	d0,(a2)+
0000E450 1819                       		move.b	(a1)+,d4
0000E452 14C4                       		move.b	d4,(a2)+
0000E454 5205                       		addq.b	#1,d5
0000E456 14C5                       		move.b	d5,(a2)+
0000E458 1019                       		move.b	(a1)+,d0
0000E45A E148                       		lsl.w	#8,d0
0000E45C 1019                       		move.b	(a1)+,d0
0000E45E D04B                       		add.w	a3,d0
0000E460 0A40 0800                  		eori.w	#$800,d0
0000E464 34C0                       		move.w	d0,(a2)+
0000E466 1019                       		move.b	(a1)+,d0
0000E468 4880                       		ext.w	d0
0000E46A 4440                       		neg.w	d0
0000E46C D804                       		add.b	d4,d4
0000E46E 0244 0018                  		andi.w	#$18,d4
0000E472 5044                       		addq.w	#8,d4
0000E474 9044                       		sub.w	d4,d0
0000E476 D043                       		add.w	d3,d0
0000E478 0240 01FF                  		andi.w	#$1FF,d0
0000E47C 6600                       		bne.s	loc_D7DC
0000E47E 5240                       		addq.w	#1,d0
0000E480                            
0000E480                            loc_D7DC:
0000E480 34C0                       		move.w	d0,(a2)+
0000E482 51C9 FFBE                  		dbf	d1,loc_D79E
0000E486                            
0000E486                            locret_D7E2:
0000E486 4E75                       		rts	
0000E488                            ; ===========================================================================
0000E488                            
0000E488                            loc_D7E4:				; XREF: sub_D750
0000E488 0C05 0050                  		cmpi.b	#$50,d5
0000E48C 6700                       		beq.s	locret_D828
0000E48E 1019                       		move.b	(a1)+,d0
0000E490 1811                       		move.b	(a1),d4
0000E492 4880                       		ext.w	d0
0000E494 4440                       		neg.w	d0
0000E496 E70C                       		lsl.b	#3,d4
0000E498 0244 0018                  		andi.w	#$18,d4
0000E49C 5044                       		addq.w	#8,d4
0000E49E 9044                       		sub.w	d4,d0
0000E4A0 D042                       		add.w	d2,d0
0000E4A2 34C0                       		move.w	d0,(a2)+
0000E4A4 14D9                       		move.b	(a1)+,(a2)+
0000E4A6 5205                       		addq.b	#1,d5
0000E4A8 14C5                       		move.b	d5,(a2)+
0000E4AA 1019                       		move.b	(a1)+,d0
0000E4AC E148                       		lsl.w	#8,d0
0000E4AE 1019                       		move.b	(a1)+,d0
0000E4B0 D04B                       		add.w	a3,d0
0000E4B2 0A40 1000                  		eori.w	#$1000,d0
0000E4B6 34C0                       		move.w	d0,(a2)+
0000E4B8 1019                       		move.b	(a1)+,d0
0000E4BA 4880                       		ext.w	d0
0000E4BC D043                       		add.w	d3,d0
0000E4BE 0240 01FF                  		andi.w	#$1FF,d0
0000E4C2 6600                       		bne.s	loc_D822
0000E4C4 5240                       		addq.w	#1,d0
0000E4C6                            
0000E4C6                            loc_D822:
0000E4C6 34C0                       		move.w	d0,(a2)+
0000E4C8 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E4CC                            
0000E4CC                            locret_D828:
0000E4CC 4E75                       		rts	
0000E4CE                            ; ===========================================================================
0000E4CE                            
0000E4CE                            loc_D82A:
0000E4CE 0C05 0050                  		cmpi.b	#$50,d5
0000E4D2 6700                       		beq.s	locret_D87C
0000E4D4 1019                       		move.b	(a1)+,d0
0000E4D6 1811                       		move.b	(a1),d4
0000E4D8 4880                       		ext.w	d0
0000E4DA 4440                       		neg.w	d0
0000E4DC E70C                       		lsl.b	#3,d4
0000E4DE 0244 0018                  		andi.w	#$18,d4
0000E4E2 5044                       		addq.w	#8,d4
0000E4E4 9044                       		sub.w	d4,d0
0000E4E6 D042                       		add.w	d2,d0
0000E4E8 34C0                       		move.w	d0,(a2)+
0000E4EA 1819                       		move.b	(a1)+,d4
0000E4EC 14C4                       		move.b	d4,(a2)+
0000E4EE 5205                       		addq.b	#1,d5
0000E4F0 14C5                       		move.b	d5,(a2)+
0000E4F2 1019                       		move.b	(a1)+,d0
0000E4F4 E148                       		lsl.w	#8,d0
0000E4F6 1019                       		move.b	(a1)+,d0
0000E4F8 D04B                       		add.w	a3,d0
0000E4FA 0A40 1800                  		eori.w	#$1800,d0
0000E4FE 34C0                       		move.w	d0,(a2)+
0000E500 1019                       		move.b	(a1)+,d0
0000E502 4880                       		ext.w	d0
0000E504 4440                       		neg.w	d0
0000E506 D804                       		add.b	d4,d4
0000E508 0244 0018                  		andi.w	#$18,d4
0000E50C 5044                       		addq.w	#8,d4
0000E50E 9044                       		sub.w	d4,d0
0000E510 D043                       		add.w	d3,d0
0000E512 0240 01FF                  		andi.w	#$1FF,d0
0000E516 6600                       		bne.s	loc_D876
0000E518 5240                       		addq.w	#1,d0
0000E51A                            
0000E51A                            loc_D876:
0000E51A 34C0                       		move.w	d0,(a2)+
0000E51C 51C9 FFB0                  		dbf	d1,loc_D82A
0000E520                            
0000E520                            locret_D87C:
0000E520 4E75                       		rts	
0000E522                            ; ---------------------------------------------------------------------------
0000E522                            ; Subroutine to	check if an object is on the screen
0000E522                            ; ---------------------------------------------------------------------------
0000E522                            
0000E522                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E522                            
0000E522                            
0000E522                            ChkObjOnScreen:
0000E522 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E526 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E52A 6B00                       		bmi.s	NotOnScreen
0000E52C 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E530 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E532                            
0000E532 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E536 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E53A 6B00                       		bmi.s	NotOnScreen
0000E53C 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E540 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E542                            
0000E542 7000                       		moveq	#0,d0		; set flag to 0
0000E544 4E75                       		rts	
0000E546                            ; ===========================================================================
0000E546                            
0000E546                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E546 7001                       		moveq	#1,d0		; set flag to 1
0000E548 4E75                       		rts	
0000E54A                            ; End of function ChkObjOnScreen
0000E54A                            
0000E54A                            
0000E54A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E54A                            
0000E54A                            
0000E54A                            ChkObjOnScreen2:
0000E54A 7200                       		moveq	#0,d1
0000E54C 1228 0019                  		move.b	$19(a0),d1
0000E550 3028 0008                  		move.w	8(a0),d0
0000E554 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E558 D041                       		add.w	d1,d0
0000E55A 6B00                       		bmi.s	NotOnScreen2
0000E55C D241                       		add.w	d1,d1
0000E55E 9041                       		sub.w	d1,d0
0000E560 0C40 0140                  		cmpi.w	#320,d0
0000E564 6C00                       		bge.s	NotOnScreen2
0000E566                            
0000E566 3228 000C                  		move.w	$C(a0),d1
0000E56A 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E56E 6B00                       		bmi.s	NotOnScreen2
0000E570 0C41 00E0                  		cmpi.w	#224,d1
0000E574 6C00                       		bge.s	NotOnScreen2
0000E576                            
0000E576 7000                       		moveq	#0,d0
0000E578 4E75                       		rts	
0000E57A                            ; ===========================================================================
0000E57A                            
0000E57A                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E57A 7001                       		moveq	#1,d0
0000E57C 4E75                       		rts	
0000E57E                            ; End of function ChkObjOnScreen2
0000E57E                            
0000E57E                            ; ---------------------------------------------------------------------------
0000E57E                            ; Subroutine to	load a level's objects
0000E57E                            ; ---------------------------------------------------------------------------
0000E57E                            
0000E57E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E57E                            
0000E57E                            
0000E57E                            ObjPosLoad:				; XREF: Level; et al
0000E57E 7000                       		moveq	#0,d0
0000E580 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E584 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E588 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E58C                            ; End of function ObjPosLoad
0000E58C                            
0000E58C                            ; ===========================================================================
0000E58C 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E58E 0000                       		dc.w OPL_Next-OPL_Index
0000E590                            ; ===========================================================================
0000E590                            
0000E590                            OPL_Main:				; XREF: OPL_Index
0000E590 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E594 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E598 ED08                       		lsl.b	#6,d0
0000E59A E848                       		lsr.w	#4,d0
0000E59C 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E5A2 2248                       		movea.l	a0,a1
0000E5A4 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E5A8 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E5AC 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E5B0 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E5B4 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E5B8 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E5BC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E5C0 34FC 0101                  		move.w	#$101,(a2)+
0000E5C4 303C 005E                  		move.w	#$5E,d0
0000E5C8                            
0000E5C8                            OPL_ClrList:
0000E5C8 429A                       		clr.l	(a2)+
0000E5CA 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E5CE                            
0000E5CE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E5D2 7400                       		moveq	#0,d2
0000E5D4 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E5D8 0446 0080                  		subi.w	#$80,d6
0000E5DC 6400                       		bcc.s	loc_D93C
0000E5DE 7C00                       		moveq	#0,d6
0000E5E0                            
0000E5E0                            loc_D93C:
0000E5E0 0246 FF80                  		andi.w	#$FF80,d6
0000E5E4 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E5E8                            
0000E5E8                            loc_D944:
0000E5E8 BC50                       		cmp.w	(a0),d6
0000E5EA 6300                       		bls.s	loc_D956
0000E5EC 4A28 0004                  		tst.b	4(a0)
0000E5F0 6A00                       		bpl.s	loc_D952
0000E5F2 1412                       		move.b	(a2),d2
0000E5F4 5212                       		addq.b	#1,(a2)
0000E5F6                            
0000E5F6                            loc_D952:
0000E5F6 5C48                       		addq.w	#6,a0
0000E5F8 60EE                       		bra.s	loc_D944
0000E5FA                            ; ===========================================================================
0000E5FA                            
0000E5FA                            loc_D956:
0000E5FA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E5FE 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E602 0446 0080                  		subi.w	#$80,d6
0000E606 6500                       		bcs.s	loc_D976
0000E608                            
0000E608                            loc_D964:
0000E608 BC50                       		cmp.w	(a0),d6
0000E60A 6300                       		bls.s	loc_D976
0000E60C 4A28 0004                  		tst.b	4(a0)
0000E610 6A00                       		bpl.s	loc_D972
0000E612 522A 0001                  		addq.b	#1,1(a2)
0000E616                            
0000E616                            loc_D972:
0000E616 5C48                       		addq.w	#6,a0
0000E618 60EE                       		bra.s	loc_D964
0000E61A                            ; ===========================================================================
0000E61A                            
0000E61A                            loc_D976:
0000E61A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E61E 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E624                            
0000E624                            OPL_Next:				; XREF: OPL_Index
0000E624 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E628 7400                       		moveq	#0,d2
0000E62A 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E62E 0246 FF80                  		andi.w	#$FF80,d6
0000E632 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E636 6700 0000                  		beq.w	locret_DA3A
0000E63A 6C00                       		bge.s	loc_D9F6
0000E63C 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E640 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E644 0446 0080                  		subi.w	#$80,d6
0000E648 6500                       		bcs.s	loc_D9D2
0000E64A                            
0000E64A                            loc_D9A6:
0000E64A BC68 FFFA                  		cmp.w	-6(a0),d6
0000E64E 6C00                       		bge.s	loc_D9D2
0000E650 5D48                       		subq.w	#6,a0
0000E652 4A28 0004                  		tst.b	4(a0)
0000E656 6A00                       		bpl.s	loc_D9BC
0000E658 532A 0001                  		subq.b	#1,1(a2)
0000E65C 142A 0001                  		move.b	1(a2),d2
0000E660                            
0000E660                            loc_D9BC:
0000E660 6100 0000                  		bsr.w	loc_DA3C
0000E664 6600                       		bne.s	loc_D9C6
0000E666 5D48                       		subq.w	#6,a0
0000E668 60E0                       		bra.s	loc_D9A6
0000E66A                            ; ===========================================================================
0000E66A                            
0000E66A                            loc_D9C6:
0000E66A 4A28 0004                  		tst.b	4(a0)
0000E66E 6A00                       		bpl.s	loc_D9D0
0000E670 522A 0001                  		addq.b	#1,1(a2)
0000E674                            
0000E674                            loc_D9D0:
0000E674 5C48                       		addq.w	#6,a0
0000E676                            
0000E676                            loc_D9D2:
0000E676 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E67A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E67E 0646 0300                  		addi.w	#$300,d6
0000E682                            
0000E682                            loc_D9DE:
0000E682 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E686 6E00                       		bgt.s	loc_D9F0
0000E688 4A28 FFFE                  		tst.b	-2(a0)
0000E68C 6A00                       		bpl.s	loc_D9EC
0000E68E 5312                       		subq.b	#1,(a2)
0000E690                            
0000E690                            loc_D9EC:
0000E690 5D48                       		subq.w	#6,a0
0000E692 60EE                       		bra.s	loc_D9DE
0000E694                            ; ===========================================================================
0000E694                            
0000E694                            loc_D9F0:
0000E694 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E698 4E75                       		rts	
0000E69A                            ; ===========================================================================
0000E69A                            
0000E69A                            loc_D9F6:
0000E69A 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E69E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E6A2 0646 0280                  		addi.w	#$280,d6
0000E6A6                            
0000E6A6                            loc_DA02:
0000E6A6 BC50                       		cmp.w	(a0),d6
0000E6A8 6300                       		bls.s	loc_DA16
0000E6AA 4A28 0004                  		tst.b	4(a0)
0000E6AE 6A00                       		bpl.s	loc_DA10
0000E6B0 1412                       		move.b	(a2),d2
0000E6B2 5212                       		addq.b	#1,(a2)
0000E6B4                            
0000E6B4                            loc_DA10:
0000E6B4 6100 0000                  		bsr.w	loc_DA3C
0000E6B8 67EC                       		beq.s	loc_DA02
0000E6BA                            
0000E6BA                            loc_DA16:
0000E6BA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E6BE 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E6C2 0446 0300                  		subi.w	#$300,d6
0000E6C6 6500                       		bcs.s	loc_DA36
0000E6C8                            
0000E6C8                            loc_DA24:
0000E6C8 BC50                       		cmp.w	(a0),d6
0000E6CA 6300                       		bls.s	loc_DA36
0000E6CC 4A28 0004                  		tst.b	4(a0)
0000E6D0 6A00                       		bpl.s	loc_DA32
0000E6D2 522A 0001                  		addq.b	#1,1(a2)
0000E6D6                            
0000E6D6                            loc_DA32:
0000E6D6 5C48                       		addq.w	#6,a0
0000E6D8 60EE                       		bra.s	loc_DA24
0000E6DA                            ; ===========================================================================
0000E6DA                            
0000E6DA                            loc_DA36:
0000E6DA 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E6DE                            
0000E6DE                            locret_DA3A:
0000E6DE 4E75                       		rts	
0000E6E0                            ; ===========================================================================
0000E6E0                            
0000E6E0                            loc_DA3C:
0000E6E0 4A28 0004                  		tst.b	4(a0)
0000E6E4 6A00                       		bpl.s	OPL_MakeItem
0000E6E6 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E6EC 6700                       		beq.s	OPL_MakeItem
0000E6EE 5C48                       		addq.w	#6,a0
0000E6F0 7000                       		moveq	#0,d0
0000E6F2 4E75                       		rts	
0000E6F4                            ; ===========================================================================
0000E6F4                            
0000E6F4                            OPL_MakeItem:
0000E6F4 6100 0000                  		bsr.w	SingleObjLoad
0000E6F8 6600                       		bne.s	locret_DA8A
0000E6FA 3358 0008                  		move.w	(a0)+,8(a1)
0000E6FE 3018                       		move.w	(a0)+,d0
0000E700 3200                       		move.w	d0,d1
0000E702 0240 0FFF                  		andi.w	#$FFF,d0
0000E706 3340 000C                  		move.w	d0,$C(a1)
0000E70A E559                       		rol.w	#2,d1
0000E70C 0201 0003                  		andi.b	#3,d1
0000E710 1341 0001                  		move.b	d1,1(a1)
0000E714 1341 0022                  		move.b	d1,$22(a1)
0000E718 1018                       		move.b	(a0)+,d0
0000E71A 6A00                       		bpl.s	loc_DA80
0000E71C 0200 007F                  		andi.b	#$7F,d0
0000E720 1342 0023                  		move.b	d2,$23(a1)
0000E724                            
0000E724                            loc_DA80:
0000E724 1280                       		move.b	d0,0(a1)
0000E726 1358 0028                  		move.b	(a0)+,$28(a1)
0000E72A 7000                       		moveq	#0,d0
0000E72C                            
0000E72C                            locret_DA8A:
0000E72C 4E75                       		rts	
0000E72E                            ; ---------------------------------------------------------------------------
0000E72E                            ; Single object	loading	subroutine
0000E72E                            ; ---------------------------------------------------------------------------
0000E72E                            
0000E72E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E72E                            
0000E72E                            
0000E72E                            SingleObjLoad:
0000E72E 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E732 303C 005F                  		move.w	#$5F,d0
0000E736                            
0000E736                            loc_DA94:
0000E736 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E738 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E73A 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E73E 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E742                            
0000E742                            locret_DAA0:
0000E742 4E75                       		rts	
0000E744                            ; End of function SingleObjLoad
0000E744                            
0000E744                            
0000E744                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E744                            
0000E744                            
0000E744                            SingleObjLoad2:
0000E744 2248                       		movea.l	a0,a1
0000E746 303C F000                  		move.w	#-$1000,d0
0000E74A 9048                       		sub.w	a0,d0
0000E74C EC48                       		lsr.w	#6,d0
0000E74E 5340                       		subq.w	#1,d0
0000E750 6500                       		bcs.s	locret_DABC
0000E752                            
0000E752                            loc_DAB0:
0000E752 4A11                       		tst.b	(a1)
0000E754 6700                       		beq.s	locret_DABC
0000E756 43E9 0040                  		lea	$40(a1),a1
0000E75A 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E75E                            
0000E75E                            locret_DABC:
0000E75E 4E75                       		rts	
0000E760                            ; End of function SingleObjLoad2
0000E760                            
0000E760                            ; ===========================================================================
0000E760                            ; ---------------------------------------------------------------------------
0000E760                            ; Object 41 - springs
0000E760                            ; ---------------------------------------------------------------------------
0000E760                            
0000E760                            Obj41:					; XREF: Obj_Index
0000E760 7000                       		moveq	#0,d0
0000E762 1028 0024                  		move.b	$24(a0),d0
0000E766 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E76A 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E76E 6100 FB38                  		bsr.w	DisplaySprite
0000E772 3028 0008                  		move.w	8(a0),d0
0000E776 0240 FF80                  		andi.w	#$FF80,d0
0000E77A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E77E 0441 0080                  		subi.w	#$80,d1
0000E782 0241 FF80                  		andi.w	#$FF80,d1
0000E786 9041                       		sub.w	d1,d0
0000E788 0C40 0280                  		cmpi.w	#$280,d0
0000E78C 6200 FB56                  		bhi.w	DeleteObject
0000E790 4E75                       		rts	
0000E792                            ; ===========================================================================
0000E792 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E794 0000                       		dc.w Obj41_Up-Obj41_Index
0000E796 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E798 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E79A 0000                       		dc.w Obj41_LR-Obj41_Index
0000E79C 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E79E 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E7A0 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E7A2 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E7A4 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E7A6                            
0000E7A6 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E7A8 F600                       		dc.w -$A00		; power	of yellow spring
0000E7AA                            ; ===========================================================================
0000E7AA                            
0000E7AA                            Obj41_Main:				; XREF: Obj41_Index
0000E7AA 5428 0024                  		addq.b	#2,$24(a0)
0000E7AE 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E7B6 317C 0523 0002             		move.w	#$523,2(a0)
0000E7BC 0028 0004 0001             		ori.b	#4,1(a0)
0000E7C2 117C 0010 0019             		move.b	#$10,$19(a0)
0000E7C8 117C 0004 0018             		move.b	#4,$18(a0)
0000E7CE 1028 0028                  		move.b	$28(a0),d0
0000E7D2 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E7D6 6700                       		beq.s	loc_DB54	; if not, branch
0000E7D8 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E7DE 117C 0001 001C             		move.b	#1,$1C(a0)
0000E7E4 117C 0003 001A             		move.b	#3,$1A(a0)
0000E7EA 317C 0533 0002             		move.w	#$533,2(a0)
0000E7F0 117C 0008 0019             		move.b	#8,$19(a0)
0000E7F6                            
0000E7F6                            loc_DB54:
0000E7F6 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E7FA 6700                       		beq.s	loc_DB66	; if not, branch
0000E7FC 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E802 08E8 0001 0022             		bset	#1,$22(a0)
0000E808                            
0000E808                            loc_DB66:
0000E808 0800 0001                  		btst	#1,d0
0000E80C 6700                       		beq.s	loc_DB72
0000E80E 08E8 0005 0002             		bset	#5,2(a0)
0000E814                            
0000E814                            loc_DB72:
0000E814 0240 000F                  		andi.w	#$F,d0
0000E818 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E81E 4E75                       		rts	
0000E820                            ; ===========================================================================
0000E820                            
0000E820                            Obj41_Up:				; XREF: Obj41_Index
0000E820 323C 001B                  		move.w	#$1B,d1
0000E824 343C 0008                  		move.w	#8,d2
0000E828 363C 0010                  		move.w	#$10,d3
0000E82C 3828 0008                  		move.w	8(a0),d4
0000E830 6100 0000                  		bsr.w	SolidObject
0000E834 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E838 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E83A 4E75                       		rts	
0000E83C                            ; ===========================================================================
0000E83C                            
0000E83C                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E83C 5428 0024                  		addq.b	#2,$24(a0)
0000E840 5069 000C                  		addq.w	#8,$C(a1)
0000E844 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E84A 08E9 0001 0022             		bset	#1,$22(a1)
0000E850 08A9 0003 0022             		bclr	#3,$22(a1)
0000E856 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E85C 137C 0002 0024             		move.b	#2,$24(a1)
0000E862 08A8 0003 0022             		bclr	#3,$22(a0)
0000E868 4228 0025                  		clr.b	$25(a0)
0000E86C 303C 00CC                  		move.w	#$CC,d0
0000E870 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E876                            
0000E876                            Obj41_AniUp:				; XREF: Obj41_Index
0000E876 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E87C 6000 CA82                  		bra.w	AnimateSprite
0000E880                            ; ===========================================================================
0000E880                            
0000E880                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E880 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E886 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E88A 4E75                       		rts	
0000E88C                            ; ===========================================================================
0000E88C                            
0000E88C                            Obj41_LR:				; XREF: Obj41_Index
0000E88C 323C 0013                  		move.w	#$13,d1
0000E890 343C 000E                  		move.w	#$E,d2
0000E894 363C 000F                  		move.w	#$F,d3
0000E898 3828 0008                  		move.w	8(a0),d4
0000E89C 6100 0000                  		bsr.w	SolidObject
0000E8A0 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E8A6 6600                       		bne.s	loc_DC0C
0000E8A8 117C 0008 0024             		move.b	#8,$24(a0)
0000E8AE                            
0000E8AE                            loc_DC0C:
0000E8AE 0828 0005 0022             		btst	#5,$22(a0)
0000E8B4 6600                       		bne.s	Obj41_BounceLR
0000E8B6 4E75                       		rts	
0000E8B8                            ; ===========================================================================
0000E8B8                            
0000E8B8                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E8B8 5428 0024                  		addq.b	#2,$24(a0)
0000E8BC 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E8C2 5069 0008                  		addq.w	#8,8(a1)
0000E8C6 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E8CC 6600                       		bne.s	loc_DC36	; if yes, branch
0000E8CE 0469 0010 0008             		subi.w	#$10,8(a1)
0000E8D4 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E8D8                            
0000E8D8                            loc_DC36:
0000E8D8 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E8DE 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E8E4 0869 0000 0022             		bchg	#0,$22(a1)
0000E8EA 0829 0002 0022             		btst	#2,$22(a1)
0000E8F0 6600                       		bne.s	loc_DC56
0000E8F2 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E8F8                            
0000E8F8                            loc_DC56:
0000E8F8 08A8 0005 0022             		bclr	#5,$22(a0)
0000E8FE 08A9 0005 0022             		bclr	#5,$22(a1)
0000E904 303C 00CC                  		move.w	#$CC,d0
0000E908 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E90E                            
0000E90E                            Obj41_AniLR:				; XREF: Obj41_Index
0000E90E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E914 6000 C9EA                  		bra.w	AnimateSprite
0000E918                            ; ===========================================================================
0000E918                            
0000E918                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E918 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E91E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E922 4E75                       		rts	
0000E924                            ; ===========================================================================
0000E924                            
0000E924                            Obj41_Dwn:				; XREF: Obj41_Index
0000E924 323C 001B                  		move.w	#$1B,d1
0000E928 343C 0008                  		move.w	#8,d2
0000E92C 363C 0010                  		move.w	#$10,d3
0000E930 3828 0008                  		move.w	8(a0),d4
0000E934 6100 0000                  		bsr.w	SolidObject
0000E938 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E93E 6600                       		bne.s	loc_DCA4
0000E940 117C 000E 0024             		move.b	#$E,$24(a0)
0000E946                            
0000E946                            loc_DCA4:
0000E946 4A28 0025                  		tst.b	$25(a0)
0000E94A 6600                       		bne.s	locret_DCAE
0000E94C 4A44                       		tst.w	d4
0000E94E 6B00                       		bmi.s	Obj41_BounceDwn
0000E950                            
0000E950                            locret_DCAE:
0000E950 4E75                       		rts	
0000E952                            ; ===========================================================================
0000E952                            
0000E952                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E952 5428 0024                  		addq.b	#2,$24(a0)
0000E956 5169 000C                  		subq.w	#8,$C(a1)
0000E95A 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E960 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E964 08E9 0001 0022             		bset	#1,$22(a1)
0000E96A 08A9 0003 0022             		bclr	#3,$22(a1)
0000E970 137C 0002 0024             		move.b	#2,$24(a1)
0000E976 08A8 0003 0022             		bclr	#3,$22(a0)
0000E97C 4228 0025                  		clr.b	$25(a0)
0000E980 303C 00CC                  		move.w	#$CC,d0
0000E984 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E98A                            
0000E98A                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E98A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E990 6000 C96E                  		bra.w	AnimateSprite
0000E994                            ; ===========================================================================
0000E994                            
0000E994                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E994 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E99A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E99E 4E75                       		rts	
0000E9A0                            ; ===========================================================================
0000E9A0                            Ani_obj41:
0000E9A0                            	include "_anim\obj41.asm"
0000E9A0                            ; ---------------------------------------------------------------------------
0000E9A0                            ; Animation script - springs
0000E9A0                            ; ---------------------------------------------------------------------------
0000E9A0 0000                       		dc.w byte_DD02-Ani_obj41
0000E9A2 0000                       		dc.w byte_DD0E-Ani_obj41
0000E9A4 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E9B0 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E9BC                            		even
0000E9BC                            		even
0000E9BC                            
0000E9BC                            ; ---------------------------------------------------------------------------
0000E9BC                            ; Sprite mappings - springs
0000E9BC                            ; ---------------------------------------------------------------------------
0000E9BC                            Map_obj41:
0000E9BC                            	include "_maps\obj41.asm"
0000E9BC                            ; ---------------------------------------------------------------------------
0000E9BC                            ; Sprite mappings - springs
0000E9BC                            ; ---------------------------------------------------------------------------
0000E9BC 0000                       		dc.w byte_DD26-Map_obj41
0000E9BE 0000                       		dc.w byte_DD31-Map_obj41
0000E9C0 0000                       		dc.w byte_DD37-Map_obj41
0000E9C2 0000                       		dc.w byte_DD47-Map_obj41
0000E9C4 0000                       		dc.w byte_DD4D-Map_obj41
0000E9C6 0000                       		dc.w byte_DD53-Map_obj41
0000E9C8 02                         byte_DD26:	dc.b 2
0000E9C9 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E9CE 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E9D3 01                         byte_DD31:	dc.b 1
0000E9D4 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E9D9 03                         byte_DD37:	dc.b 3
0000E9DA E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E9DF F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E9E4 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E9E9 01                         byte_DD47:	dc.b 1
0000E9EA F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E9EF 01                         byte_DD4D:	dc.b 1
0000E9F0 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E9F5 04                         byte_DD53:	dc.b 4
0000E9F6 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E9FB F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000EA00 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000EA05 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000EA0A                            		even
0000EA0A                            		even
0000EA0A                            
0000EA0A                            ; ===========================================================================
0000EA0A                            ; ---------------------------------------------------------------------------
0000EA0A                            ; Object 42 - Newtron enemy (GHZ)
0000EA0A                            ; ---------------------------------------------------------------------------
0000EA0A                            
0000EA0A                            Obj42:					; XREF: Obj_Index
0000EA0A 7000                       		moveq	#0,d0
0000EA0C 1028 0024                  		move.b	$24(a0),d0
0000EA10 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000EA14 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000EA18                            ; ===========================================================================
0000EA18 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000EA1A 0000                       		dc.w Obj42_Action-Obj42_Index
0000EA1C 0000                       		dc.w Obj42_Delete-Obj42_Index
0000EA1E                            ; ===========================================================================
0000EA1E                            
0000EA1E                            Obj42_Main:				; XREF: Obj42_Index
0000EA1E 5428 0024                  		addq.b	#2,$24(a0)
0000EA22 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000EA2A 317C 049B 0002             		move.w	#$49B,2(a0)
0000EA30 117C 0004 0001             		move.b	#4,1(a0)
0000EA36 117C 0004 0018             		move.b	#4,$18(a0)
0000EA3C 117C 0014 0019             		move.b	#$14,$19(a0)
0000EA42 117C 0010 0016             		move.b	#$10,$16(a0)
0000EA48 117C 0008 0017             		move.b	#8,$17(a0)
0000EA4E                            
0000EA4E                            Obj42_Action:				; XREF: Obj42_Index
0000EA4E 7000                       		moveq	#0,d0
0000EA50 1028 0025                  		move.b	$25(a0),d0
0000EA54 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000EA58 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000EA5C 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000EA62 6100 C89C                  		bsr.w	AnimateSprite
0000EA66 6000 0000                  		bra.w	MarkObjGone
0000EA6A                            ; ===========================================================================
0000EA6A 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000EA6C 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000EA6E 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000EA70 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000EA72 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000EA74                            ; ===========================================================================
0000EA74                            
0000EA74                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000EA74 08E8 0000 0022             		bset	#0,$22(a0)
0000EA7A 3038 D008                  		move.w	($FFFFD008).w,d0
0000EA7E 9068 0008                  		sub.w	8(a0),d0
0000EA82 6400                       		bcc.s	loc_DDEA
0000EA84 4440                       		neg.w	d0
0000EA86 08A8 0000 0022             		bclr	#0,$22(a0)
0000EA8C                            
0000EA8C                            loc_DDEA:
0000EA8C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000EA90 6400                       		bcc.s	locret_DE12	; if not, branch
0000EA92 5428 0025                  		addq.b	#2,$25(a0)
0000EA96 117C 0001 001C             		move.b	#1,$1C(a0)
0000EA9C 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000EAA0 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000EAA2 317C 249B 0002             		move.w	#$249B,2(a0)
0000EAA8 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000EAAE 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000EAB4                            
0000EAB4                            locret_DE12:
0000EAB4 4E75                       		rts	
0000EAB6                            ; ===========================================================================
0000EAB6                            
0000EAB6                            Obj42_Type00:				; XREF: Obj42_Index2
0000EAB6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000EABC 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000EABE 08E8 0000 0022             		bset	#0,$22(a0)
0000EAC4 3038 D008                  		move.w	($FFFFD008).w,d0
0000EAC8 9068 0008                  		sub.w	8(a0),d0
0000EACC 6400                       		bcc.s	locret_DE32
0000EACE 08A8 0000 0022             		bclr	#0,$22(a0)
0000EAD4                            
0000EAD4                            locret_DE32:
0000EAD4 4E75                       		rts	
0000EAD6                            ; ===========================================================================
0000EAD6                            
0000EAD6                            Obj42_Fall:				; XREF: Obj42_Type00
0000EAD6 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000EADC 6600                       		bne.s	loc_DE42
0000EADE 117C 000C 0020             		move.b	#$C,$20(a0)
0000EAE4                            
0000EAE4                            loc_DE42:
0000EAE4 6100 F726                  		bsr.w	ObjectFall
0000EAE8 6100 0000                  		bsr.w	ObjHitFloor
0000EAEC 4A41                       		tst.w	d1		; has newtron hit the floor?
0000EAEE 6A00                       		bpl.s	locret_DE86	; if not, branch
0000EAF0 D368 000C                  		add.w	d1,$C(a0)
0000EAF4 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000EAFA 5428 0025                  		addq.b	#2,$25(a0)
0000EAFE 117C 0002 001C             		move.b	#2,$1C(a0)
0000EB04 0828 0005 0002             		btst	#5,2(a0)
0000EB0A 6700                       		beq.s	Obj42_Move
0000EB0C 5228 001C                  		addq.b	#1,$1C(a0)
0000EB10                            
0000EB10                            Obj42_Move:
0000EB10 117C 000D 0020             		move.b	#$D,$20(a0)
0000EB16 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000EB1C 0828 0000 0022             		btst	#0,$22(a0)
0000EB22 6600                       		bne.s	locret_DE86
0000EB24 4468 0010                  		neg.w	$10(a0)
0000EB28                            
0000EB28                            locret_DE86:
0000EB28 4E75                       		rts	
0000EB2A                            ; ===========================================================================
0000EB2A                            
0000EB2A                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000EB2A 6100 F742                  		bsr.w	SpeedToPos
0000EB2E 6100 0000                  		bsr.w	ObjHitFloor
0000EB32 0C41 FFF8                  		cmpi.w	#-8,d1
0000EB36 6D00                       		blt.s	loc_DEA2
0000EB38 0C41 000C                  		cmpi.w	#$C,d1
0000EB3C 6C00                       		bge.s	loc_DEA2
0000EB3E D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000EB42 4E75                       		rts	
0000EB44                            ; ===========================================================================
0000EB44                            
0000EB44                            loc_DEA2:
0000EB44 5428 0025                  		addq.b	#2,$25(a0)
0000EB48 4E75                       		rts	
0000EB4A                            ; ===========================================================================
0000EB4A                            
0000EB4A                            Obj42_Speed:				; XREF: Obj42_Index2
0000EB4A 6000 F722                  		bra.w	SpeedToPos
0000EB4E                            ; ===========================================================================
0000EB4E                            
0000EB4E                            Obj42_Type01:				; XREF: Obj42_Index2
0000EB4E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000EB54 6600                       		bne.s	Obj42_FireMissile
0000EB56 117C 000C 0020             		move.b	#$C,$20(a0)
0000EB5C                            
0000EB5C                            Obj42_FireMissile:
0000EB5C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000EB62 6600                       		bne.s	locret_DF14
0000EB64 4A28 0032                  		tst.b	$32(a0)
0000EB68 6600                       		bne.s	locret_DF14
0000EB6A 117C 0001 0032             		move.b	#1,$32(a0)
0000EB70 6100 FBBC                  		bsr.w	SingleObjLoad
0000EB74 6600                       		bne.s	locret_DF14
0000EB76 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000EB7A 3368 0008 0008             		move.w	8(a0),8(a1)
0000EB80 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EB86 5169 000C                  		subq.w	#8,$C(a1)
0000EB8A 337C 0200 0010             		move.w	#$200,$10(a1)
0000EB90 303C 0014                  		move.w	#$14,d0
0000EB94 0828 0000 0022             		btst	#0,$22(a0)
0000EB9A 6600                       		bne.s	loc_DF04
0000EB9C 4440                       		neg.w	d0
0000EB9E 4469 0010                  		neg.w	$10(a1)
0000EBA2                            
0000EBA2                            loc_DF04:
0000EBA2 D169 0008                  		add.w	d0,8(a1)
0000EBA6 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000EBAC 137C 0001 0028             		move.b	#1,$28(a1)
0000EBB2                            
0000EBB2                            locret_DF14:
0000EBB2 4E75                       		rts	
0000EBB4                            ; ===========================================================================
0000EBB4                            
0000EBB4                            Obj42_Delete:				; XREF: Obj42_Index
0000EBB4 6000 F72E                  		bra.w	DeleteObject
0000EBB8                            ; ===========================================================================
0000EBB8                            Ani_obj42:
0000EBB8                            	include "_anim\obj42.asm"
0000EBB8                            ; ---------------------------------------------------------------------------
0000EBB8                            ; Animation script - Newtron enemy
0000EBB8                            ; ---------------------------------------------------------------------------
0000EBB8 0000                       		dc.w byte_DF24-Ani_obj42
0000EBBA 0000                       		dc.w byte_DF28-Ani_obj42
0000EBBC 0000                       		dc.w byte_DF30-Ani_obj42
0000EBBE 0000                       		dc.w byte_DF34-Ani_obj42
0000EBC0 0000                       		dc.w byte_DF38-Ani_obj42
0000EBC2 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000EBC6 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000EBCE 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000EBD2 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000EBD6 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000EBE0                            		even
0000EBE0                            		even
0000EBE0                            
0000EBE0                            ; ---------------------------------------------------------------------------
0000EBE0                            ; Sprite mappings - Newtron enemy (GHZ)
0000EBE0                            ; ---------------------------------------------------------------------------
0000EBE0                            Map_obj42:
0000EBE0                            	include "_maps\obj42.asm"
0000EBE0                            ; ---------------------------------------------------------------------------
0000EBE0                            ; Sprite mappings - Newtron enemy (GHZ)
0000EBE0                            ; ---------------------------------------------------------------------------
0000EBE0 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000EBE4 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000EBE8 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000EBEC 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000EBF0 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000EBF4 0000                       		dc.w byte_DFF8-Map_obj42
0000EBF6 03                         byte_DF58:	dc.b 3
0000EBF7 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000EBFC F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000EC01 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000EC06 03                         byte_DF68:	dc.b 3
0000EC07 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000EC0C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EC11 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EC16 03                         byte_DF78:	dc.b 3
0000EC17 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000EC1C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EC21 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EC26 04                         byte_DF88:	dc.b 4
0000EC27 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000EC2C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EC31 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000EC36 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000EC3B 03                         byte_DF9D:	dc.b 3
0000EC3C F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000EC41 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000EC46 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000EC4B 02                         byte_DFAD:	dc.b 2
0000EC4C F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EC51 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EC56 03                         byte_DFB8:	dc.b 3
0000EC57 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EC5C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EC61 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000EC66 03                         byte_DFC8:	dc.b 3
0000EC67 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EC6C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EC71 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000EC76 03                         byte_DFD8:	dc.b 3
0000EC77 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EC7C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EC81 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000EC86 03                         byte_DFE8:	dc.b 3
0000EC87 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EC8C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EC91 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000EC96 00                         byte_DFF8:	dc.b 0
0000EC98 00                         		even
0000EC98 00                         		even
0000EC98                            
0000EC98                            ; ===========================================================================
0000EC98                            ; ---------------------------------------------------------------------------
0000EC98                            ; Object 43 - Roller enemy (SYZ)
0000EC98                            ; ---------------------------------------------------------------------------
0000EC98                            
0000EC98                            Obj43:					; XREF: Obj_Index
0000EC98 7000                       		moveq	#0,d0
0000EC9A 1028 0024                  		move.b	$24(a0),d0
0000EC9E 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000ECA2 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000ECA6                            ; ===========================================================================
0000ECA6 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000ECA8 0000                       		dc.w Obj43_Action-Obj43_Index
0000ECAA                            ; ===========================================================================
0000ECAA                            
0000ECAA                            Obj43_Main:				; XREF: Obj43_Index
0000ECAA 117C 000E 0016             		move.b	#$E,$16(a0)
0000ECB0 117C 0008 0017             		move.b	#8,$17(a0)
0000ECB6 6100 F554                  		bsr.w	ObjectFall
0000ECBA 6100 0000                  		bsr.w	ObjHitFloor
0000ECBE 4A41                       		tst.w	d1
0000ECC0 6A00                       		bpl.s	locret_E052
0000ECC2 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000ECC6 317C 0000 0012             		move.w	#0,$12(a0)
0000ECCC 5428 0024                  		addq.b	#2,$24(a0)
0000ECD0 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000ECD8 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000ECDE 117C 0004 0001             		move.b	#4,1(a0)
0000ECE4 117C 0004 0018             		move.b	#4,$18(a0)
0000ECEA 117C 0010 0019             		move.b	#$10,$19(a0)
0000ECF0                            
0000ECF0                            locret_E052:
0000ECF0 4E75                       		rts	
0000ECF2                            ; ===========================================================================
0000ECF2                            
0000ECF2                            Obj43_Action:				; XREF: Obj43_Index
0000ECF2 7000                       		moveq	#0,d0
0000ECF4 1028 0025                  		move.b	$25(a0),d0
0000ECF8 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000ECFC 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000ED00 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000ED06 6100 C5F8                  		bsr.w	AnimateSprite
0000ED0A 3028 0008                  		move.w	8(a0),d0
0000ED0E 0240 FF80                  		andi.w	#$FF80,d0
0000ED12 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED16 0441 0080                  		subi.w	#$80,d1
0000ED1A 0241 FF80                  		andi.w	#$FF80,d1
0000ED1E 9041                       		sub.w	d1,d0
0000ED20 0C40 0280                  		cmpi.w	#$280,d0
0000ED24 6E00 0000                  		bgt.w	Obj43_ChkGone
0000ED28 6000 F57E                  		bra.w	DisplaySprite
0000ED2C                            ; ===========================================================================
0000ED2C                            
0000ED2C                            Obj43_ChkGone:				; XREF: Obj43_Action
0000ED2C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000ED30 7000                       		moveq	#0,d0
0000ED32 1028 0023                  		move.b	$23(a0),d0
0000ED36 6700                       		beq.s	Obj43_Delete
0000ED38 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000ED3E                            
0000ED3E                            Obj43_Delete:
0000ED3E 6000 F5A4                  		bra.w	DeleteObject
0000ED42                            ; ===========================================================================
0000ED42 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000ED44 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000ED46 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000ED48 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000ED4A                            ; ===========================================================================
0000ED4A                            
0000ED4A                            Obj43_RollChk:				; XREF: Obj43_Index2
0000ED4A 3038 D008                  		move.w	($FFFFD008).w,d0
0000ED4E 0440 0100                  		subi.w	#$100,d0
0000ED52 6500                       		bcs.s	loc_E0D2
0000ED54 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000ED58 6500                       		bcs.s	loc_E0D2
0000ED5A 5828 0025                  		addq.b	#4,$25(a0)
0000ED5E 117C 0002 001C             		move.b	#2,$1C(a0)
0000ED64 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000ED6A 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000ED70                            
0000ED70                            loc_E0D2:
0000ED70 588F                       		addq.l	#4,sp
0000ED72 4E75                       		rts	
0000ED74                            ; ===========================================================================
0000ED74                            
0000ED74                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000ED74 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000ED7A 6700                       		beq.s	loc_E0F8
0000ED7C 5368 0030                  		subq.w	#1,$30(a0)
0000ED80 6A00                       		bpl.s	locret_E0F6
0000ED82 117C 0001 001C             		move.b	#1,$1C(a0)
0000ED88 317C 0700 0010             		move.w	#$700,$10(a0)
0000ED8E 117C 008E 0020             		move.b	#$8E,$20(a0)
0000ED94                            
0000ED94                            locret_E0F6:
0000ED94 4E75                       		rts	
0000ED96                            ; ===========================================================================
0000ED96                            
0000ED96                            loc_E0F8:
0000ED96 5428 0025                  		addq.b	#2,$25(a0)
0000ED9A 4E75                       		rts	
0000ED9C                            ; ===========================================================================
0000ED9C                            
0000ED9C                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000ED9C 6100 0000                  		bsr.w	Obj43_Stop
0000EDA0 6100 F4CC                  		bsr.w	SpeedToPos
0000EDA4 6100 0000                  		bsr.w	ObjHitFloor
0000EDA8 0C41 FFF8                  		cmpi.w	#-8,d1
0000EDAC 6D00                       		blt.s	Obj43_Jump
0000EDAE 0C41 000C                  		cmpi.w	#$C,d1
0000EDB2 6C00                       		bge.s	Obj43_Jump
0000EDB4 D368 000C                  		add.w	d1,$C(a0)
0000EDB8 4E75                       		rts	
0000EDBA                            ; ===========================================================================
0000EDBA                            
0000EDBA                            Obj43_Jump:
0000EDBA 5428 0025                  		addq.b	#2,$25(a0)
0000EDBE 08E8 0000 0032             		bset	#0,$32(a0)
0000EDC4 6700                       		beq.s	locret_E12E
0000EDC6 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000EDCC                            
0000EDCC                            locret_E12E:
0000EDCC 4E75                       		rts	
0000EDCE                            ; ===========================================================================
0000EDCE                            
0000EDCE                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000EDCE 6100 F43C                  		bsr.w	ObjectFall
0000EDD2 4A68 0012                  		tst.w	$12(a0)
0000EDD6 6B00                       		bmi.s	locret_E150
0000EDD8 6100 0000                  		bsr.w	ObjHitFloor
0000EDDC 4A41                       		tst.w	d1
0000EDDE 6A00                       		bpl.s	locret_E150
0000EDE0 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000EDE4 5528 0025                  		subq.b	#2,$25(a0)
0000EDE8 317C 0000 0012             		move.w	#0,$12(a0)
0000EDEE                            
0000EDEE                            locret_E150:
0000EDEE 4E75                       		rts	
0000EDF0                            
0000EDF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EDF0                            
0000EDF0                            
0000EDF0                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000EDF0 4A28 0032                  		tst.b	$32(a0)
0000EDF4 6B00                       		bmi.s	locret_E188
0000EDF6 3038 D008                  		move.w	($FFFFD008).w,d0
0000EDFA 0440 0030                  		subi.w	#$30,d0
0000EDFE 9068 0008                  		sub.w	8(a0),d0
0000EE02 6400                       		bcc.s	locret_E188
0000EE04 117C 0000 001C             		move.b	#0,$1C(a0)
0000EE0A 117C 000E 0020             		move.b	#$E,$20(a0)
0000EE10 4268 0010                  		clr.w	$10(a0)
0000EE14 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EE1A 117C 0002 0025             		move.b	#2,$25(a0)
0000EE20 08E8 0007 0032             		bset	#7,$32(a0)
0000EE26                            
0000EE26                            locret_E188:
0000EE26 4E75                       		rts	
0000EE28                            ; End of function Obj43_Stop
0000EE28                            
0000EE28                            ; ===========================================================================
0000EE28                            Ani_obj43:
0000EE28                            	include "_anim\obj43.asm"
0000EE28                            ; ---------------------------------------------------------------------------
0000EE28                            ; Animation script - Roller enemy
0000EE28                            ; ---------------------------------------------------------------------------
0000EE28 0000                       		dc.w byte_E190-Ani_obj43
0000EE2A 0000                       		dc.w byte_E196-Ani_obj43
0000EE2C 0000                       		dc.w byte_E19C-Ani_obj43
0000EE2E 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000EE34 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000EE3A 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EE40 00                         		even
0000EE40 00                         		even
0000EE40                            
0000EE40                            ; ---------------------------------------------------------------------------
0000EE40                            ; Sprite mappings - Roller enemy (SYZ)
0000EE40                            ; ---------------------------------------------------------------------------
0000EE40                            Map_obj43:
0000EE40                            	include "_maps\obj43.asm"
0000EE40                            Map_61da:
0000EE40 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000EE42 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000EE44 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000EE46 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000EE48 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000EE4A 02                         Map_61da_A: 	dc.b $2
0000EE4B DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000EE50 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000EE55 02                         Map_61da_15: 	dc.b $2
0000EE56 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000EE5B FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000EE60 01                         Map_61da_20: 	dc.b $1
0000EE61 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000EE66 01                         Map_61da_26: 	dc.b $1
0000EE67 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000EE6C 01                         Map_61da_2C: 	dc.b $1
0000EE6D F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000EE72                            	even
0000EE72                            	even
0000EE72                            
0000EE72                            ; ===========================================================================
0000EE72                            ; ---------------------------------------------------------------------------
0000EE72                            ; Object 44 - walls (GHZ)
0000EE72                            ; ---------------------------------------------------------------------------
0000EE72                            
0000EE72                            Obj44:					; XREF: Obj_Index
0000EE72 7000                       		moveq	#0,d0
0000EE74 1028 0024                  		move.b	$24(a0),d0
0000EE78 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000EE7C 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000EE80                            ; ===========================================================================
0000EE80 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000EE82 0000                       		dc.w Obj44_Solid-Obj44_Index
0000EE84 0000                       		dc.w Obj44_Display-Obj44_Index
0000EE86                            ; ===========================================================================
0000EE86                            
0000EE86                            Obj44_Main:				; XREF: Obj44_Index
0000EE86 5428 0024                  		addq.b	#2,$24(a0)
0000EE8A 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000EE92 317C 434C 0002             		move.w	#$434C,2(a0)
0000EE98 0028 0004 0001             		ori.b	#4,1(a0)
0000EE9E 117C 0008 0019             		move.b	#8,$19(a0)
0000EEA4 117C 0006 0018             		move.b	#6,$18(a0)
0000EEAA 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EEB0 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EEB6 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EEB8 5428 0024                  		addq.b	#2,$24(a0)
0000EEBC 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EEBE                            ; ===========================================================================
0000EEBE                            
0000EEBE                            Obj44_Solid:				; XREF: Obj44_Index
0000EEBE 323C 0013                  		move.w	#$13,d1
0000EEC2 343C 0028                  		move.w	#$28,d2
0000EEC6 6100 A6A2                  		bsr.w	Obj44_SolidWall
0000EECA                            
0000EECA                            Obj44_Display:				; XREF: Obj44_Index
0000EECA 6100 F3DC                  		bsr.w	DisplaySprite
0000EECE 3028 0008                  		move.w	8(a0),d0
0000EED2 0240 FF80                  		andi.w	#$FF80,d0
0000EED6 3238 F700                  		move.w	($FFFFF700).w,d1
0000EEDA 0441 0080                  		subi.w	#$80,d1
0000EEDE 0241 FF80                  		andi.w	#$FF80,d1
0000EEE2 9041                       		sub.w	d1,d0
0000EEE4 0C40 0280                  		cmpi.w	#$280,d0
0000EEE8 6200 F3FA                  		bhi.w	DeleteObject
0000EEEC 4E75                       		rts	
0000EEEE                            ; ===========================================================================
0000EEEE                            ; ---------------------------------------------------------------------------
0000EEEE                            ; Sprite mappings - walls (GHZ)
0000EEEE                            ; ---------------------------------------------------------------------------
0000EEEE                            Map_obj44:
0000EEEE                            	include "_maps\obj44.asm"
0000EEEE                            ; ---------------------------------------------------------------------------
0000EEEE                            ; Sprite mappings - walls (GHZ)
0000EEEE                            ; ---------------------------------------------------------------------------
0000EEEE 0000                       		dc.w byte_E256-Map_obj44
0000EEF0 0000                       		dc.w byte_E26B-Map_obj44
0000EEF2 0000                       		dc.w byte_E280-Map_obj44
0000EEF4 04                         byte_E256:	dc.b 4
0000EEF5 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EEFA F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EEFF 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EF04 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EF09 04                         byte_E26B:	dc.b 4
0000EF0A E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EF0F F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EF14 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EF19 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EF1E 04                         byte_E280:	dc.b 4
0000EF1F E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EF24 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EF29 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EF2E 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EF34 00                         		even
0000EF34 00                         		even
0000EF34                            
0000EF34                            ; ===========================================================================
0000EF34                            ; ---------------------------------------------------------------------------
0000EF34                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EF34                            ; ---------------------------------------------------------------------------
0000EF34                            
0000EF34                            Obj13:					; XREF: Obj_Index
0000EF34 7000                       		moveq	#0,d0
0000EF36 1028 0024                  		move.b	$24(a0),d0
0000EF3A 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EF3E 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EF42 6000 0000                  		bra.w	Obj14_ChkDel
0000EF46                            ; ===========================================================================
0000EF46 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EF48 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EF4A                            ; ---------------------------------------------------------------------------
0000EF4A                            ;
0000EF4A                            ; Lava ball production rates
0000EF4A                            ;
0000EF4A 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EF50                            ; ===========================================================================
0000EF50                            
0000EF50                            Obj13_Main:				; XREF: Obj13_Index
0000EF50 5428 0024                  		addq.b	#2,$24(a0)
0000EF54 1028 0028                  		move.b	$28(a0),d0
0000EF58 E848                       		lsr.w	#4,d0
0000EF5A 0240 000F                  		andi.w	#$F,d0
0000EF5E 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EF64 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EF6A 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EF70                            
0000EF70                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EF70 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EF74 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EF76 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EF7C 6100 F5A4                  		bsr.w	ChkObjOnScreen
0000EF80 6600                       		bne.s	locret_E302
0000EF82 6100 F7AA                  		bsr.w	SingleObjLoad
0000EF86 6600                       		bne.s	locret_E302
0000EF88 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EF8C 3368 0008 0008             		move.w	8(a0),8(a1)
0000EF92 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EF98 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EF9E                            
0000EF9E                            locret_E302:
0000EF9E 4E75                       		rts	
0000EFA0                            ; ===========================================================================
0000EFA0                            ; ---------------------------------------------------------------------------
0000EFA0                            ; Object 14 - lava balls (MZ, SLZ)
0000EFA0                            ; ---------------------------------------------------------------------------
0000EFA0                            
0000EFA0                            Obj14:					; XREF: Obj_Index
0000EFA0 7000                       		moveq	#0,d0
0000EFA2 1028 0024                  		move.b	$24(a0),d0
0000EFA6 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EFAA 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EFAE 6000 F2F8                  		bra.w	DisplaySprite
0000EFB2                            ; ===========================================================================
0000EFB2 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EFB4 0000                       		dc.w Obj14_Action-Obj14_Index
0000EFB6 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EFB8                            
0000EFB8 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EFC2 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EFCA                            ; ===========================================================================
0000EFCA                            
0000EFCA                            Obj14_Main:				; XREF: Obj14_Index
0000EFCA 5428 0024                  		addq.b	#2,$24(a0)
0000EFCE 117C 0008 0016             		move.b	#8,$16(a0)
0000EFD4 117C 0008 0017             		move.b	#8,$17(a0)
0000EFDA 217C 0000 BEFE 0004        		move.l	#Map_obj14,4(a0)
0000EFE2 317C 0345 0002             		move.w	#$345,2(a0)
0000EFE8 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EFEE 6600                       		bne.s	loc_E35A
0000EFF0 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EFF6                            
0000EFF6                            loc_E35A:
0000EFF6 117C 0004 0001             		move.b	#4,1(a0)
0000EFFC 117C 0003 0018             		move.b	#3,$18(a0)
0000F002 117C 008B 0020             		move.b	#$8B,$20(a0)
0000F008 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F00E 4A28 0029                  		tst.b	$29(a0)
0000F012 6700                       		beq.s	Obj14_SetSpeed
0000F014 5428 0018                  		addq.b	#2,$18(a0)
0000F018                            
0000F018                            Obj14_SetSpeed:
0000F018 7000                       		moveq	#0,d0
0000F01A 1028 0028                  		move.b	$28(a0),d0
0000F01E D040                       		add.w	d0,d0
0000F020 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000F026 117C 0008 0019             		move.b	#8,$19(a0)
0000F02C 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000F032 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000F034 117C 0010 0019             		move.b	#$10,$19(a0)
0000F03A 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000F040 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000F046 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000F04C                            
0000F04C                            Obj14_PlaySnd:
0000F04C 303C 00AE                  		move.w	#$AE,d0
0000F050 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000F056                            
0000F056                            Obj14_Action:				; XREF: Obj14_Index
0000F056 7000                       		moveq	#0,d0
0000F058 1028 0028                  		move.b	$28(a0),d0
0000F05C D040                       		add.w	d0,d0
0000F05E 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000F062 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000F066 6100 F206                  		bsr.w	SpeedToPos
0000F06A 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000F070 6100 C28E                  		bsr.w	AnimateSprite
0000F074                            
0000F074                            Obj14_ChkDel:				; XREF: Obj13
0000F074 3028 0008                  		move.w	8(a0),d0
0000F078 0240 FF80                  		andi.w	#$FF80,d0
0000F07C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F080 0441 0080                  		subi.w	#$80,d1
0000F084 0241 FF80                  		andi.w	#$FF80,d1
0000F088 9041                       		sub.w	d1,d0
0000F08A 0C40 0280                  		cmpi.w	#$280,d0
0000F08E 6200 F254                  		bhi.w	DeleteObject
0000F092 4E75                       		rts	
0000F094                            ; ===========================================================================
0000F094 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000F098 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000F09C 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000F0A0 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000F0A4 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000F0A6                            ; ===========================================================================
0000F0A6                            ; lavaball types 00-03 fly up and fall back down
0000F0A6                            
0000F0A6                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000F0A6 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000F0AC 3028 0030                  		move.w	$30(a0),d0
0000F0B0 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000F0B4 6400                       		bcc.s	loc_E41E	; if not, branch
0000F0B6 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000F0BA                            
0000F0BA                            loc_E41E:
0000F0BA 08A8 0001 0022             		bclr	#1,$22(a0)
0000F0C0 4A68 0012                  		tst.w	$12(a0)
0000F0C4 6A00                       		bpl.s	locret_E430
0000F0C6 08E8 0001 0022             		bset	#1,$22(a0)
0000F0CC                            
0000F0CC                            locret_E430:
0000F0CC 4E75                       		rts	
0000F0CE                            ; ===========================================================================
0000F0CE                            ; lavaball type	04 flies up until it hits the ceiling
0000F0CE                            
0000F0CE                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000F0CE 08E8 0001 0022             		bset	#1,$22(a0)
0000F0D4 6100 0000                  		bsr.w	ObjHitCeiling
0000F0D8 4A41                       		tst.w	d1
0000F0DA 6A00                       		bpl.s	locret_E452
0000F0DC 117C 0008 0028             		move.b	#8,$28(a0)
0000F0E2 117C 0001 001C             		move.b	#1,$1C(a0)
0000F0E8 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000F0EE                            
0000F0EE                            locret_E452:
0000F0EE 4E75                       		rts	
0000F0F0                            ; ===========================================================================
0000F0F0                            ; lavaball type	05 falls down until it hits the	floor
0000F0F0                            
0000F0F0                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000F0F0 08A8 0001 0022             		bclr	#1,$22(a0)
0000F0F6 6100 0000                  		bsr.w	ObjHitFloor
0000F0FA 4A41                       		tst.w	d1
0000F0FC 6A00                       		bpl.s	locret_E474
0000F0FE 117C 0008 0028             		move.b	#8,$28(a0)
0000F104 117C 0001 001C             		move.b	#1,$1C(a0)
0000F10A 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000F110                            
0000F110                            locret_E474:
0000F110 4E75                       		rts	
0000F112                            ; ===========================================================================
0000F112                            ; lavaball types 06-07 move sideways
0000F112                            
0000F112                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000F112 08E8 0000 0022             		bset	#0,$22(a0)
0000F118 76F8                       		moveq	#-8,d3
0000F11A 6100 0000                  		bsr.w	ObjHitWallLeft
0000F11E 4A41                       		tst.w	d1
0000F120 6A00                       		bpl.s	locret_E498
0000F122 117C 0008 0028             		move.b	#8,$28(a0)
0000F128 117C 0003 001C             		move.b	#3,$1C(a0)
0000F12E 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000F134                            
0000F134                            locret_E498:
0000F134 4E75                       		rts	
0000F136                            ; ===========================================================================
0000F136                            
0000F136                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000F136 08A8 0000 0022             		bclr	#0,$22(a0)
0000F13C 7608                       		moveq	#8,d3
0000F13E 6100 0000                  		bsr.w	ObjHitWallRight
0000F142 4A41                       		tst.w	d1
0000F144 6A00                       		bpl.s	locret_E4BC
0000F146 117C 0008 0028             		move.b	#8,$28(a0)
0000F14C 117C 0003 001C             		move.b	#3,$1C(a0)
0000F152 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000F158                            
0000F158                            locret_E4BC:
0000F158 4E75                       		rts	
0000F15A                            ; ===========================================================================
0000F15A                            
0000F15A                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000F15A 4E75                       		rts	
0000F15C                            ; ===========================================================================
0000F15C                            
0000F15C                            Obj14_Delete:				; XREF: Obj14_Index
0000F15C 6000 F186                  		bra.w	DeleteObject
0000F160                            ; ===========================================================================
0000F160                            Ani_obj14:
0000F160                            	include "_anim\obj14.asm"
0000F160                            ; ---------------------------------------------------------------------------
0000F160                            ; Animation script - lava balls
0000F160                            ; ---------------------------------------------------------------------------
0000F160 0000                       		dc.w byte_E4CC-Ani_obj14
0000F162 0000                       		dc.w byte_E4D2-Ani_obj14
0000F164 0000                       		dc.w byte_E4D6-Ani_obj14
0000F166 0000                       		dc.w byte_E4DC-Ani_obj14
0000F168 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000F16E 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000F172 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000F178 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000F17C                            		even
0000F17C                            		even
0000F17C                            
0000F17C                            ; ===========================================================================
0000F17C                            ; ---------------------------------------------------------------------------
0000F17C                            ; Object 6D - flame thrower (SBZ)
0000F17C                            ; ---------------------------------------------------------------------------
0000F17C                            
0000F17C                            Obj6D:					; XREF: Obj_Index
0000F17C 7000                       		moveq	#0,d0
0000F17E 1028 0024                  		move.b	$24(a0),d0
0000F182 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000F186 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000F18A                            ; ===========================================================================
0000F18A 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000F18C 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000F18E                            ; ===========================================================================
0000F18E                            
0000F18E                            Obj6D_Main:				; XREF: Obj6D_Index
0000F18E 5428 0024                  		addq.b	#2,$24(a0)
0000F192 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000F19A 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000F1A0 0028 0004 0001             		ori.b	#4,1(a0)
0000F1A6 117C 0001 0018             		move.b	#1,$18(a0)
0000F1AC 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F1B2 117C 000C 0019             		move.b	#$C,$19(a0)
0000F1B8 1028 0028                  		move.b	$28(a0),d0
0000F1BC 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000F1C0 D040                       		add.w	d0,d0		; multiply by 2
0000F1C2 3140 0030                  		move.w	d0,$30(a0)
0000F1C6 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000F1CA 1028 0028                  		move.b	$28(a0),d0
0000F1CE 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000F1D2 EB48                       		lsl.w	#5,d0		; multiply by $20
0000F1D4 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000F1D8 117C 000A 0036             		move.b	#$A,$36(a0)
0000F1DE 0828 0001 0022             		btst	#1,$22(a0)
0000F1E4 6700                       		beq.s	Obj6D_Action
0000F1E6 117C 0002 001C             		move.b	#2,$1C(a0)
0000F1EC 117C 0015 0036             		move.b	#$15,$36(a0)
0000F1F2                            
0000F1F2                            Obj6D_Action:				; XREF: Obj6D_Index
0000F1F2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000F1F6 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000F1F8 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000F1FE 0868 0000 001C             		bchg	#0,$1C(a0)
0000F204 6700                       		beq.s	loc_E57A
0000F206 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000F20C 303C 00B3                  		move.w	#$B3,d0
0000F210 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play flame sound
0000F216                            
0000F216                            loc_E57A:
0000F216 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000F21C 6100 C0E2                  		bsr.w	AnimateSprite
0000F220 117C 0000 0020             		move.b	#0,$20(a0)
0000F226 1028 0036                  		move.b	$36(a0),d0
0000F22A B028 001A                  		cmp.b	$1A(a0),d0
0000F22E 6600                       		bne.s	Obj6D_ChkDel
0000F230 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000F236                            
0000F236                            Obj6D_ChkDel:
0000F236 3028 0008                  		move.w	8(a0),d0
0000F23A 0240 FF80                  		andi.w	#$FF80,d0
0000F23E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F242 0441 0080                  		subi.w	#$80,d1
0000F246 0241 FF80                  		andi.w	#$FF80,d1
0000F24A 9041                       		sub.w	d1,d0
0000F24C 0C40 0280                  		cmpi.w	#$280,d0
0000F250 6200 F092                  		bhi.w	DeleteObject
0000F254 6000 F052                  		bra.w	DisplaySprite
0000F258                            ; ===========================================================================
0000F258                            Ani_obj6D:
0000F258                            	include "_anim\obj6D.asm"
0000F258                            ; ---------------------------------------------------------------------------
0000F258                            ; Animation script - flamethrower (SBZ)
0000F258                            ; ---------------------------------------------------------------------------
0000F258 0000                       		dc.w byte_E5C4-Ani_obj6D
0000F25A 0000                       		dc.w byte_E5D2-Ani_obj6D
0000F25C 0000                       		dc.w byte_E5DC-Ani_obj6D
0000F25E 0000                       		dc.w byte_E5EA-Ani_obj6D
0000F260 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000F26E 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F278 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F286 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F290                            		even
0000F290                            		even
0000F290                            
0000F290                            ; ---------------------------------------------------------------------------
0000F290                            ; Sprite mappings - flame thrower (SBZ)
0000F290                            ; ---------------------------------------------------------------------------
0000F290                            Map_obj6D:
0000F290                            	include "_maps\obj6D.asm"
0000F290                            ; ---------------------------------------------------------------------------
0000F290                            ; Sprite mappings - flame thrower (SBZ)
0000F290                            ; ---------------------------------------------------------------------------
0000F290 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F294 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F298 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F29C 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F2A0 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F2A4 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F2A8 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F2AC 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F2B0 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F2B4 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F2B8 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F2BC 01                         byte_E620:	dc.b 1
0000F2BD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F2C2 02                         byte_E626:	dc.b 2
0000F2C3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F2C8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F2CD 02                         byte_E631:	dc.b 2
0000F2CE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F2D3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F2D8 03                         byte_E63C:	dc.b 3
0000F2D9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F2DE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F2E3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F2E8 03                         byte_E64C:	dc.b 3
0000F2E9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F2EE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F2F3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F2F8 04                         byte_E65C:	dc.b 4
0000F2F9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F2FE 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F303 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F308 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F30D 04                         byte_E671:	dc.b 4
0000F30E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F313 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F318 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F31D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F322 05                         byte_E686:	dc.b 5
0000F323 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F328 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F32D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F332 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F337 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F33C 05                         byte_E6A0:	dc.b 5
0000F33D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F342 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F347 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F34C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F351 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F356 06                         byte_E6BA:	dc.b 6
0000F357 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F35C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F361 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F366 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F36B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F370 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F375 06                         byte_E6D9:	dc.b 6
0000F376 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F37B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F380 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F385 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F38A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F38F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F394 01                         byte_E6F8:	dc.b 1
0000F395 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F39A 02                         byte_E6FE:	dc.b 2
0000F39B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F3A0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F3A5 02                         byte_E709:	dc.b 2
0000F3A6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F3AB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F3B0 03                         byte_E714:	dc.b 3
0000F3B1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F3B6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F3BB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F3C0 03                         byte_E724:	dc.b 3
0000F3C1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F3C6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F3CB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F3D0 04                         byte_E734:	dc.b 4
0000F3D1 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F3D6 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F3DB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F3E0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F3E5 04                         byte_E749:	dc.b 4
0000F3E6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F3EB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F3F0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F3F5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F3FA 05                         byte_E75E:	dc.b 5
0000F3FB F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F400 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F405 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F40A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F40F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F414 05                         byte_E778:	dc.b 5
0000F415 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F41A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F41F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F424 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F429 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F42E 06                         byte_E792:	dc.b 6
0000F42F E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F434 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F439 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F43E 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F443 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F448 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F44D 06                         byte_E7B1:	dc.b 6
0000F44E E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F453 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F458 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F45D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F462 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F467 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F46C                            		even
0000F46C                            		even
0000F46C                            
0000F46C                            ; ===========================================================================
0000F46C                            ; ---------------------------------------------------------------------------
0000F46C                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F46C                            ; ---------------------------------------------------------------------------
0000F46C                            
0000F46C                            Obj46:					; XREF: Obj_Index
0000F46C 7000                       		moveq	#0,d0
0000F46E 1028 0024                  		move.b	$24(a0),d0
0000F472 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F476 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F47A                            ; ===========================================================================
0000F47A 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F47C 0000                       		dc.w Obj46_Action-Obj46_Index
0000F47E                            ; ===========================================================================
0000F47E                            
0000F47E                            Obj46_Main:				; XREF: Obj46_Index
0000F47E 5428 0024                  		addq.b	#2,$24(a0)
0000F482 117C 000F 0016             		move.b	#$F,$16(a0)
0000F488 117C 000F 0017             		move.b	#$F,$17(a0)
0000F48E 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F496 317C 4000 0002             		move.w	#$4000,2(a0)
0000F49C 117C 0004 0001             		move.b	#4,1(a0)
0000F4A2 117C 0003 0018             		move.b	#3,$18(a0)
0000F4A8 117C 0010 0019             		move.b	#$10,$19(a0)
0000F4AE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F4B4 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F4BA                            
0000F4BA                            Obj46_Action:				; XREF: Obj46_Index
0000F4BA 4A28 0001                  		tst.b	1(a0)
0000F4BE 6A00                       		bpl.s	Obj46_ChkDel
0000F4C0 7000                       		moveq	#0,d0
0000F4C2 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F4C6 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F4CA D040                       		add.w	d0,d0
0000F4CC 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F4D0 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F4D4 323C 001B                  		move.w	#$1B,d1
0000F4D8 343C 0010                  		move.w	#$10,d2
0000F4DC 363C 0011                  		move.w	#$11,d3
0000F4E0 3828 0008                  		move.w	8(a0),d4
0000F4E4 6100 0000                  		bsr.w	SolidObject
0000F4E8                            
0000F4E8                            Obj46_ChkDel:
0000F4E8 6100 EDBE                  		bsr.w	DisplaySprite
0000F4EC 3028 0008                  		move.w	8(a0),d0
0000F4F0 0240 FF80                  		andi.w	#$FF80,d0
0000F4F4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F4F8 0441 0080                  		subi.w	#$80,d1
0000F4FC 0241 FF80                  		andi.w	#$FF80,d1
0000F500 9041                       		sub.w	d1,d0
0000F502 0C40 0280                  		cmpi.w	#$280,d0
0000F506 6200 EDDC                  		bhi.w	DeleteObject
0000F50A 4E75                       		rts	
0000F50C                            ; ===========================================================================
0000F50C 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F50E 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F510 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F512 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F514 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F516                            ; ===========================================================================
0000F516                            
0000F516                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F516 4E75                       		rts	
0000F518                            ; ===========================================================================
0000F518                            
0000F518                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F518 3038 D008                  		move.w	($FFFFD008).w,d0
0000F51C 9068 0008                  		sub.w	8(a0),d0
0000F520 6400                       		bcc.s	loc_E888
0000F522 4440                       		neg.w	d0
0000F524                            
0000F524                            loc_E888:
0000F524 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F528 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F52A 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F530                            
0000F530                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F530 7000                       		moveq	#0,d0
0000F532 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F536 0828 0003 0028             		btst	#3,$28(a0)
0000F53C 6700                       		beq.s	loc_E8A8
0000F53E 4440                       		neg.w	d0
0000F540 0640 0010                  		addi.w	#$10,d0
0000F544                            
0000F544                            loc_E8A8:
0000F544 3228 0030                  		move.w	$30(a0),d1
0000F548 9240                       		sub.w	d0,d1
0000F54A 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F54E 4E75                       		rts	
0000F550                            ; ===========================================================================
0000F550                            
0000F550                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F550 7218                       		moveq	#$18,d1
0000F552 6100 ECBA                  		bsr.w	ObjectFallCustom
0000F556 6100 0000                  		bsr.w	ObjHitFloor
0000F55A 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F55C 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F560 D368 000C                  		add.w	d1,$C(a0)
0000F564 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F568 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F56E 117C 0004 0028             		move.b	#4,$28(a0)
0000F574 3011                       		move.w	(a1),d0
0000F576 0240 03FF                  		andi.w	#$3FF,d0
0000F57A 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F57E 6400                       		bcc.s	locret_E8EE
0000F580 117C 0000 0028             		move.b	#0,$28(a0)
0000F586                            
0000F586                            locret_E8EE:
0000F586 4E75                       		rts	
0000F588                            ; ===========================================================================
0000F588                            
0000F588                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F588 7000                       		moveq	#0,d0
0000F58A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F58E E648                       		lsr.w	#3,d0
0000F590 3228 0030                  		move.w	$30(a0),d1
0000F594 9240                       		sub.w	d0,d1
0000F596 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F59A 4E75                       		rts	
0000F59C                            ; ===========================================================================
0000F59C                            ; ---------------------------------------------------------------------------
0000F59C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F59C                            ; ---------------------------------------------------------------------------
0000F59C                            Map_obj46:
0000F59C                            	include "_maps\obj46.asm"
0000F59C                            ; ---------------------------------------------------------------------------
0000F59C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F59C                            ; ---------------------------------------------------------------------------
0000F59C 0000                       		dc.w byte_E906-Map_obj46
0000F59E 01                         byte_E906:	dc.b 1
0000F59F F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F5A4                            		even
0000F5A4                            		even
0000F5A4                            
0000F5A4                            ; ===========================================================================
0000F5A4                            ; ---------------------------------------------------------------------------
0000F5A4                            ; Object 12 - lamp (SYZ)
0000F5A4                            ; ---------------------------------------------------------------------------
0000F5A4                            
0000F5A4                            Obj12:					; XREF: Obj_Index
0000F5A4 7000                       		moveq	#0,d0
0000F5A6 1028 0024                  		move.b	$24(a0),d0
0000F5AA 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F5AE 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F5B2                            ; ===========================================================================
0000F5B2 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F5B4 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F5B6                            ; ===========================================================================
0000F5B6                            
0000F5B6                            Obj12_Main:				; XREF: Obj12_Index
0000F5B6 5428 0024                  		addq.b	#2,$24(a0)
0000F5BA 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F5C2 317C 0000 0002             		move.w	#0,2(a0)
0000F5C8 117C 0004 0001             		move.b	#4,1(a0)
0000F5CE 117C 0010 0019             		move.b	#$10,$19(a0)
0000F5D4 117C 0006 0018             		move.b	#6,$18(a0)
0000F5DA                            
0000F5DA                            Obj12_Animate:				; XREF: Obj12_Index
0000F5DA 5328 001E                  		subq.b	#1,$1E(a0)
0000F5DE 6A00                       		bpl.s	Obj12_ChkDel
0000F5E0 117C 0007 001E             		move.b	#7,$1E(a0)
0000F5E6 5228 001A                  		addq.b	#1,$1A(a0)
0000F5EA 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F5F0 6500                       		bcs.s	Obj12_ChkDel
0000F5F2 117C 0000 001A             		move.b	#0,$1A(a0)
0000F5F8                            
0000F5F8                            Obj12_ChkDel:
0000F5F8 3028 0008                  		move.w	8(a0),d0
0000F5FC 0240 FF80                  		andi.w	#$FF80,d0
0000F600 3238 F700                  		move.w	($FFFFF700).w,d1
0000F604 0441 0080                  		subi.w	#$80,d1
0000F608 0241 FF80                  		andi.w	#$FF80,d1
0000F60C 9041                       		sub.w	d1,d0
0000F60E 0C40 0280                  		cmpi.w	#$280,d0
0000F612 6200 ECD0                  		bhi.w	DeleteObject
0000F616 6000 EC90                  		bra.w	DisplaySprite
0000F61A                            ; ===========================================================================
0000F61A                            ; ---------------------------------------------------------------------------
0000F61A                            ; Sprite mappings - lamp (SYZ)
0000F61A                            ; ---------------------------------------------------------------------------
0000F61A                            Map_obj12:
0000F61A                            	include "_maps\obj12.asm"
0000F61A                            ; ---------------------------------------------------------------------------
0000F61A                            ; Sprite mappings - lamp (SYZ)
0000F61A                            ; ---------------------------------------------------------------------------
0000F61A 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F61E 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F622 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F626 02                         byte_E98E:	dc.b 2
0000F627 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F62C 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F631 02                         byte_E999:	dc.b 2
0000F632 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F637 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F63C 02                         byte_E9A4:	dc.b 2
0000F63D F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F642 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F647 02                         byte_E9AF:	dc.b 2
0000F648 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F64D 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F652 02                         byte_E9BA:	dc.b 2
0000F653 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F658 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F65D 02                         byte_E9C5:	dc.b 2
0000F65E F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F663 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F668                            		even
0000F668                            		even
0000F668                            
0000F668                            ; ===========================================================================
0000F668                            ; ---------------------------------------------------------------------------
0000F668                            ; Object 47 - pinball bumper (SYZ)
0000F668                            ; ---------------------------------------------------------------------------
0000F668                            
0000F668                            Obj47:					; XREF: Obj_Index
0000F668 7000                       		moveq	#0,d0
0000F66A 1028 0024                  		move.b	$24(a0),d0
0000F66E 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F672 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F676                            ; ===========================================================================
0000F676 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F678 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F67A                            ; ===========================================================================
0000F67A                            
0000F67A                            Obj47_Main:				; XREF: Obj47_Index
0000F67A 5428 0024                  		addq.b	#2,$24(a0)
0000F67E 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F686 317C 0380 0002             		move.w	#$380,2(a0)
0000F68C 117C 0004 0001             		move.b	#4,1(a0)
0000F692 117C 0010 0019             		move.b	#$10,$19(a0)
0000F698 117C 0001 0018             		move.b	#1,$18(a0)
0000F69E 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F6A4                            
0000F6A4                            Obj47_Hit:				; XREF: Obj47_Index
0000F6A4 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F6A8 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F6AC 4228 0021                  		clr.b	$21(a0)
0000F6B0 43F8 D000                  		lea	($FFFFD000).w,a1
0000F6B4 3228 0008                  		move.w	8(a0),d1
0000F6B8 3428 000C                  		move.w	$C(a0),d2
0000F6BC 9269 0008                  		sub.w	8(a1),d1
0000F6C0 9469 000C                  		sub.w	$C(a1),d2
0000F6C4 4EB9 0000 3054             		jsr	(CalcAngle).l
0000F6CA 4EB9 0000 2D86             		jsr	(CalcSine).l
0000F6D0 C3FC F900                  		muls.w	#-$700,d1
0000F6D4 E081                       		asr.l	#8,d1
0000F6D6 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F6DA C1FC F900                  		muls.w	#-$700,d0
0000F6DE E080                       		asr.l	#8,d0
0000F6E0 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F6E4 08E9 0001 0022             		bset	#1,$22(a1)
0000F6EA 08A9 0004 0022             		bclr	#4,$22(a1)
0000F6F0 08A9 0005 0022             		bclr	#5,$22(a1)
0000F6F6 4229 003C                  		clr.b	$3C(a1)
0000F6FA 117C 0001 001C             		move.b	#1,$1C(a0)
0000F700 303C 00B4                  		move.w	#$B4,d0
0000F704 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F70A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F70E 7000                       		moveq	#0,d0
0000F710 1028 0023                  		move.b	$23(a0),d0
0000F714 6700                       		beq.s	Obj47_Score
0000F716 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F71C 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F71E 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F722                            
0000F722                            Obj47_Score:
0000F722 7001                       		moveq	#1,d0
0000F724 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F72A 6100 F002                  		bsr.w	SingleObjLoad
0000F72E 6600                       		bne.s	Obj47_Display
0000F730 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F734 3368 0008 0008             		move.w	8(a0),8(a1)
0000F73A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F740 137C 0004 001A             		move.b	#4,$1A(a1)
0000F746                            
0000F746                            Obj47_Display:
0000F746 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F74C 6100 BBB2                  		bsr.w	AnimateSprite
0000F750 3028 0008                  		move.w	8(a0),d0
0000F754 0240 FF80                  		andi.w	#$FF80,d0
0000F758 3238 F700                  		move.w	($FFFFF700).w,d1
0000F75C 0441 0080                  		subi.w	#$80,d1
0000F760 0241 FF80                  		andi.w	#$FF80,d1
0000F764 9041                       		sub.w	d1,d0
0000F766 0C40 0280                  		cmpi.w	#$280,d0
0000F76A 6200                       		bhi.s	Obj47_ChkHit
0000F76C 6000 EB3A                  		bra.w	DisplaySprite
0000F770                            ; ===========================================================================
0000F770                            
0000F770                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F770 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F774 7000                       		moveq	#0,d0
0000F776 1028 0023                  		move.b	$23(a0),d0
0000F77A 6700                       		beq.s	Obj47_Delete
0000F77C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F782                            
0000F782                            Obj47_Delete:
0000F782 6000 EB60                  		bra.w	DeleteObject
0000F786                            ; ===========================================================================
0000F786                            Ani_obj47:
0000F786                            	include "_anim\obj47.asm"
0000F786                            ; ---------------------------------------------------------------------------
0000F786                            ; Animation script - flamethrower (SBZ)
0000F786                            ; ---------------------------------------------------------------------------
0000F786 0000                       		dc.w byte_EAF4-Ani_obj47
0000F788 0000                       		dc.w byte_EAF8-Ani_obj47
0000F78A 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F78E 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F796                            		even
0000F796                            		even
0000F796                            
0000F796                            ; ---------------------------------------------------------------------------
0000F796                            ; Sprite mappings - pinball bumper (SYZ)
0000F796                            ; ---------------------------------------------------------------------------
0000F796                            Map_obj47:
0000F796                            	include "_maps\obj47.asm"
0000F796                            ; ---------------------------------------------------------------------------
0000F796                            ; Sprite mappings - pinball bumper (SYZ)
0000F796                            ; ---------------------------------------------------------------------------
0000F796 0000                       		dc.w byte_EB06-Map_obj47
0000F798 0000                       		dc.w byte_EB11-Map_obj47
0000F79A 0000                       		dc.w byte_EB1C-Map_obj47
0000F79C 02                         byte_EB06:	dc.b 2
0000F79D F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F7A2 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F7A7 02                         byte_EB11:	dc.b 2
0000F7A8 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F7AD F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F7B2 02                         byte_EB1C:	dc.b 2
0000F7B3 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F7B8 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F7BE 00                         		even
0000F7BE 00                         		even
0000F7BE                            
0000F7BE                            ; ===========================================================================
0000F7BE                            ; ---------------------------------------------------------------------------
0000F7BE                            ; Object 0D - signpost at the end of a level
0000F7BE                            ; ---------------------------------------------------------------------------
0000F7BE                            
0000F7BE                            Obj0D:					; XREF: Obj_Index
0000F7BE 7000                       		moveq	#0,d0
0000F7C0 1028 0024                  		move.b	$24(a0),d0
0000F7C4 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F7C8 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F7CC 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F7D2 6100 BB2C                  		bsr.w	AnimateSprite
0000F7D6 6100 EAD0                  		bsr.w	DisplaySprite
0000F7DA 3028 0008                  		move.w	8(a0),d0
0000F7DE 0240 FF80                  		andi.w	#$FF80,d0
0000F7E2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F7E6 0441 0080                  		subi.w	#$80,d1
0000F7EA 0241 FF80                  		andi.w	#$FF80,d1
0000F7EE 9041                       		sub.w	d1,d0
0000F7F0 0C40 0280                  		cmpi.w	#$280,d0
0000F7F4 6200 EAEE                  		bhi.w	DeleteObject
0000F7F8 4E75                       		rts	
0000F7FA                            ; ===========================================================================
0000F7FA 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F7FC 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F7FE 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F800 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F802 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F804                            ; ===========================================================================
0000F804                            
0000F804                            Obj0D_Main:				; XREF: Obj0D_Index
0000F804 5428 0024                  		addq.b	#2,$24(a0)
0000F808 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F810 317C 0680 0002             		move.w	#$680,2(a0)
0000F816 117C 0004 0001             		move.b	#4,1(a0)
0000F81C 117C 0018 0019             		move.b	#$18,$19(a0)
0000F822 117C 0004 0018             		move.b	#4,$18(a0)
0000F828                            
0000F828                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F828 3038 D008                  		move.w	($FFFFD008).w,d0
0000F82C 9068 0008                  		sub.w	8(a0),d0
0000F830 6500                       		bcs.s	locret_EBBA
0000F832 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F836 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F838 303C 00CF                  		move.w	#$CF,d0
0000F83C 4EB9 0000 15E6             		jsr	(PlaySound).l	; play signpost	sound
0000F842 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F846 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F84C 5428 0024                  		addq.b	#2,$24(a0)
0000F850                            
0000F850                            locret_EBBA:
0000F850 4E75                       		rts	
0000F852                            ; ===========================================================================
0000F852                            
0000F852                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F852 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F856 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F858 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F85E 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F862 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F868 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F86A 5428 0024                  		addq.b	#2,$24(a0)
0000F86E                            
0000F86E                            Obj0D_Sparkle:
0000F86E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F872 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F874 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F87A 7000                       		moveq	#0,d0
0000F87C 1028 0034                  		move.b	$34(a0),d0
0000F880 5428 0034                  		addq.b	#2,$34(a0)
0000F884 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F88A 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F88E 6100 EE9E                  		bsr.w	SingleObjLoad
0000F892 6600                       		bne.s	locret_EC42
0000F894 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F898 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F89E 101A                       		move.b	(a2)+,d0
0000F8A0 4880                       		ext.w	d0
0000F8A2 D068 0008                  		add.w	8(a0),d0
0000F8A6 3340 0008                  		move.w	d0,8(a1)
0000F8AA 101A                       		move.b	(a2)+,d0
0000F8AC 4880                       		ext.w	d0
0000F8AE D068 000C                  		add.w	$C(a0),d0
0000F8B2 3340 000C                  		move.w	d0,$C(a1)
0000F8B6 237C 0000 AAA2 0004        		move.l	#Map_obj25,4(a1)
0000F8BE 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F8C4 137C 0004 0001             		move.b	#4,1(a1)
0000F8CA 137C 0002 0018             		move.b	#2,$18(a1)
0000F8D0 137C 0008 0019             		move.b	#8,$19(a1)
0000F8D6                            
0000F8D6                            locret_EC42:
0000F8D6 4E75                       		rts	
0000F8D8                            ; ===========================================================================
0000F8D8 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F8DA 0808                       		dc.b	8,   8
0000F8DC F000                       		dc.b -$10,   0
0000F8DE 18F8                       		dc.b  $18,  -8
0000F8E0 00F8                       		dc.b	0,  -8
0000F8E2 1000                       		dc.b  $10,   0
0000F8E4 E808                       		dc.b -$18,   8
0000F8E6 1810                       		dc.b  $18, $10
0000F8E8                            ; ===========================================================================
0000F8E8                            
0000F8E8                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F8E8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F8EC 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F8F0 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F8F6 6600                       		bne.s	loc_EC70
0000F8F8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F8FE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F904 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F906 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F90C 6000                       		bra.s	loc_EC70
0000F90E                            
0000F90E                            Obj0D_MoveLeft:
0000F90E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F914                            
0000F914                            loc_EC70:
0000F914 4A38 D000                  		tst.b	($FFFFD000).w
0000F918 6700                       		beq.s	loc_EC86
0000F91A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F91E 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F922 0641 0128                  		addi.w	#$128,d1
0000F926 B041                       		cmp.w	d1,d0
0000F928 6500                       		bcs.s	locret_ECEE
0000F92A                            
0000F92A                            loc_EC86:
0000F92A 5428 0024                  		addq.b	#2,$24(a0)
0000F92E                            
0000F92E                            ; ---------------------------------------------------------------------------
0000F92E                            ; Subroutine to	set up bonuses at the end of an	act
0000F92E                            ; ---------------------------------------------------------------------------
0000F92E                            
0000F92E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F92E                            
0000F92E                            
0000F92E                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F92E 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F932 6600                       		bne.s	locret_ECEE
0000F934 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F93A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F93E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F942 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F948 7010                       		moveq	#$10,d0
0000F94A 4EB9 0000 1802             		jsr	(LoadPLC2).l	; load title card patterns
0000F950 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F956 7000                       		moveq	#0,d0
0000F958 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F95C C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F960 7200                       		moveq	#0,d1
0000F962 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F966 D041                       		add.w	d1,d0		; add up your time
0000F968 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F96C 7214                       		moveq	#$14,d1
0000F96E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F970 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F972 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F974                            
0000F974                            loc_ECD0:
0000F974 D040                       		add.w	d0,d0
0000F976 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F97C 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F980 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F984 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F988 303C 008E                  		move.w	#$8E,d0
0000F98C 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F992                            
0000F992                            locret_ECEE:
0000F992 4E75                       		rts	
0000F994                            ; End of function GotThroughAct
0000F994                            
0000F994                            ; ===========================================================================
0000F994 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F9A8 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F9BE                            ; ===========================================================================
0000F9BE                            
0000F9BE                            locret_ED1A:				; XREF: Obj0D_Index
0000F9BE 4E75                       		rts	
0000F9C0                            ; ===========================================================================
0000F9C0                            Ani_obj0D:
0000F9C0                            	include "_anim\obj0D.asm"
0000F9C0                            ; ---------------------------------------------------------------------------
0000F9C0                            ; Animation script - signpost
0000F9C0                            ; ---------------------------------------------------------------------------
0000F9C0 0000                       		dc.w byte_ED24-Ani_obj0D
0000F9C2 0000                       		dc.w byte_ED28-Ani_obj0D
0000F9C4 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F9C6 0000                       		dc.w byte_ED34-Ani_obj0D
0000F9C8 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F9CC 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F9D2 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F9D8 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F9DC 00                         		even
0000F9DC 00                         		even
0000F9DC                            
0000F9DC                            ; ---------------------------------------------------------------------------
0000F9DC                            ; Sprite mappings - signpost
0000F9DC                            ; ---------------------------------------------------------------------------
0000F9DC                            Map_obj0D:
0000F9DC                            	include "_maps\obj0D.asm"
0000F9DC                            ; ---------------------------------------------------------------------------
0000F9DC                            ; Sprite mappings - signpost
0000F9DC                            ; ---------------------------------------------------------------------------
0000F9DC 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F9E0 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F9E4 0000                       		dc.w byte_ED73-Map_obj0D
0000F9E6 03                         byte_ED42:	dc.b 3
0000F9E7 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F9EC F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F9F1 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F9F6 02                         byte_ED52:	dc.b 2
0000F9F7 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F9FC 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FA01 02                         byte_ED5D:	dc.b 2
0000FA02 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000FA07 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000FA0C 02                         byte_ED68:	dc.b 2
0000FA0D F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000FA12 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000FA17 03                         byte_ED73:	dc.b 3
0000FA18 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000FA1D F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000FA22 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FA28 00                         		even
0000FA28 00                         		even
0000FA28                            
0000FA28                            ; ===========================================================================
0000FA28                            ; ---------------------------------------------------------------------------
0000FA28                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000FA28                            ; ---------------------------------------------------------------------------
0000FA28                            
0000FA28                            Obj4C:					; XREF: Obj_Index
0000FA28 7000                       		moveq	#0,d0
0000FA2A 1028 0024                  		move.b	$24(a0),d0
0000FA2E 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000FA32 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000FA36 6000 0000                  		bra.w	Obj4D_ChkDel
0000FA3A                            ; ===========================================================================
0000FA3A 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000FA3C 0000                       		dc.w loc_EDCC-Obj4C_Index
0000FA3E 0000                       		dc.w loc_EE3E-Obj4C_Index
0000FA40 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000FA42 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000FA44 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000FA46                            ; ===========================================================================
0000FA46                            
0000FA46                            Obj4C_Main:				; XREF: Obj4C_Index
0000FA46 5428 0024                  		addq.b	#2,$24(a0)
0000FA4A 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000FA52 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000FA58 117C 0004 0001             		move.b	#4,1(a0)
0000FA5E 117C 0001 0018             		move.b	#1,$18(a0)
0000FA64 117C 0038 0019             		move.b	#$38,$19(a0)
0000FA6A 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000FA70                            
0000FA70                            loc_EDCC:				; XREF: Obj4C_Index
0000FA70 5368 0032                  		subq.w	#1,$32(a0)
0000FA74 6A00                       		bpl.s	locret_EDF0
0000FA76 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000FA7C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FA80 3228 000C                  		move.w	$C(a0),d1
0000FA84 B041                       		cmp.w	d1,d0
0000FA86 6400                       		bcc.s	locret_EDF0
0000FA88 0441 0170                  		subi.w	#$170,d1
0000FA8C B041                       		cmp.w	d1,d0
0000FA8E 6500                       		bcs.s	locret_EDF0
0000FA90 5428 0024                  		addq.b	#2,$24(a0)
0000FA94                            
0000FA94                            locret_EDF0:
0000FA94 4E75                       		rts	
0000FA96                            ; ===========================================================================
0000FA96                            
0000FA96                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000FA96 5428 0024                  		addq.b	#2,$24(a0)
0000FA9A 6100 ECA8                  		bsr.w	SingleObjLoad2
0000FA9E 6600                       		bne.s	loc_EE18
0000FAA0 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000FAA4 3368 0008 0008             		move.w	8(a0),8(a1)
0000FAAA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FAB0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FAB6 2348 003C                  		move.l	a0,$3C(a1)
0000FABA                            
0000FABA                            loc_EE18:
0000FABA 117C 0001 001C             		move.b	#1,$1C(a0)
0000FAC0 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000FAC4 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000FAC6 117C 0004 001C             		move.b	#4,$1C(a0)
0000FACC 6000                       		bra.s	Obj4C_Display
0000FACE                            ; ===========================================================================
0000FACE                            
0000FACE                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000FACE 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000FAD2 08E9 0001 0022             		bset	#1,$22(a1)
0000FAD8 337C FA80 0012             		move.w	#-$580,$12(a1)
0000FADE 6000                       		bra.s	Obj4C_Display
0000FAE0                            ; ===========================================================================
0000FAE0                            
0000FAE0                            loc_EE3E:				; XREF: Obj4C_Index
0000FAE0 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000FAE4 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000FAE6 5428 0024                  		addq.b	#2,$24(a0)
0000FAEA 4E75                       		rts	
0000FAEC                            ; ===========================================================================
0000FAEC                            
0000FAEC                            Obj4C_Display:				; XREF: Obj4C_Index
0000FAEC 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000FAF2 6100 B80C                  		bsr.w	AnimateSprite
0000FAF6 6100 E7B0                  		bsr.w	DisplaySprite
0000FAFA 4E75                       		rts	
0000FAFC                            ; ===========================================================================
0000FAFC                            
0000FAFC                            Obj4C_Delete:				; XREF: Obj4C_Index
0000FAFC 117C 0000 001C             		move.b	#0,$1C(a0)
0000FB02 117C 0002 0024             		move.b	#2,$24(a0)
0000FB08 4A28 0028                  		tst.b	$28(a0)
0000FB0C 6700 E7D6                  		beq.w	DeleteObject
0000FB10 4E75                       		rts	
0000FB12                            ; ===========================================================================
0000FB12                            ; ---------------------------------------------------------------------------
0000FB12                            ; Object 4D - lava geyser / lavafall (MZ)
0000FB12                            ; ---------------------------------------------------------------------------
0000FB12                            
0000FB12                            Obj4D:					; XREF: Obj_Index
0000FB12 7000                       		moveq	#0,d0
0000FB14 1028 0024                  		move.b	$24(a0),d0
0000FB18 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000FB1C 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000FB20 6000 E786                  		bra.w	DisplaySprite
0000FB24                            ; ===========================================================================
0000FB24 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000FB26 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000FB28 0000                       		dc.w loc_EFFC-Obj4D_Index
0000FB2A 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000FB2C                            
0000FB2C FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000FB30                            ; ===========================================================================
0000FB30                            
0000FB30                            Obj4D_Main:				; XREF: Obj4D_Index
0000FB30 5428 0024                  		addq.b	#2,$24(a0)
0000FB34 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FB3A 4A28 0028                  		tst.b	$28(a0)
0000FB3E 6700                       		beq.s	loc_EEA4
0000FB40 0468 0250 000C             		subi.w	#$250,$C(a0)
0000FB46                            
0000FB46                            loc_EEA4:
0000FB46 7000                       		moveq	#0,d0
0000FB48 1028 0028                  		move.b	$28(a0),d0
0000FB4C D040                       		add.w	d0,d0
0000FB4E 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000FB54 2248                       		movea.l	a0,a1
0000FB56 7201                       		moveq	#1,d1
0000FB58 6100                       		bsr.s	Obj4D_MakeLava
0000FB5A 6000                       		bra.s	loc_EF10
0000FB5C                            ; ===========================================================================
0000FB5C                            
0000FB5C                            Obj4D_Loop:
0000FB5C 6100 EBE6                  		bsr.w	SingleObjLoad2
0000FB60 6600                       		bne.s	loc_EF0A
0000FB62                            
0000FB62                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000FB62 12BC 004D                  		move.b	#$4D,0(a1)
0000FB66 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000FB6E 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FB74 137C 0004 0001             		move.b	#4,1(a1)
0000FB7A 137C 0020 0019             		move.b	#$20,$19(a1)
0000FB80 3368 0008 0008             		move.w	8(a0),8(a1)
0000FB86 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FB8C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FB92 137C 0001 0018             		move.b	#1,$18(a1)
0000FB98 137C 0005 001C             		move.b	#5,$1C(a1)
0000FB9E 4A28 0028                  		tst.b	$28(a0)
0000FBA2 6700                       		beq.s	loc_EF0A
0000FBA4 137C 0002 001C             		move.b	#2,$1C(a1)
0000FBAA                            
0000FBAA                            loc_EF0A:
0000FBAA 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000FBAE 4E75                       		rts	
0000FBB0                            ; ===========================================================================
0000FBB0                            
0000FBB0                            loc_EF10:				; XREF: Obj4D_Main
0000FBB0 0669 0060 000C             		addi.w	#$60,$C(a1)
0000FBB6 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FBBC 0669 0060 0030             		addi.w	#$60,$30(a1)
0000FBC2 137C 0093 0020             		move.b	#$93,$20(a1)
0000FBC8 137C 0080 0016             		move.b	#$80,$16(a1)
0000FBCE 08E9 0004 0001             		bset	#4,1(a1)
0000FBD4 5829 0024                  		addq.b	#4,$24(a1)
0000FBD8 2348 003C                  		move.l	a0,$3C(a1)
0000FBDC 4A28 0028                  		tst.b	$28(a0)
0000FBE0 6700                       		beq.s	Obj4D_PlaySnd
0000FBE2 7200                       		moveq	#0,d1
0000FBE4 6100 FF76                  		bsr.w	Obj4D_Loop
0000FBE8 5429 0024                  		addq.b	#2,$24(a1)
0000FBEC 08E9 0004 0002             		bset	#4,2(a1)
0000FBF2 0669 0100 000C             		addi.w	#$100,$C(a1)
0000FBF8 137C 0000 0018             		move.b	#0,$18(a1)
0000FBFE 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FC04 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000FC0A 117C 0000 0028             		move.b	#0,$28(a0)
0000FC10                            
0000FC10                            Obj4D_PlaySnd:
0000FC10 303C 00C8                  		move.w	#$C8,d0
0000FC14 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play flame sound
0000FC1A                            
0000FC1A                            Obj4D_Action:				; XREF: Obj4D_Index
0000FC1A 7000                       		moveq	#0,d0
0000FC1C 1028 0028                  		move.b	$28(a0),d0
0000FC20 D040                       		add.w	d0,d0
0000FC22 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000FC26 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000FC2A 6100 E642                  		bsr.w	SpeedToPos
0000FC2E 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000FC34 6100 B6CA                  		bsr.w	AnimateSprite
0000FC38                            
0000FC38                            Obj4D_ChkDel:				; XREF: Obj4C
0000FC38 3028 0008                  		move.w	8(a0),d0
0000FC3C 0240 FF80                  		andi.w	#$FF80,d0
0000FC40 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC44 0441 0080                  		subi.w	#$80,d1
0000FC48 0241 FF80                  		andi.w	#$FF80,d1
0000FC4C 9041                       		sub.w	d1,d0
0000FC4E 0C40 0280                  		cmpi.w	#$280,d0
0000FC52 6200 E690                  		bhi.w	DeleteObject
0000FC56 4E75                       		rts	
0000FC58                            ; ===========================================================================
0000FC58 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000FC5A 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000FC5C                            ; ===========================================================================
0000FC5C                            
0000FC5C                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000FC5C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FC62 3028 0030                  		move.w	$30(a0),d0
0000FC66 B068 000C                  		cmp.w	$C(a0),d0
0000FC6A 6400                       		bcc.s	locret_EFDA
0000FC6C 5828 0024                  		addq.b	#4,$24(a0)
0000FC70 2268 003C                  		movea.l	$3C(a0),a1
0000FC74 137C 0003 001C             		move.b	#3,$1C(a1)
0000FC7A                            
0000FC7A                            locret_EFDA:
0000FC7A 4E75                       		rts	
0000FC7C                            ; ===========================================================================
0000FC7C                            
0000FC7C                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000FC7C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FC82 3028 0030                  		move.w	$30(a0),d0
0000FC86 B068 000C                  		cmp.w	$C(a0),d0
0000FC8A 6400                       		bcc.s	locret_EFFA
0000FC8C 5828 0024                  		addq.b	#4,$24(a0)
0000FC90 2268 003C                  		movea.l	$3C(a0),a1
0000FC94 137C 0001 001C             		move.b	#1,$1C(a1)
0000FC9A                            
0000FC9A                            locret_EFFA:
0000FC9A 4E75                       		rts	
0000FC9C                            ; ===========================================================================
0000FC9C                            
0000FC9C                            loc_EFFC:				; XREF: Obj4D_Index
0000FC9C 2268 003C                  		movea.l	$3C(a0),a1
0000FCA0 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000FCA6 6700 0000                  		beq.w	Obj4D_Delete
0000FCAA 3029 000C                  		move.w	$C(a1),d0
0000FCAE 0640 0060                  		addi.w	#$60,d0
0000FCB2 3140 000C                  		move.w	d0,$C(a0)
0000FCB6 9068 0030                  		sub.w	$30(a0),d0
0000FCBA 4440                       		neg.w	d0
0000FCBC 7208                       		moveq	#8,d1
0000FCBE 0C40 0040                  		cmpi.w	#$40,d0
0000FCC2 6C00                       		bge.s	loc_F026
0000FCC4 720B                       		moveq	#$B,d1
0000FCC6                            
0000FCC6                            loc_F026:
0000FCC6 0C40 0080                  		cmpi.w	#$80,d0
0000FCCA 6F00                       		ble.s	loc_F02E
0000FCCC 720E                       		moveq	#$E,d1
0000FCCE                            
0000FCCE                            loc_F02E:
0000FCCE 5328 001E                  		subq.b	#1,$1E(a0)
0000FCD2 6A00                       		bpl.s	loc_F04C
0000FCD4 117C 0007 001E             		move.b	#7,$1E(a0)
0000FCDA 5228 001B                  		addq.b	#1,$1B(a0)
0000FCDE 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000FCE4 6500                       		bcs.s	loc_F04C
0000FCE6 117C 0000 001B             		move.b	#0,$1B(a0)
0000FCEC                            
0000FCEC                            loc_F04C:
0000FCEC 1028 001B                  		move.b	$1B(a0),d0
0000FCF0 D001                       		add.b	d1,d0
0000FCF2 1140 001A                  		move.b	d0,$1A(a0)
0000FCF6 6000 FF40                  		bra.w	Obj4D_ChkDel
0000FCFA                            ; ===========================================================================
0000FCFA                            
0000FCFA                            Obj4D_Delete:				; XREF: Obj4D_Index
0000FCFA 6000 E5E8                  		bra.w	DeleteObject
0000FCFE                            ; ===========================================================================
0000FCFE                            ; ---------------------------------------------------------------------------
0000FCFE                            ; Object 4E - advancing	wall of	lava (MZ)
0000FCFE                            ; ---------------------------------------------------------------------------
0000FCFE                            
0000FCFE                            Obj4E:					; XREF: Obj_Index
0000FCFE 7000                       		moveq	#0,d0
0000FD00 1028 0024                  		move.b	$24(a0),d0
0000FD04 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000FD08 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000FD0C                            ; ===========================================================================
0000FD0C 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000FD0E 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000FD10 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000FD12 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000FD14 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000FD16                            ; ===========================================================================
0000FD16                            
0000FD16                            Obj4E_Main:				; XREF: Obj4E_Index
0000FD16 5828 0024                  		addq.b	#4,$24(a0)
0000FD1A 2248                       		movea.l	a0,a1
0000FD1C 7201                       		moveq	#1,d1
0000FD1E 6000                       		bra.s	Obj4E_Main2
0000FD20                            ; ===========================================================================
0000FD20                            
0000FD20                            Obj4E_Loop:
0000FD20 6100 EA22                  		bsr.w	SingleObjLoad2
0000FD24 6600                       		bne.s	loc_F0C8
0000FD26                            
0000FD26                            Obj4E_Main2:				; XREF: Obj4E_Main
0000FD26 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000FD2A 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000FD32 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FD38 137C 0004 0001             		move.b	#4,1(a1)
0000FD3E 137C 0050 0019             		move.b	#$50,$19(a1)
0000FD44 3368 0008 0008             		move.w	8(a0),8(a1)
0000FD4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FD50 137C 0001 0018             		move.b	#1,$18(a1)
0000FD56 137C 0000 001C             		move.b	#0,$1C(a1)
0000FD5C 137C 0094 0020             		move.b	#$94,$20(a1)
0000FD62 2348 003C                  		move.l	a0,$3C(a1)
0000FD66                            
0000FD66                            loc_F0C8:
0000FD66 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000FD6A                            
0000FD6A 5C29 0024                  		addq.b	#6,$24(a1)
0000FD6E 137C 0004 001A             		move.b	#4,$1A(a1)
0000FD74                            
0000FD74                            Obj4E_Action:				; XREF: Obj4E_Index
0000FD74 3038 D008                  		move.w	($FFFFD008).w,d0
0000FD78 9068 0008                  		sub.w	8(a0),d0
0000FD7C 6400                       		bcc.s	Obj4E_ChkSonic
0000FD7E 4440                       		neg.w	d0
0000FD80                            
0000FD80                            Obj4E_ChkSonic:
0000FD80 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000FD84 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FD86 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FD8A 9068 000C                  		sub.w	$C(a0),d0
0000FD8E 6400                       		bcc.s	loc_F0F4
0000FD90 4440                       		neg.w	d0
0000FD92                            
0000FD92                            loc_F0F4:
0000FD92 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000FD96 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FD98 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000FD9E 6000                       		bra.s	Obj4E_Solid
0000FDA0                            ; ===========================================================================
0000FDA0                            
0000FDA0                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000FDA0 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000FDA4 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000FDA6 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000FDAC 5528 0024                  		subq.b	#2,$24(a0)
0000FDB0                            
0000FDB0                            Obj4E_Solid:				; XREF: Obj4E_Index
0000FDB0 323C 002B                  		move.w	#$2B,d1
0000FDB4 343C 0018                  		move.w	#$18,d2
0000FDB8 3602                       		move.w	d2,d3
0000FDBA 5243                       		addq.w	#1,d3
0000FDBC 3828 0008                  		move.w	8(a0),d4
0000FDC0 1028 0024                  		move.b	$24(a0),d0
0000FDC4 3F00                       		move.w	d0,-(sp)
0000FDC6 6100 0000                  		bsr.w	SolidObject
0000FDCA 301F                       		move.w	(sp)+,d0
0000FDCC 1140 0024                  		move.b	d0,$24(a0)
0000FDD0 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000FDD6 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000FDD8 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000FDDC 4228 0036                  		clr.b	$36(a0)
0000FDE0                            
0000FDE0                            Obj4E_Animate:
0000FDE0 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000FDE6 6100 B518                  		bsr.w	AnimateSprite
0000FDEA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000FDF0 6400                       		bcc.s	Obj4E_ChkDel
0000FDF2 6100 E47A                  		bsr.w	SpeedToPos
0000FDF6                            
0000FDF6                            Obj4E_ChkDel:
0000FDF6 6100 E4B0                  		bsr.w	DisplaySprite
0000FDFA 4A28 0036                  		tst.b	$36(a0)
0000FDFE 6600                       		bne.s	locret_F17E
0000FE00 3028 0008                  		move.w	8(a0),d0
0000FE04 0240 FF80                  		andi.w	#$FF80,d0
0000FE08 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE0C 0441 0080                  		subi.w	#$80,d1
0000FE10 0241 FF80                  		andi.w	#$FF80,d1
0000FE14 9041                       		sub.w	d1,d0
0000FE16 0C40 0280                  		cmpi.w	#$280,d0
0000FE1A 6200                       		bhi.s	Obj4E_ChkGone
0000FE1C                            
0000FE1C                            locret_F17E:
0000FE1C 4E75                       		rts	
0000FE1E                            ; ===========================================================================
0000FE1E                            
0000FE1E                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FE1E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FE22 7000                       		moveq	#0,d0
0000FE24 1028 0023                  		move.b	$23(a0),d0
0000FE28 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FE2E 117C 0008 0024             		move.b	#8,$24(a0)
0000FE34 4E75                       		rts	
0000FE36                            ; ===========================================================================
0000FE36                            
0000FE36                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FE36 2268 003C                  		movea.l	$3C(a0),a1
0000FE3A 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FE40 6700                       		beq.s	Obj4E_Delete
0000FE42 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FE48 0468 0080 0008             		subi.w	#$80,8(a0)
0000FE4E 6000 E458                  		bra.w	DisplaySprite
0000FE52                            ; ===========================================================================
0000FE52                            
0000FE52                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FE52 6000 E490                  		bra.w	DeleteObject
0000FE56                            ; ===========================================================================
0000FE56                            ; ---------------------------------------------------------------------------
0000FE56                            ; Object 54 - invisible	lava tag (MZ)
0000FE56                            ; ---------------------------------------------------------------------------
0000FE56                            
0000FE56                            Obj54:					; XREF: Obj_Index
0000FE56 7000                       		moveq	#0,d0
0000FE58 1028 0024                  		move.b	$24(a0),d0
0000FE5C 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FE60 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FE64                            ; ===========================================================================
0000FE64 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FE66 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FE68                            
0000FE68 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FE6C                            ; ===========================================================================
0000FE6C                            
0000FE6C                            Obj54_Main:				; XREF: Obj54_Index
0000FE6C 5428 0024                  		addq.b	#2,$24(a0)
0000FE70 7000                       		moveq	#0,d0
0000FE72 1028 0028                  		move.b	$28(a0),d0
0000FE76 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FE7C 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FE84 117C 0084 0001             		move.b	#$84,1(a0)
0000FE8A                            
0000FE8A                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FE8A 3028 0008                  		move.w	8(a0),d0
0000FE8E 0240 FF80                  		andi.w	#$FF80,d0
0000FE92 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE96 0441 0080                  		subi.w	#$80,d1
0000FE9A 0241 FF80                  		andi.w	#$FF80,d1
0000FE9E 9041                       		sub.w	d1,d0
0000FEA0 6B00 E442                  		bmi.w	DeleteObject
0000FEA4 0C40 0280                  		cmpi.w	#$280,d0
0000FEA8 6200 E43A                  		bhi.w	DeleteObject
0000FEAC 4E75                       		rts	
0000FEAE                            ; ===========================================================================
0000FEAE                            ; ---------------------------------------------------------------------------
0000FEAE                            ; Sprite mappings - invisible lava tag (MZ)
0000FEAE                            ; ---------------------------------------------------------------------------
0000FEAE                            Map_obj54:
0000FEAE                            	include "_maps\obj54.asm"
0000FEAE                            ; ---------------------------------------------------------------------------
0000FEAE                            ; Sprite mappings - invisible lava tag (MZ)
0000FEAE                            ; ---------------------------------------------------------------------------
0000FEAE 0000                       		dc.w byte_F212-Map_obj54
0000FEB0 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FEB2 00                         		even
0000FEB2 00                         		even
0000FEB2                            
0000FEB2                            Ani_obj4C:
0000FEB2                            	include "_anim\obj4C.asm"
0000FEB2                            ; ---------------------------------------------------------------------------
0000FEB2                            ; Animation script - geyser of lava (MZ)
0000FEB2                            ; ---------------------------------------------------------------------------
0000FEB2 0000                       		dc.w byte_F220-Ani_obj4C
0000FEB4 0000                       		dc.w byte_F22A-Ani_obj4C
0000FEB6 0000                       		dc.w byte_F22E-Ani_obj4C
0000FEB8 0000                       		dc.w byte_F232-Ani_obj4C
0000FEBA 0000                       		dc.w byte_F23A-Ani_obj4C
0000FEBC 0000                       		dc.w byte_F23E-Ani_obj4C
0000FEBE 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FEC8 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FECC 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FED0 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FED8 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FEDC 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FEE0                            		even
0000FEE0                            		even
0000FEE0                            
0000FEE0                            Ani_obj4E:
0000FEE0                            	include "_anim\obj4E.asm"
0000FEE0                            ; ---------------------------------------------------------------------------
0000FEE0                            ; Animation script - advancing wall of lava (MZ)
0000FEE0                            ; ---------------------------------------------------------------------------
0000FEE0 0000                       		dc.w byte_F244-Ani_obj4E
0000FEE2 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FEE8                            		even
0000FEE8                            		even
0000FEE8                            
0000FEE8                            ; ---------------------------------------------------------------------------
0000FEE8                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FEE8                            ; ---------------------------------------------------------------------------
0000FEE8                            Map_obj4C:
0000FEE8                            	include "_maps\obj4C.asm"
0000FEE8                            ; ---------------------------------------------------------------------------
0000FEE8                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FEE8                            ; ---------------------------------------------------------------------------
0000FEE8 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FEEC 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FEF0 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FEF4 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FEF8 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FEFC 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FF00 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FF04 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FF08 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FF0C 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FF10 02                         byte_F272:	dc.b 2
0000FF11 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FF16 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FF1B 02                         byte_F27D:	dc.b 2
0000FF1C EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FF21 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FF26 04                         byte_F288:	dc.b 4
0000FF27 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FF2C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FF31 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FF36 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FF3B 04                         byte_F29D:	dc.b 4
0000FF3C EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FF41 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FF46 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FF4B EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FF50 06                         byte_F2B2:	dc.b 6
0000FF51 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FF56 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FF5B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FF60 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FF65 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FF6A E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FF6F 06                         byte_F2D1:	dc.b 6
0000FF70 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FF75 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FF7A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FF7F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FF84 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FF89 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FF8E 02                         byte_F2F0:	dc.b 2
0000FF8F E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FF94 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FF99 02                         byte_F2FB:	dc.b 2
0000FF9A E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FF9F E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FFA4 0A                         byte_F306:	dc.b $A
0000FFA5 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FFAA 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FFAF B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FFB4 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FFB9 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FFBE D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FFC3 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FFC8 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FFCD 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FFD2 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FFD7 0A                         byte_F339:	dc.b $A
0000FFD8 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FFDD 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FFE2 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FFE7 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FFEC D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FFF1 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FFF6 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FFFB F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010000 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010005 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001000A 0A                         byte_F36C:	dc.b $A
0001000B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010010 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010015 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001001A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0001001F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010024 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010029 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0001002E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010033 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010038 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001003D 06                         byte_F39F:	dc.b 6
0001003E 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010043 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010048 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001004D B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010052 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010057 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001005C 06                         byte_F3BE:	dc.b 6
0001005D 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010062 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010067 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001006C B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010071 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010076 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001007B 06                         byte_F3DD:	dc.b 6
0001007C 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010081 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010086 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001008B B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010090 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010095 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001009A 10                         byte_F3FC:	dc.b $10
0001009B 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000100A0 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000100A5 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000100AA B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000100AF D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000100B4 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000100B9 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000100BE F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000100C3 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000100C8 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000100CD 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
000100D2 300F 0840 00               		dc.b $30, $F, 8, $40, 0
000100D7 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
000100DC 500F 0840 00               		dc.b $50, $F, 8, $40, 0
000100E1 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
000100E6 700F 0840 00               		dc.b $70, $F, 8, $40, 0
000100EB 10                         byte_F44D:	dc.b $10
000100EC 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000100F1 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000100F6 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000100FB B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010100 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010105 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001010A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001010F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010114 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010119 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001011E 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00010123 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00010128 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0001012D 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00010132 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00010137 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0001013C 10                         byte_F49E:	dc.b $10
0001013D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010142 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010147 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001014C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010151 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010156 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001015B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010160 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010165 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001016A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001016F 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00010174 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00010179 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0001017E 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010183 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010188 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001018D 06                         byte_F4EF:	dc.b 6
0001018E E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010193 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010198 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0001019D E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
000101A2 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
000101A7 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
000101AC 06                         byte_F50E:	dc.b 6
000101AD E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
000101B2 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
000101B7 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
000101BC E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
000101C1 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
000101C6 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
000101CB 00                         byte_F52D:	dc.b 0
000101CC                            		even
000101CC                            		even
000101CC                            
000101CC                            ; ---------------------------------------------------------------------------
000101CC                            ; Sprite mappings - advancing wall of lava (MZ)
000101CC                            ; ---------------------------------------------------------------------------
000101CC                            Map_obj4E:
000101CC                            	include "_maps\obj4E.asm"
000101CC                            ; ---------------------------------------------------------------------------
000101CC                            ; Sprite mappings - advancing wall of lava (MZ)
000101CC                            ; ---------------------------------------------------------------------------
000101CC 0000                       		dc.w byte_F538-Map_obj4E
000101CE 0000                       		dc.w byte_F566-Map_obj4E
000101D0 0000                       		dc.w byte_F594-Map_obj4E
000101D2 0000                       		dc.w byte_F5C2-Map_obj4E
000101D4 0000                       		dc.w byte_F5F0-Map_obj4E
000101D6 09                         byte_F538:	dc.b 9
000101D7 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
000101DC 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000101E1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000101E6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000101EB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000101F0 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000101F5 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000101FA E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000101FF 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010204 09                         byte_F566:	dc.b 9
00010205 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0001020A 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0001020F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010214 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010219 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001021E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010223 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010228 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001022D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010232 09                         byte_F594:	dc.b 9
00010233 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
00010238 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0001023D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010242 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010247 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001024C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010251 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010256 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001025B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010260 09                         byte_F5C2:	dc.b 9
00010261 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010266 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0001026B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010270 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010275 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001027A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001027F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010284 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010289 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001028E 08                         byte_F5F0:	dc.b 8
0001028F E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010294 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010299 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001029E 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000102A3 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000102A8 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000102AD E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000102B2 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000102B8 00                         		even
000102B8 00                         		even
000102B8                            
000102B8                            ; ===========================================================================
000102B8                            ; ---------------------------------------------------------------------------
000102B8                            ; Object 40 - Moto Bug enemy (GHZ)
000102B8                            ; ---------------------------------------------------------------------------
000102B8                            
000102B8                            Obj40:					; XREF: Obj_Index
000102B8 7000                       		moveq	#0,d0
000102BA 1028 0024                  		move.b	$24(a0),d0
000102BE 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
000102C2 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
000102C6                            ; ===========================================================================
000102C6 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
000102C8 0000                       		dc.w Obj40_Action-Obj40_Index
000102CA 0000                       		dc.w Obj40_Animate-Obj40_Index
000102CC 0000                       		dc.w Obj40_Delete-Obj40_Index
000102CE                            ; ===========================================================================
000102CE                            
000102CE                            Obj40_Main:				; XREF: Obj40_Index
000102CE 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
000102D6 317C 04F0 0002             		move.w	#$4F0,2(a0)
000102DC 117C 0004 0001             		move.b	#4,1(a0)
000102E2 117C 0004 0018             		move.b	#4,$18(a0)
000102E8 117C 0014 0019             		move.b	#$14,$19(a0)
000102EE 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
000102F2 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
000102F4 117C 000E 0016             		move.b	#$E,$16(a0)
000102FA 117C 0008 0017             		move.b	#8,$17(a0)
00010300 117C 000C 0020             		move.b	#$C,$20(a0)
00010306 6100 DF04                  		bsr.w	ObjectFall
0001030A 4EB9 0000 0000             		jsr	ObjHitFloor
00010310 4A41                       		tst.w	d1
00010312 6A00                       		bpl.s	locret_F68A
00010314 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010318 317C 0000 0012             		move.w	#0,$12(a0)
0001031E 5428 0024                  		addq.b	#2,$24(a0)
00010322 0868 0000 0022             		bchg	#0,$22(a0)
00010328                            
00010328                            locret_F68A:
00010328 4E75                       		rts	
0001032A                            ; ===========================================================================
0001032A                            
0001032A                            Obj40_SetSmoke:				; XREF: Obj40_Main
0001032A 5828 0024                  		addq.b	#4,$24(a0)
0001032E 6000 0000                  		bra.w	Obj40_Animate
00010332                            ; ===========================================================================
00010332                            
00010332                            Obj40_Action:				; XREF: Obj40_Index
00010332 7000                       		moveq	#0,d0
00010334 1028 0025                  		move.b	$25(a0),d0
00010338 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0001033C 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00010340 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010346 6100 AFB8                  		bsr.w	AnimateSprite
0001034A                            
0001034A                            ; ---------------------------------------------------------------------------
0001034A                            ; Routine to mark an enemy/monitor/ring	as destroyed
0001034A                            ; ---------------------------------------------------------------------------
0001034A                            
0001034A                            MarkObjGone:
0001034A 3028 0008                  		move.w	8(a0),d0
0001034E 0240 FF80                  		andi.w	#$FF80,d0
00010352 3238 F700                  		move.w	($FFFFF700).w,d1
00010356 0441 0080                  		subi.w	#$80,d1
0001035A 0241 FF80                  		andi.w	#$FF80,d1
0001035E 9041                       		sub.w	d1,d0
00010360 0C40 0280                  		cmpi.w	#$280,d0
00010364 6200 0000                  		bhi.w	Mark_ChkGone
00010368 6000 DF3E                  		bra.w	DisplaySprite
0001036C                            ; ===========================================================================
0001036C                            
0001036C                            Mark_ChkGone:
0001036C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010370 7000                       		moveq	#0,d0
00010372 1028 0023                  		move.b	$23(a0),d0
00010376 6700                       		beq.s	Mark_Delete
00010378 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001037E                            
0001037E                            Mark_Delete:
0001037E 6000 DF64                  		bra.w	DeleteObject
00010382                            
00010382                            ; ===========================================================================
00010382 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00010384 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00010386                            ; ===========================================================================
00010386                            
00010386                            Obj40_Move:				; XREF: Obj40_Index2
00010386 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001038A 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0001038C 5428 0025                  		addq.b	#2,$25(a0)
00010390 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00010396 117C 0001 001C             		move.b	#1,$1C(a0)
0001039C 0868 0000 0022             		bchg	#0,$22(a0)
000103A2 6600                       		bne.s	locret_F70A
000103A4 4468 0010                  		neg.w	$10(a0)		; change direction
000103A8                            
000103A8                            locret_F70A:
000103A8 4E75                       		rts	
000103AA                            ; ===========================================================================
000103AA                            
000103AA                            Obj40_FixToFloor:			; XREF: Obj40_Index2
000103AA 6100 DEC2                  		bsr.w	SpeedToPos
000103AE 4EB9 0000 0000             		jsr	ObjHitFloor
000103B4 0C41 FFF8                  		cmpi.w	#-8,d1
000103B8 6D00                       		blt.s	Obj40_Pause
000103BA 0C41 000C                  		cmpi.w	#$C,d1
000103BE 6C00                       		bge.s	Obj40_Pause
000103C0 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000103C4 5328 0033                  		subq.b	#1,$33(a0)
000103C8 6A00                       		bpl.s	locret_F756
000103CA 117C 000F 0033             		move.b	#$F,$33(a0)
000103D0 6100 E35C                  		bsr.w	SingleObjLoad
000103D4 6600                       		bne.s	locret_F756
000103D6 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
000103DA 3368 0008 0008             		move.w	8(a0),8(a1)
000103E0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000103E6 1368 0022 0022             		move.b	$22(a0),$22(a1)
000103EC 137C 0002 001C             		move.b	#2,$1C(a1)
000103F2                            
000103F2                            locret_F756:
000103F2 4E75                       		rts	
000103F4                            ; ===========================================================================
000103F4                            
000103F4                            Obj40_Pause:				; XREF: Obj40_FixToFloor
000103F4 5528 0025                  		subq.b	#2,$25(a0)
000103F8 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000103FE 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00010404 117C 0000 001C             		move.b	#0,$1C(a0)
0001040A 4E75                       		rts	
0001040C                            ; ===========================================================================
0001040C                            
0001040C                            Obj40_Animate:				; XREF: Obj40_Index
0001040C 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010412 6100 AEEC                  		bsr.w	AnimateSprite
00010416 6000 DE90                  		bra.w	DisplaySprite
0001041A                            ; ===========================================================================
0001041A                            
0001041A                            Obj40_Delete:				; XREF: Obj40_Index
0001041A 6000 DEC8                  		bra.w	DeleteObject
0001041E                            ; ===========================================================================
0001041E                            Ani_obj40:
0001041E                            	include "_anim\obj40.asm"
0001041E                            ; ---------------------------------------------------------------------------
0001041E                            ; Animation script - Motobug enemy
0001041E                            ; ---------------------------------------------------------------------------
0001041E 0000                       		dc.w byte_F788-Ani_obj40
00010420 0000                       		dc.w byte_F78C-Ani_obj40
00010422 0000                       		dc.w byte_F792-Ani_obj40
00010424 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00010428 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0001042E 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0001043C                            		even
0001043C                            		even
0001043C                            
0001043C                            ; ---------------------------------------------------------------------------
0001043C                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001043C                            ; ---------------------------------------------------------------------------
0001043C                            Map_obj40:
0001043C                            	include "_maps\obj40.asm"
0001043C                            Map_cedc:
0001043C 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0001043E 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
00010440 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
00010442 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
00010444 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
00010446 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
00010448 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0001044A 04                         Map_cedc_E: 	dc.b $4
0001044B F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
00010450 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
00010455 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0001045A 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0001045F 04                         Map_cedc_23: 	dc.b $4
00010460 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
00010465 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0001046A F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0001046F 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
00010474 05                         Map_cedc_38: 	dc.b $5
00010475 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0001047A 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0001047F F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00010484 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
00010489 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0001048E 01                         Map_cedc_52: 	dc.b $1
0001048F FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
00010494 01                         Map_cedc_58: 	dc.b $1
00010495 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0001049A 01                         Map_cedc_5E: 	dc.b $1
0001049B FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
000104A0 00                         Map_cedc_64: 	dc.b $0
000104A2 00                         	even
000104A2 00                         	even
000104A2                            
000104A2                            ; ===========================================================================
000104A2                            ; ---------------------------------------------------------------------------
000104A2                            ; Object 4F - blank
000104A2                            ; ---------------------------------------------------------------------------
000104A2                            
000104A2                            Obj4F:					; XREF: Obj_Index
000104A2 4E75                       		rts	
000104A4                            
000104A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104A4                            
000104A4                            
000104A4                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
000104A4 3038 FE04                  		move.w	($FFFFFE04).w,d0
000104A8 D047                       		add.w	d7,d0
000104AA 0240 0003                  		andi.w	#3,d0
000104AE 6600                       		bne.s	loc_F836
000104B0 7600                       		moveq	#0,d3
000104B2 1628 0019                  		move.b	$19(a0),d3
000104B6 4A68 0010                  		tst.w	$10(a0)
000104BA 6B00                       		bmi.s	loc_F82C
000104BC 6100 0000                  		bsr.w	ObjHitWallRight
000104C0 4A41                       		tst.w	d1
000104C2 6A00                       		bpl.s	loc_F836
000104C4                            
000104C4                            loc_F828:
000104C4 7001                       		moveq	#1,d0
000104C6 4E75                       		rts	
000104C8                            ; ===========================================================================
000104C8                            
000104C8                            loc_F82C:
000104C8 4643                       		not.w	d3
000104CA 6100 0000                  		bsr.w	ObjHitWallLeft
000104CE 4A41                       		tst.w	d1
000104D0 6BF2                       		bmi.s	loc_F828
000104D2                            
000104D2                            loc_F836:
000104D2 7000                       		moveq	#0,d0
000104D4 4E75                       		rts	
000104D6                            ; End of function Obj50_ChkWall
000104D6                            
000104D6                            ; ===========================================================================
000104D6                            ; ---------------------------------------------------------------------------
000104D6                            ; Object 50 - Yadrin enemy (SYZ)
000104D6                            ; ---------------------------------------------------------------------------
000104D6                            
000104D6                            Obj50:					; XREF: Obj_Index
000104D6 7000                       		moveq	#0,d0
000104D8 1028 0024                  		move.b	$24(a0),d0
000104DC 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
000104E0 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
000104E4                            ; ===========================================================================
000104E4 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
000104E6 0000                       		dc.w Obj50_Action-Obj50_Index
000104E8                            ; ===========================================================================
000104E8                            
000104E8                            Obj50_Main:				; XREF: Obj50_Index
000104E8 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
000104F0 317C 247B 0002             		move.w	#$247B,2(a0)
000104F6 117C 0004 0001             		move.b	#4,1(a0)
000104FC 117C 0004 0018             		move.b	#4,$18(a0)
00010502 117C 0014 0019             		move.b	#$14,$19(a0)
00010508 117C 0011 0016             		move.b	#$11,$16(a0)
0001050E 117C 0008 0017             		move.b	#8,$17(a0)
00010514 117C 00CC 0020             		move.b	#$CC,$20(a0)
0001051A 6100 DCF0                  		bsr.w	ObjectFall
0001051E 6100 0000                  		bsr.w	ObjHitFloor
00010522 4A41                       		tst.w	d1
00010524 6A00                       		bpl.s	locret_F89E
00010526 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001052A 317C 0000 0012             		move.w	#0,$12(a0)
00010530 5428 0024                  		addq.b	#2,$24(a0)
00010534 0868 0000 0022             		bchg	#0,$22(a0)
0001053A                            
0001053A                            locret_F89E:
0001053A 4E75                       		rts	
0001053C                            ; ===========================================================================
0001053C                            
0001053C                            Obj50_Action:				; XREF: Obj50_Index
0001053C 7000                       		moveq	#0,d0
0001053E 1028 0025                  		move.b	$25(a0),d0
00010542 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00010546 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0001054A 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00010550 6100 ADAE                  		bsr.w	AnimateSprite
00010554 6000 FDF4                  		bra.w	MarkObjGone
00010558                            ; ===========================================================================
00010558 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0001055A 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0001055C                            ; ===========================================================================
0001055C                            
0001055C                            Obj50_Move:				; XREF: Obj50_Index2
0001055C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010560 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010562 5428 0025                  		addq.b	#2,$25(a0)
00010566 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0001056C 117C 0001 001C             		move.b	#1,$1C(a0)
00010572 0868 0000 0022             		bchg	#0,$22(a0)
00010578 6600                       		bne.s	locret_F8E2
0001057A 4468 0010                  		neg.w	$10(a0)		; change direction
0001057E                            
0001057E                            locret_F8E2:
0001057E 4E75                       		rts	
00010580                            ; ===========================================================================
00010580                            
00010580                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010580 6100 DCEC                  		bsr.w	SpeedToPos
00010584 6100 0000                  		bsr.w	ObjHitFloor
00010588 0C41 FFF8                  		cmpi.w	#-8,d1
0001058C 6D00                       		blt.s	Obj50_Pause
0001058E 0C41 000C                  		cmpi.w	#$C,d1
00010592 6C00                       		bge.s	Obj50_Pause
00010594 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00010598 6100 FF0A                  		bsr.w	Obj50_ChkWall
0001059C 6600                       		bne.s	Obj50_Pause
0001059E 4E75                       		rts	
000105A0                            ; ===========================================================================
000105A0                            
000105A0                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000105A0 5528 0025                  		subq.b	#2,$25(a0)
000105A4 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000105AA 317C 0000 0010             		move.w	#0,$10(a0)
000105B0 117C 0000 001C             		move.b	#0,$1C(a0)
000105B6 4E75                       		rts	
000105B8                            ; ===========================================================================
000105B8                            Ani_obj50:
000105B8                            	include "_anim\obj50.asm"
000105B8                            ; ---------------------------------------------------------------------------
000105B8                            ; Animation script - Yadrin enemy
000105B8                            ; ---------------------------------------------------------------------------
000105B8 0000                       		dc.w byte_F920-Ani_obj50
000105BA 0000                       		dc.w byte_F924-Ani_obj50
000105BC 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000105C0 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
000105CA                            		even
000105CA                            		even
000105CA                            
000105CA                            ; ---------------------------------------------------------------------------
000105CA                            ; Sprite mappings - Yadrin enemy (SYZ)
000105CA                            ; ---------------------------------------------------------------------------
000105CA                            Map_obj50:
000105CA                            	include "_maps\obj50.asm"
000105CA                            Map_ff24:
000105CA 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
000105CC 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
000105CE 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
000105D0 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
000105D2 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
000105D4 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
000105D6 05                         Map_ff24_C: 	dc.b $5
000105D7 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000105DC FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000105E1 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000105E6 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000105EB 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000105F0 05                         Map_ff24_26: 	dc.b $5
000105F1 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000105F6 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000105FB EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010600 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010605 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0001060A 05                         Map_ff24_40: 	dc.b $5
0001060B F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010610 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010615 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001061A F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001061F 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010624 05                         Map_ff24_5A: 	dc.b $5
00010625 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0001062A FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
0001062F EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010634 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010639 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001063E 05                         Map_ff24_74: 	dc.b $5
0001063F F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010644 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010649 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001064E F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010653 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010658 05                         Map_ff24_8E: 	dc.b $5
00010659 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
0001065E 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010663 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010668 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001066D 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010672                            	even
00010672                            	even
00010672                            
00010672                            ; ---------------------------------------------------------------------------
00010672                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010672                            ;
00010672                            ; variables:
00010672                            ; d1 = width
00010672                            ; d2 = height /	2 (when	jumping)
00010672                            ; d3 = height /	2 (when	walking)
00010672                            ; d4 = x-axis position
00010672                            ; ---------------------------------------------------------------------------
00010672                            
00010672                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010672                            
00010672                            
00010672                            SolidObject:
00010672 4A28 0025                  		tst.b	$25(a0)
00010676 6700 0000                  		beq.w	loc_FAC8
0001067A 3401                       		move.w	d1,d2
0001067C D442                       		add.w	d2,d2
0001067E 43F8 D000                  		lea	($FFFFD000).w,a1
00010682 0829 0001 0022             		btst	#1,$22(a1)
00010688 6600                       		bne.s	loc_F9FE
0001068A 3029 0008                  		move.w	8(a1),d0
0001068E 9068 0008                  		sub.w	8(a0),d0
00010692 D041                       		add.w	d1,d0
00010694 6B00                       		bmi.s	loc_F9FE
00010696 B042                       		cmp.w	d2,d0
00010698 6500                       		bcs.s	loc_FA12
0001069A                            
0001069A                            loc_F9FE:
0001069A 08A9 0003 0022             		bclr	#3,$22(a1)
000106A0 08A8 0003 0022             		bclr	#3,$22(a0)
000106A6 4228 0025                  		clr.b	$25(a0)
000106AA 7800                       		moveq	#0,d4
000106AC 4E75                       		rts	
000106AE                            ; ===========================================================================
000106AE                            
000106AE                            loc_FA12:
000106AE 3404                       		move.w	d4,d2
000106B0 4EB9 0000 85A0             		jsr	MvSonicOnPtfm 
000106B6 7800                       		moveq	#0,d4
000106B8 4E75                       		rts	
000106BA                            ; ===========================================================================
000106BA                            
000106BA                            SolidObject71:				; XREF: Obj71_Solid
000106BA 4A28 0025                  		tst.b	$25(a0)
000106BE 6700 0000                  		beq.w	loc_FAD0
000106C2 3401                       		move.w	d1,d2
000106C4 D442                       		add.w	d2,d2
000106C6 43F8 D000                  		lea	($FFFFD000).w,a1
000106CA 0829 0001 0022             		btst	#1,$22(a1)
000106D0 6600                       		bne.s	loc_FA44
000106D2 3029 0008                  		move.w	8(a1),d0
000106D6 9068 0008                  		sub.w	8(a0),d0
000106DA D041                       		add.w	d1,d0
000106DC 6B00                       		bmi.s	loc_FA44
000106DE B042                       		cmp.w	d2,d0
000106E0 6500                       		bcs.s	loc_FA58
000106E2                            
000106E2                            loc_FA44:
000106E2 08A9 0003 0022             		bclr	#3,$22(a1)
000106E8 08A8 0003 0022             		bclr	#3,$22(a0)
000106EE 4228 0025                  		clr.b	$25(a0)
000106F2 7800                       		moveq	#0,d4
000106F4 4E75                       		rts	
000106F6                            ; ===========================================================================
000106F6                            
000106F6                            loc_FA58:
000106F6 3404                       		move.w	d4,d2
000106F8                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
000106F8 7800                       		moveq	#0,d4
000106FA 4E75                       		rts	
000106FC                            ; ===========================================================================
000106FC                            
000106FC                            SolidObject2F:				; XREF: Obj2F_Solid
000106FC 43F8 D000                  		lea	($FFFFD000).w,a1
00010700 4A28 0001                  		tst.b	1(a0)
00010704 6A00 0000                  		bpl.w	loc_FB92
00010708 3029 0008                  		move.w	8(a1),d0
0001070C 9068 0008                  		sub.w	8(a0),d0
00010710 D041                       		add.w	d1,d0
00010712 6B00 0000                  		bmi.w	loc_FB92
00010716 3601                       		move.w	d1,d3
00010718 D643                       		add.w	d3,d3
0001071A B043                       		cmp.w	d3,d0
0001071C 6200 0000                  		bhi.w	loc_FB92
00010720 3A00                       		move.w	d0,d5
00010722 0828 0000 0001             		btst	#0,1(a0)
00010728 6700                       		beq.s	loc_FA94
0001072A 4645                       		not.w	d5
0001072C DA43                       		add.w	d3,d5
0001072E                            
0001072E                            loc_FA94:
0001072E E24D                       		lsr.w	#1,d5
00010730 7600                       		moveq	#0,d3
00010732 1632 5000                  		move.b	(a2,d5.w),d3
00010736 9612                       		sub.b	(a2),d3
00010738 3A28 000C                  		move.w	$C(a0),d5
0001073C 9A43                       		sub.w	d3,d5
0001073E 1629 0016                  		move.b	$16(a1),d3
00010742 4883                       		ext.w	d3
00010744 D443                       		add.w	d3,d2
00010746 3629 000C                  		move.w	$C(a1),d3
0001074A 9645                       		sub.w	d5,d3
0001074C 5843                       		addq.w	#4,d3
0001074E D642                       		add.w	d2,d3
00010750 6B00 0000                  		bmi.w	loc_FB92
00010754 3802                       		move.w	d2,d4
00010756 D844                       		add.w	d4,d4
00010758 B644                       		cmp.w	d4,d3
0001075A 6400 0000                  		bcc.w	loc_FB92
0001075E 6000 0000                  		bra.w	loc_FB0E
00010762                            ; ===========================================================================
00010762                            
00010762                            loc_FAC8:
00010762 4A28 0001                  		tst.b	1(a0)
00010766 6A00 0000                  		bpl.w	loc_FB92
0001076A                            
0001076A                            loc_FAD0:
0001076A 43F8 D000                  		lea	($FFFFD000).w,a1
0001076E 3029 0008                  		move.w	8(a1),d0
00010772 9068 0008                  		sub.w	8(a0),d0
00010776 D041                       		add.w	d1,d0
00010778 6B00 0000                  		bmi.w	loc_FB92
0001077C 3601                       		move.w	d1,d3
0001077E D643                       		add.w	d3,d3
00010780 B043                       		cmp.w	d3,d0
00010782 6200 0000                  		bhi.w	loc_FB92
00010786 1629 0016                  		move.b	$16(a1),d3
0001078A 4883                       		ext.w	d3
0001078C D443                       		add.w	d3,d2
0001078E 3629 000C                  		move.w	$C(a1),d3
00010792 9668 000C                  		sub.w	$C(a0),d3
00010796 5843                       		addq.w	#4,d3
00010798 D642                       		add.w	d2,d3
0001079A 6B00 0000                  		bmi.w	loc_FB92
0001079E 3802                       		move.w	d2,d4
000107A0 D844                       		add.w	d4,d4
000107A2 B644                       		cmp.w	d4,d3
000107A4 6400 0000                  		bcc.w	loc_FB92
000107A8                            
000107A8                            loc_FB0E:
000107A8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000107AC 6B00 0000                  		bmi.w	loc_FB92
000107B0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000107B6 6400 0000                  		bcc.w	loc_FB92
000107BA 4A78 FE08                  		tst.w	($FFFFFE08).w
000107BE 6600 0000                  		bne.w	loc_FBAC
000107C2 3A00                       		move.w	d0,d5
000107C4 B240                       		cmp.w	d0,d1
000107C6 6400                       		bcc.s	loc_FB36
000107C8 D241                       		add.w	d1,d1
000107CA 9041                       		sub.w	d1,d0
000107CC 3A00                       		move.w	d0,d5
000107CE 4445                       		neg.w	d5
000107D0                            
000107D0                            loc_FB36:
000107D0 3203                       		move.w	d3,d1
000107D2 B443                       		cmp.w	d3,d2
000107D4 6400                       		bcc.s	loc_FB44
000107D6 5943                       		subq.w	#4,d3
000107D8 9644                       		sub.w	d4,d3
000107DA 3203                       		move.w	d3,d1
000107DC 4441                       		neg.w	d1
000107DE                            
000107DE                            loc_FB44:
000107DE BA41                       		cmp.w	d1,d5
000107E0 6200 0000                  		bhi.w	loc_FBB0
000107E4 0C41 0004                  		cmpi.w	#4,d1
000107E8 6300                       		bls.s	loc_FB8C
000107EA 4A40                       		tst.w	d0
000107EC 6700                       		beq.s	loc_FB70
000107EE 6B00                       		bmi.s	loc_FB5E
000107F0 4A69 0010                  		tst.w	$10(a1)
000107F4 6B00                       		bmi.s	loc_FB70
000107F6 6000                       		bra.s	loc_FB64
000107F8                            ; ===========================================================================
000107F8                            
000107F8                            loc_FB5E:
000107F8 4A69 0010                  		tst.w	$10(a1)
000107FC 6A00                       		bpl.s	loc_FB70
000107FE                            
000107FE                            loc_FB64:
000107FE 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010804 337C 0000 0010             		move.w	#0,$10(a1)
0001080A                            
0001080A                            loc_FB70:
0001080A 9169 0008                  		sub.w	d0,8(a1)
0001080E 0829 0001 0022             		btst	#1,$22(a1)
00010814 6600                       		bne.s	loc_FB8C
00010816 08E9 0005 0022             		bset	#5,$22(a1)
0001081C 08E8 0005 0022             		bset	#5,$22(a0)
00010822 7801                       		moveq	#1,d4
00010824 4E75                       		rts	
00010826                            ; ===========================================================================
00010826                            
00010826                            loc_FB8C:
00010826 6100                       		bsr.s	loc_FBA0
00010828 7801                       		moveq	#1,d4
0001082A 4E75                       		rts	
0001082C                            ; ===========================================================================
0001082C                            
0001082C                            loc_FB92:
0001082C 0828 0005 0022             		btst	#5,$22(a0)
00010832 6700                       		beq.s	loc_FBAC
00010834 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001083A                            
0001083A                            loc_FBA0:
0001083A 08A8 0005 0022             		bclr	#5,$22(a0)
00010840 08A9 0005 0022             		bclr	#5,$22(a1)
00010846                            
00010846                            loc_FBAC:
00010846 7800                       		moveq	#0,d4
00010848 4E75                       		rts	
0001084A                            ; ===========================================================================
0001084A                            
0001084A                            loc_FBB0:
0001084A 4A43                       		tst.w	d3
0001084C 6B00                       		bmi.s	loc_FBBC
0001084E 0C43 0010                  		cmpi.w	#$10,d3
00010852 6500                       		bcs.s	loc_FBEE
00010854 60D6                       		bra.s	loc_FB92
00010856                            ; ===========================================================================
00010856                            
00010856                            loc_FBBC:
00010856 4A69 0012                  		tst.w	$12(a1)
0001085A 6700                       		beq.s	loc_FBD6
0001085C 6A00                       		bpl.s	loc_FBD2
0001085E 4A43                       		tst.w	d3
00010860 6A00                       		bpl.s	loc_FBD2
00010862 9769 000C                  		sub.w	d3,$C(a1)
00010866 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0001086C                            
0001086C                            loc_FBD2:
0001086C 78FF                       		moveq	#-1,d4
0001086E 4E75                       		rts	
00010870                            ; ===========================================================================
00010870                            
00010870                            loc_FBD6:
00010870 0829 0001 0022             		btst	#1,$22(a1)
00010876 66F4                       		bne.s	loc_FBD2
00010878 2F08                       		move.l	a0,-(sp)
0001087A 2049                       		movea.l	a1,a0
0001087C 4EB9 0000 0000             		jsr	KillSonic
00010882 205F                       		movea.l	(sp)+,a0
00010884 78FF                       		moveq	#-1,d4
00010886 4E75                       		rts	
00010888                            ; ===========================================================================
00010888                            
00010888                            loc_FBEE:
00010888 5943                       		subq.w	#4,d3
0001088A 7200                       		moveq	#0,d1
0001088C 1228 0019                  		move.b	$19(a0),d1
00010890 3401                       		move.w	d1,d2
00010892 D442                       		add.w	d2,d2
00010894 D269 0008                  		add.w	8(a1),d1
00010898 9268 0008                  		sub.w	8(a0),d1
0001089C 6B00                       		bmi.s	loc_FC28
0001089E B242                       		cmp.w	d2,d1
000108A0 6400                       		bcc.s	loc_FC28
000108A2 4A69 0012                  		tst.w	$12(a1)
000108A6 6B00                       		bmi.s	loc_FC28
000108A8 9769 000C                  		sub.w	d3,$C(a1)
000108AC 5369 000C                  		subq.w	#1,$C(a1)
000108B0 6100                       		bsr.s	sub_FC2C
000108B2 117C 0002 0025             		move.b	#2,$25(a0)
000108B8 08E8 0003 0022             		bset	#3,$22(a0)
000108BE 78FF                       		moveq	#-1,d4
000108C0 4E75                       		rts	
000108C2                            ; ===========================================================================
000108C2                            
000108C2                            loc_FC28:
000108C2 7800                       		moveq	#0,d4
000108C4 4E75                       		rts	
000108C6                            ; End of function SolidObject
000108C6                            
000108C6                            
000108C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000108C6                            
000108C6                            
000108C6                            sub_FC2C:				; XREF: SolidObject
000108C6 0829 0003 0022             		btst	#3,$22(a1)
000108CC 6700                       		beq.s	loc_FC4E
000108CE 7000                       		moveq	#0,d0
000108D0 1029 003D                  		move.b	$3D(a1),d0
000108D4 ED48                       		lsl.w	#6,d0
000108D6 0680 00FF D000             		addi.l	#$FFD000,d0
000108DC 2440                       		movea.l	d0,a2
000108DE 08AA 0003 0022             		bclr	#3,$22(a2)
000108E4 422A 0025                  		clr.b	$25(a2)
000108E8                            
000108E8                            loc_FC4E:
000108E8 3008                       		move.w	a0,d0
000108EA 0440 D000                  		subi.w	#-$3000,d0
000108EE EC48                       		lsr.w	#6,d0
000108F0 0240 007F                  		andi.w	#$7F,d0
000108F4 1340 003D                  		move.b	d0,$3D(a1)
000108F8 137C 0000 0026             		move.b	#0,$26(a1)
000108FE 337C 0000 0012             		move.w	#0,$12(a1)
00010904 3369 0010 0014             		move.w	$10(a1),$14(a1)
0001090A 0829 0001 0022             		btst	#1,$22(a1)
00010910 6700                       		beq.s	loc_FC84
00010912 2F08                       		move.l	a0,-(sp)
00010914 2049                       		movea.l	a1,a0
00010916 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0001091C 205F                       		movea.l	(sp)+,a0
0001091E                            
0001091E                            loc_FC84:
0001091E 08E9 0003 0022             		bset	#3,$22(a1)
00010924 08E8 0003 0022             		bset	#3,$22(a0)
0001092A 4E75                       		rts	
0001092C                            ; End of function sub_FC2C
0001092C                            
0001092C                            ; ===========================================================================
0001092C                            ; ---------------------------------------------------------------------------
0001092C                            ; Object 51 - smashable	green block (MZ)
0001092C                            ; ---------------------------------------------------------------------------
0001092C                            
0001092C                            Obj51:					; XREF: Obj_Index
0001092C 7000                       		moveq	#0,d0
0001092E 1028 0024                  		move.b	$24(a0),d0
00010932 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010936 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001093A 6000 FA0E                  		bra.w	MarkObjGone
0001093E                            ; ===========================================================================
0001093E 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010940 0000                       		dc.w Obj51_Solid-Obj51_Index
00010942 0000                       		dc.w Obj51_Display-Obj51_Index
00010944                            ; ===========================================================================
00010944                            
00010944                            Obj51_Main:				; XREF: Obj51_Index
00010944 5428 0024                  		addq.b	#2,$24(a0)
00010948 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010950 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010956 117C 0004 0001             		move.b	#4,1(a0)
0001095C 117C 0010 0019             		move.b	#$10,$19(a0)
00010962 117C 0004 0018             		move.b	#4,$18(a0)
00010968 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001096E                            
0001096E                            Obj51_Solid:				; XREF: Obj51_Index
0001096E 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010974 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001097A 323C 001B                  		move.w	#$1B,d1
0001097E 343C 0010                  		move.w	#$10,d2
00010982 363C 0011                  		move.w	#$11,d3
00010986 3828 0008                  		move.w	8(a0),d4
0001098A 6100 FCE6                  		bsr.w	SolidObject
0001098E 0828 0003 0022             		btst	#3,$22(a0)
00010994 6600                       		bne.s	Obj51_Smash
00010996                            
00010996                            locret_FCFC:
00010996 4E75                       		rts	
00010998                            ; ===========================================================================
00010998                            
00010998                            Obj51_Smash:				; XREF: Obj51_Solid
00010998 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0001099E 66F6                       		bne.s	locret_FCFC	; if not, branch
000109A0 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000109A6 08E9 0002 0022             		bset	#2,$22(a1)
000109AC 137C 000E 0016             		move.b	#$E,$16(a1)
000109B2 137C 0007 0017             		move.b	#7,$17(a1)
000109B8 137C 0002 001C             		move.b	#2,$1C(a1)
000109BE 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000109C4 08E9 0001 0022             		bset	#1,$22(a1)
000109CA 08A9 0003 0022             		bclr	#3,$22(a1)
000109D0 137C 0002 0024             		move.b	#2,$24(a1)
000109D6 08A8 0003 0022             		bclr	#3,$22(a0)
000109DC 4228 0025                  		clr.b	$25(a0)
000109E0 117C 0001 001A             		move.b	#1,$1A(a0)
000109E6 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000109EC 7203                       		moveq	#3,d1		; set number of	fragments to 4
000109EE 343C 0038                  		move.w	#$38,d2
000109F2 6100 D458                  		bsr.w	SmashObject
000109F6 6100 DD36                  		bsr.w	SingleObjLoad
000109FA 6600                       		bne.s	Obj51_Display
000109FC 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010A00 3368 0008 0008             		move.w	8(a0),8(a1)
00010A06 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010A0C 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010A10 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010A14 0C42 0006                  		cmpi.w	#6,d2
00010A18 6500                       		bcs.s	Obj51_Bonus
00010A1A 7406                       		moveq	#6,d2
00010A1C                            
00010A1C                            Obj51_Bonus:
00010A1C 7000                       		moveq	#0,d0
00010A1E 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010A22 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010A28 6500                       		bcs.s	loc_FD98	; if not, branch
00010A2A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010A2E 740A                       		moveq	#10,d2
00010A30                            
00010A30                            loc_FD98:
00010A30 4EB9 0000 0000             		jsr	AddPoints
00010A36 E24A                       		lsr.w	#1,d2
00010A38 1342 001A                  		move.b	d2,$1A(a1)
00010A3C                            
00010A3C                            Obj51_Display:				; XREF: Obj51_Index
00010A3C 6100 D7CE                  		bsr.w	ObjectFall
00010A40 6100 D866                  		bsr.w	DisplaySprite
00010A44 4A28 0001                  		tst.b	1(a0)
00010A48 6A00 D89A                  		bpl.w	DeleteObject
00010A4C 4E75                       		rts	
00010A4E                            ; ===========================================================================
00010A4E FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010A52 FF00 FF00                  		dc.w $FF00, $FF00
00010A56 0200 FE00                  		dc.w $200, $FE00
00010A5A 0100 FF00                  		dc.w $100, $FF00
00010A5E                            
00010A5E 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010A66                            ; ---------------------------------------------------------------------------
00010A66                            ; Sprite mappings - smashable green block (MZ)
00010A66                            ; ---------------------------------------------------------------------------
00010A66                            Map_obj51:
00010A66                            	include "_maps\obj51.asm"
00010A66                            ; ---------------------------------------------------------------------------
00010A66                            ; Sprite mappings - smashable green block (MZ)
00010A66                            ; ---------------------------------------------------------------------------
00010A66 0000                       		dc.w byte_FDD8-Map_obj51
00010A68 0000                       		dc.w byte_FDE3-Map_obj51
00010A6A 02                         byte_FDD8:	dc.b 2
00010A6B F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010A70 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010A75 04                         byte_FDE3:	dc.b 4
00010A76 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010A7B 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010A80 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010A85 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010A8A                            		even
00010A8A                            		even
00010A8A                            
00010A8A                            ; ===========================================================================
00010A8A                            ; ---------------------------------------------------------------------------
00010A8A                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010A8A                            ; ---------------------------------------------------------------------------
00010A8A                            
00010A8A                            Obj52:					; XREF: Obj_Index
00010A8A 7000                       		moveq	#0,d0
00010A8C 1028 0024                  		move.b	$24(a0),d0
00010A90 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010A94 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010A98                            ; ===========================================================================
00010A98 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010A9A 0000                       		dc.w Obj52_Platform-Obj52_Index
00010A9C 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010A9E                            
00010A9E 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010AA0 2001                       		dc.b $20, 1
00010AA2 2002                       		dc.b $20, 2
00010AA4 4003                       		dc.b $40, 3
00010AA6 3004                       		dc.b $30, 4
00010AA8                            ; ===========================================================================
00010AA8                            
00010AA8                            Obj52_Main:				; XREF: Obj52_Index
00010AA8 5428 0024                  		addq.b	#2,$24(a0)
00010AAC 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010AB4 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010ABA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010AC0 6600                       		bne.s	loc_FE44
00010AC2 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010ACA 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010AD0 117C 0007 0016             		move.b	#7,$16(a0)
00010AD6                            
00010AD6                            loc_FE44:
00010AD6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010ADC 6600                       		bne.s	loc_FE60
00010ADE 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010AE4 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010AEA 6700                       		beq.s	loc_FE60	; if yes, branch
00010AEC 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010AF2                            
00010AF2                            loc_FE60:
00010AF2 117C 0004 0001             		move.b	#4,1(a0)
00010AF8 7000                       		moveq	#0,d0
00010AFA 1028 0028                  		move.b	$28(a0),d0
00010AFE E648                       		lsr.w	#3,d0
00010B00 0240 001E                  		andi.w	#$1E,d0
00010B04 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010B08 115A 0019                  		move.b	(a2)+,$19(a0)
00010B0C 115A 001A                  		move.b	(a2)+,$1A(a0)
00010B10 117C 0004 0018             		move.b	#4,$18(a0)
00010B16 3168 0008 0030             		move.w	8(a0),$30(a0)
00010B1C 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010B22 0228 000F 0028             		andi.b	#$F,$28(a0)
00010B28                            
00010B28                            Obj52_Platform:				; XREF: Obj52_Index
00010B28 6100 0000                  		bsr.w	Obj52_Move
00010B2C 7200                       		moveq	#0,d1
00010B2E 1228 0019                  		move.b	$19(a0),d1
00010B32 4EB9 0000 7ECE             		jsr	(PlatformObject).l
00010B38 6000                       		bra.s	Obj52_ChkDel
00010B3A                            ; ===========================================================================
00010B3A                            
00010B3A                            Obj52_StandOn:				; XREF: Obj52_Index
00010B3A 7200                       		moveq	#0,d1
00010B3C 1228 0019                  		move.b	$19(a0),d1
00010B40 4EB9 0000 8042             		jsr	(ExitPlatform).l
00010B46 3F28 0008                  		move.w	8(a0),-(sp)
00010B4A 6100 0000                  		bsr.w	Obj52_Move
00010B4E 341F                       		move.w	(sp)+,d2
00010B50 4EB9 0000 85AC             		jsr	(MvSonicOnPtfm2).l
00010B56                            
00010B56                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010B56 3028 0030                  		move.w	$30(a0),d0
00010B5A 0240 FF80                  		andi.w	#$FF80,d0
00010B5E 3238 F700                  		move.w	($FFFFF700).w,d1
00010B62 0441 0080                  		subi.w	#$80,d1
00010B66 0241 FF80                  		andi.w	#$FF80,d1
00010B6A 9041                       		sub.w	d1,d0
00010B6C 0C40 0280                  		cmpi.w	#$280,d0
00010B70 6200 D772                  		bhi.w	DeleteObject
00010B74 6000 D732                  		bra.w	DisplaySprite
00010B78                            ; ===========================================================================
00010B78                            
00010B78                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010B78 7000                       		moveq	#0,d0
00010B7A 1028 0028                  		move.b	$28(a0),d0
00010B7E 0240 000F                  		andi.w	#$F,d0
00010B82 D040                       		add.w	d0,d0
00010B84 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010B88 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010B8C                            ; ===========================================================================
00010B8C 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010B90 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010B94 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010B98 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010B9C 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010BA0 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010BA2                            ; ===========================================================================
00010BA2                            
00010BA2                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010BA2 4E75                       		rts	
00010BA4                            ; ===========================================================================
00010BA4                            
00010BA4                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010BA4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010BA8 323C 0060                  		move.w	#$60,d1
00010BAC 0828 0000 0022             		btst	#0,$22(a0)
00010BB2 6700                       		beq.s	loc_FF26
00010BB4 4440                       		neg.w	d0
00010BB6 D041                       		add.w	d1,d0
00010BB8                            
00010BB8                            loc_FF26:
00010BB8 3228 0030                  		move.w	$30(a0),d1
00010BBC 9240                       		sub.w	d0,d1
00010BBE 3141 0008                  		move.w	d1,8(a0)
00010BC2 4E75                       		rts	
00010BC4                            ; ===========================================================================
00010BC4                            
00010BC4                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010BC4 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010BCA 6600                       		bne.s	Obj52_02_Wait
00010BCC 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010BD0                            
00010BD0                            Obj52_02_Wait:
00010BD0 4E75                       		rts	
00010BD2                            ; ===========================================================================
00010BD2                            
00010BD2                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010BD2 7600                       		moveq	#0,d3
00010BD4 1628 0019                  		move.b	$19(a0),d3
00010BD8 6100 0000                  		bsr.w	ObjHitWallRight
00010BDC 4A41                       		tst.w	d1		; has the platform hit a wall?
00010BDE 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010BE0 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010BE4 3168 0008 0030             		move.w	8(a0),$30(a0)
00010BEA 4E75                       		rts	
00010BEC                            ; ===========================================================================
00010BEC                            
00010BEC                            Obj52_03_End:
00010BEC 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010BF0 4E75                       		rts	
00010BF2                            ; ===========================================================================
00010BF2                            
00010BF2                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010BF2 7600                       		moveq	#0,d3
00010BF4 1628 0019                  		move.b	$19(a0),d3
00010BF8 6100 0000                  		bsr.w	ObjHitWallRight
00010BFC 4A41                       		tst.w	d1		; has the platform hit a wall?
00010BFE 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010C00 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010C04 3168 0008 0030             		move.w	8(a0),$30(a0)
00010C0A 4E75                       		rts	
00010C0C                            ; ===========================================================================
00010C0C                            
00010C0C                            Obj52_05_End:
00010C0C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010C10 4E75                       		rts	
00010C12                            ; ===========================================================================
00010C12                            
00010C12                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010C12 7218                       		moveq	#$18,d1
00010C14 6100 D5F8                  		bsr.w	ObjectFallCustom
00010C18 6100 0000                  		bsr.w	ObjHitFloor
00010C1C 4A41                       		tst.w	d1		; has platform hit the floor?
00010C1E 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010C22 D368 000C                  		add.w	d1,$C(a0)
00010C26 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010C2A 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010C2E                            
00010C2E                            locret_FFA0:
00010C2E 4E75                       		rts	
00010C30                            ; ===========================================================================
00010C30                            
00010C30                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010C30 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010C34 6700                       		beq.s	Obj52_07_ChkDel
00010C36 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010C3A                            
00010C3A                            Obj52_07_ChkDel:
00010C3A 588F                       		addq.l	#4,sp
00010C3C 3028 0030                  		move.w	$30(a0),d0
00010C40 0240 FF80                  		andi.w	#$FF80,d0
00010C44 3238 F700                  		move.w	($FFFFF700).w,d1
00010C48 0441 0080                  		subi.w	#$80,d1
00010C4C 0241 FF80                  		andi.w	#$FF80,d1
00010C50 9041                       		sub.w	d1,d0
00010C52 0C40 0280                  		cmpi.w	#$280,d0
00010C56 6200 D68C                  		bhi.w	DeleteObject
00010C5A 4E75                       		rts	
00010C5C                            ; ===========================================================================
00010C5C                            
00010C5C                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010C5C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010C60 323C 0080                  		move.w	#$80,d1
00010C64 0828 0000 0022             		btst	#0,$22(a0)
00010C6A 6700                       		beq.s	loc_FFE2
00010C6C 4440                       		neg.w	d0
00010C6E D041                       		add.w	d1,d0
00010C70                            
00010C70                            loc_FFE2:
00010C70 3228 0032                  		move.w	$32(a0),d1
00010C74 9240                       		sub.w	d0,d1
00010C76 3141 000C                  		move.w	d1,$C(a0)
00010C7A 4E75                       		rts	
00010C7C                            ; ===========================================================================
00010C7C                            
00010C7C                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010C7C 7600                       		moveq	#0,d3
00010C7E 1628 0019                  		move.b	$19(a0),d3
00010C82 D643                       		add.w	d3,d3
00010C84 7208                       		moveq	#8,d1
00010C86 0828 0000 0022             		btst	#0,$22(a0)
00010C8C 6700                       		beq.s	loc_10004
00010C8E 4441                       		neg.w	d1
00010C90 4443                       		neg.w	d3
00010C92                            
00010C92                            loc_10004:
00010C92 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010C96 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010C98 3028 0008                  		move.w	8(a0),d0
00010C9C 9068 0030                  		sub.w	$30(a0),d0
00010CA0 B043                       		cmp.w	d3,d0
00010CA2 6700                       		beq.s	Obj52_0A_Wait
00010CA4 D368 0008                  		add.w	d1,8(a0)	; move platform
00010CA8 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010CAE 4E75                       		rts	
00010CB0                            ; ===========================================================================
00010CB0                            
00010CB0                            Obj52_0A_Wait:
00010CB0 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010CB4 6600                       		bne.s	locret_1002E	; if time remains, branch
00010CB6 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010CBC                            
00010CBC                            locret_1002E:
00010CBC 4E75                       		rts	
00010CBE                            ; ===========================================================================
00010CBE                            
00010CBE                            Obj52_0A_Back:
00010CBE 3028 0008                  		move.w	8(a0),d0
00010CC2 9068 0030                  		sub.w	$30(a0),d0
00010CC6 6700                       		beq.s	Obj52_0A_Reset
00010CC8 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010CCC 4E75                       		rts	
00010CCE                            ; ===========================================================================
00010CCE                            
00010CCE                            Obj52_0A_Reset:
00010CCE 4268 0036                  		clr.w	$36(a0)
00010CD2 5328 0028                  		subq.b	#1,$28(a0)
00010CD6 4E75                       		rts	
00010CD8                            ; ===========================================================================
00010CD8                            ; ---------------------------------------------------------------------------
00010CD8                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010CD8                            ; ---------------------------------------------------------------------------
00010CD8                            Map_obj52:
00010CD8                            	include "_maps\obj52mz.asm"
00010CD8                            ; ---------------------------------------------------------------------------
00010CD8                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010CD8                            ; ---------------------------------------------------------------------------
00010CD8 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010CDC 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010CE0 0000                       		dc.w byte_1008F-Map_obj52
00010CE2 01                         byte_10054:	dc.b 1
00010CE3 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010CE8 02                         byte_1005A:	dc.b 2
00010CE9 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010CEE F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010CF3 04                         byte_10065:	dc.b 4
00010CF4 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010CF9 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010CFE F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010D03 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010D08 04                         byte_1007A:	dc.b 4
00010D09 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010D0E F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010D13 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010D18 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010D1D 03                         byte_1008F:	dc.b 3
00010D1E F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010D23 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010D28 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010D2E 00                         		even
00010D2E 00                         		even
00010D2E                            
00010D2E                            ; ---------------------------------------------------------------------------
00010D2E                            ; Sprite mappings - moving block (LZ)
00010D2E                            ; ---------------------------------------------------------------------------
00010D2E                            Map_obj52a:
00010D2E                            	include "_maps\obj52lz.asm"
00010D2E                            ; ---------------------------------------------------------------------------
00010D2E                            ; Sprite mappings - moving block (LZ)
00010D2E                            ; ---------------------------------------------------------------------------
00010D2E 0000                       		dc.w byte_100A2-Map_obj52a
00010D30 01                         byte_100A2:	dc.b 1
00010D31 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010D36                            		even
00010D36                            		even
00010D36                            
00010D36                            ; ===========================================================================
00010D36                            ; ---------------------------------------------------------------------------
00010D36                            ; Object 55 - Basaran enemy (MZ)
00010D36                            ; ---------------------------------------------------------------------------
00010D36                            
00010D36                            Obj55:					; XREF: Obj_Index
00010D36 7000                       		moveq	#0,d0
00010D38 1028 0024                  		move.b	$24(a0),d0
00010D3C 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010D40 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010D44                            ; ===========================================================================
00010D44 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010D46 0000                       		dc.w Obj55_Action-Obj55_Index
00010D48                            ; ===========================================================================
00010D48                            
00010D48                            Obj55_Main:				; XREF: Obj55_Index
00010D48 5428 0024                  		addq.b	#2,$24(a0)
00010D4C 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010D54 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010D5A 117C 0004 0001             		move.b	#4,1(a0)
00010D60 117C 000C 0016             		move.b	#$C,$16(a0)
00010D66 117C 0002 0018             		move.b	#2,$18(a0)
00010D6C 117C 000B 0020             		move.b	#$B,$20(a0)
00010D72 117C 0010 0019             		move.b	#$10,$19(a0)
00010D78                            
00010D78                            Obj55_Action:				; XREF: Obj55_Index
00010D78 7000                       		moveq	#0,d0
00010D7A 1028 0025                  		move.b	$25(a0),d0
00010D7E 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010D82 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010D86 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010D8C 6100 A572                  		bsr.w	AnimateSprite
00010D90 6000 F5B8                  		bra.w	MarkObjGone
00010D94                            ; ===========================================================================
00010D94 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010D96 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010D98 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010D9A 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010D9C                            ; ===========================================================================
00010D9C                            
00010D9C                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010D9C 343C 0080                  		move.w	#$80,d2
00010DA0 6100 0000                  		bsr.w	Obj55_ChkSonic
00010DA4 6400                       		bcc.s	Obj55_NoDrop
00010DA6 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010DAA 3140 0036                  		move.w	d0,$36(a0)
00010DAE 9068 000C                  		sub.w	$C(a0),d0
00010DB2 6500                       		bcs.s	Obj55_NoDrop
00010DB4 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010DB8 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010DBA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010DBE 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010DC0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010DC4 D007                       		add.b	d7,d0
00010DC6 0200 0007                  		andi.b	#7,d0
00010DCA 6600                       		bne.s	Obj55_NoDrop
00010DCC 117C 0001 001C             		move.b	#1,$1C(a0)
00010DD2 5428 0025                  		addq.b	#2,$25(a0)
00010DD6                            
00010DD6                            Obj55_NoDrop:
00010DD6 4E75                       		rts	
00010DD8                            ; ===========================================================================
00010DD8                            
00010DD8                            Obj55_DropFly:				; XREF: Obj55_Index2
00010DD8 7218                       		moveq	#$18,d1
00010DDA 6100 D432                  		bsr.w	ObjectFallCustom
00010DDE 343C 0080                  		move.w	#$80,d2
00010DE2 6100 0000                  		bsr.w	Obj55_ChkSonic
00010DE6 3028 0036                  		move.w	$36(a0),d0
00010DEA 9068 000C                  		sub.w	$C(a0),d0
00010DEE 6500                       		bcs.s	Obj55_ChkDel
00010DF0 0C40 0010                  		cmpi.w	#$10,d0
00010DF4 6400                       		bcc.s	locret_10180
00010DF6 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010DFA 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010E00 117C 0002 001C             		move.b	#2,$1C(a0)
00010E06 5428 0025                  		addq.b	#2,$25(a0)
00010E0A                            
00010E0A                            locret_10180:
00010E0A 4E75                       		rts	
00010E0C                            ; ===========================================================================
00010E0C                            
00010E0C                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010E0C 4A28 0001                  		tst.b	1(a0)
00010E10 6A00 D4D2                  		bpl.w	DeleteObject
00010E14 4E75                       		rts	
00010E16                            ; ===========================================================================
00010E16                            
00010E16                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010E16 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010E1A 0200 000F                  		andi.b	#$F,d0
00010E1E 6600                       		bne.s	loc_101A0
00010E20 303C 00C0                  		move.w	#$C0,d0
00010E24 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play flapping sound
00010E2A                            
00010E2A                            loc_101A0:
00010E2A 6100 D442                  		bsr.w	SpeedToPos
00010E2E 3038 D008                  		move.w	($FFFFD008).w,d0
00010E32 9068 0008                  		sub.w	8(a0),d0
00010E36 6400                       		bcc.s	loc_101B0
00010E38 4440                       		neg.w	d0
00010E3A                            
00010E3A                            loc_101B0:
00010E3A 0C40 0080                  		cmpi.w	#$80,d0
00010E3E 6500                       		bcs.s	locret_101C6
00010E40 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010E44 D007                       		add.b	d7,d0
00010E46 0200 0007                  		andi.b	#7,d0
00010E4A 6600                       		bne.s	locret_101C6
00010E4C 5428 0025                  		addq.b	#2,$25(a0)
00010E50                            
00010E50                            locret_101C6:
00010E50 4E75                       		rts	
00010E52                            ; ===========================================================================
00010E52                            
00010E52                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010E52 72E8                       		moveq	#-$18,d1
00010E54 4EBA D3B8                  		jsr	ObjectFallCustom
00010E58 6100 0000                  		bsr.w	ObjHitCeiling
00010E5C 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010E5E 6A00                       		bpl.s	locret_101F4	; if not, branch
00010E60 9368 000C                  		sub.w	d1,$C(a0)
00010E64 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010E6A 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010E6E 4268 0012                  		clr.w	$12(a0)
00010E72 4228 001C                  		clr.b	$1C(a0)
00010E76 4228 0025                  		clr.b	$25(a0)
00010E7A                            
00010E7A                            locret_101F4:
00010E7A 4E75                       		rts	
00010E7C                            ; ===========================================================================
00010E7C                            
00010E7C                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010E7C 323C 0100                  		move.w	#$100,d1
00010E80 08E8 0000 0022             		bset	#0,$22(a0)
00010E86 3038 D008                  		move.w	($FFFFD008).w,d0
00010E8A 9068 0008                  		sub.w	8(a0),d0
00010E8E 6400                       		bcc.s	loc_10214
00010E90 4440                       		neg.w	d0
00010E92 4441                       		neg.w	d1
00010E94 08A8 0000 0022             		bclr	#0,$22(a0)
00010E9A                            
00010E9A                            loc_10214:
00010E9A B042                       		cmp.w	d2,d0
00010E9C 4E75                       		rts
00010E9E                            ; ===========================================================================
00010E9E                            Ani_obj55:
00010E9E                            	include "_anim\obj55.asm"
00010E9E                            ; ---------------------------------------------------------------------------
00010E9E                            ; Animation script - Basaran enemy
00010E9E                            ; ---------------------------------------------------------------------------
00010E9E 0000                       		dc.w byte_10230-Ani_obj55
00010EA0 0000                       		dc.w byte_10234-Ani_obj55
00010EA2 0000                       		dc.w byte_10238-Ani_obj55
00010EA4 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010EA8 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010EAC 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010EB2                            		even
00010EB2                            		even
00010EB2                            
00010EB2                            ; ---------------------------------------------------------------------------
00010EB2                            ; Sprite mappings - Basaran enemy (MZ)
00010EB2                            ; ---------------------------------------------------------------------------
00010EB2                            Map_obj55:
00010EB2                            	include "_maps\obj55.asm"
00010EB2                            ; ---------------------------------------------------------------------------
00010EB2                            ; Sprite mappings - Basaran enemy (MZ)
00010EB2                            ; ---------------------------------------------------------------------------
00010EB2 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010EB6 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010EBA 01                         byte_10246:	dc.b 1
00010EBB F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010EC0 03                         byte_1024C:	dc.b 3
00010EC1 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010EC6 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010ECB 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010ED0 04                         byte_1025C:	dc.b 4
00010ED1 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010ED6 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010EDB 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010EE0 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010EE5 04                         byte_10271:	dc.b 4
00010EE6 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010EEB 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010EF0 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010EF5 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010EFA                            		even
00010EFA                            		even
00010EFA                            
00010EFA                            ; ===========================================================================
00010EFA                            ; ---------------------------------------------------------------------------
00010EFA                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010EFA                            ; ---------------------------------------------------------------------------
00010EFA                            
00010EFA                            Obj56:					; XREF: Obj_Index
00010EFA 7000                       		moveq	#0,d0
00010EFC 1028 0024                  		move.b	$24(a0),d0
00010F00 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010F04 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010F08                            ; ===========================================================================
00010F08 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010F0A 0000                       		dc.w Obj56_Action-Obj56_Index
00010F0C                            
00010F0C 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010F0E 2020                       		dc.b  $20, $20
00010F10 1020                       		dc.b  $10, $20
00010F12 201A                       		dc.b  $20, $1A
00010F14 1027                       		dc.b  $10, $27
00010F16 1010                       		dc.b  $10, $10
00010F18 0820                       		dc.b	8, $20
00010F1A 4010                       		dc.b  $40, $10
00010F1C                            ; ===========================================================================
00010F1C                            
00010F1C                            Obj56_Main:				; XREF: Obj56_Index
00010F1C 5428 0024                  		addq.b	#2,$24(a0)
00010F20 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010F28 317C 4000 0002             		move.w	#$4000,2(a0)
00010F2E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010F34 6600                       		bne.s	loc_102C8
00010F36 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010F3C                            
00010F3C                            loc_102C8:
00010F3C 117C 0004 0001             		move.b	#4,1(a0)
00010F42 117C 0003 0018             		move.b	#3,$18(a0)
00010F48 7000                       		moveq	#0,d0
00010F4A 1028 0028                  		move.b	$28(a0),d0
00010F4E E648                       		lsr.w	#3,d0
00010F50 0240 000E                  		andi.w	#$E,d0
00010F54 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010F58 115A 0019                  		move.b	(a2)+,$19(a0)
00010F5C 1152 0016                  		move.b	(a2),$16(a0)
00010F60 E248                       		lsr.w	#1,d0
00010F62 1140 001A                  		move.b	d0,$1A(a0)
00010F66 3168 0008 0034             		move.w	8(a0),$34(a0)
00010F6C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010F72 7000                       		moveq	#0,d0
00010F74 1012                       		move.b	(a2),d0
00010F76 D040                       		add.w	d0,d0
00010F78 3140 003A                  		move.w	d0,$3A(a0)
00010F7C 7000                       		moveq	#0,d0
00010F7E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010F84 6700                       		beq.s	loc_10332
00010F86 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010F8A 0240 000F                  		andi.w	#$F,d0
00010F8E 5140                       		subq.w	#8,d0
00010F90 6500                       		bcs.s	loc_10332
00010F92 E548                       		lsl.w	#2,d0
00010F94 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010F98 45F2 0000                  		lea	(a2,d0.w),a2
00010F9C 4A52                       		tst.w	(a2)
00010F9E 6A00                       		bpl.s	loc_10332
00010FA0 0868 0000 0022             		bchg	#0,$22(a0)
00010FA6                            
00010FA6                            loc_10332:
00010FA6 1028 0028                  		move.b	$28(a0),d0
00010FAA 6A00                       		bpl.s	Obj56_Action
00010FAC 0200 000F                  		andi.b	#$F,d0
00010FB0 1140 003C                  		move.b	d0,$3C(a0)
00010FB4 117C 0005 0028             		move.b	#5,$28(a0)
00010FBA 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010FC0 6600                       		bne.s	Obj56_ChkGone
00010FC2 117C 000C 0028             		move.b	#$C,$28(a0)
00010FC8 317C 0080 003A             		move.w	#$80,$3A(a0)
00010FCE                            
00010FCE                            Obj56_ChkGone:
00010FCE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010FD2 7000                       		moveq	#0,d0
00010FD4 1028 0023                  		move.b	$23(a0),d0
00010FD8 6700                       		beq.s	Obj56_Action
00010FDA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010FE0 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010FE6 6700                       		beq.s	Obj56_Action
00010FE8 5228 0028                  		addq.b	#1,$28(a0)
00010FEC 4268 003A                  		clr.w	$3A(a0)
00010FF0                            
00010FF0                            Obj56_Action:				; XREF: Obj56_Index
00010FF0 3F28 0008                  		move.w	8(a0),-(sp)
00010FF4 7000                       		moveq	#0,d0
00010FF6 1028 0028                  		move.b	$28(a0),d0	; get object type
00010FFA 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010FFE D040                       		add.w	d0,d0
00011000 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00011004 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00011008 381F                       		move.w	(sp)+,d4
0001100A 4A28 0001                  		tst.b	1(a0)
0001100E 6A00                       		bpl.s	Obj56_ChkDel
00011010 7200                       		moveq	#0,d1
00011012 1228 0019                  		move.b	$19(a0),d1
00011016 0641 000B                  		addi.w	#$B,d1
0001101A 7400                       		moveq	#0,d2
0001101C 1428 0016                  		move.b	$16(a0),d2
00011020 3602                       		move.w	d2,d3
00011022 5243                       		addq.w	#1,d3
00011024 6100 F64C                  		bsr.w	SolidObject
00011028                            
00011028                            Obj56_ChkDel:
00011028 3028 0034                  		move.w	$34(a0),d0
0001102C 0240 FF80                  		andi.w	#$FF80,d0
00011030 3238 F700                  		move.w	($FFFFF700).w,d1
00011034 0441 0080                  		subi.w	#$80,d1
00011038 0241 FF80                  		andi.w	#$FF80,d1
0001103C 9041                       		sub.w	d1,d0
0001103E 0C40 0280                  		cmpi.w	#$280,d0
00011042 6200 D2A0                  		bhi.w	DeleteObject
00011046 6000 D260                  		bra.w	DisplaySprite
0001104A                            ; ===========================================================================
0001104A 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
0001104E 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011052 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00011056 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
0001105A 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
0001105E 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011062 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00011066                            ; ===========================================================================
00011066                            
00011066                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00011066 4E75                       		rts	
00011068                            ; ===========================================================================
00011068                            
00011068                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00011068 323C 0040                  		move.w	#$40,d1
0001106C 7000                       		moveq	#0,d0
0001106E 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011072 6000                       		bra.s	Obj56_Move_LR
00011074                            ; ===========================================================================
00011074                            
00011074                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011074 323C 0080                  		move.w	#$80,d1
00011078 7000                       		moveq	#0,d0
0001107A 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001107E                            
0001107E                            Obj56_Move_LR:
0001107E 0828 0000 0022             		btst	#0,$22(a0)
00011084 6700                       		beq.s	loc_10416
00011086 4440                       		neg.w	d0
00011088 D041                       		add.w	d1,d0
0001108A                            
0001108A                            loc_10416:
0001108A 3228 0034                  		move.w	$34(a0),d1
0001108E 9240                       		sub.w	d0,d1
00011090 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011094 4E75                       		rts	
00011096                            ; ===========================================================================
00011096                            
00011096                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00011096 323C 0040                  		move.w	#$40,d1
0001109A 7000                       		moveq	#0,d0
0001109C 1038 FE68                  		move.b	($FFFFFE68).w,d0
000110A0 6000                       		bra.s	Obj56_Move_UD
000110A2                            ; ===========================================================================
000110A2                            
000110A2                            Obj56_Type04:				; XREF: Obj56_TypeIndex
000110A2 323C 0080                  		move.w	#$80,d1
000110A6 7000                       		moveq	#0,d0
000110A8 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000110AC                            
000110AC                            Obj56_Move_UD:
000110AC 0828 0000 0022             		btst	#0,$22(a0)
000110B2 6700                       		beq.s	loc_10444
000110B4 4440                       		neg.w	d0
000110B6 D041                       		add.w	d1,d0
000110B8                            
000110B8                            loc_10444:
000110B8 3228 0030                  		move.w	$30(a0),d1
000110BC 9240                       		sub.w	d0,d1
000110BE 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000110C2 4E75                       		rts	
000110C4                            ; ===========================================================================
000110C4                            
000110C4                            Obj56_Type05:				; XREF: Obj56_TypeIndex
000110C4 4A28 0038                  		tst.b	$38(a0)
000110C8 6600                       		bne.s	loc_104A4
000110CA 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000110D0 6600                       		bne.s	loc_1047A	; if not, branch
000110D2 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000110D8 6600                       		bne.s	loc_1047A
000110DA 4238 F7C9                  		clr.b	($FFFFF7C9).w
000110DE 3038 D008                  		move.w	($FFFFD008).w,d0
000110E2 B068 0008                  		cmp.w	8(a0),d0
000110E6 6400                       		bcc.s	loc_1047A
000110E8 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000110EE                            
000110EE                            loc_1047A:
000110EE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000110F2 7000                       		moveq	#0,d0
000110F4 1028 003C                  		move.b	$3C(a0),d0
000110F8 0832 0000 0000             		btst	#0,(a2,d0.w)
000110FE 6700                       		beq.s	loc_104AE
00011100 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011106 6600                       		bne.s	loc_1049E	; if not, branch
00011108 0C00 0003                  		cmpi.b	#3,d0
0001110C 6600                       		bne.s	loc_1049E
0001110E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011112                            
00011112                            loc_1049E:
00011112 117C 0001 0038             		move.b	#1,$38(a0)
00011118                            
00011118                            loc_104A4:
00011118 4A68 003A                  		tst.w	$3A(a0)
0001111C 6700                       		beq.s	loc_104C8
0001111E 5568 003A                  		subq.w	#2,$3A(a0)
00011122                            
00011122                            loc_104AE:
00011122 3028 003A                  		move.w	$3A(a0),d0
00011126 0828 0000 0022             		btst	#0,$22(a0)
0001112C 6700                       		beq.s	loc_104BC
0001112E 4440                       		neg.w	d0
00011130                            
00011130                            loc_104BC:
00011130 3228 0030                  		move.w	$30(a0),d1
00011134 D240                       		add.w	d0,d1
00011136 3141 000C                  		move.w	d1,$C(a0)
0001113A 4E75                       		rts	
0001113C                            ; ===========================================================================
0001113C                            
0001113C                            loc_104C8:
0001113C 5228 0028                  		addq.b	#1,$28(a0)
00011140 4228 0038                  		clr.b	$38(a0)
00011144 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011148 7000                       		moveq	#0,d0
0001114A 1028 0023                  		move.b	$23(a0),d0
0001114E 67D2                       		beq.s	loc_104AE
00011150 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011156 60CA                       		bra.s	loc_104AE
00011158                            ; ===========================================================================
00011158                            
00011158                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00011158 4A28 0038                  		tst.b	$38(a0)
0001115C 6600                       		bne.s	loc_10500
0001115E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011162 7000                       		moveq	#0,d0
00011164 1028 003C                  		move.b	$3C(a0),d0
00011168 4A32 0000                  		tst.b	(a2,d0.w)
0001116C 6A00                       		bpl.s	loc_10512
0001116E 117C 0001 0038             		move.b	#1,$38(a0)
00011174                            
00011174                            loc_10500:
00011174 7000                       		moveq	#0,d0
00011176 1028 0016                  		move.b	$16(a0),d0
0001117A D040                       		add.w	d0,d0
0001117C B068 003A                  		cmp.w	$3A(a0),d0
00011180 6700                       		beq.s	loc_1052C
00011182 5468 003A                  		addq.w	#2,$3A(a0)
00011186                            
00011186                            loc_10512:
00011186 3028 003A                  		move.w	$3A(a0),d0
0001118A 0828 0000 0022             		btst	#0,$22(a0)
00011190 6700                       		beq.s	loc_10520
00011192 4440                       		neg.w	d0
00011194                            
00011194                            loc_10520:
00011194 3228 0030                  		move.w	$30(a0),d1
00011198 D240                       		add.w	d0,d1
0001119A 3141 000C                  		move.w	d1,$C(a0)
0001119E 4E75                       		rts	
000111A0                            ; ===========================================================================
000111A0                            
000111A0                            loc_1052C:
000111A0 5328 0028                  		subq.b	#1,$28(a0)
000111A4 4228 0038                  		clr.b	$38(a0)
000111A8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000111AC 7000                       		moveq	#0,d0
000111AE 1028 0023                  		move.b	$23(a0),d0
000111B2 67D2                       		beq.s	loc_10512
000111B4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000111BA 60CA                       		bra.s	loc_10512
000111BC                            ; ===========================================================================
000111BC                            
000111BC                            Obj56_Type07:				; XREF: Obj56_TypeIndex
000111BC 4A28 0038                  		tst.b	$38(a0)
000111C0 6600                       		bne.s	loc_1055E
000111C2 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
000111C6 6700                       		beq.s	locret_10578
000111C8 117C 0001 0038             		move.b	#1,$38(a0)
000111CE 4268 003A                  		clr.w	$3A(a0)
000111D2                            
000111D2                            loc_1055E:
000111D2 5268 0008                  		addq.w	#1,8(a0)
000111D6 3168 0008 0034             		move.w	8(a0),$34(a0)
000111DC 5268 003A                  		addq.w	#1,$3A(a0)
000111E0 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000111E6 6600                       		bne.s	locret_10578
000111E8 4228 0028                  		clr.b	$28(a0)
000111EC                            
000111EC                            locret_10578:
000111EC 4E75                       		rts	
000111EE                            ; ===========================================================================
000111EE                            
000111EE                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000111EE 4A28 0038                  		tst.b	$38(a0)
000111F2 6600                       		bne.s	loc_10598
000111F4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000111F8 7000                       		moveq	#0,d0
000111FA 1028 003C                  		move.b	$3C(a0),d0
000111FE 0832 0000 0000             		btst	#0,(a2,d0.w)
00011204 6700                       		beq.s	loc_105A2
00011206 117C 0001 0038             		move.b	#1,$38(a0)
0001120C                            
0001120C                            loc_10598:
0001120C 4A68 003A                  		tst.w	$3A(a0)
00011210 6700                       		beq.s	loc_105C0
00011212 5568 003A                  		subq.w	#2,$3A(a0)
00011216                            
00011216                            loc_105A2:
00011216 3028 003A                  		move.w	$3A(a0),d0
0001121A 0828 0000 0022             		btst	#0,$22(a0)
00011220 6700                       		beq.s	loc_105B4
00011222 4440                       		neg.w	d0
00011224 0640 0080                  		addi.w	#$80,d0
00011228                            
00011228                            loc_105B4:
00011228 3228 0034                  		move.w	$34(a0),d1
0001122C D240                       		add.w	d0,d1
0001122E 3141 0008                  		move.w	d1,8(a0)
00011232 4E75                       		rts	
00011234                            ; ===========================================================================
00011234                            
00011234                            loc_105C0:
00011234 5228 0028                  		addq.b	#1,$28(a0)
00011238 4228 0038                  		clr.b	$38(a0)
0001123C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011240 7000                       		moveq	#0,d0
00011242 1028 0023                  		move.b	$23(a0),d0
00011246 67CE                       		beq.s	loc_105A2
00011248 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001124E 60C6                       		bra.s	loc_105A2
00011250                            ; ===========================================================================
00011250                            
00011250                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011250 4A28 0038                  		tst.b	$38(a0)
00011254 6600                       		bne.s	loc_105F8
00011256 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001125A 7000                       		moveq	#0,d0
0001125C 1028 003C                  		move.b	$3C(a0),d0
00011260 4A32 0000                  		tst.b	(a2,d0.w)
00011264 6A00                       		bpl.s	loc_10606
00011266 117C 0001 0038             		move.b	#1,$38(a0)
0001126C                            
0001126C                            loc_105F8:
0001126C 303C 0080                  		move.w	#$80,d0
00011270 B068 003A                  		cmp.w	$3A(a0),d0
00011274 6700                       		beq.s	loc_10624
00011276 5468 003A                  		addq.w	#2,$3A(a0)
0001127A                            
0001127A                            loc_10606:
0001127A 3028 003A                  		move.w	$3A(a0),d0
0001127E 0828 0000 0022             		btst	#0,$22(a0)
00011284 6700                       		beq.s	loc_10618
00011286 4440                       		neg.w	d0
00011288 0640 0080                  		addi.w	#$80,d0
0001128C                            
0001128C                            loc_10618:
0001128C 3228 0034                  		move.w	$34(a0),d1
00011290 D240                       		add.w	d0,d1
00011292 3141 0008                  		move.w	d1,8(a0)
00011296 4E75                       		rts	
00011298                            ; ===========================================================================
00011298                            
00011298                            loc_10624:
00011298 5328 0028                  		subq.b	#1,$28(a0)
0001129C 4228 0038                  		clr.b	$38(a0)
000112A0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000112A4 7000                       		moveq	#0,d0
000112A6 1028 0023                  		move.b	$23(a0),d0
000112AA 67CE                       		beq.s	loc_10606
000112AC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000112B2 60C6                       		bra.s	loc_10606
000112B4                            ; ===========================================================================
000112B4                            
000112B4                            Obj56_Type08:				; XREF: Obj56_TypeIndex
000112B4 323C 0010                  		move.w	#$10,d1
000112B8 7000                       		moveq	#0,d0
000112BA 1038 FE88                  		move.b	($FFFFFE88).w,d0
000112BE E248                       		lsr.w	#1,d0
000112C0 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
000112C4 6000                       		bra.s	Obj56_Move_Sqr
000112C6                            ; ===========================================================================
000112C6                            
000112C6                            Obj56_Type09:				; XREF: Obj56_TypeIndex
000112C6 323C 0030                  		move.w	#$30,d1
000112CA 7000                       		moveq	#0,d0
000112CC 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
000112D0 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
000112D4 6000                       		bra.s	Obj56_Move_Sqr
000112D6                            ; ===========================================================================
000112D6                            
000112D6                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
000112D6 323C 0050                  		move.w	#$50,d1
000112DA 7000                       		moveq	#0,d0
000112DC 1038 FE90                  		move.b	($FFFFFE90).w,d0
000112E0 3638 FE92                  		move.w	($FFFFFE92).w,d3
000112E4 6000                       		bra.s	Obj56_Move_Sqr
000112E6                            ; ===========================================================================
000112E6                            
000112E6                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000112E6 323C 0070                  		move.w	#$70,d1
000112EA 7000                       		moveq	#0,d0
000112EC 1038 FE94                  		move.b	($FFFFFE94).w,d0
000112F0 3638 FE96                  		move.w	($FFFFFE96).w,d3
000112F4                            
000112F4                            Obj56_Move_Sqr:
000112F4 4A43                       		tst.w	d3
000112F6 6600                       		bne.s	loc_1068E
000112F8 5228 0022                  		addq.b	#1,$22(a0)
000112FC 0228 0003 0022             		andi.b	#3,$22(a0)
00011302                            
00011302                            loc_1068E:
00011302 1428 0022                  		move.b	$22(a0),d2
00011306 0202 0003                  		andi.b	#3,d2
0001130A 6600                       		bne.s	loc_106AE
0001130C 9041                       		sub.w	d1,d0
0001130E D068 0034                  		add.w	$34(a0),d0
00011312 3140 0008                  		move.w	d0,8(a0)
00011316 4441                       		neg.w	d1
00011318 D268 0030                  		add.w	$30(a0),d1
0001131C 3141 000C                  		move.w	d1,$C(a0)
00011320 4E75                       		rts	
00011322                            ; ===========================================================================
00011322                            
00011322                            loc_106AE:
00011322 5302                       		subq.b	#1,d2
00011324 6600                       		bne.s	loc_106CC
00011326 5341                       		subq.w	#1,d1
00011328 9041                       		sub.w	d1,d0
0001132A 4440                       		neg.w	d0
0001132C D068 0030                  		add.w	$30(a0),d0
00011330 3140 000C                  		move.w	d0,$C(a0)
00011334 5241                       		addq.w	#1,d1
00011336 D268 0034                  		add.w	$34(a0),d1
0001133A 3141 0008                  		move.w	d1,8(a0)
0001133E 4E75                       		rts	
00011340                            ; ===========================================================================
00011340                            
00011340                            loc_106CC:
00011340 5302                       		subq.b	#1,d2
00011342 6600                       		bne.s	loc_106EA
00011344 5341                       		subq.w	#1,d1
00011346 9041                       		sub.w	d1,d0
00011348 4440                       		neg.w	d0
0001134A D068 0034                  		add.w	$34(a0),d0
0001134E 3140 0008                  		move.w	d0,8(a0)
00011352 5241                       		addq.w	#1,d1
00011354 D268 0030                  		add.w	$30(a0),d1
00011358 3141 000C                  		move.w	d1,$C(a0)
0001135C 4E75                       		rts	
0001135E                            ; ===========================================================================
0001135E                            
0001135E                            loc_106EA:
0001135E 9041                       		sub.w	d1,d0
00011360 D068 0030                  		add.w	$30(a0),d0
00011364 3140 000C                  		move.w	d0,$C(a0)
00011368 4441                       		neg.w	d1
0001136A D268 0034                  		add.w	$34(a0),d1
0001136E 3141 0008                  		move.w	d1,8(a0)
00011372 4E75                       		rts	
00011374                            ; ===========================================================================
00011374                            ; ---------------------------------------------------------------------------
00011374                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011374                            ; ---------------------------------------------------------------------------
00011374                            Map_obj56:
00011374                            	include "_maps\obj56.asm"
00011374                            ; ---------------------------------------------------------------------------
00011374                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011374                            ; ---------------------------------------------------------------------------
00011374 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00011378 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
0001137C 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00011380 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011384 01                         byte_10710:	dc.b 1
00011385 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
0001138A 04                         byte_10716:	dc.b 4
0001138B E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011390 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011395 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001139A 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
0001139F 02                         byte_1072B:	dc.b 2
000113A0 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
000113A5 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
000113AA 04                         byte_10736:	dc.b 4
000113AB E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
000113B0 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
000113B5 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
000113BA 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
000113BF 03                         byte_1074B:	dc.b 3
000113C0 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
000113C5 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
000113CA 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000113CF 01                         byte_1075B:	dc.b 1
000113D0 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000113D5 02                         byte_10761:	dc.b 2
000113D6 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000113DB 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000113E0 04                         byte_1076C:	dc.b 4
000113E1 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000113E6 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000113EB F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000113F0 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000113F6 00                         		even
000113F6 00                         		even
000113F6                            
000113F6                            ; ===========================================================================
000113F6                            ; ---------------------------------------------------------------------------
000113F6                            ; Object 57 - spiked balls (SYZ, LZ)
000113F6                            ; ---------------------------------------------------------------------------
000113F6                            
000113F6                            Obj57:					; XREF: Obj_Index
000113F6 7000                       		moveq	#0,d0
000113F8 1028 0024                  		move.b	$24(a0),d0
000113FC 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00011400 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00011404                            ; ===========================================================================
00011404 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00011406 0000                       		dc.w Obj57_Move-Obj57_Index
00011408 0000                       		dc.w Obj57_Display-Obj57_Index
0001140A                            ; ===========================================================================
0001140A                            
0001140A                            Obj57_Main:				; XREF: Obj57_Index
0001140A 5428 0024                  		addq.b	#2,$24(a0)
0001140E 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00011416 317C 03BA 0002             		move.w	#$3BA,2(a0)
0001141C 117C 0004 0001             		move.b	#4,1(a0)
00011422 117C 0004 0018             		move.b	#4,$18(a0)
00011428 117C 0008 0019             		move.b	#8,$19(a0)
0001142E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011434 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001143A 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00011440 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011446 6600                       		bne.s	loc_107E8
00011448 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
0001144E 317C 0310 0002             		move.w	#$310,2(a0)
00011454 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
0001145C                            
0001145C                            loc_107E8:
0001145C 1228 0028                  		move.b	$28(a0),d1	; get object type
00011460 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011464 4881                       		ext.w	d1
00011466 E741                       		asl.w	#3,d1		; multiply by 8
00011468 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
0001146C 1028 0022                  		move.b	$22(a0),d0
00011470 E418                       		ror.b	#2,d0
00011472 0200 00C0                  		andi.b	#-$40,d0
00011476 1140 0026                  		move.b	d0,$26(a0)
0001147A 45E8 0029                  		lea	$29(a0),a2
0001147E 1228 0028                  		move.b	$28(a0),d1	; get object type
00011482 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00011486 14FC 0000                  		move.b	#0,(a2)+
0001148A 3601                       		move.w	d1,d3
0001148C E94B                       		lsl.w	#4,d3
0001148E 1143 003C                  		move.b	d3,$3C(a0)
00011492 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011494 6500                       		bcs.s	loc_10894
00011496 0828 0003 0028             		btst	#3,$28(a0)
0001149C 6700                       		beq.s	Obj57_MakeChain
0001149E 5341                       		subq.w	#1,d1
000114A0 6500                       		bcs.s	loc_10894
000114A2                            
000114A2                            Obj57_MakeChain:
000114A2 6100 D28A                  		bsr.w	SingleObjLoad
000114A6 6600                       		bne.s	loc_10894
000114A8 5228 0029                  		addq.b	#1,$29(a0)
000114AC 3A09                       		move.w	a1,d5
000114AE 0445 D000                  		subi.w	#-$3000,d5
000114B2 EC4D                       		lsr.w	#6,d5
000114B4 0245 007F                  		andi.w	#$7F,d5
000114B8 14C5                       		move.b	d5,(a2)+
000114BA 137C 0004 0024             		move.b	#4,$24(a1)
000114C0 1290                       		move.b	0(a0),0(a1)
000114C2 2368 0004 0004             		move.l	4(a0),4(a1)
000114C8 3368 0002 0002             		move.w	2(a0),2(a1)
000114CE 1368 0001 0001             		move.b	1(a0),1(a1)
000114D4 1368 0018 0018             		move.b	$18(a0),$18(a1)
000114DA 1368 0019 0019             		move.b	$19(a0),$19(a1)
000114E0 1368 0020 0020             		move.b	$20(a0),$20(a1)
000114E6 0403 0010                  		subi.b	#$10,d3
000114EA 1343 003C                  		move.b	d3,$3C(a1)
000114EE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000114F4 6600                       		bne.s	loc_10890
000114F6 4A03                       		tst.b	d3
000114F8 6600                       		bne.s	loc_10890
000114FA 137C 0002 001A             		move.b	#2,$1A(a1)
00011500                            
00011500                            loc_10890:
00011500 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00011504                            
00011504                            loc_10894:
00011504 3A08                       		move.w	a0,d5
00011506 0445 D000                  		subi.w	#-$3000,d5
0001150A EC4D                       		lsr.w	#6,d5
0001150C 0245 007F                  		andi.w	#$7F,d5
00011510 14C5                       		move.b	d5,(a2)+
00011512 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011518 6600                       		bne.s	Obj57_Move
0001151A 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00011520 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00011526                            
00011526                            Obj57_Move:				; XREF: Obj57_Index
00011526 6100 0000                  		bsr.w	Obj57_MoveSub
0001152A 6000 0000                  		bra.w	Obj57_ChkDel
0001152E                            ; ===========================================================================
0001152E                            
0001152E                            Obj57_MoveSub:				; XREF: Obj57_Move
0001152E 3028 003E                  		move.w	$3E(a0),d0
00011532 D168 0026                  		add.w	d0,$26(a0)
00011536 1028 0026                  		move.b	$26(a0),d0
0001153A 4EB9 0000 2D86             		jsr	(CalcSine).l
00011540 3428 0038                  		move.w	$38(a0),d2
00011544 3628 003A                  		move.w	$3A(a0),d3
00011548 45E8 0029                  		lea	$29(a0),a2
0001154C 7C00                       		moveq	#0,d6
0001154E 1C1A                       		move.b	(a2)+,d6
00011550                            
00011550                            Obj57_MoveLoop:
00011550 7800                       		moveq	#0,d4
00011552 181A                       		move.b	(a2)+,d4
00011554 ED4C                       		lsl.w	#6,d4
00011556 0684 00FF D000             		addi.l	#$FFD000,d4
0001155C 2244                       		movea.l	d4,a1
0001155E 7800                       		moveq	#0,d4
00011560 1829 003C                  		move.b	$3C(a1),d4
00011564 2A04                       		move.l	d4,d5
00011566 C9C0                       		muls.w	d0,d4
00011568 E084                       		asr.l	#8,d4
0001156A CBC1                       		muls.w	d1,d5
0001156C E085                       		asr.l	#8,d5
0001156E D842                       		add.w	d2,d4
00011570 DA43                       		add.w	d3,d5
00011572 3344 000C                  		move.w	d4,$C(a1)
00011576 3345 0008                  		move.w	d5,8(a1)
0001157A 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
0001157E 4E75                       		rts	
00011580                            ; ===========================================================================
00011580                            
00011580                            Obj57_ChkDel:				; XREF: Obj57_Move
00011580 3028 003A                  		move.w	$3A(a0),d0
00011584 0240 FF80                  		andi.w	#$FF80,d0
00011588 3238 F700                  		move.w	($FFFFF700).w,d1
0001158C 0441 0080                  		subi.w	#$80,d1
00011590 0241 FF80                  		andi.w	#$FF80,d1
00011594 9041                       		sub.w	d1,d0
00011596 0C40 0280                  		cmpi.w	#$280,d0
0001159A 6200 0000                  		bhi.w	Obj57_Delete
0001159E 6000 CD08                  		bra.w	DisplaySprite
000115A2                            ; ===========================================================================
000115A2                            
000115A2                            Obj57_Delete:				; XREF: Obj57_ChkDel
000115A2 7400                       		moveq	#0,d2
000115A4 45E8 0029                  		lea	$29(a0),a2
000115A8 141A                       		move.b	(a2)+,d2
000115AA                            
000115AA                            Obj57_DelLoop:
000115AA 7000                       		moveq	#0,d0
000115AC 101A                       		move.b	(a2)+,d0
000115AE ED48                       		lsl.w	#6,d0
000115B0 0680 00FF D000             		addi.l	#$FFD000,d0
000115B6 2240                       		movea.l	d0,a1
000115B8 6100 CD2C                  		bsr.w	DeleteObject2
000115BC 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000115C0                            
000115C0 4E75                       		rts	
000115C2                            ; ===========================================================================
000115C2                            
000115C2                            Obj57_Display:				; XREF: Obj57_Index
000115C2 6000 CCE4                  		bra.w	DisplaySprite
000115C6                            ; ===========================================================================
000115C6                            ; ---------------------------------------------------------------------------
000115C6                            ; Sprite mappings - chain of spiked balls (SYZ)
000115C6                            ; ---------------------------------------------------------------------------
000115C6                            Map_obj57:
000115C6                            	include "_maps\obj57syz.asm"
000115C6                            ; ---------------------------------------------------------------------------
000115C6                            ; Sprite mappings - chain of spiked balls (SYZ)
000115C6                            ; ---------------------------------------------------------------------------
000115C6 0000                       		dc.w byte_10958-Map_obj57
000115C8 01                         byte_10958:	dc.b 1
000115C9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000115CE                            		even
000115CE                            		even
000115CE                            
000115CE                            ; ---------------------------------------------------------------------------
000115CE                            ; Sprite mappings - spiked ball	on a chain (LZ)
000115CE                            ; ---------------------------------------------------------------------------
000115CE                            Map_obj57a:
000115CE                            	include "_maps\obj57lz.asm"
000115CE                            ; ---------------------------------------------------------------------------
000115CE                            ; Sprite mappings - spiked ball	on a chain (LZ)
000115CE                            ; ---------------------------------------------------------------------------
000115CE 0000                       		dc.w byte_10964-Map_obj57a
000115D0 0000                       		dc.w byte_1096A-Map_obj57a
000115D2 0000                       		dc.w byte_10970-Map_obj57a
000115D4 01                         byte_10964:	dc.b 1
000115D5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000115DA 01                         byte_1096A:	dc.b 1
000115DB F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
000115E0 01                         byte_10970:	dc.b 1
000115E1 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000115E6                            		even
000115E6                            		even
000115E6                            
000115E6                            ; ===========================================================================
000115E6                            ; ---------------------------------------------------------------------------
000115E6                            ; Object 58 - giant spiked balls (SYZ)
000115E6                            ; ---------------------------------------------------------------------------
000115E6                            
000115E6                            Obj58:					; XREF: Obj_Index
000115E6 7000                       		moveq	#0,d0
000115E8 1028 0024                  		move.b	$24(a0),d0
000115EC 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000115F0 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000115F4                            ; ===========================================================================
000115F4 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000115F6 0000                       		dc.w Obj58_Move-Obj58_Index
000115F8                            ; ===========================================================================
000115F8                            
000115F8                            Obj58_Main:				; XREF: Obj58_Index
000115F8 5428 0024                  		addq.b	#2,$24(a0)
000115FC 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00011604 317C 0396 0002             		move.w	#$396,2(a0)
0001160A 117C 0004 0001             		move.b	#4,1(a0)
00011610 117C 0004 0018             		move.b	#4,$18(a0)
00011616 117C 0018 0019             		move.b	#$18,$19(a0)
0001161C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011622 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011628 117C 0086 0020             		move.b	#$86,$20(a0)
0001162E 1228 0028                  		move.b	$28(a0),d1	; get object type
00011632 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011636 4881                       		ext.w	d1
00011638 E741                       		asl.w	#3,d1		; multiply by 8
0001163A 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
0001163E 1028 0022                  		move.b	$22(a0),d0
00011642 E418                       		ror.b	#2,d0
00011644 0200 00C0                  		andi.b	#$C0,d0
00011648 1140 0026                  		move.b	d0,$26(a0)
0001164C 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011652                            
00011652                            Obj58_Move:				; XREF: Obj58_Index
00011652 7000                       		moveq	#0,d0
00011654 1028 0028                  		move.b	$28(a0),d0	; get object type
00011658 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
0001165C D040                       		add.w	d0,d0
0001165E 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011662 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011666 3028 003A                  		move.w	$3A(a0),d0
0001166A 0240 FF80                  		andi.w	#$FF80,d0
0001166E 3238 F700                  		move.w	($FFFFF700).w,d1
00011672 0441 0080                  		subi.w	#$80,d1
00011676 0241 FF80                  		andi.w	#$FF80,d1
0001167A 9041                       		sub.w	d1,d0
0001167C 0C40 0280                  		cmpi.w	#$280,d0
00011680 6200 CC62                  		bhi.w	DeleteObject
00011684 6000 CC22                  		bra.w	DisplaySprite
00011688                            ; ===========================================================================
00011688 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
0001168A 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
0001168C 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0001168E 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011690                            ; ===========================================================================
00011690                            
00011690                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011690 4E75                       		rts	
00011692                            ; ===========================================================================
00011692                            
00011692                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011692 323C 0060                  		move.w	#$60,d1
00011696 7000                       		moveq	#0,d0
00011698 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001169C 0828 0000 0022             		btst	#0,$22(a0)
000116A2 6700                       		beq.s	loc_10A38
000116A4 4440                       		neg.w	d0
000116A6 D041                       		add.w	d1,d0
000116A8                            
000116A8                            loc_10A38:
000116A8 3228 003A                  		move.w	$3A(a0),d1
000116AC 9240                       		sub.w	d0,d1
000116AE 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000116B2 4E75                       		rts	
000116B4                            ; ===========================================================================
000116B4                            
000116B4                            Obj58_Type02:				; XREF: Obj58_TypeIndex
000116B4 323C 0060                  		move.w	#$60,d1
000116B8 7000                       		moveq	#0,d0
000116BA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000116BE 0828 0000 0022             		btst	#0,$22(a0)
000116C4 6700                       		beq.s	loc_10A5C
000116C6 4440                       		neg.w	d0
000116C8 0640 0080                  		addi.w	#$80,d0
000116CC                            
000116CC                            loc_10A5C:
000116CC 3228 0038                  		move.w	$38(a0),d1
000116D0 9240                       		sub.w	d0,d1
000116D2 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000116D6 4E75                       		rts	
000116D8                            ; ===========================================================================
000116D8                            
000116D8                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000116D8 3028 003E                  		move.w	$3E(a0),d0
000116DC D168 0026                  		add.w	d0,$26(a0)
000116E0 1028 0026                  		move.b	$26(a0),d0
000116E4 4EB9 0000 2D86             		jsr	(CalcSine).l
000116EA 3428 0038                  		move.w	$38(a0),d2
000116EE 3628 003A                  		move.w	$3A(a0),d3
000116F2 7800                       		moveq	#0,d4
000116F4 1828 003C                  		move.b	$3C(a0),d4
000116F8 2A04                       		move.l	d4,d5
000116FA C9C0                       		muls.w	d0,d4
000116FC E084                       		asr.l	#8,d4
000116FE CBC1                       		muls.w	d1,d5
00011700 E085                       		asr.l	#8,d5
00011702 D842                       		add.w	d2,d4
00011704 DA43                       		add.w	d3,d5
00011706 3144 000C                  		move.w	d4,$C(a0)
0001170A 3145 0008                  		move.w	d5,8(a0)
0001170E 4E75                       		rts	
00011710                            ; ===========================================================================
00011710                            ; ---------------------------------------------------------------------------
00011710                            ; Sprite mappings - SBZ	spiked ball on a chain
00011710                            ; ---------------------------------------------------------------------------
00011710                            Map_obj15b:
00011710                            	include "_maps\obj15sbz.asm"
00011710                            ; ---------------------------------------------------------------------------
00011710                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011710                            ; ---------------------------------------------------------------------------
00011710 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011714 0000                       		dc.w byte_10AC6-Map_obj15b
00011716 05                         byte_10AA6:	dc.b 5
00011717 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
0001171C F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011721 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011726 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
0001172B 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011730 01                         byte_10AC0:	dc.b 1
00011731 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011736 02                         byte_10AC6:	dc.b 2
00011737 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
0001173C E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011742 00                         		even
00011742 00                         		even
00011742                            
00011742                            ; ===========================================================================
00011742                            ; ---------------------------------------------------------------------------
00011742                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011742                            ; ---------------------------------------------------------------------------
00011742                            
00011742                            Obj59:					; XREF: Obj_Index
00011742 7000                       		moveq	#0,d0
00011744 1028 0024                  		move.b	$24(a0),d0
00011748 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
0001174C 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011750 3028 0032                  		move.w	$32(a0),d0
00011754 0240 FF80                  		andi.w	#$FF80,d0
00011758 3238 F700                  		move.w	($FFFFF700).w,d1
0001175C 0441 0080                  		subi.w	#$80,d1
00011760 0241 FF80                  		andi.w	#$FF80,d1
00011764 9041                       		sub.w	d1,d0
00011766 0C40 0280                  		cmpi.w	#$280,d0
0001176A 6200 CB78                  		bhi.w	DeleteObject
0001176E 6000 CB38                  		bra.w	DisplaySprite
00011772                            ; ===========================================================================
00011772 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011774 0000                       		dc.w Obj59_Platform-Obj59_Index
00011776 0000                       		dc.w Obj59_Action-Obj59_Index
00011778 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0001177A                            
0001177A 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
0001177C                            
0001177C 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
0001177E 2001                       		dc.b $20, 1
00011780 3401                       		dc.b $34, 1
00011782 1003                       		dc.b $10, 3
00011784 2003                       		dc.b $20, 3
00011786 3403                       		dc.b $34, 3
00011788 1401                       		dc.b $14, 1
0001178A 2401                       		dc.b $24, 1
0001178C 2C01                       		dc.b $2C, 1
0001178E 1403                       		dc.b $14, 3
00011790 2403                       		dc.b $24, 3
00011792 2C03                       		dc.b $2C, 3
00011794 2005                       		dc.b $20, 5
00011796 2007                       		dc.b $20, 7
00011798 3009                       		dc.b $30, 9
0001179A                            ; ===========================================================================
0001179A                            
0001179A                            Obj59_Main:				; XREF: Obj59_Index
0001179A 5428 0024                  		addq.b	#2,$24(a0)
0001179E 7000                       		moveq	#0,d0
000117A0 1028 0028                  		move.b	$28(a0),d0
000117A4 6A00                       		bpl.s	Obj59_Main2
000117A6 5828 0024                  		addq.b	#4,$24(a0)
000117AA 0240 007F                  		andi.w	#$7F,d0
000117AE C0FC 0006                  		mulu.w	#6,d0
000117B2 3140 003C                  		move.w	d0,$3C(a0)
000117B6 3140 003E                  		move.w	d0,$3E(a0)
000117BA 588F                       		addq.l	#4,sp
000117BC 4E75                       		rts	
000117BE                            ; ===========================================================================
000117BE                            
000117BE                            Obj59_Main2:
000117BE E648                       		lsr.w	#3,d0
000117C0 0240 001E                  		andi.w	#$1E,d0
000117C4 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000117C8 115A 0019                  		move.b	(a2)+,$19(a0)
000117CC 115A 001A                  		move.b	(a2)+,$1A(a0)
000117D0 7000                       		moveq	#0,d0
000117D2 1028 0028                  		move.b	$28(a0),d0
000117D6 D040                       		add.w	d0,d0
000117D8 0240 001E                  		andi.w	#$1E,d0
000117DC 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000117E0 101A                       		move.b	(a2)+,d0
000117E2 E548                       		lsl.w	#2,d0
000117E4 3140 003C                  		move.w	d0,$3C(a0)
000117E8 115A 0028                  		move.b	(a2)+,$28(a0)
000117EC 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000117F4 317C 4000 0002             		move.w	#$4000,2(a0)
000117FA 117C 0004 0001             		move.b	#4,1(a0)
00011800 117C 0004 0018             		move.b	#4,$18(a0)
00011806 3168 0008 0032             		move.w	8(a0),$32(a0)
0001180C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011812                            
00011812                            Obj59_Platform:				; XREF: Obj59_Index
00011812 7200                       		moveq	#0,d1
00011814 1228 0019                  		move.b	$19(a0),d1
00011818 4EB9 0000 7ECE             		jsr	(PlatformObject).l
0001181E 6000 0000                  		bra.w	Obj59_Types
00011822                            ; ===========================================================================
00011822                            
00011822                            Obj59_Action:				; XREF: Obj59_Index
00011822 7200                       		moveq	#0,d1
00011824 1228 0019                  		move.b	$19(a0),d1
00011828 4EB9 0000 8042             		jsr	(ExitPlatform).l
0001182E 3F28 0008                  		move.w	8(a0),-(sp)
00011832 6100 0000                  		bsr.w	Obj59_Types
00011836 341F                       		move.w	(sp)+,d2
00011838 4A10                       		tst.b	0(a0)
0001183A 6700                       		beq.s	locret_10BD4
0001183C 4EF9 0000 85AC             		jmp	(MvSonicOnPtfm2).l
00011842                            ; ===========================================================================
00011842                            
00011842                            locret_10BD4:
00011842 4E75                       		rts	
00011844                            ; ===========================================================================
00011844                            
00011844                            Obj59_Types:
00011844 7000                       		moveq	#0,d0
00011846 1028 0028                  		move.b	$28(a0),d0
0001184A 0240 000F                  		andi.w	#$F,d0
0001184E D040                       		add.w	d0,d0
00011850 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011854 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011858                            ; ===========================================================================
00011858 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001185C 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011860 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011864 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011868 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
0001186C                            ; ===========================================================================
0001186C                            
0001186C                            Obj59_Type00:				; XREF: Obj59_TypeIndex
0001186C 4E75                       		rts	
0001186E                            ; ===========================================================================
0001186E                            
0001186E                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0001186E 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011874 6600                       		bne.s	locret_10C0C
00011876 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001187A                            
0001187A                            locret_10C0C:
0001187A 4E75                       		rts	
0001187C                            ; ===========================================================================
0001187C                            
0001187C                            Obj59_Type02:				; XREF: Obj59_TypeIndex
0001187C 6100 0000                  		bsr.w	Obj59_Move
00011880 3028 0034                  		move.w	$34(a0),d0
00011884 4440                       		neg.w	d0
00011886 D068 0030                  		add.w	$30(a0),d0
0001188A 3140 000C                  		move.w	d0,$C(a0)
0001188E 4E75                       		rts	
00011890                            ; ===========================================================================
00011890                            
00011890                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011890 6100 0000                  		bsr.w	Obj59_Move
00011894 3028 0034                  		move.w	$34(a0),d0
00011898 D068 0030                  		add.w	$30(a0),d0
0001189C 3140 000C                  		move.w	d0,$C(a0)
000118A0 4E75                       		rts	
000118A2                            ; ===========================================================================
000118A2                            
000118A2                            Obj59_Type06:				; XREF: Obj59_TypeIndex
000118A2 6100 0000                  		bsr.w	Obj59_Move
000118A6 3028 0034                  		move.w	$34(a0),d0
000118AA E240                       		asr.w	#1,d0
000118AC 4440                       		neg.w	d0
000118AE D068 0030                  		add.w	$30(a0),d0
000118B2 3140 000C                  		move.w	d0,$C(a0)
000118B6 3028 0034                  		move.w	$34(a0),d0
000118BA D068 0032                  		add.w	$32(a0),d0
000118BE 3140 0008                  		move.w	d0,8(a0)
000118C2 4E75                       		rts	
000118C4                            ; ===========================================================================
000118C4                            
000118C4                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000118C4 6100 0000                  		bsr.w	Obj59_Move
000118C8 3028 0034                  		move.w	$34(a0),d0
000118CC E240                       		asr.w	#1,d0
000118CE D068 0030                  		add.w	$30(a0),d0
000118D2 3140 000C                  		move.w	d0,$C(a0)
000118D6 3028 0034                  		move.w	$34(a0),d0
000118DA 4440                       		neg.w	d0
000118DC D068 0032                  		add.w	$32(a0),d0
000118E0 3140 0008                  		move.w	d0,8(a0)
000118E4 4E75                       		rts	
000118E6                            ; ===========================================================================
000118E6                            
000118E6                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000118E6 6100 0000                  		bsr.w	Obj59_Move
000118EA 3028 0034                  		move.w	$34(a0),d0
000118EE 4440                       		neg.w	d0
000118F0 D068 0030                  		add.w	$30(a0),d0
000118F4 3140 000C                  		move.w	d0,$C(a0)
000118F8 4A28 0028                  		tst.b	$28(a0)
000118FC 6700 0000                  		beq.w	loc_10C94
00011900 4E75                       		rts	
00011902                            ; ===========================================================================
00011902                            
00011902                            loc_10C94:
00011902 0828 0003 0022             		btst	#3,$22(a0)
00011908 6700                       		beq.s	Obj59_Delete
0001190A 08E9 0001 0022             		bset	#1,$22(a1)
00011910 08A9 0003 0022             		bclr	#3,$22(a1)
00011916 137C 0002 0024             		move.b	#2,$24(a1)
0001191C                            
0001191C                            Obj59_Delete:
0001191C 6000 C9C6                  		bra.w	DeleteObject
00011920                            
00011920                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011920                            
00011920                            
00011920                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011920 3028 0038                  		move.w	$38(a0),d0
00011924 4A28 003A                  		tst.b	$3A(a0)
00011928 6600                       		bne.s	loc_10CC8
0001192A 0C40 0800                  		cmpi.w	#$800,d0
0001192E 6400                       		bcc.s	loc_10CD0
00011930 0640 0010                  		addi.w	#$10,d0
00011934 6000                       		bra.s	loc_10CD0
00011936                            ; ===========================================================================
00011936                            
00011936                            loc_10CC8:
00011936 4A40                       		tst.w	d0
00011938 6700                       		beq.s	loc_10CD0
0001193A 0440 0010                  		subi.w	#$10,d0
0001193E                            
0001193E                            loc_10CD0:
0001193E 3140 0038                  		move.w	d0,$38(a0)
00011942 48C0                       		ext.l	d0
00011944 E180                       		asl.l	#8,d0
00011946 D0A8 0034                  		add.l	$34(a0),d0
0001194A 2140 0034                  		move.l	d0,$34(a0)
0001194E 4840                       		swap	d0
00011950 3428 003C                  		move.w	$3C(a0),d2
00011954 B042                       		cmp.w	d2,d0
00011956 6300                       		bls.s	loc_10CF0
00011958 117C 0001 003A             		move.b	#1,$3A(a0)
0001195E                            
0001195E                            loc_10CF0:
0001195E D442                       		add.w	d2,d2
00011960 B042                       		cmp.w	d2,d0
00011962 6600                       		bne.s	locret_10CFA
00011964 4228 0028                  		clr.b	$28(a0)
00011968                            
00011968                            locret_10CFA:
00011968 4E75                       		rts	
0001196A                            ; End of function Obj59_Move
0001196A                            
0001196A                            ; ===========================================================================
0001196A                            
0001196A                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001196A 5368 003C                  		subq.w	#1,$3C(a0)
0001196E 6600                       		bne.s	Obj59_ChkDel
00011970 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011976 6100 CDB6                  		bsr.w	SingleObjLoad
0001197A 6600                       		bne.s	Obj59_ChkDel
0001197C 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011980 3368 0008 0008             		move.w	8(a0),8(a1)
00011986 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001198C 137C 000E 0028             		move.b	#$E,$28(a1)
00011992                            
00011992                            Obj59_ChkDel:
00011992 588F                       		addq.l	#4,sp
00011994 3028 0008                  		move.w	8(a0),d0
00011998 0240 FF80                  		andi.w	#$FF80,d0
0001199C 3238 F700                  		move.w	($FFFFF700).w,d1
000119A0 0441 0080                  		subi.w	#$80,d1
000119A4 0241 FF80                  		andi.w	#$FF80,d1
000119A8 9041                       		sub.w	d1,d0
000119AA 0C40 0280                  		cmpi.w	#$280,d0
000119AE 6200 C934                  		bhi.w	DeleteObject
000119B2 4E75                       		rts	
000119B4                            ; ===========================================================================
000119B4                            ; ---------------------------------------------------------------------------
000119B4                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000119B4                            ; ---------------------------------------------------------------------------
000119B4                            Map_obj59:
000119B4                            	include "_maps\obj59.asm"
000119B4                            ; ---------------------------------------------------------------------------
000119B4                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000119B4                            ; ---------------------------------------------------------------------------
000119B4 0000                       		dc.w byte_10D4A-Map_obj59
000119B6 03                         byte_10D4A:	dc.b 3
000119B7 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000119BC F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000119C1 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000119C6                            		even
000119C6                            		even
000119C6                            
000119C6                            ; ===========================================================================
000119C6                            ; ---------------------------------------------------------------------------
000119C6                            ; Object 5A - platforms	moving in circles (SLZ)
000119C6                            ; ---------------------------------------------------------------------------
000119C6                            
000119C6                            Obj5A:					; XREF: Obj_Index
000119C6 7000                       		moveq	#0,d0
000119C8 1028 0024                  		move.b	$24(a0),d0
000119CC 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000119D0 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000119D4 3028 0032                  		move.w	$32(a0),d0
000119D8 0240 FF80                  		andi.w	#$FF80,d0
000119DC 3238 F700                  		move.w	($FFFFF700).w,d1
000119E0 0441 0080                  		subi.w	#$80,d1
000119E4 0241 FF80                  		andi.w	#$FF80,d1
000119E8 9041                       		sub.w	d1,d0
000119EA 0C40 0280                  		cmpi.w	#$280,d0
000119EE 6200 C8F4                  		bhi.w	DeleteObject
000119F2 6000 C8B4                  		bra.w	DisplaySprite
000119F6                            ; ===========================================================================
000119F6 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000119F8 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000119FA 0000                       		dc.w Obj5A_Action-Obj5A_Index
000119FC                            ; ===========================================================================
000119FC                            
000119FC                            Obj5A_Main:				; XREF: Obj5A_Index
000119FC 5428 0024                  		addq.b	#2,$24(a0)
00011A00 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011A08 317C 4000 0002             		move.w	#$4000,2(a0)
00011A0E 117C 0004 0001             		move.b	#4,1(a0)
00011A14 117C 0004 0018             		move.b	#4,$18(a0)
00011A1A 117C 0018 0019             		move.b	#$18,$19(a0)
00011A20 3168 0008 0032             		move.w	8(a0),$32(a0)
00011A26 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011A2C                            
00011A2C                            Obj5A_Platform:				; XREF: Obj5A_Index
00011A2C 7200                       		moveq	#0,d1
00011A2E 1228 0019                  		move.b	$19(a0),d1
00011A32 4EB9 0000 7ECE             		jsr	(PlatformObject).l
00011A38 6000 0000                  		bra.w	Obj5A_Types
00011A3C                            ; ===========================================================================
00011A3C                            
00011A3C                            Obj5A_Action:				; XREF: Obj5A_Index
00011A3C 7200                       		moveq	#0,d1
00011A3E 1228 0019                  		move.b	$19(a0),d1
00011A42 4EB9 0000 8042             		jsr	(ExitPlatform).l
00011A48 3F28 0008                  		move.w	8(a0),-(sp)
00011A4C 6100 0000                  		bsr.w	Obj5A_Types
00011A50 341F                       		move.w	(sp)+,d2
00011A52 4EF9 0000 85AC             		jmp	(MvSonicOnPtfm2).l
00011A58                            ; ===========================================================================
00011A58                            
00011A58                            Obj5A_Types:
00011A58 7000                       		moveq	#0,d0
00011A5A 1028 0028                  		move.b	$28(a0),d0
00011A5E 0240 000C                  		andi.w	#$C,d0
00011A62 E248                       		lsr.w	#1,d0
00011A64 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011A68 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011A6C                            ; ===========================================================================
00011A6C 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011A6E 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011A70                            ; ===========================================================================
00011A70                            
00011A70                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011A70 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011A74 0401 0050                  		subi.b	#$50,d1
00011A78 4881                       		ext.w	d1
00011A7A 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011A7E 0402 0050                  		subi.b	#$50,d2
00011A82 4882                       		ext.w	d2
00011A84 0828 0000 0028             		btst	#0,$28(a0)
00011A8A 6700                       		beq.s	loc_10E24
00011A8C 4441                       		neg.w	d1
00011A8E 4442                       		neg.w	d2
00011A90                            
00011A90                            loc_10E24:
00011A90 0828 0001 0028             		btst	#1,$28(a0)
00011A96 6700                       		beq.s	loc_10E30
00011A98 4441                       		neg.w	d1
00011A9A C342                       		exg	d1,d2
00011A9C                            
00011A9C                            loc_10E30:
00011A9C D268 0032                  		add.w	$32(a0),d1
00011AA0 3141 0008                  		move.w	d1,8(a0)
00011AA4 D468 0030                  		add.w	$30(a0),d2
00011AA8 3142 000C                  		move.w	d2,$C(a0)
00011AAC 4E75                       		rts	
00011AAE                            ; ===========================================================================
00011AAE                            
00011AAE                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011AAE 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011AB2 0401 0050                  		subi.b	#$50,d1
00011AB6 4881                       		ext.w	d1
00011AB8 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011ABC 0402 0050                  		subi.b	#$50,d2
00011AC0 4882                       		ext.w	d2
00011AC2 0828 0000 0028             		btst	#0,$28(a0)
00011AC8 6700                       		beq.s	loc_10E62
00011ACA 4441                       		neg.w	d1
00011ACC 4442                       		neg.w	d2
00011ACE                            
00011ACE                            loc_10E62:
00011ACE 0828 0001 0028             		btst	#1,$28(a0)
00011AD4 6700                       		beq.s	loc_10E6E
00011AD6 4441                       		neg.w	d1
00011AD8 C342                       		exg	d1,d2
00011ADA                            
00011ADA                            loc_10E6E:
00011ADA 4441                       		neg.w	d1
00011ADC D268 0032                  		add.w	$32(a0),d1
00011AE0 3141 0008                  		move.w	d1,8(a0)
00011AE4 D468 0030                  		add.w	$30(a0),d2
00011AE8 3142 000C                  		move.w	d2,$C(a0)
00011AEC 4E75                       		rts	
00011AEE                            ; ===========================================================================
00011AEE                            ; ---------------------------------------------------------------------------
00011AEE                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011AEE                            ; ---------------------------------------------------------------------------
00011AEE                            Map_obj5A:
00011AEE                            	include "_maps\obj5A.asm"
00011AEE                            ; ---------------------------------------------------------------------------
00011AEE                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011AEE                            ; ---------------------------------------------------------------------------
00011AEE 0000                       		dc.w byte_10E84-Map_obj5A
00011AF0 02                         byte_10E84:	dc.b 2
00011AF1 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00011AF6 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011AFC 00                         		even
00011AFC 00                         		even
00011AFC                            
00011AFC                            ; ===========================================================================
00011AFC                            ; ---------------------------------------------------------------------------
00011AFC                            ; Object 5B - blocks that form a staircase (SLZ)
00011AFC                            ; ---------------------------------------------------------------------------
00011AFC                            
00011AFC                            Obj5B:					; XREF: Obj_Index
00011AFC 7000                       		moveq	#0,d0
00011AFE 1028 0024                  		move.b	$24(a0),d0
00011B02 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011B06 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011B0A 3028 0030                  		move.w	$30(a0),d0
00011B0E 0240 FF80                  		andi.w	#$FF80,d0
00011B12 3238 F700                  		move.w	($FFFFF700).w,d1
00011B16 0441 0080                  		subi.w	#$80,d1
00011B1A 0241 FF80                  		andi.w	#$FF80,d1
00011B1E 9041                       		sub.w	d1,d0
00011B20 0C40 0280                  		cmpi.w	#$280,d0
00011B24 6200 C7BE                  		bhi.w	DeleteObject
00011B28 6000 C77E                  		bra.w	DisplaySprite
00011B2C                            ; ===========================================================================
00011B2C 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011B2E 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011B30 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011B32                            ; ===========================================================================
00011B32                            
00011B32                            Obj5B_Main:				; XREF: Obj5B_Index
00011B32 5428 0024                  		addq.b	#2,$24(a0)
00011B36 7638                       		moveq	#$38,d3
00011B38 7801                       		moveq	#1,d4
00011B3A 0828 0000 0022             		btst	#0,$22(a0)
00011B40 6700                       		beq.s	loc_10EDA
00011B42 763B                       		moveq	#$3B,d3
00011B44 78FF                       		moveq	#-1,d4
00011B46                            
00011B46                            loc_10EDA:
00011B46 3428 0008                  		move.w	8(a0),d2
00011B4A 2248                       		movea.l	a0,a1
00011B4C 7203                       		moveq	#3,d1
00011B4E 6000                       		bra.s	Obj5B_MakeBlocks
00011B50                            ; ===========================================================================
00011B50                            
00011B50                            Obj5B_Loop:
00011B50 6100 CBF2                  		bsr.w	SingleObjLoad2
00011B54 6600 0000                  		bne.w	Obj5B_Move
00011B58 137C 0004 0024             		move.b	#4,$24(a1)
00011B5E                            
00011B5E                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011B5E 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011B62 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011B6A 337C 4000 0002             		move.w	#$4000,2(a1)
00011B70 137C 0004 0001             		move.b	#4,1(a1)
00011B76 137C 0003 0018             		move.b	#3,$18(a1)
00011B7C 137C 0010 0019             		move.b	#$10,$19(a1)
00011B82 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011B88 3342 0008                  		move.w	d2,8(a1)
00011B8C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011B92 3368 0008 0030             		move.w	8(a0),$30(a1)
00011B98 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011B9E 0642 0020                  		addi.w	#$20,d2
00011BA2 1343 0037                  		move.b	d3,$37(a1)
00011BA6 2348 003C                  		move.l	a0,$3C(a1)
00011BAA D604                       		add.b	d4,d3
00011BAC 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011BB0                            
00011BB0                            Obj5B_Move:				; XREF: Obj5B_Index
00011BB0 7000                       		moveq	#0,d0
00011BB2 1028 0028                  		move.b	$28(a0),d0
00011BB6 0240 0007                  		andi.w	#7,d0
00011BBA D040                       		add.w	d0,d0
00011BBC 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011BC0 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011BC4                            
00011BC4                            Obj5B_Solid:				; XREF: Obj5B_Index
00011BC4 2468 003C                  		movea.l	$3C(a0),a2
00011BC8 7000                       		moveq	#0,d0
00011BCA 1028 0037                  		move.b	$37(a0),d0
00011BCE 1032 0000                  		move.b	(a2,d0.w),d0
00011BD2 D068 0032                  		add.w	$32(a0),d0
00011BD6 3140 000C                  		move.w	d0,$C(a0)
00011BDA 7200                       		moveq	#0,d1
00011BDC 1228 0019                  		move.b	$19(a0),d1
00011BE0 0641 000B                  		addi.w	#$B,d1
00011BE4 343C 0010                  		move.w	#$10,d2
00011BE8 363C 0011                  		move.w	#$11,d3
00011BEC 3828 0008                  		move.w	8(a0),d4
00011BF0 6100 EA80                  		bsr.w	SolidObject
00011BF4 4A04                       		tst.b	d4
00011BF6 6A00                       		bpl.s	loc_10F92
00011BF8 1544 0036                  		move.b	d4,$36(a2)
00011BFC                            
00011BFC                            loc_10F92:
00011BFC 0828 0003 0022             		btst	#3,$22(a0)
00011C02 6700                       		beq.s	locret_10FA0
00011C04 157C 0001 0036             		move.b	#1,$36(a2)
00011C0A                            
00011C0A                            locret_10FA0:
00011C0A 4E75                       		rts	
00011C0C                            ; ===========================================================================
00011C0C 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011C0E 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011C10 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011C12 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011C14                            ; ===========================================================================
00011C14                            
00011C14                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011C14 4A68 0034                  		tst.w	$34(a0)
00011C18 6600                       		bne.s	loc_10FC0
00011C1A 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011C20 6600                       		bne.s	locret_10FBE
00011C22 317C 001E 0034             		move.w	#$1E,$34(a0)
00011C28                            
00011C28                            locret_10FBE:
00011C28 4E75                       		rts	
00011C2A                            ; ===========================================================================
00011C2A                            
00011C2A                            loc_10FC0:
00011C2A 5368 0034                  		subq.w	#1,$34(a0)
00011C2E 66F8                       		bne.s	locret_10FBE
00011C30 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011C34 4E75                       		rts	
00011C36                            ; ===========================================================================
00011C36                            
00011C36                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011C36 4A68 0034                  		tst.w	$34(a0)
00011C3A 6600                       		bne.s	loc_10FE0
00011C3C 4A28 0036                  		tst.b	$36(a0)
00011C40 6A00                       		bpl.s	locret_10FDE
00011C42 317C 003C 0034             		move.w	#$3C,$34(a0)
00011C48                            
00011C48                            locret_10FDE:
00011C48 4E75                       		rts	
00011C4A                            ; ===========================================================================
00011C4A                            
00011C4A                            loc_10FE0:
00011C4A 5368 0034                  		subq.w	#1,$34(a0)
00011C4E 6600                       		bne.s	loc_10FEC
00011C50 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011C54 4E75                       		rts	
00011C56                            ; ===========================================================================
00011C56                            
00011C56                            loc_10FEC:
00011C56 43E8 0038                  		lea	$38(a0),a1
00011C5A 3028 0034                  		move.w	$34(a0),d0
00011C5E E408                       		lsr.b	#2,d0
00011C60 0200 0001                  		andi.b	#1,d0
00011C64 12C0                       		move.b	d0,(a1)+
00011C66 0A00 0001                  		eori.b	#1,d0
00011C6A 12C0                       		move.b	d0,(a1)+
00011C6C 0A00 0001                  		eori.b	#1,d0
00011C70 12C0                       		move.b	d0,(a1)+
00011C72 0A00 0001                  		eori.b	#1,d0
00011C76 12C0                       		move.b	d0,(a1)+
00011C78 4E75                       		rts	
00011C7A                            ; ===========================================================================
00011C7A                            
00011C7A                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011C7A 43E8 0038                  		lea	$38(a0),a1
00011C7E 0C11 0080                  		cmpi.b	#$80,(a1)
00011C82 6700                       		beq.s	locret_11038
00011C84 5211                       		addq.b	#1,(a1)
00011C86 7200                       		moveq	#0,d1
00011C88 1219                       		move.b	(a1)+,d1
00011C8A 4841                       		swap	d1
00011C8C E289                       		lsr.l	#1,d1
00011C8E 2401                       		move.l	d1,d2
00011C90 E289                       		lsr.l	#1,d1
00011C92 2601                       		move.l	d1,d3
00011C94 D682                       		add.l	d2,d3
00011C96 4841                       		swap	d1
00011C98 4842                       		swap	d2
00011C9A 4843                       		swap	d3
00011C9C 12C3                       		move.b	d3,(a1)+
00011C9E 12C2                       		move.b	d2,(a1)+
00011CA0 12C1                       		move.b	d1,(a1)+
00011CA2                            
00011CA2                            locret_11038:
00011CA2 4E75                       		rts	
00011CA4 4E75                       		rts	
00011CA6                            ; ===========================================================================
00011CA6                            ; ---------------------------------------------------------------------------
00011CA6                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011CA6                            ; ---------------------------------------------------------------------------
00011CA6                            Map_obj5B:
00011CA6                            	include "_maps\obj5B.asm"
00011CA6                            ; ---------------------------------------------------------------------------
00011CA6                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011CA6                            ; ---------------------------------------------------------------------------
00011CA6 0000                       		dc.w byte_1103E-Map_obj5B
00011CA8 01                         byte_1103E:	dc.b 1
00011CA9 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011CAE                            		even
00011CAE                            		even
00011CAE                            
00011CAE                            ; ===========================================================================
00011CAE                            ; ---------------------------------------------------------------------------
00011CAE                            ; Object 5C - metal girders in foreground (SLZ)
00011CAE                            ; ---------------------------------------------------------------------------
00011CAE                            
00011CAE                            Obj5C:					; XREF: Obj_Index
00011CAE 7000                       		moveq	#0,d0
00011CB0 1028 0024                  		move.b	$24(a0),d0
00011CB4 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011CB8 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011CBC                            ; ===========================================================================
00011CBC 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011CBE 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011CC0                            ; ===========================================================================
00011CC0                            
00011CC0                            Obj5C_Main:				; XREF: Obj5C_Index
00011CC0 5428 0024                  		addq.b	#2,$24(a0)
00011CC4 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011CCC 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011CD2 117C 0010 0019             		move.b	#$10,$19(a0)
00011CD8                            
00011CD8                            Obj5C_Display:				; XREF: Obj5C_Index
00011CD8 2238 F700                  		move.l	($FFFFF700).w,d1
00011CDC D281                       		add.l	d1,d1
00011CDE 4841                       		swap	d1
00011CE0 4441                       		neg.w	d1
00011CE2 3141 0008                  		move.w	d1,8(a0)
00011CE6 2238 F704                  		move.l	($FFFFF704).w,d1
00011CEA D281                       		add.l	d1,d1
00011CEC 4841                       		swap	d1
00011CEE 0241 003F                  		andi.w	#$3F,d1
00011CF2 4441                       		neg.w	d1
00011CF4 0641 0100                  		addi.w	#$100,d1
00011CF8 3141 000A                  		move.w	d1,$A(a0)
00011CFC 6000 C5AA                  		bra.w	DisplaySprite
00011D00                            ; ===========================================================================
00011D00                            ; ---------------------------------------------------------------------------
00011D00                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011D00                            ; ---------------------------------------------------------------------------
00011D00                            Map_obj5C:
00011D00                            	include "_maps\obj5C.asm"
00011D00                            ; ---------------------------------------------------------------------------
00011D00                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011D00                            ; ---------------------------------------------------------------------------
00011D00 0000                       		dc.w byte_11098-Map_obj5C
00011D02 09                         byte_11098:	dc.b 9
00011D03 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011D08 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011D0D C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011D12 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011D17 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011D1C 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011D21 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011D26 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011D2B 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011D30                            		even
00011D30                            		even
00011D30                            
00011D30                            ; ===========================================================================
00011D30                            ; ---------------------------------------------------------------------------
00011D30                            ; Object 1B - water surface (LZ)
00011D30                            ; ---------------------------------------------------------------------------
00011D30                            
00011D30                            Obj1B:					; XREF: Obj_Index
00011D30 7000                       		moveq	#0,d0
00011D32 1028 0024                  		move.b	$24(a0),d0
00011D36 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011D3A 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011D3E                            ; ===========================================================================
00011D3E 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011D40 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011D42                            ; ===========================================================================
00011D42                            
00011D42                            Obj1B_Main:				; XREF: Obj1B_Index
00011D42 5428 0024                  		addq.b	#2,$24(a0)
00011D46 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011D4E 317C C300 0002             		move.w	#$C300,2(a0)
00011D54 117C 0004 0001             		move.b	#4,1(a0)
00011D5A 117C 0080 0019             		move.b	#$80,$19(a0)
00011D60 3168 0008 0030             		move.w	8(a0),$30(a0)
00011D66                            
00011D66                            Obj1B_Action:				; XREF: Obj1B_Index
00011D66 3238 F700                  		move.w	($FFFFF700).w,d1
00011D6A 0241 FFE0                  		andi.w	#$FFE0,d1
00011D6E D268 0030                  		add.w	$30(a0),d1
00011D72 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011D78 6700                       		beq.s	loc_11114
00011D7A 0641 0020                  		addi.w	#$20,d1
00011D7E                            
00011D7E                            loc_11114:
00011D7E 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011D82 3238 F646                  		move.w	($FFFFF646).w,d1
00011D86 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011D8A 4A28 0032                  		tst.b	$32(a0)
00011D8E 6600                       		bne.s	Obj1B_Animate
00011D90 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011D96 6700                       		beq.s	loc_1114A	; if not, branch
00011D98 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011D9C 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011DA2 6000                       		bra.s	Obj1B_Display
00011DA4                            ; ===========================================================================
00011DA4                            
00011DA4                            Obj1B_Animate:				; XREF: loc_11114
00011DA4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011DA8 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011DAA 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011DB0 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011DB4                            
00011DB4                            loc_1114A:				; XREF: loc_11114
00011DB4 5328 001E                  		subq.b	#1,$1E(a0)
00011DB8 6A00                       		bpl.s	Obj1B_Display
00011DBA 117C 0007 001E             		move.b	#7,$1E(a0)
00011DC0 5228 001A                  		addq.b	#1,$1A(a0)
00011DC4 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011DCA 6500                       		bcs.s	Obj1B_Display
00011DCC 117C 0000 001A             		move.b	#0,$1A(a0)
00011DD2                            
00011DD2                            Obj1B_Display:
00011DD2 6000 C4D4                  		bra.w	DisplaySprite
00011DD6                            ; ===========================================================================
00011DD6                            ; ---------------------------------------------------------------------------
00011DD6                            ; Sprite mappings - water surface (LZ)
00011DD6                            ; ---------------------------------------------------------------------------
00011DD6                            Map_obj1B:
00011DD6                            	include "_maps\obj1B.asm"
00011DD6                            ; ---------------------------------------------------------------------------
00011DD6                            ; Sprite mappings - water surface (LZ)
00011DD6                            ; ---------------------------------------------------------------------------
00011DD6 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011DDA 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011DDE 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011DE2 03                         byte_11178:	dc.b 3
00011DE3 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011DE8 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011DED FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011DF2 03                         byte_11188:	dc.b 3
00011DF3 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011DF8 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011DFD FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011E02 03                         byte_11198:	dc.b 3
00011E03 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011E08 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011E0D FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011E12 06                         byte_111A8:	dc.b 6
00011E13 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011E18 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011E1D FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011E22 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011E27 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011E2C FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011E31 06                         byte_111C7:	dc.b 6
00011E32 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011E37 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011E3C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011E41 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011E46 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011E4B FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011E50 06                         byte_111E6:	dc.b 6
00011E51 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011E56 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011E5B FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011E60 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011E65 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011E6A FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011E70 00                         		even
00011E70 00                         		even
00011E70                            
00011E70                            ; ===========================================================================
00011E70                            ; ---------------------------------------------------------------------------
00011E70                            ; Object 0B - pole that	breaks (LZ)
00011E70                            ; ---------------------------------------------------------------------------
00011E70                            
00011E70                            Obj0B:					; XREF: Obj_Index
00011E70 7000                       		moveq	#0,d0
00011E72 1028 0024                  		move.b	$24(a0),d0
00011E76 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011E7A 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011E7E                            ; ===========================================================================
00011E7E 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011E80 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011E82 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011E84                            ; ===========================================================================
00011E84                            
00011E84                            Obj0B_Main:				; XREF: Obj0B_Index
00011E84 5428 0024                  		addq.b	#2,$24(a0)
00011E88 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011E90 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011E96 117C 0004 0001             		move.b	#4,1(a0)
00011E9C 117C 0008 0019             		move.b	#8,$19(a0)
00011EA2 117C 0004 0018             		move.b	#4,$18(a0)
00011EA8 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011EAE 7000                       		moveq	#0,d0
00011EB0 1028 0028                  		move.b	$28(a0),d0	; get object type
00011EB4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011EB8 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011EBC                            
00011EBC                            Obj0B_Action:				; XREF: Obj0B_Index
00011EBC 4A28 0032                  		tst.b	$32(a0)
00011EC0 6700                       		beq.s	Obj0B_Grab
00011EC2 4A68 0030                  		tst.w	$30(a0)
00011EC6 6700                       		beq.s	Obj0B_MoveUp
00011EC8 5368 0030                  		subq.w	#1,$30(a0)
00011ECC 6600                       		bne.s	Obj0B_MoveUp
00011ECE 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011ED4 6000                       		bra.s	Obj0B_Release
00011ED6                            ; ===========================================================================
00011ED6                            
00011ED6                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011ED6 43F8 D000                  		lea	($FFFFD000).w,a1
00011EDA 3028 000C                  		move.w	$C(a0),d0
00011EDE 0440 0018                  		subi.w	#$18,d0
00011EE2 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011EE8 6700                       		beq.s	Obj0B_MoveDown
00011EEA 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011EEE B069 000C                  		cmp.w	$C(a1),d0
00011EF2 6500                       		bcs.s	Obj0B_MoveDown
00011EF4 3340 000C                  		move.w	d0,$C(a1)
00011EF8                            
00011EF8                            Obj0B_MoveDown:
00011EF8 0640 0024                  		addi.w	#$24,d0
00011EFC 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011F02 6700                       		beq.s	Obj0B_LetGo
00011F04 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011F08 B069 000C                  		cmp.w	$C(a1),d0
00011F0C 6400                       		bcc.s	Obj0B_LetGo
00011F0E 3340 000C                  		move.w	d0,$C(a1)
00011F12                            
00011F12                            Obj0B_LetGo:
00011F12 1038 F603                  		move.b	($FFFFF603).w,d0
00011F16 0240 0070                  		andi.w	#$70,d0
00011F1A 6700                       		beq.s	Obj0B_Display
00011F1C                            
00011F1C                            Obj0B_Release:				; XREF: Obj0B_Action
00011F1C 4228 0020                  		clr.b	$20(a0)
00011F20 5428 0024                  		addq.b	#2,$24(a0)
00011F24 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011F28 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011F2C 4228 0032                  		clr.b	$32(a0)
00011F30 6000                       		bra.s	Obj0B_Display
00011F32                            ; ===========================================================================
00011F32                            
00011F32                            Obj0B_Grab:				; XREF: Obj0B_Action
00011F32 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011F36 6700                       		beq.s	Obj0B_Display	; if not, branch
00011F38 43F8 D000                  		lea	($FFFFD000).w,a1
00011F3C 3028 0008                  		move.w	8(a0),d0
00011F40 0640 0014                  		addi.w	#$14,d0
00011F44 B069 0008                  		cmp.w	8(a1),d0
00011F48 6400                       		bcc.s	Obj0B_Display
00011F4A 4228 0021                  		clr.b	$21(a0)
00011F4E 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011F54 6400                       		bcc.s	Obj0B_Display
00011F56 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011F5A 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011F5E 3028 0008                  		move.w	8(a0),d0
00011F62 0640 0014                  		addi.w	#$14,d0
00011F66 3340 0008                  		move.w	d0,8(a1)
00011F6A 08A9 0000 0022             		bclr	#0,$22(a1)
00011F70 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011F76 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011F7C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011F82 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011F88                            
00011F88                            Obj0B_Display:				; XREF: Obj0B_Index
00011F88 6000 E3C0                  		bra.w	MarkObjGone
00011F8C                            ; ===========================================================================
00011F8C                            ; ---------------------------------------------------------------------------
00011F8C                            ; Sprite mappings - pole that breaks (LZ)
00011F8C                            ; ---------------------------------------------------------------------------
00011F8C                            Map_obj0B:
00011F8C                            	include "_maps\obj0B.asm"
00011F8C                            ; ---------------------------------------------------------------------------
00011F8C                            ; Sprite mappings - pole that breaks (LZ)
00011F8C                            ; ---------------------------------------------------------------------------
00011F8C 0000                       		dc.w byte_11326-Map_obj0B
00011F8E 0000                       		dc.w byte_11331-Map_obj0B
00011F90 02                         byte_11326:	dc.b 2			; normal pole
00011F91 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011F96 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011F9B 04                         byte_11331:	dc.b 4			; broken pole
00011F9C E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011FA1 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011FA6 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011FAB 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011FB0                            		even
00011FB0                            		even
00011FB0                            
00011FB0                            ; ===========================================================================
00011FB0                            ; ---------------------------------------------------------------------------
00011FB0                            ; Object 0C - flapping door (LZ)
00011FB0                            ; ---------------------------------------------------------------------------
00011FB0                            
00011FB0                            Obj0C:					; XREF: Obj_Index
00011FB0 7000                       		moveq	#0,d0
00011FB2 1028 0024                  		move.b	$24(a0),d0
00011FB6 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011FBA 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011FBE                            ; ===========================================================================
00011FBE 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011FC0 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011FC2                            ; ===========================================================================
00011FC2                            
00011FC2                            Obj0C_Main:				; XREF: Obj0C_Index
00011FC2 5428 0024                  		addq.b	#2,$24(a0)
00011FC6 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011FCE 317C 4328 0002             		move.w	#$4328,2(a0)
00011FD4 0028 0004 0001             		ori.b	#4,1(a0)
00011FDA 117C 0028 0019             		move.b	#$28,$19(a0)
00011FE0 7000                       		moveq	#0,d0
00011FE2 1028 0028                  		move.b	$28(a0),d0	; get object type
00011FE6 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011FEA 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011FEE                            
00011FEE                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011FEE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011FF2 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011FF4 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011FFA 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00012000 4A28 0001                  		tst.b	1(a0)
00012004 6A00                       		bpl.s	Obj0C_Solid
00012006 303C 00BB                  		move.w	#$BB,d0
0001200A 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play door sound
00012010                            
00012010                            Obj0C_Solid:
00012010 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00012016 6100 92E8                  		bsr.w	AnimateSprite
0001201A 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
0001201E 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00012022 6600                       		bne.s	Obj0C_Display	; if yes, branch
00012024 3038 D008                  		move.w	($FFFFD008).w,d0
00012028 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
0001202C 6400                       		bcc.s	Obj0C_Display	; if yes, branch
0001202E 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012034 323C 0013                  		move.w	#$13,d1
00012038 343C 0020                  		move.w	#$20,d2
0001203C 3602                       		move.w	d2,d3
0001203E 5243                       		addq.w	#1,d3
00012040 3828 0008                  		move.w	8(a0),d4
00012044 6100 E62C                  		bsr.w	SolidObject	; make the door	solid
00012048                            
00012048                            Obj0C_Display:
00012048 6000 E300                  		bra.w	MarkObjGone
0001204C                            ; ===========================================================================
0001204C                            Ani_obj0C:
0001204C                            	include "_anim\obj0C.asm"
0001204C                            ; ---------------------------------------------------------------------------
0001204C                            ; Animation script - flapping door (LZ)
0001204C                            ; ---------------------------------------------------------------------------
0001204C 0000                       		dc.w byte_113E6-Ani_obj0C
0001204E 0000                       		dc.w byte_113EC-Ani_obj0C
00012050 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00012056 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
0001205C                            		even
0001205C                            		even
0001205C                            
0001205C                            ; ---------------------------------------------------------------------------
0001205C                            ; Sprite mappings - flapping door (LZ)
0001205C                            ; ---------------------------------------------------------------------------
0001205C                            Map_obj0C:
0001205C                            	include "_maps\obj0C.asm"
0001205C                            ; ---------------------------------------------------------------------------
0001205C                            ; Sprite mappings - flapping door (LZ)
0001205C                            ; ---------------------------------------------------------------------------
0001205C 0000                       		dc.w byte_113F8-Map_obj0C
0001205E 0000                       		dc.w byte_11403-Map_obj0C
00012060 0000                       		dc.w byte_1140E-Map_obj0C
00012062 02                         byte_113F8:	dc.b 2
00012063 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012068 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001206D 02                         byte_11403:	dc.b 2
0001206E DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012073 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00012078 02                         byte_1140E:	dc.b 2
00012079 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001207E 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012084 00                         		even
00012084 00                         		even
00012084                            
00012084                            ; ===========================================================================
00012084                            ; ---------------------------------------------------------------------------
00012084                            ; Object 71 - invisible	solid blocks
00012084                            ; ---------------------------------------------------------------------------
00012084                            
00012084                            Obj71:					; XREF: Obj_Index
00012084 7000                       		moveq	#0,d0
00012086 1028 0024                  		move.b	$24(a0),d0
0001208A 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
0001208E 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012092                            ; ===========================================================================
00012092 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012094 0000                       		dc.w Obj71_Solid-Obj71_Index
00012096                            ; ===========================================================================
00012096                            
00012096                            Obj71_Main:				; XREF: Obj71_Index
00012096 5428 0024                  		addq.b	#2,$24(a0)
0001209A 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
000120A2 317C 8680 0002             		move.w	#$8680,2(a0)
000120A8 0028 0004 0001             		ori.b	#4,1(a0)
000120AE 1028 0028                  		move.b	$28(a0),d0	; get object type
000120B2 1200                       		move.b	d0,d1
000120B4 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000120B8 0640 0010                  		addi.w	#$10,d0
000120BC E248                       		lsr.w	#1,d0
000120BE 1140 0019                  		move.b	d0,$19(a0)	; set object width
000120C2 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000120C6 5241                       		addq.w	#1,d1
000120C8 E749                       		lsl.w	#3,d1
000120CA 1141 0016                  		move.b	d1,$16(a0)	; set object height
000120CE                            
000120CE                            Obj71_Solid:				; XREF: Obj71_Index
000120CE 6100 C452                  		bsr.w	ChkObjOnScreen
000120D2 6600                       		bne.s	Obj71_ChkDel
000120D4 7200                       		moveq	#0,d1
000120D6 1228 0019                  		move.b	$19(a0),d1
000120DA 0641 000B                  		addi.w	#$B,d1
000120DE 7400                       		moveq	#0,d2
000120E0 1428 0016                  		move.b	$16(a0),d2
000120E4 3602                       		move.w	d2,d3
000120E6 5243                       		addq.w	#1,d3
000120E8 3828 0008                  		move.w	8(a0),d4
000120EC 6100 E5CC                  		bsr.w	SolidObject71
000120F0                            
000120F0                            Obj71_ChkDel:
000120F0 3028 0008                  		move.w	8(a0),d0
000120F4 0240 FF80                  		andi.w	#$FF80,d0
000120F8 3238 F700                  		move.w	($FFFFF700).w,d1
000120FC 0441 0080                  		subi.w	#$80,d1
00012100 0241 FF80                  		andi.w	#$FF80,d1
00012104 9041                       		sub.w	d1,d0
00012106 0C40 0280                  		cmpi.w	#$280,d0
0001210A 6200                       		bhi.s	Obj71_Delete
0001210C 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00012110 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00012112 4EFA C194                  		jmp	DisplaySprite	; if yes, display the object
00012116                            ; ===========================================================================
00012116                            
00012116                            Obj71_NoDisplay:
00012116 4E75                       		rts	
00012118                            ; ===========================================================================
00012118                            
00012118                            Obj71_Delete:
00012118 4EFA C1CA                  		jmp	DeleteObject
0001211C                            ; ===========================================================================
0001211C                            ; ---------------------------------------------------------------------------
0001211C                            ; Sprite mappings - invisible solid blocks
0001211C                            ; ---------------------------------------------------------------------------
0001211C                            Map_obj71:
0001211C                            	include "_maps\obj71.asm"
0001211C                            ; ---------------------------------------------------------------------------
0001211C                            ; Sprite mappings - invisible solid blocks
0001211C                            ; ---------------------------------------------------------------------------
0001211C 0000                       		dc.w byte_114BC-Map_obj71
0001211E 0000                       		dc.w byte_114D1-Map_obj71
00012120 0000                       		dc.w byte_114E6-Map_obj71
00012122 04                         byte_114BC:	dc.b 4
00012123 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00012128 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
0001212D 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00012132 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00012137 04                         byte_114D1:	dc.b 4
00012138 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
0001213D E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00012142 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00012147 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
0001214C 04                         byte_114E6:	dc.b 4
0001214D E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00012152 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00012157 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
0001215C 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00012162 00                         		even
00012162 00                         		even
00012162                            
00012162                            ; ===========================================================================
00012162                            ; ---------------------------------------------------------------------------
00012162                            ; Object 5D - fans (SLZ)
00012162                            ; ---------------------------------------------------------------------------
00012162                            
00012162                            Obj5D:					; XREF: Obj_Index
00012162 7000                       		moveq	#0,d0
00012164 1028 0024                  		move.b	$24(a0),d0
00012168 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
0001216C 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012170                            ; ===========================================================================
00012170 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012172 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012174                            ; ===========================================================================
00012174                            
00012174                            Obj5D_Main:				; XREF: Obj5D_Index
00012174 5428 0024                  		addq.b	#2,$24(a0)
00012178 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012180 317C 43A0 0002             		move.w	#$43A0,2(a0)
00012186 0028 0004 0001             		ori.b	#4,1(a0)
0001218C 117C 0010 0019             		move.b	#$10,$19(a0)
00012192 117C 0004 0018             		move.b	#4,$18(a0)
00012198                            
00012198                            Obj5D_Delay:				; XREF: Obj5D_Index
00012198 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
0001219E 6600                       		bne.s	Obj5D_Blow	; if yes, branch
000121A0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000121A4 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
000121A6 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
000121AC 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
000121B2 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
000121B4 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
000121BA                            
000121BA                            Obj5D_Blow:
000121BA 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
000121BE 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
000121C2 43F8 D000                  		lea	($FFFFD000).w,a1
000121C6 3029 0008                  		move.w	8(a1),d0
000121CA 9068 0008                  		sub.w	8(a0),d0
000121CE 0828 0000 0022             		btst	#0,$22(a0)
000121D4 6600                       		bne.s	Obj5D_ChkSonic
000121D6 4440                       		neg.w	d0
000121D8                            
000121D8                            Obj5D_ChkSonic:
000121D8 0640 0050                  		addi.w	#$50,d0
000121DC 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000121E0 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000121E2 3229 000C                  		move.w	$C(a1),d1
000121E6 0641 0060                  		addi.w	#$60,d1
000121EA 9268 000C                  		sub.w	$C(a0),d1
000121EE 6500                       		bcs.s	Obj5D_Animate
000121F0 0C41 0070                  		cmpi.w	#$70,d1
000121F4 6400                       		bcc.s	Obj5D_Animate
000121F6 0440 0050                  		subi.w	#$50,d0
000121FA 6400                       		bcc.s	loc_1159A
000121FC 4640                       		not.w	d0
000121FE D040                       		add.w	d0,d0
00012200                            
00012200                            loc_1159A:
00012200 0640 0060                  		addi.w	#$60,d0
00012204 0828 0000 0022             		btst	#0,$22(a0)
0001220A 6600                       		bne.s	loc_115A8
0001220C 4440                       		neg.w	d0
0001220E                            
0001220E                            loc_115A8:
0001220E 4400                       		neg.b	d0
00012210 E840                       		asr.w	#4,d0
00012212 0828 0000 0028             		btst	#0,$28(a0)
00012218 6700                       		beq.s	Obj5D_MoveSonic
0001221A 4440                       		neg.w	d0
0001221C                            
0001221C                            Obj5D_MoveSonic:
0001221C D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00012220                            
00012220                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00012220 5328 001E                  		subq.b	#1,$1E(a0)
00012224 6A00                       		bpl.s	Obj5D_ChkDel
00012226 117C 0000 001E             		move.b	#0,$1E(a0)
0001222C 5228 001B                  		addq.b	#1,$1B(a0)
00012230 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00012236 6500                       		bcs.s	loc_115D8
00012238 117C 0000 001B             		move.b	#0,$1B(a0)
0001223E                            
0001223E                            loc_115D8:
0001223E 7000                       		moveq	#0,d0
00012240 0828 0000 0028             		btst	#0,$28(a0)
00012246 6700                       		beq.s	loc_115E4
00012248 7002                       		moveq	#2,d0
0001224A                            
0001224A                            loc_115E4:
0001224A D028 001B                  		add.b	$1B(a0),d0
0001224E 1140 001A                  		move.b	d0,$1A(a0)
00012252                            
00012252                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012252 6100 C054                  		bsr.w	DisplaySprite
00012256 3028 0008                  		move.w	8(a0),d0
0001225A 0240 FF80                  		andi.w	#$FF80,d0
0001225E 3238 F700                  		move.w	($FFFFF700).w,d1
00012262 0441 0080                  		subi.w	#$80,d1
00012266 0241 FF80                  		andi.w	#$FF80,d1
0001226A 9041                       		sub.w	d1,d0
0001226C 0C40 0280                  		cmpi.w	#$280,d0
00012270 6200 C072                  		bhi.w	DeleteObject
00012274 4E75                       		rts	
00012276                            ; ===========================================================================
00012276                            ; ---------------------------------------------------------------------------
00012276                            ; Sprite mappings - fans (SLZ)
00012276                            ; ---------------------------------------------------------------------------
00012276                            Map_obj5D:
00012276                            	include "_maps\obj5D.asm"
00012276                            ; ---------------------------------------------------------------------------
00012276                            ; Sprite mappings - fans (SLZ)
00012276                            ; ---------------------------------------------------------------------------
00012276 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0001227A 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
0001227E 0000                       		dc.w byte_1161A-Map_obj5D
00012280 02                         byte_1161A:	dc.b 2
00012281 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00012286 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001228B 02                         byte_11625:	dc.b 2
0001228C F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012291 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012296 02                         byte_11630:	dc.b 2
00012297 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
0001229C 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
000122A2 00                         		even
000122A2 00                         		even
000122A2                            
000122A2                            ; ===========================================================================
000122A2                            ; ---------------------------------------------------------------------------
000122A2                            ; Object 5E - seesaws (SLZ)
000122A2                            ; ---------------------------------------------------------------------------
000122A2                            
000122A2                            Obj5E:					; XREF: Obj_Index
000122A2 7000                       		moveq	#0,d0
000122A4 1028 0024                  		move.b	$24(a0),d0
000122A8 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
000122AC 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
000122B0 3028 0030                  		move.w	$30(a0),d0
000122B4 0240 FF80                  		andi.w	#$FF80,d0
000122B8 3238 F700                  		move.w	($FFFFF700).w,d1
000122BC 0441 0080                  		subi.w	#$80,d1
000122C0 0241 FF80                  		andi.w	#$FF80,d1
000122C4 9041                       		sub.w	d1,d0
000122C6 6B00 C01C                  		bmi.w	DeleteObject
000122CA 0C40 0280                  		cmpi.w	#$280,d0
000122CE 6200 C014                  		bhi.w	DeleteObject
000122D2 6000 BFD4                  		bra.w	DisplaySprite
000122D6                            ; ===========================================================================
000122D6 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
000122D8 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000122DA 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000122DC 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000122DE 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000122E0 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000122E2                            ; ===========================================================================
000122E2                            
000122E2                            Obj5E_Main:				; XREF: Obj5E_Index
000122E2 5428 0024                  		addq.b	#2,$24(a0)
000122E6 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000122EE 317C 0374 0002             		move.w	#$374,2(a0)
000122F4 0028 0004 0001             		ori.b	#4,1(a0)
000122FA 117C 0004 0018             		move.b	#4,$18(a0)
00012300 117C 0030 0019             		move.b	#$30,$19(a0)
00012306 3168 0008 0030             		move.w	8(a0),$30(a0)
0001230C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00012310 6600                       		bne.s	loc_116D2	; if not, branch
00012312 6100 C430                  		bsr.w	SingleObjLoad2
00012316 6600                       		bne.s	loc_116D2
00012318 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
0001231C 5C29 0024                  		addq.b	#6,$24(a1)
00012320 3368 0008 0008             		move.w	8(a0),8(a1)
00012326 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001232C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012332 2348 003C                  		move.l	a0,$3C(a1)
00012336                            
00012336                            loc_116D2:
00012336 0828 0000 0022             		btst	#0,$22(a0)
0001233C 6700                       		beq.s	loc_116E0
0001233E 117C 0002 001A             		move.b	#2,$1A(a0)
00012344                            
00012344                            loc_116E0:
00012344 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
0001234A                            
0001234A                            Obj5E_Slope:				; XREF: Obj5E_Index
0001234A 1228 003A                  		move.b	$3A(a0),d1
0001234E 6100 0000                  		bsr.w	loc_11766
00012352 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012358 0828 0000 001A             		btst	#0,$1A(a0)
0001235E 6700                       		beq.s	loc_11702
00012360 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012366                            
00012366                            loc_11702:
00012366 43F8 D000                  		lea	($FFFFD000).w,a1
0001236A 3169 0012 0038             		move.w	$12(a1),$38(a0)
00012370 323C 0030                  		move.w	#$30,d1
00012374 4EB9 0000 7FA2             		jsr	(SlopeObject).l
0001237A 4E75                       		rts	
0001237C                            ; ===========================================================================
0001237C                            
0001237C                            Obj5E_Slope2:				; XREF: Obj5E_Index
0001237C 6100 0000                  		bsr.w	loc_1174A
00012380 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012386 0828 0000 001A             		btst	#0,$1A(a0)
0001238C 6700                       		beq.s	loc_11730
0001238E 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012394                            
00012394                            loc_11730:
00012394 323C 0030                  		move.w	#$30,d1
00012398 4EB9 0000 8042             		jsr	(ExitPlatform).l
0001239E 323C 0030                  		move.w	#$30,d1
000123A2 3428 0008                  		move.w	8(a0),d2
000123A6 4EB9 0000 9032             		jsr	SlopeObject2
000123AC 4E75                       		rts	
000123AE                            ; ===========================================================================
000123AE                            
000123AE                            loc_1174A:				; XREF: Obj5E_Slope2
000123AE 7202                       		moveq	#2,d1
000123B0 43F8 D000                  		lea	($FFFFD000).w,a1
000123B4 3028 0008                  		move.w	8(a0),d0
000123B8 9069 0008                  		sub.w	8(a1),d0
000123BC 6400                       		bcc.s	loc_1175E
000123BE 4440                       		neg.w	d0
000123C0 7200                       		moveq	#0,d1
000123C2                            
000123C2                            loc_1175E:
000123C2 0C40 0008                  		cmpi.w	#8,d0
000123C6 6400                       		bcc.s	loc_11766
000123C8 7201                       		moveq	#1,d1
000123CA                            
000123CA                            loc_11766:
000123CA 1028 001A                  		move.b	$1A(a0),d0
000123CE B001                       		cmp.b	d1,d0
000123D0 6700                       		beq.s	locret_11790
000123D2 6400                       		bcc.s	loc_11772
000123D4 5400                       		addq.b	#2,d0
000123D6                            
000123D6                            loc_11772:
000123D6 5300                       		subq.b	#1,d0
000123D8 1140 001A                  		move.b	d0,$1A(a0)
000123DC 1141 003A                  		move.b	d1,$3A(a0)
000123E0 08A8 0000 0001             		bclr	#0,1(a0)
000123E6 0828 0001 001A             		btst	#1,$1A(a0)
000123EC 6700                       		beq.s	locret_11790
000123EE 08E8 0000 0001             		bset	#0,1(a0)
000123F4                            
000123F4                            locret_11790:
000123F4 4E75                       		rts	
000123F6                            ; ===========================================================================
000123F6                            
000123F6                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000123F6 5428 0024                  		addq.b	#2,$24(a0)
000123FA 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00012402 317C 04F0 0002             		move.w	#$4F0,2(a0)
00012408 0028 0004 0001             		ori.b	#4,1(a0)
0001240E 117C 0004 0018             		move.b	#4,$18(a0)
00012414 117C 008B 0020             		move.b	#$8B,$20(a0)
0001241A 117C 000C 0019             		move.b	#$C,$19(a0)
00012420 3168 0008 0030             		move.w	8(a0),$30(a0)
00012426 0668 0028 0008             		addi.w	#$28,8(a0)
0001242C 3168 000C 0034             		move.w	$C(a0),$34(a0)
00012432 117C 0001 001A             		move.b	#1,$1A(a0)
00012438 0828 0000 0022             		btst	#0,$22(a0)
0001243E 6700                       		beq.s	Obj5E_MoveSpike
00012440 0468 0050 0008             		subi.w	#$50,8(a0)
00012446 117C 0002 003A             		move.b	#2,$3A(a0)
0001244C                            
0001244C                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
0001244C 2268 003C                  		movea.l	$3C(a0),a1
00012450 7000                       		moveq	#0,d0
00012452 1028 003A                  		move.b	$3A(a0),d0
00012456 9029 003A                  		sub.b	$3A(a1),d0
0001245A 6700                       		beq.s	loc_1183E
0001245C 6400                       		bcc.s	loc_117FC
0001245E 4400                       		neg.b	d0
00012460                            
00012460                            loc_117FC:
00012460 323C F7E8                  		move.w	#-$818,d1
00012464 343C FEEC                  		move.w	#-$114,d2
00012468 0C00 0001                  		cmpi.b	#1,d0
0001246C 6700                       		beq.s	loc_11822
0001246E 323C F510                  		move.w	#-$AF0,d1
00012472 343C FF34                  		move.w	#-$CC,d2
00012476 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001247C 6D00                       		blt.s	loc_11822
0001247E 323C F200                  		move.w	#-$E00,d1
00012482 343C FF60                  		move.w	#-$A0,d2
00012486                            
00012486                            loc_11822:
00012486 3141 0012                  		move.w	d1,$12(a0)
0001248A 3142 0010                  		move.w	d2,$10(a0)
0001248E 3028 0008                  		move.w	8(a0),d0
00012492 9068 0030                  		sub.w	$30(a0),d0
00012496 6400                       		bcc.s	loc_11838
00012498 4468 0010                  		neg.w	$10(a0)
0001249C                            
0001249C                            loc_11838:
0001249C 5428 0024                  		addq.b	#2,$24(a0)
000124A0 6000                       		bra.s	Obj5E_SpikeFall
000124A2                            ; ===========================================================================
000124A2                            
000124A2                            loc_1183E:				; XREF: Obj5E_MoveSpike
000124A2 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000124A8 7000                       		moveq	#0,d0
000124AA 1029 001A                  		move.b	$1A(a1),d0
000124AE 343C 0028                  		move.w	#$28,d2
000124B2 3228 0008                  		move.w	8(a0),d1
000124B6 9268 0030                  		sub.w	$30(a0),d1
000124BA 6400                       		bcc.s	loc_1185C
000124BC 4442                       		neg.w	d2
000124BE 5440                       		addq.w	#2,d0
000124C0                            
000124C0                            loc_1185C:
000124C0 D040                       		add.w	d0,d0
000124C2 3228 0034                  		move.w	$34(a0),d1
000124C6 D272 0000                  		add.w	(a2,d0.w),d1
000124CA 3141 000C                  		move.w	d1,$C(a0)
000124CE D468 0030                  		add.w	$30(a0),d2
000124D2 3142 0008                  		move.w	d2,8(a0)
000124D6 4268 000E                  		clr.w	$E(a0)
000124DA 4268 000A                  		clr.w	$A(a0)
000124DE 4E75                       		rts	
000124E0                            ; ===========================================================================
000124E0                            
000124E0                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000124E0 4A68 0012                  		tst.w	$12(a0)
000124E4 6A00                       		bpl.s	loc_1189A
000124E6 6100 BD24                  		bsr.w	ObjectFall
000124EA 3028 0034                  		move.w	$34(a0),d0
000124EE 0440 002F                  		subi.w	#$2F,d0
000124F2 B068 000C                  		cmp.w	$C(a0),d0
000124F6 6E00                       		bgt.s	locret_11898
000124F8 6100 BD12                  		bsr.w	ObjectFall
000124FC                            
000124FC                            locret_11898:
000124FC 4E75                       		rts	
000124FE                            ; ===========================================================================
000124FE                            
000124FE                            loc_1189A:				; XREF: Obj5E_SpikeFall
000124FE 6100 BD0C                  		bsr.w	ObjectFall
00012502 2268 003C                  		movea.l	$3C(a0),a1
00012506 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001250C 7000                       		moveq	#0,d0
0001250E 1029 001A                  		move.b	$1A(a1),d0
00012512 3228 0008                  		move.w	8(a0),d1
00012516 9268 0030                  		sub.w	$30(a0),d1
0001251A 6400                       		bcc.s	loc_118BA
0001251C 5440                       		addq.w	#2,d0
0001251E                            
0001251E                            loc_118BA:
0001251E D040                       		add.w	d0,d0
00012520 3228 0034                  		move.w	$34(a0),d1
00012524 D272 0000                  		add.w	(a2,d0.w),d1
00012528 B268 000C                  		cmp.w	$C(a0),d1
0001252C 6E00                       		bgt.s	locret_11938
0001252E 2268 003C                  		movea.l	$3C(a0),a1
00012532 7202                       		moveq	#2,d1
00012534 4A68 0010                  		tst.w	$10(a0)
00012538 6B00                       		bmi.s	Obj5E_Spring
0001253A 7200                       		moveq	#0,d1
0001253C                            
0001253C                            Obj5E_Spring:
0001253C 1341 003A                  		move.b	d1,$3A(a1)
00012540 1141 003A                  		move.b	d1,$3A(a0)
00012544 B229 001A                  		cmp.b	$1A(a1),d1
00012548 6700                       		beq.s	loc_1192C
0001254A 08A9 0003 0022             		bclr	#3,$22(a1)
00012550 6700                       		beq.s	loc_1192C
00012552 4229 0025                  		clr.b	$25(a1)
00012556 137C 0002 0024             		move.b	#2,$24(a1)
0001255C 45F8 D000                  		lea	($FFFFD000).w,a2
00012560 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012566 446A 0012                  		neg.w	$12(a2)
0001256A 08EA 0001 0022             		bset	#1,$22(a2)
00012570 08AA 0003 0022             		bclr	#3,$22(a2)
00012576 422A 003C                  		clr.b	$3C(a2)
0001257A 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012580 157C 0002 0024             		move.b	#2,$24(a2)
00012586 303C 00CC                  		move.w	#$CC,d0
0001258A 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play spring sound
00012590                            
00012590                            loc_1192C:
00012590 4268 0010                  		clr.w	$10(a0)
00012594 4268 0012                  		clr.w	$12(a0)
00012598 5528 0024                  		subq.b	#2,$24(a0)
0001259C                            
0001259C                            locret_11938:
0001259C 4E75                       		rts	
0001259E                            ; ===========================================================================
0001259E FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000125A8                            
000125A8                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000125D8                            		even
000125D8                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00012608                            		even
00012608                            ; ---------------------------------------------------------------------------
00012608                            ; Sprite mappings - seesaws (SLZ)
00012608                            ; ---------------------------------------------------------------------------
00012608                            Map_obj5E:
00012608                            	include "_maps\obj5E.asm"
00012608                            ; ---------------------------------------------------------------------------
00012608                            ; Sprite mappings - seesaws (SLZ)
00012608                            ; ---------------------------------------------------------------------------
00012608 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001260C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012610 07                         byte_119AC:	dc.b 7
00012611 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00012616 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
0001261B E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00012620 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012625 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0001262A F406 0006 13               		dc.b $F4, 6, 0,	6, $13
0001262F FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012634 04                         byte_119D0:	dc.b 4
00012635 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0001263A E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
0001263F E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012644 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001264A 00                         		even
0001264A 00                         		even
0001264A                            
0001264A                            ; ---------------------------------------------------------------------------
0001264A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001264A                            ; ---------------------------------------------------------------------------
0001264A                            Map_obj5Ea:
0001264A                            	include "_maps\obj5Eballs.asm"
0001264A                            ; ---------------------------------------------------------------------------
0001264A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001264A                            ; ---------------------------------------------------------------------------
0001264A 0000                       		dc.w byte_119EA-Map_obj5Ea
0001264C 0000                       		dc.w byte_119F0-Map_obj5Ea
0001264E 01                         byte_119EA:	dc.b 1
0001264F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012654 01                         byte_119F0:	dc.b 1
00012655 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001265A                            		even
0001265A                            		even
0001265A                            
0001265A                            ; ===========================================================================
0001265A                            ; ---------------------------------------------------------------------------
0001265A                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001265A                            ; ---------------------------------------------------------------------------
0001265A                            
0001265A                            Obj5F:					; XREF: Obj_Index
0001265A 7000                       		moveq	#0,d0
0001265C 1028 0024                  		move.b	$24(a0),d0
00012660 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012664 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012668                            ; ===========================================================================
00012668 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001266A 0000                       		dc.w Obj5F_Action-Obj5F_Index
0001266C 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001266E 0000                       		dc.w Obj5F_End-Obj5F_Index
00012670                            ; ===========================================================================
00012670                            
00012670                            Obj5F_Main:				; XREF: Obj5F_Index
00012670 5428 0024                  		addq.b	#2,$24(a0)
00012674 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0001267C 317C 0400 0002             		move.w	#$400,2(a0)
00012682 0028 0004 0001             		ori.b	#4,1(a0)
00012688 117C 0003 0018             		move.b	#3,$18(a0)
0001268E 117C 000C 0019             		move.b	#$C,$19(a0)
00012694 1028 0028                  		move.b	$28(a0),d0
00012698 6700                       		beq.s	loc_11A3C
0001269A 1140 0024                  		move.b	d0,$24(a0)
0001269E 4E75                       		rts	
000126A0                            ; ===========================================================================
000126A0                            
000126A0                            loc_11A3C:
000126A0 117C 009A 0020             		move.b	#$9A,$20(a0)
000126A6 0868 0000 0022             		bchg	#0,$22(a0)
000126AC                            
000126AC                            Obj5F_Action:				; XREF: Obj5F_Index
000126AC 7000                       		moveq	#0,d0
000126AE 1028 0025                  		move.b	$25(a0),d0
000126B2 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000126B6 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000126BA 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000126C0 6100 8C3E                  		bsr.w	AnimateSprite
000126C4 6000 DC84                  		bra.w	MarkObjGone
000126C8                            ; ===========================================================================
000126C8 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000126CA 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000126CC 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000126CE                            ; ===========================================================================
000126CE                            
000126CE                            Obj5F_Walk:				; XREF: Obj5F_Index2
000126CE 6100 0000                  		bsr.w	Obj5F_ChkSonic
000126D2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000126D6 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000126D8 5428 0025                  		addq.b	#2,$25(a0)
000126DC 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000126E2 317C 0010 0010             		move.w	#$10,$10(a0)
000126E8 117C 0001 001C             		move.b	#1,$1C(a0)
000126EE 0868 0000 0022             		bchg	#0,$22(a0)
000126F4 6700                       		beq.s	locret_11A96
000126F6 4468 0010                  		neg.w	$10(a0)		; change direction
000126FA                            
000126FA                            locret_11A96:
000126FA 4E75                       		rts	
000126FC                            ; ===========================================================================
000126FC                            
000126FC                            Obj5F_Wait:				; XREF: Obj5F_Index2
000126FC 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012700 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012704 6B00                       		bmi.s	loc_11AA8
00012706 6000 BB66                  		bra.w	SpeedToPos
0001270A                            ; ===========================================================================
0001270A                            
0001270A                            loc_11AA8:
0001270A 5528 0025                  		subq.b	#2,$25(a0)
0001270E 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012714 4268 0010                  		clr.w	$10(a0)		; stop walking
00012718 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
0001271E 4E75                       		rts	
00012720                            ; ===========================================================================
00012720                            
00012720                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012720 5368 0030                  		subq.w	#1,$30(a0)
00012724 6A00                       		bpl.s	locret_11AD0
00012726 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
0001272A 117C 0000 0024             		move.b	#0,$24(a0)
00012730                            
00012730                            locret_11AD0:
00012730 4E75                       		rts	
00012732                            ; ===========================================================================
00012732                            
00012732                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012732 3038 D008                  		move.w	($FFFFD008).w,d0
00012736 9068 0008                  		sub.w	8(a0),d0
0001273A 6400                       		bcc.s	loc_11ADE
0001273C 4440                       		neg.w	d0
0001273E                            
0001273E                            loc_11ADE:
0001273E 0C40 0060                  		cmpi.w	#$60,d0
00012742 6400                       		bcc.s	locret_11B5E
00012744 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012748 9068 000C                  		sub.w	$C(a0),d0
0001274C 6400                       		bcc.s	Obj5F_MakeFuse
0001274E 4440                       		neg.w	d0
00012750                            
00012750                            Obj5F_MakeFuse:
00012750 0C40 0060                  		cmpi.w	#$60,d0
00012754 6400                       		bcc.s	locret_11B5E
00012756 4A78 FE08                  		tst.w	($FFFFFE08).w
0001275A 6600                       		bne.s	locret_11B5E
0001275C 117C 0004 0025             		move.b	#4,$25(a0)
00012762 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012768 4268 0010                  		clr.w	$10(a0)
0001276C 117C 0002 001C             		move.b	#2,$1C(a0)
00012772 6100 BFD0                  		bsr.w	SingleObjLoad2
00012776 6600                       		bne.s	locret_11B5E
00012778 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001277C 3368 0008 0008             		move.w	8(a0),8(a1)
00012782 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012788 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001278E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012794 137C 0004 0028             		move.b	#4,$28(a1)
0001279A 137C 0003 001C             		move.b	#3,$1C(a1)
000127A0 337C 0010 0012             		move.w	#$10,$12(a1)
000127A6 0828 0001 0022             		btst	#1,$22(a0)
000127AC 6700                       		beq.s	loc_11B54
000127AE 4469 0012                  		neg.w	$12(a1)
000127B2                            
000127B2                            loc_11B54:
000127B2 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000127B8 2348 003C                  		move.l	a0,$3C(a1)
000127BC                            
000127BC                            locret_11B5E:
000127BC 4E75                       		rts	
000127BE                            ; ===========================================================================
000127BE                            
000127BE                            Obj5F_Display:				; XREF: Obj5F_Index
000127BE 6100                       		bsr.s	loc_11B70
000127C0 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000127C6 6100 8B38                  		bsr.w	AnimateSprite
000127CA 6000 DB7E                  		bra.w	MarkObjGone
000127CE                            ; ===========================================================================
000127CE                            
000127CE                            loc_11B70:
000127CE 5368 0030                  		subq.w	#1,$30(a0)
000127D2 6B00                       		bmi.s	loc_11B7C
000127D4 6000 BA98                  		bra.w	SpeedToPos
000127D8                            ; ===========================================================================
000127D8                            
000127D8                            loc_11B7C:
000127D8 4268 0030                  		clr.w	$30(a0)
000127DC 4228 0024                  		clr.b	$24(a0)
000127E0 3168 0034 000C             		move.w	$34(a0),$C(a0)
000127E6 7203                       		moveq	#3,d1
000127E8 2248                       		movea.l	a0,a1
000127EA 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000127F0 6000                       		bra.s	Obj5F_MakeShrap
000127F2                            ; ===========================================================================
000127F2                            
000127F2                            Obj5F_Loop:
000127F2 6100 BF50                  		bsr.w	SingleObjLoad2
000127F6 6600                       		bne.s	loc_11BCE
000127F8                            
000127F8                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000127F8 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000127FC 3368 0008 0008             		move.w	8(a0),8(a1)
00012802 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012808 137C 0006 0028             		move.b	#6,$28(a1)
0001280E 137C 0004 001C             		move.b	#4,$1C(a1)
00012814 335A 0010                  		move.w	(a2)+,$10(a1)
00012818 335A 0012                  		move.w	(a2)+,$12(a1)
0001281C 137C 0098 0020             		move.b	#$98,$20(a1)
00012822 08E9 0007 0001             		bset	#7,1(a1)
00012828                            
00012828                            loc_11BCE:
00012828 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001282C                            
0001282C 117C 0006 0024             		move.b	#6,$24(a0)
00012832                            
00012832                            Obj5F_End:				; XREF: Obj5F_Index
00012832 7218                       		moveq	#$18,d1
00012834 6100 B9D8                  		bsr.w	ObjectFallCustom
00012838 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001283E 6100 8AC0                  		bsr.w	AnimateSprite
00012842 4A28 0001                  		tst.b	1(a0)
00012846 6A00 BA9C                  		bpl.w	DeleteObject
0001284A 6000 BA5C                  		bra.w	DisplaySprite
0001284E                            ; ===========================================================================
0001284E FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001285E                            
0001285E                            Ani_obj5F:
0001285E                            	include "_anim\obj5F.asm"
0001285E                            ; ---------------------------------------------------------------------------
0001285E                            ; Animation script - Bomb enemy
0001285E                            ; ---------------------------------------------------------------------------
0001285E 0000                       		dc.w byte_11C12-Ani_obj5F
00012860 0000                       		dc.w byte_11C16-Ani_obj5F
00012862 0000                       		dc.w byte_11C1C-Ani_obj5F
00012864 0000                       		dc.w byte_11C20-Ani_obj5F
00012866 0000                       		dc.w byte_11C24-Ani_obj5F
00012868 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
0001286C 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012872 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012876 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0001287A 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001287E                            		even
0001287E                            		even
0001287E                            
0001287E                            ; ---------------------------------------------------------------------------
0001287E                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001287E                            ; ---------------------------------------------------------------------------
0001287E                            Map_obj5F:
0001287E                            	include "_maps\obj5F.asm"
0001287E                            ; ---------------------------------------------------------------------------
0001287E                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001287E                            ; ---------------------------------------------------------------------------
0001287E 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012882 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012886 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001288A 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001288E 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012892 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012896 03                         byte_11C40:	dc.b 3
00012897 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001289C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000128A1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000128A6 03                         byte_11C50:	dc.b 3
000128A7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000128AC 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000128B1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000128B6 03                         byte_11C60:	dc.b 3
000128B7 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000128BC 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000128C1 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000128C6 03                         byte_11C70:	dc.b 3
000128C7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000128CC 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000128D1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000128D6 03                         byte_11C80:	dc.b 3
000128D7 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000128DC 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000128E1 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000128E6 03                         byte_11C90:	dc.b 3
000128E7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000128EC 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000128F1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000128F6 02                         byte_11CA0:	dc.b 2
000128F7 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000128FC 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012901 02                         byte_11CAB:	dc.b 2
00012902 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012907 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001290C 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
0001290D E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012912 01                         byte_11CBC:	dc.b 1			; fuse
00012913 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012918 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012919 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001291E 01                         byte_11CC8:	dc.b 1			; fireball
0001291F FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012924                            		even
00012924                            		even
00012924                            
00012924                            ; ===========================================================================
00012924                            ; ---------------------------------------------------------------------------
00012924                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012924                            ; ---------------------------------------------------------------------------
00012924                            
00012924                            Obj60:					; XREF: Obj_Index
00012924 7000                       		moveq	#0,d0
00012926 1028 0024                  		move.b	$24(a0),d0
0001292A 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
0001292E 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012932                            ; ===========================================================================
00012932 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012934 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012936 0000                       		dc.w Obj60_Display-Obj60_Index
00012938 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
0001293A 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
0001293C                            ; ===========================================================================
0001293C                            
0001293C                            Obj60_Main:				; XREF: Obj60_Index
0001293C 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012944 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0001294A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012950 6700                       		beq.s	loc_11D02
00012952 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012958                            
00012958                            loc_11D02:
00012958 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001295E 6600                       		bne.s	loc_11D10
00012960 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012966                            
00012966                            loc_11D10:
00012966 0028 0004 0001             		ori.b	#4,1(a0)
0001296C 117C 0004 0018             		move.b	#4,$18(a0)
00012972 117C 000B 0020             		move.b	#$B,$20(a0)
00012978 117C 000C 0019             		move.b	#$C,$19(a0)
0001297E 7400                       		moveq	#0,d2
00012980 45E8 0037                  		lea	$37(a0),a2
00012984 264A                       		movea.l	a2,a3
00012986 524A                       		addq.w	#1,a2
00012988 7203                       		moveq	#3,d1
0001298A                            
0001298A                            Obj60_MakeOrbs:
0001298A 6100 BDB8                  		bsr.w	SingleObjLoad2
0001298E 6600                       		bne.s	loc_11D90
00012990 5213                       		addq.b	#1,(a3)
00012992 3A09                       		move.w	a1,d5
00012994 0445 D000                  		subi.w	#-$3000,d5
00012998 EC4D                       		lsr.w	#6,d5
0001299A 0245 007F                  		andi.w	#$7F,d5
0001299E 14C5                       		move.b	d5,(a2)+
000129A0 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000129A2 137C 0006 0024             		move.b	#6,$24(a1)
000129A8 2368 0004 0004             		move.l	4(a0),4(a1)
000129AE 3368 0002 0002             		move.w	2(a0),2(a1)
000129B4 0029 0004 0001             		ori.b	#4,1(a1)
000129BA 137C 0004 0018             		move.b	#4,$18(a1)
000129C0 137C 0008 0019             		move.b	#8,$19(a1)
000129C6 137C 0003 001A             		move.b	#3,$1A(a1)
000129CC 137C 0098 0020             		move.b	#$98,$20(a1)
000129D2 1342 0026                  		move.b	d2,$26(a1)
000129D6 0602 0040                  		addi.b	#$40,d2
000129DA 2348 003C                  		move.l	a0,$3C(a1)
000129DE 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000129E2                            
000129E2                            loc_11D90:
000129E2 7001                       		moveq	#1,d0
000129E4 0828 0000 0022             		btst	#0,$22(a0)
000129EA 6700                       		beq.s	Obj60_Move
000129EC 4440                       		neg.w	d0
000129EE                            
000129EE                            Obj60_Move:
000129EE 1140 0036                  		move.b	d0,$36(a0)
000129F2 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000129F8 5428 0024                  		addq.b	#2,$24(a0)
000129FC 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012A02 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012A08 6700                       		beq.s	locret_11DBC	; if not, branch
00012A0A 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012A0E                            
00012A0E                            locret_11DBC:
00012A0E 4E75                       		rts	
00012A10                            ; ===========================================================================
00012A10                            
00012A10                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012A10 3038 D008                  		move.w	($FFFFD008).w,d0
00012A14 9068 0008                  		sub.w	8(a0),d0
00012A18 6400                       		bcc.s	loc_11DCA
00012A1A 4440                       		neg.w	d0
00012A1C                            
00012A1C                            loc_11DCA:
00012A1C 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012A20 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012A22 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012A26 9068 000C                  		sub.w	$C(a0),d0
00012A2A 6400                       		bcc.s	loc_11DDC
00012A2C 4440                       		neg.w	d0
00012A2E                            
00012A2E                            loc_11DDC:
00012A2E 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012A32 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012A34 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012A38 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012A3A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012A40                            
00012A40                            Obj60_Animate:
00012A40 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012A46 6100 88B8                  		bsr.w	AnimateSprite
00012A4A 6000 0000                  		bra.w	Obj60_ChkDel
00012A4E                            ; ===========================================================================
00012A4E                            
00012A4E                            Obj60_Display:				; XREF: Obj60_Index
00012A4E 6100 B81E                  		bsr.w	SpeedToPos
00012A52                            
00012A52                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012A52 3028 0008                  		move.w	8(a0),d0
00012A56 0240 FF80                  		andi.w	#$FF80,d0
00012A5A 3238 F700                  		move.w	($FFFFF700).w,d1
00012A5E 0441 0080                  		subi.w	#$80,d1
00012A62 0241 FF80                  		andi.w	#$FF80,d1
00012A66 9041                       		sub.w	d1,d0
00012A68 0C40 0280                  		cmpi.w	#$280,d0
00012A6C 6200 0000                  		bhi.w	Obj60_ChkGone
00012A70 6000 B836                  		bra.w	DisplaySprite
00012A74                            ; ===========================================================================
00012A74                            
00012A74                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012A74 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012A78 7000                       		moveq	#0,d0
00012A7A 1028 0023                  		move.b	$23(a0),d0
00012A7E 6700                       		beq.s	loc_11E34
00012A80 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012A86                            
00012A86                            loc_11E34:
00012A86 45E8 0037                  		lea	$37(a0),a2
00012A8A 7400                       		moveq	#0,d2
00012A8C 141A                       		move.b	(a2)+,d2
00012A8E 5342                       		subq.w	#1,d2
00012A90 6500                       		bcs.s	Obj60_Delete
00012A92                            
00012A92                            loc_11E40:
00012A92 7000                       		moveq	#0,d0
00012A94 101A                       		move.b	(a2)+,d0
00012A96 ED48                       		lsl.w	#6,d0
00012A98 0680 00FF D000             		addi.l	#$FFD000,d0
00012A9E 2240                       		movea.l	d0,a1
00012AA0 6100 B844                  		bsr.w	DeleteObject2
00012AA4 51CA FFEC                  		dbf	d2,loc_11E40
00012AA8                            
00012AA8                            Obj60_Delete:
00012AA8 6000 B83A                  		bra.w	DeleteObject
00012AAC                            ; ===========================================================================
00012AAC                            
00012AAC                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012AAC 2268 003C                  		movea.l	$3C(a0),a1
00012AB0 0C11 0060                  		cmpi.b	#$60,0(a1)
00012AB4 6600 B82E                  		bne.w	DeleteObject
00012AB8 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012ABE 6600                       		bne.s	Obj60_Circle
00012AC0 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012AC6 6600                       		bne.s	Obj60_Circle
00012AC8 5428 0024                  		addq.b	#2,$24(a0)
00012ACC 5329 0037                  		subq.b	#1,$37(a1)
00012AD0 6600                       		bne.s	Obj60_FireOrb
00012AD2 5429 0024                  		addq.b	#2,$24(a1)
00012AD6                            
00012AD6                            Obj60_FireOrb:
00012AD6 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012ADC 0829 0000 0022             		btst	#0,$22(a1)
00012AE2 6700                       		beq.s	Obj60_Display2
00012AE4 4468 0010                  		neg.w	$10(a0)
00012AE8                            
00012AE8                            Obj60_Display2:
00012AE8 6000 B7BE                  		bra.w	DisplaySprite
00012AEC                            ; ===========================================================================
00012AEC                            
00012AEC                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012AEC 1028 0026                  		move.b	$26(a0),d0
00012AF0 4EB9 0000 2D86             		jsr	(CalcSine).l
00012AF6 E841                       		asr.w	#4,d1
00012AF8 D269 0008                  		add.w	8(a1),d1
00012AFC 3141 0008                  		move.w	d1,8(a0)
00012B00 E840                       		asr.w	#4,d0
00012B02 D069 000C                  		add.w	$C(a1),d0
00012B06 3140 000C                  		move.w	d0,$C(a0)
00012B0A 1029 0036                  		move.b	$36(a1),d0
00012B0E D128 0026                  		add.b	d0,$26(a0)
00012B12 6000 B794                  		bra.w	DisplaySprite
00012B16                            ; ===========================================================================
00012B16                            
00012B16                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012B16 4A28 0001                  		tst.b	1(a0)
00012B1A 6A00 B7C8                  		bpl.w	DeleteObject
00012B1E 6100 B74E                  		bsr.w	SpeedToPos
00012B22 6000 B784                  		bra.w	DisplaySprite
00012B26                            ; ===========================================================================
00012B26                            Ani_obj60:
00012B26                            	include "_anim\obj60.asm"
00012B26                            ; ---------------------------------------------------------------------------
00012B26                            ; Animation script - Orbinaut enemy
00012B26                            ; ---------------------------------------------------------------------------
00012B26 0000                       		dc.w byte_11EDA-Ani_obj60
00012B28 0000                       		dc.w byte_11EDE-Ani_obj60
00012B2A 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012B2E 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012B34                            		even
00012B34                            		even
00012B34                            
00012B34                            ; ---------------------------------------------------------------------------
00012B34                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012B34                            ; ---------------------------------------------------------------------------
00012B34                            Map_obj60:
00012B34                            	include "_maps\obj60.asm"
00012B34                            ; ---------------------------------------------------------------------------
00012B34                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012B34                            ; ---------------------------------------------------------------------------
00012B34 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012B38 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012B3C 01                         byte_11EEC:	dc.b 1
00012B3D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012B42 01                         byte_11EF2:	dc.b 1
00012B43 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012B48 01                         byte_11EF8:	dc.b 1
00012B49 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012B4E 01                         byte_11EFE:	dc.b 1
00012B4F F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012B54                            		even
00012B54                            		even
00012B54                            
00012B54                            ; ===========================================================================
00012B54                            ; ---------------------------------------------------------------------------
00012B54                            ; Object 16 - harpoon (LZ)
00012B54                            ; ---------------------------------------------------------------------------
00012B54                            
00012B54                            Obj16:					; XREF: Obj_Index
00012B54 7000                       		moveq	#0,d0
00012B56 1028 0024                  		move.b	$24(a0),d0
00012B5A 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012B5E 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012B62                            ; ===========================================================================
00012B62 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012B64 0000                       		dc.w Obj16_Move-Obj16_Index
00012B66 0000                       		dc.w Obj16_Wait-Obj16_Index
00012B68                            ; ===========================================================================
00012B68                            
00012B68                            Obj16_Main:				; XREF: Obj16_Index
00012B68 5428 0024                  		addq.b	#2,$24(a0)
00012B6C 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012B74 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012B7A 0028 0004 0001             		ori.b	#4,1(a0)
00012B80 117C 0004 0018             		move.b	#4,$18(a0)
00012B86 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012B8C 117C 0014 0019             		move.b	#$14,$19(a0)
00012B92 317C 003C 0030             		move.w	#60,$30(a0)
00012B98                            
00012B98                            Obj16_Move:				; XREF: Obj16_Index
00012B98 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012B9E 6100 8760                  		bsr.w	AnimateSprite
00012BA2 7000                       		moveq	#0,d0
00012BA4 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012BA8 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012BAE 6000 D79A                  		bra.w	MarkObjGone
00012BB2                            ; ===========================================================================
00012BB2 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012BB8                            ; ===========================================================================
00012BB8                            
00012BB8                            Obj16_Wait:				; XREF: Obj16_Index
00012BB8 5368 0030                  		subq.w	#1,$30(a0)
00012BBC 6A00                       		bpl.s	Obj16_ChkDel
00012BBE 317C 003C 0030             		move.w	#60,$30(a0)
00012BC4 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012BC8 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012BCE                            
00012BCE                            Obj16_ChkDel:
00012BCE 6000 D77A                  		bra.w	MarkObjGone
00012BD2                            ; ===========================================================================
00012BD2                            Ani_obj16:
00012BD2                            	include "_anim\obj16.asm"
00012BD2                            ; ---------------------------------------------------------------------------
00012BD2                            ; Animation script - harpoon (LZ)
00012BD2                            ; ---------------------------------------------------------------------------
00012BD2 0000                       		dc.w byte_11F8A-Ani_obj16
00012BD4 0000                       		dc.w byte_11F8E-Ani_obj16
00012BD6 0000                       		dc.w byte_11F92-Ani_obj16
00012BD8 0000                       		dc.w byte_11F96-Ani_obj16
00012BDA 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012BDE 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012BE2 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012BE6 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012BEA                            		even
00012BEA                            		even
00012BEA                            
00012BEA                            ; ---------------------------------------------------------------------------
00012BEA                            ; Sprite mappings - harpoon (LZ)
00012BEA                            ; ---------------------------------------------------------------------------
00012BEA                            Map_obj16:
00012BEA                            	include "_maps\obj16.asm"
00012BEA                            ; ---------------------------------------------------------------------------
00012BEA                            ; Sprite mappings - harpoon (LZ)
00012BEA                            ; ---------------------------------------------------------------------------
00012BEA 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012BEE 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012BF2 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012BF6 01                         byte_11FA6:	dc.b 1
00012BF7 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012BFC 01                         byte_11FAC:	dc.b 1
00012BFD FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012C02 02                         byte_11FB2:	dc.b 2
00012C03 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012C08 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012C0D 01                         byte_11FBD:	dc.b 1
00012C0E F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012C13 01                         byte_11FC3:	dc.b 1
00012C14 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012C19 02                         byte_11FC9:	dc.b 2
00012C1A D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012C1F F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012C24                            		even
00012C24                            		even
00012C24                            
00012C24                            ; ===========================================================================
00012C24                            ; ---------------------------------------------------------------------------
00012C24                            ; Object 61 - blocks (LZ)
00012C24                            ; ---------------------------------------------------------------------------
00012C24                            
00012C24                            Obj61:					; XREF: Obj_Index
00012C24 7000                       		moveq	#0,d0
00012C26 1028 0024                  		move.b	$24(a0),d0
00012C2A 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012C2E 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012C32                            ; ===========================================================================
00012C32 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012C34 0000                       		dc.w Obj61_Action-Obj61_Index
00012C36                            
00012C36 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012C38 200C                       		dc.b $20, $C
00012C3A 1010                       		dc.b $10, $10
00012C3C 1010                       		dc.b $10, $10
00012C3E                            ; ===========================================================================
00012C3E                            
00012C3E                            Obj61_Main:				; XREF: Obj61_Index
00012C3E 5428 0024                  		addq.b	#2,$24(a0)
00012C42 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012C4A 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012C50 117C 0004 0001             		move.b	#4,1(a0)
00012C56 117C 0003 0018             		move.b	#3,$18(a0)
00012C5C 7000                       		moveq	#0,d0
00012C5E 1028 0028                  		move.b	$28(a0),d0
00012C62 E648                       		lsr.w	#3,d0
00012C64 0240 000E                  		andi.w	#$E,d0
00012C68 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012C6C 115A 0019                  		move.b	(a2)+,$19(a0)
00012C70 1152 0016                  		move.b	(a2),$16(a0)
00012C74 E248                       		lsr.w	#1,d0
00012C76 1140 001A                  		move.b	d0,$1A(a0)
00012C7A 3168 0008 0034             		move.w	8(a0),$34(a0)
00012C80 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012C86 1028 0028                  		move.b	$28(a0),d0
00012C8A 0200 000F                  		andi.b	#$F,d0
00012C8E 6700                       		beq.s	Obj61_Action
00012C90 0C00 0007                  		cmpi.b	#7,d0
00012C94 6700                       		beq.s	Obj61_Action
00012C96 117C 0001 0038             		move.b	#1,$38(a0)
00012C9C                            
00012C9C                            Obj61_Action:				; XREF: Obj61_Index
00012C9C 3F28 0008                  		move.w	8(a0),-(sp)
00012CA0 7000                       		moveq	#0,d0
00012CA2 1028 0028                  		move.b	$28(a0),d0
00012CA6 0240 000F                  		andi.w	#$F,d0
00012CAA D040                       		add.w	d0,d0
00012CAC 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012CB0 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012CB4 381F                       		move.w	(sp)+,d4
00012CB6 4A28 0001                  		tst.b	1(a0)
00012CBA 6A00                       		bpl.s	Obj61_ChkDel
00012CBC 7200                       		moveq	#0,d1
00012CBE 1228 0019                  		move.b	$19(a0),d1
00012CC2 0641 000B                  		addi.w	#$B,d1
00012CC6 7400                       		moveq	#0,d2
00012CC8 1428 0016                  		move.b	$16(a0),d2
00012CCC 3602                       		move.w	d2,d3
00012CCE 5243                       		addq.w	#1,d3
00012CD0 6100 D9A0                  		bsr.w	SolidObject
00012CD4 1144 003F                  		move.b	d4,$3F(a0)
00012CD8 6100 0000                  		bsr.w	loc_12180
00012CDC                            
00012CDC                            Obj61_ChkDel:
00012CDC 3028 0034                  		move.w	$34(a0),d0
00012CE0 0240 FF80                  		andi.w	#$FF80,d0
00012CE4 3238 F700                  		move.w	($FFFFF700).w,d1
00012CE8 0441 0080                  		subi.w	#$80,d1
00012CEC 0241 FF80                  		andi.w	#$FF80,d1
00012CF0 9041                       		sub.w	d1,d0
00012CF2 0C40 0280                  		cmpi.w	#$280,d0
00012CF6 6200 B5EC                  		bhi.w	DeleteObject
00012CFA 6000 B5AC                  		bra.w	DisplaySprite
00012CFE                            ; ===========================================================================
00012CFE 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012D02 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012D06 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012D0A 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012D0E                            ; ===========================================================================
00012D0E                            
00012D0E                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012D0E 4E75                       		rts	
00012D10                            ; ===========================================================================
00012D10                            
00012D10                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012D10 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012D14 6600                       		bne.s	loc_120D6	; if yes, branch
00012D16 0828 0003 0022             		btst	#3,$22(a0)
00012D1C 6700                       		beq.s	locret_120D4
00012D1E 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012D24                            
00012D24                            locret_120D4:
00012D24 4E75                       		rts	
00012D26                            ; ===========================================================================
00012D26                            
00012D26                            loc_120D6:
00012D26 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012D2A 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012D2C 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012D30 4228 0038                  		clr.b	$38(a0)
00012D34 4E75                       		rts	
00012D36                            ; ===========================================================================
00012D36                            
00012D36                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012D36 7208                       		moveq	#8,d1
00012D38 4EBA B4D4                  		jsr	ObjectFallCustom
00012D3C 6100 0000                  		bsr.w	ObjHitFloor
00012D40 4A41                       		tst.w	d1
00012D42 6A00 0000                  		bpl.w	locret_12106
00012D46 5241                       		addq.w	#1,d1
00012D48 D368 000C                  		add.w	d1,$C(a0)
00012D4C 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012D50 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012D54                            
00012D54                            locret_12106:
00012D54 4E75                       		rts	
00012D56                            ; ===========================================================================
00012D56                            
00012D56                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012D56 72F8                       		moveq	#-8,d1
00012D58 4EBA B4B4                  		jsr	ObjectFallCustom
00012D5C 6100 0000                  		bsr.w	ObjHitCeiling
00012D60 4A41                       		tst.w	d1
00012D62 6A00 0000                  		bpl.w	locret_12126
00012D66 9368 000C                  		sub.w	d1,$C(a0)
00012D6A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012D6E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012D72                            
00012D72                            locret_12126:
00012D72 4E75                       		rts	
00012D74                            ; ===========================================================================
00012D74                            
00012D74                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012D74 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012D7A 6600                       		bne.s	locret_12138	; if not, branch
00012D7C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012D80 4228 0038                  		clr.b	$38(a0)
00012D84                            
00012D84                            locret_12138:
00012D84 4E75                       		rts	
00012D86                            ; ===========================================================================
00012D86                            
00012D86                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012D86 3038 F646                  		move.w	($FFFFF646).w,d0
00012D8A 9068 000C                  		sub.w	$C(a0),d0
00012D8E 6700                       		beq.s	locret_1217E
00012D90 6400                       		bcc.s	loc_12162
00012D92 0C40 FFFE                  		cmpi.w	#-2,d0
00012D96 6C00                       		bge.s	loc_1214E
00012D98 70FE                       		moveq	#-2,d0
00012D9A                            
00012D9A                            loc_1214E:
00012D9A D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012D9E 6100 0000                  		bsr.w	ObjHitCeiling
00012DA2 4A41                       		tst.w	d1
00012DA4 6A00 0000                  		bpl.w	locret_12160
00012DA8 9368 000C                  		sub.w	d1,$C(a0)
00012DAC                            
00012DAC                            locret_12160:
00012DAC 4E75                       		rts	
00012DAE                            ; ===========================================================================
00012DAE                            
00012DAE                            loc_12162:				; XREF: Obj61_Type07
00012DAE 0C40 0002                  		cmpi.w	#2,d0
00012DB2 6F00                       		ble.s	loc_1216A
00012DB4 7002                       		moveq	#2,d0
00012DB6                            
00012DB6                            loc_1216A:
00012DB6 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012DBA 6100 0000                  		bsr.w	ObjHitFloor
00012DBE 4A41                       		tst.w	d1
00012DC0 6A00 0000                  		bpl.w	locret_1217E
00012DC4 5241                       		addq.w	#1,d1
00012DC6 D368 000C                  		add.w	d1,$C(a0)
00012DCA                            
00012DCA                            locret_1217E:
00012DCA 4E75                       		rts	
00012DCC                            ; ===========================================================================
00012DCC                            
00012DCC                            loc_12180:				; XREF: Obj61_Action
00012DCC 4A28 0038                  		tst.b	$38(a0)
00012DD0 6700                       		beq.s	locret_121C0
00012DD2 0828 0003 0022             		btst	#3,$22(a0)
00012DD8 6600                       		bne.s	loc_1219A
00012DDA 4A28 003E                  		tst.b	$3E(a0)
00012DDE 6700                       		beq.s	locret_121C0
00012DE0 5928 003E                  		subq.b	#4,$3E(a0)
00012DE4 6000                       		bra.s	loc_121A6
00012DE6                            ; ===========================================================================
00012DE6                            
00012DE6                            loc_1219A:
00012DE6 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012DEC 6700                       		beq.s	locret_121C0
00012DEE 5828 003E                  		addq.b	#4,$3E(a0)
00012DF2                            
00012DF2                            loc_121A6:
00012DF2 1028 003E                  		move.b	$3E(a0),d0
00012DF6 4EB9 0000 2D86             		jsr	(CalcSine).l
00012DFC 323C 0400                  		move.w	#$400,d1
00012E00 C1C1                       		muls.w	d1,d0
00012E02 4840                       		swap	d0
00012E04 D068 0030                  		add.w	$30(a0),d0
00012E08 3140 000C                  		move.w	d0,$C(a0)
00012E0C                            
00012E0C                            locret_121C0:
00012E0C 4E75                       		rts	
00012E0E                            ; ===========================================================================
00012E0E                            ; ---------------------------------------------------------------------------
00012E0E                            ; Sprite mappings - blocks (LZ)
00012E0E                            ; ---------------------------------------------------------------------------
00012E0E                            Map_obj61:
00012E0E                            	include "_maps\obj61.asm"
00012E0E                            ; ---------------------------------------------------------------------------
00012E0E                            ; Sprite mappings - blocks (LZ)
00012E0E                            ; ---------------------------------------------------------------------------
00012E0E 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012E12 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012E16 01                         byte_121CA:	dc.b 1
00012E17 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012E1C 02                         byte_121D0:	dc.b 2
00012E1D F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012E22 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012E27 01                         byte_121DB:	dc.b 1
00012E28 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012E2D 01                         byte_121E1:	dc.b 1
00012E2E F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012E34 00                         		even
00012E34 00                         		even
00012E34                            
00012E34                            ; ===========================================================================
00012E34                            ; ---------------------------------------------------------------------------
00012E34                            ; Object 62 - gargoyle head (LZ)
00012E34                            ; ---------------------------------------------------------------------------
00012E34                            
00012E34                            Obj62:					; XREF: Obj_Index
00012E34 7000                       		moveq	#0,d0
00012E36 1028 0024                  		move.b	$24(a0),d0
00012E3A 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012E3E 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012E42 6000 D506                  		bra.w	MarkObjGone
00012E46                            ; ===========================================================================
00012E46 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012E48 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012E4A 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012E4C 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012E4E                            
00012E4E 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012E56                            ; ===========================================================================
00012E56                            
00012E56                            Obj62_Main:				; XREF: Obj62_Index
00012E56 5428 0024                  		addq.b	#2,$24(a0)
00012E5A 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012E62 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012E68 0028 0004 0001             		ori.b	#4,1(a0)
00012E6E 117C 0003 0018             		move.b	#3,$18(a0)
00012E74 117C 0010 0019             		move.b	#$10,$19(a0)
00012E7A 1028 0028                  		move.b	$28(a0),d0	; get object type
00012E7E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012E82 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012E88 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012E8E 0228 000F 0028             		andi.b	#$F,$28(a0)
00012E94                            
00012E94                            Obj62_MakeFire:				; XREF: Obj62_Index
00012E94 5328 001E                  		subq.b	#1,$1E(a0)
00012E98 6600                       		bne.s	Obj62_NoFire
00012E9A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012EA0 6100 B680                  		bsr.w	ChkObjOnScreen
00012EA4 6600                       		bne.s	Obj62_NoFire
00012EA6 6100 B886                  		bsr.w	SingleObjLoad
00012EAA 6600                       		bne.s	Obj62_NoFire
00012EAC 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012EB0 5829 0024                  		addq.b	#4,$24(a1)
00012EB4 3368 0008 0008             		move.w	8(a0),8(a1)
00012EBA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012EC0 1368 0001 0001             		move.b	1(a0),1(a1)
00012EC6 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012ECC                            
00012ECC                            Obj62_NoFire:
00012ECC 4E75                       		rts	
00012ECE                            ; ===========================================================================
00012ECE                            
00012ECE                            Obj62_FireBall:				; XREF: Obj62_Index
00012ECE 5428 0024                  		addq.b	#2,$24(a0)
00012ED2 117C 0008 0016             		move.b	#8,$16(a0)
00012ED8 117C 0008 0017             		move.b	#8,$17(a0)
00012EDE 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012EE6 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012EEC 0028 0004 0001             		ori.b	#4,1(a0)
00012EF2 117C 0004 0018             		move.b	#4,$18(a0)
00012EF8 117C 0098 0020             		move.b	#$98,$20(a0)
00012EFE 117C 0008 0019             		move.b	#8,$19(a0)
00012F04 117C 0002 001A             		move.b	#2,$1A(a0)
00012F0A 5068 000C                  		addq.w	#8,$C(a0)
00012F0E 317C 0200 0010             		move.w	#$200,$10(a0)
00012F14 0828 0000 0022             		btst	#0,$22(a0)
00012F1A 6600                       		bne.s	Obj62_Sound
00012F1C 4468 0010                  		neg.w	$10(a0)
00012F20                            
00012F20                            Obj62_Sound:
00012F20 303C 00AE                  		move.w	#$AE,d0
00012F24 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012F2A                            
00012F2A                            Obj62_AniFire:				; XREF: Obj62_Index
00012F2A 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012F2E 0200 0007                  		andi.b	#7,d0
00012F32 6600                       		bne.s	Obj62_StopFire
00012F34 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012F3A                            
00012F3A                            Obj62_StopFire:
00012F3A 6100 B332                  		bsr.w	SpeedToPos
00012F3E 0828 0000 0022             		btst	#0,$22(a0)
00012F44 6600                       		bne.s	Obj62_StopFire2
00012F46 76F8                       		moveq	#-8,d3
00012F48 6100 0000                  		bsr.w	ObjHitWallLeft
00012F4C 4A41                       		tst.w	d1
00012F4E 6B00 B394                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012F52 4E75                       		rts	
00012F54                            ; ===========================================================================
00012F54                            
00012F54                            Obj62_StopFire2:
00012F54 7608                       		moveq	#8,d3
00012F56 6100 0000                  		bsr.w	ObjHitWallRight
00012F5A 4A41                       		tst.w	d1
00012F5C 6B00 B386                  		bmi.w	DeleteObject
00012F60 4E75                       		rts	
00012F62                            ; ===========================================================================
00012F62                            ; ---------------------------------------------------------------------------
00012F62                            ; Sprite mappings - gargoyle head (LZ)
00012F62                            ; ---------------------------------------------------------------------------
00012F62                            Map_obj62:
00012F62                            	include "_maps\obj62.asm"
00012F62                            ; ---------------------------------------------------------------------------
00012F62                            ; Sprite mappings - gargoyle head (LZ)
00012F62                            ; ---------------------------------------------------------------------------
00012F62 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012F66 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012F6A 03                         byte_12320:	dc.b 3
00012F6B F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012F70 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012F75 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012F7A 01                         byte_12330:	dc.b 1
00012F7B FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012F80 01                         byte_12336:	dc.b 1
00012F81 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012F86                            		even
00012F86                            		even
00012F86                            
00012F86                            ; ===========================================================================
00012F86                            ; ---------------------------------------------------------------------------
00012F86                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012F86                            ; ---------------------------------------------------------------------------
00012F86                            
00012F86                            Obj63:					; XREF: Obj_Index
00012F86 7000                       		moveq	#0,d0
00012F88 1028 0024                  		move.b	$24(a0),d0
00012F8C 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012F90 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012F94 3028 0030                  		move.w	$30(a0),d0
00012F98 0240 FF80                  		andi.w	#$FF80,d0
00012F9C 3238 F700                  		move.w	($FFFFF700).w,d1
00012FA0 0441 0080                  		subi.w	#$80,d1
00012FA4 0241 FF80                  		andi.w	#$FF80,d1
00012FA8 9041                       		sub.w	d1,d0
00012FAA 0C40 0280                  		cmpi.w	#$280,d0
00012FAE 6200                       		bhi.s	loc_1236A
00012FB0                            
00012FB0                            Obj63_Display:				; XREF: loc_1236A
00012FB0 6000 B2F6                  		bra.w	DisplaySprite
00012FB4                            ; ===========================================================================
00012FB4                            
00012FB4                            loc_1236A:				; XREF: Obj63
00012FB4 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012FBA 6600                       		bne.s	loc_12378
00012FBC 0C40 FF80                  		cmpi.w	#-$80,d0
00012FC0 64EE                       		bcc.s	Obj63_Display
00012FC2                            
00012FC2                            loc_12378:
00012FC2 1028 002F                  		move.b	$2F(a0),d0
00012FC6 6A00 B31C                  		bpl.w	DeleteObject
00012FCA 0240 007F                  		andi.w	#$7F,d0
00012FCE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012FD2 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012FD8 6000 B30A                  		bra.w	DeleteObject
00012FDC                            ; ===========================================================================
00012FDC 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012FDE 0000                       		dc.w loc_124B2-Obj63_Index
00012FE0 0000                       		dc.w loc_124C2-Obj63_Index
00012FE2 0000                       		dc.w loc_124DE-Obj63_Index
00012FE4                            ; ===========================================================================
00012FE4                            
00012FE4                            Obj63_Main:				; XREF: Obj63_Index
00012FE4 1028 0028                  		move.b	$28(a0),d0
00012FE8 6B00 0000                  		bmi.w	loc_12460
00012FEC 5428 0024                  		addq.b	#2,$24(a0)
00012FF0 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012FF8 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012FFE 0028 0004 0001             		ori.b	#4,1(a0)
00013004 117C 0010 0019             		move.b	#$10,$19(a0)
0001300A 117C 0004 0018             		move.b	#4,$18(a0)
00013010 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00013016 6600                       		bne.s	loc_123E2
00013018 5828 0024                  		addq.b	#4,$24(a0)
0001301C 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013022 117C 0001 0018             		move.b	#1,$18(a0)
00013028 6000 0000                  		bra.w	loc_124DE
0001302C                            ; ===========================================================================
0001302C                            
0001302C                            loc_123E2:
0001302C 117C 0004 001A             		move.b	#4,$1A(a0)
00013032 7000                       		moveq	#0,d0
00013034 1028 0028                  		move.b	$28(a0),d0
00013038 3200                       		move.w	d0,d1
0001303A E648                       		lsr.w	#3,d0
0001303C 0240 001E                  		andi.w	#$1E,d0
00013040 45FA 0000                  		lea	Obj63_Data(pc),a2
00013044 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013048 315A 0038                  		move.w	(a2)+,$38(a0)
0001304C 315A 0030                  		move.w	(a2)+,$30(a0)
00013050 214A 003C                  		move.l	a2,$3C(a0)
00013054 0241 000F                  		andi.w	#$F,d1
00013058 E549                       		lsl.w	#2,d1
0001305A 1141 0038                  		move.b	d1,$38(a0)
0001305E 117C 0004 003A             		move.b	#4,$3A(a0)
00013064 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013068 6700                       		beq.s	loc_1244C
0001306A 117C 0001 003B             		move.b	#1,$3B(a0)
00013070 4428 003A                  		neg.b	$3A(a0)
00013074 7200                       		moveq	#0,d1
00013076 1228 0038                  		move.b	$38(a0),d1
0001307A D228 003A                  		add.b	$3A(a0),d1
0001307E B228 0039                  		cmp.b	$39(a0),d1
00013082 6500                       		bcs.s	loc_12448
00013084 1001                       		move.b	d1,d0
00013086 7200                       		moveq	#0,d1
00013088 4A00                       		tst.b	d0
0001308A 6A00                       		bpl.s	loc_12448
0001308C 1228 0039                  		move.b	$39(a0),d1
00013090 5901                       		subq.b	#4,d1
00013092                            
00013092                            loc_12448:
00013092 1141 0038                  		move.b	d1,$38(a0)
00013096                            
00013096                            loc_1244C:
00013096 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001309C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000130A2 6100 0000                  		bsr.w	Obj63_ChangeDir
000130A6 6000 0000                  		bra.w	loc_124B2
000130AA                            ; ===========================================================================
000130AA                            
000130AA                            loc_12460:				; XREF: Obj63_Main
000130AA 1140 002F                  		move.b	d0,$2F(a0)
000130AE 0240 007F                  		andi.w	#$7F,d0
000130B2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000130B6 08F2 0000 0000             		bset	#0,(a2,d0.w)
000130BC 6600 B226                  		bne.w	DeleteObject
000130C0 D040                       		add.w	d0,d0
000130C2 0240 001E                  		andi.w	#$1E,d0
000130C6 45F9 0000 0000             		lea	(ObjPos_LZxpf_Index).l,a2
000130CC D4F2 0000                  		adda.w	(a2,d0.w),a2
000130D0 321A                       		move.w	(a2)+,d1
000130D2 2248                       		movea.l	a0,a1
000130D4 6000                       		bra.s	Obj63_MakePtfms
000130D6                            ; ===========================================================================
000130D6                            
000130D6                            Obj63_Loop:
000130D6 6100 B656                  		bsr.w	SingleObjLoad
000130DA 6600                       		bne.s	loc_124AA
000130DC                            
000130DC                            Obj63_MakePtfms:			; XREF: loc_12460
000130DC 12BC 0063                  		move.b	#$63,0(a1)
000130E0 335A 0008                  		move.w	(a2)+,8(a1)
000130E4 335A 000C                  		move.w	(a2)+,$C(a1)
000130E8 301A                       		move.w	(a2)+,d0
000130EA 1340 0028                  		move.b	d0,$28(a1)
000130EE                            
000130EE                            loc_124AA:
000130EE 51C9 FFE6                  		dbf	d1,Obj63_Loop
000130F2                            
000130F2 588F                       		addq.l	#4,sp
000130F4 4E75                       		rts	
000130F6                            ; ===========================================================================
000130F6                            
000130F6                            loc_124B2:				; XREF: Obj63_Index
000130F6 7200                       		moveq	#0,d1
000130F8 1228 0019                  		move.b	$19(a0),d1
000130FC 4EB9 0000 7ECE             		jsr	(PlatformObject).l
00013102 6000 0000                  		bra.w	sub_12502
00013106                            ; ===========================================================================
00013106                            
00013106                            loc_124C2:				; XREF: Obj63_Index
00013106 7200                       		moveq	#0,d1
00013108 1228 0019                  		move.b	$19(a0),d1
0001310C 4EB9 0000 8042             		jsr	(ExitPlatform).l
00013112 3F28 0008                  		move.w	8(a0),-(sp)
00013116 6100 0000                  		bsr.w	sub_12502
0001311A 341F                       		move.w	(sp)+,d2
0001311C 4EF9 0000 85AC             		jmp	(MvSonicOnPtfm2).l
00013122                            ; ===========================================================================
00013122                            
00013122                            loc_124DE:				; XREF: Obj63_Index
00013122 3038 FE04                  		move.w	($FFFFFE04).w,d0
00013126 0240 0003                  		andi.w	#3,d0
0001312A 6600                       		bne.s	loc_124FC
0001312C 7201                       		moveq	#1,d1
0001312E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013132 6700                       		beq.s	loc_124F2
00013134 4401                       		neg.b	d1
00013136                            
00013136                            loc_124F2:
00013136 D328 001A                  		add.b	d1,$1A(a0)
0001313A 0228 0003 001A             		andi.b	#3,$1A(a0)
00013140                            
00013140                            loc_124FC:
00013140 588F                       		addq.l	#4,sp
00013142 6000 D206                  		bra.w	MarkObjGone
00013146                            
00013146                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013146                            
00013146                            
00013146                            sub_12502:				; XREF: loc_124B2; loc_124C2
00013146 4A38 F7EE                  		tst.b	($FFFFF7EE).w
0001314A 6700                       		beq.s	loc_12520
0001314C 4A28 003B                  		tst.b	$3B(a0)
00013150 6600                       		bne.s	loc_12520
00013152 117C 0001 003B             		move.b	#1,$3B(a0)
00013158 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
0001315E 4428 003A                  		neg.b	$3A(a0)
00013162 6000                       		bra.s	loc_12534
00013164                            ; ===========================================================================
00013164                            
00013164                            loc_12520:
00013164 3028 0008                  		move.w	8(a0),d0
00013168 B068 0034                  		cmp.w	$34(a0),d0
0001316C 6600                       		bne.s	loc_1256A
0001316E 3028 000C                  		move.w	$C(a0),d0
00013172 B068 0036                  		cmp.w	$36(a0),d0
00013176 6600                       		bne.s	loc_1256A
00013178                            
00013178                            loc_12534:
00013178 7200                       		moveq	#0,d1
0001317A 1228 0038                  		move.b	$38(a0),d1
0001317E D228 003A                  		add.b	$3A(a0),d1
00013182 B228 0039                  		cmp.b	$39(a0),d1
00013186 6500                       		bcs.s	loc_12552
00013188 1001                       		move.b	d1,d0
0001318A 7200                       		moveq	#0,d1
0001318C 4A00                       		tst.b	d0
0001318E 6A00                       		bpl.s	loc_12552
00013190 1228 0039                  		move.b	$39(a0),d1
00013194 5901                       		subq.b	#4,d1
00013196                            
00013196                            loc_12552:
00013196 1141 0038                  		move.b	d1,$38(a0)
0001319A 2268 003C                  		movea.l	$3C(a0),a1
0001319E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000131A4 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000131AA 6100 0000                  		bsr.w	Obj63_ChangeDir
000131AE                            
000131AE                            loc_1256A:
000131AE 6100 B0BE                  		bsr.w	SpeedToPos
000131B2 4E75                       		rts	
000131B4                            ; End of function sub_12502
000131B4                            
000131B4                            
000131B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000131B4                            
000131B4                            
000131B4                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
000131B4 7000                       		moveq	#0,d0
000131B6 343C FF00                  		move.w	#-$100,d2
000131BA 3028 0008                  		move.w	8(a0),d0
000131BE 9068 0034                  		sub.w	$34(a0),d0
000131C2 6400                       		bcc.s	loc_12584
000131C4 4440                       		neg.w	d0
000131C6 4442                       		neg.w	d2
000131C8                            
000131C8                            loc_12584:
000131C8 7200                       		moveq	#0,d1
000131CA 363C FF00                  		move.w	#-$100,d3
000131CE 3228 000C                  		move.w	$C(a0),d1
000131D2 9268 0036                  		sub.w	$36(a0),d1
000131D6 6400                       		bcc.s	loc_12598
000131D8 4441                       		neg.w	d1
000131DA 4443                       		neg.w	d3
000131DC                            
000131DC                            loc_12598:
000131DC B240                       		cmp.w	d0,d1
000131DE 6500                       		bcs.s	loc_125C2
000131E0 3028 0008                  		move.w	8(a0),d0
000131E4 9068 0034                  		sub.w	$34(a0),d0
000131E8 6700                       		beq.s	loc_125AE
000131EA 48C0                       		ext.l	d0
000131EC E180                       		asl.l	#8,d0
000131EE 81C1                       		divs.w	d1,d0
000131F0 4440                       		neg.w	d0
000131F2                            
000131F2                            loc_125AE:
000131F2 3140 0010                  		move.w	d0,$10(a0)
000131F6 3143 0012                  		move.w	d3,$12(a0)
000131FA 4840                       		swap	d0
000131FC 3140 000A                  		move.w	d0,$A(a0)
00013200 4268 000E                  		clr.w	$E(a0)
00013204 4E75                       		rts	
00013206                            ; ===========================================================================
00013206                            
00013206                            loc_125C2:				; XREF: Obj63_ChangeDir
00013206 3228 000C                  		move.w	$C(a0),d1
0001320A 9268 0036                  		sub.w	$36(a0),d1
0001320E 6700                       		beq.s	loc_125D4
00013210 48C1                       		ext.l	d1
00013212 E181                       		asl.l	#8,d1
00013214 83C0                       		divs.w	d0,d1
00013216 4441                       		neg.w	d1
00013218                            
00013218                            loc_125D4:
00013218 3141 0012                  		move.w	d1,$12(a0)
0001321C 3142 0010                  		move.w	d2,$10(a0)
00013220 4841                       		swap	d1
00013222 3141 000E                  		move.w	d1,$E(a0)
00013226 4268 000A                  		clr.w	$A(a0)
0001322A 4E75                       		rts	
0001322C                            ; End of function Obj63_ChangeDir
0001322C                            
0001322C                            ; ===========================================================================
0001322C 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
0001322E 0000                       		dc.w word_12610-Obj63_Data
00013230 0000                       		dc.w word_12628-Obj63_Data
00013232 0000                       		dc.w word_1263C-Obj63_Data
00013234 0000                       		dc.w word_12650-Obj63_Data
00013236 0000                       		dc.w word_12668-Obj63_Data
00013238 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00013248 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013254 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013264 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001326C 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013280 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013294 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000132AC 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000132C0                            
000132C0                            ; ---------------------------------------------------------------------------
000132C0                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000132C0                            ; ---------------------------------------------------------------------------
000132C0                            Map_obj63:
000132C0                            	include "_maps\obj63.asm"
000132C0                            ; ---------------------------------------------------------------------------
000132C0                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000132C0                            ; ---------------------------------------------------------------------------
000132C0 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
000132C4 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
000132C8 0000                       		dc.w byte_1269E-Map_obj63
000132CA 01                         byte_12686:	dc.b 1
000132CB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000132D0 01                         byte_1268C:	dc.b 1
000132D1 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000132D6 01                         byte_12692:	dc.b 1
000132D7 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000132DC 01                         byte_12698:	dc.b 1
000132DD F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000132E2 01                         byte_1269E:	dc.b 1
000132E3 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000132E8                            		even
000132E8                            		even
000132E8                            
000132E8                            ; ===========================================================================
000132E8                            ; ---------------------------------------------------------------------------
000132E8                            ; Object 64 - bubbles (LZ)
000132E8                            ; ---------------------------------------------------------------------------
000132E8                            
000132E8                            Obj64:					; XREF: Obj_Index
000132E8 7000                       		moveq	#0,d0
000132EA 1028 0024                  		move.b	$24(a0),d0
000132EE 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000132F2 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000132F6                            ; ===========================================================================
000132F6 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000132F8 0000                       		dc.w Obj64_Animate-Obj64_Index
000132FA 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000132FC 0000                       		dc.w Obj64_Display2-Obj64_Index
000132FE 0000                       		dc.w Obj64_Delete3-Obj64_Index
00013300 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00013302                            ; ===========================================================================
00013302                            
00013302                            Obj64_Main:				; XREF: Obj64_Index
00013302 5428 0024                  		addq.b	#2,$24(a0)
00013306 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
0001330E 317C 8348 0002             		move.w	#$8348,2(a0)
00013314 117C 0084 0001             		move.b	#$84,1(a0)
0001331A 117C 0010 0019             		move.b	#$10,$19(a0)
00013320 117C 0001 0018             		move.b	#1,$18(a0)
00013326 1028 0028                  		move.b	$28(a0),d0	; get object type
0001332A 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
0001332C 5028 0024                  		addq.b	#8,$24(a0)
00013330 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00013334 1140 0032                  		move.b	d0,$32(a0)
00013338 1140 0033                  		move.b	d0,$33(a0)
0001333C 117C 0006 001C             		move.b	#6,$1C(a0)
00013342 6000 0000                  		bra.w	Obj64_BblMaker
00013346                            ; ===========================================================================
00013346                            
00013346                            Obj64_Bubble:				; XREF: Obj64_Main
00013346 1140 001C                  		move.b	d0,$1C(a0)
0001334A 3168 0008 0030             		move.w	8(a0),$30(a0)
00013350 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00013356 4EB9 0000 2D60             		jsr	(RandomNumber).l
0001335C 1140 0026                  		move.b	d0,$26(a0)
00013360                            
00013360                            Obj64_Animate:				; XREF: Obj64_Index
00013360 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013366 4EB9 0000 B300             		jsr	AnimateSprite
0001336C 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00013372 6600                       		bne.s	Obj64_ChkWater
00013374 117C 0001 002E             		move.b	#1,$2E(a0)
0001337A                            
0001337A                            Obj64_ChkWater:				; XREF: Obj64_Index
0001337A 3038 F646                  		move.w	($FFFFF646).w,d0
0001337E B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00013382 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00013384                            
00013384                            Obj64_Burst:				; XREF: Obj64_Wobble
00013384 117C 0006 0024             		move.b	#6,$24(a0)
0001338A 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
0001338E 6000 0000                  		bra.w	Obj64_Display2
00013392                            ; ===========================================================================
00013392                            
00013392                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00013392 1028 0026                  		move.b	$26(a0),d0
00013396 5228 0026                  		addq.b	#1,$26(a0)
0001339A 0240 007F                  		andi.w	#$7F,d0
0001339E 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000133A4 1031 0000                  		move.b	(a1,d0.w),d0
000133A8 4880                       		ext.w	d0
000133AA D068 0030                  		add.w	$30(a0),d0
000133AE 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000133B2 4A28 002E                  		tst.b	$2E(a0)
000133B6 6700                       		beq.s	Obj64_Display
000133B8 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000133BC 6700                       		beq.s	Obj64_Display	; if not, branch
000133BE                            
000133BE 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000133C2 303C 00AD                  		move.w	#$AD,d0
000133C6 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000133CC 43F8 D000                  		lea	($FFFFD000).w,a1
000133D0 4269 0010                  		clr.w	$10(a1)
000133D4 4269 0012                  		clr.w	$12(a1)
000133D8 4269 0014                  		clr.w	$14(a1)
000133DC 137C 0015 001C             		move.b	#$15,$1C(a1)
000133E2 337C 0023 003E             		move.w	#$23,$3E(a1)
000133E8 137C 0000 003C             		move.b	#0,$3C(a1)
000133EE 08A9 0005 0022             		bclr	#5,$22(a1)
000133F4 08A9 0004 0022             		bclr	#4,$22(a1)
000133FA 0829 0002 0022             		btst	#2,$22(a1)
00013400 6700 FF82                  		beq.w	Obj64_Burst
00013404 08A9 0002 0022             		bclr	#2,$22(a1)
0001340A 137C 0013 0016             		move.b	#$13,$16(a1)
00013410 137C 0009 0017             		move.b	#9,$17(a1)
00013416 5B69 000C                  		subq.w	#5,$C(a1)
0001341A 6000 FF68                  		bra.w	Obj64_Burst
0001341E                            ; ===========================================================================
0001341E                            
0001341E                            Obj64_Display:				; XREF: Obj64_Wobble
0001341E 6100 AE4E                  		bsr.w	SpeedToPos
00013422 4A28 0001                  		tst.b	1(a0)
00013426 6A00                       		bpl.s	Obj64_Delete
00013428 4EFA AE7E                  		jmp	DisplaySprite
0001342C                            ; ===========================================================================
0001342C                            
0001342C                            Obj64_Delete:
0001342C 4EFA AEB6                  		jmp	DeleteObject
00013430                            ; ===========================================================================
00013430                            
00013430                            Obj64_Display2:				; XREF: Obj64_Index
00013430 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013436 4EB9 0000 B300             		jsr	AnimateSprite
0001343C 4A28 0001                  		tst.b	1(a0)
00013440 6A00                       		bpl.s	Obj64_Delete2
00013442 4EFA AE64                  		jmp	DisplaySprite
00013446                            ; ===========================================================================
00013446                            
00013446                            Obj64_Delete2:
00013446 4EFA AE9C                  		jmp	DeleteObject
0001344A                            ; ===========================================================================
0001344A                            
0001344A                            Obj64_Delete3:				; XREF: Obj64_Index
0001344A 6000 AE98                  		bra.w	DeleteObject
0001344E                            ; ===========================================================================
0001344E                            
0001344E                            Obj64_BblMaker:				; XREF: Obj64_Index
0001344E 4A68 0036                  		tst.w	$36(a0)
00013452 6600                       		bne.s	loc_12874
00013454 3038 F646                  		move.w	($FFFFF646).w,d0
00013458 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
0001345C 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00013460 4A28 0001                  		tst.b	1(a0)
00013464 6A00 0000                  		bpl.w	Obj64_ChkDel
00013468 5368 0038                  		subq.w	#1,$38(a0)
0001346C 6A00 0000                  		bpl.w	loc_12914
00013470 317C 0001 0036             		move.w	#1,$36(a0)
00013476                            
00013476                            loc_1283A:
00013476 4EB9 0000 2D60             		jsr	(RandomNumber).l
0001347C 3200                       		move.w	d0,d1
0001347E 0240 0007                  		andi.w	#7,d0
00013482 0C40 0006                  		cmpi.w	#6,d0
00013486 64EE                       		bcc.s	loc_1283A
00013488                            
00013488 1140 0034                  		move.b	d0,$34(a0)
0001348C 0241 000C                  		andi.w	#$C,d1
00013490 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013496 D2C1                       		adda.w	d1,a1
00013498 2149 003C                  		move.l	a1,$3C(a0)
0001349C 5328 0032                  		subq.b	#1,$32(a0)
000134A0 6A00                       		bpl.s	loc_12872
000134A2 1168 0033 0032             		move.b	$33(a0),$32(a0)
000134A8 08E8 0007 0036             		bset	#7,$36(a0)
000134AE                            
000134AE                            loc_12872:
000134AE 6000                       		bra.s	loc_1287C
000134B0                            ; ===========================================================================
000134B0                            
000134B0                            loc_12874:				; XREF: Obj64_BblMaker
000134B0 5368 0038                  		subq.w	#1,$38(a0)
000134B4 6A00 0000                  		bpl.w	loc_12914
000134B8                            
000134B8                            loc_1287C:
000134B8 4EB9 0000 2D60             		jsr	(RandomNumber).l
000134BE 0240 001F                  		andi.w	#$1F,d0
000134C2 3140 0038                  		move.w	d0,$38(a0)
000134C6 6100 B266                  		bsr.w	SingleObjLoad
000134CA 6600                       		bne.s	loc_128F8
000134CC 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000134D0 3368 0008 0008             		move.w	8(a0),8(a1)
000134D6 4EB9 0000 2D60             		jsr	(RandomNumber).l
000134DC 0240 000F                  		andi.w	#$F,d0
000134E0 5140                       		subq.w	#8,d0
000134E2 D169 0008                  		add.w	d0,8(a1)
000134E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000134EC 7000                       		moveq	#0,d0
000134EE 1028 0034                  		move.b	$34(a0),d0
000134F2 2468 003C                  		movea.l	$3C(a0),a2
000134F6 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000134FC 0828 0007 0036             		btst	#7,$36(a0)
00013502 6700                       		beq.s	loc_128F8
00013504 4EB9 0000 2D60             		jsr	(RandomNumber).l
0001350A 0240 0003                  		andi.w	#3,d0
0001350E 6600                       		bne.s	loc_128E4
00013510 08E8 0006 0036             		bset	#6,$36(a0)
00013516 6600                       		bne.s	loc_128F8
00013518 137C 0002 0028             		move.b	#2,$28(a1)
0001351E                            
0001351E                            loc_128E4:
0001351E 4A28 0034                  		tst.b	$34(a0)
00013522 6600                       		bne.s	loc_128F8
00013524 08E8 0006 0036             		bset	#6,$36(a0)
0001352A 6600                       		bne.s	loc_128F8
0001352C 137C 0002 0028             		move.b	#2,$28(a1)
00013532                            
00013532                            loc_128F8:
00013532 5328 0034                  		subq.b	#1,$34(a0)
00013536 6A00                       		bpl.s	loc_12914
00013538 4EB9 0000 2D60             		jsr	(RandomNumber).l
0001353E 0240 007F                  		andi.w	#$7F,d0
00013542 0640 0080                  		addi.w	#$80,d0
00013546 D168 0038                  		add.w	d0,$38(a0)
0001354A 4268 0036                  		clr.w	$36(a0)
0001354E                            
0001354E                            loc_12914:
0001354E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013554 4EB9 0000 B300             		jsr	AnimateSprite
0001355A                            
0001355A                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
0001355A 3028 0008                  		move.w	8(a0),d0
0001355E 0240 FF80                  		andi.w	#$FF80,d0
00013562 3238 F700                  		move.w	($FFFFF700).w,d1
00013566 0441 0080                  		subi.w	#$80,d1
0001356A 0241 FF80                  		andi.w	#$FF80,d1
0001356E 9041                       		sub.w	d1,d0
00013570 0C40 0280                  		cmpi.w	#$280,d0
00013574 6200 AD6E                  		bhi.w	DeleteObject
00013578 3038 F646                  		move.w	($FFFFF646).w,d0
0001357C B068 000C                  		cmp.w	$C(a0),d0
00013580 6500 AD26                  		bcs.w	DisplaySprite
00013584 4E75                       		rts	
00013586                            ; ===========================================================================
00013586                            ; bubble production sequence
00013586                            
00013586                            ; 0 = small bubble, 1 =	large bubble
00013586                            
00013586 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013598                            
00013598                            ; ===========================================================================
00013598                            
00013598                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013598 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001359C 6B00                       		bmi.s	loc_12998
0001359E 43F8 D000                  		lea	($FFFFD000).w,a1
000135A2 3029 0008                  		move.w	8(a1),d0
000135A6 3228 0008                  		move.w	8(a0),d1
000135AA 0441 0010                  		subi.w	#$10,d1
000135AE B240                       		cmp.w	d0,d1
000135B0 6400                       		bcc.s	loc_12998
000135B2 0641 0020                  		addi.w	#$20,d1
000135B6 B240                       		cmp.w	d0,d1
000135B8 6500                       		bcs.s	loc_12998
000135BA 3029 000C                  		move.w	$C(a1),d0
000135BE 3228 000C                  		move.w	$C(a0),d1
000135C2 B240                       		cmp.w	d0,d1
000135C4 6400                       		bcc.s	loc_12998
000135C6 0641 0010                  		addi.w	#$10,d1
000135CA B240                       		cmp.w	d0,d1
000135CC 6500                       		bcs.s	loc_12998
000135CE 7001                       		moveq	#1,d0
000135D0 4E75                       		rts	
000135D2                            ; ===========================================================================
000135D2                            
000135D2                            loc_12998:
000135D2 7000                       		moveq	#0,d0
000135D4 4E75                       		rts	
000135D6                            ; ===========================================================================
000135D6                            Ani_obj64:
000135D6                            	include "_anim\obj64.asm"
000135D6                            ; ---------------------------------------------------------------------------
000135D6                            ; Animation script - bubbles (LZ)
000135D6                            ; ---------------------------------------------------------------------------
000135D6 0000                       		dc.w byte_129AA-Ani_obj64
000135D8 0000                       		dc.w byte_129B0-Ani_obj64
000135DA 0000                       		dc.w byte_129B6-Ani_obj64
000135DC 0000                       		dc.w byte_129BE-Ani_obj64
000135DE 0000                       		dc.w byte_129BE-Ani_obj64
000135E0 0000                       		dc.w byte_129C0-Ani_obj64
000135E2 0000                       		dc.w byte_129C6-Ani_obj64
000135E4 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000135EA 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000135F0 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000135F8 04FC                       byte_129BE:	dc.b 4,	$FC
000135FA 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00013600 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00013606 00                         		even
00013606 00                         		even
00013606                            
00013606                            ; ---------------------------------------------------------------------------
00013606                            ; Sprite mappings - bubbles (LZ)
00013606                            ; ---------------------------------------------------------------------------
00013606                            Map_obj64:
00013606                            	include "_maps\obj64.asm"
00013606                            ; ---------------------------------------------------------------------------
00013606                            ; Sprite mappings - bubbles (LZ)
00013606                            ; ---------------------------------------------------------------------------
00013606 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
0001360A 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
0001360E 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013612 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00013616 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
0001361A 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
0001361E 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013622 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00013626 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
0001362A 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
0001362E 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013632 0000                       		dc.w byte_12A9C-Map_obj64
00013634 01                         byte_129FA:	dc.b 1
00013635 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
0001363A 01                         byte_12A00:	dc.b 1
0001363B FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013640 01                         byte_12A06:	dc.b 1
00013641 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013646 01                         byte_12A0C:	dc.b 1
00013647 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
0001364C 01                         byte_12A12:	dc.b 1
0001364D F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013652 01                         byte_12A18:	dc.b 1
00013653 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013658 01                         byte_12A1E:	dc.b 1
00013659 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
0001365E 04                         byte_12A24:	dc.b 4
0001365F F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013664 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013669 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
0001366E 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013673 04                         byte_12A39:	dc.b 4
00013674 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013679 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
0001367E 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013683 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013688 01                         byte_12A4E:	dc.b 1
00013689 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
0001368E 01                         byte_12A54:	dc.b 1
0001368F F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013694 01                         byte_12A5A:	dc.b 1
00013695 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
0001369A 01                         byte_12A60:	dc.b 1
0001369B F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
000136A0 01                         byte_12A66:	dc.b 1
000136A1 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
000136A6 01                         byte_12A6C:	dc.b 1
000136A7 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
000136AC 01                         byte_12A72:	dc.b 1
000136AD F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
000136B2 01                         byte_12A78:	dc.b 1
000136B3 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000136B8 01                         byte_12A7E:	dc.b 1
000136B9 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000136BE 01                         byte_12A84:	dc.b 1
000136BF F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000136C4 01                         byte_12A8A:	dc.b 1
000136C5 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000136CA 01                         byte_12A90:	dc.b 1
000136CB F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000136D0 01                         byte_12A96:	dc.b 1
000136D1 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000136D6 00                         byte_12A9C:	dc.b 0
000136D8 00                         		even
000136D8 00                         		even
000136D8                            
000136D8                            ; ===========================================================================
000136D8                            ; ---------------------------------------------------------------------------
000136D8                            ; Object 65 - waterfalls (LZ)
000136D8                            ; ---------------------------------------------------------------------------
000136D8                            
000136D8                            Obj65:					; XREF: Obj_Index
000136D8 7000                       		moveq	#0,d0
000136DA 1028 0024                  		move.b	$24(a0),d0
000136DE 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000136E2 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000136E6                            ; ===========================================================================
000136E6 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000136E8 0000                       		dc.w Obj65_Animate-Obj65_Index
000136EA 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000136EC 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000136EE 0000                       		dc.w loc_12B36-Obj65_Index
000136F0                            ; ===========================================================================
000136F0                            
000136F0                            Obj65_Main:				; XREF: Obj65_Index
000136F0 5828 0024                  		addq.b	#4,$24(a0)
000136F4 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000136FC 317C 4259 0002             		move.w	#$4259,2(a0)
00013702 0028 0004 0001             		ori.b	#4,1(a0)
00013708 117C 0018 0019             		move.b	#$18,$19(a0)
0001370E 117C 0001 0018             		move.b	#1,$18(a0)
00013714 1028 0028                  		move.b	$28(a0),d0	; get object type
00013718 6A00                       		bpl.s	loc_12AE6
0001371A 08E8 0007 0002             		bset	#7,2(a0)
00013720                            
00013720                            loc_12AE6:
00013720 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013724 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013728 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
0001372C 6600                       		bne.s	Obj65_ChkDel	; if not, branch
0001372E 4228 0018                  		clr.b	$18(a0)
00013732 5528 0024                  		subq.b	#2,$24(a0)
00013736 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
0001373C 6700                       		beq.s	loc_12B0A	; if not, branch
0001373E 117C 0006 0024             		move.b	#6,$24(a0)
00013744                            
00013744                            loc_12B0A:
00013744 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
0001374A 6700                       		beq.s	Obj65_Animate	; if not, branch
0001374C 117C 0008 0024             		move.b	#8,$24(a0)
00013752                            
00013752                            Obj65_Animate:				; XREF: Obj65_Index
00013752 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013758 4EB9 0000 B300             		jsr	AnimateSprite
0001375E                            
0001375E                            Obj65_ChkDel:				; XREF: Obj65_Index
0001375E 6000 CBEA                  		bra.w	MarkObjGone
00013762                            ; ===========================================================================
00013762                            
00013762                            Obj65_FixHeight:			; XREF: Obj65_Index
00013762 3038 F646                  		move.w	($FFFFF646).w,d0
00013766 0440 0010                  		subi.w	#$10,d0
0001376A 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
0001376E 60E2                       		bra.s	Obj65_Animate
00013770                            ; ===========================================================================
00013770                            
00013770                            loc_12B36:				; XREF: Obj65_Index
00013770 08A8 0007 0002             		bclr	#7,2(a0)
00013776 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
0001377C 6600                       		bne.s	Obj65_Animate2
0001377E 08E8 0007 0002             		bset	#7,2(a0)
00013784                            
00013784                            Obj65_Animate2:
00013784 60CC                       		bra.s	Obj65_Animate
00013786                            ; ===========================================================================
00013786                            Ani_obj65:
00013786                            	include "_anim\obj65.asm"
00013786                            ; ---------------------------------------------------------------------------
00013786                            ; Animation script - waterfall (LZ)
00013786                            ; ---------------------------------------------------------------------------
00013786 0000                       		dc.w byte_12B4E-Ani_obj65
00013788 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001378E 00                         		even
0001378E 00                         		even
0001378E                            
0001378E                            ; ---------------------------------------------------------------------------
0001378E                            ; Sprite mappings - waterfalls (LZ)
0001378E                            ; ---------------------------------------------------------------------------
0001378E                            Map_obj65:
0001378E                            	include "_maps\obj65.asm"
0001378E                            ; ---------------------------------------------------------------------------
0001378E                            ; Sprite mappings - waterfalls (LZ)
0001378E                            ; ---------------------------------------------------------------------------
0001378E 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013792 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013796 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001379A 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
0001379E 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000137A2 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000137A6 01                         byte_12B6C:	dc.b 1
000137A7 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000137AC 02                         byte_12B72:	dc.b 2
000137AD F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000137B2 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000137B7 02                         byte_12B7D:	dc.b 2
000137B8 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000137BD 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000137C2 01                         byte_12B88:	dc.b 1
000137C3 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000137C8 02                         byte_12B8E:	dc.b 2
000137C9 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000137CE 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000137D3 01                         byte_12B99:	dc.b 1
000137D4 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000137D9 01                         byte_12B9F:	dc.b 1
000137DA F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000137DF 01                         byte_12BA5:	dc.b 1
000137E0 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000137E5 02                         byte_12BAB:	dc.b 2
000137E6 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000137EB 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000137F0 02                         byte_12BB6:	dc.b 2
000137F1 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000137F6 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000137FB 02                         byte_12BC1:	dc.b 2
000137FC F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013801 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013806 02                         byte_12BCC:	dc.b 2
00013807 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
0001380C F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013812 00                         		even
00013812 00                         		even
00013812                            
00013812                            ; ===========================================================================
00013812                            ; ---------------------------------------------------------------------------
00013812                            ; Object 01 - Sonic
00013812                            ; ---------------------------------------------------------------------------
00013812                            
00013812                            Obj01:					; XREF: Obj_Index
00013812 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013816 6700                       		beq.s	Obj01_Normal	; if not, branch
00013818 4EF9 0000 0000             		jmp	DebugMode
0001381E                            ; ===========================================================================
0001381E                            
0001381E                            Obj01_Normal:
0001381E 7000                       		moveq	#0,d0
00013820 1028 0024                  		move.b	$24(a0),d0
00013824 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013828 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
0001382C                            ; ===========================================================================
0001382C 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
0001382E 0000                       		dc.w Obj01_Control-Obj01_Index
00013830 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013832 0000                       		dc.w Obj01_Death-Obj01_Index
00013834 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013836                            ; ===========================================================================
00013836                            
00013836                            Player_Maps:
00013836 0000 0000                  	dc.l	Map_Sonic
0001383A 0000 0000                  	dc.l	Map_Sonic ; gronic
0001383E 0000 0000                  	dc.l	Map_Sonic ; anakama
00013842 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
00013846                            	; insert player mapping here
00013846                            	
00013846                            Obj01_Main:				; XREF: Obj01_Index
00013846 5428 0024                  		addq.b	#2,$24(a0)
0001384A 117C 0013 0016             		move.b	#$13,$16(a0)
00013850 117C 0009 0017             		move.b	#9,$17(a0)
00013856                            		
00013856 7000                       		moveq	#0,d0
00013858 1038 FFE8                  		move.b	(v_character),d0
0001385C E548                       		lsl.w	#2,d0
0001385E 43FA FFD6                  		lea 	Player_Maps(pc),a1
00013862 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
00013868                            		
00013868 317C 0780 0002             		move.w	#$780,2(a0)
0001386E 117C 0002 0018             		move.b	#2,$18(a0)
00013874 117C 0018 0019             		move.b	#$18,$19(a0)
0001387A 117C 0004 0001             		move.b	#4,1(a0)
00013880 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013886 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
0001388C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013892                            
00013892                            Obj01_Control:				; XREF: Obj01_Index
00013892 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013896 6700                       		beq.s	loc_12C58	; if not, branch
00013898 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
0001389E 6700                       		beq.s	loc_12C58	; if not, branch
000138A0 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000138A6 4238 F7CC                  		clr.b	($FFFFF7CC).w
000138AA 4E75                       		rts	
000138AC                            ; ===========================================================================
000138AC                            
000138AC                            loc_12C58:
000138AC 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000138B0 6600                       		bne.s	loc_12C64	; if yes, branch
000138B2 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000138B8                            
000138B8                            loc_12C64:
000138B8 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000138BE 6600                       		bne.s	loc_12C7E	; if yes, branch
000138C0 7000                       		moveq	#0,d0
000138C2 1028 0022                  		move.b	$22(a0),d0
000138C6 0240 0006                  		andi.w	#6,d0
000138CA 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000138CE 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000138D2                            
000138D2                            loc_12C7E:
000138D2 6100                       		bsr.s	Sonic_Display
000138D4 6100 0000                  		bsr.w	Sonic_RecordPos
000138D8 6100 0000                  		bsr.w	Sonic_Water
000138DC 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000138E2 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000138E8 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000138EC 6700                       		beq.s	loc_12CA6
000138EE 4A28 001C                  		tst.b	$1C(a0)
000138F2 6600                       		bne.s	loc_12CA6
000138F4 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000138FA                            
000138FA                            loc_12CA6:
000138FA 6100 0000                  		bsr.w	Sonic_Animate
000138FE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013902 6B00                       		bmi.s	loc_12CB6
00013904 4EB9 0000 0000             		jsr	TouchResponse
0001390A                            
0001390A                            loc_12CB6:
0001390A 6100 0000                  		bsr.w	Sonic_Loops
0001390E 6100 0000                  		bsr.w	LoadSonicDynPLC
00013912 4E75                       		rts	
00013914                            ; ===========================================================================
00013914 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013916 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00013918 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
0001391A 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
0001391C                            ; ---------------------------------------------------------------------------
0001391C                            ; Music	to play	after invincibility wears off
0001391C                            ; ---------------------------------------------------------------------------
0001391C                            ; ===========================================================================
0001391C                            
0001391C                            Sonic_Display:				; XREF: loc_12C7E
0001391C 3028 0030                  		move.w	$30(a0),d0
00013920 6700                       		beq.s	Obj01_Display
00013922 5368 0030                  		subq.w	#1,$30(a0)
00013926 E648                       		lsr.w	#3,d0
00013928 6400                       		bcc.s	Obj01_ChkInvin
0001392A                            
0001392A                            Obj01_Display:
0001392A 4EBA A97C                  		jsr	DisplaySprite
0001392E                            
0001392E                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
0001392E                             
0001392E                            Obj01_ChkInvin:
0001392E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013932 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013936 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
0001393A 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
0001393E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013942 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013946 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001394A 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
0001394E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013954 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013958 7000                       		moveq	#0,d0
0001395A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001395E                             
0001395E 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013964 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013966 43F9 0000 3DE8             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001396C 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001396E                             
0001396E                            Obj01_GetBgm2:
0001396E 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013974 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013976 43F9 0000 3DF0             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001397C 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001397E                             
0001397E                            Obj01_GetBgm3:
0001397E 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013984 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013986 43F9 0000 3DF8             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001398C 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001398E                             
0001398E                            Obj01_GetBgm4:
0001398E 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013994 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013996 43F9 0000 3E00             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001399C                             
0001399C                            Obj01_PlayMusic:
0001399C 1031 0000                  		move.b	(a1,d0.w),d0
000139A0 4EB9 0000 15E6             		jsr	(PlaySound).l	; play normal music
000139A6                             
000139A6                            ; NineKode ends here.
000139A6                            
000139A6                            Obj01_RmvInvin:
000139A6 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000139AC                            
000139AC                            Obj01_ChkShoes:
000139AC 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000139B0 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000139B2 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000139B6 6700                       		beq.s	Obj01_ExitChk
000139B8 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000139BC 6600                       		bne.s	Obj01_ExitChk
000139BE 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000139C4 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000139CA 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000139D0 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000139D6 303C 00E3                  		move.w	#$E3,d0
000139DA 4EF9 0000 15E6             		jmp	(PlaySound).l	; run music at normal speed
000139E0                            ; ===========================================================================
000139E0                            
000139E0                            Obj01_ExitChk:
000139E0 4E75                       		rts	
000139E2                            
000139E2                            ; ---------------------------------------------------------------------------
000139E2                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000139E2                            ; ---------------------------------------------------------------------------
000139E2                            
000139E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139E2                            
000139E2                            
000139E2                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000139E2 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000139E6 43F8 CB00                  		lea	($FFFFCB00).w,a1
000139EA 43F1 0000                  		lea	(a1,d0.w),a1
000139EE 32E8 0008                  		move.w	8(a0),(a1)+
000139F2 32E8 000C                  		move.w	$C(a0),(a1)+
000139F6 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000139FA 4E75                       		rts	
000139FC                            ; End of function Sonic_RecordPos
000139FC                            
000139FC                            ; ---------------------------------------------------------------------------
000139FC                            ; Subroutine for Sonic when he's underwater
000139FC                            ; ---------------------------------------------------------------------------
000139FC                            
000139FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139FC                            
000139FC                            
000139FC                            Sonic_Water:				; XREF: loc_12C7E
000139FC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013A02 6700                       		beq.s	Obj01_InWater	; if yes, branch
00013A04                            
00013A04                            locret_12D80:
00013A04 4E75                       		rts	
00013A06                            ; ===========================================================================
00013A06                            
00013A06                            Obj01_InWater:
00013A06 3038 F646                  		move.w	($FFFFF646).w,d0
00013A0A B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013A0E 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013A10 08E8 0006 0022             		bset	#6,$22(a0)
00013A16 66EC                       		bne.s	locret_12D80
00013A18 6100 0000                  		bsr.w	ResumeMusic
00013A1C 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013A22 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013A28 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013A2E 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013A34 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013A3A E0E8 0010                  		asr	$10(a0)
00013A3E E0E8 0012                  		asr	$12(a0)
00013A42 E0E8 0012                  		asr	$12(a0)
00013A46 67BC                       		beq.s	locret_12D80
00013A48 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013A4E 303C 00AA                  		move.w	#$AA,d0
00013A52 4EF9 0000 15EC             		jmp	(PlaySound_Special).l ;	play splash sound
00013A58                            ; ===========================================================================
00013A58                            
00013A58                            Obj01_OutWater:
00013A58 08A8 0006 0022             		bclr	#6,$22(a0)
00013A5E 67A4                       		beq.s	locret_12D80
00013A60 6100 0000                  		bsr.w	ResumeMusic
00013A64 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013A6A 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013A70 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013A76 E1E8 0012                  		asl	$12(a0)
00013A7A 6700 FF88                  		beq.w	locret_12D80
00013A7E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013A84 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013A8A 6E00                       		bgt.s	loc_12E0E
00013A8C 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013A92                            
00013A92                            loc_12E0E:
00013A92 303C 00AA                  		move.w	#$AA,d0
00013A96 4EF9 0000 15EC             		jmp	(PlaySound_Special).l ;	play splash sound
00013A9C                            ; End of function Sonic_Water
00013A9C                            
00013A9C                            ; ===========================================================================
00013A9C                            ; ---------------------------------------------------------------------------
00013A9C                            ; Modes	for controlling	Sonic
00013A9C                            ; ---------------------------------------------------------------------------
00013A9C                            
00013A9C                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013A9C 6100 0000                  		bsr.w	Sonic_Jump
00013AA0 6100 0000                  		bsr.w	Sonic_SlopeResist
00013AA4 6100 0000                  		bsr.w	Sonic_Move
00013AA8 6100 0000                  		bsr.w	Sonic_Roll
00013AAC 6100 0000                  		bsr.w	Sonic_LevelBound
00013AB0 4EBA A7BC                  		jsr	SpeedToPos
00013AB4 6100 0000                  		bsr.w	Sonic_AnglePos
00013AB8 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013ABC 4E75                       		rts	
00013ABE                            ; ===========================================================================
00013ABE                            
00013ABE                            Obj01_MdJump:				; XREF: Obj01_Modes
00013ABE 6100 0000                  		bsr.w	Sonic_JumpHeight
00013AC2 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013AC6 6100 0000                  		bsr.w	Sonic_LevelBound
00013ACA 4EBA A740                  		jsr	ObjectFall
00013ACE 0828 0006 0022             		btst	#6,$22(a0)
00013AD4 6700                       		beq.s	loc_12E5C
00013AD6 0468 0028 0012             		subi.w	#$28,$12(a0)
00013ADC                            
00013ADC                            loc_12E5C:
00013ADC 6100 0000                  		bsr.w	Sonic_JumpAngle
00013AE0 6100 0000                  		bsr.w	Sonic_Floor
00013AE4 4E75                       		rts	
00013AE6                            ; ===========================================================================
00013AE6                            
00013AE6                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013AE6 6100 0000                  		bsr.w	Sonic_Jump
00013AEA 6100 0000                  		bsr.w	Sonic_RollRepel
00013AEE 6100 0000                  		bsr.w	Sonic_RollSpeed
00013AF2 6100 0000                  		bsr.w	Sonic_LevelBound
00013AF6 4EBA A776                  		jsr	SpeedToPos
00013AFA 6100 0000                  		bsr.w	Sonic_AnglePos
00013AFE 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013B02 4E75                       		rts	
00013B04                            ; ===========================================================================
00013B04                            
00013B04                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013B04 6100 0000                  		bsr.w	Sonic_JumpHeight
00013B08 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013B0C 6100 0000                  		bsr.w	Sonic_LevelBound
00013B10 6100 0000                  		bsr.w	Sonic_AirUnroll
00013B14 4EBA A6F6                  		jsr	ObjectFall
00013B18 0828 0006 0022             		btst	#6,$22(a0)
00013B1E 6700                       		beq.s	loc_12EA6
00013B20 0468 0028 0012             		subi.w	#$28,$12(a0)
00013B26                            
00013B26                            loc_12EA6:
00013B26 6100 0000                  		bsr.w	Sonic_JumpAngle
00013B2A 6100 0000                  		bsr.w	Sonic_Floor
00013B2E 4E75                       		rts	
00013B30                            ; ---------------------------------------------------------------------------
00013B30                            ; Subroutine to	make Sonic walk/run
00013B30                            ; ---------------------------------------------------------------------------
00013B30                            
00013B30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B30                            
00013B30                            
00013B30                            Sonic_Move:				; XREF: Obj01_MdNormal
00013B30 3C38 F760                  		move.w	($FFFFF760).w,d6
00013B34 3A38 F762                  		move.w	($FFFFF762).w,d5
00013B38 3838 F764                  		move.w	($FFFFF764).w,d4
00013B3C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013B40 6600 0000                  		bne.w	loc_12FEE
00013B44 4A68 003E                  		tst.w	$3E(a0)
00013B48 6600 0000                  		bne.w	Obj01_ResetScr
00013B4C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013B52 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013B54 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B5A 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013B5C 6100 0000                  		bsr.w	Sonic_MoveLeft
00013B60                            
00013B60                            Obj01_NotLeft:
00013B60 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013B66 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013B68 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B6E 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013B70 6100 0000                  		bsr.w	Sonic_MoveLeft
00013B74 6000                       		bra.s	Obj01_NotRight
00013B76                            
00013B76                            Obj01_MoveRight:
00013B76 6100 0000                  		bsr.w	Sonic_MoveRight
00013B7A                            
00013B7A                            Obj01_NotRight:
00013B7A 1028 0026                  		move.b	$26(a0),d0
00013B7E 0600 0020                  		addi.b	#$20,d0
00013B82 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013B86 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013B8A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013B8E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013B92 08A8 0005 0022             		bclr	#5,$22(a0)
00013B98 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013B9E 0828 0003 0022             		btst	#3,$22(a0)
00013BA4 6700                       		beq.s	Sonic_Balance
00013BA6 7000                       		moveq	#0,d0
00013BA8 1028 003D                  		move.b	$3D(a0),d0
00013BAC ED48                       		lsl.w	#6,d0
00013BAE 43F8 D000                  		lea	($FFFFD000).w,a1
00013BB2 43F1 0000                  		lea	(a1,d0.w),a1
00013BB6 4A29 0022                  		tst.b	$22(a1)
00013BBA 6B00                       		bmi.s	Sonic_LookUp
00013BBC 7200                       		moveq	#0,d1
00013BBE 1229 0019                  		move.b	$19(a1),d1
00013BC2 3401                       		move.w	d1,d2
00013BC4 D442                       		add.w	d2,d2
00013BC6 5942                       		subq.w	#4,d2
00013BC8 D268 0008                  		add.w	8(a0),d1
00013BCC 9269 0008                  		sub.w	8(a1),d1
00013BD0 0C41 0004                  		cmpi.w	#4,d1
00013BD4 6D00                       		blt.s	loc_12F6A
00013BD6 B242                       		cmp.w	d2,d1
00013BD8 6C00                       		bge.s	loc_12F5A
00013BDA 6000                       		bra.s	Sonic_LookUp
00013BDC                            ; ===========================================================================
00013BDC                            
00013BDC                            Sonic_Balance:
00013BDC 4EB9 0000 0000             		jsr	ObjHitFloor
00013BE2 0C41 000C                  		cmpi.w	#$C,d1
00013BE6 6D00                       		blt.s	Sonic_LookUp
00013BE8 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013BEE 6600                       		bne.s	loc_12F62
00013BF0                            
00013BF0                            loc_12F5A:
00013BF0 08A8 0000 0022             		bclr	#0,$22(a0)
00013BF6 6000                       		bra.s	loc_12F70
00013BF8                            ; ===========================================================================
00013BF8                            
00013BF8                            loc_12F62:
00013BF8 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013BFE 6600                       		bne.s	Sonic_LookUp
00013C00                            
00013C00                            loc_12F6A:
00013C00 08E8 0000 0022             		bset	#0,$22(a0)
00013C06                            
00013C06                            loc_12F70:
00013C06 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013C0C 6000                       		bra.s	Obj01_ResetScr
00013C0E                            ; ===========================================================================
00013C0E                            
00013C0E                            Sonic_LookUp:
00013C0E 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013C14 6700                       		beq.s	Sonic_Duck	; if not, branch
00013C16 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013C1C 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013C22 6700                       		beq.s	loc_12FC2
00013C24 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013C28 6000                       		bra.s	loc_12FC2
00013C2A                            ; ===========================================================================
00013C2A                            
00013C2A                            Sonic_Duck:
00013C2A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013C30 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013C32 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013C38 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013C3E 6700                       		beq.s	loc_12FC2
00013C40 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013C44 6000                       		bra.s	loc_12FC2
00013C46                            ; ===========================================================================
00013C46                            
00013C46                            Obj01_ResetScr:
00013C46 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013C4C 6700                       		beq.s	loc_12FC2	; if yes, branch
00013C4E 6400                       		bcc.s	loc_12FBE
00013C50 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013C54                            
00013C54                            loc_12FBE:
00013C54 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013C58                            
00013C58                            loc_12FC2:
00013C58 1038 F602                  		move.b	($FFFFF602).w,d0
00013C5C 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013C60 6600                       		bne.s	loc_12FEE	; if yes, branch
00013C62 3028 0014                  		move.w	$14(a0),d0
00013C66 6700                       		beq.s	loc_12FEE
00013C68 6B00                       		bmi.s	loc_12FE2
00013C6A 9045                       		sub.w	d5,d0
00013C6C 6400                       		bcc.s	loc_12FDC
00013C6E 303C 0000                  		move.w	#0,d0
00013C72                            
00013C72                            loc_12FDC:
00013C72 3140 0014                  		move.w	d0,$14(a0)
00013C76 6000                       		bra.s	loc_12FEE
00013C78                            ; ===========================================================================
00013C78                            
00013C78                            loc_12FE2:
00013C78 D045                       		add.w	d5,d0
00013C7A 6400                       		bcc.s	loc_12FEA
00013C7C 303C 0000                  		move.w	#0,d0
00013C80                            
00013C80                            loc_12FEA:
00013C80 3140 0014                  		move.w	d0,$14(a0)
00013C84                            
00013C84                            loc_12FEE:
00013C84 1028 0026                  		move.b	$26(a0),d0
00013C88 4EB9 0000 2D86             		jsr	(CalcSine).l
00013C8E C3E8 0014                  		muls.w	$14(a0),d1
00013C92 E081                       		asr.l	#8,d1
00013C94 3141 0010                  		move.w	d1,$10(a0)
00013C98 C1E8 0014                  		muls.w	$14(a0),d0
00013C9C E080                       		asr.l	#8,d0
00013C9E 3140 0012                  		move.w	d0,$12(a0)
00013CA2                            
00013CA2                            loc_1300C:
00013CA2 1028 0026                  		move.b	$26(a0),d0
00013CA6 0600 0040                  		addi.b	#$40,d0
00013CAA 6B00                       		bmi.s	locret_1307C
00013CAC 123C 0040                  		move.b	#$40,d1
00013CB0 4A68 0014                  		tst.w	$14(a0)
00013CB4 6700                       		beq.s	locret_1307C
00013CB6 6B00                       		bmi.s	loc_13024
00013CB8 4441                       		neg.w	d1
00013CBA                            
00013CBA                            loc_13024:
00013CBA 1028 0026                  		move.b	$26(a0),d0
00013CBE D001                       		add.b	d1,d0
00013CC0 3F00                       		move.w	d0,-(sp)
00013CC2 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013CC6 301F                       		move.w	(sp)+,d0
00013CC8 4A41                       		tst.w	d1
00013CCA 6A00                       		bpl.s	locret_1307C
00013CCC E141                       		asl.w	#8,d1
00013CCE 0600 0020                  		addi.b	#$20,d0
00013CD2 0200 00C0                  		andi.b	#$C0,d0
00013CD6 6700                       		beq.s	loc_13078
00013CD8 0C00 0040                  		cmpi.b	#$40,d0
00013CDC 6700                       		beq.s	loc_13066
00013CDE 0C00 0080                  		cmpi.b	#$80,d0
00013CE2 6700                       		beq.s	loc_13060
00013CE4 D368 0010                  		add.w	d1,$10(a0)
00013CE8 08E8 0005 0022             		bset	#5,$22(a0)
00013CEE 317C 0000 0014             		move.w	#0,$14(a0)
00013CF4 4E75                       		rts	
00013CF6                            ; ===========================================================================
00013CF6                            
00013CF6                            loc_13060:
00013CF6 9368 0012                  		sub.w	d1,$12(a0)
00013CFA 4E75                       		rts	
00013CFC                            ; ===========================================================================
00013CFC                            
00013CFC                            loc_13066:
00013CFC 9368 0010                  		sub.w	d1,$10(a0)
00013D00 08E8 0005 0022             		bset	#5,$22(a0)
00013D06 317C 0000 0014             		move.w	#0,$14(a0)
00013D0C 4E75                       		rts	
00013D0E                            ; ===========================================================================
00013D0E                            
00013D0E                            loc_13078:
00013D0E D368 0012                  		add.w	d1,$12(a0)
00013D12                            
00013D12                            locret_1307C:
00013D12 4E75                       		rts	
00013D14                            ; End of function Sonic_Move
00013D14                            
00013D14                            
00013D14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D14                            
00013D14                            
00013D14                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013D14 3028 0014                  		move.w	$14(a0),d0
00013D18 6700                       		beq.s	loc_13086
00013D1A 6A00                       		bpl.s	loc_130B2
00013D1C                            
00013D1C                            loc_13086:
00013D1C 08E8 0000 0022             		bset	#0,$22(a0)
00013D22 6600                       		bne.s	loc_1309A
00013D24 08A8 0005 0022             		bclr	#5,$22(a0)
00013D2A 117C 0001 001D             		move.b	#1,$1D(a0)
00013D30                            
00013D30                            loc_1309A:
00013D30 9045                       		sub.w	d5,d0
00013D32 3206                       		move.w	d6,d1
00013D34 4441                       		neg.w	d1
00013D36 B041                       		cmp.w	d1,d0
00013D38 6E00                       		bgt.s	loc_130A6
00013D3A 3001                       		move.w	d1,d0
00013D3C                            
00013D3C                            loc_130A6:
00013D3C 3140 0014                  		move.w	d0,$14(a0)
00013D40 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013D46 4E75                       		rts	
00013D48                            ; ===========================================================================
00013D48                            
00013D48                            loc_130B2:				; XREF: Sonic_MoveLeft
00013D48 9044                       		sub.w	d4,d0
00013D4A 6400                       		bcc.s	loc_130BA
00013D4C 303C FF80                  		move.w	#-$80,d0
00013D50                            
00013D50                            loc_130BA:
00013D50 3140 0014                  		move.w	d0,$14(a0)
00013D54 1028 0026                  		move.b	$26(a0),d0
00013D58 0600 0020                  		addi.b	#$20,d0
00013D5C 0200 00C0                  		andi.b	#$C0,d0
00013D60 6600                       		bne.s	locret_130E8
00013D62 0C40 0400                  		cmpi.w	#$400,d0
00013D66 6D00                       		blt.s	locret_130E8
00013D68 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013D6E 08A8 0000 0022             		bclr	#0,$22(a0)
00013D74 303C 00A4                  		move.w	#$A4,d0
00013D78 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play stopping sound
00013D7E                            
00013D7E                            locret_130E8:
00013D7E 4E75                       		rts	
00013D80                            ; End of function Sonic_MoveLeft
00013D80                            
00013D80                            
00013D80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D80                            
00013D80                            
00013D80                            Sonic_MoveRight:			; XREF: Sonic_Move
00013D80 3028 0014                  		move.w	$14(a0),d0
00013D84 6B00                       		bmi.s	loc_13118
00013D86 08A8 0000 0022             		bclr	#0,$22(a0)
00013D8C 6700                       		beq.s	loc_13104
00013D8E 08A8 0005 0022             		bclr	#5,$22(a0)
00013D94 117C 0001 001D             		move.b	#1,$1D(a0)
00013D9A                            
00013D9A                            loc_13104:
00013D9A D045                       		add.w	d5,d0
00013D9C B046                       		cmp.w	d6,d0
00013D9E 6D00                       		blt.s	loc_1310C
00013DA0 3006                       		move.w	d6,d0
00013DA2                            
00013DA2                            loc_1310C:
00013DA2 3140 0014                  		move.w	d0,$14(a0)
00013DA6 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013DAC 4E75                       		rts	
00013DAE                            ; ===========================================================================
00013DAE                            
00013DAE                            loc_13118:				; XREF: Sonic_MoveRight
00013DAE D044                       		add.w	d4,d0
00013DB0 6400                       		bcc.s	loc_13120
00013DB2 303C 0080                  		move.w	#$80,d0
00013DB6                            
00013DB6                            loc_13120:
00013DB6 3140 0014                  		move.w	d0,$14(a0)
00013DBA 1028 0026                  		move.b	$26(a0),d0
00013DBE 0600 0020                  		addi.b	#$20,d0
00013DC2 0200 00C0                  		andi.b	#$C0,d0
00013DC6 6600                       		bne.s	locret_1314E
00013DC8 0C40 FC00                  		cmpi.w	#-$400,d0
00013DCC 6E00                       		bgt.s	locret_1314E
00013DCE 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013DD4 08E8 0000 0022             		bset	#0,$22(a0)
00013DDA 303C 00A4                  		move.w	#$A4,d0
00013DDE 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play stopping sound
00013DE4                            
00013DE4                            locret_1314E:
00013DE4 4E75                       		rts	
00013DE6                            ; End of function Sonic_MoveRight
00013DE6                            
00013DE6                            ; ---------------------------------------------------------------------------
00013DE6                            ; Subroutine to	change Sonic's speed as he rolls
00013DE6                            ; ---------------------------------------------------------------------------
00013DE6                            
00013DE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DE6                            
00013DE6                            
00013DE6                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013DE6 3C38 F760                  		move.w	($FFFFF760).w,d6
00013DEA E346                       		asl.w	#1,d6
00013DEC 3A38 F762                  		move.w	($FFFFF762).w,d5
00013DF0 E245                       		asr.w	#1,d5
00013DF2 3838 F764                  		move.w	($FFFFF764).w,d4
00013DF6 E444                       		asr.w	#2,d4
00013DF8 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013DFC 6600 0000                  		bne.w	loc_131CC
00013E00 4A68 003E                  		tst.w	$3E(a0)
00013E04 6600                       		bne.s	loc_13188
00013E06 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013E0C 6700                       		beq.s	loc_1317C	; if not, branch
00013E0E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013E14 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013E16 6100 0000                  		bsr.w	Sonic_RollLeft
00013E1A                            
00013E1A                            loc_1317C:
00013E1A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013E20 6700                       		beq.s	loc_13188	; if not, branch
00013E22 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013E28 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013E2A 6100 0000                  		bsr.w	Sonic_RollLeft
00013E2E 6000                       		bra.s	loc_13188
00013E30                            
00013E30                            SonicRS_RollRight:
00013E30 6100 0000                  		bsr.w	Sonic_RollRight
00013E34                            
00013E34                            loc_13188:
00013E34 3028 0014                  		move.w	$14(a0),d0
00013E38 6700                       		beq.s	loc_131AA
00013E3A 6B00                       		bmi.s	loc_1319E
00013E3C 9045                       		sub.w	d5,d0
00013E3E 6400                       		bcc.s	loc_13198
00013E40 303C 0000                  		move.w	#0,d0
00013E44                            
00013E44                            loc_13198:
00013E44 3140 0014                  		move.w	d0,$14(a0)
00013E48 6000                       		bra.s	loc_131AA
00013E4A                            ; ===========================================================================
00013E4A                            
00013E4A                            loc_1319E:				; XREF: Sonic_RollSpeed
00013E4A D045                       		add.w	d5,d0
00013E4C 6400                       		bcc.s	loc_131A6
00013E4E 303C 0000                  		move.w	#0,d0
00013E52                            
00013E52                            loc_131A6:
00013E52 3140 0014                  		move.w	d0,$14(a0)
00013E56                            
00013E56                            loc_131AA:
00013E56 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013E5A 6600                       		bne.s	loc_131CC	; if yes, branch
00013E5C 08A8 0002 0022             		bclr	#2,$22(a0)
00013E62 117C 0013 0016             		move.b	#$13,$16(a0)
00013E68 117C 0009 0017             		move.b	#9,$17(a0)
00013E6E 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013E74 5B68 000C                  		subq.w	#5,$C(a0)
00013E78                            
00013E78                            loc_131CC:
00013E78 1028 0026                  		move.b	$26(a0),d0
00013E7C 4EB9 0000 2D86             		jsr	(CalcSine).l
00013E82 C1E8 0014                  		muls.w	$14(a0),d0
00013E86 E080                       		asr.l	#8,d0
00013E88 3140 0012                  		move.w	d0,$12(a0)
00013E8C C3E8 0014                  		muls.w	$14(a0),d1
00013E90 E081                       		asr.l	#8,d1
00013E92 0C41 1000                  		cmpi.w	#$1000,d1
00013E96 6F00                       		ble.s	loc_131F0
00013E98 323C 1000                  		move.w	#$1000,d1
00013E9C                            
00013E9C                            loc_131F0:
00013E9C 0C41 F000                  		cmpi.w	#-$1000,d1
00013EA0 6C00                       		bge.s	loc_131FA
00013EA2 323C F000                  		move.w	#-$1000,d1
00013EA6                            
00013EA6                            loc_131FA:
00013EA6 3141 0010                  		move.w	d1,$10(a0)
00013EAA 6000 FDF6                  		bra.w	loc_1300C
00013EAE                            ; End of function Sonic_RollSpeed
00013EAE                            
00013EAE                            
00013EAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EAE                            
00013EAE                            
00013EAE                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013EAE 3028 0014                  		move.w	$14(a0),d0
00013EB2 6700                       		beq.s	loc_1320A
00013EB4 6A00                       		bpl.s	loc_13218
00013EB6                            
00013EB6                            loc_1320A:
00013EB6 08E8 0000 0022             		bset	#0,$22(a0)
00013EBC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013EC2 4E75                       		rts	
00013EC4                            ; ===========================================================================
00013EC4                            
00013EC4                            loc_13218:
00013EC4 9044                       		sub.w	d4,d0
00013EC6 6400                       		bcc.s	loc_13220
00013EC8 303C FF80                  		move.w	#-$80,d0
00013ECC                            
00013ECC                            loc_13220:
00013ECC 3140 0014                  		move.w	d0,$14(a0)
00013ED0 4E75                       		rts	
00013ED2                            ; End of function Sonic_RollLeft
00013ED2                            
00013ED2                            
00013ED2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ED2                            
00013ED2                            
00013ED2                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013ED2 3028 0014                  		move.w	$14(a0),d0
00013ED6 6B00                       		bmi.s	loc_1323A
00013ED8 08A8 0000 0022             		bclr	#0,$22(a0)
00013EDE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013EE4 4E75                       		rts	
00013EE6                            ; ===========================================================================
00013EE6                            
00013EE6                            loc_1323A:
00013EE6 D044                       		add.w	d4,d0
00013EE8 6400                       		bcc.s	loc_13242
00013EEA 303C 0080                  		move.w	#$80,d0
00013EEE                            
00013EEE                            loc_13242:
00013EEE 3140 0014                  		move.w	d0,$14(a0)
00013EF2 4E75                       		rts	
00013EF4                            ; End of function Sonic_RollRight
00013EF4                            
00013EF4                            Sonic_AirUnroll:
00013EF4                            		
00013EF4 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013EF8 6600                       		bne.s	@timer
00013EFA 1038 F605                  		move.b	($FFFFF605).w,d0
00013EFE 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013F02 6700                       		beq.s	@end	; if not, branch
00013F04 08A8 0002 0022             		bclr	#2,$22(a0)
00013F0A 117C 0013 0016             		move.b	#$13,$16(a0)
00013F10 117C 0009 0017             		move.b	#9,$17(a0)
00013F16 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013F1C 303C 00A5                  		move.w	#$A5,d0
00013F20 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play fart sound
00013F26 2028 0010                  		move.l	$10(a0),d0
00013F2A D080                       		add.l	d0,d0
00013F2C 2140 0010                  		move.l	d0,$10(a0)
00013F30 5B68 000C                  		subq.w	#5,$C(a0)
00013F34                            	@end:
00013F34 4E75                       		rts
00013F36                            	@timer:
00013F36 5328 003A                  		subq.b	#1,$3A(a0)
00013F3A 4E75                       		rts
00013F3C                            
00013F3C                            ; ---------------------------------------------------------------------------
00013F3C                            ; Subroutine to	change Sonic's direction while jumping
00013F3C                            ; ---------------------------------------------------------------------------
00013F3C                            
00013F3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F3C                            
00013F3C                            
00013F3C                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013F3C 3C38 F760                  		move.w	($FFFFF760).w,d6
00013F40 3A38 F762                  		move.w	($FFFFF762).w,d5
00013F44 E345                       		asl.w	#1,d5
00013F46 0828 0004 0022             		btst	#4,$22(a0)
00013F4C 6600                       		bne.s	Obj01_ResetScr2
00013F4E 3028 0010                  		move.w	$10(a0),d0
00013F52 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013F58 6700                       		beq.s	loc_13278	; if not, branch
00013F5A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013F60 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013F62 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013F66 6E00                       		bgt.s	loc_13278
00013F68 3001                       		move.w	d1,d0
00013F6A                            
00013F6A                            loc_13278:
00013F6A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013F70 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013F72 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013F78 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013F7A 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013F7E 6E00                       		bgt.s	Obj01_JumpMove
00013F80 3001                       		move.w	d1,d0
00013F82 6000                       		bra.s	Obj01_JumpMove
00013F84                            
00013F84                            SonicCJD_JumpLeft:
00013F84 08E8 0000 0022             		bset	#0,$22(a0)
00013F8A 9045                       		sub.w	d5,d0
00013F8C 3206                       		move.w	d6,d1
00013F8E 4441                       		neg.w	d1
00013F90 B041                       		cmp.w	d1,d0
00013F92                            		; bgt.s	loc_13278
00013F92                            		; move.w	d1,d0
00013F92 4E75                       		rts
00013F94                            
00013F94                            SonicCJD_JumpRight:
00013F94 08A8 0000 0022             		bclr	#0,$22(a0)
00013F9A D045                       		add.w	d5,d0
00013F9C B046                       		cmp.w	d6,d0
00013F9E 6D00                       		blt.s	Obj01_JumpMove
00013FA0 3006                       		move.w	d6,d0
00013FA2                            
00013FA2                            Obj01_JumpMove:
00013FA2 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013FA6                            
00013FA6                            Obj01_ResetScr2:
00013FA6 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013FAC 6700                       		beq.s	loc_132A4	; if yes, branch
00013FAE 6400                       		bcc.s	loc_132A0
00013FB0 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013FB4                            
00013FB4                            loc_132A0:
00013FB4 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013FB8                            
00013FB8                            loc_132A4:
00013FB8 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013FBE 6500                       		bcs.s	locret_132D2	; if yes, branch
00013FC0 3028 0010                  		move.w	$10(a0),d0
00013FC4 3200                       		move.w	d0,d1
00013FC6 EA41                       		asr.w	#5,d1
00013FC8 6700                       		beq.s	locret_132D2
00013FCA 6B00                       		bmi.s	loc_132C6
00013FCC 9041                       		sub.w	d1,d0
00013FCE 6400                       		bcc.s	loc_132C0
00013FD0 303C 0000                  		move.w	#0,d0
00013FD4                            
00013FD4                            loc_132C0:
00013FD4 3140 0010                  		move.w	d0,$10(a0)
00013FD8 4E75                       		rts	
00013FDA                            ; ===========================================================================
00013FDA                            
00013FDA                            loc_132C6:
00013FDA 9041                       		sub.w	d1,d0
00013FDC 6500                       		bcs.s	loc_132CE
00013FDE 303C 0000                  		move.w	#0,d0
00013FE2                            
00013FE2                            loc_132CE:
00013FE2 3140 0010                  		move.w	d0,$10(a0)
00013FE6                            
00013FE6                            locret_132D2:
00013FE6 4E75                       		rts	
00013FE8                            ; End of function Sonic_ChgJumpDir
00013FE8                            
00013FE8                            ; ===========================================================================
00013FE8                            ; ---------------------------------------------------------------------------
00013FE8                            ; Unused subroutine to squash Sonic
00013FE8                            ; ---------------------------------------------------------------------------
00013FE8 1028 0026                  		move.b	$26(a0),d0
00013FEC 0600 0020                  		addi.b	#$20,d0
00013FF0 0200 00C0                  		andi.b	#$C0,d0
00013FF4 6600                       		bne.s	locret_13302
00013FF6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013FFA 4A41                       		tst.w	d1
00013FFC 6A00                       		bpl.s	locret_13302
00013FFE 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00014004 317C 0000 0010             		move.w	#0,$10(a0)
0001400A 317C 0000 0012             		move.w	#0,$12(a0)
00014010 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00014016                            
00014016                            locret_13302:
00014016 4E75                       		rts	
00014018                            ; ---------------------------------------------------------------------------
00014018                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00014018                            ; ---------------------------------------------------------------------------
00014018                            
00014018                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014018                            
00014018                            
00014018                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00014018 2228 0008                  		move.l	8(a0),d1
0001401C 3028 0010                  		move.w	$10(a0),d0
00014020 48C0                       		ext.l	d0
00014022 E180                       		asl.l	#8,d0
00014024 D280                       		add.l	d0,d1
00014026 4841                       		swap	d1
00014028 3038 F728                  		move.w	($FFFFF728).w,d0
0001402C 0640 0010                  		addi.w	#$10,d0
00014030 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014032 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00014034 3038 F72A                  		move.w	($FFFFF72A).w,d0
00014038 0640 0128                  		addi.w	#$128,d0
0001403C 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00014040 6600                       		bne.s	loc_13332
00014042 0640 0040                  		addi.w	#$40,d0
00014046                            
00014046                            loc_13332:
00014046 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014048 6300                       		bls.s	Boundary_Sides	; if yes, branch
0001404A                            
0001404A                            loc_13336:
0001404A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001404E 0640 00E0                  		addi.w	#$E0,d0
00014052 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00014056 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00014058 4E75                       		rts	
0001405A                            ; ===========================================================================
0001405A                            
0001405A                            Boundary_Bottom:
0001405A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00014060 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00014064 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
0001406A 6500 0000                  		bcs.w	KillSonic
0001406E 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00014072 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014078 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
0001407E 4E75                       		rts	
00014080                            ; ===========================================================================
00014080                            
00014080                            Boundary_Sides:
00014080 3140 0008                  		move.w	d0,8(a0)
00014084 317C 0000 000A             		move.w	#0,$A(a0)
0001408A 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00014090 317C 0000 0014             		move.w	#0,$14(a0)
00014096 60B2                       		bra.s	loc_13336
00014098                            ; End of function Sonic_LevelBound
00014098                            
00014098                            ; ---------------------------------------------------------------------------
00014098                            ; Subroutine allowing Sonic to roll when he's moving
00014098                            ; ---------------------------------------------------------------------------
00014098                            
00014098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014098                            
00014098                            
00014098                            Sonic_Roll:				; XREF: Obj01_MdNormal
00014098 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001409C 6600                       		bne.s	Obj01_NoRoll
0001409E 3028 0014                  		move.w	$14(a0),d0
000140A2 6A00                       		bpl.s	loc_13392
000140A4 4440                       		neg.w	d0
000140A6                            
000140A6                            loc_13392:
000140A6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
000140AA 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
000140AC 1038 F602                  		move.b	($FFFFF602).w,d0
000140B0 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
000140B4 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
000140B6 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000140BC 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
000140BE                            
000140BE                            Obj01_NoRoll:
000140BE 4E75                       		rts	
000140C0                            ; ===========================================================================
000140C0                            
000140C0                            Obj01_ChkRoll:
000140C0 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
000140C6 6700                       		beq.s	Obj01_DoRoll	; if not, branch
000140C8 4E75                       		rts	
000140CA                            ; ===========================================================================
000140CA                            
000140CA                            Obj01_DoRoll:
000140CA 08E8 0002 0022             		bset	#2,$22(a0)
000140D0 117C 000E 0016             		move.b	#$E,$16(a0)
000140D6 117C 0007 0017             		move.b	#7,$17(a0)
000140DC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000140E2 5A68 000C                  		addq.w	#5,$C(a0)
000140E6 303C 00BE                  		move.w	#$BE,d0
000140EA 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play rolling sound
000140F0 4A68 0014                  		tst.w	$14(a0)
000140F4 6600                       		bne.s	locret_133E8
000140F6 317C 0200 0014             		move.w	#$200,$14(a0)
000140FC                            
000140FC                            locret_133E8:
000140FC 4E75                       		rts	
000140FE                            ; End of function Sonic_Roll
000140FE                            
000140FE                            ; ---------------------------------------------------------------------------
000140FE                            ; Subroutine allowing Sonic to jump
000140FE                            ; ---------------------------------------------------------------------------
000140FE                            
000140FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140FE                            
000140FE                            
000140FE                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000140FE 1038 F603                  		move.b	($FFFFF603).w,d0
00014102 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00014106 6700 0000                  		beq.w	locret_1348E	; if not, branch
0001410A 7000                       		moveq	#0,d0
0001410C 1028 0026                  		move.b	$26(a0),d0
00014110 0600 0080                  		addi.b	#$80,d0
00014114 6100 0000                  		bsr.w	sub_14D48
00014118 0C41 0006                  		cmpi.w	#6,d1
0001411C 6D00 0000                  		blt.w	locret_1348E
00014120 343C 0680                  		move.w	#$680,d2
00014124 0828 0006 0022             		btst	#6,$22(a0)
0001412A 6700                       		beq.s	loc_1341C
0001412C 343C 0380                  		move.w	#$380,d2
00014130                            
00014130                            loc_1341C:
00014130 7000                       		moveq	#0,d0
00014132 1028 0026                  		move.b	$26(a0),d0
00014136 0400 0040                  		subi.b	#$40,d0
0001413A 4EB9 0000 2D86             		jsr	(CalcSine).l
00014140 C3C2                       		muls.w	d2,d1
00014142 E081                       		asr.l	#8,d1
00014144 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00014148 C1C2                       		muls.w	d2,d0
0001414A E080                       		asr.l	#8,d0
0001414C D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00014150 08E8 0001 0022             		bset	#1,$22(a0)
00014156 08A8 0005 0022             		bclr	#5,$22(a0)
0001415C 588F                       		addq.l	#4,sp
0001415E 117C 0001 003C             		move.b	#1,$3C(a0)
00014164 4228 0038                  		clr.b	$38(a0)
00014168 303C 00A0                  		move.w	#$A0,d0
0001416C 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play jumping sound
00014172 117C 0013 0016             		move.b	#$13,$16(a0)
00014178 117C 0009 0017             		move.b	#9,$17(a0)
0001417E 0828 0002 0022             		btst	#2,$22(a0)
00014184 6600                       		bne.s	loc_13490
00014186 117C 000E 0016             		move.b	#$E,$16(a0)
0001418C 117C 0007 0017             		move.b	#7,$17(a0)
00014192 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00014198 08E8 0002 0022             		bset	#2,$22(a0)
0001419E 5A68 000C                  		addq.w	#5,$C(a0)
000141A2 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
000141A8                            
000141A8                            locret_1348E:
000141A8 4E75                       		rts	
000141AA                            ; ===========================================================================
000141AA                            
000141AA                            loc_13490:
000141AA 08E8 0004 0022             		bset	#4,$22(a0)
000141B0 4E75                       		rts	
000141B2                            ; End of function Sonic_Jump
000141B2                            
000141B2                            
000141B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141B2                            
000141B2                            
000141B2                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
000141B2 4A28 003C                  		tst.b	$3C(a0)
000141B6 6700                       		beq.s	loc_134C4
000141B8 323C FC00                  		move.w	#-$400,d1
000141BC 0828 0006 0022             		btst	#6,$22(a0)
000141C2 6700                       		beq.s	loc_134AE
000141C4 323C FE00                  		move.w	#-$200,d1
000141C8                            
000141C8                            loc_134AE:
000141C8 B268 0012                  		cmp.w	$12(a0),d1
000141CC 6F00                       		ble.s	locret_134C2
000141CE 1038 F602                  		move.b	($FFFFF602).w,d0
000141D2 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000141D6 6600                       		bne.s	locret_134C2	; if yes, branch
000141D8 3141 0012                  		move.w	d1,$12(a0)
000141DC                            
000141DC                            locret_134C2:
000141DC 4E75                       		rts	
000141DE                            ; ===========================================================================
000141DE                            
000141DE                            loc_134C4:
000141DE 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
000141E4 6C00                       		bge.s	locret_134D2
000141E6 317C F040 0012             		move.w	#-$FC0,$12(a0)
000141EC                            
000141EC                            locret_134D2:
000141EC 4E75                       		rts	
000141EE                            ; End of function Sonic_JumpHeight
000141EE                            
000141EE                            ; ---------------------------------------------------------------------------
000141EE                            ; Subroutine to	slow Sonic walking up a	slope
000141EE                            ; ---------------------------------------------------------------------------
000141EE                            
000141EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141EE                            
000141EE                            
000141EE                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
000141EE 1028 0026                  		move.b	$26(a0),d0
000141F2 0600 0060                  		addi.b	#$60,d0
000141F6 0C00 00C0                  		cmpi.b	#$C0,d0
000141FA 6400                       		bcc.s	locret_13508
000141FC 1028 0026                  		move.b	$26(a0),d0
00014200 4EB9 0000 2D86             		jsr	(CalcSine).l
00014206 C1FC 0020                  		muls.w	#$20,d0
0001420A E080                       		asr.l	#8,d0
0001420C 4A68 0014                  		tst.w	$14(a0)
00014210 6700                       		beq.s	locret_13508
00014212 6B00                       		bmi.s	loc_13504
00014214 4A40                       		tst.w	d0
00014216 6700                       		beq.s	locret_13502
00014218 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
0001421C                            
0001421C                            locret_13502:
0001421C 4E75                       		rts	
0001421E                            ; ===========================================================================
0001421E                            
0001421E                            loc_13504:
0001421E D168 0014                  		add.w	d0,$14(a0)
00014222                            
00014222                            locret_13508:
00014222 4E75                       		rts	
00014224                            ; End of function Sonic_SlopeResist
00014224                            
00014224                            ; ---------------------------------------------------------------------------
00014224                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00014224                            ; ---------------------------------------------------------------------------
00014224                            
00014224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014224                            
00014224                            
00014224                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00014224 1028 0026                  		move.b	$26(a0),d0
00014228 0600 0060                  		addi.b	#$60,d0
0001422C 0C00 00C0                  		cmpi.b	#-$40,d0
00014230 6400                       		bcc.s	locret_13544
00014232 1028 0026                  		move.b	$26(a0),d0
00014236 4EB9 0000 2D86             		jsr	(CalcSine).l
0001423C C1FC 0050                  		muls.w	#$50,d0
00014240 E080                       		asr.l	#8,d0
00014242 4A68 0014                  		tst.w	$14(a0)
00014246 6B00                       		bmi.s	loc_1353A
00014248 4A40                       		tst.w	d0
0001424A 6A00                       		bpl.s	loc_13534
0001424C E480                       		asr.l	#2,d0
0001424E                            
0001424E                            loc_13534:
0001424E D168 0014                  		add.w	d0,$14(a0)
00014252 4E75                       		rts	
00014254                            ; ===========================================================================
00014254                            
00014254                            loc_1353A:
00014254 4A40                       		tst.w	d0
00014256 6B00                       		bmi.s	loc_13540
00014258 E480                       		asr.l	#2,d0
0001425A                            
0001425A                            loc_13540:
0001425A D168 0014                  		add.w	d0,$14(a0)
0001425E                            
0001425E                            locret_13544:
0001425E 4E75                       		rts	
00014260                            ; End of function Sonic_RollRepel
00014260                            
00014260                            ; ---------------------------------------------------------------------------
00014260                            ; Subroutine to	push Sonic down	a slope
00014260                            ; ---------------------------------------------------------------------------
00014260                            
00014260                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014260                            
00014260                            
00014260                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00014260 4E71                       		nop	
00014262 4A28 0038                  		tst.b	$38(a0)
00014266 6600                       		bne.s	locret_13580
00014268 4A68 003E                  		tst.w	$3E(a0)
0001426C 6600                       		bne.s	loc_13582
0001426E 1028 0026                  		move.b	$26(a0),d0
00014272 0600 0020                  		addi.b	#$20,d0
00014276 0200 00C0                  		andi.b	#$C0,d0
0001427A 6700                       		beq.s	locret_13580
0001427C 3028 0014                  		move.w	$14(a0),d0
00014280 6A00                       		bpl.s	loc_1356A
00014282 4440                       		neg.w	d0
00014284                            
00014284                            loc_1356A:
00014284 0C40 0280                  		cmpi.w	#$280,d0
00014288 6400                       		bcc.s	locret_13580
0001428A 4268 0014                  		clr.w	$14(a0)
0001428E 08E8 0001 0022             		bset	#1,$22(a0)
00014294 317C 001E 003E             		move.w	#$1E,$3E(a0)
0001429A                            
0001429A                            locret_13580:
0001429A 4E75                       		rts	
0001429C                            ; ===========================================================================
0001429C                            
0001429C                            loc_13582:
0001429C 5368 003E                  		subq.w	#1,$3E(a0)
000142A0 4E75                       		rts	
000142A2                            ; End of function Sonic_SlopeRepel
000142A2                            
000142A2                            ; ---------------------------------------------------------------------------
000142A2                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000142A2                            ; ---------------------------------------------------------------------------
000142A2                            
000142A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142A2                            
000142A2                            
000142A2                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
000142A2 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000142A6 6700                       		beq.s	locret_135A2	; if already 0,	branch
000142A8 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000142AA                            
000142AA 5400                       		addq.b	#2,d0		; increase angle
000142AC 6400                       		bcc.s	loc_13596
000142AE 7000                       		moveq	#0,d0
000142B0                            
000142B0                            loc_13596:
000142B0 6000                       		bra.s	loc_1359E
000142B2                            ; ===========================================================================
000142B2                            
000142B2                            loc_13598:
000142B2 5500                       		subq.b	#2,d0		; decrease angle
000142B4 6400                       		bcc.s	loc_1359E
000142B6 7000                       		moveq	#0,d0
000142B8                            
000142B8                            loc_1359E:
000142B8 1140 0026                  		move.b	d0,$26(a0)
000142BC                            
000142BC                            locret_135A2:
000142BC 4E75                       		rts	
000142BE                            ; End of function Sonic_JumpAngle
000142BE                            
000142BE                            ; ---------------------------------------------------------------------------
000142BE                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000142BE                            ; ---------------------------------------------------------------------------
000142BE                            
000142BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142BE                            
000142BE                            
000142BE                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
000142BE 3228 0010                  		move.w	$10(a0),d1
000142C2 3428 0012                  		move.w	$12(a0),d2
000142C6 4EB9 0000 3054             		jsr	(CalcAngle).l
000142CC 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000142D0 0400 0020                  		subi.b	#$20,d0
000142D4 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000142D8 0200 00C0                  		andi.b	#$C0,d0
000142DC 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000142E0 0C00 0040                  		cmpi.b	#$40,d0
000142E4 6700 0000                  		beq.w	loc_13680
000142E8 0C00 0080                  		cmpi.b	#$80,d0
000142EC 6700 0000                  		beq.w	loc_136E2
000142F0 0C00 00C0                  		cmpi.b	#-$40,d0
000142F4 6700 0000                  		beq.w	loc_1373E
000142F8 6100 0000                  		bsr.w	Sonic_HitWall
000142FC 4A41                       		tst.w	d1
000142FE 6A00                       		bpl.s	loc_135F0
00014300 9368 0008                  		sub.w	d1,8(a0)
00014304 317C 0000 0010             		move.w	#0,$10(a0)
0001430A                            
0001430A                            loc_135F0:
0001430A 6100 0000                  		bsr.w	sub_14EB4
0001430E 4A41                       		tst.w	d1
00014310 6A00                       		bpl.s	loc_13602
00014312 D368 0008                  		add.w	d1,8(a0)
00014316 317C 0000 0010             		move.w	#0,$10(a0)
0001431C                            
0001431C                            loc_13602:
0001431C 6100 0000                  		bsr.w	Sonic_HitFloor
00014320 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00014324 4A41                       		tst.w	d1
00014326 6A00                       		bpl.s	locret_1367E
00014328 1428 0012                  		move.b	$12(a0),d2
0001432C 5002                       		addq.b	#8,d2
0001432E 4402                       		neg.b	d2
00014330 B202                       		cmp.b	d2,d1
00014332 6C00                       		bge.s	loc_1361E
00014334 B002                       		cmp.b	d2,d0
00014336 6D00                       		blt.s	locret_1367E
00014338                            
00014338                            loc_1361E:
00014338 D368 000C                  		add.w	d1,$C(a0)
0001433C 1143 0026                  		move.b	d3,$26(a0)
00014340 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014344 117C 0000 001C             		move.b	#0,$1C(a0)
0001434A 1003                       		move.b	d3,d0
0001434C 0600 0020                  		addi.b	#$20,d0
00014350 0200 0040                  		andi.b	#$40,d0
00014354 6600                       		bne.s	loc_1365C
00014356 1003                       		move.b	d3,d0
00014358 0600 0010                  		addi.b	#$10,d0
0001435C 0200 0020                  		andi.b	#$20,d0
00014360 6700                       		beq.s	loc_1364E
00014362 E0E8 0012                  		asr	$12(a0)
00014366 6000                       		bra.s	loc_13670
00014368                            ; ===========================================================================
00014368                            
00014368                            loc_1364E:
00014368 317C 0000 0012             		move.w	#0,$12(a0)
0001436E 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014374 4E75                       		rts	
00014376                            ; ===========================================================================
00014376                            
00014376                            loc_1365C:
00014376 317C 0000 0010             		move.w	#0,$10(a0)
0001437C 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00014382 6F00                       		ble.s	loc_13670
00014384 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
0001438A                            
0001438A                            loc_13670:
0001438A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014390 4A03                       		tst.b	d3
00014392 6A00                       		bpl.s	locret_1367E
00014394 4468 0014                  		neg.w	$14(a0)
00014398                            
00014398                            locret_1367E:
00014398 4E75                       		rts	
0001439A                            ; ===========================================================================
0001439A                            
0001439A                            loc_13680:
0001439A 6100 0000                  		bsr.w	Sonic_HitWall
0001439E 4A41                       		tst.w	d1
000143A0 6A00                       		bpl.s	loc_1369A
000143A2 9368 0008                  		sub.w	d1,8(a0)
000143A6 317C 0000 0010             		move.w	#0,$10(a0)
000143AC 3168 0012 0014             		move.w	$12(a0),$14(a0)
000143B2 4E75                       		rts	
000143B4                            ; ===========================================================================
000143B4                            
000143B4                            loc_1369A:
000143B4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000143B8 4A41                       		tst.w	d1
000143BA 6A00                       		bpl.s	loc_136B4
000143BC 9368 000C                  		sub.w	d1,$C(a0)
000143C0 4A68 0012                  		tst.w	$12(a0)
000143C4 6A00                       		bpl.s	locret_136B2
000143C6 317C 0000 0012             		move.w	#0,$12(a0)
000143CC                            
000143CC                            locret_136B2:
000143CC 4E75                       		rts	
000143CE                            ; ===========================================================================
000143CE                            
000143CE                            loc_136B4:
000143CE 4A68 0012                  		tst.w	$12(a0)
000143D2 6B00                       		bmi.s	locret_136E0
000143D4 6100 0000                  		bsr.w	Sonic_HitFloor
000143D8 4A41                       		tst.w	d1
000143DA 6A00                       		bpl.s	locret_136E0
000143DC D368 000C                  		add.w	d1,$C(a0)
000143E0 1143 0026                  		move.b	d3,$26(a0)
000143E4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000143E8 117C 0000 001C             		move.b	#0,$1C(a0)
000143EE 317C 0000 0012             		move.w	#0,$12(a0)
000143F4 3168 0010 0014             		move.w	$10(a0),$14(a0)
000143FA                            
000143FA                            locret_136E0:
000143FA 4E75                       		rts	
000143FC                            ; ===========================================================================
000143FC                            
000143FC                            loc_136E2:
000143FC 6100 0000                  		bsr.w	Sonic_HitWall
00014400 4A41                       		tst.w	d1
00014402 6A00                       		bpl.s	loc_136F4
00014404 9368 0008                  		sub.w	d1,8(a0)
00014408 317C 0000 0010             		move.w	#0,$10(a0)
0001440E                            
0001440E                            loc_136F4:
0001440E 6100 0000                  		bsr.w	sub_14EB4
00014412 4A41                       		tst.w	d1
00014414 6A00                       		bpl.s	loc_13706
00014416 D368 0008                  		add.w	d1,8(a0)
0001441A 317C 0000 0010             		move.w	#0,$10(a0)
00014420                            
00014420                            loc_13706:
00014420 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014424 4A41                       		tst.w	d1
00014426 6A00                       		bpl.s	locret_1373C
00014428 9368 000C                  		sub.w	d1,$C(a0)
0001442C 1003                       		move.b	d3,d0
0001442E 0600 0020                  		addi.b	#$20,d0
00014432 0200 0040                  		andi.b	#$40,d0
00014436 6600                       		bne.s	loc_13726
00014438 317C 0000 0012             		move.w	#0,$12(a0)
0001443E 4E75                       		rts	
00014440                            ; ===========================================================================
00014440                            
00014440                            loc_13726:
00014440 1143 0026                  		move.b	d3,$26(a0)
00014444 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014448 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001444E 4A03                       		tst.b	d3
00014450 6A00                       		bpl.s	locret_1373C
00014452 4468 0014                  		neg.w	$14(a0)
00014456                            
00014456                            locret_1373C:
00014456 4E75                       		rts	
00014458                            ; ===========================================================================
00014458                            
00014458                            loc_1373E:
00014458 6100 0000                  		bsr.w	sub_14EB4
0001445C 4A41                       		tst.w	d1
0001445E 6A00                       		bpl.s	loc_13758
00014460 D368 0008                  		add.w	d1,8(a0)
00014464 317C 0000 0010             		move.w	#0,$10(a0)
0001446A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014470 4E75                       		rts	
00014472                            ; ===========================================================================
00014472                            
00014472                            loc_13758:
00014472 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014476 4A41                       		tst.w	d1
00014478 6A00                       		bpl.s	loc_13772
0001447A 9368 000C                  		sub.w	d1,$C(a0)
0001447E 4A68 0012                  		tst.w	$12(a0)
00014482 6A00                       		bpl.s	locret_13770
00014484 317C 0000 0012             		move.w	#0,$12(a0)
0001448A                            
0001448A                            locret_13770:
0001448A 4E75                       		rts	
0001448C                            ; ===========================================================================
0001448C                            
0001448C                            loc_13772:
0001448C 4A68 0012                  		tst.w	$12(a0)
00014490 6B00                       		bmi.s	locret_1379E
00014492 6100 0000                  		bsr.w	Sonic_HitFloor
00014496 4A41                       		tst.w	d1
00014498 6A00                       		bpl.s	locret_1379E
0001449A D368 000C                  		add.w	d1,$C(a0)
0001449E 1143 0026                  		move.b	d3,$26(a0)
000144A2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000144A6 117C 0000 001C             		move.b	#0,$1C(a0)
000144AC 317C 0000 0012             		move.w	#0,$12(a0)
000144B2 3168 0010 0014             		move.w	$10(a0),$14(a0)
000144B8                            
000144B8                            locret_1379E:
000144B8 4E75                       		rts	
000144BA                            ; End of function Sonic_Floor
000144BA                            
000144BA                            ; ---------------------------------------------------------------------------
000144BA                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000144BA                            ; ---------------------------------------------------------------------------
000144BA                            
000144BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144BA                            
000144BA                            
000144BA                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000144BA 0828 0004 0022             		btst	#4,$22(a0)
000144C0 6700                       		beq.s	loc_137AE
000144C2 4E71                       		nop	
000144C4 4E71                       		nop	
000144C6 4E71                       		nop	
000144C8                            
000144C8                            loc_137AE:
000144C8 08A8 0005 0022             		bclr	#5,$22(a0)
000144CE 08A8 0001 0022             		bclr	#1,$22(a0)
000144D4 08A8 0004 0022             		bclr	#4,$22(a0)
000144DA 0828 0002 0022             		btst	#2,$22(a0)
000144E0 6700                       		beq.s	loc_137E4
000144E2 08A8 0002 0022             		bclr	#2,$22(a0)
000144E8 117C 0013 0016             		move.b	#$13,$16(a0)
000144EE 117C 0009 0017             		move.b	#9,$17(a0)
000144F4 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000144FA 5B68 000C                  		subq.w	#5,$C(a0)
000144FE                            
000144FE                            loc_137E4:
000144FE 117C 0000 003C             		move.b	#0,$3C(a0)
00014504 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
0001450A 4E75                       		rts	
0001450C                            ; End of function Sonic_ResetOnFloor
0001450C                            
0001450C                            ; ===========================================================================
0001450C                            ; ---------------------------------------------------------------------------
0001450C                            ; Sonic	when he	gets hurt
0001450C                            ; ---------------------------------------------------------------------------
0001450C                            
0001450C                            Obj01_Hurt:				; XREF: Obj01_Index
0001450C 7230                       		moveq	#$30,d1
0001450E 0828 0006 0022             		btst	#6,$22(a0)
00014514 6700                       		beq.s	loc_1380C
00014516 7220                       		moveq	#$20,d1
00014518                            loc_1380C:
00014518 4EBA 9CF4                  		jsr	ObjectFallCustom
0001451C                            
0001451C 6100 0000                  		bsr.w	Sonic_HurtStop
00014520 6100 FAF6                  		bsr.w	Sonic_LevelBound
00014524 6100 F4BC                  		bsr.w	Sonic_RecordPos
00014528 6100 0000                  		bsr.w	Sonic_Animate
0001452C 6100 0000                  		bsr.w	LoadSonicDynPLC
00014530 4EFA 9D76                  		jmp	DisplaySprite
00014534                            
00014534                            ; ---------------------------------------------------------------------------
00014534                            ; Subroutine to	stop Sonic falling after he's been hurt
00014534                            ; ---------------------------------------------------------------------------
00014534                            
00014534                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014534                            
00014534                            
00014534                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014534 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014538 0640 00E0                  		addi.w	#$E0,d0
0001453C B068 000C                  		cmp.w	$C(a0),d0
00014540 6500 0000                  		bcs.w	KillSonic
00014544 6100 FD78                  		bsr.w	Sonic_Floor
00014548 0828 0001 0022             		btst	#1,$22(a0)
0001454E 6600                       		bne.s	locret_13860
00014550 7000                       		moveq	#0,d0
00014552 3140 0012                  		move.w	d0,$12(a0)
00014556 3140 0010                  		move.w	d0,$10(a0)
0001455A 3140 0014                  		move.w	d0,$14(a0)
0001455E 117C 0000 001C             		move.b	#0,$1C(a0)
00014564 5528 0024                  		subq.b	#2,$24(a0)
00014568 317C 0078 0030             		move.w	#$78,$30(a0)
0001456E                            
0001456E                            locret_13860:
0001456E 4E75                       		rts	
00014570                            ; End of function Sonic_HurtStop
00014570                            
00014570                            ; ===========================================================================
00014570                            ; ---------------------------------------------------------------------------
00014570                            ; Sonic	when he	dies
00014570                            ; ---------------------------------------------------------------------------
00014570                            
00014570                            Obj01_Death:				; XREF: Obj01_Index
00014570 6100 0000                  		bsr.w	GameOver
00014574 4EBA 9C96                  		jsr	ObjectFall
00014578 6100 F468                  		bsr.w	Sonic_RecordPos
0001457C 6100 0000                  		bsr.w	Sonic_Animate
00014580 6100 0000                  		bsr.w	LoadSonicDynPLC
00014584 4EFA 9D22                  		jmp	DisplaySprite
00014588                            
00014588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014588                            
00014588                            
00014588                            GameOver:				; XREF: Obj01_Death
00014588 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001458C 0640 0100                  		addi.w	#$100,d0
00014590 B068 000C                  		cmp.w	$C(a0),d0
00014594 6400 0000                  		bcc.w	locret_13900
00014598 317C FFC8 0012             		move.w	#-$38,$12(a0)
0001459E 5428 0024                  		addq.b	#2,$24(a0)
000145A2 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000145A6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000145AA 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000145AE 6600                       		bne.s	loc_138D4
000145B0 317C 0000 003A             		move.w	#0,$3A(a0)
000145B6 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000145BC 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000145C2 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000145C8 4238 FE1A                  		clr.b	($FFFFFE1A).w
000145CC                            
000145CC                            loc_138C2:
000145CC 303C 008F                  		move.w	#$8F,d0
000145D0 4EB9 0000 15E6             		jsr	(PlaySound).l	; play game over music
000145D6 7003                       		moveq	#3,d0
000145D8 4EF9 0000 17D0             		jmp	(LoadPLC).l	; load game over patterns
000145DE                            ; ===========================================================================
000145DE                            
000145DE                            loc_138D4:
000145DE 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000145E4 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000145E8 6700                       		beq.s	locret_13900	; if not, branch
000145EA 317C 0000 003A             		move.w	#0,$3A(a0)
000145F0 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000145F6 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000145FC 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014602 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014608 60C2                       		bra.s	loc_138C2
0001460A                            ; ===========================================================================
0001460A                            
0001460A                            locret_13900:
0001460A 4E75                       		rts	
0001460C                            ; End of function GameOver
0001460C                            
0001460C                            ; ===========================================================================
0001460C                            ; ---------------------------------------------------------------------------
0001460C                            ; Sonic	when the level is restarted
0001460C                            ; ---------------------------------------------------------------------------
0001460C                            
0001460C                            Obj01_ResetLevel:			; XREF: Obj01_Index
0001460C 4A68 003A                  		tst.w	$3A(a0)
00014610 6700                       		beq.s	locret_13914
00014612 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014616 6600                       		bne.s	locret_13914
00014618 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001461E                            
0001461E                            locret_13914:
0001461E 4E75                       		rts	
00014620                            
00014620                            ; ---------------------------------------------------------------------------
00014620                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014620                            ; ---------------------------------------------------------------------------
00014620                            
00014620                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014620                            
00014620                            
00014620                            Sonic_Loops:				; XREF: Obj01_Control
00014620                            ;		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014620                            ;		beq.s	loc_13926	; if yes, branch
00014620                            ;		tst.b	($FFFFFE10).w	; is level GHZ ?
00014620                            ;		bne.w	locret_139C2	; if not, branch
00014620                            ;		this is commented out, please do more plane messups id love that
00014620                            ;loc_13926:
00014620 3028 000C                  		move.w	$C(a0),d0
00014624 E248                       		lsr.w	#1,d0
00014626 0240 0380                  		andi.w	#$380,d0
0001462A 1228 0008                  		move.b	8(a0),d1
0001462E 0241 007F                  		andi.w	#$7F,d1
00014632 D041                       		add.w	d1,d0
00014634 43F8 A400                  		lea	($FFFFA400).w,a1
00014638 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001463C B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014640 6700 FA7E                  		beq.w	Obj01_ChkRoll
00014644 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014648 6700 FA76                  		beq.w	Obj01_ChkRoll
0001464C B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014650 6700                       		beq.s	loc_13976
00014652 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014656 6700                       		beq.s	loc_13966
00014658 08A8 0006 0001             		bclr	#6,1(a0)
0001465E 4E75                       		rts	
00014660                            ; ===========================================================================
00014660                            
00014660                            loc_13966:
00014660 0828 0001 0022             		btst	#1,$22(a0)
00014666 6700                       		beq.s	loc_13976
00014668 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001466E 4E75                       		rts	
00014670                            ; ===========================================================================
00014670                            
00014670                            loc_13976:
00014670 3428 0008                  		move.w	8(a0),d2
00014674 0C02 002C                  		cmpi.b	#$2C,d2
00014678 6400                       		bcc.s	loc_13988
0001467A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014680 4E75                       		rts	
00014682                            ; ===========================================================================
00014682                            
00014682                            loc_13988:
00014682 0C02 00E0                  		cmpi.b	#-$20,d2
00014686 6500                       		bcs.s	loc_13996
00014688 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001468E 4E75                       		rts	
00014690                            ; ===========================================================================
00014690                            
00014690                            loc_13996:
00014690 0828 0006 0001             		btst	#6,1(a0)
00014696 6600                       		bne.s	loc_139B2
00014698 1228 0026                  		move.b	$26(a0),d1
0001469C 6700                       		beq.s	locret_139C2
0001469E 0C01 0080                  		cmpi.b	#-$80,d1
000146A2 6200                       		bhi.s	locret_139C2
000146A4 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000146AA 4E75                       		rts	
000146AC                            ; ===========================================================================
000146AC                            
000146AC                            loc_139B2:
000146AC 1228 0026                  		move.b	$26(a0),d1
000146B0 0C01 0080                  		cmpi.b	#-$80,d1
000146B4 6300                       		bls.s	locret_139C2
000146B6 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000146BC                            
000146BC                            locret_139C2:
000146BC 4E75                       		rts	
000146BE                            ; End of function Sonic_Loops
000146BE                            
000146BE                            ; ---------------------------------------------------------------------------
000146BE                            ; Subroutine to	animate	Sonic's sprites
000146BE                            ; ---------------------------------------------------------------------------
000146BE                            
000146BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146BE                            
000146BE                            Player_Anim:
000146BE 0000 0000                  	dc.l	SonicAniData
000146C2 0000 0000                  	dc.l	SonicAniData ; gronic
000146C6 0000 0000                  	dc.l	SonicAniData ; anakama
000146CA 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
000146CE                            
000146CE                            	; Insert more animation data for other characters here
000146CE                            	
000146CE                            Sonic_Animate:				; XREF: Obj01_Control; et al
000146CE 7000                       			moveq	#0,d0
000146D0 1038 FFE8                  		move.b	(v_character),d0
000146D4 E548                       		lsl.w	#2,d0
000146D6 43FA FFE6                  		lea 	Player_Anim(pc),a1
000146DA                            		
000146DA 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
000146DE                            	
000146DE 7000                       		moveq	#0,d0
000146E0 1028 001C                  		move.b	$1C(a0),d0
000146E4 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000146E8 6700                       		beq.s	SAnim_Do	; if not, branch
000146EA 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000146EE 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000146F4 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000146FA                            
000146FA                            SAnim_Do:
000146FA D040                       		add.w	d0,d0
000146FC D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00014700 1011                       		move.b	(a1),d0
00014702 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014704 1228 0022                  		move.b	$22(a0),d1
00014708 0201 0001                  		andi.b	#1,d1
0001470C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014712 8328 0001                  		or.b	d1,1(a0)
00014716 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001471A 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
0001471C 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014720                            
00014720                            SAnim_Do2:
00014720 7200                       		moveq	#0,d1
00014722 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014726 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001472A 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
0001472C                            
0001472C                            SAnim_Next:
0001472C 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014730 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014734                            
00014734                            SAnim_Delay:
00014734 4E75                       		rts	
00014736                            ; ===========================================================================
00014736                            
00014736                            SAnim_End_FF:
00014736 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014738 6600                       		bne.s	SAnim_End_FE	; if not, branch
0001473A 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014740 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014744 60E6                       		bra.s	SAnim_Next
00014746                            ; ===========================================================================
00014746                            
00014746                            SAnim_End_FE:
00014746 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014748 6600                       		bne.s	SAnim_End_FD	; if not, branch
0001474A 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0001474E 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014752 9200                       		sub.b	d0,d1
00014754 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014758 60D2                       		bra.s	SAnim_Next
0001475A                            ; ===========================================================================
0001475A                            
0001475A                            SAnim_End_FD:
0001475A 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001475C 6600                       		bne.s	SAnim_End	; if not, branch
0001475E 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014764                            
00014764                            SAnim_End:
00014764 4E75                       		rts	
00014766                            ; ===========================================================================
00014766                            
00014766                            SAnim_WalkRun:				; XREF: SAnim_Do
00014766 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001476A 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
0001476C 5200                       		addq.b	#1,d0		; is animation walking/running?
0001476E 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014772 7200                       		moveq	#0,d1
00014774 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014778 1428 0022                  		move.b	$22(a0),d2
0001477C 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014780 6600                       		bne.s	loc_13A70	; if yes, branch
00014782 4600                       		not.b	d0		; reverse angle
00014784                            
00014784                            loc_13A70:
00014784 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014788 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
0001478A 7203                       		moveq	#3,d1
0001478C                            
0001478C                            loc_13A78:
0001478C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014792 B302                       		eor.b	d1,d2
00014794 8528 0001                  		or.b	d2,1(a0)
00014798 0828 0005 0022             		btst	#5,$22(a0)
0001479E 6600 0000                  		bne.w	SAnim_Push
000147A2 E808                       		lsr.b	#4,d0		; divide angle by $10
000147A4 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000147A8 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000147AC 6A00                       		bpl.s	loc_13A9C
000147AE 4442                       		neg.w	d2
000147B0                            
000147B0                            loc_13A9C:
000147B0 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000147B6 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000147BA 6400                       		bcc.s	loc_13AB4	; if yes, branch
000147BC 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000147C2 1200                       		move.b	d0,d1
000147C4 E209                       		lsr.b	#1,d1
000147C6 D001                       		add.b	d1,d0
000147C8                            
000147C8                            loc_13AB4:
000147C8 D000                       		add.b	d0,d0
000147CA 1600                       		move.b	d0,d3
000147CC 4442                       		neg.w	d2
000147CE 0642 0800                  		addi.w	#$800,d2
000147D2 6A00                       		bpl.s	loc_13AC2
000147D4 7400                       		moveq	#0,d2
000147D6                            
000147D6                            loc_13AC2:
000147D6 E04A                       		lsr.w	#8,d2
000147D8 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000147DC 6100 FF42                  		bsr.w	SAnim_Do2
000147E0 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000147E4 4E75                       		rts	
000147E6                            ; ===========================================================================
000147E6                            
000147E6                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000147E6 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000147E8 6600                       		bne.s	SAnim_Push	; if not, branch
000147EA 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000147EE 6A00                       		bpl.s	loc_13ADE
000147F0 4442                       		neg.w	d2
000147F2                            
000147F2                            loc_13ADE:
000147F2 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000147F8 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000147FC 6400                       		bcc.s	loc_13AF0	; if yes, branch
000147FE 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014804                            
00014804                            loc_13AF0:
00014804 4442                       		neg.w	d2
00014806 0642 0400                  		addi.w	#$400,d2
0001480A 6A00                       		bpl.s	loc_13AFA
0001480C 7400                       		moveq	#0,d2
0001480E                            
0001480E                            loc_13AFA:
0001480E E04A                       		lsr.w	#8,d2
00014810 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014814 1228 0022                  		move.b	$22(a0),d1
00014818 0201 0001                  		andi.b	#1,d1
0001481C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014822 8328 0001                  		or.b	d1,1(a0)
00014826 6000 FEF8                  		bra.w	SAnim_Do2
0001482A                            ; ===========================================================================
0001482A                            
0001482A                            SAnim_Push:				; XREF: SAnim_RollJump
0001482A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001482E 6B00                       		bmi.s	loc_13B1E
00014830 4442                       		neg.w	d2
00014832                            
00014832                            loc_13B1E:
00014832 0642 0800                  		addi.w	#$800,d2
00014836 6A00                       		bpl.s	loc_13B26
00014838 7400                       		moveq	#0,d2
0001483A                            
0001483A                            loc_13B26:
0001483A EC4A                       		lsr.w	#6,d2
0001483C 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014840 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014846 1228 0022                  		move.b	$22(a0),d1
0001484A 0201 0001                  		andi.b	#1,d1
0001484E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014854 8328 0001                  		or.b	d1,1(a0)
00014858 6000 FEC6                  		bra.w	SAnim_Do2
0001485C                            ; End of function Sonic_Animate
0001485C                            
0001485C                            ; ===========================================================================
0001485C                            SonicAniData:
0001485C                            	include "_anim\Sonic.asm"
0001485C                            ; ---------------------------------------------------------------------------
0001485C                            ; Animation script - Sonic
0001485C                            ; ---------------------------------------------------------------------------
0001485C 0000                       		dc.w SonAni_Walk-SonicAniData
0001485E 0000                       		dc.w SonAni_Run-SonicAniData
00014860 0000                       		dc.w SonAni_Roll-SonicAniData
00014862 0000                       		dc.w SonAni_Roll2-SonicAniData
00014864 0000                       		dc.w SonAni_Push-SonicAniData
00014866 0000                       		dc.w SonAni_Wait-SonicAniData
00014868 0000                       		dc.w SonAni_Balance-SonicAniData
0001486A 0000                       		dc.w SonAni_LookUp-SonicAniData
0001486C 0000                       		dc.w SonAni_Duck-SonicAniData
0001486E 0000                       		dc.w SonAni_Warp1-SonicAniData
00014870 0000                       		dc.w SonAni_Warp2-SonicAniData
00014872 0000                       		dc.w SonAni_Warp3-SonicAniData
00014874 0000                       		dc.w SonAni_Warp4-SonicAniData
00014876 0000                       		dc.w SonAni_Stop-SonicAniData
00014878 0000                       		dc.w SonAni_Float1-SonicAniData
0001487A 0000                       		dc.w SonAni_Float2-SonicAniData
0001487C 0000                       		dc.w SonAni_Spring-SonicAniData
0001487E 0000                       		dc.w SonAni_LZHang-SonicAniData
00014880 0000                       		dc.w SonAni_Leap1-SonicAniData
00014882 0000                       		dc.w SonAni_Leap2-SonicAniData
00014884 0000                       		dc.w SonAni_Surf-SonicAniData
00014886 0000                       		dc.w SonAni_Bubble-SonicAniData
00014888 0000                       		dc.w SonAni_Death1-SonicAniData
0001488A 0000                       		dc.w SonAni_Drown-SonicAniData
0001488C 0000                       		dc.w SonAni_Death2-SonicAniData
0001488E 0000                       		dc.w SonAni_Shrink-SonicAniData
00014890 0000                       		dc.w SonAni_Hurt-SonicAniData
00014892 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014894 0000                       		dc.w SonAni_Blank-SonicAniData
00014896 0000                       		dc.w SonAni_Float3-SonicAniData
00014898 0000                       		dc.w SonAni_Float4-SonicAniData
0001489A FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
000148A4 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000148AC FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000148B4 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000148BC FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000148C4 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000148DA 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000148DE 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000148E2 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000148E6 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000148EA 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000148EE 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000148F2 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000148F6 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000148FA 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000148FE 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014906 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
0001490A 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
0001490E 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014914 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
0001491A 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
0001491E 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014926 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
0001492A 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
0001492E 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014932 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
0001493C 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
00014940 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00014944 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014948 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014950 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00014954                            		even
00014954                            		even
00014954                            
00014954                            ; ---------------------------------------------------------------------------
00014954                            ; Sonic	pattern	loading	subroutine
00014954                            ; ---------------------------------------------------------------------------
00014954                            
00014954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014954                            Player_DPLC:
00014954 0000 0000                  	dc.l	SonicDynPLC
00014958 0000 0000                  	dc.l	SonicDynPLC ; gronic
0001495C 0000 0000                  	dc.l	SonicDynPLC ; anakama
00014960 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
00014964                            	; add pointers for player dplc here
00014964                            Player_Art:
00014964 0000 0000                  	dc.l	Art_Sonic
00014968 0000 0000                  	dc.l	Art_Sonic ; gronic
0001496C 0000 0000                  	dc.l	Art_Sonic ; anakama
00014970 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
00014974                            	; add pointers for player art here
00014974                            
00014974                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014974 7000                       		moveq	#0,d0
00014976 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001497A B038 F766                  		cmp.b	($FFFFF766).w,d0
0001497E 6700                       		beq.s	locret_13C96
00014980 11C0 F766                  		move.b	d0,($FFFFF766).w
00014984                            		
00014984 323C 0000                  		move.w	#0,d1
00014988 1238 FFE8                  		move.b	(v_character),d1
0001498C E549                       		lsl.w	#2,d1
0001498E 45FA FFC4                  		lea 	Player_DPLC(pc),a2
00014992                            
00014992 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
00014996                            		
00014996 D040                       		add.w	d0,d0
00014998 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001499C 7200                       		moveq	#0,d1
0001499E 121A                       		move.b	(a2)+,d1	; read "number of entries" value
000149A0 5301                       		subq.b	#1,d1
000149A2 6B00                       		bmi.s	locret_13C96
000149A4 47F8 C800                  		lea	($FFFFC800).w,a3
000149A8 11FC 0001 F767             		move.b	#1,($FFFFF767).w
000149AE                            
000149AE                            SPLC_ReadEntry:
000149AE 303C 0000                  		move.w	#0,d0
000149B2 1038 FFE8                  		move.b	(v_character),d0
000149B6 E548                       		lsl.w	#2,d0
000149B8 43FA FFAA                  		lea 	Player_Art(pc),a1
000149BC                            
000149BC 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
000149C0                            
000149C0 7400                       		moveq	#0,d2
000149C2 141A                       		move.b	(a2)+,d2
000149C4 3002                       		move.w	d2,d0
000149C6 E808                       		lsr.b	#4,d0
000149C8 E14A                       		lsl.w	#8,d2
000149CA 141A                       		move.b	(a2)+,d2
000149CC EB4A                       		lsl.w	#5,d2
000149CE D3C2                       		adda.l	d2,a1
000149D0                            
000149D0                            SPLC_LoadTile:
000149D0 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
000149D4 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
000149D8 47EB 0020                  		lea	$20(a3),a3	; next tile
000149DC 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
000149E0                            
000149E0 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
000149E4                            
000149E4                            locret_13C96:
000149E4 4E75                       		rts	
000149E6                            ; End of function LoadSonicDynPLC
000149E6                            
000149E6                            ; ===========================================================================
000149E6                            ; ---------------------------------------------------------------------------
000149E6                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000149E6                            ; ---------------------------------------------------------------------------
000149E6                            
000149E6                            Obj0A:					; XREF: Obj_Index
000149E6 7000                       		moveq	#0,d0
000149E8 1028 0024                  		move.b	$24(a0),d0
000149EC 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000149F0 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000149F4                            ; ===========================================================================
000149F4 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000149F8 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
000149FC 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014A00 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014A04 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014A06                            ; ===========================================================================
00014A06                            
00014A06                            Obj0A_Main:				; XREF: Obj0A_Index
00014A06 5428 0024                  		addq.b	#2,$24(a0)
00014A0A 217C 0001 3606 0004        		move.l	#Map_obj64,4(a0)
00014A12 317C 8348 0002             		move.w	#$8348,2(a0)
00014A18 117C 0084 0001             		move.b	#$84,1(a0)
00014A1E 117C 0010 0019             		move.b	#$10,$19(a0)
00014A24 117C 0001 0018             		move.b	#1,$18(a0)
00014A2A 1028 0028                  		move.b	$28(a0),d0
00014A2E 6A00                       		bpl.s	loc_13D00
00014A30 5028 0024                  		addq.b	#8,$24(a0)
00014A34 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014A3C 317C 0440 0002             		move.w	#$440,2(a0)
00014A42 0240 007F                  		andi.w	#$7F,d0
00014A46 1140 0033                  		move.b	d0,$33(a0)
00014A4A 6000 0000                  		bra.w	Obj0A_Countdown
00014A4E                            ; ===========================================================================
00014A4E                            
00014A4E                            loc_13D00:
00014A4E 1140 001C                  		move.b	d0,$1C(a0)
00014A52 3168 0008 0030             		move.w	8(a0),$30(a0)
00014A58 317C FF78 0012             		move.w	#-$88,$12(a0)
00014A5E                            
00014A5E                            Obj0A_Animate:				; XREF: Obj0A_Index
00014A5E 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014A64 4EB9 0000 B300             		jsr	AnimateSprite
00014A6A                            
00014A6A                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014A6A 3038 F646                  		move.w	($FFFFF646).w,d0
00014A6E B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014A72 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014A74 117C 0006 0024             		move.b	#6,$24(a0)
00014A7A 5E28 001C                  		addq.b	#7,$1C(a0)
00014A7E 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014A84 6700                       		beq.s	Obj0A_Display
00014A86 6000                       		bra.s	Obj0A_Display
00014A88                            ; ===========================================================================
00014A88                            
00014A88                            Obj0A_Wobble:
00014A88 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014A8C 6700                       		beq.s	loc_13D44
00014A8E 5868 0030                  		addq.w	#4,$30(a0)
00014A92                            
00014A92                            loc_13D44:
00014A92 1028 0026                  		move.b	$26(a0),d0
00014A96 5228 0026                  		addq.b	#1,$26(a0)
00014A9A 0240 007F                  		andi.w	#$7F,d0
00014A9E 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014AA4 1031 0000                  		move.b	(a1,d0.w),d0
00014AA8 4880                       		ext.w	d0
00014AAA D068 0030                  		add.w	$30(a0),d0
00014AAE 3140 0008                  		move.w	d0,8(a0)
00014AB2 6100                       		bsr.s	Obj0A_ShowNumber
00014AB4 4EBA 97B8                  		jsr	SpeedToPos
00014AB8 4A28 0001                  		tst.b	1(a0)
00014ABC 6A00                       		bpl.s	Obj0A_Delete
00014ABE 4EFA 97E8                  		jmp	DisplaySprite
00014AC2                            ; ===========================================================================
00014AC2                            
00014AC2                            Obj0A_Delete:
00014AC2 4EFA 9820                  		jmp	DeleteObject
00014AC6                            ; ===========================================================================
00014AC6                            
00014AC6                            Obj0A_Display:				; XREF: Obj0A_Index
00014AC6 6100                       		bsr.s	Obj0A_ShowNumber
00014AC8 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014ACE 4EB9 0000 B300             		jsr	AnimateSprite
00014AD4 4EFA 97D2                  		jmp	DisplaySprite
00014AD8                            ; ===========================================================================
00014AD8                            
00014AD8                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014AD8 4EFA 980A                  		jmp	DeleteObject
00014ADC                            ; ===========================================================================
00014ADC                            
00014ADC                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014ADC 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014AE2 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014AE4 5368 0038                  		subq.w	#1,$38(a0)
00014AE8 6600                       		bne.s	Obj0A_Display2
00014AEA 117C 000E 0024             		move.b	#$E,$24(a0)
00014AF0 5E28 001C                  		addq.b	#7,$1C(a0)
00014AF4 60D0                       		bra.s	Obj0A_Display
00014AF6                            ; ===========================================================================
00014AF6                            
00014AF6                            Obj0A_Display2:
00014AF6 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014AFC 4EB9 0000 B300             		jsr	AnimateSprite
00014B02 4A28 0001                  		tst.b	1(a0)
00014B06 6A00                       		bpl.s	Obj0A_Delete3
00014B08 4EFA 979E                  		jmp	DisplaySprite
00014B0C                            ; ===========================================================================
00014B0C                            
00014B0C                            Obj0A_Delete3:
00014B0C 4EFA 97D6                  		jmp	DeleteObject
00014B10                            ; ===========================================================================
00014B10                            
00014B10                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014B10 4A68 0038                  		tst.w	$38(a0)
00014B14 6700                       		beq.s	locret_13E1A
00014B16 5368 0038                  		subq.w	#1,$38(a0)
00014B1A 6600                       		bne.s	locret_13E1A
00014B1C 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014B22 6400                       		bcc.s	locret_13E1A
00014B24 317C 000F 0038             		move.w	#$F,$38(a0)
00014B2A 4268 0012                  		clr.w	$12(a0)
00014B2E 117C 0080 0001             		move.b	#$80,1(a0)
00014B34 3028 0008                  		move.w	8(a0),d0
00014B38 9078 F700                  		sub.w	($FFFFF700).w,d0
00014B3C 0640 0080                  		addi.w	#$80,d0
00014B40 3140 0008                  		move.w	d0,8(a0)
00014B44 3028 000C                  		move.w	$C(a0),d0
00014B48 9078 F704                  		sub.w	($FFFFF704).w,d0
00014B4C 0640 0080                  		addi.w	#$80,d0
00014B50 3140 000A                  		move.w	d0,$A(a0)
00014B54 117C 000C 0024             		move.b	#$C,$24(a0)
00014B5A                            
00014B5A                            locret_13E1A:
00014B5A 4E75                       		rts	
00014B5C                            ; ===========================================================================
00014B5C                            Obj0A_WobbleData:
00014B5C 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014B6D 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014B7E 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014B8F 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014B9F FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014BAC FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014BB9 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014BC6 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014BD3 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014BDC                            ; ===========================================================================
00014BDC                            
00014BDC                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014BDC 4A68 002C                  		tst.w	$2C(a0)
00014BE0 6600 0000                  		bne.w	loc_13F86
00014BE4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014BEA 6400 0000                  		bcc.w	locret_1408C
00014BEE 0838 0006 D022             		btst	#6,($FFFFD022).w
00014BF4 6700 0000                  		beq.w	locret_1408C
00014BF8 5368 0038                  		subq.w	#1,$38(a0)
00014BFC 6A00 0000                  		bpl.w	loc_13FAC
00014C00 317C 003B 0038             		move.w	#59,$38(a0)
00014C06 317C 0001 0036             		move.w	#1,$36(a0)
00014C0C 4EB9 0000 2D60             		jsr	(RandomNumber).l
00014C12 0240 0001                  		andi.w	#1,d0
00014C16 1140 0034                  		move.b	d0,$34(a0)
00014C1A 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014C1E 0C40 0019                  		cmpi.w	#$19,d0
00014C22 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014C24 0C40 0014                  		cmpi.w	#$14,d0
00014C28 6700                       		beq.s	Obj0A_WarnSound
00014C2A 0C40 000F                  		cmpi.w	#$F,d0
00014C2E 6700                       		beq.s	Obj0A_WarnSound
00014C30 0C40 000C                  		cmpi.w	#$C,d0
00014C34 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014C36 6600                       		bne.s	loc_13F02
00014C38 303C 0092                  		move.w	#$92,d0
00014C3C 4EB9 0000 15E6             		jsr	(PlaySound).l	; play countdown music
00014C42                            
00014C42                            loc_13F02:
00014C42 5328 0032                  		subq.b	#1,$32(a0)
00014C46 6A00                       		bpl.s	Obj0A_ReduceAir
00014C48 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014C4E 08E8 0007 0036             		bset	#7,$36(a0)
00014C54 6000                       		bra.s	Obj0A_ReduceAir
00014C56                            ; ===========================================================================
00014C56                            
00014C56                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00014C56 303C 00C2                  		move.w	#$C2,d0
00014C5A 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014C60                            
00014C60                            Obj0A_ReduceAir:
00014C60 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014C64 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014C68 6100 0000                  		bsr.w	ResumeMusic
00014C6C 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014C72 303C 00B2                  		move.w	#$B2,d0
00014C76 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play drowning sound
00014C7C 117C 000A 0034             		move.b	#$A,$34(a0)
00014C82 317C 0001 0036             		move.w	#1,$36(a0)
00014C88 317C 0078 002C             		move.w	#$78,$2C(a0)
00014C8E 2F08                       		move.l	a0,-(sp)
00014C90 41F8 D000                  		lea	($FFFFD000).w,a0
00014C94 6100 F824                  		bsr.w	Sonic_ResetOnFloor
00014C98 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014C9E 08E8 0001 0022             		bset	#1,$22(a0)
00014CA4 08E8 0007 0002             		bset	#7,2(a0)
00014CAA 317C 0000 0012             		move.w	#0,$12(a0)
00014CB0 317C 0000 0010             		move.w	#0,$10(a0)
00014CB6 317C 0000 0014             		move.w	#0,$14(a0)
00014CBC 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014CC2 205F                       		movea.l	(sp)+,a0
00014CC4 4E75                       		rts	
00014CC6                            ; ===========================================================================
00014CC6                            
00014CC6                            loc_13F86:
00014CC6 5368 002C                  		subq.w	#1,$2C(a0)
00014CCA 6600                       		bne.s	loc_13F94
00014CCC 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014CD2 4E75                       		rts	
00014CD4                            ; ===========================================================================
00014CD4                            
00014CD4                            loc_13F94:
00014CD4 2F08                       		move.l	a0,-(sp)
00014CD6 41F8 D000                  		lea	($FFFFD000).w,a0
00014CDA 7210                       		moveq	#$10,d1
00014CDC 4EBA 9530                  		jsr	ObjectFallCustom
00014CE0 205F                       		movea.l	(sp)+,a0
00014CE2 6000                       		bra.s	loc_13FAC
00014CE4                            ; ===========================================================================
00014CE4                            
00014CE4                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014CE4 6000                       		bra.s	Obj0A_MakeItem
00014CE6                            ; ===========================================================================
00014CE6                            
00014CE6                            loc_13FAC:
00014CE6 4A68 0036                  		tst.w	$36(a0)
00014CEA 6700 0000                  		beq.w	locret_1408C
00014CEE 5368 003A                  		subq.w	#1,$3A(a0)
00014CF2 6A00 0000                  		bpl.w	locret_1408C
00014CF6                            
00014CF6                            Obj0A_MakeItem:
00014CF6 4EB9 0000 2D60             		jsr	(RandomNumber).l
00014CFC 0240 000F                  		andi.w	#$F,d0
00014D00 3140 003A                  		move.w	d0,$3A(a0)
00014D04 4EBA 9A28                  		jsr	SingleObjLoad
00014D08 6600 0000                  		bne.w	locret_1408C
00014D0C 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014D10 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014D16 7006                       		moveq	#6,d0
00014D18 0838 0000 D022             		btst	#0,($FFFFD022).w
00014D1E 6700                       		beq.s	loc_13FF2
00014D20 4440                       		neg.w	d0
00014D22 137C 0040 0026             		move.b	#$40,$26(a1)
00014D28                            
00014D28                            loc_13FF2:
00014D28 D169 0008                  		add.w	d0,8(a1)
00014D2C 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014D32 137C 0006 0028             		move.b	#6,$28(a1)
00014D38 4A68 002C                  		tst.w	$2C(a0)
00014D3C 6700 0000                  		beq.w	loc_1403E
00014D40 0268 0007 003A             		andi.w	#7,$3A(a0)
00014D46 0668 0000 003A             		addi.w	#0,$3A(a0)
00014D4C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014D50 0440 000C                  		subi.w	#$C,d0
00014D54 3340 000C                  		move.w	d0,$C(a1)
00014D58 4EB9 0000 2D60             		jsr	(RandomNumber).l
00014D5E 1340 0026                  		move.b	d0,$26(a1)
00014D62 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014D66 0200 0003                  		andi.b	#3,d0
00014D6A 6600                       		bne.s	loc_14082
00014D6C 137C 000E 0028             		move.b	#$E,$28(a1)
00014D72 6000                       		bra.s	loc_14082
00014D74                            ; ===========================================================================
00014D74                            
00014D74                            loc_1403E:
00014D74 0828 0007 0036             		btst	#7,$36(a0)
00014D7A 6700                       		beq.s	loc_14082
00014D7C 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014D80 E24A                       		lsr.w	#1,d2
00014D82 4EB9 0000 2D60             		jsr	(RandomNumber).l
00014D88 0240 0003                  		andi.w	#3,d0
00014D8C 6600                       		bne.s	loc_1406A
00014D8E 08E8 0006 0036             		bset	#6,$36(a0)
00014D94 6600                       		bne.s	loc_14082
00014D96 1342 0028                  		move.b	d2,$28(a1)
00014D9A 337C 001C 0038             		move.w	#$1C,$38(a1)
00014DA0                            
00014DA0                            loc_1406A:
00014DA0 4A28 0034                  		tst.b	$34(a0)
00014DA4 6600                       		bne.s	loc_14082
00014DA6 08E8 0006 0036             		bset	#6,$36(a0)
00014DAC 6600                       		bne.s	loc_14082
00014DAE 1342 0028                  		move.b	d2,$28(a1)
00014DB2 337C 001C 0038             		move.w	#$1C,$38(a1)
00014DB8                            
00014DB8                            loc_14082:
00014DB8 5328 0034                  		subq.b	#1,$34(a0)
00014DBC 6A00                       		bpl.s	locret_1408C
00014DBE 4268 0036                  		clr.w	$36(a0)
00014DC2                            
00014DC2                            locret_1408C:
00014DC2 4E75                       		rts	
00014DC4                            
00014DC4                            ; ---------------------------------------------------------------------------
00014DC4                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014DC4                            ; ---------------------------------------------------------------------------
00014DC4                            
00014DC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DC4                            
00014DC4                            
00014DC4                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014DC4 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014DCA                             
00014DCA                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014DCA                             
00014DCA 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014DCE                             
00014DCE 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014DD4 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014DD6 43F9 0000 3DE8             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014DDC 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014DDE                             
00014DDE                            Air_GetBgm2:
00014DDE 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014DE4 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014DE6 43F9 0000 3DF0             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014DEC 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014DEE                             
00014DEE                            Air_GetBgm3:
00014DEE 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014DF4 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014DF6 43F9 0000 3DF8             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014DFC 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014DFE                             
00014DFE                            Air_GetBgm4:
00014DFE 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014E04 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014E06 43F9 0000 3E00             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014E0C                             
00014E0C                            Air_PlayMusic:
00014E0C 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014E10                             
00014E10                            loc_140A6:
00014E10 4EB9 0000 15E6             		jsr	(PlaySound).l
00014E16                             
00014E16                            ; NineKode ends here
00014E16                            
00014E16                            loc_140AC:
00014E16 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014E1C 4238 D372                  		clr.b	($FFFFD372).w
00014E20 4E75                       		rts	
00014E22                            ; End of function ResumeMusic
00014E22                            
00014E22                            ; ===========================================================================
00014E22                            Ani_obj0A:
00014E22                            	include "_anim\obj0A.asm"
00014E22                            ; ---------------------------------------------------------------------------
00014E22                            ; Animation script - countdown numbers and bubbles (LZ)
00014E22                            ; ---------------------------------------------------------------------------
00014E22 0000                       		dc.w byte_140D6-Ani_obj0A
00014E24 0000                       		dc.w byte_140E0-Ani_obj0A
00014E26 0000                       		dc.w byte_140EA-Ani_obj0A
00014E28 0000                       		dc.w byte_140F4-Ani_obj0A
00014E2A 0000                       		dc.w byte_140FE-Ani_obj0A
00014E2C 0000                       		dc.w byte_14108-Ani_obj0A
00014E2E 0000                       		dc.w byte_14112-Ani_obj0A
00014E30 0000                       		dc.w byte_14118-Ani_obj0A
00014E32 0000                       		dc.w byte_14120-Ani_obj0A
00014E34 0000                       		dc.w byte_14128-Ani_obj0A
00014E36 0000                       		dc.w byte_14130-Ani_obj0A
00014E38 0000                       		dc.w byte_14138-Ani_obj0A
00014E3A 0000                       		dc.w byte_14140-Ani_obj0A
00014E3C 0000                       		dc.w byte_14148-Ani_obj0A
00014E3E 0000                       		dc.w byte_1414A-Ani_obj0A
00014E40 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014E4A 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014E54 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014E5E 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014E68 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014E72 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014E7C 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014E82 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014E8A 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014E92 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014E9A 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014EA2 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014EAA 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014EB2 0EFC                       byte_14148:	dc.b $E, $FC
00014EB4 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014EBA                            		even
00014EBA                            		even
00014EBA                            
00014EBA                            ; ---------------------------------------------------------------------------
00014EBA                            ; Sprite mappings - drowning countdown numbers (LZ)
00014EBA                            ; ---------------------------------------------------------------------------
00014EBA                            Map_obj0A:
00014EBA                            	include "_maps\obj0A.asm"
00014EBA                            ; ---------------------------------------------------------------------------
00014EBA                            ; Sprite mappings - drowning countdown numbers (LZ)
00014EBA                            ; ---------------------------------------------------------------------------
00014EBA 0000                       		dc.w byte_14152-Map_obj0A
00014EBC 01                         byte_14152:	dc.b 1
00014EBD E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014EC2                            		even
00014EC2                            		even
00014EC2                            
00014EC2                            ; ===========================================================================
00014EC2                            ; ---------------------------------------------------------------------------
00014EC2                            ; Object 38 - shield and invincibility stars
00014EC2                            ; ---------------------------------------------------------------------------
00014EC2                            
00014EC2                            Obj38:					; XREF: Obj_Index
00014EC2 7000                       		moveq	#0,d0
00014EC4 1028 0024                  		move.b	$24(a0),d0
00014EC8 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014ECC 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014ED0                            ; ===========================================================================
00014ED0 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014ED2 0000                       		dc.w Obj38_Shield-Obj38_Index
00014ED4 0000                       		dc.w Obj38_Stars-Obj38_Index
00014ED6                            ; ===========================================================================
00014ED6                            
00014ED6                            Obj38_Main:				; XREF: Obj38_Index
00014ED6 5428 0024                  		addq.b	#2,$24(a0)
00014EDA 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014EE2 117C 0004 0001             		move.b	#4,1(a0)
00014EE8 117C 0001 0018             		move.b	#1,$18(a0)
00014EEE 117C 0010 0019             		move.b	#$10,$19(a0)
00014EF4 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014EF8 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014EFA 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014F00 4E75                       		rts	
00014F02                            ; ===========================================================================
00014F02                            
00014F02                            Obj38_DoStars:
00014F02 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014F06 317C 055C 0002             		move.w	#$55C,2(a0)
00014F0C 4E75                       		rts	
00014F0E                            ; ===========================================================================
00014F0E                            
00014F0E                            Obj38_Shield:				; XREF: Obj38_Index
00014F0E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014F12 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014F14 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014F18 6700                       		beq.s	Obj38_Delete	; if not, branch
00014F1A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014F20 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014F26 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014F2C 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014F32 4EB9 0000 B300             		jsr	AnimateSprite
00014F38 4EFA 936E                  		jmp	DisplaySprite
00014F3C                            ; ===========================================================================
00014F3C                            
00014F3C                            Obj38_RmvShield:
00014F3C 4E75                       		rts	
00014F3E                            ; ===========================================================================
00014F3E                            
00014F3E                            Obj38_Delete:
00014F3E 4EFA 93A4                  		jmp	DeleteObject
00014F42                            ; ===========================================================================
00014F42                            
00014F42                            Obj38_Stars:				; XREF: Obj38_Index
00014F42 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014F46 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014F48 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014F4C 1228 001C                  		move.b	$1C(a0),d1
00014F50 5301                       		subq.b	#1,d1
00014F52 6000                       		bra.s	Obj38_StarTrail
00014F54                            ; ===========================================================================
00014F54 E909                       		lsl.b	#4,d1
00014F56 5801                       		addq.b	#4,d1
00014F58 9001                       		sub.b	d1,d0
00014F5A 1228 0030                  		move.b	$30(a0),d1
00014F5E 9001                       		sub.b	d1,d0
00014F60 5801                       		addq.b	#4,d1
00014F62 0201 000F                  		andi.b	#$F,d1
00014F66 1141 0030                  		move.b	d1,$30(a0)
00014F6A 6000                       		bra.s	Obj38_StarTrail2a
00014F6C                            ; ===========================================================================
00014F6C                            
00014F6C                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014F6C E709                       		lsl.b	#3,d1
00014F6E 1401                       		move.b	d1,d2
00014F70 D201                       		add.b	d1,d1
00014F72 D202                       		add.b	d2,d1
00014F74 5801                       		addq.b	#4,d1
00014F76 9001                       		sub.b	d1,d0
00014F78 1228 0030                  		move.b	$30(a0),d1
00014F7C 9001                       		sub.b	d1,d0
00014F7E 5801                       		addq.b	#4,d1
00014F80 0C01 0018                  		cmpi.b	#$18,d1
00014F84 6500                       		bcs.s	Obj38_StarTrail2
00014F86 7200                       		moveq	#0,d1
00014F88                            
00014F88                            Obj38_StarTrail2:
00014F88 1141 0030                  		move.b	d1,$30(a0)
00014F8C                            
00014F8C                            Obj38_StarTrail2a:
00014F8C 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014F90 43F1 0000                  		lea	(a1,d0.w),a1
00014F94 3159 0008                  		move.w	(a1)+,8(a0)
00014F98 3159 000C                  		move.w	(a1)+,$C(a0)
00014F9C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014FA2 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014FA8 4EB9 0000 B300             		jsr	AnimateSprite
00014FAE 4EFA 92F8                  		jmp	DisplaySprite
00014FB2                            ; ===========================================================================
00014FB2                            
00014FB2                            Obj38_Delete2:				; XREF: Obj38_Stars
00014FB2 4EFA 9330                  		jmp	DeleteObject
00014FB6                            ; ===========================================================================
00014FB6                            ; ---------------------------------------------------------------------------
00014FB6                            ; Object 4A - special stage entry from beta
00014FB6                            ; ---------------------------------------------------------------------------
00014FB6                            
00014FB6                            Obj4A:					; XREF: Obj_Index
00014FB6 7000                       		moveq	#0,d0
00014FB8 1028 0024                  		move.b	$24(a0),d0
00014FBC 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014FC0 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014FC4                            ; ===========================================================================
00014FC4 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014FC6 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014FC8 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014FCA                            ; ===========================================================================
00014FCA                            
00014FCA                            Obj4A_Main:				; XREF: Obj4A_Index
00014FCA 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014FCE 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014FD0 4E75                       		rts	
00014FD2                            ; ===========================================================================
00014FD2                            
00014FD2                            Obj4A_Main2:
00014FD2 5428 0024                  		addq.b	#2,$24(a0)
00014FD6 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014FDE 117C 0004 0001             		move.b	#4,1(a0)
00014FE4 117C 0001 0018             		move.b	#1,$18(a0)
00014FEA 117C 0038 0019             		move.b	#$38,$19(a0)
00014FF0 317C 0541 0002             		move.w	#$541,2(a0)
00014FF6 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014FFC                            
00014FFC                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014FFC 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00015002 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015008 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001500E 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00015014 4EB9 0000 B300             		jsr	AnimateSprite
0001501A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00015020 6600                       		bne.s	Obj4A_Display
00015022 4A38 D000                  		tst.b	($FFFFD000).w
00015026 6700                       		beq.s	Obj4A_Display
00015028 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
0001502E 303C 00A8                  		move.w	#$A8,d0
00015032 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00015038                            
00015038                            Obj4A_Display:
00015038 4EFA 926E                  		jmp	DisplaySprite
0001503C                            ; ===========================================================================
0001503C                            
0001503C                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
0001503C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00015040 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00015042 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00015048 4EFA 929A                  		jmp	DeleteObject
0001504C                            ; ===========================================================================
0001504C                            
0001504C                            Obj4A_Wait:
0001504C 4E75                       		rts	
0001504E                            ; ===========================================================================
0001504E                            ; ---------------------------------------------------------------------------
0001504E                            ; Object 08 - water splash (LZ)
0001504E                            ; ---------------------------------------------------------------------------
0001504E                            
0001504E                            Obj08:					; XREF: Obj_Index
0001504E 7000                       		moveq	#0,d0
00015050 1028 0024                  		move.b	$24(a0),d0
00015054 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00015058 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
0001505C                            ; ===========================================================================
0001505C 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
0001505E 0000                       		dc.w Obj08_Display-Obj08_Index
00015060 0000                       		dc.w Obj08_Delete-Obj08_Index
00015062                            ; ===========================================================================
00015062                            
00015062                            Obj08_Main:				; XREF: Obj08_Index
00015062 5428 0024                  		addq.b	#2,$24(a0)
00015066 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
0001506E 0028 0004 0001             		ori.b	#4,1(a0)
00015074 117C 0001 0018             		move.b	#1,$18(a0)
0001507A 117C 0010 0019             		move.b	#$10,$19(a0)
00015080 317C 4259 0002             		move.w	#$4259,2(a0)
00015086 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
0001508C                            
0001508C                            Obj08_Display:				; XREF: Obj08_Index
0001508C 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00015092 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00015098 4EB9 0000 B300             		jsr	AnimateSprite
0001509E 4EFA 9208                  		jmp	DisplaySprite
000150A2                            ; ===========================================================================
000150A2                            
000150A2                            Obj08_Delete:				; XREF: Obj08_Index
000150A2 4EFA 9240                  		jmp	DeleteObject	; delete when animation	is complete
000150A6                            ; ===========================================================================
000150A6                            Ani_obj38:
000150A6                            	include "_anim\obj38.asm"
000150A6                            ; ---------------------------------------------------------------------------
000150A6                            ; Animation script - shield and invincibility stars
000150A6                            ; ---------------------------------------------------------------------------
000150A6 0000                       		dc.w byte_14356-Ani_obj38
000150A8 0000                       		dc.w byte_1435E-Ani_obj38
000150AA 0000                       		dc.w byte_14364-Ani_obj38
000150AC 0000                       		dc.w byte_1437E-Ani_obj38
000150AE 0000                       		dc.w byte_14398-Ani_obj38
000150B0 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
000150B8 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
000150BE 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000150CF 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
000150D8 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000150E9 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
000150F2 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00015103 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
0001510C                            		even
0001510C                            		even
0001510C                            
0001510C                            ; ---------------------------------------------------------------------------
0001510C                            ; Sprite mappings - shield and invincibility stars
0001510C                            ; ---------------------------------------------------------------------------
0001510C                            Map_obj38:
0001510C                            	include "_maps\obj38.asm"
0001510C                            ; ---------------------------------------------------------------------------
0001510C                            ; Sprite mappings - shield and invincibility stars
0001510C                            ; ---------------------------------------------------------------------------
0001510C 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00015110 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00015114 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00015118 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
0001511C 04                         byte_143C2:	dc.b 4
0001511D E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015122 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015127 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
0001512C 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015131 04                         byte_143D7:	dc.b 4
00015132 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00015137 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
0001513C 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00015141 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00015146 04                         byte_143EC:	dc.b 4
00015147 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
0001514C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015151 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015156 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0001515B 04                         byte_14401:	dc.b 4
0001515C E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015161 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015166 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
0001516B 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015170 04                         byte_14416:	dc.b 4
00015171 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015176 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0001517B 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00015180 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015185 04                         byte_1442B:	dc.b 4
00015186 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0001518B E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00015190 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00015195 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0001519A 04                         byte_14440:	dc.b 4
0001519B E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000151A0 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000151A5 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000151AA 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000151B0 00                         		even
000151B0 00                         		even
000151B0                            
000151B0                            Ani_obj4A:
000151B0                            	include "_anim\obj4A.asm"
000151B0                            ; ---------------------------------------------------------------------------
000151B0                            ; Animation script - special stage entry effect from beta
000151B0                            ; ---------------------------------------------------------------------------
000151B0 0000                       		dc.w byte_14458-Ani_obj4A
000151B2 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
000151C6                            		even
000151C6                            		even
000151C6                            
000151C6                            ; ---------------------------------------------------------------------------
000151C6                            ; Sprite mappings - special stage entry	from beta
000151C6                            ; ---------------------------------------------------------------------------
000151C6                            Map_obj4A:
000151C6                            	include "_maps\obj4A.asm"
000151C6                            ; ---------------------------------------------------------------------------
000151C6                            ; Sprite mappings - special stage entry	from beta
000151C6                            ; ---------------------------------------------------------------------------
000151C6 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
000151CA 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
000151CE 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
000151D2 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
000151D6 03                         byte_1447C:	dc.b 3
000151D7 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
000151DC 0004 0001 00               		dc.b 0,	4, 0, 1, 0
000151E1 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000151E6 03                         byte_1448C:	dc.b 3
000151E7 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000151EC 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000151F1 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000151F6 05                         byte_1449C:	dc.b 5
000151F7 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000151FC EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00015201 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00015206 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001520B 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00015210 09                         byte_144B6:	dc.b 9
00015211 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00015216 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001521B 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00015220 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00015225 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
0001522A F000 1836 18               		dc.b $F0, 0, $18, $36, $18
0001522F F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015234 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00015239 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
0001523E 12                         byte_144E4:	dc.b $12
0001523F 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00015244 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00015249 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
0001524E 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00015253 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00015258 1000 1026 00               		dc.b $10, 0, $10, $26, 0
0001525D 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00015262 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00015267 0000 0026 10               		dc.b 0,	0, 0, $26, $10
0001526C 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00015271 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00015276 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001527B F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00015280 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00015285 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001528A F800 1826 30               		dc.b $F8, 0, $18, $26, $30
0001528F 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00015294 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00015299 11                         byte_1453F:	dc.b $11
0001529A F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
0001529F F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
000152A4 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
000152A9 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000152AE 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
000152B3 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000152B8 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000152BD F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000152C2 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000152C7 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000152CC 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000152D1 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000152D6 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000152DB 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000152E0 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000152E5 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000152EA 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000152EF 09                         byte_14595:	dc.b 9
000152F0 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000152F5 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000152FA 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000152FF 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00015304 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00015309 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
0001530E 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00015313 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00015318 04                         		dc.b 4
00015319 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
0001531E                            		even
0001531E                            		even
0001531E                            
0001531E                            Ani_obj08:
0001531E                            	include "_anim\obj08.asm"
0001531E                            ; ---------------------------------------------------------------------------
0001531E                            ; Animation script - water splash (LZ)
0001531E                            ; ---------------------------------------------------------------------------
0001531E 0000                       		dc.w byte_145C6-Ani_obj08
00015320 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00015326                            		even
00015326                            		even
00015326                            
00015326                            ; ---------------------------------------------------------------------------
00015326                            ; Sprite mappings - water splash (LZ)
00015326                            ; ---------------------------------------------------------------------------
00015326                            Map_obj08:
00015326                            	include "_maps\obj08.asm"
00015326                            ; ---------------------------------------------------------------------------
00015326                            ; Sprite mappings - water splash (LZ)
00015326                            ; ---------------------------------------------------------------------------
00015326 0000                       		dc.w byte_145D2-Map_obj08
00015328 0000                       		dc.w byte_145DD-Map_obj08
0001532A 0000                       		dc.w byte_145E8-Map_obj08
0001532C 02                         byte_145D2:	dc.b 2
0001532D F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00015332 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00015337 02                         byte_145DD:	dc.b 2
00015338 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
0001533D EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00015342 01                         byte_145E8:	dc.b 1
00015343 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00015348                            		even
00015348                            		even
00015348                            
00015348                            ; ---------------------------------------------------------------------------
00015348                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00015348                            ; ---------------------------------------------------------------------------
00015348                            
00015348                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015348                            
00015348                            
00015348                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015348 0828 0003 0022             		btst	#3,$22(a0)
0001534E 6700                       		beq.s	loc_14602
00015350 7000                       		moveq	#0,d0
00015352 11C0 F768                  		move.b	d0,($FFFFF768).w
00015356 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001535A 4E75                       		rts	
0001535C                            ; ===========================================================================
0001535C                            
0001535C                            loc_14602:
0001535C 7003                       		moveq	#3,d0
0001535E 11C0 F768                  		move.b	d0,($FFFFF768).w
00015362 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015366 1028 0026                  		move.b	$26(a0),d0
0001536A 0600 0020                  		addi.b	#$20,d0
0001536E 6A00                       		bpl.s	loc_14624
00015370 1028 0026                  		move.b	$26(a0),d0
00015374 6A00                       		bpl.s	loc_1461E
00015376 5300                       		subq.b	#1,d0
00015378                            
00015378                            loc_1461E:
00015378 0600 0020                  		addi.b	#$20,d0
0001537C 6000                       		bra.s	loc_14630
0001537E                            ; ===========================================================================
0001537E                            
0001537E                            loc_14624:
0001537E 1028 0026                  		move.b	$26(a0),d0
00015382 6A00                       		bpl.s	loc_1462C
00015384 5200                       		addq.b	#1,d0
00015386                            
00015386                            loc_1462C:
00015386 0600 001F                  		addi.b	#$1F,d0
0001538A                            
0001538A                            loc_14630:
0001538A 0200 00C0                  		andi.b	#$C0,d0
0001538E 0C00 0040                  		cmpi.b	#$40,d0
00015392 6700 0000                  		beq.w	Sonic_WalkVertL
00015396 0C00 0080                  		cmpi.b	#$80,d0
0001539A 6700 0000                  		beq.w	Sonic_WalkCeiling
0001539E 0C00 00C0                  		cmpi.b	#$C0,d0
000153A2 6700 0000                  		beq.w	Sonic_WalkVertR
000153A6 3428 000C                  		move.w	$C(a0),d2
000153AA 3628 0008                  		move.w	8(a0),d3
000153AE 7000                       		moveq	#0,d0
000153B0 1028 0016                  		move.b	$16(a0),d0
000153B4 4880                       		ext.w	d0
000153B6 D440                       		add.w	d0,d2
000153B8 1028 0017                  		move.b	$17(a0),d0
000153BC 4880                       		ext.w	d0
000153BE D640                       		add.w	d0,d3
000153C0 49F8 F768                  		lea	($FFFFF768).w,a4
000153C4 367C 0010                  		movea.w	#$10,a3
000153C8 3C3C 0000                  		move.w	#0,d6
000153CC 7A0D                       		moveq	#$D,d5
000153CE 6100 0000                  		bsr.w	FindFloor
000153D2 3F01                       		move.w	d1,-(sp)
000153D4 3428 000C                  		move.w	$C(a0),d2
000153D8 3628 0008                  		move.w	8(a0),d3
000153DC 7000                       		moveq	#0,d0
000153DE 1028 0016                  		move.b	$16(a0),d0
000153E2 4880                       		ext.w	d0
000153E4 D440                       		add.w	d0,d2
000153E6 1028 0017                  		move.b	$17(a0),d0
000153EA 4880                       		ext.w	d0
000153EC 4440                       		neg.w	d0
000153EE D640                       		add.w	d0,d3
000153F0 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153F4 367C 0010                  		movea.w	#$10,a3
000153F8 3C3C 0000                  		move.w	#0,d6
000153FC 7A0D                       		moveq	#$D,d5
000153FE 6100 0000                  		bsr.w	FindFloor
00015402 301F                       		move.w	(sp)+,d0
00015404 6100 0000                  		bsr.w	Sonic_Angle
00015408 4A41                       		tst.w	d1
0001540A 6700                       		beq.s	locret_146BE
0001540C 6A00                       		bpl.s	loc_146C0
0001540E 0C41 FFF2                  		cmpi.w	#-$E,d1
00015412 6D00                       		blt.s	locret_146E6
00015414 D368 000C                  		add.w	d1,$C(a0)
00015418                            
00015418                            locret_146BE:
00015418 4E75                       		rts	
0001541A                            ; ===========================================================================
0001541A                            
0001541A                            loc_146C0:
0001541A 0C41 000E                  		cmpi.w	#$E,d1
0001541E 6E00                       		bgt.s	loc_146CC
00015420                            
00015420                            loc_146C6:
00015420 D368 000C                  		add.w	d1,$C(a0)
00015424 4E75                       		rts	
00015426                            ; ===========================================================================
00015426                            
00015426                            loc_146CC:
00015426 4A28 0038                  		tst.b	$38(a0)
0001542A 66F4                       		bne.s	loc_146C6
0001542C 08E8 0001 0022             		bset	#1,$22(a0)
00015432 08A8 0005 0022             		bclr	#5,$22(a0)
00015438 117C 0001 001D             		move.b	#1,$1D(a0)
0001543E 4E75                       		rts	
00015440                            ; ===========================================================================
00015440                            
00015440                            locret_146E6:
00015440 4E75                       		rts	
00015442                            ; End of function Sonic_AnglePos
00015442                            
00015442                            ; ===========================================================================
00015442 2428 0008                  		move.l	8(a0),d2
00015446 3028 0010                  		move.w	$10(a0),d0
0001544A 48C0                       		ext.l	d0
0001544C E180                       		asl.l	#8,d0
0001544E 9480                       		sub.l	d0,d2
00015450 2142 0008                  		move.l	d2,8(a0)
00015454 303C 0038                  		move.w	#$38,d0
00015458 48C0                       		ext.l	d0
0001545A E180                       		asl.l	#8,d0
0001545C 9680                       		sub.l	d0,d3
0001545E 2143 000C                  		move.l	d3,$C(a0)
00015462 4E75                       		rts	
00015464                            ; ===========================================================================
00015464                            
00015464                            locret_1470A:
00015464 4E75                       		rts	
00015466                            ; ===========================================================================
00015466 2628 000C                  		move.l	$C(a0),d3
0001546A 3028 0012                  		move.w	$12(a0),d0
0001546E 0440 0038                  		subi.w	#$38,d0
00015472 3140 0012                  		move.w	d0,$12(a0)
00015476 48C0                       		ext.l	d0
00015478 E180                       		asl.l	#8,d0
0001547A 9680                       		sub.l	d0,d3
0001547C 2143 000C                  		move.l	d3,$C(a0)
00015480 4E75                       		rts	
00015482 4E75                       		rts	
00015484                            ; ===========================================================================
00015484 2428 0008                  		move.l	8(a0),d2
00015488 2628 000C                  		move.l	$C(a0),d3
0001548C 3028 0010                  		move.w	$10(a0),d0
00015490 48C0                       		ext.l	d0
00015492 E180                       		asl.l	#8,d0
00015494 9480                       		sub.l	d0,d2
00015496 3028 0012                  		move.w	$12(a0),d0
0001549A 48C0                       		ext.l	d0
0001549C E180                       		asl.l	#8,d0
0001549E 9680                       		sub.l	d0,d3
000154A0 2142 0008                  		move.l	d2,8(a0)
000154A4 2143 000C                  		move.l	d3,$C(a0)
000154A8 4E75                       		rts	
000154AA                            
000154AA                            ; ---------------------------------------------------------------------------
000154AA                            ; Subroutine to	change Sonic's angle as he walks along the floor
000154AA                            ; ---------------------------------------------------------------------------
000154AA                            
000154AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154AA                            
000154AA                            
000154AA                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
000154AA 1438 F76A                  		move.b	($FFFFF76A).w,d2
000154AE B240                       		cmp.w	d0,d1
000154B0 6F00                       		ble.s	loc_1475E
000154B2 1438 F768                  		move.b	($FFFFF768).w,d2
000154B6 3200                       		move.w	d0,d1
000154B8                            
000154B8                            loc_1475E:
000154B8 0802 0000                  		btst	#0,d2
000154BC 6600                       		bne.s	loc_1476A
000154BE 1142 0026                  		move.b	d2,$26(a0)
000154C2 4E75                       		rts	
000154C4                            ; ===========================================================================
000154C4                            
000154C4                            loc_1476A:
000154C4 1428 0026                  		move.b	$26(a0),d2
000154C8 0602 0020                  		addi.b	#$20,d2
000154CC 0202 00C0                  		andi.b	#$C0,d2
000154D0 1142 0026                  		move.b	d2,$26(a0)
000154D4 4E75                       		rts	
000154D6                            ; End of function Sonic_Angle
000154D6                            
000154D6                            ; ---------------------------------------------------------------------------
000154D6                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000154D6                            ; ---------------------------------------------------------------------------
000154D6                            
000154D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154D6                            
000154D6                            
000154D6                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000154D6 3428 000C                  		move.w	$C(a0),d2
000154DA 3628 0008                  		move.w	8(a0),d3
000154DE 7000                       		moveq	#0,d0
000154E0 1028 0017                  		move.b	$17(a0),d0
000154E4 4880                       		ext.w	d0
000154E6 4440                       		neg.w	d0
000154E8 D440                       		add.w	d0,d2
000154EA 1028 0016                  		move.b	$16(a0),d0
000154EE 4880                       		ext.w	d0
000154F0 D640                       		add.w	d0,d3
000154F2 49F8 F768                  		lea	($FFFFF768).w,a4
000154F6 367C 0010                  		movea.w	#$10,a3
000154FA 3C3C 0000                  		move.w	#0,d6
000154FE 7A0D                       		moveq	#$D,d5
00015500 6100 0000                  		bsr.w	FindWall
00015504 3F01                       		move.w	d1,-(sp)
00015506 3428 000C                  		move.w	$C(a0),d2
0001550A 3628 0008                  		move.w	8(a0),d3
0001550E 7000                       		moveq	#0,d0
00015510 1028 0017                  		move.b	$17(a0),d0
00015514 4880                       		ext.w	d0
00015516 D440                       		add.w	d0,d2
00015518 1028 0016                  		move.b	$16(a0),d0
0001551C 4880                       		ext.w	d0
0001551E D640                       		add.w	d0,d3
00015520 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015524 367C 0010                  		movea.w	#$10,a3
00015528 3C3C 0000                  		move.w	#0,d6
0001552C 7A0D                       		moveq	#$D,d5
0001552E 6100 0000                  		bsr.w	FindWall
00015532 301F                       		move.w	(sp)+,d0
00015534 6100 FF74                  		bsr.w	Sonic_Angle
00015538 4A41                       		tst.w	d1
0001553A 6700                       		beq.s	locret_147F0
0001553C 6A00                       		bpl.s	loc_147F2
0001553E 0C41 FFF2                  		cmpi.w	#-$E,d1
00015542 6D00 FF20                  		blt.w	locret_1470A
00015546 D368 0008                  		add.w	d1,8(a0)
0001554A                            
0001554A                            locret_147F0:
0001554A 4E75                       		rts	
0001554C                            ; ===========================================================================
0001554C                            
0001554C                            loc_147F2:
0001554C 0C41 000E                  		cmpi.w	#$E,d1
00015550 6E00                       		bgt.s	loc_147FE
00015552                            
00015552                            loc_147F8:
00015552 D368 0008                  		add.w	d1,8(a0)
00015556 4E75                       		rts	
00015558                            ; ===========================================================================
00015558                            
00015558                            loc_147FE:
00015558 4A28 0038                  		tst.b	$38(a0)
0001555C 66F4                       		bne.s	loc_147F8
0001555E 08E8 0001 0022             		bset	#1,$22(a0)
00015564 08A8 0005 0022             		bclr	#5,$22(a0)
0001556A 117C 0001 001D             		move.b	#1,$1D(a0)
00015570 4E75                       		rts	
00015572                            ; End of function Sonic_WalkVertR
00015572                            
00015572                            ; ---------------------------------------------------------------------------
00015572                            ; Subroutine allowing Sonic to walk upside-down
00015572                            ; ---------------------------------------------------------------------------
00015572                            
00015572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015572                            
00015572                            
00015572                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00015572 3428 000C                  		move.w	$C(a0),d2
00015576 3628 0008                  		move.w	8(a0),d3
0001557A 7000                       		moveq	#0,d0
0001557C 1028 0016                  		move.b	$16(a0),d0
00015580 4880                       		ext.w	d0
00015582 9440                       		sub.w	d0,d2
00015584 0A42 000F                  		eori.w	#$F,d2
00015588 1028 0017                  		move.b	$17(a0),d0
0001558C 4880                       		ext.w	d0
0001558E D640                       		add.w	d0,d3
00015590 49F8 F768                  		lea	($FFFFF768).w,a4
00015594 367C FFF0                  		movea.w	#-$10,a3
00015598 3C3C 1000                  		move.w	#$1000,d6
0001559C 7A0D                       		moveq	#$D,d5
0001559E 6100 0000                  		bsr.w	FindFloor
000155A2 3F01                       		move.w	d1,-(sp)
000155A4 3428 000C                  		move.w	$C(a0),d2
000155A8 3628 0008                  		move.w	8(a0),d3
000155AC 7000                       		moveq	#0,d0
000155AE 1028 0016                  		move.b	$16(a0),d0
000155B2 4880                       		ext.w	d0
000155B4 9440                       		sub.w	d0,d2
000155B6 0A42 000F                  		eori.w	#$F,d2
000155BA 1028 0017                  		move.b	$17(a0),d0
000155BE 4880                       		ext.w	d0
000155C0 9640                       		sub.w	d0,d3
000155C2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000155C6 367C FFF0                  		movea.w	#-$10,a3
000155CA 3C3C 1000                  		move.w	#$1000,d6
000155CE 7A0D                       		moveq	#$D,d5
000155D0 6100 0000                  		bsr.w	FindFloor
000155D4 301F                       		move.w	(sp)+,d0
000155D6 6100 FED2                  		bsr.w	Sonic_Angle
000155DA 4A41                       		tst.w	d1
000155DC 6700                       		beq.s	locret_14892
000155DE 6A00                       		bpl.s	loc_14894
000155E0 0C41 FFF2                  		cmpi.w	#-$E,d1
000155E4 6D00 FE5A                  		blt.w	locret_146E6
000155E8 9368 000C                  		sub.w	d1,$C(a0)
000155EC                            
000155EC                            locret_14892:
000155EC 4E75                       		rts	
000155EE                            ; ===========================================================================
000155EE                            
000155EE                            loc_14894:
000155EE 0C41 000E                  		cmpi.w	#$E,d1
000155F2 6E00                       		bgt.s	loc_148A0
000155F4                            
000155F4                            loc_1489A:
000155F4 9368 000C                  		sub.w	d1,$C(a0)
000155F8 4E75                       		rts	
000155FA                            ; ===========================================================================
000155FA                            
000155FA                            loc_148A0:
000155FA 4A28 0038                  		tst.b	$38(a0)
000155FE 66F4                       		bne.s	loc_1489A
00015600 08E8 0001 0022             		bset	#1,$22(a0)
00015606 08A8 0005 0022             		bclr	#5,$22(a0)
0001560C 117C 0001 001D             		move.b	#1,$1D(a0)
00015612 4E75                       		rts	
00015614                            ; End of function Sonic_WalkCeiling
00015614                            
00015614                            ; ---------------------------------------------------------------------------
00015614                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00015614                            ; ---------------------------------------------------------------------------
00015614                            
00015614                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015614                            
00015614                            
00015614                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00015614 3428 000C                  		move.w	$C(a0),d2
00015618 3628 0008                  		move.w	8(a0),d3
0001561C 7000                       		moveq	#0,d0
0001561E 1028 0017                  		move.b	$17(a0),d0
00015622 4880                       		ext.w	d0
00015624 9440                       		sub.w	d0,d2
00015626 1028 0016                  		move.b	$16(a0),d0
0001562A 4880                       		ext.w	d0
0001562C 9640                       		sub.w	d0,d3
0001562E 0A43 000F                  		eori.w	#$F,d3
00015632 49F8 F768                  		lea	($FFFFF768).w,a4
00015636 367C FFF0                  		movea.w	#-$10,a3
0001563A 3C3C 0800                  		move.w	#$800,d6
0001563E 7A0D                       		moveq	#$D,d5
00015640 6100 0000                  		bsr.w	FindWall
00015644 3F01                       		move.w	d1,-(sp)
00015646 3428 000C                  		move.w	$C(a0),d2
0001564A 3628 0008                  		move.w	8(a0),d3
0001564E 7000                       		moveq	#0,d0
00015650 1028 0017                  		move.b	$17(a0),d0
00015654 4880                       		ext.w	d0
00015656 D440                       		add.w	d0,d2
00015658 1028 0016                  		move.b	$16(a0),d0
0001565C 4880                       		ext.w	d0
0001565E 9640                       		sub.w	d0,d3
00015660 0A43 000F                  		eori.w	#$F,d3
00015664 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015668 367C FFF0                  		movea.w	#-$10,a3
0001566C 3C3C 0800                  		move.w	#$800,d6
00015670 7A0D                       		moveq	#$D,d5
00015672 6100 0000                  		bsr.w	FindWall
00015676 301F                       		move.w	(sp)+,d0
00015678 6100 FE30                  		bsr.w	Sonic_Angle
0001567C 4A41                       		tst.w	d1
0001567E 6700                       		beq.s	locret_14934
00015680 6A00                       		bpl.s	loc_14936
00015682 0C41 FFF2                  		cmpi.w	#-$E,d1
00015686 6D00 FDDC                  		blt.w	locret_1470A
0001568A 9368 0008                  		sub.w	d1,8(a0)
0001568E                            
0001568E                            locret_14934:
0001568E 4E75                       		rts	
00015690                            ; ===========================================================================
00015690                            
00015690                            loc_14936:
00015690 0C41 000E                  		cmpi.w	#$E,d1
00015694 6E00                       		bgt.s	loc_14942
00015696                            
00015696                            loc_1493C:
00015696 9368 0008                  		sub.w	d1,8(a0)
0001569A 4E75                       		rts	
0001569C                            ; ===========================================================================
0001569C                            
0001569C                            loc_14942:
0001569C 4A28 0038                  		tst.b	$38(a0)
000156A0 66F4                       		bne.s	loc_1493C
000156A2 08E8 0001 0022             		bset	#1,$22(a0)
000156A8 08A8 0005 0022             		bclr	#5,$22(a0)
000156AE 117C 0001 001D             		move.b	#1,$1D(a0)
000156B4 4E75                       		rts	
000156B6                            ; End of function Sonic_WalkVertL
000156B6                            
000156B6                            ; ---------------------------------------------------------------------------
000156B6                            ; Subroutine to	find which tile	the object is standing on
000156B6                            ; ---------------------------------------------------------------------------
000156B6                            
000156B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156B6                            
000156B6                            
000156B6                            Floor_ChkTile:				; XREF: FindFloor; et al
000156B6 3002                       		move.w	d2,d0
000156B8 E248                       		lsr.w	#1,d0
000156BA 0240 0380                  		andi.w	#$380,d0
000156BE 3203                       		move.w	d3,d1
000156C0 E049                       		lsr.w	#8,d1
000156C2 0241 007F                  		andi.w	#$7F,d1
000156C6 D041                       		add.w	d1,d0
000156C8 72FF                       		moveq	#-1,d1
000156CA 43F8 A400                  		lea	($FFFFA400).w,a1
000156CE 1231 0000                  		move.b	(a1,d0.w),d1
000156D2 6700                       		beq.s	loc_14996
000156D4 6B00                       		bmi.s	loc_1499A
000156D6 5301                       		subq.b	#1,d1
000156D8 4881                       		ext.w	d1
000156DA EE59                       		ror.w	#7,d1
000156DC 3002                       		move.w	d2,d0
000156DE D040                       		add.w	d0,d0
000156E0 0240 01E0                  		andi.w	#$1E0,d0
000156E4 D240                       		add.w	d0,d1
000156E6 3003                       		move.w	d3,d0
000156E8 E648                       		lsr.w	#3,d0
000156EA 0240 001E                  		andi.w	#$1E,d0
000156EE D240                       		add.w	d0,d1
000156F0                            
000156F0                            loc_14996:
000156F0 2241                       		movea.l	d1,a1
000156F2 4E75                       		rts	
000156F4                            ; ===========================================================================
000156F4                            
000156F4                            loc_1499A:
000156F4 0241 007F                  		andi.w	#$7F,d1
000156F8 0828 0006 0001             		btst	#6,1(a0)
000156FE 6700                       		beq.s	loc_149B2
00015700 5241                       		addq.w	#1,d1
00015702 0C41 0029                  		cmpi.w	#$29,d1
00015706 6600                       		bne.s	loc_149B2
00015708 323C 0051                  		move.w	#$51,d1
0001570C                            
0001570C                            loc_149B2:
0001570C 5301                       		subq.b	#1,d1
0001570E EE59                       		ror.w	#7,d1
00015710 3002                       		move.w	d2,d0
00015712 D040                       		add.w	d0,d0
00015714 0240 01E0                  		andi.w	#$1E0,d0
00015718 D240                       		add.w	d0,d1
0001571A 3003                       		move.w	d3,d0
0001571C E648                       		lsr.w	#3,d0
0001571E 0240 001E                  		andi.w	#$1E,d0
00015722 D240                       		add.w	d0,d1
00015724 2241                       		movea.l	d1,a1
00015726 4E75                       		rts	
00015728                            ; End of function Floor_ChkTile
00015728                            
00015728                            
00015728                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015728                            
00015728                            
00015728                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015728 618C                       		bsr.s	Floor_ChkTile
0001572A 3011                       		move.w	(a1),d0
0001572C 3800                       		move.w	d0,d4
0001572E 0240 07FF                  		andi.w	#$7FF,d0
00015732 6700                       		beq.s	loc_149DE
00015734 0B04                       		btst	d5,d4
00015736 6600                       		bne.s	loc_149EC
00015738                            
00015738                            loc_149DE:
00015738 D44B                       		add.w	a3,d2
0001573A 6100 0000                  		bsr.w	FindFloor2
0001573E 944B                       		sub.w	a3,d2
00015740 0641 0010                  		addi.w	#$10,d1
00015744 4E75                       		rts	
00015746                            ; ===========================================================================
00015746                            
00015746                            loc_149EC:
00015746 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
0001574A 1032 0000                  		move.b	(a2,d0.w),d0
0001574E 0240 00FF                  		andi.w	#$FF,d0
00015752 67E4                       		beq.s	loc_149DE
00015754 45F9 0000 0000             		lea	(AngleMap).l,a2
0001575A 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001575E E948                       		lsl.w	#4,d0
00015760 3203                       		move.w	d3,d1
00015762 0804 000B                  		btst	#$B,d4
00015766 6700                       		beq.s	loc_14A12
00015768 4641                       		not.w	d1
0001576A 4414                       		neg.b	(a4)
0001576C                            
0001576C                            loc_14A12:
0001576C 0804 000C                  		btst	#$C,d4
00015770 6700                       		beq.s	loc_14A22
00015772 0614 0040                  		addi.b	#$40,(a4)
00015776 4414                       		neg.b	(a4)
00015778 0414 0040                  		subi.b	#$40,(a4)
0001577C                            
0001577C                            loc_14A22:
0001577C 0241 000F                  		andi.w	#$F,d1
00015780 D240                       		add.w	d0,d1
00015782 45F9 0000 0000             		lea	(CollArray1).l,a2
00015788 1032 1000                  		move.b	(a2,d1.w),d0
0001578C 4880                       		ext.w	d0
0001578E BD44                       		eor.w	d6,d4
00015790 0804 000C                  		btst	#$C,d4
00015794 6700                       		beq.s	loc_14A3E
00015796 4440                       		neg.w	d0
00015798                            
00015798                            loc_14A3E:
00015798 4A40                       		tst.w	d0
0001579A 679C                       		beq.s	loc_149DE
0001579C 6B00                       		bmi.s	loc_14A5A
0001579E 0C00 0010                  		cmpi.b	#$10,d0
000157A2 6700                       		beq.s	loc_14A66
000157A4 3202                       		move.w	d2,d1
000157A6 0241 000F                  		andi.w	#$F,d1
000157AA D041                       		add.w	d1,d0
000157AC 323C 000F                  		move.w	#$F,d1
000157B0 9240                       		sub.w	d0,d1
000157B2 4E75                       		rts	
000157B4                            ; ===========================================================================
000157B4                            
000157B4                            loc_14A5A:
000157B4 3202                       		move.w	d2,d1
000157B6 0241 000F                  		andi.w	#$F,d1
000157BA D041                       		add.w	d1,d0
000157BC 6A00 FF7A                  		bpl.w	loc_149DE
000157C0                            
000157C0                            loc_14A66:
000157C0 944B                       		sub.w	a3,d2
000157C2 6100 0000                  		bsr.w	FindFloor2
000157C6 D44B                       		add.w	a3,d2
000157C8 0441 0010                  		subi.w	#$10,d1
000157CC 4E75                       		rts	
000157CE                            ; End of function FindFloor
000157CE                            
000157CE                            
000157CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157CE                            
000157CE                            
000157CE                            FindFloor2:				; XREF: FindFloor
000157CE 6100 FEE6                  		bsr.w	Floor_ChkTile
000157D2 3011                       		move.w	(a1),d0
000157D4 3800                       		move.w	d0,d4
000157D6 0240 07FF                  		andi.w	#$7FF,d0
000157DA 6700                       		beq.s	loc_14A86
000157DC 0B04                       		btst	d5,d4
000157DE 6600                       		bne.s	loc_14A94
000157E0                            
000157E0                            loc_14A86:
000157E0 323C 000F                  		move.w	#$F,d1
000157E4 3002                       		move.w	d2,d0
000157E6 0240 000F                  		andi.w	#$F,d0
000157EA 9240                       		sub.w	d0,d1
000157EC 4E75                       		rts	
000157EE                            ; ===========================================================================
000157EE                            
000157EE                            loc_14A94:
000157EE 2478 F796                  		movea.l	($FFFFF796).w,a2
000157F2 1032 0000                  		move.b	(a2,d0.w),d0
000157F6 0240 00FF                  		andi.w	#$FF,d0
000157FA 67E4                       		beq.s	loc_14A86
000157FC 45F9 0000 0000             		lea	(AngleMap).l,a2
00015802 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015806 E948                       		lsl.w	#4,d0
00015808 3203                       		move.w	d3,d1
0001580A 0804 000B                  		btst	#$B,d4
0001580E 6700                       		beq.s	loc_14ABA
00015810 4641                       		not.w	d1
00015812 4414                       		neg.b	(a4)
00015814                            
00015814                            loc_14ABA:
00015814 0804 000C                  		btst	#$C,d4
00015818 6700                       		beq.s	loc_14ACA
0001581A 0614 0040                  		addi.b	#$40,(a4)
0001581E 4414                       		neg.b	(a4)
00015820 0414 0040                  		subi.b	#$40,(a4)
00015824                            
00015824                            loc_14ACA:
00015824 0241 000F                  		andi.w	#$F,d1
00015828 D240                       		add.w	d0,d1
0001582A 45F9 0000 0000             		lea	(CollArray1).l,a2
00015830 1032 1000                  		move.b	(a2,d1.w),d0
00015834 4880                       		ext.w	d0
00015836 BD44                       		eor.w	d6,d4
00015838 0804 000C                  		btst	#$C,d4
0001583C 6700                       		beq.s	loc_14AE6
0001583E 4440                       		neg.w	d0
00015840                            
00015840                            loc_14AE6:
00015840 4A40                       		tst.w	d0
00015842 679C                       		beq.s	loc_14A86
00015844 6B00                       		bmi.s	loc_14AFC
00015846 3202                       		move.w	d2,d1
00015848 0241 000F                  		andi.w	#$F,d1
0001584C D041                       		add.w	d1,d0
0001584E 323C 000F                  		move.w	#$F,d1
00015852 9240                       		sub.w	d0,d1
00015854 4E75                       		rts	
00015856                            ; ===========================================================================
00015856                            
00015856                            loc_14AFC:
00015856 3202                       		move.w	d2,d1
00015858 0241 000F                  		andi.w	#$F,d1
0001585C D041                       		add.w	d1,d0
0001585E 6A00 FF80                  		bpl.w	loc_14A86
00015862 4641                       		not.w	d1
00015864 4E75                       		rts	
00015866                            ; End of function FindFloor2
00015866                            
00015866                            
00015866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015866                            
00015866                            
00015866                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015866 6100 FE4E                  		bsr.w	Floor_ChkTile
0001586A 3011                       		move.w	(a1),d0
0001586C 3800                       		move.w	d0,d4
0001586E 0240 07FF                  		andi.w	#$7FF,d0
00015872 6700                       		beq.s	loc_14B1E
00015874 0B04                       		btst	d5,d4
00015876 6600                       		bne.s	loc_14B2C
00015878                            
00015878                            loc_14B1E:
00015878 D64B                       		add.w	a3,d3
0001587A 6100 0000                  		bsr.w	FindWall2
0001587E 964B                       		sub.w	a3,d3
00015880 0641 0010                  		addi.w	#$10,d1
00015884 4E75                       		rts	
00015886                            ; ===========================================================================
00015886                            
00015886                            loc_14B2C:
00015886 2478 F796                  		movea.l	($FFFFF796).w,a2
0001588A 1032 0000                  		move.b	(a2,d0.w),d0
0001588E 0240 00FF                  		andi.w	#$FF,d0
00015892 67E4                       		beq.s	loc_14B1E
00015894 45F9 0000 0000             		lea	(AngleMap).l,a2
0001589A 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001589E E948                       		lsl.w	#4,d0
000158A0 3202                       		move.w	d2,d1
000158A2 0804 000C                  		btst	#$C,d4
000158A6 6700                       		beq.s	loc_14B5A
000158A8 4641                       		not.w	d1
000158AA 0614 0040                  		addi.b	#$40,(a4)
000158AE 4414                       		neg.b	(a4)
000158B0 0414 0040                  		subi.b	#$40,(a4)
000158B4                            
000158B4                            loc_14B5A:
000158B4 0804 000B                  		btst	#$B,d4
000158B8 6700                       		beq.s	loc_14B62
000158BA 4414                       		neg.b	(a4)
000158BC                            
000158BC                            loc_14B62:
000158BC 0241 000F                  		andi.w	#$F,d1
000158C0 D240                       		add.w	d0,d1
000158C2 45F9 0000 0000             		lea	(CollArray2).l,a2
000158C8 1032 1000                  		move.b	(a2,d1.w),d0
000158CC 4880                       		ext.w	d0
000158CE BD44                       		eor.w	d6,d4
000158D0 0804 000B                  		btst	#$B,d4
000158D4 6700                       		beq.s	loc_14B7E
000158D6 4440                       		neg.w	d0
000158D8                            
000158D8                            loc_14B7E:
000158D8 4A40                       		tst.w	d0
000158DA 679C                       		beq.s	loc_14B1E
000158DC 6B00                       		bmi.s	loc_14B9A
000158DE 0C00 0010                  		cmpi.b	#$10,d0
000158E2 6700                       		beq.s	loc_14BA6
000158E4 3203                       		move.w	d3,d1
000158E6 0241 000F                  		andi.w	#$F,d1
000158EA D041                       		add.w	d1,d0
000158EC 323C 000F                  		move.w	#$F,d1
000158F0 9240                       		sub.w	d0,d1
000158F2 4E75                       		rts	
000158F4                            ; ===========================================================================
000158F4                            
000158F4                            loc_14B9A:
000158F4 3203                       		move.w	d3,d1
000158F6 0241 000F                  		andi.w	#$F,d1
000158FA D041                       		add.w	d1,d0
000158FC 6A00 FF7A                  		bpl.w	loc_14B1E
00015900                            
00015900                            loc_14BA6:
00015900 964B                       		sub.w	a3,d3
00015902 6100 0000                  		bsr.w	FindWall2
00015906 D64B                       		add.w	a3,d3
00015908 0441 0010                  		subi.w	#$10,d1
0001590C 4E75                       		rts	
0001590E                            ; End of function FindWall
0001590E                            
0001590E                            
0001590E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001590E                            
0001590E                            
0001590E                            FindWall2:				; XREF: FindWall
0001590E 6100 FDA6                  		bsr.w	Floor_ChkTile
00015912 3011                       		move.w	(a1),d0
00015914 3800                       		move.w	d0,d4
00015916 0240 07FF                  		andi.w	#$7FF,d0
0001591A 6700                       		beq.s	loc_14BC6
0001591C 0B04                       		btst	d5,d4
0001591E 6600                       		bne.s	loc_14BD4
00015920                            
00015920                            loc_14BC6:
00015920 323C 000F                  		move.w	#$F,d1
00015924 3003                       		move.w	d3,d0
00015926 0240 000F                  		andi.w	#$F,d0
0001592A 9240                       		sub.w	d0,d1
0001592C 4E75                       		rts	
0001592E                            ; ===========================================================================
0001592E                            
0001592E                            loc_14BD4:
0001592E 2478 F796                  		movea.l	($FFFFF796).w,a2
00015932 1032 0000                  		move.b	(a2,d0.w),d0
00015936 0240 00FF                  		andi.w	#$FF,d0
0001593A 67E4                       		beq.s	loc_14BC6
0001593C 45F9 0000 0000             		lea	(AngleMap).l,a2
00015942 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015946 E948                       		lsl.w	#4,d0
00015948 3202                       		move.w	d2,d1
0001594A 0804 000C                  		btst	#$C,d4
0001594E 6700                       		beq.s	loc_14C02
00015950 4641                       		not.w	d1
00015952 0614 0040                  		addi.b	#$40,(a4)
00015956 4414                       		neg.b	(a4)
00015958 0414 0040                  		subi.b	#$40,(a4)
0001595C                            
0001595C                            loc_14C02:
0001595C 0804 000B                  		btst	#$B,d4
00015960 6700                       		beq.s	loc_14C0A
00015962 4414                       		neg.b	(a4)
00015964                            
00015964                            loc_14C0A:
00015964 0241 000F                  		andi.w	#$F,d1
00015968 D240                       		add.w	d0,d1
0001596A 45F9 0000 0000             		lea	(CollArray2).l,a2
00015970 1032 1000                  		move.b	(a2,d1.w),d0
00015974 4880                       		ext.w	d0
00015976 BD44                       		eor.w	d6,d4
00015978 0804 000B                  		btst	#$B,d4
0001597C 6700                       		beq.s	loc_14C26
0001597E 4440                       		neg.w	d0
00015980                            
00015980                            loc_14C26:
00015980 4A40                       		tst.w	d0
00015982 679C                       		beq.s	loc_14BC6
00015984 6B00                       		bmi.s	loc_14C3C
00015986 3203                       		move.w	d3,d1
00015988 0241 000F                  		andi.w	#$F,d1
0001598C D041                       		add.w	d1,d0
0001598E 323C 000F                  		move.w	#$F,d1
00015992 9240                       		sub.w	d0,d1
00015994 4E75                       		rts	
00015996                            ; ===========================================================================
00015996                            
00015996                            loc_14C3C:
00015996 3203                       		move.w	d3,d1
00015998 0241 000F                  		andi.w	#$F,d1
0001599C D041                       		add.w	d1,d0
0001599E 6A00 FF80                  		bpl.w	loc_14BC6
000159A2 4641                       		not.w	d1
000159A4 4E75                       		rts	
000159A6                            ; End of function FindWall2
000159A6                            
000159A6                            ; ---------------------------------------------------------------------------
000159A6                            ; Unused floor/wall subroutine - logs something	to do with collision
000159A6                            ; ---------------------------------------------------------------------------
000159A6                            
000159A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159A6                            
000159A6                            
000159A6                            FloorLog_Unk:				; XREF: Level
000159A6 4E75                       		rts	
000159A8                            
000159A8 43F9 0000 0000             		lea	(CollArray1).l,a1
000159AE 45F9 0000 0000             		lea	(CollArray1).l,a2
000159B4 363C 00FF                  		move.w	#$FF,d3
000159B8                            
000159B8                            loc_14C5E:
000159B8 7A10                       		moveq	#$10,d5
000159BA 343C 000F                  		move.w	#$F,d2
000159BE                            
000159BE                            loc_14C64:
000159BE 7800                       		moveq	#0,d4
000159C0 323C 000F                  		move.w	#$F,d1
000159C4                            
000159C4                            loc_14C6A:
000159C4 3019                       		move.w	(a1)+,d0
000159C6 EAA8                       		lsr.l	d5,d0
000159C8 D944                       		addx.w	d4,d4
000159CA 51C9 FFF8                  		dbf	d1,loc_14C6A
000159CE                            
000159CE 34C4                       		move.w	d4,(a2)+
000159D0 92FC 0020                  		suba.w	#$20,a1
000159D4 5345                       		subq.w	#1,d5
000159D6 51CA FFE6                  		dbf	d2,loc_14C64
000159DA                            
000159DA D2FC 0020                  		adda.w	#$20,a1
000159DE 51CB FFD8                  		dbf	d3,loc_14C5E
000159E2                            
000159E2 43F9 0000 0000             		lea	(CollArray1).l,a1
000159E8 45F9 0000 0000             		lea	(CollArray2).l,a2
000159EE 6100                       		bsr.s	FloorLog_Unk2
000159F0 43F9 0000 0000             		lea	(CollArray1).l,a1
000159F6 45F9 0000 0000             		lea	(CollArray1).l,a2
000159FC                            
000159FC                            ; End of function FloorLog_Unk
000159FC                            
000159FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159FC                            
000159FC                            
000159FC                            FloorLog_Unk2:				; XREF: FloorLog_Unk
000159FC 363C 0FFF                  		move.w	#$FFF,d3
00015A00                            
00015A00                            loc_14CA6:
00015A00 7400                       		moveq	#0,d2
00015A02 323C 000F                  		move.w	#$F,d1
00015A06 3019                       		move.w	(a1)+,d0
00015A08 6700                       		beq.s	loc_14CD4
00015A0A 6B00                       		bmi.s	loc_14CBE
00015A0C                            
00015A0C                            loc_14CB2:
00015A0C E248                       		lsr.w	#1,d0
00015A0E 6400                       		bcc.s	loc_14CB8
00015A10 5202                       		addq.b	#1,d2
00015A12                            
00015A12                            loc_14CB8:
00015A12 51C9 FFF8                  		dbf	d1,loc_14CB2
00015A16                            
00015A16 6000                       		bra.s	loc_14CD6
00015A18                            ; ===========================================================================
00015A18                            
00015A18                            loc_14CBE:
00015A18 0C40 FFFF                  		cmpi.w	#-1,d0
00015A1C 6700                       		beq.s	loc_14CD0
00015A1E                            
00015A1E                            loc_14CC4:
00015A1E E348                       		lsl.w	#1,d0
00015A20 6400                       		bcc.s	loc_14CCA
00015A22 5302                       		subq.b	#1,d2
00015A24                            
00015A24                            loc_14CCA:
00015A24 51C9 FFF8                  		dbf	d1,loc_14CC4
00015A28                            
00015A28 6000                       		bra.s	loc_14CD6
00015A2A                            ; ===========================================================================
00015A2A                            
00015A2A                            loc_14CD0:
00015A2A 303C 0010                  		move.w	#$10,d0
00015A2E                            
00015A2E                            loc_14CD4:
00015A2E 3400                       		move.w	d0,d2
00015A30                            
00015A30                            loc_14CD6:
00015A30 14C2                       		move.b	d2,(a2)+
00015A32 51CB FFCC                  		dbf	d3,loc_14CA6
00015A36                            
00015A36 4E75                       		rts	
00015A38                            
00015A38                            ; End of function FloorLog_Unk2
00015A38                            
00015A38                            
00015A38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A38                            
00015A38                            
00015A38                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015A38 2628 0008                  		move.l	8(a0),d3
00015A3C 2428 000C                  		move.l	$C(a0),d2
00015A40 3228 0010                  		move.w	$10(a0),d1
00015A44 48C1                       		ext.l	d1
00015A46 E181                       		asl.l	#8,d1
00015A48 D681                       		add.l	d1,d3
00015A4A 3228 0012                  		move.w	$12(a0),d1
00015A4E 48C1                       		ext.l	d1
00015A50 E181                       		asl.l	#8,d1
00015A52 D481                       		add.l	d1,d2
00015A54 4842                       		swap	d2
00015A56 4843                       		swap	d3
00015A58 11C0 F768                  		move.b	d0,($FFFFF768).w
00015A5C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015A60 1200                       		move.b	d0,d1
00015A62 0600 0020                  		addi.b	#$20,d0
00015A66 6A00                       		bpl.s	loc_14D1A
00015A68 1001                       		move.b	d1,d0
00015A6A 6A00                       		bpl.s	loc_14D14
00015A6C 5300                       		subq.b	#1,d0
00015A6E                            
00015A6E                            loc_14D14:
00015A6E 0600 0020                  		addi.b	#$20,d0
00015A72 6000                       		bra.s	loc_14D24
00015A74                            ; ===========================================================================
00015A74                            
00015A74                            loc_14D1A:
00015A74 1001                       		move.b	d1,d0
00015A76 6A00                       		bpl.s	loc_14D20
00015A78 5200                       		addq.b	#1,d0
00015A7A                            
00015A7A                            loc_14D20:
00015A7A 0600 001F                  		addi.b	#$1F,d0
00015A7E                            
00015A7E                            loc_14D24:
00015A7E 0200 00C0                  		andi.b	#$C0,d0
00015A82 6700 0000                  		beq.w	loc_14DF0
00015A86 0C00 0080                  		cmpi.b	#$80,d0
00015A8A 6700 0000                  		beq.w	loc_14F7C
00015A8E 0201 0038                  		andi.b	#$38,d1
00015A92 6600                       		bne.s	loc_14D3C
00015A94 5042                       		addq.w	#8,d2
00015A96                            
00015A96                            loc_14D3C:
00015A96 0C00 0040                  		cmpi.b	#$40,d0
00015A9A 6700 0000                  		beq.w	loc_1504A
00015A9E 6000 0000                  		bra.w	loc_14EBC
00015AA2                            
00015AA2                            ; End of function Sonic_WalkSpeed
00015AA2                            
00015AA2                            
00015AA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AA2                            
00015AA2                            
00015AA2                            sub_14D48:				; XREF: Sonic_Jump
00015AA2 11C0 F768                  		move.b	d0,($FFFFF768).w
00015AA6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015AAA 0600 0020                  		addi.b	#$20,d0
00015AAE 0200 00C0                  		andi.b	#$C0,d0
00015AB2 0C00 0040                  		cmpi.b	#$40,d0
00015AB6 6700 0000                  		beq.w	loc_14FD6
00015ABA 0C00 0080                  		cmpi.b	#$80,d0
00015ABE 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015AC2 0C00 00C0                  		cmpi.b	#$C0,d0
00015AC6 6700 0000                  		beq.w	sub_14E50
00015ACA                            
00015ACA                            ; End of function sub_14D48
00015ACA                            
00015ACA                            ; ---------------------------------------------------------------------------
00015ACA                            ; Subroutine to	make Sonic land	on the floor after jumping
00015ACA                            ; ---------------------------------------------------------------------------
00015ACA                            
00015ACA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015ACA                            
00015ACA                            
00015ACA                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015ACA 3428 000C                  		move.w	$C(a0),d2
00015ACE 3628 0008                  		move.w	8(a0),d3
00015AD2 7000                       		moveq	#0,d0
00015AD4 1028 0016                  		move.b	$16(a0),d0
00015AD8 4880                       		ext.w	d0
00015ADA D440                       		add.w	d0,d2
00015ADC 1028 0017                  		move.b	$17(a0),d0
00015AE0 4880                       		ext.w	d0
00015AE2 D640                       		add.w	d0,d3
00015AE4 49F8 F768                  		lea	($FFFFF768).w,a4
00015AE8 367C 0010                  		movea.w	#$10,a3
00015AEC 3C3C 0000                  		move.w	#0,d6
00015AF0 7A0D                       		moveq	#$D,d5
00015AF2 6100 FC34                  		bsr.w	FindFloor
00015AF6 3F01                       		move.w	d1,-(sp)
00015AF8 3428 000C                  		move.w	$C(a0),d2
00015AFC 3628 0008                  		move.w	8(a0),d3
00015B00 7000                       		moveq	#0,d0
00015B02 1028 0016                  		move.b	$16(a0),d0
00015B06 4880                       		ext.w	d0
00015B08 D440                       		add.w	d0,d2
00015B0A 1028 0017                  		move.b	$17(a0),d0
00015B0E 4880                       		ext.w	d0
00015B10 9640                       		sub.w	d0,d3
00015B12 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015B16 367C 0010                  		movea.w	#$10,a3
00015B1A 3C3C 0000                  		move.w	#0,d6
00015B1E 7A0D                       		moveq	#$D,d5
00015B20 6100 FC06                  		bsr.w	FindFloor
00015B24 301F                       		move.w	(sp)+,d0
00015B26 143C 0000                  		move.b	#0,d2
00015B2A                            
00015B2A                            loc_14DD0:
00015B2A 1638 F76A                  		move.b	($FFFFF76A).w,d3
00015B2E B240                       		cmp.w	d0,d1
00015B30 6F00                       		ble.s	loc_14DDE
00015B32 1638 F768                  		move.b	($FFFFF768).w,d3
00015B36 C141                       		exg	d0,d1
00015B38                            
00015B38                            loc_14DDE:
00015B38 0803 0000                  		btst	#0,d3
00015B3C 6700                       		beq.s	locret_14DE6
00015B3E 1602                       		move.b	d2,d3
00015B40                            
00015B40                            locret_14DE6:
00015B40 4E75                       		rts	
00015B42                            
00015B42                            ; End of function Sonic_HitFloor
00015B42                            
00015B42                            ; ===========================================================================
00015B42 3428 000C                  		move.w	$C(a0),d2
00015B46 3628 0008                  		move.w	8(a0),d3
00015B4A                            
00015B4A                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015B4A 0642 000A                  		addi.w	#$A,d2
00015B4E 49F8 F768                  		lea	($FFFFF768).w,a4
00015B52 367C 0010                  		movea.w	#$10,a3
00015B56 3C3C 0000                  		move.w	#0,d6
00015B5A 7A0E                       		moveq	#$E,d5
00015B5C 6100 FBCA                  		bsr.w	FindFloor
00015B60 143C 0000                  		move.b	#0,d2
00015B64                            
00015B64                            loc_14E0A:				; XREF: sub_14EB4
00015B64 1638 F768                  		move.b	($FFFFF768).w,d3
00015B68 0803 0000                  		btst	#0,d3
00015B6C 6700                       		beq.s	locret_14E16
00015B6E 1602                       		move.b	d2,d3
00015B70                            
00015B70                            locret_14E16:
00015B70 4E75                       		rts	
00015B72                            
00015B72                            ; ---------------------------------------------------------------------------
00015B72                            ; Subroutine allowing objects to interact with the floor
00015B72                            ; ---------------------------------------------------------------------------
00015B72                            
00015B72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B72                            
00015B72                            
00015B72                            ObjHitFloor:
00015B72 3628 0008                  		move.w	8(a0),d3
00015B76                            
00015B76                            ; End of function ObjHitFloor
00015B76                            
00015B76                            
00015B76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B76                            
00015B76                            
00015B76                            ObjHitFloor2:
00015B76 3428 000C                  		move.w	$C(a0),d2
00015B7A 7000                       		moveq	#0,d0
00015B7C 1028 0016                  		move.b	$16(a0),d0
00015B80 4880                       		ext.w	d0
00015B82 D440                       		add.w	d0,d2
00015B84 49F8 F768                  		lea	($FFFFF768).w,a4
00015B88 18BC 0000                  		move.b	#0,(a4)
00015B8C 367C 0010                  		movea.w	#$10,a3
00015B90 3C3C 0000                  		move.w	#0,d6
00015B94 7A0D                       		moveq	#$D,d5
00015B96 6100 FB90                  		bsr.w	FindFloor
00015B9A 1638 F768                  		move.b	($FFFFF768).w,d3
00015B9E 0803 0000                  		btst	#0,d3
00015BA2 6700                       		beq.s	locret_14E4E
00015BA4 163C 0000                  		move.b	#0,d3
00015BA8                            
00015BA8                            locret_14E4E:
00015BA8 4E75                       		rts	
00015BAA                            ; End of function ObjHitFloor2
00015BAA                            
00015BAA                            
00015BAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BAA                            
00015BAA                            
00015BAA                            sub_14E50:				; XREF: sub_14D48
00015BAA 3428 000C                  		move.w	$C(a0),d2
00015BAE 3628 0008                  		move.w	8(a0),d3
00015BB2 7000                       		moveq	#0,d0
00015BB4 1028 0017                  		move.b	$17(a0),d0
00015BB8 4880                       		ext.w	d0
00015BBA 9440                       		sub.w	d0,d2
00015BBC 1028 0016                  		move.b	$16(a0),d0
00015BC0 4880                       		ext.w	d0
00015BC2 D640                       		add.w	d0,d3
00015BC4 49F8 F768                  		lea	($FFFFF768).w,a4
00015BC8 367C 0010                  		movea.w	#$10,a3
00015BCC 3C3C 0000                  		move.w	#0,d6
00015BD0 7A0E                       		moveq	#$E,d5
00015BD2 6100 FC92                  		bsr.w	FindWall
00015BD6 3F01                       		move.w	d1,-(sp)
00015BD8 3428 000C                  		move.w	$C(a0),d2
00015BDC 3628 0008                  		move.w	8(a0),d3
00015BE0 7000                       		moveq	#0,d0
00015BE2 1028 0017                  		move.b	$17(a0),d0
00015BE6 4880                       		ext.w	d0
00015BE8 D440                       		add.w	d0,d2
00015BEA 1028 0016                  		move.b	$16(a0),d0
00015BEE 4880                       		ext.w	d0
00015BF0 D640                       		add.w	d0,d3
00015BF2 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015BF6 367C 0010                  		movea.w	#$10,a3
00015BFA 3C3C 0000                  		move.w	#0,d6
00015BFE 7A0E                       		moveq	#$E,d5
00015C00 6100 FC64                  		bsr.w	FindWall
00015C04 301F                       		move.w	(sp)+,d0
00015C06 143C 00C0                  		move.b	#-$40,d2
00015C0A 6000 FF1E                  		bra.w	loc_14DD0
00015C0E                            
00015C0E                            ; End of function sub_14E50
00015C0E                            
00015C0E                            
00015C0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C0E                            
00015C0E                            
00015C0E                            sub_14EB4:				; XREF: Sonic_Floor
00015C0E 3428 000C                  		move.w	$C(a0),d2
00015C12 3628 0008                  		move.w	8(a0),d3
00015C16                            
00015C16                            loc_14EBC:
00015C16 0643 000A                  		addi.w	#$A,d3
00015C1A 49F8 F768                  		lea	($FFFFF768).w,a4
00015C1E 367C 0010                  		movea.w	#$10,a3
00015C22 3C3C 0000                  		move.w	#0,d6
00015C26 7A0E                       		moveq	#$E,d5
00015C28 6100 FC3C                  		bsr.w	FindWall
00015C2C 143C 00C0                  		move.b	#-$40,d2
00015C30 6000 FF32                  		bra.w	loc_14E0A
00015C34                            
00015C34                            ; End of function sub_14EB4
00015C34                            
00015C34                            ; ---------------------------------------------------------------------------
00015C34                            ; Subroutine to	detect when an object hits a wall to its right
00015C34                            ; ---------------------------------------------------------------------------
00015C34                            
00015C34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C34                            
00015C34                            
00015C34                            ObjHitWallRight:
00015C34 D668 0008                  		add.w	8(a0),d3
00015C38 3428 000C                  		move.w	$C(a0),d2
00015C3C 49F8 F768                  		lea	($FFFFF768).w,a4
00015C40 18BC 0000                  		move.b	#0,(a4)
00015C44 367C 0010                  		movea.w	#$10,a3
00015C48 3C3C 0000                  		move.w	#0,d6
00015C4C 7A0E                       		moveq	#$E,d5
00015C4E 6100 FC16                  		bsr.w	FindWall
00015C52 1638 F768                  		move.b	($FFFFF768).w,d3
00015C56 0803 0000                  		btst	#0,d3
00015C5A 6700                       		beq.s	locret_14F06
00015C5C 163C 00C0                  		move.b	#-$40,d3
00015C60                            
00015C60                            locret_14F06:
00015C60 4E75                       		rts	
00015C62                            
00015C62                            ; End of function ObjHitWallRight
00015C62                            
00015C62                            ; ---------------------------------------------------------------------------
00015C62                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015C62                            ; touches them
00015C62                            ; ---------------------------------------------------------------------------
00015C62                            
00015C62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C62                            
00015C62                            
00015C62                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015C62 3428 000C                  		move.w	$C(a0),d2
00015C66 3628 0008                  		move.w	8(a0),d3
00015C6A 7000                       		moveq	#0,d0
00015C6C 1028 0016                  		move.b	$16(a0),d0
00015C70 4880                       		ext.w	d0
00015C72 9440                       		sub.w	d0,d2
00015C74 0A42 000F                  		eori.w	#$F,d2
00015C78 1028 0017                  		move.b	$17(a0),d0
00015C7C 4880                       		ext.w	d0
00015C7E D640                       		add.w	d0,d3
00015C80 49F8 F768                  		lea	($FFFFF768).w,a4
00015C84 367C FFF0                  		movea.w	#-$10,a3
00015C88 3C3C 1000                  		move.w	#$1000,d6
00015C8C 7A0E                       		moveq	#$E,d5
00015C8E 6100 FA98                  		bsr.w	FindFloor
00015C92 3F01                       		move.w	d1,-(sp)
00015C94 3428 000C                  		move.w	$C(a0),d2
00015C98 3628 0008                  		move.w	8(a0),d3
00015C9C 7000                       		moveq	#0,d0
00015C9E 1028 0016                  		move.b	$16(a0),d0
00015CA2 4880                       		ext.w	d0
00015CA4 9440                       		sub.w	d0,d2
00015CA6 0A42 000F                  		eori.w	#$F,d2
00015CAA 1028 0017                  		move.b	$17(a0),d0
00015CAE 4880                       		ext.w	d0
00015CB0 9640                       		sub.w	d0,d3
00015CB2 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015CB6 367C FFF0                  		movea.w	#-$10,a3
00015CBA 3C3C 1000                  		move.w	#$1000,d6
00015CBE 7A0E                       		moveq	#$E,d5
00015CC0 6100 FA66                  		bsr.w	FindFloor
00015CC4 301F                       		move.w	(sp)+,d0
00015CC6 143C 0080                  		move.b	#-$80,d2
00015CCA 6000 FE5E                  		bra.w	loc_14DD0
00015CCE                            ; End of function Sonic_DontRunOnWalls
00015CCE                            
00015CCE                            ; ===========================================================================
00015CCE 3428 000C                  		move.w	$C(a0),d2
00015CD2 3628 0008                  		move.w	8(a0),d3
00015CD6                            
00015CD6                            loc_14F7C:
00015CD6 0442 000A                  		subi.w	#$A,d2
00015CDA 0A42 000F                  		eori.w	#$F,d2
00015CDE 49F8 F768                  		lea	($FFFFF768).w,a4
00015CE2 367C FFF0                  		movea.w	#-$10,a3
00015CE6 3C3C 1000                  		move.w	#$1000,d6
00015CEA 7A0E                       		moveq	#$E,d5
00015CEC 6100 FA3A                  		bsr.w	FindFloor
00015CF0 143C 0080                  		move.b	#-$80,d2
00015CF4 6000 FE6E                  		bra.w	loc_14E0A
00015CF8                            
00015CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CF8                            
00015CF8                            
00015CF8                            ObjHitCeiling:
00015CF8 3428 000C                  		move.w	$C(a0),d2
00015CFC 3628 0008                  		move.w	8(a0),d3
00015D00 7000                       		moveq	#0,d0
00015D02 1028 0016                  		move.b	$16(a0),d0
00015D06 4880                       		ext.w	d0
00015D08 9440                       		sub.w	d0,d2
00015D0A 0A42 000F                  		eori.w	#$F,d2
00015D0E 49F8 F768                  		lea	($FFFFF768).w,a4
00015D12 367C FFF0                  		movea.w	#-$10,a3
00015D16 3C3C 1000                  		move.w	#$1000,d6
00015D1A 7A0E                       		moveq	#$E,d5
00015D1C 6100 FA0A                  		bsr.w	FindFloor
00015D20 1638 F768                  		move.b	($FFFFF768).w,d3
00015D24 0803 0000                  		btst	#0,d3
00015D28 6700                       		beq.s	locret_14FD4
00015D2A 163C 0080                  		move.b	#-$80,d3
00015D2E                            
00015D2E                            locret_14FD4:
00015D2E 4E75                       		rts	
00015D30                            ; End of function ObjHitCeiling
00015D30                            
00015D30                            ; ===========================================================================
00015D30                            
00015D30                            loc_14FD6:				; XREF: sub_14D48
00015D30 3428 000C                  		move.w	$C(a0),d2
00015D34 3628 0008                  		move.w	8(a0),d3
00015D38 7000                       		moveq	#0,d0
00015D3A 1028 0017                  		move.b	$17(a0),d0
00015D3E 4880                       		ext.w	d0
00015D40 9440                       		sub.w	d0,d2
00015D42 1028 0016                  		move.b	$16(a0),d0
00015D46 4880                       		ext.w	d0
00015D48 9640                       		sub.w	d0,d3
00015D4A 0A43 000F                  		eori.w	#$F,d3
00015D4E 49F8 F768                  		lea	($FFFFF768).w,a4
00015D52 367C FFF0                  		movea.w	#-$10,a3
00015D56 3C3C 0800                  		move.w	#$800,d6
00015D5A 7A0E                       		moveq	#$E,d5
00015D5C 6100 FB08                  		bsr.w	FindWall
00015D60 3F01                       		move.w	d1,-(sp)
00015D62 3428 000C                  		move.w	$C(a0),d2
00015D66 3628 0008                  		move.w	8(a0),d3
00015D6A 7000                       		moveq	#0,d0
00015D6C 1028 0017                  		move.b	$17(a0),d0
00015D70 4880                       		ext.w	d0
00015D72 D440                       		add.w	d0,d2
00015D74 1028 0016                  		move.b	$16(a0),d0
00015D78 4880                       		ext.w	d0
00015D7A 9640                       		sub.w	d0,d3
00015D7C 0A43 000F                  		eori.w	#$F,d3
00015D80 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015D84 367C FFF0                  		movea.w	#-$10,a3
00015D88 3C3C 0800                  		move.w	#$800,d6
00015D8C 7A0E                       		moveq	#$E,d5
00015D8E 6100 FAD6                  		bsr.w	FindWall
00015D92 301F                       		move.w	(sp)+,d0
00015D94 143C 0040                  		move.b	#$40,d2
00015D98 6000 FD90                  		bra.w	loc_14DD0
00015D9C                            
00015D9C                            ; ---------------------------------------------------------------------------
00015D9C                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015D9C                            ; ---------------------------------------------------------------------------
00015D9C                            
00015D9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D9C                            
00015D9C                            
00015D9C                            Sonic_HitWall:				; XREF: Sonic_Floor
00015D9C 3428 000C                  		move.w	$C(a0),d2
00015DA0 3628 0008                  		move.w	8(a0),d3
00015DA4                            
00015DA4                            loc_1504A:
00015DA4 0443 000A                  		subi.w	#$A,d3
00015DA8 0A43 000F                  		eori.w	#$F,d3
00015DAC 49F8 F768                  		lea	($FFFFF768).w,a4
00015DB0 367C FFF0                  		movea.w	#-$10,a3
00015DB4 3C3C 0800                  		move.w	#$800,d6
00015DB8 7A0E                       		moveq	#$E,d5
00015DBA 6100 FAAA                  		bsr.w	FindWall
00015DBE 143C 0040                  		move.b	#$40,d2
00015DC2 6000 FDA0                  		bra.w	loc_14E0A
00015DC6                            ; End of function Sonic_HitWall
00015DC6                            
00015DC6                            ; ---------------------------------------------------------------------------
00015DC6                            ; Subroutine to	detect when an object hits a wall to its left
00015DC6                            ; ---------------------------------------------------------------------------
00015DC6                            
00015DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015DC6                            
00015DC6                            
00015DC6                            ObjHitWallLeft:
00015DC6 D668 0008                  		add.w	8(a0),d3
00015DCA 3428 000C                  		move.w	$C(a0),d2
00015DCE 49F8 F768                  		lea	($FFFFF768).w,a4
00015DD2 18BC 0000                  		move.b	#0,(a4)
00015DD6 367C FFF0                  		movea.w	#-$10,a3
00015DDA 3C3C 0800                  		move.w	#$800,d6
00015DDE 7A0E                       		moveq	#$E,d5
00015DE0 6100 FA84                  		bsr.w	FindWall
00015DE4 1638 F768                  		move.b	($FFFFF768).w,d3
00015DE8 0803 0000                  		btst	#0,d3
00015DEC 6700                       		beq.s	locret_15098
00015DEE 163C 0040                  		move.b	#$40,d3
00015DF2                            
00015DF2                            locret_15098:
00015DF2 4E75                       		rts	
00015DF4                            ; End of function ObjHitWallLeft
00015DF4                            
00015DF4                            ; ===========================================================================
00015DF4                            ; ---------------------------------------------------------------------------
00015DF4                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015DF4                            ; ---------------------------------------------------------------------------
00015DF4                            
00015DF4                            Obj66:					; XREF: Obj_Index
00015DF4 7000                       		moveq	#0,d0
00015DF6 1028 0024                  		move.b	$24(a0),d0
00015DFA 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015DFE 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015E02                            ; ===========================================================================
00015E02 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015E04 0000                       		dc.w Obj66_Action-Obj66_Index
00015E06 0000                       		dc.w Obj66_Display-Obj66_Index
00015E08 0000                       		dc.w Obj66_Release-Obj66_Index
00015E0A                            ; ===========================================================================
00015E0A                            
00015E0A                            Obj66_Main:				; XREF: Obj66_Index
00015E0A 5428 0024                  		addq.b	#2,$24(a0)
00015E0E 323C 0001                  		move.w	#1,d1
00015E12 2248                       		movea.l	a0,a1
00015E14 6000                       		bra.s	Obj66_MakeItem
00015E16                            ; ===========================================================================
00015E16                            
00015E16                            Obj66_Loop:
00015E16 6100 8916                  		bsr.w	SingleObjLoad
00015E1A 6600                       		bne.s	loc_150FE
00015E1C 12BC 0066                  		move.b	#$66,0(a1)
00015E20 5829 0024                  		addq.b	#4,$24(a1)
00015E24 3368 0008 0008             		move.w	8(a0),8(a1)
00015E2A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015E30 137C 0003 0018             		move.b	#3,$18(a1)
00015E36 137C 0010 001A             		move.b	#$10,$1A(a1)
00015E3C                            
00015E3C                            Obj66_MakeItem:				; XREF: Obj66_Main
00015E3C 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015E44 337C 4348 0002             		move.w	#$4348,2(a1)
00015E4A 0029 0004 0001             		ori.b	#4,1(a1)
00015E50 137C 0038 0019             		move.b	#$38,$19(a1)
00015E56                            
00015E56                            loc_150FE:
00015E56 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015E5A                            
00015E5A 117C 0030 0019             		move.b	#$30,$19(a0)
00015E60 117C 0004 0018             		move.b	#4,$18(a0)
00015E66 317C 003C 0030             		move.w	#$3C,$30(a0)
00015E6C 117C 0001 0034             		move.b	#1,$34(a0)
00015E72 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015E78                            
00015E78                            Obj66_Action:				; XREF: Obj66_Index
00015E78 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015E7C 4A28 0001                  		tst.b	1(a0)
00015E80 6A00 0000                  		bpl.w	Obj66_Display
00015E84 323C 0030                  		move.w	#$30,d1
00015E88 3401                       		move.w	d1,d2
00015E8A 3602                       		move.w	d2,d3
00015E8C 5243                       		addq.w	#1,d3
00015E8E 3828 0008                  		move.w	8(a0),d4
00015E92 6100 A7DE                  		bsr.w	SolidObject
00015E96 0828 0005 0022             		btst	#5,$22(a0)
00015E9C 6700 0000                  		beq.w	Obj66_Display
00015EA0 43F8 D000                  		lea	($FFFFD000).w,a1
00015EA4 720E                       		moveq	#$E,d1
00015EA6 3029 0008                  		move.w	8(a1),d0
00015EAA B068 0008                  		cmp.w	8(a0),d0
00015EAE 6500                       		bcs.s	Obj66_GrabSonic
00015EB0 7207                       		moveq	#7,d1
00015EB2                            
00015EB2                            Obj66_GrabSonic:
00015EB2 B228 001A                  		cmp.b	$1A(a0),d1
00015EB6 6600                       		bne.s	Obj66_Display
00015EB8 1141 0032                  		move.b	d1,$32(a0)
00015EBC 5828 0024                  		addq.b	#4,$24(a0)
00015EC0 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015EC6 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015ECC 337C 0800 0014             		move.w	#$800,$14(a1)
00015ED2 337C 0000 0010             		move.w	#0,$10(a1)
00015ED8 337C 0000 0012             		move.w	#0,$12(a1)
00015EDE 08A8 0005 0022             		bclr	#5,$22(a0)
00015EE4 08A9 0005 0022             		bclr	#5,$22(a1)
00015EEA 08E9 0001 0022             		bset	#1,$22(a1)
00015EF0 3429 0008                  		move.w	8(a1),d2
00015EF4 3629 000C                  		move.w	$C(a1),d3
00015EF8 6100 0000                  		bsr.w	Obj66_ChgPos
00015EFC D569 0008                  		add.w	d2,8(a1)
00015F00 D769 000C                  		add.w	d3,$C(a1)
00015F04 E0E9 0008                  		asr	8(a1)
00015F08 E0E9 000C                  		asr	$C(a1)
00015F0C                            
00015F0C                            Obj66_Display:				; XREF: Obj66_Index
00015F0C 6000 A43C                  		bra.w	MarkObjGone
00015F10                            ; ===========================================================================
00015F10                            
00015F10                            Obj66_Release:				; XREF: Obj66_Index
00015F10 1028 001A                  		move.b	$1A(a0),d0
00015F14 0C00 0004                  		cmpi.b	#4,d0
00015F18 6700                       		beq.s	loc_151C8
00015F1A 0C00 0007                  		cmpi.b	#7,d0
00015F1E 6600                       		bne.s	loc_151F8
00015F20                            
00015F20                            loc_151C8:
00015F20 B028 0032                  		cmp.b	$32(a0),d0
00015F24 6700                       		beq.s	loc_151F8
00015F26 43F8 D000                  		lea	($FFFFD000).w,a1
00015F2A 337C 0000 0010             		move.w	#0,$10(a1)
00015F30 337C 0800 0012             		move.w	#$800,$12(a1)
00015F36 0C00 0004                  		cmpi.b	#4,d0
00015F3A 6700                       		beq.s	loc_151F0
00015F3C 337C 0800 0010             		move.w	#$800,$10(a1)
00015F42 337C 0800 0012             		move.w	#$800,$12(a1)
00015F48                            
00015F48                            loc_151F0:
00015F48 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015F4C 5928 0024                  		subq.b	#4,$24(a0)
00015F50                            
00015F50                            loc_151F8:
00015F50 6100                       		bsr.s	Obj66_ChkSwitch
00015F52 6100                       		bsr.s	Obj66_ChgPos
00015F54 6000 A3F4                  		bra.w	MarkObjGone
00015F58                            
00015F58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F58                            
00015F58                            
00015F58                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015F58 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015F5C 7000                       		moveq	#0,d0
00015F5E 1028 0038                  		move.b	$38(a0),d0
00015F62 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015F68 6700                       		beq.s	loc_15224	; if not, branch
00015F6A 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015F6E 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015F70 4428 0034                  		neg.b	$34(a0)
00015F74 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015F7A 6000                       		bra.s	Obj66_Animate
00015F7C                            ; ===========================================================================
00015F7C                            
00015F7C                            loc_15224:
00015F7C 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015F80                            
00015F80                            Obj66_Animate:
00015F80 5328 001E                  		subq.b	#1,$1E(a0)
00015F84 6A00                       		bpl.s	locret_15246
00015F86 117C 0007 001E             		move.b	#7,$1E(a0)
00015F8C 1228 0034                  		move.b	$34(a0),d1
00015F90 1028 001A                  		move.b	$1A(a0),d0
00015F94 D001                       		add.b	d1,d0
00015F96 0200 000F                  		andi.b	#$F,d0
00015F9A 1140 001A                  		move.b	d0,$1A(a0)
00015F9E                            
00015F9E                            locret_15246:
00015F9E 4E75                       		rts	
00015FA0                            ; End of function Obj66_ChkSwitch
00015FA0                            
00015FA0                            
00015FA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FA0                            
00015FA0                            
00015FA0                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015FA0 43F8 D000                  		lea	($FFFFD000).w,a1
00015FA4 7000                       		moveq	#0,d0
00015FA6 1028 001A                  		move.b	$1A(a0),d0
00015FAA D040                       		add.w	d0,d0
00015FAC 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015FB0 101A                       		move.b	(a2)+,d0
00015FB2 4880                       		ext.w	d0
00015FB4 D068 0008                  		add.w	8(a0),d0
00015FB8 3340 0008                  		move.w	d0,8(a1)
00015FBC 101A                       		move.b	(a2)+,d0
00015FBE 4880                       		ext.w	d0
00015FC0 D068 000C                  		add.w	$C(a0),d0
00015FC4 3340 000C                  		move.w	d0,$C(a1)
00015FC8 4E75                       		rts	
00015FCA                            ; End of function Obj66_ChgPos
00015FCA                            
00015FCA                            ; ===========================================================================
00015FCA E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015FCE E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015FD2 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015FD6 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015FDA 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015FDE 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015FE2 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015FE6 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015FEA                            ; ---------------------------------------------------------------------------
00015FEA                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015FEA                            ; ---------------------------------------------------------------------------
00015FEA                            Map_obj66:
00015FEA                            	include "_maps\obj66.asm"
00015FEA                            ; ---------------------------------------------------------------------------
00015FEA                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015FEA                            ; ---------------------------------------------------------------------------
00015FEA 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015FEE 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015FF2 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015FF6 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015FFA 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015FFE 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00016002 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00016006 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
0001600A 0000                       		dc.w byte_154A4-Map_obj66
0001600C 06                         byte_152B4:	dc.b 6
0001600D E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00016012 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00016017 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001601C E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00016021 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00016026 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
0001602B 06                         byte_152D3:	dc.b 6
0001602C F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00016031 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00016036 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
0001603B F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00016040 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00016045 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
0001604A 06                         byte_152F2:	dc.b 6
0001604B 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00016050 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00016055 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
0001605A 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
0001605F 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00016064 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00016069 06                         byte_15311:	dc.b 6
0001606A 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
0001606F 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00016074 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00016079 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
0001607E 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00016083 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00016088 06                         byte_15330:	dc.b 6
00016089 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0001608E 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00016093 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00016098 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
0001609D 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
000160A2 200A 1800 00               		dc.b $20, $A, $18, 0, 0
000160A7 06                         byte_1534F:	dc.b 6
000160A8 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
000160AD 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
000160B2 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000160B7 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000160BC 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000160C1 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000160C6 06                         byte_1536E:	dc.b 6
000160C7 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000160CC 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000160D1 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000160D6 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000160DB 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000160E0 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000160E5 06                         byte_1538D:	dc.b 6
000160E6 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000160EB F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000160F0 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000160F5 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000160FA 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000160FF 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00016104 06                         byte_153AC:	dc.b 6
00016105 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
0001610A 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
0001610F E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00016114 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00016119 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
0001611E 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00016123 06                         byte_153CB:	dc.b 6
00016124 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00016129 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
0001612E DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00016133 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00016138 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
0001613D F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00016142 06                         byte_153EA:	dc.b 6
00016143 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00016148 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
0001614D D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00016152 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00016157 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
0001615C E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00016161 06                         byte_15409:	dc.b 6
00016162 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00016167 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
0001616C CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00016171 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00016176 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
0001617B E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00016180 06                         byte_15428:	dc.b 6
00016181 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00016186 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001618B C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00016190 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00016195 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001619A E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
0001619F 06                         byte_15447:	dc.b 6
000161A0 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
000161A5 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000161AA CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000161AF CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000161B4 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000161B9 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000161BE 06                         byte_15466:	dc.b 6
000161BF E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000161C4 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000161C9 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000161CE D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000161D3 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000161D8 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000161DD 06                         byte_15485:	dc.b 6
000161DE E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000161E3 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000161E8 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000161ED DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000161F2 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000161F7 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000161FC 0C                         byte_154A4:	dc.b $C
000161FD C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00016202 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00016207 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
0001620C C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00016211 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00016216 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001621B 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00016220 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00016225 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
0001622A 280D 1809 00               		dc.b $28, $D, $18, 9, 0
0001622F 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00016234 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
0001623A 00                         		even
0001623A 00                         		even
0001623A                            
0001623A                            ; ===========================================================================
0001623A                            ; ---------------------------------------------------------------------------
0001623A                            ; Object 67 - disc that	you run	around (SBZ)
0001623A                            ; ---------------------------------------------------------------------------
0001623A                            
0001623A                            Obj67:					; XREF: Obj_Index
0001623A 7000                       		moveq	#0,d0
0001623C 1028 0024                  		move.b	$24(a0),d0
00016240 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00016244 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00016248                            ; ===========================================================================
00016248 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
0001624A 0000                       		dc.w Obj67_Action-Obj67_Index
0001624C                            ; ===========================================================================
0001624C                            
0001624C                            Obj67_Main:				; XREF: Obj67_Index
0001624C 5428 0024                  		addq.b	#2,$24(a0)
00016250 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00016258 317C C344 0002             		move.w	#$C344,2(a0)
0001625E 117C 0004 0001             		move.b	#4,1(a0)
00016264 117C 0004 0018             		move.b	#4,$18(a0)
0001626A 117C 0008 0019             		move.b	#8,$19(a0)
00016270 3168 0008 0032             		move.w	8(a0),$32(a0)
00016276 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001627C 117C 0018 0034             		move.b	#$18,$34(a0)
00016282 117C 0048 0038             		move.b	#$48,$38(a0)
00016288 1228 0028                  		move.b	$28(a0),d1	; get object type
0001628C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016290 6700                       		beq.s	loc_15546
00016292 117C 0010 0034             		move.b	#$10,$34(a0)
00016298 117C 0038 0038             		move.b	#$38,$38(a0)
0001629E                            
0001629E                            loc_15546:
0001629E 1228 0028                  		move.b	$28(a0),d1	; get object type
000162A2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000162A6 4881                       		ext.w	d1
000162A8 E741                       		asl.w	#3,d1
000162AA 3141 0036                  		move.w	d1,$36(a0)
000162AE 1028 0022                  		move.b	$22(a0),d0
000162B2 E418                       		ror.b	#2,d0
000162B4 0200 00C0                  		andi.b	#-$40,d0
000162B8 1140 0026                  		move.b	d0,$26(a0)
000162BC                            
000162BC                            Obj67_Action:				; XREF: Obj67_Index
000162BC 6100 0000                  		bsr.w	Obj67_MoveSonic
000162C0 6100 0000                  		bsr.w	Obj67_MoveSpot
000162C4 6000 0000                  		bra.w	Obj67_ChkDel
000162C8                            ; ===========================================================================
000162C8                            
000162C8                            Obj67_MoveSonic:			; XREF: Obj67_Action
000162C8 7400                       		moveq	#0,d2
000162CA 1428 0038                  		move.b	$38(a0),d2
000162CE 3602                       		move.w	d2,d3
000162D0 D643                       		add.w	d3,d3
000162D2 43F8 D000                  		lea	($FFFFD000).w,a1
000162D6 3029 0008                  		move.w	8(a1),d0
000162DA 9068 0032                  		sub.w	$32(a0),d0
000162DE D042                       		add.w	d2,d0
000162E0 B043                       		cmp.w	d3,d0
000162E2 6400                       		bcc.s	loc_155A8
000162E4 3229 000C                  		move.w	$C(a1),d1
000162E8 9268 0030                  		sub.w	$30(a0),d1
000162EC D242                       		add.w	d2,d1
000162EE B243                       		cmp.w	d3,d1
000162F0 6400                       		bcc.s	loc_155A8
000162F2 0829 0001 0022             		btst	#1,$22(a1)
000162F8 6700                       		beq.s	loc_155B8
000162FA 4228 003A                  		clr.b	$3A(a0)
000162FE 4E75                       		rts	
00016300                            ; ===========================================================================
00016300                            
00016300                            loc_155A8:
00016300 4A28 003A                  		tst.b	$3A(a0)
00016304 6700                       		beq.s	locret_155B6
00016306 4229 0038                  		clr.b	$38(a1)
0001630A 4228 003A                  		clr.b	$3A(a0)
0001630E                            
0001630E                            locret_155B6:
0001630E 4E75                       		rts	
00016310                            ; ===========================================================================
00016310                            
00016310                            loc_155B8:
00016310 4A28 003A                  		tst.b	$3A(a0)
00016314 6600                       		bne.s	loc_155E2
00016316 117C 0001 003A             		move.b	#1,$3A(a0)
0001631C 0829 0002 0022             		btst	#2,$22(a1)
00016322 6600                       		bne.s	loc_155D0
00016324 4229 001C                  		clr.b	$1C(a1)
00016328                            
00016328                            loc_155D0:
00016328 08A9 0005 0022             		bclr	#5,$22(a1)
0001632E 137C 0001 001D             		move.b	#1,$1D(a1)
00016334 137C 0001 0038             		move.b	#1,$38(a1)
0001633A                            
0001633A                            loc_155E2:
0001633A 3029 0014                  		move.w	$14(a1),d0
0001633E 4A68 0036                  		tst.w	$36(a0)
00016342 6A00                       		bpl.s	loc_15608
00016344 0C40 FC00                  		cmpi.w	#-$400,d0
00016348 6F00                       		ble.s	loc_155FA
0001634A 337C FC00 0014             		move.w	#-$400,$14(a1)
00016350 4E75                       		rts	
00016352                            ; ===========================================================================
00016352                            
00016352                            loc_155FA:
00016352 0C40 F100                  		cmpi.w	#-$F00,d0
00016356 6C00                       		bge.s	locret_15606
00016358 337C F100 0014             		move.w	#-$F00,$14(a1)
0001635E                            
0001635E                            locret_15606:
0001635E 4E75                       		rts	
00016360                            ; ===========================================================================
00016360                            
00016360                            loc_15608:
00016360 0C40 0400                  		cmpi.w	#$400,d0
00016364 6C00                       		bge.s	loc_15616
00016366 337C 0400 0014             		move.w	#$400,$14(a1)
0001636C 4E75                       		rts	
0001636E                            ; ===========================================================================
0001636E                            
0001636E                            loc_15616:
0001636E 0C40 0F00                  		cmpi.w	#$F00,d0
00016372 6F00                       		ble.s	locret_15622
00016374 337C 0F00 0014             		move.w	#$F00,$14(a1)
0001637A                            
0001637A                            locret_15622:
0001637A 4E75                       		rts	
0001637C                            ; ===========================================================================
0001637C                            
0001637C                            Obj67_MoveSpot:				; XREF: Obj67_Action
0001637C 3028 0036                  		move.w	$36(a0),d0
00016380 D168 0026                  		add.w	d0,$26(a0)
00016384 1028 0026                  		move.b	$26(a0),d0
00016388 4EB9 0000 2D86             		jsr	(CalcSine).l
0001638E 3428 0030                  		move.w	$30(a0),d2
00016392 3628 0032                  		move.w	$32(a0),d3
00016396 7800                       		moveq	#0,d4
00016398 1828 0034                  		move.b	$34(a0),d4
0001639C E14C                       		lsl.w	#8,d4
0001639E 2A04                       		move.l	d4,d5
000163A0 C9C0                       		muls.w	d0,d4
000163A2 4844                       		swap	d4
000163A4 CBC1                       		muls.w	d1,d5
000163A6 4845                       		swap	d5
000163A8 D842                       		add.w	d2,d4
000163AA DA43                       		add.w	d3,d5
000163AC 3144 000C                  		move.w	d4,$C(a0)
000163B0 3145 0008                  		move.w	d5,8(a0)
000163B4 4E75                       		rts	
000163B6                            ; ===========================================================================
000163B6                            
000163B6                            Obj67_ChkDel:				; XREF: Obj67_Action
000163B6 3028 0032                  		move.w	$32(a0),d0
000163BA 0240 FF80                  		andi.w	#-$80,d0
000163BE 3238 F700                  		move.w	($FFFFF700).w,d1
000163C2 0441 0080                  		subi.w	#$80,d1
000163C6 0241 FF80                  		andi.w	#-$80,d1
000163CA 9041                       		sub.w	d1,d0
000163CC 0C40 0280                  		cmpi.w	#$280,d0
000163D0 6200                       		bhi.s	Obj67_Delete
000163D2 4EF9 0000 E2A8             		jmp	DisplaySprite
000163D8                            ; ===========================================================================
000163D8                            
000163D8                            Obj67_Delete:
000163D8 4EF9 0000 E2E4             		jmp	DeleteObject
000163DE                            ; ===========================================================================
000163DE                            ; ---------------------------------------------------------------------------
000163DE                            ; Sprite mappings - disc that you run around (SBZ)
000163DE                            ; (It's just a small blob that moves around in a circle. The disc itself is
000163DE                            ; part of the level tiles.)
000163DE                            ; ---------------------------------------------------------------------------
000163DE                            Map_obj67:
000163DE                            	include "_maps\obj67.asm"
000163DE                            ; ---------------------------------------------------------------------------
000163DE                            ; Sprite mappings - disc that you run around (SBZ)
000163DE                            ; (It's just a small blob that moves around in a circle. The disc itself is
000163DE                            ; part of the level tiles.)
000163DE                            ; ---------------------------------------------------------------------------
000163DE 0000                       		dc.w byte_15688-Map_obj67
000163E0 01                         byte_15688:	dc.b 1
000163E1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000163E6                            		even
000163E6                            		even
000163E6                            
000163E6                            ; ===========================================================================
000163E6                            ; ---------------------------------------------------------------------------
000163E6                            ; Object 68 - conveyor belts (SBZ)
000163E6                            ; ---------------------------------------------------------------------------
000163E6                            
000163E6                            Obj68:					; XREF: Obj_Index
000163E6 7000                       		moveq	#0,d0
000163E8 1028 0024                  		move.b	$24(a0),d0
000163EC 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000163F0 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000163F4                            ; ===========================================================================
000163F4 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000163F6 0000                       		dc.w Obj68_Action-Obj68_Index
000163F8                            ; ===========================================================================
000163F8                            
000163F8                            Obj68_Main:				; XREF: Obj68_Index
000163F8 5428 0024                  		addq.b	#2,$24(a0)
000163FC 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00016402 1228 0028                  		move.b	$28(a0),d1	; get object type
00016406 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001640A 6700                       		beq.s	loc_156BA	; if zero, branch
0001640C 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00016412                            
00016412                            loc_156BA:
00016412 1228 0028                  		move.b	$28(a0),d1	; get object type
00016416 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001641A 4881                       		ext.w	d1
0001641C E841                       		asr.w	#4,d1
0001641E 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00016422                            
00016422                            Obj68_Action:				; XREF: Obj68_Index
00016422 6100                       		bsr.s	Obj68_MoveSonic
00016424 3028 0008                  		move.w	8(a0),d0
00016428 0240 FF80                  		andi.w	#$FF80,d0
0001642C 3238 F700                  		move.w	($FFFFF700).w,d1
00016430 0441 0080                  		subi.w	#$80,d1
00016434 0241 FF80                  		andi.w	#$FF80,d1
00016438 9041                       		sub.w	d1,d0
0001643A 0C40 0280                  		cmpi.w	#$280,d0
0001643E 6200                       		bhi.s	Obj68_Delete
00016440 4E75                       		rts	
00016442                            ; ===========================================================================
00016442                            
00016442                            Obj68_Delete:
00016442 4EF9 0000 E2E4             		jmp	DeleteObject
00016448                            ; ===========================================================================
00016448                            
00016448                            Obj68_MoveSonic:			; XREF: Obj68_Action
00016448 7400                       		moveq	#0,d2
0001644A 1428 0038                  		move.b	$38(a0),d2
0001644E 3602                       		move.w	d2,d3
00016450 D643                       		add.w	d3,d3
00016452 43F8 D000                  		lea	($FFFFD000).w,a1
00016456 3029 0008                  		move.w	8(a1),d0
0001645A 9068 0008                  		sub.w	8(a0),d0
0001645E D042                       		add.w	d2,d0
00016460 B043                       		cmp.w	d3,d0
00016462 6400                       		bcc.s	locret_1572E
00016464 3229 000C                  		move.w	$C(a1),d1
00016468 9268 000C                  		sub.w	$C(a0),d1
0001646C 0641 0030                  		addi.w	#$30,d1
00016470 0C41 0030                  		cmpi.w	#$30,d1
00016474 6400                       		bcc.s	locret_1572E
00016476 0829 0001 0022             		btst	#1,$22(a1)
0001647C 6600                       		bne.s	locret_1572E
0001647E 3028 0036                  		move.w	$36(a0),d0
00016482 D169 0008                  		add.w	d0,8(a1)
00016486                            
00016486                            locret_1572E:
00016486 4E75                       		rts	
00016488                            
00016488                            ; ===========================================================================
00016488                            ; ---------------------------------------------------------------------------
00016488                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00016488                            ; ---------------------------------------------------------------------------
00016488                            
00016488                            Obj69:					; XREF: Obj_Index
00016488 7000                       		moveq	#0,d0
0001648A 1028 0024                  		move.b	$24(a0),d0
0001648E 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00016492 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00016496                            ; ===========================================================================
00016496 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00016498 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
0001649A 0000                       		dc.w Obj69_Spinner-Obj69_Index
0001649C                            ; ===========================================================================
0001649C                            
0001649C                            Obj69_Main:				; XREF: Obj69_Index
0001649C 5428 0024                  		addq.b	#2,$24(a0)
000164A0 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000164A8 317C 4492 0002             		move.w	#$4492,2(a0)
000164AE 0028 0004 0001             		ori.b	#4,1(a0)
000164B4 117C 0080 0019             		move.b	#$80,$19(a0)
000164BA 7000                       		moveq	#0,d0
000164BC 1028 0028                  		move.b	$28(a0),d0
000164C0 0240 000F                  		andi.w	#$F,d0
000164C4 C0FC 003C                  		mulu.w	#$3C,d0
000164C8 3140 0032                  		move.w	d0,$32(a0)
000164CC 4A28 0028                  		tst.b	$28(a0)
000164D0 6A00                       		bpl.s	Obj69_Trapdoor
000164D2 5428 0024                  		addq.b	#2,$24(a0)
000164D6 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000164DE 317C 04DF 0002             		move.w	#$4DF,2(a0)
000164E4 117C 0010 0019             		move.b	#$10,$19(a0)
000164EA 117C 0002 001C             		move.b	#2,$1C(a0)
000164F0 7000                       		moveq	#0,d0
000164F2 1028 0028                  		move.b	$28(a0),d0	; get object type
000164F6 3200                       		move.w	d0,d1
000164F8 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000164FC C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00016500 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00016504 3140 0032                  		move.w	d0,$32(a0)
00016508 0241 0070                  		andi.w	#$70,d1
0001650C 0641 0010                  		addi.w	#$10,d1
00016510 E549                       		lsl.w	#2,d1
00016512 5341                       		subq.w	#1,d1
00016514 3141 0036                  		move.w	d1,$36(a0)
00016518 6000                       		bra.s	Obj69_Spinner
0001651A                            ; ===========================================================================
0001651A                            
0001651A                            Obj69_Trapdoor:				; XREF: Obj69_Index
0001651A 5368 0030                  		subq.w	#1,$30(a0)
0001651E 6A00                       		bpl.s	Obj69_Animate
00016520 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016526 0868 0000 001C             		bchg	#0,$1C(a0)
0001652C 4A28 0001                  		tst.b	1(a0)
00016530 6A00                       		bpl.s	Obj69_Animate
00016532 303C 00BB                  		move.w	#$BB,d0
00016536 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play door sound
0001653C                            
0001653C                            Obj69_Animate:
0001653C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016542 4EB9 0000 B300             		jsr	AnimateSprite
00016548 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
0001654C 6600                       		bne.s	Obj69_NotSolid	; if not, branch
0001654E 323C 004B                  		move.w	#$4B,d1
00016552 343C 000C                  		move.w	#$C,d2
00016556 3602                       		move.w	d2,d3
00016558 5243                       		addq.w	#1,d3
0001655A 3828 0008                  		move.w	8(a0),d4
0001655E 6100 A112                  		bsr.w	SolidObject
00016562 6000 9DE6                  		bra.w	MarkObjGone
00016566                            ; ===========================================================================
00016566                            
00016566                            Obj69_NotSolid:
00016566 0828 0003 0022             		btst	#3,$22(a0)
0001656C 6700                       		beq.s	Obj69_Display
0001656E 43F8 D000                  		lea	($FFFFD000).w,a1
00016572 08A9 0003 0022             		bclr	#3,$22(a1)
00016578 08A8 0003 0022             		bclr	#3,$22(a0)
0001657E 4228 0025                  		clr.b	$25(a0)
00016582                            
00016582                            Obj69_Display:
00016582 6000 9DC6                  		bra.w	MarkObjGone
00016586                            ; ===========================================================================
00016586                            
00016586                            Obj69_Spinner:				; XREF: Obj69_Index
00016586 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001658A C068 0036                  		and.w	$36(a0),d0
0001658E 6600                       		bne.s	Obj69_Delay
00016590 117C 0001 0034             		move.b	#1,$34(a0)
00016596                            
00016596                            Obj69_Delay:
00016596 4A28 0034                  		tst.b	$34(a0)
0001659A 6700                       		beq.s	Obj69_Animate2
0001659C 5368 0030                  		subq.w	#1,$30(a0)
000165A0 6A00                       		bpl.s	Obj69_Animate2
000165A2 3168 0032 0030             		move.w	$32(a0),$30(a0)
000165A8 4228 0034                  		clr.b	$34(a0)
000165AC 0868 0000 001C             		bchg	#0,$1C(a0)
000165B2                            
000165B2                            Obj69_Animate2:
000165B2 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000165B8 4EB9 0000 B300             		jsr	AnimateSprite
000165BE 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000165C2 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000165C4 323C 001B                  		move.w	#$1B,d1
000165C8 343C 0007                  		move.w	#7,d2
000165CC 3602                       		move.w	d2,d3
000165CE 5243                       		addq.w	#1,d3
000165D0 3828 0008                  		move.w	8(a0),d4
000165D4 6100 A09C                  		bsr.w	SolidObject
000165D8 6000 9D70                  		bra.w	MarkObjGone
000165DC                            ; ===========================================================================
000165DC                            
000165DC                            Obj69_NotSolid2:
000165DC 0828 0003 0022             		btst	#3,$22(a0)
000165E2 6700                       		beq.s	Obj69_Display2
000165E4 43F8 D000                  		lea	($FFFFD000).w,a1
000165E8 08A9 0003 0022             		bclr	#3,$22(a1)
000165EE 08A8 0003 0022             		bclr	#3,$22(a0)
000165F4 4228 0025                  		clr.b	$25(a0)
000165F8                            
000165F8                            Obj69_Display2:
000165F8 6000 9D50                  		bra.w	MarkObjGone
000165FC                            ; ===========================================================================
000165FC                            Ani_obj69:
000165FC                            	include "_anim\obj69.asm"
000165FC                            ; ---------------------------------------------------------------------------
000165FC                            ; Animation script - trapdoor (SBZ)
000165FC                            ; ---------------------------------------------------------------------------
000165FC 0000                       		dc.w byte_158AC-Ani_obj69
000165FE 0000                       		dc.w byte_158B2-Ani_obj69
00016600 0000                       		dc.w byte_158B8-Ani_obj69
00016602 0000                       		dc.w byte_158CC-Ani_obj69
00016604 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0001660A 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00016610 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001661D 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016624 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016631 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016638                            		even
00016638                            		even
00016638                            
00016638                            ; ---------------------------------------------------------------------------
00016638                            ; Sprite mappings - trapdoor (SBZ)
00016638                            ; ---------------------------------------------------------------------------
00016638                            Map_obj69:
00016638                            	include "_maps\obj69.asm"
00016638                            ; ---------------------------------------------------------------------------
00016638                            ; Sprite mappings - trapdoor (SBZ)
00016638                            ; ---------------------------------------------------------------------------
00016638 0000                       		dc.w byte_158E6-Map_obj69
0001663A 0000                       		dc.w byte_158FB-Map_obj69
0001663C 0000                       		dc.w byte_15924-Map_obj69
0001663E 04                         byte_158E6:	dc.b 4
0001663F F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00016644 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016649 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
0001664E F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00016653 08                         byte_158FB:	dc.b 8
00016654 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016659 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0001665E 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00016663 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016668 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
0001666D 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00016672 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016677 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
0001667C 04                         byte_15924:	dc.b 4
0001667D 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016682 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016687 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
0001668C 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00016692 00                         		even
00016692 00                         		even
00016692                            
00016692                            ; ---------------------------------------------------------------------------
00016692                            ; Sprite mappings - spinning platforms (SBZ)
00016692                            ; ---------------------------------------------------------------------------
00016692                            Map_obj69a:
00016692                            	include "_maps\obj69a.asm"
00016692                            ; ---------------------------------------------------------------------------
00016692                            ; Sprite mappings - spinning platforms (SBZ)
00016692                            ; ---------------------------------------------------------------------------
00016692 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00016696 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
0001669A 0000                       		dc.w byte_15970-Map_obj69a
0001669C 02                         byte_15944:	dc.b 2
0001669D F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000166A2 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000166A7 02                         byte_1594F:	dc.b 2
000166A8 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000166AD 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000166B2 02                         byte_1595A:	dc.b 2
000166B3 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000166B8 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000166BD 02                         byte_15965:	dc.b 2
000166BE F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000166C3 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000166C8 02                         byte_15970:	dc.b 2
000166C9 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000166CE 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000166D4 00                         		even
000166D4 00                         		even
000166D4                            
000166D4                            ; ===========================================================================
000166D4                            ; ---------------------------------------------------------------------------
000166D4                            ; Object 6A - ground saws and pizza cutters (SBZ)
000166D4                            ; ---------------------------------------------------------------------------
000166D4                            
000166D4                            Obj6A:					; XREF: Obj_Index
000166D4 7000                       		moveq	#0,d0
000166D6 1028 0024                  		move.b	$24(a0),d0
000166DA 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000166DE 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000166E2                            ; ===========================================================================
000166E2 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000166E4 0000                       		dc.w Obj6A_Action-Obj6A_Index
000166E6                            ; ===========================================================================
000166E6                            
000166E6                            Obj6A_Main:				; XREF: Obj6A_Index
000166E6 5428 0024                  		addq.b	#2,$24(a0)
000166EA 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000166F2 317C 43B5 0002             		move.w	#$43B5,2(a0)
000166F8 117C 0004 0001             		move.b	#4,1(a0)
000166FE 117C 0004 0018             		move.b	#4,$18(a0)
00016704 117C 0020 0019             		move.b	#$20,$19(a0)
0001670A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016710 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016716 0C28 0003 0028             		cmpi.b	#3,$28(a0)
0001671C 6400                       		bcc.s	Obj6A_Action
0001671E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016724                            
00016724                            Obj6A_Action:				; XREF: Obj6A_Index
00016724 7000                       		moveq	#0,d0
00016726 1028 0028                  		move.b	$28(a0),d0
0001672A 0240 0007                  		andi.w	#7,d0
0001672E D040                       		add.w	d0,d0
00016730 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00016734 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016738 3028 003A                  		move.w	$3A(a0),d0
0001673C 0240 FF80                  		andi.w	#$FF80,d0
00016740 3238 F700                  		move.w	($FFFFF700).w,d1
00016744 0441 0080                  		subi.w	#$80,d1
00016748 0241 FF80                  		andi.w	#$FF80,d1
0001674C 9041                       		sub.w	d1,d0
0001674E 0C40 0280                  		cmpi.w	#$280,d0
00016752 6200                       		bhi.s	Obj6A_Delete
00016754 4EF9 0000 E2A8             		jmp	DisplaySprite
0001675A                            ; ===========================================================================
0001675A                            
0001675A                            Obj6A_Delete:
0001675A 4EF9 0000 E2E4             		jmp	DeleteObject
00016760                            ; ===========================================================================
00016760 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00016764 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016768 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
0001676A                            ; ===========================================================================
0001676A                            
0001676A                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
0001676A 4E75                       		rts	
0001676C                            ; ===========================================================================
0001676C                            
0001676C                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
0001676C 323C 0060                  		move.w	#$60,d1
00016770 7000                       		moveq	#0,d0
00016772 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016776 0828 0000 0022             		btst	#0,$22(a0)
0001677C 6700                       		beq.s	Obj6A_Animate01
0001677E 4440                       		neg.w	d0
00016780 D041                       		add.w	d1,d0
00016782                            
00016782                            Obj6A_Animate01:
00016782 3228 003A                  		move.w	$3A(a0),d1
00016786 9240                       		sub.w	d0,d1
00016788 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
0001678C 5328 001E                  		subq.b	#1,$1E(a0)
00016790 6A00                       		bpl.s	loc_15A46
00016792 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016798 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0001679E                            
0001679E                            loc_15A46:
0001679E 4A28 0001                  		tst.b	1(a0)
000167A2 6A00                       		bpl.s	locret_15A60
000167A4 3038 FE04                  		move.w	($FFFFFE04).w,d0
000167A8 0240 000F                  		andi.w	#$F,d0
000167AC 6600                       		bne.s	locret_15A60
000167AE 303C 00B0                  		move.w	#$B0,d0
000167B2 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play saw sound
000167B8                            
000167B8                            locret_15A60:
000167B8 4E75                       		rts	
000167BA                            ; ===========================================================================
000167BA                            
000167BA                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000167BA 323C 0030                  		move.w	#$30,d1
000167BE 7000                       		moveq	#0,d0
000167C0 1038 FE64                  		move.b	($FFFFFE64).w,d0
000167C4 0828 0000 0022             		btst	#0,$22(a0)
000167CA 6700                       		beq.s	Obj6A_Animate02
000167CC 4440                       		neg.w	d0
000167CE 0640 0080                  		addi.w	#$80,d0
000167D2                            
000167D2                            Obj6A_Animate02:
000167D2 3228 0038                  		move.w	$38(a0),d1
000167D6 9240                       		sub.w	d0,d1
000167D8 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000167DC 5328 001E                  		subq.b	#1,$1E(a0)
000167E0 6A00                       		bpl.s	loc_15A96
000167E2 117C 0002 001E             		move.b	#2,$1E(a0)
000167E8 0868 0000 001A             		bchg	#0,$1A(a0)
000167EE                            
000167EE                            loc_15A96:
000167EE 4A28 0001                  		tst.b	1(a0)
000167F2 6A00                       		bpl.s	locret_15AB0
000167F4 1038 FE64                  		move.b	($FFFFFE64).w,d0
000167F8 0C00 0018                  		cmpi.b	#$18,d0
000167FC 6600                       		bne.s	locret_15AB0
000167FE 303C 00B0                  		move.w	#$B0,d0
00016802 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play saw sound
00016808                            
00016808                            locret_15AB0:
00016808 4E75                       		rts	
0001680A                            ; ===========================================================================
0001680A                            
0001680A                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001680A 4A28 003D                  		tst.b	$3D(a0)
0001680E 6600                       		bne.s	Obj6A_Animate03
00016810 3038 D008                  		move.w	($FFFFD008).w,d0
00016814 0440 00C0                  		subi.w	#$C0,d0
00016818 6500                       		bcs.s	loc_15B02
0001681A 9068 0008                  		sub.w	8(a0),d0
0001681E 6500                       		bcs.s	loc_15B02
00016820 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016824 0440 0080                  		subi.w	#$80,d0
00016828 B068 000C                  		cmp.w	$C(a0),d0
0001682C 6400                       		bcc.s	locret_15B04
0001682E 0640 0100                  		addi.w	#$100,d0
00016832 B068 000C                  		cmp.w	$C(a0),d0
00016836 6500                       		bcs.s	locret_15B04
00016838 117C 0001 003D             		move.b	#1,$3D(a0)
0001683E 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00016844 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001684A 117C 0002 001A             		move.b	#2,$1A(a0)
00016850 303C 00B0                  		move.w	#$B0,d0
00016854 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play saw sound
0001685A                            
0001685A                            loc_15B02:
0001685A 588F                       		addq.l	#4,sp
0001685C                            
0001685C                            locret_15B04:
0001685C 4E75                       		rts	
0001685E                            ; ===========================================================================
0001685E                            
0001685E                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
0001685E 4EB9 0000 E26E             		jsr	SpeedToPos
00016864 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001686A 5328 001E                  		subq.b	#1,$1E(a0)
0001686E 6A00                       		bpl.s	locret_15B24
00016870 117C 0002 001E             		move.b	#2,$1E(a0)
00016876 0868 0000 001A             		bchg	#0,$1A(a0)
0001687C                            
0001687C                            locret_15B24:
0001687C 4E75                       		rts	
0001687E                            ; ===========================================================================
0001687E                            
0001687E                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
0001687E 4A28 003D                  		tst.b	$3D(a0)
00016882 6600                       		bne.s	Obj6A_Animate04
00016884 3038 D008                  		move.w	($FFFFD008).w,d0
00016888 0640 00E0                  		addi.w	#$E0,d0
0001688C 9068 0008                  		sub.w	8(a0),d0
00016890 6400                       		bcc.s	loc_15B74
00016892 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016896 0440 0080                  		subi.w	#$80,d0
0001689A B068 000C                  		cmp.w	$C(a0),d0
0001689E 6400                       		bcc.s	locret_15B76
000168A0 0640 0100                  		addi.w	#$100,d0
000168A4 B068 000C                  		cmp.w	$C(a0),d0
000168A8 6500                       		bcs.s	locret_15B76
000168AA 117C 0001 003D             		move.b	#1,$3D(a0)
000168B0 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
000168B6 117C 00A2 0020             		move.b	#$A2,$20(a0)
000168BC 117C 0002 001A             		move.b	#2,$1A(a0)
000168C2 303C 00B0                  		move.w	#$B0,d0
000168C6 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play saw sound
000168CC                            
000168CC                            loc_15B74:
000168CC 588F                       		addq.l	#4,sp
000168CE                            
000168CE                            locret_15B76:
000168CE 4E75                       		rts	
000168D0                            ; ===========================================================================
000168D0                            
000168D0                            Obj6A_Animate04:
000168D0 4EB9 0000 E26E             		jsr	SpeedToPos
000168D6 3168 0008 003A             		move.w	8(a0),$3A(a0)
000168DC 5328 001E                  		subq.b	#1,$1E(a0)
000168E0 6A00                       		bpl.s	locret_15B96
000168E2 117C 0002 001E             		move.b	#2,$1E(a0)
000168E8 0868 0000 001A             		bchg	#0,$1A(a0)
000168EE                            
000168EE                            locret_15B96:
000168EE 4E75                       		rts	
000168F0                            ; ===========================================================================
000168F0                            ; ---------------------------------------------------------------------------
000168F0                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000168F0                            ; ---------------------------------------------------------------------------
000168F0                            Map_obj6A:
000168F0                            	include "_maps\obj6A.asm"
000168F0                            ; ---------------------------------------------------------------------------
000168F0                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000168F0                            ; ---------------------------------------------------------------------------
000168F0 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000168F4 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000168F8 07                         byte_15BA0:	dc.b 7
000168F9 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000168FE D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016903 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016908 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001690D E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016912 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016917 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001691C 07                         byte_15BC4:	dc.b 7
0001691D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016922 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016927 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001692C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016931 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016936 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001693B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016940 04                         byte_15BE8:	dc.b 4
00016941 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016946 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001694B 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016950 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016955 04                         byte_15BFD:	dc.b 4
00016956 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001695B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016960 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016965 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001696A                            		even
0001696A                            		even
0001696A                            
0001696A                            ; ===========================================================================
0001696A                            ; ---------------------------------------------------------------------------
0001696A                            ; Object 6B - stomper (SBZ)
0001696A                            ; ---------------------------------------------------------------------------
0001696A                            
0001696A                            Obj6B:					; XREF: Obj_Index
0001696A 7000                       		moveq	#0,d0
0001696C 1028 0024                  		move.b	$24(a0),d0
00016970 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016974 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016978                            ; ===========================================================================
00016978 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
0001697A 0000                       		dc.w Obj6B_Action-Obj6B_Index
0001697C                            
0001697C 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016980 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016984 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016988 1C20 6004                  		dc.b  $1C, $20,	$60,   4
0001698C 8040 0005                  		dc.b  $80, $40,	  0,   5
00016990                            ; ===========================================================================
00016990                            
00016990                            Obj6B_Main:				; XREF: Obj6B_Index
00016990 5428 0024                  		addq.b	#2,$24(a0)
00016994 7000                       		moveq	#0,d0
00016996 1028 0028                  		move.b	$28(a0),d0
0001699A E448                       		lsr.w	#2,d0
0001699C 0240 001C                  		andi.w	#$1C,d0
000169A0 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
000169A4 115B 0019                  		move.b	(a3)+,$19(a0)
000169A8 115B 0016                  		move.b	(a3)+,$16(a0)
000169AC E448                       		lsr.w	#2,d0
000169AE 1140 001A                  		move.b	d0,$1A(a0)
000169B2 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000169BA 317C 22C0 0002             		move.w	#$22C0,2(a0)
000169C0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000169C6 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000169C8 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000169CE 6700                       		beq.s	Obj6B_SBZ3
000169D0                            
000169D0                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000169D0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000169D4 7000                       		moveq	#0,d0
000169D6 1028 0023                  		move.b	$23(a0),d0
000169DA 6700                       		beq.s	Obj6B_Delete
000169DC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000169E2                            
000169E2                            Obj6B_Delete:
000169E2 4EF9 0000 E2E4             		jmp	DeleteObject
000169E8                            ; ===========================================================================
000169E8                            
000169E8                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000169E8 317C 41F0 0002             		move.w	#$41F0,2(a0)
000169EE 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
000169F4 6600                       		bne.s	Obj6B_SBZ12
000169F6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000169FA 7000                       		moveq	#0,d0
000169FC 1028 0023                  		move.b	$23(a0),d0
00016A00 6700                       		beq.s	Obj6B_SBZ12
00016A02 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016A08 6700                       		beq.s	Obj6B_SBZ12
00016A0A 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016A0E 60C0                       		bra.s	Obj6B_ChkGone
00016A10                            ; ===========================================================================
00016A10                            
00016A10                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016A10 0028 0004 0001             		ori.b	#4,1(a0)
00016A16 117C 0004 0018             		move.b	#4,$18(a0)
00016A1C 3168 0008 0034             		move.w	8(a0),$34(a0)
00016A22 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016A28 7000                       		moveq	#0,d0
00016A2A 101B                       		move.b	(a3)+,d0
00016A2C 3140 003C                  		move.w	d0,$3C(a0)
00016A30 7000                       		moveq	#0,d0
00016A32 1028 0028                  		move.b	$28(a0),d0
00016A36 6A00                       		bpl.s	Obj6B_Action
00016A38 0200 000F                  		andi.b	#$F,d0
00016A3C 1140 003E                  		move.b	d0,$3E(a0)
00016A40 1153 0028                  		move.b	(a3),$28(a0)
00016A44 0C13 0005                  		cmpi.b	#5,(a3)
00016A48 6600                       		bne.s	Obj6B_ChkGone2
00016A4A 08E8 0004 0001             		bset	#4,1(a0)
00016A50                            
00016A50                            Obj6B_ChkGone2:
00016A50 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016A54 7000                       		moveq	#0,d0
00016A56 1028 0023                  		move.b	$23(a0),d0
00016A5A 6700                       		beq.s	Obj6B_Action
00016A5C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016A62                            
00016A62                            Obj6B_Action:				; XREF: Obj6B_Index
00016A62 3F28 0008                  		move.w	8(a0),-(sp)
00016A66 7000                       		moveq	#0,d0
00016A68 1028 0028                  		move.b	$28(a0),d0
00016A6C 0240 000F                  		andi.w	#$F,d0
00016A70 D040                       		add.w	d0,d0
00016A72 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016A76 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016A7A 381F                       		move.w	(sp)+,d4
00016A7C 4A28 0001                  		tst.b	1(a0)
00016A80 6A00                       		bpl.s	Obj6B_ChkDel
00016A82 7200                       		moveq	#0,d1
00016A84 1228 0019                  		move.b	$19(a0),d1
00016A88 0641 000B                  		addi.w	#$B,d1
00016A8C 7400                       		moveq	#0,d2
00016A8E 1428 0016                  		move.b	$16(a0),d2
00016A92 3602                       		move.w	d2,d3
00016A94 5243                       		addq.w	#1,d3
00016A96 6100 9BDA                  		bsr.w	SolidObject
00016A9A                            
00016A9A                            Obj6B_ChkDel:
00016A9A 3028 0034                  		move.w	$34(a0),d0
00016A9E 0240 FF80                  		andi.w	#$FF80,d0
00016AA2 3238 F700                  		move.w	($FFFFF700).w,d1
00016AA6 0441 0080                  		subi.w	#$80,d1
00016AAA 0241 FF80                  		andi.w	#$FF80,d1
00016AAE 9041                       		sub.w	d1,d0
00016AB0 0C40 0280                  		cmpi.w	#$280,d0
00016AB4 6200                       		bhi.s	loc_15D64
00016AB6 4EF9 0000 E2A8             		jmp	DisplaySprite
00016ABC                            ; ===========================================================================
00016ABC                            
00016ABC                            loc_15D64:
00016ABC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016AC2 6600                       		bne.s	Obj6B_Delete2
00016AC4 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016AC8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016ACC 7000                       		moveq	#0,d0
00016ACE 1028 0023                  		move.b	$23(a0),d0
00016AD2 6700                       		beq.s	Obj6B_Delete2
00016AD4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016ADA                            
00016ADA                            Obj6B_Delete2:
00016ADA 4EF9 0000 E2E4             		jmp	DeleteObject
00016AE0                            ; ===========================================================================
00016AE0 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016AE4 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00016AE8 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016AEC                            ; ===========================================================================
00016AEC                            
00016AEC                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016AEC 4E75                       		rts	
00016AEE                            ; ===========================================================================
00016AEE                            
00016AEE                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016AEE 4A28 0038                  		tst.b	$38(a0)
00016AF2 6600                       		bne.s	loc_15DB4
00016AF4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016AF8 7000                       		moveq	#0,d0
00016AFA 1028 003E                  		move.b	$3E(a0),d0
00016AFE 0832 0000 0000             		btst	#0,(a2,d0.w)
00016B04 6700                       		beq.s	loc_15DC2
00016B06 117C 0001 0038             		move.b	#1,$38(a0)
00016B0C                            
00016B0C                            loc_15DB4:
00016B0C 3028 003C                  		move.w	$3C(a0),d0
00016B10 B068 003A                  		cmp.w	$3A(a0),d0
00016B14 6700                       		beq.s	loc_15DE0
00016B16 5468 003A                  		addq.w	#2,$3A(a0)
00016B1A                            
00016B1A                            loc_15DC2:
00016B1A 3028 003A                  		move.w	$3A(a0),d0
00016B1E 0828 0000 0022             		btst	#0,$22(a0)
00016B24 6700                       		beq.s	loc_15DD4
00016B26 4440                       		neg.w	d0
00016B28 0640 0080                  		addi.w	#$80,d0
00016B2C                            
00016B2C                            loc_15DD4:
00016B2C 3228 0034                  		move.w	$34(a0),d1
00016B30 9240                       		sub.w	d0,d1
00016B32 3141 0008                  		move.w	d1,8(a0)
00016B36 4E75                       		rts	
00016B38                            ; ===========================================================================
00016B38                            
00016B38                            loc_15DE0:
00016B38 5228 0028                  		addq.b	#1,$28(a0)
00016B3C 317C 00B4 0036             		move.w	#$B4,$36(a0)
00016B42 4228 0038                  		clr.b	$38(a0)
00016B46 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016B4A 7000                       		moveq	#0,d0
00016B4C 1028 0023                  		move.b	$23(a0),d0
00016B50 67C8                       		beq.s	loc_15DC2
00016B52 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016B58 60C0                       		bra.s	loc_15DC2
00016B5A                            ; ===========================================================================
00016B5A                            
00016B5A                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016B5A 4A28 0038                  		tst.b	$38(a0)
00016B5E 6600                       		bne.s	loc_15E14
00016B60 5368 0036                  		subq.w	#1,$36(a0)
00016B64 6600                       		bne.s	loc_15E1E
00016B66 117C 0001 0038             		move.b	#1,$38(a0)
00016B6C                            
00016B6C                            loc_15E14:
00016B6C 4A68 003A                  		tst.w	$3A(a0)
00016B70 6700                       		beq.s	loc_15E3C
00016B72 5568 003A                  		subq.w	#2,$3A(a0)
00016B76                            
00016B76                            loc_15E1E:
00016B76 3028 003A                  		move.w	$3A(a0),d0
00016B7A 0828 0000 0022             		btst	#0,$22(a0)
00016B80 6700                       		beq.s	loc_15E30
00016B82 4440                       		neg.w	d0
00016B84 0640 0080                  		addi.w	#$80,d0
00016B88                            
00016B88                            loc_15E30:
00016B88 3228 0034                  		move.w	$34(a0),d1
00016B8C 9240                       		sub.w	d0,d1
00016B8E 3141 0008                  		move.w	d1,8(a0)
00016B92 4E75                       		rts	
00016B94                            ; ===========================================================================
00016B94                            
00016B94                            loc_15E3C:
00016B94 5328 0028                  		subq.b	#1,$28(a0)
00016B98 4228 0038                  		clr.b	$38(a0)
00016B9C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016BA0 7000                       		moveq	#0,d0
00016BA2 1028 0023                  		move.b	$23(a0),d0
00016BA6 67CE                       		beq.s	loc_15E1E
00016BA8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016BAE 60C6                       		bra.s	loc_15E1E
00016BB0                            ; ===========================================================================
00016BB0                            
00016BB0                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016BB0 4A28 0038                  		tst.b	$38(a0)
00016BB4 6600                       		bne.s	loc_15E7C
00016BB6 4A68 003A                  		tst.w	$3A(a0)
00016BBA 6700                       		beq.s	loc_15E6A
00016BBC 5368 003A                  		subq.w	#1,$3A(a0)
00016BC0 6000                       		bra.s	loc_15E8E
00016BC2                            ; ===========================================================================
00016BC2                            
00016BC2                            loc_15E6A:
00016BC2 5368 0036                  		subq.w	#1,$36(a0)
00016BC6 6A00                       		bpl.s	loc_15E8E
00016BC8 317C 003C 0036             		move.w	#$3C,$36(a0)
00016BCE 117C 0001 0038             		move.b	#1,$38(a0)
00016BD4                            
00016BD4                            loc_15E7C:
00016BD4 5068 003A                  		addq.w	#8,$3A(a0)
00016BD8 3028 003A                  		move.w	$3A(a0),d0
00016BDC B068 003C                  		cmp.w	$3C(a0),d0
00016BE0 6600                       		bne.s	loc_15E8E
00016BE2 4228 0038                  		clr.b	$38(a0)
00016BE6                            
00016BE6                            loc_15E8E:
00016BE6 3028 003A                  		move.w	$3A(a0),d0
00016BEA 0828 0000 0022             		btst	#0,$22(a0)
00016BF0 6700                       		beq.s	loc_15EA0
00016BF2 4440                       		neg.w	d0
00016BF4 0640 0038                  		addi.w	#$38,d0
00016BF8                            
00016BF8                            loc_15EA0:
00016BF8 3228 0030                  		move.w	$30(a0),d1
00016BFC D240                       		add.w	d0,d1
00016BFE 3141 000C                  		move.w	d1,$C(a0)
00016C02 4E75                       		rts	
00016C04                            ; ===========================================================================
00016C04                            
00016C04                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016C04 4A28 0038                  		tst.b	$38(a0)
00016C08 6600                       		bne.s	loc_15ED0
00016C0A 4A68 003A                  		tst.w	$3A(a0)
00016C0E 6700                       		beq.s	loc_15EBE
00016C10 5168 003A                  		subq.w	#8,$3A(a0)
00016C14 6000                       		bra.s	loc_15EF0
00016C16                            ; ===========================================================================
00016C16                            
00016C16                            loc_15EBE:
00016C16 5368 0036                  		subq.w	#1,$36(a0)
00016C1A 6A00                       		bpl.s	loc_15EF0
00016C1C 317C 003C 0036             		move.w	#$3C,$36(a0)
00016C22 117C 0001 0038             		move.b	#1,$38(a0)
00016C28                            
00016C28                            loc_15ED0:
00016C28 3028 003A                  		move.w	$3A(a0),d0
00016C2C B068 003C                  		cmp.w	$3C(a0),d0
00016C30 6700                       		beq.s	loc_15EE0
00016C32 5068 003A                  		addq.w	#8,$3A(a0)
00016C36 6000                       		bra.s	loc_15EF0
00016C38                            ; ===========================================================================
00016C38                            
00016C38                            loc_15EE0:
00016C38 5368 0036                  		subq.w	#1,$36(a0)
00016C3C 6A00                       		bpl.s	loc_15EF0
00016C3E 317C 003C 0036             		move.w	#$3C,$36(a0)
00016C44 4228 0038                  		clr.b	$38(a0)
00016C48                            
00016C48                            loc_15EF0:
00016C48 3028 003A                  		move.w	$3A(a0),d0
00016C4C 0828 0000 0022             		btst	#0,$22(a0)
00016C52 6700                       		beq.s	loc_15F02
00016C54 4440                       		neg.w	d0
00016C56 0640 0038                  		addi.w	#$38,d0
00016C5A                            
00016C5A                            loc_15F02:
00016C5A 3228 0030                  		move.w	$30(a0),d1
00016C5E D240                       		add.w	d0,d1
00016C60 3141 000C                  		move.w	d1,$C(a0)
00016C64 4E75                       		rts	
00016C66                            ; ===========================================================================
00016C66                            
00016C66                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016C66 4A28 0038                  		tst.b	$38(a0)
00016C6A 6600                       		bne.s	loc_15F3E
00016C6C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016C70 7000                       		moveq	#0,d0
00016C72 1028 003E                  		move.b	$3E(a0),d0
00016C76 0832 0000 0000             		btst	#0,(a2,d0.w)
00016C7C 6700                       		beq.s	locret_15F5C
00016C7E 117C 0001 0038             		move.b	#1,$38(a0)
00016C84 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016C88 7000                       		moveq	#0,d0
00016C8A 1028 0023                  		move.b	$23(a0),d0
00016C8E 6700                       		beq.s	loc_15F3E
00016C90 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016C96                            
00016C96                            loc_15F3E:
00016C96 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016C9E 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016CA6 3168 0008 0034             		move.w	8(a0),$34(a0)
00016CAC 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016CB2 6700                       		beq.s	loc_15F5E
00016CB4                            
00016CB4                            locret_15F5C:
00016CB4 4E75                       		rts	
00016CB6                            ; ===========================================================================
00016CB6                            
00016CB6                            loc_15F5E:
00016CB6 4228 0028                  		clr.b	$28(a0)
00016CBA 4228 0038                  		clr.b	$38(a0)
00016CBE 4E75                       		rts	
00016CC0                            ; ===========================================================================
00016CC0                            ; ---------------------------------------------------------------------------
00016CC0                            ; Sprite mappings - stomper and	platforms (SBZ)
00016CC0                            ; ---------------------------------------------------------------------------
00016CC0                            Map_obj6B:
00016CC0                            	include "_maps\obj6B.asm"
00016CC0                            ; ---------------------------------------------------------------------------
00016CC0                            ; Sprite mappings - stomper and	platforms (SBZ)
00016CC0                            ; ---------------------------------------------------------------------------
00016CC0 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016CC4 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016CC8 0000                       		dc.w byte_15FB0-Map_obj6B
00016CCA 04                         byte_15F72:	dc.b 4
00016CCB F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016CD0 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016CD5 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016CDA F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016CDF 08                         byte_15F87:	dc.b 8
00016CE0 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016CE5 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016CEA E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016CEF E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016CF4 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016CF9 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016CFE 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016D03 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016D08 0E                         byte_15FB0:	dc.b $E
00016D09 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016D0E C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016D13 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016D18 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016D1D C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016D22 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016D27 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016D2C C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016D31 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016D36 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016D3B E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016D40 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016D45 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016D4A 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016D50 00                         		even
00016D50 00                         		even
00016D50                            
00016D50                            ; ===========================================================================
00016D50                            ; ---------------------------------------------------------------------------
00016D50                            ; Object 6C - vanishing	platforms (SBZ)
00016D50                            ; ---------------------------------------------------------------------------
00016D50                            
00016D50                            Obj6C:					; XREF: Obj_Index
00016D50 7000                       		moveq	#0,d0
00016D52 1028 0024                  		move.b	$24(a0),d0
00016D56 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016D5A 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016D5E                            ; ===========================================================================
00016D5E 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016D60 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016D62 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016D64 0000                       		dc.w loc_16068-Obj6C_Index
00016D66                            ; ===========================================================================
00016D66                            
00016D66                            Obj6C_Main:				; XREF: Obj6C_Index
00016D66 5C28 0024                  		addq.b	#6,$24(a0)
00016D6A 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016D72 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016D78 0028 0004 0001             		ori.b	#4,1(a0)
00016D7E 117C 0010 0019             		move.b	#$10,$19(a0)
00016D84 117C 0004 0018             		move.b	#4,$18(a0)
00016D8A 7000                       		moveq	#0,d0
00016D8C 1028 0028                  		move.b	$28(a0),d0	; get object type
00016D90 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016D94 5240                       		addq.w	#1,d0		; add 1
00016D96 EF48                       		lsl.w	#7,d0		; multiply by $80
00016D98 3200                       		move.w	d0,d1
00016D9A 5340                       		subq.w	#1,d0
00016D9C 3140 0030                  		move.w	d0,$30(a0)
00016DA0 3140 0032                  		move.w	d0,$32(a0)
00016DA4 7000                       		moveq	#0,d0
00016DA6 1028 0028                  		move.b	$28(a0),d0	; get object type
00016DAA 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016DAE 0641 0080                  		addi.w	#$80,d1
00016DB2 C0C1                       		mulu.w	d1,d0
00016DB4 E088                       		lsr.l	#8,d0
00016DB6 3140 0036                  		move.w	d0,$36(a0)
00016DBA 5341                       		subq.w	#1,d1
00016DBC 3141 0038                  		move.w	d1,$38(a0)
00016DC0                            
00016DC0                            loc_16068:				; XREF: Obj6C_Index
00016DC0 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016DC4 9068 0036                  		sub.w	$36(a0),d0
00016DC8 C068 0038                  		and.w	$38(a0),d0
00016DCC 6600                       		bne.s	Obj6C_Animate
00016DCE 5928 0024                  		subq.b	#4,$24(a0)
00016DD2 6000                       		bra.s	Obj6C_Vanish
00016DD4                            ; ===========================================================================
00016DD4                            
00016DD4                            Obj6C_Animate:
00016DD4 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016DDA 4EB9 0000 B300             		jsr	AnimateSprite
00016DE0 6000 9568                  		bra.w	MarkObjGone
00016DE4                            ; ===========================================================================
00016DE4                            
00016DE4                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016DE4 5368 0030                  		subq.w	#1,$30(a0)
00016DE8 6A00                       		bpl.s	loc_160AA
00016DEA 317C 007F 0030             		move.w	#127,$30(a0)
00016DF0 4A28 001C                  		tst.b	$1C(a0)
00016DF4 6700                       		beq.s	loc_160A4
00016DF6 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016DFC                            
00016DFC                            loc_160A4:
00016DFC 0868 0000 001C             		bchg	#0,$1C(a0)
00016E02                            
00016E02                            loc_160AA:
00016E02 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016E08 4EB9 0000 B300             		jsr	AnimateSprite
00016E0E 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016E14 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016E16 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016E1C 6600                       		bne.s	loc_160D6
00016E1E 7200                       		moveq	#0,d1
00016E20 1228 0019                  		move.b	$19(a0),d1
00016E24 4EB9 0000 7ECE             		jsr	(PlatformObject).l
00016E2A 6000 951E                  		bra.w	MarkObjGone
00016E2E                            ; ===========================================================================
00016E2E                            
00016E2E                            loc_160D6:
00016E2E 7200                       		moveq	#0,d1
00016E30 1228 0019                  		move.b	$19(a0),d1
00016E34 4EB9 0000 8042             		jsr	(ExitPlatform).l
00016E3A 3428 0008                  		move.w	8(a0),d2
00016E3E 4EB9 0000 85AC             		jsr	(MvSonicOnPtfm2).l
00016E44 6000 9504                  		bra.w	MarkObjGone
00016E48                            ; ===========================================================================
00016E48                            
00016E48                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016E48 0828 0003 0022             		btst	#3,$22(a0)
00016E4E 6700                       		beq.s	Obj6C_Display
00016E50 43F8 D000                  		lea	($FFFFD000).w,a1
00016E54 08A9 0003 0022             		bclr	#3,$22(a1)
00016E5A 08A8 0003 0022             		bclr	#3,$22(a0)
00016E60 117C 0002 0024             		move.b	#2,$24(a0)
00016E66 4228 0025                  		clr.b	$25(a0)
00016E6A                            
00016E6A                            Obj6C_Display:
00016E6A 6000 94DE                  		bra.w	MarkObjGone
00016E6E                            ; ===========================================================================
00016E6E                            Ani_obj6C:
00016E6E                            	include "_anim\obj6C.asm"
00016E6E                            ; ---------------------------------------------------------------------------
00016E6E                            ; Animation script - vanishing platforms (SBZ)
00016E6E                            ; ---------------------------------------------------------------------------
00016E6E 0000                       		dc.w byte_1611A-Ani_obj6C
00016E70 0000                       		dc.w byte_16122-Ani_obj6C
00016E72 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016E7A 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016E82                            		even
00016E82                            		even
00016E82                            
00016E82                            ; ---------------------------------------------------------------------------
00016E82                            ; Sprite mappings - vanishing platforms	(SBZ)
00016E82                            ; ---------------------------------------------------------------------------
00016E82                            Map_obj6C:
00016E82                            	include "_maps\obj6C.asm"
00016E82                            ; ---------------------------------------------------------------------------
00016E82                            ; Sprite mappings - vanishing platforms	(SBZ)
00016E82                            ; ---------------------------------------------------------------------------
00016E82 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016E86 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016E8A 01                         byte_16132:	dc.b 1
00016E8B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016E90 01                         byte_16138:	dc.b 1
00016E91 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016E96 01                         byte_1613E:	dc.b 1
00016E97 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016E9C 00                         byte_16144:	dc.b 0
00016E9E 00                         		even
00016E9E 00                         		even
00016E9E                            
00016E9E                            ; ===========================================================================
00016E9E                            ; ---------------------------------------------------------------------------
00016E9E                            ; Object 6E - electrocution orbs (SBZ)
00016E9E                            ; ---------------------------------------------------------------------------
00016E9E                            
00016E9E                            Obj6E:					; XREF: Obj_Index
00016E9E 7000                       		moveq	#0,d0
00016EA0 1028 0024                  		move.b	$24(a0),d0
00016EA4 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016EA8 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016EAC                            ; ===========================================================================
00016EAC 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016EAE 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016EB0                            ; ===========================================================================
00016EB0                            
00016EB0                            Obj6E_Main:				; XREF: Obj6E_Index
00016EB0 5428 0024                  		addq.b	#2,$24(a0)
00016EB4 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016EBC 317C 047E 0002             		move.w	#$47E,2(a0)
00016EC2 0028 0004 0001             		ori.b	#4,1(a0)
00016EC8 117C 0028 0019             		move.b	#$28,$19(a0)
00016ECE 7000                       		moveq	#0,d0
00016ED0 1028 0028                  		move.b	$28(a0),d0	; read object type
00016ED4 E948                       		lsl.w	#4,d0		; multiply by $10
00016ED6 5340                       		subq.w	#1,d0
00016ED8 3140 0034                  		move.w	d0,$34(a0)
00016EDC                            
00016EDC                            Obj6E_Shock:				; XREF: Obj6E_Index
00016EDC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016EE0 C068 0034                  		and.w	$34(a0),d0
00016EE4 6600                       		bne.s	Obj6E_Animate
00016EE6 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016EEC 4A28 0001                  		tst.b	1(a0)
00016EF0 6A00                       		bpl.s	Obj6E_Animate
00016EF2 303C 00B1                  		move.w	#$B1,d0
00016EF6 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play electricity sound
00016EFC                            
00016EFC                            Obj6E_Animate:
00016EFC 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016F02 4EB9 0000 B300             		jsr	AnimateSprite
00016F08 117C 0000 0020             		move.b	#0,$20(a0)
00016F0E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016F14 6600                       		bne.s	Obj6E_Display	; if not, branch
00016F16 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016F1C                            
00016F1C                            Obj6E_Display:
00016F1C 6000 942C                  		bra.w	MarkObjGone
00016F20                            ; ===========================================================================
00016F20                            Ani_obj6E:
00016F20                            	include "_anim\obj6E.asm"
00016F20                            ; ---------------------------------------------------------------------------
00016F20                            ; Animation script - electrocution orbs (SBZ)
00016F20                            ; ---------------------------------------------------------------------------
00016F20 0000                       		dc.w byte_161CC-Ani_obj6E
00016F22 0000                       		dc.w byte_161D0-Ani_obj6E
00016F24 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016F28 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016F38                            		even
00016F38                            		even
00016F38                            
00016F38                            ; ---------------------------------------------------------------------------
00016F38                            ; Sprite mappings - electrocution orbs (SBZ)
00016F38                            ; ---------------------------------------------------------------------------
00016F38                            Map_obj6E:
00016F38                            	include "_maps\obj6E.asm"
00016F38                            Map_26ed:
00016F38 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016F3A 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016F3C 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016F3E 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016F40 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016F42 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016F44 01                         Map_26ed_C: 	dc.b $1
00016F45 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016F4A 02                         Map_26ed_12: 	dc.b $2
00016F4B F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016F50 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016F55 06                         Map_26ed_1D: 	dc.b $6
00016F56 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016F5B 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016F60 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016F65 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016F6A F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016F6F F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016F74 08                         Map_26ed_3C: 	dc.b $8
00016F75 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016F7A 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016F7F F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016F84 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016F89 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016F8E F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016F93 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016F98 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016F9D 06                         Map_26ed_65: 	dc.b $6
00016F9E F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016FA3 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016FA8 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016FAD F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016FB2 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016FB7 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016FBC 04                         Map_26ed_84: 	dc.b $4
00016FBD F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016FC2 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016FC7 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016FCC F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016FD2 00                         	even
00016FD2 00                         	even
00016FD2                            
00016FD2                            ; ===========================================================================
00016FD2                            ; ---------------------------------------------------------------------------
00016FD2                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016FD2                            ; ---------------------------------------------------------------------------
00016FD2                            
00016FD2                            Obj6F:					; XREF: Obj_Index
00016FD2 7000                       		moveq	#0,d0
00016FD4 1028 0024                  		move.b	$24(a0),d0
00016FD8 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016FDC 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016FE0 3028 0030                  		move.w	$30(a0),d0
00016FE4 0240 FF80                  		andi.w	#$FF80,d0
00016FE8 3238 F700                  		move.w	($FFFFF700).w,d1
00016FEC 0441 0080                  		subi.w	#$80,d1
00016FF0 0241 FF80                  		andi.w	#$FF80,d1
00016FF4 9041                       		sub.w	d1,d0
00016FF6 0C40 0280                  		cmpi.w	#$280,d0
00016FFA 6200                       		bhi.s	loc_1629A
00016FFC                            
00016FFC                            Obj6F_Display:
00016FFC 4EF9 0000 E2A8             		jmp	DisplaySprite
00017002                            ; ===========================================================================
00017002                            
00017002                            loc_1629A:
00017002 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00017008 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
0001700A 0C40 FF80                  		cmpi.w	#-$80,d0
0001700E 64EC                       		bcc.s	Obj6F_Display
00017010                            
00017010                            Obj6F_Act1or2:
00017010 1028 002F                  		move.b	$2F(a0),d0
00017014 6A00                       		bpl.s	Obj6F_Delete
00017016 0240 007F                  		andi.w	#$7F,d0
0001701A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001701E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00017024                            
00017024                            Obj6F_Delete:
00017024 4EF9 0000 E2E4             		jmp	DeleteObject
0001702A                            ; ===========================================================================
0001702A 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
0001702C 0000                       		dc.w loc_163D8-Obj6F_Index
0001702E                            ; ===========================================================================
0001702E                            
0001702E                            Obj6F_Main:				; XREF: Obj6F_Index
0001702E 1028 0028                  		move.b	$28(a0),d0
00017032 6B00 0000                  		bmi.w	loc_16380
00017036 5428 0024                  		addq.b	#2,$24(a0)
0001703A 217C 0001 6692 0004        		move.l	#Map_obj69a,4(a0)
00017042 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017048 117C 0010 0019             		move.b	#$10,$19(a0)
0001704E 0028 0004 0001             		ori.b	#4,1(a0)
00017054 117C 0004 0018             		move.b	#4,$18(a0)
0001705A 7000                       		moveq	#0,d0
0001705C 1028 0028                  		move.b	$28(a0),d0
00017060 3200                       		move.w	d0,d1
00017062 E648                       		lsr.w	#3,d0
00017064 0240 001E                  		andi.w	#$1E,d0
00017068 45FA 0000                  		lea	off_164A6(pc),a2
0001706C D4F2 0000                  		adda.w	(a2,d0.w),a2
00017070 315A 0038                  		move.w	(a2)+,$38(a0)
00017074 315A 0030                  		move.w	(a2)+,$30(a0)
00017078 214A 003C                  		move.l	a2,$3C(a0)
0001707C 0241 000F                  		andi.w	#$F,d1
00017080 E549                       		lsl.w	#2,d1
00017082 1141 0038                  		move.b	d1,$38(a0)
00017086 117C 0004 003A             		move.b	#4,$3A(a0)
0001708C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00017090 6700                       		beq.s	loc_16356
00017092 117C 0001 003B             		move.b	#1,$3B(a0)
00017098 4428 003A                  		neg.b	$3A(a0)
0001709C 7200                       		moveq	#0,d1
0001709E 1228 0038                  		move.b	$38(a0),d1
000170A2 D228 003A                  		add.b	$3A(a0),d1
000170A6 B228 0039                  		cmp.b	$39(a0),d1
000170AA 6500                       		bcs.s	loc_16352
000170AC 1001                       		move.b	d1,d0
000170AE 7200                       		moveq	#0,d1
000170B0 4A00                       		tst.b	d0
000170B2 6A00                       		bpl.s	loc_16352
000170B4 1228 0039                  		move.b	$39(a0),d1
000170B8 5901                       		subq.b	#4,d1
000170BA                            
000170BA                            loc_16352:
000170BA 1141 0038                  		move.b	d1,$38(a0)
000170BE                            
000170BE                            loc_16356:
000170BE 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000170C4 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000170CA 4A41                       		tst.w	d1
000170CC 6600                       		bne.s	loc_1636C
000170CE 117C 0001 001C             		move.b	#1,$1C(a0)
000170D4                            
000170D4                            loc_1636C:
000170D4 0C41 0008                  		cmpi.w	#8,d1
000170D8 6600                       		bne.s	loc_16378
000170DA 117C 0000 001C             		move.b	#0,$1C(a0)
000170E0                            
000170E0                            loc_16378:
000170E0 6100 C0D2                  		bsr.w	Obj63_ChangeDir
000170E4 6000 0000                  		bra.w	loc_163D8
000170E8                            ; ===========================================================================
000170E8                            
000170E8                            loc_16380:				; XREF: Obj6F_Main
000170E8 1140 002F                  		move.b	d0,$2F(a0)
000170EC 0240 007F                  		andi.w	#$7F,d0
000170F0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000170F4 08F2 0000 0000             		bset	#0,(a2,d0.w)
000170FA 6700                       		beq.s	loc_1639A
000170FC 4EF9 0000 E2E4             		jmp	DeleteObject
00017102                            ; ===========================================================================
00017102                            
00017102                            loc_1639A:
00017102 D040                       		add.w	d0,d0
00017104 0240 001E                  		andi.w	#$1E,d0
00017108 45F9 0000 0000             		lea	(ObjPos_SBZ1pf_Index).l,a2
0001710E D4F2 0000                  		adda.w	(a2,d0.w),a2
00017112 321A                       		move.w	(a2)+,d1
00017114 2248                       		movea.l	a0,a1
00017116 6000                       		bra.s	Obj6F_LoadPform
00017118                            ; ===========================================================================
00017118                            
00017118                            Obj6F_Loop:
00017118 4EB9 0000 E72E             		jsr	SingleObjLoad
0001711E 6600                       		bne.s	loc_163D0
00017120                            
00017120                            Obj6F_LoadPform:			; XREF: loc_1639A
00017120 12BC 006F                  		move.b	#$6F,0(a1)
00017124 335A 0008                  		move.w	(a2)+,8(a1)
00017128 335A 000C                  		move.w	(a2)+,$C(a1)
0001712C 301A                       		move.w	(a2)+,d0
0001712E 1340 0028                  		move.b	d0,$28(a1)
00017132                            
00017132                            loc_163D0:
00017132 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00017136                            
00017136 588F                       		addq.l	#4,sp
00017138 4E75                       		rts	
0001713A                            ; ===========================================================================
0001713A                            
0001713A                            loc_163D8:				; XREF: Obj6F_Index
0001713A 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00017140 4EB9 0000 B300             		jsr	AnimateSprite
00017146 4A28 001A                  		tst.b	$1A(a0)
0001714A 6600                       		bne.s	loc_16404
0001714C 3F28 0008                  		move.w	8(a0),-(sp)
00017150 6100 0000                  		bsr.w	loc_16424
00017154 323C 001B                  		move.w	#$1B,d1
00017158 343C 0007                  		move.w	#7,d2
0001715C 3602                       		move.w	d2,d3
0001715E 5243                       		addq.w	#1,d3
00017160 381F                       		move.w	(sp)+,d4
00017162 6000 950E                  		bra.w	SolidObject
00017166                            ; ===========================================================================
00017166                            
00017166                            loc_16404:
00017166 0828 0003 0022             		btst	#3,$22(a0)
0001716C 6700                       		beq.s	loc_16420
0001716E 43F8 D000                  		lea	($FFFFD000).w,a1
00017172 08A9 0003 0022             		bclr	#3,$22(a1)
00017178 08A8 0003 0022             		bclr	#3,$22(a0)
0001717E 4228 0025                  		clr.b	$25(a0)
00017182                            
00017182                            loc_16420:
00017182 6000 0002                  		bra.w	*+4
00017186                            
00017186                            loc_16424:
00017186 3028 0008                  		move.w	8(a0),d0
0001718A B068 0034                  		cmp.w	$34(a0),d0
0001718E 6600                       		bne.s	loc_16484
00017190 3028 000C                  		move.w	$C(a0),d0
00017194 B068 0036                  		cmp.w	$36(a0),d0
00017198 6600                       		bne.s	loc_16484
0001719A 7200                       		moveq	#0,d1
0001719C 1228 0038                  		move.b	$38(a0),d1
000171A0 D228 003A                  		add.b	$3A(a0),d1
000171A4 B228 0039                  		cmp.b	$39(a0),d1
000171A8 6500                       		bcs.s	loc_16456
000171AA 1001                       		move.b	d1,d0
000171AC 7200                       		moveq	#0,d1
000171AE 4A00                       		tst.b	d0
000171B0 6A00                       		bpl.s	loc_16456
000171B2 1228 0039                  		move.b	$39(a0),d1
000171B6 5901                       		subq.b	#4,d1
000171B8                            
000171B8                            loc_16456:
000171B8 1141 0038                  		move.b	d1,$38(a0)
000171BC 2268 003C                  		movea.l	$3C(a0),a1
000171C0 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000171C6 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000171CC 4A41                       		tst.w	d1
000171CE 6600                       		bne.s	loc_16474
000171D0 117C 0001 001C             		move.b	#1,$1C(a0)
000171D6                            
000171D6                            loc_16474:
000171D6 0C41 0008                  		cmpi.w	#8,d1
000171DA 6600                       		bne.s	loc_16480
000171DC 117C 0000 001C             		move.b	#0,$1C(a0)
000171E2                            
000171E2                            loc_16480:
000171E2 6100 BFD0                  		bsr.w	Obj63_ChangeDir
000171E6                            
000171E6                            loc_16484:
000171E6 4EF9 0000 E26E             		jmp	SpeedToPos
000171EC                            ; ===========================================================================
000171EC                            Ani_obj6F:
000171EC                            	include "_anim\obj6F.asm"
000171EC                            ; ---------------------------------------------------------------------------
000171EC                            ; Animation script - platform on conveyor belt (SBZ)
000171EC                            ; ---------------------------------------------------------------------------
000171EC 0000                       		dc.w byte_1648E-Ani_obj6F
000171EE 0000                       		dc.w byte_164A2-Ani_obj6F
000171F0 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000171FD 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00017204 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00017208 00                         		even
00017208 00                         		even
00017208                            
00017208 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
0001720E 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00017214 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00017228 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001723C 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00017250 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00017264 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017278 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001728C                            ; ===========================================================================
0001728C                            ; ---------------------------------------------------------------------------
0001728C                            ; Object 70 - large girder block (SBZ)
0001728C                            ; ---------------------------------------------------------------------------
0001728C                            
0001728C                            Obj70:					; XREF: Obj_Index
0001728C 7000                       		moveq	#0,d0
0001728E 1028 0024                  		move.b	$24(a0),d0
00017292 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00017296 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
0001729A                            ; ===========================================================================
0001729A 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
0001729C 0000                       		dc.w Obj70_Action-Obj70_Index
0001729E                            ; ===========================================================================
0001729E                            
0001729E                            Obj70_Main:				; XREF: Obj70_Index
0001729E 5428 0024                  		addq.b	#2,$24(a0)
000172A2 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
000172AA 317C 42F0 0002             		move.w	#$42F0,2(a0)
000172B0 0028 0004 0001             		ori.b	#4,1(a0)
000172B6 117C 0004 0018             		move.b	#4,$18(a0)
000172BC 117C 0060 0019             		move.b	#$60,$19(a0)
000172C2 117C 0018 0016             		move.b	#$18,$16(a0)
000172C8 3168 0008 0032             		move.w	8(a0),$32(a0)
000172CE 3168 000C 0030             		move.w	$C(a0),$30(a0)
000172D4 6100 0000                  		bsr.w	Obj70_Move2
000172D8                            
000172D8                            Obj70_Action:				; XREF: Obj70_Index
000172D8 3F28 0008                  		move.w	8(a0),-(sp)
000172DC 4A68 003A                  		tst.w	$3A(a0)
000172E0 6700                       		beq.s	Obj70_Move
000172E2 5368 003A                  		subq.w	#1,$3A(a0)
000172E6 6600                       		bne.s	Obj70_Solid
000172E8                            
000172E8                            Obj70_Move:
000172E8 4EB9 0000 E26E             		jsr	SpeedToPos
000172EE 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000172F2 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000172F4 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000172F8                            
000172F8                            Obj70_Solid:
000172F8 381F                       		move.w	(sp)+,d4
000172FA 4A28 0001                  		tst.b	1(a0)
000172FE 6A00                       		bpl.s	Obj70_ChkDel
00017300 7200                       		moveq	#0,d1
00017302 1228 0019                  		move.b	$19(a0),d1
00017306 0641 000B                  		addi.w	#$B,d1
0001730A 7400                       		moveq	#0,d2
0001730C 1428 0016                  		move.b	$16(a0),d2
00017310 3602                       		move.w	d2,d3
00017312 5243                       		addq.w	#1,d3
00017314 6100 935C                  		bsr.w	SolidObject
00017318                            
00017318                            Obj70_ChkDel:
00017318 3028 0032                  		move.w	$32(a0),d0
0001731C 0240 FF80                  		andi.w	#$FF80,d0
00017320 3238 F700                  		move.w	($FFFFF700).w,d1
00017324 0441 0080                  		subi.w	#$80,d1
00017328 0241 FF80                  		andi.w	#$FF80,d1
0001732C 9041                       		sub.w	d1,d0
0001732E 0C40 0280                  		cmpi.w	#$280,d0
00017332 6200                       		bhi.s	Obj70_Delete
00017334 4EF9 0000 E2A8             		jmp	DisplaySprite
0001733A                            ; ===========================================================================
0001733A                            
0001733A                            Obj70_Delete:
0001733A 4EF9 0000 E2E4             		jmp	DeleteObject
00017340                            ; ===========================================================================
00017340                            
00017340                            Obj70_Move2:				; XREF: Obj70_Main
00017340 1028 0038                  		move.b	$38(a0),d0
00017344 0240 0018                  		andi.w	#$18,d0
00017348 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
0001734E 43F1 0000                  		lea	(a1,d0.w),a1
00017352 3159 0010                  		move.w	(a1)+,$10(a0)
00017356 3159 0012                  		move.w	(a1)+,$12(a0)
0001735A 3159 0034                  		move.w	(a1)+,$34(a0)
0001735E 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00017362 317C 0007 003A             		move.w	#7,$3A(a0)
00017368 4E75                       		rts	
0001736A                            ; ===========================================================================
0001736A 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00017372 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
0001737A FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00017382 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
0001738A                            ; ---------------------------------------------------------------------------
0001738A                            ; Sprite mappings - large girder block (SBZ)
0001738A                            ; ---------------------------------------------------------------------------
0001738A                            Map_obj70:
0001738A                            	include "_maps\obj70.asm"
0001738A                            ; ---------------------------------------------------------------------------
0001738A                            ; Sprite mappings - large girder block (SBZ)
0001738A                            ; ---------------------------------------------------------------------------
0001738A 0000                       		dc.w byte_1662A-Map_obj70
0001738C 0C                         byte_1662A:	dc.b $C
0001738D E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00017392 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00017397 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001739C 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
000173A1 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000173A6 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
000173AB E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
000173B0 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
000173B5 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000173BA 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000173BF E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000173C4 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000173CA 00                         		even
000173CA 00                         		even
000173CA                            
000173CA                            ; ===========================================================================
000173CA                            ; ---------------------------------------------------------------------------
000173CA                            ; Object 72 - teleporter (SBZ)
000173CA                            ; ---------------------------------------------------------------------------
000173CA                            
000173CA                            Obj72:					; XREF: Obj_Index
000173CA 7000                       		moveq	#0,d0
000173CC 1028 0024                  		move.b	$24(a0),d0
000173D0 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000173D4 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000173D8 3028 0008                  		move.w	8(a0),d0
000173DC 0240 FF80                  		andi.w	#$FF80,d0
000173E0 3238 F700                  		move.w	($FFFFF700).w,d1
000173E4 0441 0080                  		subi.w	#$80,d1
000173E8 0241 FF80                  		andi.w	#$FF80,d1
000173EC 9041                       		sub.w	d1,d0
000173EE 0C40 0280                  		cmpi.w	#$280,d0
000173F2 6200                       		bhi.s	Obj72_Delete
000173F4 4E75                       		rts	
000173F6                            ; ===========================================================================
000173F6                            
000173F6                            Obj72_Delete:
000173F6 4EF9 0000 E2E4             		jmp	DeleteObject
000173FC                            ; ===========================================================================
000173FC 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000173FE 0000                       		dc.w loc_166C8-Obj72_Index
00017400 0000                       		dc.w loc_1675E-Obj72_Index
00017402 0000                       		dc.w loc_16798-Obj72_Index
00017404                            ; ===========================================================================
00017404                            
00017404                            Obj72_Main:				; XREF: Obj72_Index
00017404 5428 0024                  		addq.b	#2,$24(a0)
00017408 1028 0028                  		move.b	$28(a0),d0
0001740C D040                       		add.w	d0,d0
0001740E 0240 001E                  		andi.w	#$1E,d0
00017412 45FA 0000                  		lea	Obj72_Data(pc),a2
00017416 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001741A 315A 003A                  		move.w	(a2)+,$3A(a0)
0001741E 214A 003C                  		move.l	a2,$3C(a0)
00017422 315A 0036                  		move.w	(a2)+,$36(a0)
00017426 315A 0038                  		move.w	(a2)+,$38(a0)
0001742A                            
0001742A                            loc_166C8:				; XREF: Obj72_Index
0001742A 43F8 D000                  		lea	($FFFFD000).w,a1
0001742E 3029 0008                  		move.w	8(a1),d0
00017432 9068 0008                  		sub.w	8(a0),d0
00017436 0828 0000 0022             		btst	#0,$22(a0)
0001743C 6700                       		beq.s	loc_166E0
0001743E 0640 000F                  		addi.w	#$F,d0
00017442                            
00017442                            loc_166E0:
00017442 0C40 0010                  		cmpi.w	#$10,d0
00017446 6400                       		bcc.s	locret_1675C
00017448 3229 000C                  		move.w	$C(a1),d1
0001744C 9268 000C                  		sub.w	$C(a0),d1
00017450 0641 0020                  		addi.w	#$20,d1
00017454 0C41 0040                  		cmpi.w	#$40,d1
00017458 6400                       		bcc.s	locret_1675C
0001745A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001745E 6600                       		bne.s	locret_1675C
00017460 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00017466 6600                       		bne.s	loc_1670E
00017468 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001746E 6500                       		bcs.s	locret_1675C
00017470                            
00017470                            loc_1670E:
00017470 5428 0024                  		addq.b	#2,$24(a0)
00017474 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001747A 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00017480 337C 0800 0014             		move.w	#$800,$14(a1)
00017486 337C 0000 0010             		move.w	#0,$10(a1)
0001748C 337C 0000 0012             		move.w	#0,$12(a1)
00017492 08A8 0005 0022             		bclr	#5,$22(a0)
00017498 08A9 0005 0022             		bclr	#5,$22(a1)
0001749E 08E9 0001 0022             		bset	#1,$22(a1)
000174A4 3368 0008 0008             		move.w	8(a0),8(a1)
000174AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000174B0 4228 0032                  		clr.b	$32(a0)
000174B4 303C 00BE                  		move.w	#$BE,d0
000174B8 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000174BE                            
000174BE                            locret_1675C:
000174BE 4E75                       		rts	
000174C0                            ; ===========================================================================
000174C0                            
000174C0                            loc_1675E:				; XREF: Obj72_Index
000174C0 43F8 D000                  		lea	($FFFFD000).w,a1
000174C4 1028 0032                  		move.b	$32(a0),d0
000174C8 5428 0032                  		addq.b	#2,$32(a0)
000174CC 4EB9 0000 2D86             		jsr	(CalcSine).l
000174D2 EA40                       		asr.w	#5,d0
000174D4 3428 000C                  		move.w	$C(a0),d2
000174D8 9440                       		sub.w	d0,d2
000174DA 3342 000C                  		move.w	d2,$C(a1)
000174DE 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000174E4 6600                       		bne.s	locret_16796
000174E6 6100 0000                  		bsr.w	sub_1681C
000174EA 5428 0024                  		addq.b	#2,$24(a0)
000174EE 303C 00BC                  		move.w	#$BC,d0
000174F2 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play teleport sound
000174F8                            
000174F8                            locret_16796:
000174F8 4E75                       		rts	
000174FA                            ; ===========================================================================
000174FA                            
000174FA                            loc_16798:				; XREF: Obj72_Index
000174FA 588F                       		addq.l	#4,sp
000174FC 43F8 D000                  		lea	($FFFFD000).w,a1
00017500 5328 002E                  		subq.b	#1,$2E(a0)
00017504 6A00                       		bpl.s	loc_167DA
00017506 3368 0036 0008             		move.w	$36(a0),8(a1)
0001750C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017512 7200                       		moveq	#0,d1
00017514 1228 003A                  		move.b	$3A(a0),d1
00017518 5801                       		addq.b	#4,d1
0001751A B228 003B                  		cmp.b	$3B(a0),d1
0001751E 6500                       		bcs.s	loc_167C2
00017520 7200                       		moveq	#0,d1
00017522 6000                       		bra.s	loc_16800
00017524                            ; ===========================================================================
00017524                            
00017524                            loc_167C2:
00017524 1141 003A                  		move.b	d1,$3A(a0)
00017528 2468 003C                  		movea.l	$3C(a0),a2
0001752C 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00017532 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00017538 6000 0000                  		bra.w	sub_1681C
0001753C                            ; ===========================================================================
0001753C                            
0001753C                            loc_167DA:
0001753C 2429 0008                  		move.l	8(a1),d2
00017540 2629 000C                  		move.l	$C(a1),d3
00017544 3029 0010                  		move.w	$10(a1),d0
00017548 48C0                       		ext.l	d0
0001754A E180                       		asl.l	#8,d0
0001754C D480                       		add.l	d0,d2
0001754E 3029 0012                  		move.w	$12(a1),d0
00017552 48C0                       		ext.l	d0
00017554 E180                       		asl.l	#8,d0
00017556 D680                       		add.l	d0,d3
00017558 2342 0008                  		move.l	d2,8(a1)
0001755C 2343 000C                  		move.l	d3,$C(a1)
00017560 4E75                       		rts	
00017562                            ; ===========================================================================
00017562                            
00017562                            loc_16800:
00017562 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017568 4228 0024                  		clr.b	$24(a0)
0001756C 4238 F7C8                  		clr.b	($FFFFF7C8).w
00017570 337C 0000 0010             		move.w	#0,$10(a1)
00017576 337C 0200 0012             		move.w	#$200,$12(a1)
0001757C 4E75                       		rts	
0001757E                            
0001757E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001757E                            
0001757E                            
0001757E                            sub_1681C:
0001757E 7000                       		moveq	#0,d0
00017580 343C 1000                  		move.w	#$1000,d2
00017584 3028 0036                  		move.w	$36(a0),d0
00017588 9069 0008                  		sub.w	8(a1),d0
0001758C 6C00                       		bge.s	loc_16830
0001758E 4440                       		neg.w	d0
00017590 4442                       		neg.w	d2
00017592                            
00017592                            loc_16830:
00017592 7200                       		moveq	#0,d1
00017594 363C 1000                  		move.w	#$1000,d3
00017598 3228 0038                  		move.w	$38(a0),d1
0001759C 9269 000C                  		sub.w	$C(a1),d1
000175A0 6C00                       		bge.s	loc_16844
000175A2 4441                       		neg.w	d1
000175A4 4443                       		neg.w	d3
000175A6                            
000175A6                            loc_16844:
000175A6 B240                       		cmp.w	d0,d1
000175A8 6500                       		bcs.s	loc_1687A
000175AA 7200                       		moveq	#0,d1
000175AC 3228 0038                  		move.w	$38(a0),d1
000175B0 9269 000C                  		sub.w	$C(a1),d1
000175B4 4841                       		swap	d1
000175B6 83C3                       		divs.w	d3,d1
000175B8 7000                       		moveq	#0,d0
000175BA 3028 0036                  		move.w	$36(a0),d0
000175BE 9069 0008                  		sub.w	8(a1),d0
000175C2 6700                       		beq.s	loc_16866
000175C4 4840                       		swap	d0
000175C6 81C1                       		divs.w	d1,d0
000175C8                            
000175C8                            loc_16866:
000175C8 3340 0010                  		move.w	d0,$10(a1)
000175CC 3343 0012                  		move.w	d3,$12(a1)
000175D0 4A41                       		tst.w	d1
000175D2 6A00                       		bpl.s	loc_16874
000175D4 4441                       		neg.w	d1
000175D6                            
000175D6                            loc_16874:
000175D6 3141 002E                  		move.w	d1,$2E(a0)
000175DA 4E75                       		rts	
000175DC                            ; ===========================================================================
000175DC                            
000175DC                            loc_1687A:
000175DC 7000                       		moveq	#0,d0
000175DE 3028 0036                  		move.w	$36(a0),d0
000175E2 9069 0008                  		sub.w	8(a1),d0
000175E6 4840                       		swap	d0
000175E8 81C2                       		divs.w	d2,d0
000175EA 7200                       		moveq	#0,d1
000175EC 3228 0038                  		move.w	$38(a0),d1
000175F0 9269 000C                  		sub.w	$C(a1),d1
000175F4 6700                       		beq.s	loc_16898
000175F6 4841                       		swap	d1
000175F8 83C0                       		divs.w	d0,d1
000175FA                            
000175FA                            loc_16898:
000175FA 3341 0012                  		move.w	d1,$12(a1)
000175FE 3342 0010                  		move.w	d2,$10(a1)
00017602 4A40                       		tst.w	d0
00017604 6A00                       		bpl.s	loc_168A6
00017606 4440                       		neg.w	d0
00017608                            
00017608                            loc_168A6:
00017608 3140 002E                  		move.w	d0,$2E(a0)
0001760C 4E75                       		rts	
0001760E                            ; End of function sub_1681C
0001760E                            
0001760E                            ; ===========================================================================
0001760E 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00017614 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
0001761A 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
0001761E 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017624 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
0001762A 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00017630 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00017636 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001763C 0884 0298 0894             		dc.w $884, $298, $894
00017642 0270 0894 0190             		dc.w $270, $894, $190
00017648 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
0001764E 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00017654 1184 0498 1158             		dc.w $1184, $498, $1158
0001765A 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00017660 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017666 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001766C 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017672 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017678 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001767E FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017684 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001768A FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00017690 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017696                            ; ===========================================================================
00017696                            ; ---------------------------------------------------------------------------
00017696                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017696                            ; ---------------------------------------------------------------------------
00017696                            
00017696                            Obj78:					; XREF: Obj_Index
00017696 7000                       		moveq	#0,d0
00017698 1028 0024                  		move.b	$24(a0),d0
0001769C 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000176A0 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000176A4                            ; ===========================================================================
000176A4 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000176A6 0000                       		dc.w Obj78_Action-Obj78_Index
000176A8 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000176AA 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000176AC 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000176AE 0000                       		dc.w Obj78_Delete-Obj78_Index
000176B0 0000                       		dc.w loc_16CC0-Obj78_Index
000176B2                            ; ===========================================================================
000176B2                            
000176B2                            locret_16950:
000176B2 4E75                       		rts	
000176B4                            ; ===========================================================================
000176B4                            
000176B4                            Obj78_Main:				; XREF: Obj78_Index
000176B4 117C 0007 0016             		move.b	#7,$16(a0)
000176BA 117C 0008 0017             		move.b	#8,$17(a0)
000176C0 4EB9 0000 E20C             		jsr	ObjectFall
000176C6 4EBA E4AA                  		jsr	ObjHitFloor
000176CA 4A41                       		tst.w	d1
000176CC 6AE4                       		bpl.s	locret_16950
000176CE D368 000C                  		add.w	d1,$C(a0)
000176D2 4268 0012                  		clr.w	$12(a0)
000176D6 5428 0024                  		addq.b	#2,$24(a0)
000176DA 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000176E2 317C 22B0 0002             		move.w	#$22B0,2(a0)
000176E8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000176EE 6700                       		beq.s	loc_16996
000176F0 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000176F6                            
000176F6                            loc_16996:
000176F6 0228 0003 0001             		andi.b	#3,1(a0)
000176FC 0028 0004 0001             		ori.b	#4,1(a0)
00017702 1168 0001 0022             		move.b	1(a0),$22(a0)
00017708 117C 0004 0018             		move.b	#4,$18(a0)
0001770E 117C 0008 0019             		move.b	#8,$19(a0)
00017714 117C 000B 0020             		move.b	#$B,$20(a0)
0001771A 3428 0008                  		move.w	8(a0),d2
0001771E 7A0C                       		moveq	#$C,d5
00017720 0828 0000 0022             		btst	#0,$22(a0)
00017726 6700                       		beq.s	loc_169CA
00017728 4445                       		neg.w	d5
0001772A                            
0001772A                            loc_169CA:
0001772A 1C3C 0004                  		move.b	#4,d6
0001772E 7600                       		moveq	#0,d3
00017730 7804                       		moveq	#4,d4
00017732 2448                       		movea.l	a0,a2
00017734 7202                       		moveq	#2,d1
00017736                            
00017736                            Obj78_LoadBody:
00017736 4EB9 0000 E744             		jsr	SingleObjLoad2
0001773C 6600                       		bne.s	Obj78_QuitLoad
0001773E 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017742 1346 0024                  		move.b	d6,$24(a1)
00017746 5406                       		addq.b	#2,d6
00017748 2368 0004 0004             		move.l	4(a0),4(a1)
0001774E 3368 0002 0002             		move.w	2(a0),2(a1)
00017754 137C 0005 0018             		move.b	#5,$18(a1)
0001775A 137C 0008 0019             		move.b	#8,$19(a1)
00017760 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017766 D445                       		add.w	d5,d2
00017768 3342 0008                  		move.w	d2,8(a1)
0001776C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017772 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017778 1368 0022 0001             		move.b	$22(a0),1(a1)
0001777E 137C 0008 001A             		move.b	#8,$1A(a1)
00017784 234A 003C                  		move.l	a2,$3C(a1)
00017788 1344 003C                  		move.b	d4,$3C(a1)
0001778C 5804                       		addq.b	#4,d4
0001778E 2449                       		movea.l	a1,a2
00017790                            
00017790                            Obj78_QuitLoad:
00017790 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017794                            
00017794 117C 0007 002A             		move.b	#7,$2A(a0)
0001779A 4228 003C                  		clr.b	$3C(a0)
0001779E                            
0001779E                            Obj78_Action:				; XREF: Obj78_Index
0001779E 4A28 0022                  		tst.b	$22(a0)
000177A2 6B00 0000                  		bmi.w	loc_16C96
000177A6 7000                       		moveq	#0,d0
000177A8 1028 0025                  		move.b	$25(a0),d0
000177AC 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
000177B0 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
000177B4 1228 002B                  		move.b	$2B(a0),d1
000177B8 6A00                       		bpl.s	Obj78_Display
000177BA 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000177C0 1028 0026                  		move.b	$26(a0),d0
000177C4 0240 007F                  		andi.w	#$7F,d0
000177C8 5828 0026                  		addq.b	#4,$26(a0)
000177CC 1031 0000                  		move.b	(a1,d0.w),d0
000177D0 6A00                       		bpl.s	Obj78_AniHead
000177D2 08A8 0007 002B             		bclr	#7,$2B(a0)
000177D8 6000                       		bra.s	Obj78_Display
000177DA                            ; ===========================================================================
000177DA                            
000177DA                            Obj78_AniHead:
000177DA 0201 0010                  		andi.b	#$10,d1
000177DE D001                       		add.b	d1,d0
000177E0 1140 001A                  		move.b	d0,$1A(a0)
000177E4                            
000177E4                            Obj78_Display:
000177E4 3028 0008                  		move.w	8(a0),d0
000177E8 0240 FF80                  		andi.w	#$FF80,d0
000177EC 3238 F700                  		move.w	($FFFFF700).w,d1
000177F0 0441 0080                  		subi.w	#$80,d1
000177F4 0241 FF80                  		andi.w	#$FF80,d1
000177F8 9041                       		sub.w	d1,d0
000177FA 0C40 0280                  		cmpi.w	#$280,d0
000177FE 6200 0000                  		bhi.w	Obj78_ChkGone
00017802 4EF9 0000 E2A8             		jmp	DisplaySprite
00017808                            ; ===========================================================================
00017808                            
00017808                            Obj78_ChkGone:
00017808 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001780C 7000                       		moveq	#0,d0
0001780E 1028 0023                  		move.b	$23(a0),d0
00017812 6700                       		beq.s	loc_16ABC
00017814 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001781A                            
0001781A                            loc_16ABC:
0001781A 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00017820 4E75                       		rts	
00017822                            ; ===========================================================================
00017822                            
00017822                            Obj78_Delete:				; XREF: Obj78_Index
00017822 4EF9 0000 E2E4             		jmp	DeleteObject
00017828                            ; ===========================================================================
00017828 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
0001782A 0000                       		dc.w loc_16B02-Obj78_Index2
0001782C                            ; ===========================================================================
0001782C                            
0001782C                            Obj78_Move:				; XREF: Obj78_Index2
0001782C 5328 002A                  		subq.b	#1,$2A(a0)
00017830 6B00                       		bmi.s	Obj78_Move2
00017832 4E75                       		rts	
00017834                            ; ===========================================================================
00017834                            
00017834                            Obj78_Move2:
00017834 5428 0025                  		addq.b	#2,$25(a0)
00017838 117C 0010 002A             		move.b	#$10,$2A(a0)
0001783E 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017844 317C 0040 0014             		move.w	#$40,$14(a0)
0001784A 0868 0004 002B             		bchg	#4,$2B(a0)
00017850 6600                       		bne.s	loc_16AFC
00017852 4268 0010                  		clr.w	$10(a0)
00017856 4468 0014                  		neg.w	$14(a0)
0001785A                            
0001785A                            loc_16AFC:
0001785A 08E8 0007 002B             		bset	#7,$2B(a0)
00017860                            
00017860                            loc_16B02:				; XREF: Obj78_Index2
00017860 5328 002A                  		subq.b	#1,$2A(a0)
00017864 6B00                       		bmi.s	loc_16B5E
00017866 2F28 0008                  		move.l	8(a0),-(sp)
0001786A 2428 0008                  		move.l	8(a0),d2
0001786E 3028 0010                  		move.w	$10(a0),d0
00017872 0828 0000 0022             		btst	#0,$22(a0)
00017878 6700                       		beq.s	loc_16B1E
0001787A 4440                       		neg.w	d0
0001787C                            
0001787C                            loc_16B1E:
0001787C 48C0                       		ext.l	d0
0001787E E180                       		asl.l	#8,d0
00017880 D480                       		add.l	d0,d2
00017882 2142 0008                  		move.l	d2,8(a0)
00017886 4EBA E2EA                  		jsr	ObjHitFloor
0001788A 241F                       		move.l	(sp)+,d2
0001788C 0C41 FFF8                  		cmpi.w	#-8,d1
00017890 6D00                       		blt.s	loc_16B70
00017892 0C41 000C                  		cmpi.w	#$C,d1
00017896 6C00                       		bge.s	loc_16B70
00017898 D368 000C                  		add.w	d1,$C(a0)
0001789C 4842                       		swap	d2
0001789E B468 0008                  		cmp.w	8(a0),d2
000178A2 6700                       		beq.s	locret_16B5C
000178A4 7000                       		moveq	#0,d0
000178A6 1028 003C                  		move.b	$3C(a0),d0
000178AA 5228 003C                  		addq.b	#1,$3C(a0)
000178AE 0228 000F 003C             		andi.b	#$F,$3C(a0)
000178B4 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000178B8                            
000178B8                            locret_16B5C:
000178B8 4E75                       		rts	
000178BA                            ; ===========================================================================
000178BA                            
000178BA                            loc_16B5E:
000178BA 5528 0025                  		subq.b	#2,$25(a0)
000178BE 117C 0007 002A             		move.b	#7,$2A(a0)
000178C4 317C 0000 0010             		move.w	#0,$10(a0)
000178CA 4E75                       		rts	
000178CC                            ; ===========================================================================
000178CC                            
000178CC                            loc_16B70:
000178CC 2142 0008                  		move.l	d2,8(a0)
000178D0 0868 0000 0022             		bchg	#0,$22(a0)
000178D6 1168 0022 0001             		move.b	$22(a0),1(a0)
000178DC 7000                       		moveq	#0,d0
000178DE 1028 003C                  		move.b	$3C(a0),d0
000178E2 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000178E8 5228 003C                  		addq.b	#1,$3C(a0)
000178EC 0228 000F 003C             		andi.b	#$F,$3C(a0)
000178F2 4E75                       		rts	
000178F4                            ; ===========================================================================
000178F4                            
000178F4                            Obj78_BodySeg2:				; XREF: Obj78_Index
000178F4 2268 003C                  		movea.l	$3C(a0),a1
000178F8 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000178FE 6A00                       		bpl.s	Obj78_BodySeg1
00017900 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017906 1028 0026                  		move.b	$26(a0),d0
0001790A 0240 007F                  		andi.w	#$7F,d0
0001790E 5828 0026                  		addq.b	#4,$26(a0)
00017912 4A31 0004                  		tst.b	4(a1,d0.w)
00017916 6A00                       		bpl.s	Obj78_AniBody
00017918 5828 0026                  		addq.b	#4,$26(a0)
0001791C                            
0001791C                            Obj78_AniBody:
0001791C 1031 0000                  		move.b	(a1,d0.w),d0
00017920 5000                       		addq.b	#8,d0
00017922 1140 001A                  		move.b	d0,$1A(a0)
00017926                            
00017926                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017926 2268 003C                  		movea.l	$3C(a0),a1
0001792A 4A28 0022                  		tst.b	$22(a0)
0001792E 6B00 0000                  		bmi.w	loc_16C90
00017932 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017938 1169 0025 0025             		move.b	$25(a1),$25(a0)
0001793E 6700 0000                  		beq.w	loc_16C64
00017942 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017948 3029 0010                  		move.w	$10(a1),d0
0001794C D069 0014                  		add.w	$14(a1),d0
00017950 3140 0010                  		move.w	d0,$10(a0)
00017954 2428 0008                  		move.l	8(a0),d2
00017958 2602                       		move.l	d2,d3
0001795A 3028 0010                  		move.w	$10(a0),d0
0001795E 0828 0000 0022             		btst	#0,$22(a0)
00017964 6700                       		beq.s	loc_16C0C
00017966 4440                       		neg.w	d0
00017968                            
00017968                            loc_16C0C:
00017968 48C0                       		ext.l	d0
0001796A E180                       		asl.l	#8,d0
0001796C D480                       		add.l	d0,d2
0001796E 2142 0008                  		move.l	d2,8(a0)
00017972 4843                       		swap	d3
00017974 B668 0008                  		cmp.w	8(a0),d3
00017978 6700                       		beq.s	loc_16C64
0001797A 7000                       		moveq	#0,d0
0001797C 1028 003C                  		move.b	$3C(a0),d0
00017980 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017984 0C01 0080                  		cmpi.b	#-$80,d1
00017988 6600                       		bne.s	loc_16C50
0001798A 4843                       		swap	d3
0001798C 2143 0008                  		move.l	d3,8(a0)
00017990 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017994 0868 0000 0022             		bchg	#0,$22(a0)
0001799A 1168 0022 0001             		move.b	$22(a0),1(a0)
000179A0 5228 003C                  		addq.b	#1,$3C(a0)
000179A4 0228 000F 003C             		andi.b	#$F,$3C(a0)
000179AA 6000                       		bra.s	loc_16C64
000179AC                            ; ===========================================================================
000179AC                            
000179AC                            loc_16C50:
000179AC 4881                       		ext.w	d1
000179AE D368 000C                  		add.w	d1,$C(a0)
000179B2 5228 003C                  		addq.b	#1,$3C(a0)
000179B6 0228 000F 003C             		andi.b	#$F,$3C(a0)
000179BC 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000179C0                            
000179C0                            loc_16C64:
000179C0 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000179C6 6700                       		beq.s	loc_16C90
000179C8 0C11 0027                  		cmpi.b	#$27,0(a1)
000179CC 6700                       		beq.s	loc_16C7C
000179CE 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000179D4 6600                       		bne.s	loc_16C82
000179D6                            
000179D6                            loc_16C7C:
000179D6 117C 000A 0024             		move.b	#$A,$24(a0)
000179DC                            
000179DC                            loc_16C82:
000179DC 4EF9 0000 E2A8             		jmp	DisplaySprite
000179E2                            
000179E2                            ; ===========================================================================
000179E2 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000179EA                            ; ===========================================================================
000179EA                            
000179EA                            loc_16C90:
000179EA 08E9 0007 0022             		bset	#7,$22(a1)
000179F0                            
000179F0                            loc_16C96:
000179F0 7000                       		moveq	#0,d0
000179F2 1028 0024                  		move.b	$24(a0),d0
000179F6 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000179FA 0828 0000 0022             		btst	#0,$22(a0)
00017A00 6700                       		beq.s	loc_16CAA
00017A02 4440                       		neg.w	d0
00017A04                            
00017A04                            loc_16CAA:
00017A04 3140 0010                  		move.w	d0,$10(a0)
00017A08 317C FC00 0012             		move.w	#-$400,$12(a0)
00017A0E 117C 000C 0024             		move.b	#$C,$24(a0)
00017A14 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017A1A                            
00017A1A                            loc_16CC0:				; XREF: Obj78_Index
00017A1A 4EB9 0000 E20C             		jsr	ObjectFall
00017A20 4A68 0012                  		tst.w	$12(a0)
00017A24 6B00                       		bmi.s	loc_16CE0
00017A26 4EBA E14A                  		jsr	ObjHitFloor
00017A2A 4A41                       		tst.w	d1
00017A2C 6A00                       		bpl.s	loc_16CE0
00017A2E D368 000C                  		add.w	d1,$C(a0)
00017A32 317C FC00 0012             		move.w	#-$400,$12(a0)
00017A38                            
00017A38                            loc_16CE0:
00017A38 4A28 0001                  		tst.b	1(a0)
00017A3C 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00017A40 4EF9 0000 E2A8             		jmp	DisplaySprite
00017A46                            ; ===========================================================================
00017A46                            Ani_obj78:
00017A46                            	include "_anim\obj78.asm"
00017A46                            ; ---------------------------------------------------------------------------
00017A46                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017A46                            ; ---------------------------------------------------------------------------
00017A46 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017A56 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017A66 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017A76 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017A86 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017A96 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017AA6 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017AB6 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017AC6                            	even
00017AC6                            	even
00017AC6                            
00017AC6                            ; ---------------------------------------------------------------------------
00017AC6                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017AC6                            ; ---------------------------------------------------------------------------
00017AC6                            Map_obj78:
00017AC6                            	include "_maps\obj78.asm"
00017AC6                            ; ---------------------------------------------------------------------------
00017AC6                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017AC6                            ; ---------------------------------------------------------------------------
00017AC6 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017ACA 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017ACE 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017AD2 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017AD6 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017ADA 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017ADE 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017AE2 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017AE6 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017AEA 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017AEE 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017AF2 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017AF6 01                         byte_16D9E:	dc.b 1
00017AF7 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017AFC 01                         byte_16DA4:	dc.b 1
00017AFD F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017B02 01                         byte_16DAA:	dc.b 1
00017B03 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00017B08 01                         byte_16DB0:	dc.b 1
00017B09 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017B0E 01                         byte_16DB6:	dc.b 1
00017B0F EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017B14 01                         byte_16DBC:	dc.b 1
00017B15 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017B1A 01                         byte_16DC2:	dc.b 1
00017B1B EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00017B20 01                         byte_16DC8:	dc.b 1
00017B21 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017B26 01                         byte_16DCE:	dc.b 1
00017B27 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00017B2C 01                         byte_16DD4:	dc.b 1
00017B2D F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017B32 01                         byte_16DDA:	dc.b 1
00017B33 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00017B38 01                         byte_16DE0:	dc.b 1
00017B39 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00017B3E 01                         byte_16DE6:	dc.b 1
00017B3F F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017B44 01                         byte_16DEC:	dc.b 1
00017B45 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017B4A 01                         byte_16DF2:	dc.b 1
00017B4B F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00017B50 01                         byte_16DF8:	dc.b 1
00017B51 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017B56 01                         byte_16DFE:	dc.b 1
00017B57 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00017B5C 01                         byte_16E04:	dc.b 1
00017B5D F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017B62 01                         byte_16E0A:	dc.b 1
00017B63 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017B68 01                         byte_16E10:	dc.b 1
00017B69 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017B6E 01                         byte_16E16:	dc.b 1
00017B6F EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017B74 01                         byte_16E1C:	dc.b 1
00017B75 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017B7A 01                         byte_16E22:	dc.b 1
00017B7B EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017B80 01                         byte_16E28:	dc.b 1
00017B81 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017B86                            		even
00017B86                            		even
00017B86                            
00017B86                            ; ===========================================================================
00017B86                            ; ---------------------------------------------------------------------------
00017B86                            ; Object 79 - lamppost
00017B86                            ; ---------------------------------------------------------------------------
00017B86                            
00017B86                            Obj79:					; XREF: Obj_Index
00017B86 7000                       		moveq	#0,d0
00017B88 1028 0024                  		move.b	$24(a0),d0
00017B8C 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00017B90 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017B94 4EFA 87B4                  		jmp	MarkObjGone
00017B98                            ; ===========================================================================
00017B98 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017B9A 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017B9C 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017B9E 0000                       		dc.w Obj79_Twirl-Obj79_Index
00017BA0                            ; ===========================================================================
00017BA0                            
00017BA0                            Obj79_Main:				; XREF: Obj79_Index
00017BA0 5428 0024                  		addq.b	#2,$24(a0)
00017BA4 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017BAC 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017BB2 117C 0004 0001             		move.b	#4,1(a0)
00017BB8 117C 0008 0019             		move.b	#8,$19(a0)
00017BBE 117C 0005 0018             		move.b	#5,$18(a0)
00017BC4 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017BC8 7000                       		moveq	#0,d0
00017BCA 1028 0023                  		move.b	$23(a0),d0
00017BCE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017BD4 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017BDA 6600                       		bne.s	Obj79_RedLamp
00017BDC 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017BE0 0201 007F                  		andi.b	#$7F,d1
00017BE4 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017BE8 0202 007F                  		andi.b	#$7F,d2
00017BEC B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017BEE 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017BF0                            
00017BF0                            Obj79_RedLamp:
00017BF0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017BF6 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017BFC 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017C02 4E75                       		rts	
00017C04                            ; ===========================================================================
00017C04                            
00017C04                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017C04 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017C08 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017C0C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017C10 6B00 0000                  		bmi.w	locret_16F90
00017C14 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017C18 0201 007F                  		andi.b	#$7F,d1
00017C1C 1428 0028                  		move.b	$28(a0),d2
00017C20 0202 007F                  		andi.b	#$7F,d2
00017C24 B202                       		cmp.b	d2,d1
00017C26 6500                       		bcs.s	Obj79_HitLamp
00017C28 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017C2C 7000                       		moveq	#0,d0
00017C2E 1028 0023                  		move.b	$23(a0),d0
00017C32 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017C38 117C 0004 0024             		move.b	#4,$24(a0)
00017C3E 117C 0003 001A             		move.b	#3,$1A(a0)
00017C44 6000 0000                  		bra.w	locret_16F90
00017C48                            ; ===========================================================================
00017C48                            
00017C48                            Obj79_HitLamp:
00017C48 3038 D008                  		move.w	($FFFFD008).w,d0
00017C4C 9068 0008                  		sub.w	8(a0),d0
00017C50 5040                       		addq.w	#8,d0
00017C52 0C40 0010                  		cmpi.w	#$10,d0
00017C56 6400 0000                  		bcc.w	locret_16F90
00017C5A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017C5E 9068 000C                  		sub.w	$C(a0),d0
00017C62 0640 0040                  		addi.w	#$40,d0
00017C66 0C40 0068                  		cmpi.w	#$68,d0
00017C6A 6400                       		bcc.s	locret_16F90
00017C6C 303C 00A1                  		move.w	#$A1,d0
00017C70 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017C76 5428 0024                  		addq.b	#2,$24(a0)
00017C7A 4EB9 0000 E72E             		jsr	SingleObjLoad
00017C80 6600                       		bne.s	loc_16F76
00017C82 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017C86 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017C8C 3368 0008 0030             		move.w	8(a0),$30(a1)
00017C92 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017C98 0469 0018 0032             		subi.w	#$18,$32(a1)
00017C9E 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017CA6 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017CAC 137C 0004 0001             		move.b	#4,1(a1)
00017CB2 137C 0008 0019             		move.b	#8,$19(a1)
00017CB8 137C 0004 0018             		move.b	#4,$18(a1)
00017CBE 137C 0002 001A             		move.b	#2,$1A(a1)
00017CC4 337C 0020 0036             		move.w	#$20,$36(a1)
00017CCA                            
00017CCA                            loc_16F76:
00017CCA 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017CD0 6100 0000                  		bsr.w	Obj79_StoreInfo
00017CD4 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017CD8 7000                       		moveq	#0,d0
00017CDA 1028 0023                  		move.b	$23(a0),d0
00017CDE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017CE4                            
00017CE4                            locret_16F90:
00017CE4 4E75                       		rts	
00017CE6                            ; ===========================================================================
00017CE6                            
00017CE6                            Obj79_AfterHit:				; XREF: Obj79_Index
00017CE6 4E75                       		rts	
00017CE8                            ; ===========================================================================
00017CE8                            
00017CE8                            Obj79_Twirl:				; XREF: Obj79_Index
00017CE8 5368 0036                  		subq.w	#1,$36(a0)
00017CEC 6A00                       		bpl.s	loc_16FA0
00017CEE 117C 0004 0024             		move.b	#4,$24(a0)
00017CF4                            
00017CF4                            loc_16FA0:
00017CF4 1028 0026                  		move.b	$26(a0),d0
00017CF8 0428 0010 0026             		subi.b	#$10,$26(a0)
00017CFE 0400 0040                  		subi.b	#$40,d0
00017D02 4EB9 0000 2D86             		jsr	(CalcSine).l
00017D08 C3FC 0C00                  		muls.w	#$C00,d1
00017D0C 4841                       		swap	d1
00017D0E D268 0030                  		add.w	$30(a0),d1
00017D12 3141 0008                  		move.w	d1,8(a0)
00017D16 C1FC 0C00                  		muls.w	#$C00,d0
00017D1A 4840                       		swap	d0
00017D1C D068 0032                  		add.w	$32(a0),d0
00017D20 3140 000C                  		move.w	d0,$C(a0)
00017D24 4E75                       		rts	
00017D26                            ; ===========================================================================
00017D26                            ; ---------------------------------------------------------------------------
00017D26                            ; Subroutine to	store information when you hit a lamppost
00017D26                            ; ---------------------------------------------------------------------------
00017D26                            
00017D26                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017D26 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017D2C 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017D32 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017D38 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017D3E 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017D44 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017D4A 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017D50 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017D56 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017D5C 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017D62 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017D68 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017D6E 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017D74 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017D7A 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017D80 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017D86 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017D8C 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017D92 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017D98 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017D9E 4E75                       		rts	
00017DA0                            
00017DA0                            ; ---------------------------------------------------------------------------
00017DA0                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017DA0                            ; ---------------------------------------------------------------------------
00017DA0                            
00017DA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DA0                            
00017DA0                            
00017DA0                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017DA0 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017DA6 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017DAC 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017DB2 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017DB8 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017DBE 4278 FE20                  		clr.w	($FFFFFE20).w
00017DC2 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017DC6 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017DCC 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017DD2 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017DD6 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017DDC 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017DE2 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017DE8 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017DEE 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017DF4 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017DFA 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017E00 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017E06 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017E0C 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017E12 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017E18 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017E1E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017E24 6600                       		bne.s	loc_170E4
00017E26 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017E2C 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017E32 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017E38                            
00017E38                            loc_170E4:
00017E38 4A38 FE30                  		tst.b	($FFFFFE30).w
00017E3C 6A00                       		bpl.s	locret_170F6
00017E3E 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017E42 0440 00A0                  		subi.w	#$A0,d0
00017E46 31C0 F728                  		move.w	d0,($FFFFF728).w
00017E4A                            
00017E4A                            locret_170F6:
00017E4A 4E75                       		rts	
00017E4C                            ; End of function Obj79_LoadInfo
00017E4C                            
00017E4C                            ; ===========================================================================
00017E4C                            ; ---------------------------------------------------------------------------
00017E4C                            ; Sprite mappings - lamppost
00017E4C                            ; ---------------------------------------------------------------------------
00017E4C                            Map_obj79:
00017E4C                            	include "_maps\obj79.asm"
00017E4C                            ; ---------------------------------------------------------------------------
00017E4C                            ; Sprite mappings - lamppost
00017E4C                            ; ---------------------------------------------------------------------------
00017E4C 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017E50 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017E54 06                         byte_17100:	dc.b 6
00017E55 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017E5A E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017E5F F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017E64 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017E69 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017E6E D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017E73 04                         byte_1711F:	dc.b 4
00017E74 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017E79 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017E7E F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017E83 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017E88 02                         byte_17134:	dc.b 2
00017E89 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017E8E F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017E93 06                         byte_1713F:	dc.b 6
00017E94 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017E99 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017E9E F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017EA3 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017EA8 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017EAD D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017EB2                            		even
00017EB2                            		even
00017EB2                            
00017EB2                            ; ===========================================================================
00017EB2                            ; ---------------------------------------------------------------------------
00017EB2                            ; Object 7D - hidden points at the end of a level
00017EB2                            ; ---------------------------------------------------------------------------
00017EB2                            
00017EB2                            Obj7D:					; XREF: Obj_Index
00017EB2 7000                       		moveq	#0,d0
00017EB4 1028 0024                  		move.b	$24(a0),d0
00017EB8 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017EBC 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017EC0                            ; ===========================================================================
00017EC0 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017EC2 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017EC4                            ; ===========================================================================
00017EC4                            
00017EC4                            Obj7D_Main:				; XREF: Obj7D_Index
00017EC4 7410                       		moveq	#$10,d2
00017EC6 3602                       		move.w	d2,d3
00017EC8 D643                       		add.w	d3,d3
00017ECA 43F8 D000                  		lea	($FFFFD000).w,a1
00017ECE 3029 0008                  		move.w	8(a1),d0
00017ED2 9068 0008                  		sub.w	8(a0),d0
00017ED6 D042                       		add.w	d2,d0
00017ED8 B043                       		cmp.w	d3,d0
00017EDA 6400                       		bcc.s	Obj7D_ChkDel
00017EDC 3229 000C                  		move.w	$C(a1),d1
00017EE0 9268 000C                  		sub.w	$C(a0),d1
00017EE4 D242                       		add.w	d2,d1
00017EE6 B243                       		cmp.w	d3,d1
00017EE8 6400                       		bcc.s	Obj7D_ChkDel
00017EEA 4A78 FE08                  		tst.w	($FFFFFE08).w
00017EEE 6600                       		bne.s	Obj7D_ChkDel
00017EF0 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017EF4 6600                       		bne.s	Obj7D_ChkDel
00017EF6 5428 0024                  		addq.b	#2,$24(a0)
00017EFA 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017F02 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017F08 0028 0004 0001             		ori.b	#4,1(a0)
00017F0E 117C 0000 0018             		move.b	#0,$18(a0)
00017F14 117C 0010 0019             		move.b	#$10,$19(a0)
00017F1A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017F20 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017F26 303C 00C9                  		move.w	#$C9,d0
00017F2A 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play bonus sound
00017F30 7000                       		moveq	#0,d0
00017F32 1028 0028                  		move.b	$28(a0),d0
00017F36 D040                       		add.w	d0,d0
00017F38 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017F3C 4EB9 0000 0000             		jsr	AddPoints
00017F42                            
00017F42                            Obj7D_ChkDel:
00017F42 3028 0008                  		move.w	8(a0),d0
00017F46 0240 FF80                  		andi.w	#$FF80,d0
00017F4A 3238 F700                  		move.w	($FFFFF700).w,d1
00017F4E 0441 0080                  		subi.w	#$80,d1
00017F52 0241 FF80                  		andi.w	#$FF80,d1
00017F56 9041                       		sub.w	d1,d0
00017F58 0C40 0280                  		cmpi.w	#$280,d0
00017F5C 6200                       		bhi.s	Obj7D_Delete
00017F5E 4E75                       		rts	
00017F60                            ; ===========================================================================
00017F60                            
00017F60                            Obj7D_Delete:
00017F60 4EF9 0000 E2E4             		jmp	DeleteObject
00017F66                            ; ===========================================================================
00017F66 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017F68 03E8                       		dc.w 1000
00017F6A 0064                       		dc.w 100
00017F6C 0001                       		dc.w 1
00017F6E                            ; ===========================================================================
00017F6E                            
00017F6E                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017F6E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017F72 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017F74 3028 0008                  		move.w	8(a0),d0
00017F78 0240 FF80                  		andi.w	#-$80,d0
00017F7C 3238 F700                  		move.w	($FFFFF700).w,d1
00017F80 0441 0080                  		subi.w	#$80,d1
00017F84 0241 FF80                  		andi.w	#-$80,d1
00017F88 9041                       		sub.w	d1,d0
00017F8A 0C40 0280                  		cmpi.w	#$280,d0
00017F8E 6200                       		bhi.s	Obj7D_Delete2
00017F90 4EF9 0000 E2A8             		jmp	DisplaySprite
00017F96                            ; ===========================================================================
00017F96                            
00017F96                            Obj7D_Delete2:
00017F96 4EF9 0000 E2E4             		jmp	DeleteObject
00017F9C                            ; ===========================================================================
00017F9C                            ; ---------------------------------------------------------------------------
00017F9C                            ; Sprite mappings - hidden points at the end of	a level
00017F9C                            ; ---------------------------------------------------------------------------
00017F9C                            Map_obj7D:
00017F9C                            	include "_maps\obj7D.asm"
00017F9C                            ; ---------------------------------------------------------------------------
00017F9C                            ; Sprite mappings - hidden points at the end of	a level
00017F9C                            ; ---------------------------------------------------------------------------
00017F9C 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017FA0 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017FA4 00                         byte_17250:	dc.b 0
00017FA5 01                         byte_17251:	dc.b 1
00017FA6 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017FAB 01                         byte_17257:	dc.b 1
00017FAC F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017FB1 01                         byte_1725D:	dc.b 1
00017FB2 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017FB8 00                         		even
00017FB8 00                         		even
00017FB8                            
00017FB8                            ; ===========================================================================
00017FB8                            ; ---------------------------------------------------------------------------
00017FB8                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017FB8                            ; ---------------------------------------------------------------------------
00017FB8                            
00017FB8                            Obj8A:					; XREF: Obj_Index
00017FB8 7000                       		moveq	#0,d0
00017FBA 1028 0024                  		move.b	$24(a0),d0
00017FBE 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017FC2 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017FC6                            ; ===========================================================================
00017FC6 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017FC8 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017FCA                            ; ===========================================================================
00017FCA                            
00017FCA                            Obj8A_Main:				; XREF: Obj8A_Index
00017FCA 5428 0024                  		addq.b	#2,$24(a0)
00017FCE 317C 0120 0008             		move.w	#$120,8(a0)
00017FD4 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017FDA 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017FE2 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017FE8 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017FEC 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017FF0 117C 0000 0001             		move.b	#0,1(a0)
00017FF6 117C 0000 0018             		move.b	#0,$18(a0)
00017FFC 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00018002 6600                       		bne.s	Obj8A_Display	; if not, branch
00018004 317C 00A6 0002             		move.w	#$A6,2(a0)
0001800A 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00018010 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00018014 6700                       		beq.s	Obj8A_Display	; if not, branch
00018016 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
0001801C 6600                       		bne.s	Obj8A_Display	; if not, branch
0001801E 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00018024 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
0001802A 4EF9 0000 E2E4             		jmp	DeleteObject
00018030                            ; ===========================================================================
00018030                            
00018030                            Obj8A_Display:				; XREF: Obj8A_Index
00018030 4EF9 0000 E2A8             		jmp	DisplaySprite
00018036                            ; ===========================================================================
00018036                            ; ---------------------------------------------------------------------------
00018036                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018036                            ; ---------------------------------------------------------------------------
00018036                            Map_obj8A:
00018036                            	include "_maps\obj8A.asm"
00018036                            Map_ca8f:
00018036 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00018038 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
0001803A 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
0001803C 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
0001803E 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00018040 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00018042 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00018044 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00018046 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00018048 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
0001804A 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
0001804C 0000                       Map_ca8f_tm: 	dc.w Map_ca8f_tmss-Map_ca8f
0001804E 08                         Map_ca8f_16: 	dc.b $8
0001804F CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00018054 E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00018059 F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
0001805E 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00018063 B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00018068 B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
0001806D B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00018072 B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00018077 10                         Map_ca8f_3F: 	dc.b $10
00018078 D805 0000 80               	dc.b $D8, $5, $0, $0, $80
0001807D D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00018082 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00018087 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
0001808C D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00018091 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00018096 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
0001809B D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
000180A0 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
000180A5 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
000180AA 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
000180AF 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
000180B4 0805 0016 08               	dc.b $8, $5, $0, $16, $8
000180B9 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
000180BE 0805 0004 30               	dc.b $8, $5, $0, $4, $30
000180C3 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
000180C8 0A                         Map_ca8f_90: 	dc.b $A
000180C9 D805 0012 80               	dc.b $D8, $5, $0, $12, $80
000180CE D805 0022 90               	dc.b $D8, $5, $0, $22, $90
000180D3 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
000180D8 D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
000180DD D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
000180E2 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
000180E7 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
000180EC 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
000180F1 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
000180F6 0805 0036 08               	dc.b $8, $5, $0, $36, $8
000180FB 18                         Map_ca8f_C3: 	dc.b $18
000180FC D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00018101 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00018106 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
0001810B D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00018110 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00018115 D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
0001811A D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
0001811F D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00018124 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00018129 D805 0042 20               	dc.b $D8, $5, $0, $42, $20
0001812E D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00018133 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00018138 D801 0046 50               	dc.b $D8, $1, $0, $46, $50
0001813D D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00018142 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00018147 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
0001814C 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00018151 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00018156 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
0001815B 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00018160 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00018165 0805 0004 10               	dc.b $8, $5, $0, $4, $10
0001816A 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
0001816F 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00018174 14                         Map_ca8f_13C: 	dc.b $14
00018175 D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
0001817A D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
0001817F D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00018184 D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00018189 D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
0001818E D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00018193 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00018198 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
0001819D 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
000181A2 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
000181A7 0005 0004 24               	dc.b $0, $5, $0, $4, $24
000181AC 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
000181B1 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
000181B6 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
000181BB 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
000181C0 2001 0046 10               	dc.b $20, $1, $0, $46, $10
000181C5 2005 0050 18               	dc.b $20, $5, $0, $50, $18
000181CA 2005 0022 30               	dc.b $20, $5, $0, $22, $30
000181CF 2001 0046 40               	dc.b $20, $1, $0, $46, $40
000181D4 2005 000E 48               	dc.b $20, $5, $0, $E, $48
000181D9 1A                         Map_ca8f_1A1: 	dc.b $1A
000181DA D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
000181DF D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
000181E4 D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
000181E9 D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
000181EE D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
000181F3 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
000181F8 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
000181FD D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00018202 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00018207 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
0001820C D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00018211 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00018216 0809 0008 88               	dc.b $8, $9, $0, $8, $88
0001821B 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00018220 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00018225 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
0001822A 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
0001822F 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00018234 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00018239 0805 0004 08               	dc.b $8, $5, $0, $4, $8
0001823E 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00018243 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00018248 0809 0008 38               	dc.b $8, $9, $0, $8, $38
0001824D 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00018252 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00018257 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
0001825C 17                         Map_ca8f_224: 	dc.b $17
0001825D D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00018262 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00018267 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
0001826C D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00018271 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00018276 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
0001827B D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00018280 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00018285 D005 0000 28               	dc.b $D0, $5, $0, $0, $28
0001828A D005 0022 38               	dc.b $D0, $5, $0, $22, $38
0001828F D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00018294 D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00018299 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
0001829E 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
000182A3 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
000182A8 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
000182AD 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
000182B2 0005 0004 14               	dc.b $0, $5, $0, $4, $14
000182B7 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
000182BC 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
000182C1 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
000182C6 2005 0058 04               	dc.b $20, $5, $0, $58, $4
000182CB 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
000182D0 1F                         Map_ca8f_298: 	dc.b $1F
000182D1 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
000182D6 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
000182DB D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
000182E0 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
000182E5 D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
000182EA D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
000182EF D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
000182F4 D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
000182F9 D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
000182FE D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00018303 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00018308 D805 0058 38               	dc.b $D8, $5, $0, $58, $38
0001830D D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00018312 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00018317 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
0001831C 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00018321 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00018326 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
0001832B 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00018330 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00018335 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
0001833A 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
0001833F 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00018344 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00018349 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
0001834E 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00018353 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00018358 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
0001835D 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00018362 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00018367 2005 0004 28               	dc.b $20, $5, $0, $4, $28
0001836C 0F                         Map_ca8f_334: 	dc.b $F
0001836D F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00018372 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00018377 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
0001837C F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00018381 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00018386 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
0001838B F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00018390 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00018395 F805 0042 00               	dc.b $F8, $5, $0, $42, $0
0001839A F805 0048 18               	dc.b $F8, $5, $0, $48, $18
0001839F F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
000183A4 F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
000183A9 F805 000E 50               	dc.b $F8, $5, $0, $E, $50
000183AE F805 0000 60               	dc.b $F8, $5, $0, $0, $60
000183B3 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
000183B8 08                         Map_ca8f_380: 	dc.b $8
000183B9 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
000183BE 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
000183C3 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
000183C8 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
000183CD 3005 0000 08               	dc.b $30, $5, $0, $0, $8
000183D2 3005 0004 18               	dc.b $30, $5, $0, $4, $18
000183D7 3001 0046 28               	dc.b $30, $1, $0, $46, $28
000183DC 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
000183E1 20                         Map_ca8f_3A9: 	dc.b $20
000183E2 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
000183E7 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
000183EC ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
000183F1 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
000183F6 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
000183FB ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00018400 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00018405 FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
0001840A FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
0001840F FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00018414 FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00018419 FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
0001841E FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00018423 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00018428 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
0001842D 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00018432 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00018437 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
0001843C 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00018441 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00018446 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
0001844B 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00018450 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00018455 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
0001845A 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
0001845F 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00018464 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00018469 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
0001846E 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00018473 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00018478 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
0001847D 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00018482 1C                         Map_ca8f_tmss:	dc.b 28
00018510 00                         	even
00018510 00                         	even
00018510                            
00018510                            ; ===========================================================================
00018510                            ; ---------------------------------------------------------------------------
00018510                            ; Object 3D - matthew boss - modified by GK89
00018510                            ; ---------------------------------------------------------------------------
00018510                            
00018510                            Obj3D:					; XREF: Obj_Index
00018510 7000                       		moveq	#0,d0
00018512 1028 0024                  		move.b	$24(a0),d0
00018516 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
0001851A 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001851E                            ; ===========================================================================
0001851E 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00018520 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00018522 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018524 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00018526                            
00018526 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00018528 0401                       		dc.b 4,	1
0001852A 0607                       		dc.b 6,	7
0001852C                            ; ===========================================================================
0001852C                            
0001852C                            Obj3D_Main:				; XREF: Obj3D_Index
0001852C 45F9 0001 8526             		lea	(Obj3D_ObjData).l,a2
00018532 2248                       		movea.l	a0,a1
00018534 7202                       		moveq	#2,d1
00018536 6000                       		bra.s	Obj3D_LoadBoss
00018538                            ; ===========================================================================
00018538                            
00018538                            Obj3D_Loop:
00018538 4EB9 0000 E744             		jsr	SingleObjLoad2
0001853E 6600                       		bne.s	loc_17772
00018540                            
00018540                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00018540 135A 0024                  		move.b	(a2)+,$24(a1)
00018544 12BC 003D                  		move.b	#$3D,0(a1)
00018548 3368 0008 0008             		move.w	8(a0),8(a1)
0001854E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018554 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
0001855C 337C 0400 0002             		move.w	#$400,2(a1)
00018562 137C 0004 0001             		move.b	#4,1(a1)
00018568 137C 0020 0019             		move.b	#$20,$19(a1)
0001856E 137C 0003 0018             		move.b	#3,$18(a1)
00018574 135A 001C                  		move.b	(a2)+,$1C(a1)
00018578 2348 0034                  		move.l	a0,$34(a1)
0001857C 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00018580                            
00018580                            loc_17772:
00018580 3168 0008 0030             		move.w	8(a0),$30(a0)
00018586 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001858C 117C 000F 0020             		move.b	#$F,$20(a0)
00018592 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00018598                            
00018598                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00018598 7000                       		moveq	#0,d0
0001859A 1028 0025                  		move.b	$25(a0),d0
0001859E 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000185A2 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000185A6 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000185AC 4EB9 0000 B300             		jsr	AnimateSprite
000185B2 1028 0022                  		move.b	$22(a0),d0
000185B6 0200 0003                  		andi.b	#3,d0
000185BA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000185C0 8128 0001                  		or.b	d0,1(a0)
000185C4 4EF9 0000 E2A8             		jmp	DisplaySprite
000185CA                            ; ===========================================================================
000185CA 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000185CC 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000185CE 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000185D0 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000185D2 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000185D4 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000185D6 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000185D8                            ; ===========================================================================
000185D8                            
000185D8                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000185D8 4EB9 0000 0000             		jsr    Obj3D_ShipMove
000185DE 6100 0000                  		bsr.w	BossMove
000185E2 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000185E8 6600                       		bne.s	loc_177E6
000185EA 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000185F0 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000185F4                            
000185F4                            loc_177E6:
000185F4 1028 003F                  		move.b	$3F(a0),d0
000185F8 4EB9 0000 2D86             		jsr	(CalcSine).l
000185FE EC40                       		asr.w	#6,d0
00018600 D068 0038                  		add.w	$38(a0),d0
00018604 3140 000C                  		move.w	d0,$C(a0)
00018608 3168 0030 0008             		move.w	$30(a0),8(a0)
0001860E 5428 003F                  		addq.b	#2,$3F(a0)
00018612 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018618 6400                       		bcc.s	locret_1784A
0001861A 4A28 0022                  		tst.b	$22(a0)
0001861E 6B00                       		bmi.s	loc_1784C
00018620 4A28 0020                  		tst.b	$20(a0)
00018624 6600                       		bne.s	locret_1784A
00018626 4A28 003E                  		tst.b	$3E(a0)
0001862A 6600                       		bne.s	Obj3D_ShipFlash
0001862C 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00018632 303C 00AC                  		move.w	#$AC,d0
00018636 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001863C                            
0001863C                            Obj3D_ShipFlash:
0001863C 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018640 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018642 4A51                       		tst.w	(a1)
00018644 6600                       		bne.s	loc_1783C
00018646 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001864A                            
0001864A                            loc_1783C:
0001864A 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001864C 5328 003E                  		subq.b	#1,$3E(a0)
00018650 6600                       		bne.s	locret_1784A
00018652 117C 000F 0020             		move.b	#$F,$20(a0)
00018658                            
00018658                            locret_1784A:
00018658 4E75                       		rts	
0001865A                            ; ===========================================================================
0001865A                            
0001865A                            loc_1784C:				; XREF: loc_177E6
0001865A 7064                       		moveq	#100,d0
0001865C 6100 0000                  		bsr.w	AddPoints
00018660 117C 0008 0025             		move.b	#8,$25(a0)
00018666 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001866C 4E75                       		rts	
0001866E                            
0001866E                            ; ---------------------------------------------------------------------------
0001866E                            ; Defeated boss	subroutine
0001866E                            ; ---------------------------------------------------------------------------
0001866E                            
0001866E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001866E                            
0001866E                            
0001866E                            BossDefeated:
0001866E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00018672 0200 0007                  		andi.b	#7,d0
00018676 6600                       		bne.s	locret_178A2
00018678 4EB9 0000 E72E             		jsr	SingleObjLoad
0001867E 6600                       		bne.s	locret_178A2
00018680 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018684 3368 0008 0008             		move.w	8(a0),8(a1)
0001868A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018690 4EB9 0000 2D60             		jsr	(RandomNumber).l
00018696 3200                       		move.w	d0,d1
00018698 7200                       		moveq	#0,d1
0001869A 1200                       		move.b	d0,d1
0001869C E409                       		lsr.b	#2,d1
0001869E 0441 0020                  		subi.w	#$20,d1
000186A2 D369 0008                  		add.w	d1,8(a1)
000186A6 E048                       		lsr.w	#8,d0
000186A8 E608                       		lsr.b	#3,d0
000186AA D169 000C                  		add.w	d0,$C(a1)
000186AE                            
000186AE                            locret_178A2:
000186AE 4E75                       		rts	
000186B0                            ; End of function BossDefeated
000186B0                            
000186B0                            ; ---------------------------------------------------------------------------
000186B0                            ; Subroutine to	move a boss
000186B0                            ; ---------------------------------------------------------------------------
000186B0                            
000186B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000186B0                            
000186B0                            
000186B0                            BossMove:
000186B0 2428 0030                  		move.l	$30(a0),d2
000186B4 2628 0038                  		move.l	$38(a0),d3
000186B8 3028 0010                  		move.w	$10(a0),d0
000186BC 48C0                       		ext.l	d0
000186BE E180                       		asl.l	#8,d0
000186C0 D480                       		add.l	d0,d2
000186C2 3028 0012                  		move.w	$12(a0),d0
000186C6 48C0                       		ext.l	d0
000186C8 E180                       		asl.l	#8,d0
000186CA D680                       		add.l	d0,d3
000186CC 2142 0030                  		move.l	d2,$30(a0)
000186D0 2143 0038                  		move.l	d3,$38(a0)
000186D4 4E75                       		rts	
000186D6                            ; End of function BossMove
000186D6                            
000186D6                            ; ===========================================================================
000186D6                            
000186D6                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
000186D6 6100 FFD8                  		bsr.w	BossMove
000186DA 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000186E0 6600                       		bne.s	loc_17916
000186E2 317C 0000 0010             		move.w	#0,$10(a0)
000186E8 317C 0000 0012             		move.w	#0,$12(a0)
000186EE 5428 0025                  		addq.b	#2,$25(a0)
000186F2 4EB9 0000 E744             		jsr	SingleObjLoad2
000186F8 6600                       		bne.s	loc_17910
000186FA 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000186FE 3368 0030 0008             		move.w	$30(a0),8(a1)
00018704 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001870A 2348 0034                  		move.l	a0,$34(a1)
0001870E                            
0001870E                            loc_17910:
0001870E 317C 0077 003C             		move.w	#$77,$3C(a0)
00018714                            
00018714                            loc_17916:
00018714 6000 FEDE                  		bra.w	loc_177E6
00018718                            ; ===========================================================================
00018718                            
00018718                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018718 5368 003C                  		subq.w	#1,$3C(a0)
0001871C 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
00018722 5428 0025                  		addq.b	#2,$25(a0)
00018726 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001872C 3038 D008                  		move.w	($FFFFD008).w,d0	 
00018730 9068 0008                  		sub.w	8(a0),d0		 
00018734 6A00                       		bpl.s	Obj3D_left			 
00018736 08A8 0000 0022             		bclr	#0,$22(a0)		 
0001873C 6000                       		bra.s	Obj3D_right		 
0001873E 08A8 0005 0022             		bclr	#5,$22(a0)
00018744 4EB9 0000 0000              		jsr     loc_17950
0001874A 4E75                       		rts
0001874C                            ; ===========================================================================
0001874C                            
0001874C                            Obj3D_right:
0001874C 317C FF00 0010             		move.w	#-$100,$10(a0)	
00018752 4E75                       		Rts
00018754                            
00018754                            Obj3D_left:
00018754 317C 0100 0010             		move.w	#$100,$10(a0)	 
0001875A 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00018760 6600                       		bne.s	RTSboss  	; if not, branch
00018762 0868 0000 0022              		bchg	#0,$22(a0)
00018768                            
00018768                            RTSboss:	    
00018768 4E75                       		rts
0001876A                             ; ===========================================================================
0001876A                            
0001876A                            Obj3D_UpStuff:
0001876A 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
0001876E 9068 000C                  		sub.w	$C(a0),d0		 
00018772 6A00                       		bpl.s	Obj3D_down			 
00018774 6000                        		bra.s	Obj3D_up		 
00018776 08A8 0005 0022             		bclr	#5,$22(a0)
0001877C                             
0001877C                            Obj3D_up:		
0001877C 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
00018782 4E75                        	    rts
00018784                            
00018784                            Obj3D_down:
00018784 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
0001878A                            
0001878A                            loc_17950:
0001878A 6000 FE68                  		bra.w	loc_177E6
0001878E                            ; ===========================================================================
0001878E                            
0001878E                            loc_17954:				; XREF: Obj3D_ShipIndex
0001878E 5368 003C                  		subq.w	#1,$3C(a0)
00018792 6B00                       		bmi.s	loc_17960
00018794 6100 FF1A                  		bsr.w	BossMove
00018798 6000                       		bra.s	loc_17976
0001879A                            ; ===========================================================================
0001879A                            
0001879A                            loc_17960:
0001879A 0868 0000 0022             		bchg	#0,$22(a0)
000187A0 317C 003F 003C             		move.w	#$3F,$3C(a0)
000187A6 5528 0025                  		subq.b	#2,$25(a0)
000187AA 317C 0000 0010             		move.w	#0,$10(a0)
000187B0                            
000187B0                            loc_17976:
000187B0 6000 FE42                  		bra.w	loc_177E6
000187B4                            ; ===========================================================================
000187B4                            
000187B4                            loc_1797A:				; XREF: Obj3D_ShipIndex
000187B4 5368 003C                  		subq.w	#1,$3C(a0)
000187B8 6B00                       		bmi.s	loc_17984
000187BA 6000 FEB2                  		bra.w	BossDefeated
000187BE                            ; ===========================================================================
000187BE                            
000187BE                            loc_17984:
000187BE 08E8 0000 0022             		bset	#0,$22(a0)
000187C4 08A8 0007 0022             		bclr	#7,$22(a0)
000187CA 4268 0010                  		clr.w	$10(a0)
000187CE 5428 0025                  		addq.b	#2,$25(a0)
000187D2 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000187D8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000187DC 6600                       		bne.s	locret_179AA
000187DE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000187E4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000187EA 6000 FE82                  		bra.w	BossDefeated
000187EE                            
000187EE                            locret_179AA:
000187EE 4E75                       		rts	
000187F0                            ; ===========================================================================
000187F0                            
000187F0                            loc_179AC:				; XREF: Obj3D_ShipIndex
000187F0 4EB9 0000 E20C             		jsr ObjectFall		
000187F6 5268 003C                  		addq.w	#1,$3C(a0)
000187FA 6700                       		beq.s	loc_179BC
000187FC 6A00                       		bpl.s	loc_179C2
000187FE 6000                       		bra.s	loc_179EE
00018800                            ; ===========================================================================
00018800                            
00018800                            loc_179BC:
00018800 4268 0012                  		clr.w	$12(a0)
00018804 6000                       		bra.s	loc_179EE
00018806                            ; ===========================================================================
00018806                            
00018806                            loc_179C2:
00018806 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001880C 6500                       		bcs.s	loc_179DA
0001880E 6700                       		beq.s	loc_179E0
00018810 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018816 6500                       		bcs.s	loc_179EE
00018818 5428 0025                  		addq.b	#2,$25(a0)
0001881C 6000                       		bra.s	loc_179EE
0001881E                            ; ===========================================================================
0001881E                            
0001881E                            loc_179DA:
0001881E 5168 0012                  		subq.w	#8,$12(a0)
00018822 6000                       		bra.s	loc_179EE
00018824 6000 FE48                  		bra.w	BossDefeated
00018828                            ; ===========================================================================
00018828                            
00018828                            loc_179E0:
00018828 4268 0012                  		clr.w	$12(a0)
0001882C 303C 0081                  		move.w	#$81,d0
00018830 4EB9 0000 15E6             		jsr	(PlaySound).l	; play GHZ music
00018836                            
00018836                            loc_179EE:
00018836 6100 FE78                  		bsr.w	BossMove
0001883A 6000 FDB8                  		bra.w	loc_177E6
0001883E                            ; ===========================================================================
0001883E                            
0001883E                            loc_179F6:				; XREF: Obj3D_ShipIndex
0001883E 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018844 6700                       		beq.s	loc_17A10
00018846 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001884A 6000                       		bra.s	loc_17A16
0001884C                            ; ===========================================================================
0001884C                            
0001884C                            loc_17A10:
0001884C 4A28 0001                  		tst.b	1(a0)
00018850 6A00                       		bpl.s	Obj3D_ShipDel
00018852                            
00018852                            loc_17A16:
00018852 6100 FE5C                  		bsr.w	BossMove
00018856 6000 FD9C                  		bra.w	loc_177E6
0001885A                            ; ===========================================================================
0001885A                            
0001885A                            Obj3D_ShipDel:
0001885A 4EF9 0000 E2E4             		jmp	DeleteObject
00018860                            ; ===========================================================================
00018860                            
00018860                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018860 7000                       		moveq	#0,d0
00018862 7201                       		moveq	#1,d1
00018864 2268 0034                  		movea.l	$34(a0),a1
00018868 1029 0025                  		move.b	$25(a1),d0
0001886C 5900                       		subq.b	#4,d0
0001886E 6600                       		bne.s	loc_17A3E
00018870 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018876 6600                       		bne.s	loc_17A46
00018878 7204                       		moveq	#4,d1
0001887A                            
0001887A                            loc_17A3E:
0001887A 5D00                       		subq.b	#6,d0
0001887C 6B00                       		bmi.s	loc_17A46
0001887E 720A                       		moveq	#$A,d1
00018880 6000                       		bra.s	loc_17A5A
00018882                            ; ===========================================================================
00018882                            
00018882                            loc_17A46:
00018882 4A29 0020                  		tst.b	$20(a1)
00018886 6600                       		bne.s	loc_17A50
00018888 7205                       		moveq	#5,d1
0001888A 6000                       		bra.s	loc_17A5A
0001888C                            ; ===========================================================================
0001888C                            
0001888C                            loc_17A50:
0001888C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018892 6500                       		bcs.s	loc_17A5A
00018894 7204                       		moveq	#4,d1
00018896                            
00018896                            loc_17A5A:
00018896 1141 001C                  		move.b	d1,$1C(a0)
0001889A 5500                       		subq.b	#2,d0
0001889C 6600                       		bne.s	Obj3D_FaceDisp
0001889E 117C 0006 001C             		move.b	#6,$1C(a0)
000188A4 4A28 0001                  		tst.b	1(a0)
000188A8 6A00                       		bpl.s	Obj3D_FaceDel
000188AA                            
000188AA                            Obj3D_FaceDisp:
000188AA 6000                       		bra.s	Obj3D_Display
000188AC                            ; ===========================================================================
000188AC                            
000188AC                            Obj3D_FaceDel:
000188AC 4EF9 0000 E2E4             		jmp	DeleteObject
000188B2                            ; ===========================================================================
000188B2                            
000188B2                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000188B2 117C 0007 001C             		move.b	#7,$1C(a0)
000188B8 2268 0034                  		movea.l	$34(a0),a1
000188BC 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000188C2 6600                       		bne.s	loc_17A96
000188C4 117C 000B 001C             		move.b	#$B,$1C(a0)
000188CA 4A28 0001                  		tst.b	1(a0)
000188CE 6A00                       		bpl.s	Obj3D_FlameDel
000188D0 6000                       		bra.s	Obj3D_FlameDisp
000188D2                            ; ===========================================================================
000188D2                            
000188D2                            loc_17A96:
000188D2 3029 0010                  		move.w	$10(a1),d0
000188D6 6700                       		beq.s	Obj3D_FlameDisp
000188D8 117C 0008 001C             		move.b	#8,$1C(a0)
000188DE                            
000188DE                            Obj3D_FlameDisp:
000188DE 6000                       		bra.s	Obj3D_Display
000188E0                            ; ===========================================================================
000188E0                            
000188E0                            Obj3D_FlameDel:
000188E0 4EF9 0000 E2E4             		jmp	DeleteObject
000188E6                            ; ===========================================================================
000188E6                            
000188E6                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000188E6 2268 0034                  		movea.l	$34(a0),a1
000188EA 3169 0008 0008             		move.w	8(a1),8(a0)
000188F0 3169 000C 000C             		move.w	$C(a1),$C(a0)
000188F6 1169 0022 0022             		move.b	$22(a1),$22(a0)
000188FC 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018902 4EB9 0000 B300             		jsr	AnimateSprite
00018908 1028 0022                  		move.b	$22(a0),d0
0001890C 0200 0003                  		andi.b	#3,d0
00018910 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018916 8128 0001                  		or.b	d0,1(a0)
0001891A 4EF9 0000 E2A8             		jmp	DisplaySprite
00018920                            ; ===========================================================================
00018920                            ; ---------------------------------------------------------------------------
00018920                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018920                            ; ---------------------------------------------------------------------------
00018920                            
00018920                            Obj48:					; XREF: Obj_Index
00018920 7000                       		moveq	#0,d0
00018922 1028 0024                  		move.b	$24(a0),d0
00018926 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
0001892A 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001892E                            ; ===========================================================================
0001892E 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018930 0000                       		dc.w Obj48_Base-Obj48_Index
00018932 0000                       		dc.w Obj48_Display2-Obj48_Index
00018934 0000                       		dc.w loc_17C68-Obj48_Index
00018936 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018938                            ; ===========================================================================
00018938                            
00018938                            Obj48_Main:				; XREF: Obj48_Index
00018938 5428 0024                  		addq.b	#2,$24(a0)
0001893C 317C 4080 0026             		move.w	#$4080,$26(a0)
00018942 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018948 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018950 317C 046C 0002             		move.w	#$46C,2(a0)
00018956 45E8 0028                  		lea	$28(a0),a2
0001895A 14FC 0000                  		move.b	#0,(a2)+
0001895E 7205                       		moveq	#5,d1
00018960 2248                       		movea.l	a0,a1
00018962 6000                       		bra.s	loc_17B60
00018964                            ; ===========================================================================
00018964                            
00018964                            Obj48_MakeLinks:
00018964 4EB9 0000 E744             		jsr	SingleObjLoad2
0001896A 6600                       		bne.s	Obj48_MakeBall
0001896C 3368 0008 0008             		move.w	8(a0),8(a1)
00018972 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018978 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
0001897C 137C 0006 0024             		move.b	#6,$24(a1)
00018982 237C 0000 86C6 0004        		move.l	#Map_obj15,4(a1)
0001898A 337C 0380 0002             		move.w	#$380,2(a1)
00018990 137C 0001 001A             		move.b	#1,$1A(a1)
00018996 5228 0028                  		addq.b	#1,$28(a0)
0001899A                            
0001899A                            loc_17B60:				; XREF: Obj48_Main
0001899A 3A09                       		move.w	a1,d5
0001899C 0445 D000                  		subi.w	#$D000,d5
000189A0 EC4D                       		lsr.w	#6,d5
000189A2 0245 007F                  		andi.w	#$7F,d5
000189A6 14C5                       		move.b	d5,(a2)+
000189A8 137C 0004 0001             		move.b	#4,1(a1)
000189AE 137C 0008 0019             		move.b	#8,$19(a1)
000189B4 137C 0006 0018             		move.b	#6,$18(a1)
000189BA 2368 0034 0034             		move.l	$34(a0),$34(a1)
000189C0 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000189C4                            
000189C4                            Obj48_MakeBall:
000189C4 137C 0008 0024             		move.b	#8,$24(a1)
000189CA 237C 0000 8CB6 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000189D2 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000189D8 137C 0001 001A             		move.b	#1,$1A(a1)
000189DE 137C 0005 0018             		move.b	#5,$18(a1)
000189E4 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000189EA 4E75                       		rts	
000189EC                            ; ===========================================================================
000189EC                            
000189EC 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000189F2                            
000189F2                            ; ===========================================================================
000189F2                            
000189F2                            Obj48_Base:				; XREF: Obj48_Index
000189F2 47F9 0001 89EC             		lea	(Obj48_PosData).l,a3
000189F8 45E8 0028                  		lea	$28(a0),a2
000189FC 7C00                       		moveq	#0,d6
000189FE 1C1A                       		move.b	(a2)+,d6
00018A00                            
00018A00                            loc_17BC6:
00018A00 7800                       		moveq	#0,d4
00018A02 181A                       		move.b	(a2)+,d4
00018A04 ED4C                       		lsl.w	#6,d4
00018A06 0684 00FF D000             		addi.l	#$FFD000,d4
00018A0C 2244                       		movea.l	d4,a1
00018A0E 101B                       		move.b	(a3)+,d0
00018A10 B029 003C                  		cmp.b	$3C(a1),d0
00018A14 6700                       		beq.s	loc_17BE0
00018A16 5229 003C                  		addq.b	#1,$3C(a1)
00018A1A                            
00018A1A                            loc_17BE0:
00018A1A 51CE FFE4                  		dbf	d6,loc_17BC6
00018A1E                            
00018A1E B029 003C                  		cmp.b	$3C(a1),d0
00018A22 6600                       		bne.s	loc_17BFA
00018A24 2268 0034                  		movea.l	$34(a0),a1
00018A28 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018A2E 6600                       		bne.s	loc_17BFA
00018A30 5428 0024                  		addq.b	#2,$24(a0)
00018A34                            
00018A34                            loc_17BFA:
00018A34 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018A3A 6700                       		beq.s	Obj48_Display
00018A3C 5268 0032                  		addq.w	#1,$32(a0)
00018A40                            
00018A40                            Obj48_Display:
00018A40 6100 0000                  		bsr.w	sub_17C2A
00018A44 1028 0026                  		move.b	$26(a0),d0
00018A48 4EB9 0000 8638             		jsr	(Obj15_Move2).l
00018A4E 4EF9 0000 E2A8             		jmp	DisplaySprite
00018A54                            ; ===========================================================================
00018A54                            
00018A54                            Obj48_Display2:				; XREF: Obj48_Index
00018A54 6100 0000                  		bsr.w	sub_17C2A
00018A58 4EB9 0000 85F8             		jsr	(Obj48_Move).l
00018A5E 4EF9 0000 E2A8             		jmp	DisplaySprite
00018A64                            
00018A64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A64                            
00018A64                            
00018A64                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018A64 2268 0034                  		movea.l	$34(a0),a1
00018A68 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018A6E 6400                       		bcc.s	loc_17C3C
00018A70 0868 0000 001A             		bchg	#0,$1A(a0)
00018A76                            
00018A76                            loc_17C3C:
00018A76 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018A7C 3029 000C                  		move.w	$C(a1),d0
00018A80 D068 0032                  		add.w	$32(a0),d0
00018A84 3140 0038                  		move.w	d0,$38(a0)
00018A88 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018A8E 4A29 0022                  		tst.b	$22(a1)
00018A92 6A00                       		bpl.s	locret_17C66
00018A94 10BC 003F                  		move.b	#$3F,0(a0)
00018A98 117C 0000 0024             		move.b	#0,$24(a0)
00018A9E                            
00018A9E                            locret_17C66:
00018A9E 4E75                       		rts	
00018AA0                            ; End of function sub_17C2A
00018AA0                            
00018AA0                            ; ===========================================================================
00018AA0                            
00018AA0                            loc_17C68:				; XREF: Obj48_Index
00018AA0 2268 0034                  		movea.l	$34(a0),a1
00018AA4 4A29 0022                  		tst.b	$22(a1)
00018AA8 6A00                       		bpl.s	Obj48_Display3
00018AAA 10BC 003F                  		move.b	#$3F,0(a0)
00018AAE 117C 0000 0024             		move.b	#0,$24(a0)
00018AB4                            
00018AB4                            Obj48_Display3:
00018AB4 4EF9 0000 E2A8             		jmp	DisplaySprite
00018ABA                            ; ===========================================================================
00018ABA                            
00018ABA                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018ABA 7000                       		moveq	#0,d0
00018ABC 4A28 001A                  		tst.b	$1A(a0)
00018AC0 6600                       		bne.s	Obj48_Vanish
00018AC2 5200                       		addq.b	#1,d0
00018AC4                            
00018AC4                            Obj48_Vanish:
00018AC4 1140 001A                  		move.b	d0,$1A(a0)
00018AC8 2268 0034                  		movea.l	$34(a0),a1
00018ACC 4A29 0022                  		tst.b	$22(a1)
00018AD0 6A00                       		bpl.s	Obj48_Display4
00018AD2 117C 0000 0020             		move.b	#0,$20(a0)
00018AD8 6100 FB94                  		bsr.w	BossDefeated
00018ADC 5328 003C                  		subq.b	#1,$3C(a0)
00018AE0 6A00                       		bpl.s	Obj48_Display4
00018AE2 10BC 003F                  		move.b	#$3F,(a0)
00018AE6 117C 0000 0024             		move.b	#0,$24(a0)
00018AEC                            
00018AEC                            Obj48_Display4:
00018AEC 4EF9 0000 E2A8             		jmp	DisplaySprite
00018AF2                            ; ===========================================================================
00018AF2                            Ani_Eggman:
00018AF2                            	include "_anim\Eggman.asm"
00018AF2                            ; ---------------------------------------------------------------------------
00018AF2                            ; Animation script - Eggman (bosses)
00018AF2                            ; ---------------------------------------------------------------------------
00018AF2 0000                       		dc.w byte_17CD4-Ani_Eggman
00018AF4 0000                       		dc.w byte_17CD8-Ani_Eggman
00018AF6 0000                       		dc.w byte_17CDC-Ani_Eggman
00018AF8 0000                       		dc.w byte_17CE0-Ani_Eggman
00018AFA 0000                       		dc.w byte_17CE4-Ani_Eggman
00018AFC 0000                       		dc.w byte_17CE8-Ani_Eggman
00018AFE 0000                       		dc.w byte_17CEC-Ani_Eggman
00018B00 0000                       		dc.w byte_17CF0-Ani_Eggman
00018B02 0000                       		dc.w byte_17CF4-Ani_Eggman
00018B04 0000                       		dc.w byte_17CF8-Ani_Eggman
00018B06 0000                       		dc.w byte_17CFC-Ani_Eggman
00018B08 0000                       		dc.w byte_17D00-Ani_Eggman
00018B0A 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018B0E 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00018B12 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018B16 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018B1A 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018B1E 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018B22 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018B26 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018B2A 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018B2E 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00018B32 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018B36 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018B42                            		even
00018B42                            		even
00018B42                            Ani_TetoB:
00018B42                            	include "_anim\TetoB.asm"
00018B42                            ; ---------------------------------------------------------------------------
00018B42                            ; Animation script - Eggman (bosses)
00018B42                            ; ---------------------------------------------------------------------------
00018B42 0000                       		dc.w spin-Ani_TetoB
00018B44 0000                       		dc.w static-Ani_TetoB
00018B46 0000                       		dc.w static2-Ani_TetoB
00018B48 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
00018B4F 0500 FF                    static:	dc.b 5,	0, $FF
00018B52 0501 FF                    static2:	dc.b 5,	1, $FF
00018B56 00                         		even
00018B56 00                         		even
00018B56                            ; ---------------------------------------------------------------------------
00018B56                            ; Sprite mappings - Eggman (boss levels)
00018B56                            ; ---------------------------------------------------------------------------
00018B56                            Map_Eggman:
00018B56                            	include "_maps\Eggman.asm"
00018B56                            Map_dc7e:
00018B56 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00018B58 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018B5A 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018B5C 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018B5E 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018B60 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00018B62 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018B64 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00018B66 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00018B68 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00018B6A 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018B6C 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018B6E 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018B70 06                         Map_dc7e_1A: 	dc.b $6
00018B71 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00018B76 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018B7B FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018B80 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018B85 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018B8A 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018B8F 02                         Map_dc7e_39: 	dc.b $2
00018B90 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018B95 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018B9A 02                         Map_dc7e_44: 	dc.b $2
00018B9B E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018BA0 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018BA5 03                         Map_dc7e_4F: 	dc.b $3
00018BA6 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018BAB EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00018BB0 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018BB5 03                         Map_dc7e_5F: 	dc.b $3
00018BB6 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00018BBB EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
00018BC0 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018BC5 03                         Map_dc7e_6F: 	dc.b $3
00018BC6 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018BCB EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018BD0 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018BD5 03                         Map_dc7e_7F: 	dc.b $3
00018BD6 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00018BDB E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018BE0 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018BE5 04                         Map_dc7e_8F: 	dc.b $4
00018BE6 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00018BEB E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018BF0 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018BF5 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018BFA 01                         Map_dc7e_A4: 	dc.b $1
00018BFB 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00018C00 01                         Map_dc7e_AA: 	dc.b $1
00018C01 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00018C06 00                         Map_dc7e_B0: 	dc.b $0
00018C07 02                         Map_dc7e_B1: 	dc.b $2
00018C08 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018C0D 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00018C12 02                         Map_dc7e_BC: 	dc.b $2
00018C13 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00018C18 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018C1E 00                         	even
00018C1E 00                         	even
00018C1E                            
00018C1E                            ; ---------------------------------------------------------------------------
00018C1E                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018C1E                            ; ---------------------------------------------------------------------------
00018C1E                            Map_BossItems:
00018C1E                            	include "_maps\Boss items.asm"
00018C1E                            ; ---------------------------------------------------------------------------
00018C1E                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018C1E                            ; ---------------------------------------------------------------------------
00018C1E 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018C22 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018C26 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018C2A 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018C2E 01                         byte_17DE4:	dc.b 1
00018C2F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018C34 02                         byte_17DEA:	dc.b 2
00018C35 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018C3A F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018C3F 00                         		dc.b 0
00018C40 01                         byte_17DF6:	dc.b 1
00018C41 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018C46 01                         byte_17DFC:	dc.b 1
00018C47 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018C4C 01                         byte_17E02:	dc.b 1
00018C4D 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018C52 04                         byte_17E08:	dc.b 4
00018C53 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018C58 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018C5D F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018C62 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00018C67 00                         		dc.b 0
00018C68 02                         byte_17E1E:	dc.b 2
00018C69 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018C6E 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018C73 00                         		dc.b 0
00018C74 02                         byte_17E2A:	dc.b 2
00018C75 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018C7A 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018C80 00                         		even
00018C80 00                         		even
00018C80                            
00018C80                            ; ===========================================================================
00018C80                            ; ---------------------------------------------------------------------------
00018C80                            ; Object 77 - Fatass teto boss fight in LZ -STDH
00018C80                            ; ---------------------------------------------------------------------------
00018C80                            
00018C80                            
00018C80                            obj77:					; XREF: Obj_Index
00018C80 7000                       		moveq	#0,d0
00018C82 1028 0024                  		move.b	$24(a0),d0
00018C86 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
00018C8A 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
00018C8E                            ; ===========================================================================
00018C8E 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
00018C90 0000                       		dc.w obj77_ShipMain-obj77_Index
00018C92 0000                       		dc.w obj77_FaceMain-obj77_Index
00018C94 0000                       		dc.w obj77_FlameMain-obj77_Index
00018C96                            
00018C96 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
00018C98 0401                       		dc.b 4,	1
00018C9A 0607                       		dc.b 6,	7
00018C9C                            ; ===========================================================================
00018C9C                            
00018C9C                            obj77_Main:				; XREF: obj77_Index
00018C9C 45F9 0001 8C96             		lea	(obj77_ObjData).l,a2
00018CA2 2248                       		movea.l	a0,a1
00018CA4 7202                       		moveq	#2,d1
00018CA6 6000                       		bra.s	obj77_LoadBoss
00018CA8                            ; ===========================================================================
00018CA8                            
00018CA8                            obj77_Loop:
00018CA8 4EB9 0000 E744             		jsr	SingleObjLoad2
00018CAE 6600                       		bne.s	loc2_17772
00018CB0                            
00018CB0                            obj77_LoadBoss:				; XREF: obj77_Main
00018CB0 135A 0024                  		move.b	(a2)+,$24(a1)
00018CB4 12BC 0077                  		move.b	#$77,0(a1)
00018CB8 3368 0008 0008             		move.w	8(a0),8(a1)
00018CBE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018CC4 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
00018CCC 337C 0400 0002             		move.w	#$400,2(a1)
00018CD2 137C 0004 0001             		move.b	#4,1(a1)
00018CD8 137C 0020 0019             		move.b	#$20,$19(a1)
00018CDE 137C 0003 0018             		move.b	#3,$18(a1)
00018CE4 135A 001C                  		move.b	(a2)+,$1C(a1)
00018CE8 2348 0034                  		move.l	a0,$34(a1)
00018CEC 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
00018CF0                            
00018CF0                            loc2_17772:
00018CF0 3168 0008 0030             		move.w	8(a0),$30(a0)
00018CF6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018CFC 117C 000F 0020             		move.b	#$F,$20(a0)
00018D02 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018D08                            
00018D08                            obj77_ShipMain:				; XREF: obj77_Index
00018D08 7000                       		moveq	#0,d0
00018D0A 1028 0025                  		move.b	$25(a0),d0
00018D0E 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00018D12 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
00018D16 43F9 0001 8B42             		lea	(Ani_TetoB).l,a1
00018D1C 4EB9 0000 B300             		jsr	AnimateSprite
00018D22 1028 0022                  		move.b	$22(a0),d0
00018D26 0200 0003                  		andi.b	#3,d0
00018D2A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018D30 8128 0001                  		or.b	d0,1(a0)
00018D34 4EF9 0000 E2A8             		jmp	DisplaySprite
00018D3A                            ; ===========================================================================
00018D3A 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
00018D3C 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00018D3E 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00018D40 0000                       		dc.w loc2_17954-obj77_ShipIndex
00018D42 0000                       		dc.w fatassruns-obj77_ShipIndex		
00018D44 0000                       		dc.w loc2_1797A-obj77_ShipIndex
00018D46 0000                       		dc.w loc2_179AC-obj77_ShipIndex
00018D48 0000                       		dc.w loc2_179F6-obj77_ShipIndex
00018D4A                            ; ===========================================================================
00018D4A                            
00018D4A                            obj77_ShipStart:			; XREF: obj77_ShipIndex
00018D4A                            	;	move.w	#$100,$12(a0)	; move ship down
00018D4A 6100 F964                  		bsr.w	BossMove
00018D4E 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00018D54 6600                       		bne.s	loc2_177E6
00018D56 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018D5C 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018D60                            
00018D60                            loc2_177E6:
00018D60                            ;		move.b	$3F(a0),d0
00018D60                            ;		jsr	(CalcSine).l
00018D60 EC40                       		asr.w	#6,d0
00018D62 D068 0038                  		add.w	$38(a0),d0
00018D66 3140 000C                  		move.w	d0,$C(a0)
00018D6A 3168 0030 0008             		move.w	$30(a0),8(a0)
00018D70 5428 003F                  		addq.b	#2,$3F(a0)
00018D74 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
00018D7A 6400                       		bcc.s	locret_1784A2
00018D7C 4A28 0022                  		tst.b	$22(a0)
00018D80 6B00                       		bmi.s	loc2_1784C
00018D82 4A28 0020                  		tst.b	$20(a0)
00018D86 6600                       		bne.s	locret_1784A2
00018D88 4A28 003E                  		tst.b	$3E(a0)
00018D8C 6600                       		bne.s	obj77_ShipFlash
00018D8E 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018D94 303C 00AC                  		move.w	#$AC,d0
00018D98 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018D9E                            
00018D9E                            obj77_ShipFlash:
00018D9E 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018DA2 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018DA4 4A51                       		tst.w	(a1)
00018DA6 6600                       		bne.s	loc2_1783C
00018DA8 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018DAC                            
00018DAC                            loc2_1783C:
00018DAC 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018DAE 5328 003E                  		subq.b	#1,$3E(a0)
00018DB2 6600                       		bne.s	locret_1784A2
00018DB4 117C 000F 0020             		move.b	#$F,$20(a0)
00018DBA                            
00018DBA                            locret_1784A2:
00018DBA 4E75                       		rts	
00018DBC                            ; ===========================================================================
00018DBC                            
00018DBC                            loc2_1784C:				; XREF: loc2_177E6
00018DBC 7064                       		moveq	#100,d0
00018DBE 6100 0000                  		bsr.w	AddPoints
00018DC2 117C 000A 0025             		move.b	#$A,$25(a0)
00018DC8 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018DCE 4E75                       		rts	
00018DD0                            ; ===========================================================================
00018DD0                            
00018DD0                            obj77_MakeBall:				; XREF: obj77_ShipIndex
00018DD0 317C FF00 0010             		move.w	#-$100,$10(a0)
00018DD6 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018DDC 6100 F8D2                  		bsr.w	BossMove
00018DE0 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
00018DE6 6600                       		bne.s	loc2_17916
00018DE8 317C 0000 0010             		move.w	#0,$10(a0)
00018DEE 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018DF4 317C 0000 0012             		move.w	#0,$12(a0)
00018DFA 5428 0025                  		addq.b	#2,$25(a0)
00018DFE                            
00018DFE                            loc2_17910:
00018DFE 317C 0077 003C             		move.w	#$77,$3C(a0)
00018E04                            
00018E04                            loc2_17916:
00018E04 6000 FF5A                  		bra.w	loc2_177E6
00018E08                            ; ===========================================================================
00018E08                            
00018E08                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018E08 6100 F8A6                  		bsr.w	BossMove
00018E0C 5368 003C                  		subq.w	#1,$3C(a0)
00018E10 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00018E12 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018E18 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00018E1E 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018E24 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00018E2A 6600                       		bne.s	loc2_17950 ; if not branch
00018E2C                            
00018E2C                            fatass_attack:
00018E2C 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00018E32 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00018E38 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00018E3E 6600                       		bne.s	loc2_17950    ; if not you know the drill
00018E40 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018E44 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018E4A                            
00018E4A                            loc2_17950:
00018E4A 6000 FF14                  		bra.w	loc2_177E6
00018E4E                            ; ===========================================================================
00018E4E                            
00018E4E                            loc2_17954:				; XREF: obj77_ShipIndex
00018E4E 6100 F860                  		bsr.w	BossMove
00018E52 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00018E58                            		; i suck at programming
00018E58 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00018E5E 6600                       		bne.s	loc2_17976    ; if not blah blah
00018E60 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018E66 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018E6A 303C 00B9                  		move.w	#$B9,d0
00018E6E 4EB9 0000 15E6             		jsr	(PlaySound).l	; play the earthquake sound
00018E74                            
00018E74                            Peartobombs:	
00018E74 4EB9 0000 E744                		jsr	SingleObjLoad2
00018E7A 6600                       		bne.s	secondone
00018E7C 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00018E80 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018E86 337C 0670 000C             		move.w	#$670,$C(a1)
00018E8C                            secondone:		
00018E8C 4EB9 0000 E744                		jsr	SingleObjLoad2
00018E92 6600                       		bne.s	loc2_17976		
00018E94 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018E98 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018E9E 337C 0670 000C             		move.w	#$670,$C(a1)
00018EA4                            lastone:
00018EA4 4EB9 0000 E744                		jsr	SingleObjLoad2
00018EAA 6600                       		bne.s	loc2_17976		
00018EAC 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00018EB0 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018EB6 337C 0670 000C             		move.w	#$670,$C(a1)
00018EBC                            		
00018EBC                            loc2_17976:
00018EBC 6000 FEA2                  		bra.w	loc2_177E6
00018EC0                            		
00018EC0                            ; ===========================================================================
00018EC0                            Fatassruns:
00018EC0 6100 F7EE                   		bsr.w	BossMove
00018EC4 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018ECA 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00018ED0 6600                       		bne.s	processstuff ; is not go here
00018ED2 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018ED8 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018EDE 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00018EE2 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018EE8 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018EEE                            		
00018EEE                            		
00018EEE                            processstuff:
00018EEE 6000 FE70                  		bra.w	loc2_177E6
00018EF2                            ; ===========================================================================
00018EF2                            
00018EF2                            loc2_1797A:				; XREF: obj77_ShipIndex
00018EF2 5368 003C                  		subq.w	#1,$3C(a0)
00018EF6 6B00                       		bmi.s	loc2_17984
00018EF8 6000 F774                  		bra.w	BossDefeated
00018EFC                            ; ===========================================================================
00018EFC                            
00018EFC                            loc2_17984:
00018EFC 08E8 0000 0022             		bset	#0,$22(a0)
00018F02 08A8 0007 0022             		bclr	#7,$22(a0)
00018F08 4268 0010                  		clr.w	$10(a0)
00018F0C 5428 0025                  		addq.b	#2,$25(a0)
00018F10 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018F16 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018F1A 6600                       		bne.s	locret_179AA2
00018F1C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018F22                            
00018F22                            locret_179AA2:
00018F22 4E75                       		rts	
00018F24                            ; ===========================================================================
00018F24                            
00018F24                            loc2_179AC:				; XREF: obj77_ShipIndex
00018F24 5268 003C                  		addq.w	#1,$3C(a0)
00018F28 6700                       		beq.s	loc2_179BC
00018F2A 6A00                       		bpl.s	loc2_179C2
00018F2C 0668 0018 0012             		addi.w	#$18,$12(a0)
00018F32 6000                       		bra.s	loc2_179EE
00018F34                            ; ===========================================================================
00018F34                            
00018F34                            loc2_179BC:
00018F34 4268 0012                  		clr.w	$12(a0)
00018F38 6000                       		bra.s	loc2_179EE
00018F3A                            ; ===========================================================================
00018F3A                            
00018F3A                            loc2_179C2:
00018F3A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018F40 6500                       		bcs.s	loc2_179DA
00018F42 6700                       		beq.s	loc2_179E0
00018F44 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018F4A 6500                       		bcs.s	loc2_179EE
00018F4C 5428 0025                  		addq.b	#2,$25(a0)
00018F50 6000                       		bra.s	loc2_179EE
00018F52                            ; ===========================================================================
00018F52                            
00018F52                            loc2_179DA:
00018F52 5168 0012                  		subq.w	#8,$12(a0)
00018F56 6000                       		bra.s	loc2_179EE
00018F58                            ; ===========================================================================
00018F58                            
00018F58                            loc2_179E0:
00018F58 4268 0012                  		clr.w	$12(a0)
00018F5C 303C 0097                  		move.w	#$97,d0
00018F60 4EB9 0000 15E6             		jsr	(PlaySound).l	; play lz3 music
00018F66                            
00018F66                            loc2_179EE:
00018F66 6100 F748                  		bsr.w	BossMove
00018F6A 6000 FDF4                  		bra.w	loc2_177E6
00018F6E                            ; ===========================================================================
00018F6E                            
00018F6E                            loc2_179F6:				; XREF: obj77_ShipIndex
00018F6E 317C 0400 0010             		move.w	#$400,$10(a0)
00018F74 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018F7A 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018F80 6700                       		beq.s	loc2_17A10
00018F82 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018F86 6000                       		bra.s	loc2_17A16
00018F88                            ; ===========================================================================
00018F88                            
00018F88                            loc2_17A10:
00018F88 4A28 0001                  		tst.b	1(a0)
00018F8C 6A00                       		bpl.s	obj77_ShipDel
00018F8E                            
00018F8E                            loc2_17A16:
00018F8E 6100 F720                  		bsr.w	BossMove
00018F92 6000 FDCC                  		bra.w	loc2_177E6
00018F96                            ; ===========================================================================
00018F96                            
00018F96                            obj77_ShipDel:
00018F96 4EF9 0000 E2E4             		jmp	DeleteObject
00018F9C                            ; ===========================================================================
00018F9C                            
00018F9C                            obj77_FaceMain:				; XREF: obj77_Index
00018F9C 4E75                       		rts
00018F9E                            ; ===========================================================================
00018F9E                            
00018F9E                            obj77_FlameMain:			; XREF: obj77_Index
00018F9E 4E75                       		rts
00018FA0                            ; ===========================================================================
00018FA0                            
00018FA0                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018FA0 43F9 0001 8B42             		lea	(Ani_TetoB).l,a1
00018FA6 4EB9 0000 B300             		jsr	AnimateSprite
00018FAC 4EF9 0000 E2A8             		jmp	DisplaySprite
00018FB2                            ; ---------------------------------------------------------------------------
00018FB2                            ; Sprite mappings - Fatass teto boss
00018FB2                            ; ---------------------------------------------------------------------------
00018FB2                            Map_TetoBoss:
00018FB2                            	include "_maps\tetoboss.asm"
00018FB2                            Map_f09a:
00018FB2 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018FB4 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018FB6 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018FB8 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018FBA 03                         Map_f09a_8: 	dc.b $3
00018FBB E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018FC0 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018FC5 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018FCA 06                         Map_f09a_18: 	dc.b $6
00018FCB EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018FD0 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018FD5 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018FDA 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018FDF EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018FE4 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018FE9 03                         Map_f09a_37: 	dc.b $3
00018FEA E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018FEF 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018FF4 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018FF9 06                         Map_f09a_47: 	dc.b $6
00018FFA ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018FFF 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00019004 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00019009 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
0001900E ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00019013 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00019018                            	even
00019018                            	even
00019018                            ; ===========================================================================
00019018                            ; ---------------------------------------------------------------------------
00019018                            ; Object 73 - Eggman (MZ)
00019018                            ; ---------------------------------------------------------------------------
00019018                            
00019018                            Obj73:					; XREF: Obj_Index
00019018 7000                       		moveq	#0,d0
0001901A 1028 0024                  		move.b	$24(a0),d0
0001901E 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00019022 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00019026                            ; ===========================================================================
00019026 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00019028 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001902A 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001902C 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001902E 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00019030                            
00019030 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019033 0401 04                    		dc.b 4,	1, 4
00019036 0607 04                    		dc.b 6,	7, 4
00019039 0800 03                    		dc.b 8,	0, 3
0001903C                            ; ===========================================================================
0001903C                            
0001903C                            Obj73_Main:				; XREF: Obj73_Index
0001903C 3168 0008 0030             		move.w	8(a0),$30(a0)
00019042 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019048 117C 000F 0020             		move.b	#$F,$20(a0)
0001904E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019054 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00019058 2248                       		movea.l	a0,a1
0001905A 7203                       		moveq	#3,d1
0001905C 6000                       		bra.s	Obj73_LoadBoss
0001905E                            ; ===========================================================================
0001905E                            
0001905E                            Obj73_Loop:
0001905E 4EB9 0000 E744             		jsr	SingleObjLoad2
00019064 6600                       		bne.s	Obj73_ShipMain
00019066 12BC 0073                  		move.b	#$73,0(a1)
0001906A 3368 0008 0008             		move.w	8(a0),8(a1)
00019070 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019076                            
00019076                            Obj73_LoadBoss:				; XREF: Obj73_Main
00019076 08A8 0000 0022             		bclr	#0,$22(a0)
0001907C 4229 0025                  		clr.b	$25(a1)
00019080 135A 0024                  		move.b	(a2)+,$24(a1)
00019084 135A 001C                  		move.b	(a2)+,$1C(a1)
00019088 135A 0018                  		move.b	(a2)+,$18(a1)
0001908C 237C 0001 8B56 0004        		move.l	#Map_Eggman,4(a1)
00019094 337C 0400 0002             		move.w	#$400,2(a1)
0001909A 137C 0004 0001             		move.b	#4,1(a1)
000190A0 137C 0020 0019             		move.b	#$20,$19(a1)
000190A6 2348 0034                  		move.l	a0,$34(a1)
000190AA 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
000190AE                            
000190AE                            Obj73_ShipMain:
000190AE 7000                       		moveq	#0,d0
000190B0 1028 0025                  		move.b	$25(a0),d0
000190B4 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000190B8 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000190BC 43F9 0001 8AF2             		lea	(Ani_Eggman).l,a1
000190C2 4EB9 0000 B300             		jsr	AnimateSprite
000190C8 7003                       		moveq	#3,d0
000190CA C028 0022                  		and.b	$22(a0),d0
000190CE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000190D4 8128 0001                  		or.b	d0,1(a0)
000190D8 4EF9 0000 E2A8             		jmp	DisplaySprite
000190DE                            ; ===========================================================================
000190DE 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
000190E0 0000                       		dc.w loc_183AA-Obj73_ShipIndex
000190E2 0000                       		dc.w loc_184F6-Obj73_ShipIndex
000190E4 0000                       		dc.w loc_1852C-Obj73_ShipIndex
000190E6 0000                       		dc.w loc_18582-Obj73_ShipIndex
000190E8                            ; ===========================================================================
000190E8                            
000190E8                            loc_18302:				; XREF: Obj73_ShipIndex
000190E8 1028 003F                  		move.b	$3F(a0),d0
000190EC 5428 003F                  		addq.b	#2,$3F(a0)
000190F0 4EB9 0000 2D86             		jsr	(CalcSine).l
000190F6 E440                       		asr.w	#2,d0
000190F8 3140 0012                  		move.w	d0,$12(a0)
000190FC 317C FF00 0010             		move.w	#-$100,$10(a0)
00019102 6100 F5AC                  		bsr.w	BossMove
00019106 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001910C 6600                       		bne.s	loc_18334
0001910E 5428 0025                  		addq.b	#2,$25(a0)
00019112 4228 0028                  		clr.b	$28(a0)
00019116 42A8 0010                  		clr.l	$10(a0)
0001911A                            
0001911A                            loc_18334:
0001911A 4EB9 0000 2D60             		jsr	(RandomNumber).l
00019120 1140 0034                  		move.b	d0,$34(a0)
00019124                            
00019124                            loc_1833E:
00019124 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001912A 3168 0030 0008             		move.w	$30(a0),8(a0)
00019130 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00019136 6400                       		bcc.s	locret_18390
00019138 4A28 0022                  		tst.b	$22(a0)
0001913C 6B00                       		bmi.s	loc_18392
0001913E 4A28 0020                  		tst.b	$20(a0)
00019142 6600                       		bne.s	locret_18390
00019144 4A28 003E                  		tst.b	$3E(a0)
00019148 6600                       		bne.s	loc_18374
0001914A 117C 0028 003E             		move.b	#$28,$3E(a0)
00019150 303C 00AC                  		move.w	#$AC,d0
00019154 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001915A                            
0001915A                            loc_18374:
0001915A 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001915E 7000                       		moveq	#0,d0
00019160 4A51                       		tst.w	(a1)
00019162 6600                       		bne.s	loc_18382
00019164 303C 0EEE                  		move.w	#$EEE,d0
00019168                            
00019168                            loc_18382:
00019168 3280                       		move.w	d0,(a1)
0001916A 5328 003E                  		subq.b	#1,$3E(a0)
0001916E 6600                       		bne.s	locret_18390
00019170 117C 000F 0020             		move.b	#$F,$20(a0)
00019176                            
00019176                            locret_18390:
00019176 4E75                       		rts	
00019178                            ; ===========================================================================
00019178                            
00019178                            loc_18392:				; XREF: loc_1833E
00019178 7064                       		moveq	#100,d0
0001917A 6100 0000                  		bsr.w	AddPoints
0001917E 117C 0004 0025             		move.b	#4,$25(a0)
00019184 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001918A 4268 0010                  		clr.w	$10(a0)
0001918E 4E75                       		rts	
00019190                            ; ===========================================================================
00019190                            
00019190                            loc_183AA:				; XREF: Obj73_ShipIndex
00019190 7000                       		moveq	#0,d0
00019192 1028 0028                  		move.b	$28(a0),d0
00019196 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001919A 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001919E 0228 0006 0028             		andi.b	#6,$28(a0)
000191A4 6000 FF7E                  		bra.w	loc_1833E
000191A8                            ; ===========================================================================
000191A8 0000                       off_183C2:	dc.w loc_183CA-off_183C2
000191AA 0000                       		dc.w Obj73_MakeLava2-off_183C2
000191AC 0000                       		dc.w loc_183CA-off_183C2
000191AE 0000                       		dc.w Obj73_MakeLava2-off_183C2
000191B0                            ; ===========================================================================
000191B0                            
000191B0                            loc_183CA:				; XREF: off_183C2
000191B0 4A68 0010                  		tst.w	$10(a0)
000191B4 6600                       		bne.s	loc_183FE
000191B6 7040                       		moveq	#$40,d0
000191B8 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000191BE 6700                       		beq.s	loc_183E6
000191C0 6500                       		bcs.s	loc_183DE
000191C2 4440                       		neg.w	d0
000191C4                            
000191C4                            loc_183DE:
000191C4 3140 0012                  		move.w	d0,$12(a0)
000191C8 6000 F4E6                  		bra.w	BossMove
000191CC                            ; ===========================================================================
000191CC                            
000191CC                            loc_183E6:
000191CC 317C 0200 0010             		move.w	#$200,$10(a0)
000191D2 317C 0100 0012             		move.w	#$100,$12(a0)
000191D8 0828 0000 0022             		btst	#0,$22(a0)
000191DE 6600                       		bne.s	loc_183FE
000191E0 4468 0010                  		neg.w	$10(a0)
000191E4                            
000191E4                            loc_183FE:
000191E4 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
000191EA 6400                       		bcc.s	Obj73_MakeLava
000191EC 6100 F4C2                  		bsr.w	BossMove
000191F0 5968 0012                  		subq.w	#4,$12(a0)
000191F4                            
000191F4                            Obj73_MakeLava:
000191F4 5328 0034                  		subq.b	#1,$34(a0)
000191F8 6400                       		bcc.s	loc_1845C
000191FA 4EB9 0000 E72E             		jsr	SingleObjLoad
00019200 6600                       		bne.s	loc_1844A
00019202 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00019206 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001920C 4EB9 0000 2D60             		jsr	(RandomNumber).l
00019212 0280 0000 FFFF             		andi.l	#$FFFF,d0
00019218 80FC 0050                  		divu.w	#$50,d0
0001921C 4840                       		swap	d0
0001921E 0640 1878                  		addi.w	#$1878,d0
00019222 3340 0008                  		move.w	d0,8(a1)
00019226 EE09                       		lsr.b	#7,d1
00019228 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001922E                            
0001922E                            loc_1844A:
0001922E 4EB9 0000 2D60             		jsr	(RandomNumber).l
00019234 0200 001F                  		andi.b	#$1F,d0
00019238 0600 0040                  		addi.b	#$40,d0
0001923C 1140 0034                  		move.b	d0,$34(a0)
00019240                            
00019240                            loc_1845C:
00019240 0828 0000 0022             		btst	#0,$22(a0)
00019246 6700                       		beq.s	loc_18474
00019248 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001924E 6D00                       		blt.s	locret_1849C
00019250 317C 1910 0030             		move.w	#$1910,$30(a0)
00019256 6000                       		bra.s	loc_18482
00019258                            ; ===========================================================================
00019258                            
00019258                            loc_18474:
00019258 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001925E 6E00                       		bgt.s	locret_1849C
00019260 317C 1830 0030             		move.w	#$1830,$30(a0)
00019266                            
00019266                            loc_18482:
00019266 4268 0010                  		clr.w	$10(a0)
0001926A 317C FE80 0012             		move.w	#-$180,$12(a0)
00019270 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019276 6400                       		bcc.s	loc_18498
00019278 4468 0012                  		neg.w	$12(a0)
0001927C                            
0001927C                            loc_18498:
0001927C 5428 0028                  		addq.b	#2,$28(a0)
00019280                            
00019280                            locret_1849C:
00019280 4E75                       		rts	
00019282                            ; ===========================================================================
00019282                            
00019282                            Obj73_MakeLava2:			; XREF: off_183C2
00019282 6100 F42C                  		bsr.w	BossMove
00019286 3028 0038                  		move.w	$38(a0),d0
0001928A 0440 022C                  		subi.w	#$22C,d0
0001928E 6E00                       		bgt.s	locret_184F4
00019290 303C 022C                  		move.w	#$22C,d0
00019294 4A68 0012                  		tst.w	$12(a0)
00019298 6700                       		beq.s	loc_184EA
0001929A 4268 0012                  		clr.w	$12(a0)
0001929E 317C 0050 003C             		move.w	#$50,$3C(a0)
000192A4 0868 0000 0022             		bchg	#0,$22(a0)
000192AA 4EB9 0000 E72E             		jsr	SingleObjLoad
000192B0 6600                       		bne.s	loc_184EA
000192B2 3368 0030 0008             		move.w	$30(a0),8(a1)
000192B8 3368 0038 000C             		move.w	$38(a0),$C(a1)
000192BE 0669 0018 000C             		addi.w	#$18,$C(a1)
000192C4 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
000192C8 137C 0001 0028             		move.b	#1,$28(a1)
000192CE                            
000192CE                            loc_184EA:
000192CE 5368 003C                  		subq.w	#1,$3C(a0)
000192D2 6600                       		bne.s	locret_184F4
000192D4 5428 0028                  		addq.b	#2,$28(a0)
000192D8                            
000192D8                            locret_184F4:
000192D8 4E75                       		rts	
000192DA                            ; ===========================================================================
000192DA                            
000192DA                            loc_184F6:				; XREF: Obj73_ShipIndex
000192DA 5368 003C                  		subq.w	#1,$3C(a0)
000192DE 6B00                       		bmi.s	loc_18500
000192E0 6000 F38C                  		bra.w	BossDefeated
000192E4                            ; ===========================================================================
000192E4                            
000192E4                            loc_18500:
000192E4 08E8 0000 0022             		bset	#0,$22(a0)
000192EA 08A8 0007 0022             		bclr	#7,$22(a0)
000192F0 4268 0010                  		clr.w	$10(a0)
000192F4 5428 0025                  		addq.b	#2,$25(a0)
000192F8 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000192FE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019302 6600                       		bne.s	locret_1852A
00019304 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001930A 4268 0012                  		clr.w	$12(a0)
0001930E                            
0001930E                            locret_1852A:
0001930E 4E75                       		rts	
00019310                            ; ===========================================================================
00019310                            
00019310                            loc_1852C:				; XREF: Obj73_ShipIndex
00019310 5268 003C                  		addq.w	#1,$3C(a0)
00019314 6700                       		beq.s	loc_18544
00019316 6A00                       		bpl.s	loc_1854E
00019318 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001931E 6400                       		bcc.s	loc_18544
00019320 0668 0018 0012             		addi.w	#$18,$12(a0)
00019326 6000                       		bra.s	loc_1857A
00019328                            ; ===========================================================================
00019328                            
00019328                            loc_18544:
00019328 4268 0012                  		clr.w	$12(a0)
0001932C 4268 003C                  		clr.w	$3C(a0)
00019330 6000                       		bra.s	loc_1857A
00019332                            ; ===========================================================================
00019332                            
00019332                            loc_1854E:
00019332 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019338 6500                       		bcs.s	loc_18566
0001933A 6700                       		beq.s	loc_1856C
0001933C 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019342 6500                       		bcs.s	loc_1857A
00019344 5428 0025                  		addq.b	#2,$25(a0)
00019348 6000                       		bra.s	loc_1857A
0001934A                            ; ===========================================================================
0001934A                            
0001934A                            loc_18566:
0001934A 5168 0012                  		subq.w	#8,$12(a0)
0001934E 6000                       		bra.s	loc_1857A
00019350                            ; ===========================================================================
00019350                            
00019350                            loc_1856C:
00019350 4268 0012                  		clr.w	$12(a0)
00019354 303C 0083                  		move.w	#$83,d0
00019358 4EB9 0000 15E6             		jsr	(PlaySound).l	; play MZ music
0001935E                            
0001935E                            loc_1857A:
0001935E 6100 F350                  		bsr.w	BossMove
00019362 6000 FDC0                  		bra.w	loc_1833E
00019366                            ; ===========================================================================
00019366                            
00019366                            loc_18582:				; XREF: Obj73_ShipIndex
00019366 317C 0500 0010             		move.w	#$500,$10(a0)
0001936C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019372 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00019378 6400                       		bcc.s	loc_1859C
0001937A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001937E 6000                       		bra.s	loc_185A2
00019380                            ; ===========================================================================
00019380                            
00019380                            loc_1859C:
00019380 4A28 0001                  		tst.b	1(a0)
00019384 6A00                       		bpl.s	Obj73_ShipDel
00019386                            
00019386                            loc_185A2:
00019386 6100 F328                  		bsr.w	BossMove
0001938A 6000 FD98                  		bra.w	loc_1833E
0001938E                            ; ===========================================================================
0001938E                            
0001938E                            Obj73_ShipDel:
0001938E 4EF9 0000 E2E4             		jmp	DeleteObject
00019394                            ; ===========================================================================
00019394                            
00019394                            Obj73_FaceMain:				; XREF: Obj73_Index
00019394 7000                       		moveq	#0,d0
00019396 7201                       		moveq	#1,d1
00019398 2268 0034                  		movea.l	$34(a0),a1
0001939C 1029 0025                  		move.b	$25(a1),d0
000193A0 5540                       		subq.w	#2,d0
000193A2 6600                       		bne.s	loc_185D2
000193A4 0829 0001 0028             		btst	#1,$28(a1)
000193AA 6700                       		beq.s	loc_185DA
000193AC 4A69 0012                  		tst.w	$12(a1)
000193B0 6600                       		bne.s	loc_185DA
000193B2 7204                       		moveq	#4,d1
000193B4 6000                       		bra.s	loc_185EE
000193B6                            ; ===========================================================================
000193B6                            
000193B6                            loc_185D2:
000193B6 5500                       		subq.b	#2,d0
000193B8 6B00                       		bmi.s	loc_185DA
000193BA 720A                       		moveq	#$A,d1
000193BC 6000                       		bra.s	loc_185EE
000193BE                            ; ===========================================================================
000193BE                            
000193BE                            loc_185DA:
000193BE 4A29 0020                  		tst.b	$20(a1)
000193C2 6600                       		bne.s	loc_185E4
000193C4 7205                       		moveq	#5,d1
000193C6 6000                       		bra.s	loc_185EE
000193C8                            ; ===========================================================================
000193C8                            
000193C8                            loc_185E4:
000193C8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000193CE 6500                       		bcs.s	loc_185EE
000193D0 7204                       		moveq	#4,d1
000193D2                            
000193D2                            loc_185EE:
000193D2 1141 001C                  		move.b	d1,$1C(a0)
000193D6 5900                       		subq.b	#4,d0
000193D8 6600                       		bne.s	loc_18602
000193DA 117C 0006 001C             		move.b	#6,$1C(a0)
000193E0 4A28 0001                  		tst.b	1(a0)
000193E4 6A00                       		bpl.s	Obj73_FaceDel
000193E6                            
000193E6                            loc_18602:
000193E6 6000                       		bra.s	Obj73_Display
000193E8                            ; ===========================================================================
000193E8                            
000193E8                            Obj73_FaceDel:
000193E8 4EF9 0000 E2E4             		jmp	DeleteObject
000193EE                            ; ===========================================================================
000193EE                            
000193EE                            Obj73_FlameMain:			; XREF: Obj73_Index
000193EE 117C 0007 001C             		move.b	#7,$1C(a0)
000193F4 2268 0034                  		movea.l	$34(a0),a1
000193F8 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000193FE 6D00                       		blt.s	loc_1862A
00019400 117C 000B 001C             		move.b	#$B,$1C(a0)
00019406 4A28 0001                  		tst.b	1(a0)
0001940A 6A00                       		bpl.s	Obj73_FlameDel
0001940C 6000                       		bra.s	loc_18636
0001940E                            ; ===========================================================================
0001940E                            
0001940E                            loc_1862A:
0001940E 4A69 0010                  		tst.w	$10(a1)
00019412 6700                       		beq.s	loc_18636
00019414 117C 0008 001C             		move.b	#8,$1C(a0)
0001941A                            
0001941A                            loc_18636:
0001941A 6000                       		bra.s	Obj73_Display
0001941C                            ; ===========================================================================
0001941C                            
0001941C                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001941C 4EF9 0000 E2E4             		jmp	DeleteObject
00019422                            ; ===========================================================================
00019422                            
00019422                            Obj73_Display:
00019422 43F9 0001 8AF2             		lea	(Ani_Eggman).l,a1
00019428 4EB9 0000 B300             		jsr	AnimateSprite
0001942E                            
0001942E                            loc_1864A:
0001942E 2268 0034                  		movea.l	$34(a0),a1
00019432 3169 0008 0008             		move.w	8(a1),8(a0)
00019438 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001943E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019444 7003                       		moveq	#3,d0
00019446 C028 0022                  		and.b	$22(a0),d0
0001944A 0228 00FC 0001             		andi.b	#-4,1(a0)
00019450 8128 0001                  		or.b	d0,1(a0)
00019454 4EF9 0000 E2A8             		jmp	DisplaySprite
0001945A                            ; ===========================================================================
0001945A                            
0001945A                            Obj73_TubeMain:				; XREF: Obj73_Index
0001945A 2268 0034                  		movea.l	$34(a0),a1
0001945E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019464 6600                       		bne.s	loc_18688
00019466 4A28 0001                  		tst.b	1(a0)
0001946A 6A00                       		bpl.s	Obj73_TubeDel
0001946C                            
0001946C                            loc_18688:
0001946C 217C 0001 8C1E 0004        		move.l	#Map_BossItems,4(a0)
00019474 317C 246C 0002             		move.w	#$246C,2(a0)
0001947A 117C 0004 001A             		move.b	#4,$1A(a0)
00019480 60AC                       		bra.s	loc_1864A
00019482                            ; ===========================================================================
00019482                            
00019482                            Obj73_TubeDel:
00019482 4EF9 0000 E2E4             		jmp	DeleteObject
00019488                            ; ===========================================================================
00019488                            ; ---------------------------------------------------------------------------
00019488                            ; Object 74 - lava that	Eggman drops (MZ)
00019488                            ; ---------------------------------------------------------------------------
00019488                            
00019488                            Obj74:					; XREF: Obj_Index
00019488 7000                       		moveq	#0,d0
0001948A 1028 0024                  		move.b	$24(a0),d0
0001948E 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00019492 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00019496 4EF9 0000 E2A8             		jmp	DisplaySprite
0001949C                            ; ===========================================================================
0001949C 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001949E 0000                       		dc.w Obj74_Action-Obj74_Index
000194A0 0000                       		dc.w loc_18886-Obj74_Index
000194A2 0000                       		dc.w Obj74_Delete3-Obj74_Index
000194A4                            ; ===========================================================================
000194A4                            
000194A4                            Obj74_Main:				; XREF: Obj74_Index
000194A4 117C 0008 0016             		move.b	#8,$16(a0)
000194AA 117C 0008 0017             		move.b	#8,$17(a0)
000194B0 217C 0000 BEFE 0004        		move.l	#Map_obj14,4(a0)
000194B8 317C 0345 0002             		move.w	#$345,2(a0)
000194BE 117C 0004 0001             		move.b	#4,1(a0)
000194C4 117C 0005 0018             		move.b	#5,$18(a0)
000194CA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000194D0 117C 0008 0019             		move.b	#8,$19(a0)
000194D6 5428 0024                  		addq.b	#2,$24(a0)
000194DA 4A28 0028                  		tst.b	$28(a0)
000194DE 6600                       		bne.s	loc_1870A
000194E0 117C 008B 0020             		move.b	#$8B,$20(a0)
000194E6 5428 0024                  		addq.b	#2,$24(a0)
000194EA 6000 0000                  		bra.w	loc_18886
000194EE                            ; ===========================================================================
000194EE                            
000194EE                            loc_1870A:
000194EE 117C 001E 0029             		move.b	#$1E,$29(a0)
000194F4 303C 00AE                  		move.w	#$AE,d0
000194F8 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play lava sound
000194FE                            
000194FE                            Obj74_Action:				; XREF: Obj74_Index
000194FE 7000                       		moveq	#0,d0
00019500 1028 0025                  		move.b	$25(a0),d0
00019504 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00019508 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001950C 4EB9 0000 E26E             		jsr	SpeedToPos
00019512 43F9 0000 F160             		lea	(Ani_obj14).l,a1
00019518 4EB9 0000 B300             		jsr	AnimateSprite
0001951E 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019524 6200                       		bhi.s	Obj74_Delete
00019526 4E75                       		rts	
00019528                            ; ===========================================================================
00019528                            
00019528                            Obj74_Delete:
00019528 4EF9 0000 E2E4             		jmp	DeleteObject
0001952E                            ; ===========================================================================
0001952E 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00019530 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00019532 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00019534 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00019536                            ; ===========================================================================
00019536                            
00019536                            Obj74_Drop:				; XREF: Obj74_Index2
00019536 08E8 0001 0022             		bset	#1,$22(a0)
0001953C 5328 0029                  		subq.b	#1,$29(a0)
00019540 6A00                       		bpl.s	locret_18780
00019542 117C 008B 0020             		move.b	#$8B,$20(a0)
00019548 4228 0028                  		clr.b	$28(a0)
0001954C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019552 08A8 0001 0022             		bclr	#1,$22(a0)
00019558 6100 C618                  		bsr.w	ObjHitFloor
0001955C 4A41                       		tst.w	d1
0001955E 6A00                       		bpl.s	locret_18780
00019560 5428 0025                  		addq.b	#2,$25(a0)
00019564                            
00019564                            locret_18780:
00019564 4E75                       		rts	
00019566                            ; ===========================================================================
00019566                            
00019566                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00019566 5568 000C                  		subq.w	#2,$C(a0)
0001956A 08E8 0007 0002             		bset	#7,2(a0)
00019570 317C 00A0 0010             		move.w	#$A0,$10(a0)
00019576 4268 0012                  		clr.w	$12(a0)
0001957A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019580 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019586 117C 0003 0029             		move.b	#3,$29(a0)
0001958C 4EB9 0000 E744             		jsr	SingleObjLoad2
00019592 6600                       		bne.s	loc_187CA
00019594 47D1                       		lea	(a1),a3
00019596 45D0                       		lea	(a0),a2
00019598 7003                       		moveq	#3,d0
0001959A                            
0001959A                            Obj74_Loop:
0001959A 26DA                       		move.l	(a2)+,(a3)+
0001959C 26DA                       		move.l	(a2)+,(a3)+
0001959E 26DA                       		move.l	(a2)+,(a3)+
000195A0 26DA                       		move.l	(a2)+,(a3)+
000195A2 51C8 FFF6                  		dbf	d0,Obj74_Loop
000195A6                            
000195A6 4469 0010                  		neg.w	$10(a1)
000195AA 5429 0025                  		addq.b	#2,$25(a1)
000195AE                            
000195AE                            loc_187CA:
000195AE 5428 0025                  		addq.b	#2,$25(a0)
000195B2 4E75                       		rts	
000195B4                            
000195B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000195B4                            
000195B4                            
000195B4                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000195B4 4EB9 0000 E744             		jsr	SingleObjLoad2
000195BA 6600                       		bne.s	locret_187EE
000195BC 3368 0008 0008             		move.w	8(a0),8(a1)
000195C2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000195C8 12BC 0074                  		move.b	#$74,(a1)
000195CC 337C 0067 0028             		move.w	#$67,$28(a1)
000195D2                            
000195D2                            locret_187EE:
000195D2 4E75                       		rts	
000195D4                            ; End of function Obj74_Duplicate2
000195D4                            
000195D4                            ; ===========================================================================
000195D4                            
000195D4                            Obj74_Duplicate:			; XREF: Obj74_Index2
000195D4 6100 C59C                  		bsr.w	ObjHitFloor
000195D8 4A41                       		tst.w	d1
000195DA 6A00                       		bpl.s	loc_18826
000195DC 3028 0008                  		move.w	8(a0),d0
000195E0 0C40 1940                  		cmpi.w	#$1940,d0
000195E4 6E00                       		bgt.s	loc_1882C
000195E6 3228 0030                  		move.w	$30(a0),d1
000195EA B240                       		cmp.w	d0,d1
000195EC 6700                       		beq.s	loc_1881E
000195EE 0240 0010                  		andi.w	#$10,d0
000195F2 0241 0010                  		andi.w	#$10,d1
000195F6 B240                       		cmp.w	d0,d1
000195F8 6700                       		beq.s	loc_1881E
000195FA 61B8                       		bsr.s	Obj74_Duplicate2
000195FC 3168 0008 0032             		move.w	8(a0),$32(a0)
00019602                            
00019602                            loc_1881E:
00019602 3168 0008 0030             		move.w	8(a0),$30(a0)
00019608 4E75                       		rts	
0001960A                            ; ===========================================================================
0001960A                            
0001960A                            loc_18826:
0001960A 5428 0025                  		addq.b	#2,$25(a0)
0001960E 4E75                       		rts	
00019610                            ; ===========================================================================
00019610                            
00019610                            loc_1882C:
00019610 5428 0024                  		addq.b	#2,$24(a0)
00019614 4E75                       		rts	
00019616                            ; ===========================================================================
00019616                            
00019616                            Obj74_FallEdge:				; XREF: Obj74_Index2
00019616 08A8 0001 0022             		bclr	#1,$22(a0)
0001961C 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00019622 3028 0008                  		move.w	8(a0),d0
00019626 9068 0032                  		sub.w	$32(a0),d0
0001962A 6A00                       		bpl.s	loc_1884A
0001962C 4440                       		neg.w	d0
0001962E                            
0001962E                            loc_1884A:
0001962E 0C40 0012                  		cmpi.w	#$12,d0
00019632 6600                       		bne.s	loc_18856
00019634 08A8 0007 0002             		bclr	#7,2(a0)
0001963A                            
0001963A                            loc_18856:
0001963A 6100 C536                  		bsr.w	ObjHitFloor
0001963E 4A41                       		tst.w	d1
00019640 6A00                       		bpl.s	locret_1887E
00019642 5328 0029                  		subq.b	#1,$29(a0)
00019646 6700                       		beq.s	Obj74_Delete2
00019648 4268 0012                  		clr.w	$12(a0)
0001964C 3168 0032 0008             		move.w	$32(a0),8(a0)
00019652 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019658 08E8 0007 0002             		bset	#7,2(a0)
0001965E 5528 0025                  		subq.b	#2,$25(a0)
00019662                            
00019662                            locret_1887E:
00019662 4E75                       		rts	
00019664                            ; ===========================================================================
00019664                            
00019664                            Obj74_Delete2:
00019664 4EF9 0000 E2E4             		jmp	DeleteObject
0001966A                            ; ===========================================================================
0001966A                            
0001966A                            loc_18886:				; XREF: Obj74_Index
0001966A 08E8 0007 0002             		bset	#7,2(a0)
00019670 5328 0029                  		subq.b	#1,$29(a0)
00019674 6600                       		bne.s	Obj74_Animate
00019676 117C 0001 001C             		move.b	#1,$1C(a0)
0001967C 5968 000C                  		subq.w	#4,$C(a0)
00019680 4228 0020                  		clr.b	$20(a0)
00019684                            
00019684                            Obj74_Animate:
00019684 43F9 0000 F160             		lea	(Ani_obj14).l,a1
0001968A 4EF9 0000 B300             		jmp	AnimateSprite
00019690                            ; ===========================================================================
00019690                            
00019690                            Obj74_Delete3:				; XREF: Obj74_Index
00019690 4EF9 0000 E2E4             		jmp	DeleteObject
00019696                            ; ===========================================================================
00019696                            
00019696                            Obj7A_Delete:
00019696 4EF9 0000 E2E4             		jmp	DeleteObject
0001969C                            ; ===========================================================================
0001969C                            ; ---------------------------------------------------------------------------
0001969C                            ; Object 7A - Eggman (SLZ)
0001969C                            ; ---------------------------------------------------------------------------
0001969C                            
0001969C                            Obj7A:					; XREF: Obj_Index
0001969C 7000                       		moveq	#0,d0
0001969E 1028 0024                  		move.b	$24(a0),d0
000196A2 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000196A6 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000196AA                            ; ===========================================================================
000196AA 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000196AC 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000196AE 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000196B0 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000196B2 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000196B4                            
000196B4 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000196B7 0401 04                    		dc.b 4,	1, 4
000196BA 0607 04                    		dc.b 6,	7, 4
000196BD 0800 03                    		dc.b 8,	0, 3
000196C0                            ; ===========================================================================
000196C0                            
000196C0                            Obj7A_Main:				; XREF: Obj7A_Index
000196C0 317C 2188 0008             		move.w	#$2188,8(a0)
000196C6 317C 0228 000C             		move.w	#$228,$C(a0)
000196CC 3168 0008 0030             		move.w	8(a0),$30(a0)
000196D2 3168 000C 0038             		move.w	$C(a0),$38(a0)
000196D8 117C 000F 0020             		move.b	#$F,$20(a0)
000196DE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000196E4 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000196E8 2248                       		movea.l	a0,a1
000196EA 7203                       		moveq	#3,d1
000196EC 6000                       		bra.s	Obj7A_LoadBoss
000196EE                            ; ===========================================================================
000196EE                            
000196EE                            Obj7A_Loop:
000196EE 4EB9 0000 E744             		jsr	SingleObjLoad2
000196F4 6600                       		bne.s	loc_1895C
000196F6 12BC 007A                  		move.b	#$7A,0(a1)
000196FA 3368 0008 0008             		move.w	8(a0),8(a1)
00019700 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019706                            
00019706                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00019706 08A8 0000 0022             		bclr	#0,$22(a0)
0001970C 4229 0025                  		clr.b	$25(a1)
00019710 135A 0024                  		move.b	(a2)+,$24(a1)
00019714 135A 001C                  		move.b	(a2)+,$1C(a1)
00019718 135A 0018                  		move.b	(a2)+,$18(a1)
0001971C 237C 0001 8B56 0004        		move.l	#Map_Eggman,4(a1)
00019724 337C 0400 0002             		move.w	#$400,2(a1)
0001972A 137C 0004 0001             		move.b	#4,1(a1)
00019730 137C 0020 0019             		move.b	#$20,$19(a1)
00019736 2348 0034                  		move.l	a0,$34(a1)
0001973A 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001973E                            
0001973E                            loc_1895C:
0001973E 43F8 D040                  		lea	($FFFFD040).w,a1
00019742 45E8 002A                  		lea	$2A(a0),a2
00019746 705E                       		moveq	#$5E,d0
00019748 723E                       		moveq	#$3E,d1
0001974A                            
0001974A                            loc_18968:
0001974A B011                       		cmp.b	(a1),d0
0001974C 6600                       		bne.s	loc_18974
0001974E 4A29 0028                  		tst.b	$28(a1)
00019752 6700                       		beq.s	loc_18974
00019754 34C9                       		move.w	a1,(a2)+
00019756                            
00019756                            loc_18974:
00019756 D2FC 0040                  		adda.w	#$40,a1
0001975A 51C9 FFEE                  		dbf	d1,loc_18968
0001975E                            
0001975E                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001975E 7000                       		moveq	#0,d0
00019760 1028 0025                  		move.b	$25(a0),d0
00019764 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00019768 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001976C 43F9 0001 8AF2             		lea	(Ani_Eggman).l,a1
00019772 4EB9 0000 B300             		jsr	AnimateSprite
00019778 7003                       		moveq	#3,d0
0001977A C028 0022                  		and.b	$22(a0),d0
0001977E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019784 8128 0001                  		or.b	d0,1(a0)
00019788 4EF9 0000 E2A8             		jmp	DisplaySprite
0001978E                            ; ===========================================================================
0001978E 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00019790 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00019792 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00019794 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00019796 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00019798 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001979A                            ; ===========================================================================
0001979A                            
0001979A                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001979A 317C FF00 0010             		move.w	#-$100,$10(a0)
000197A0 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000197A6 6400                       		bcc.s	loc_189CA
000197A8 5428 0025                  		addq.b	#2,$25(a0)
000197AC                            
000197AC                            loc_189CA:
000197AC 6100 EF02                  		bsr.w	BossMove
000197B0 1028 003F                  		move.b	$3F(a0),d0
000197B4 5428 003F                  		addq.b	#2,$3F(a0)
000197B8 4EB9 0000 2D86             		jsr	(CalcSine).l
000197BE EC40                       		asr.w	#6,d0
000197C0 D068 0038                  		add.w	$38(a0),d0
000197C4 3140 000C                  		move.w	d0,$C(a0)
000197C8 3168 0030 0008             		move.w	$30(a0),8(a0)
000197CE 6000                       		bra.s	loc_189FE
000197D0                            ; ===========================================================================
000197D0                            
000197D0                            loc_189EE:
000197D0 6100 EEDE                  		bsr.w	BossMove
000197D4 3168 0038 000C             		move.w	$38(a0),$C(a0)
000197DA 3168 0030 0008             		move.w	$30(a0),8(a0)
000197E0                            
000197E0                            loc_189FE:
000197E0 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000197E6 6400                       		bcc.s	locret_18A44
000197E8 4A28 0022                  		tst.b	$22(a0)
000197EC 6B00                       		bmi.s	loc_18A46
000197EE 4A28 0020                  		tst.b	$20(a0)
000197F2 6600                       		bne.s	locret_18A44
000197F4 4A28 003E                  		tst.b	$3E(a0)
000197F8 6600                       		bne.s	loc_18A28
000197FA 117C 0020 003E             		move.b	#$20,$3E(a0)
00019800 303C 00AC                  		move.w	#$AC,d0
00019804 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001980A                            
0001980A                            loc_18A28:
0001980A 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001980E 7000                       		moveq	#0,d0
00019810 4A51                       		tst.w	(a1)
00019812 6600                       		bne.s	loc_18A36
00019814 303C 0EEE                  		move.w	#$EEE,d0
00019818                            
00019818                            loc_18A36:
00019818 3280                       		move.w	d0,(a1)
0001981A 5328 003E                  		subq.b	#1,$3E(a0)
0001981E 6600                       		bne.s	locret_18A44
00019820 117C 000F 0020             		move.b	#$F,$20(a0)
00019826                            
00019826                            locret_18A44:
00019826 4E75                       		rts	
00019828                            ; ===========================================================================
00019828                            
00019828                            loc_18A46:
00019828 7064                       		moveq	#100,d0
0001982A 6100 0000                  		bsr.w	AddPoints
0001982E 117C 0006 0025             		move.b	#6,$25(a0)
00019834 117C 0078 003C             		move.b	#$78,$3C(a0)
0001983A 4268 0010                  		clr.w	$10(a0)
0001983E 4E75                       		rts	
00019840                            ; ===========================================================================
00019840                            
00019840                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019840 3028 0030                  		move.w	$30(a0),d0
00019844 317C 0200 0010             		move.w	#$200,$10(a0)
0001984A 0828 0000 0022             		btst	#0,$22(a0)
00019850 6600                       		bne.s	loc_18A7C
00019852 4468 0010                  		neg.w	$10(a0)
00019856 0C40 2008                  		cmpi.w	#$2008,d0
0001985A 6E00                       		bgt.s	loc_18A88
0001985C 6000                       		bra.s	loc_18A82
0001985E                            ; ===========================================================================
0001985E                            
0001985E                            loc_18A7C:
0001985E 0C40 2138                  		cmpi.w	#$2138,d0
00019862 6D00                       		blt.s	loc_18A88
00019864                            
00019864                            loc_18A82:
00019864 0868 0000 0022             		bchg	#0,$22(a0)
0001986A                            
0001986A                            loc_18A88:
0001986A 3028 0008                  		move.w	8(a0),d0
0001986E 72FF                       		moveq	#-1,d1
00019870 7402                       		moveq	#2,d2
00019872 45E8 002A                  		lea	$2A(a0),a2
00019876 7828                       		moveq	#$28,d4
00019878 4A68 0010                  		tst.w	$10(a0)
0001987C 6A00                       		bpl.s	loc_18A9E
0001987E 4444                       		neg.w	d4
00019880                            
00019880                            loc_18A9E:
00019880 321A                       		move.w	(a2)+,d1
00019882 2641                       		movea.l	d1,a3
00019884 082B 0003 0022             		btst	#3,$22(a3)
0001988A 6600                       		bne.s	loc_18AB4
0001988C 362B 0008                  		move.w	8(a3),d3
00019890 D644                       		add.w	d4,d3
00019892 9640                       		sub.w	d0,d3
00019894 6700                       		beq.s	loc_18AC0
00019896                            
00019896                            loc_18AB4:
00019896 51CA FFE8                  		dbf	d2,loc_18A9E
0001989A                            
0001989A 1142 0028                  		move.b	d2,$28(a0)
0001989E 6000 FF0C                  		bra.w	loc_189CA
000198A2                            ; ===========================================================================
000198A2                            
000198A2                            loc_18AC0:
000198A2 1142 0028                  		move.b	d2,$28(a0)
000198A6 5428 0025                  		addq.b	#2,$25(a0)
000198AA 117C 0028 003C             		move.b	#$28,$3C(a0)
000198B0 6000 FEFA                  		bra.w	loc_189CA
000198B4                            ; ===========================================================================
000198B4                            
000198B4                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000198B4 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000198BA 6600                       		bne.s	loc_18B36
000198BC 70FF                       		moveq	#-1,d0
000198BE 1028 0028                  		move.b	$28(a0),d0
000198C2 4880                       		ext.w	d0
000198C4 6B00                       		bmi.s	loc_18B40
000198C6 5540                       		subq.w	#2,d0
000198C8 4440                       		neg.w	d0
000198CA D040                       		add.w	d0,d0
000198CC 43E8 002A                  		lea	$2A(a0),a1
000198D0 3031 0000                  		move.w	(a1,d0.w),d0
000198D4 2440                       		movea.l	d0,a2
000198D6 43F8 D040                  		lea	($FFFFD040).w,a1
000198DA 723E                       		moveq	#$3E,d1
000198DC                            
000198DC                            loc_18AFA:
000198DC B0A9 003C                  		cmp.l	$3C(a1),d0
000198E0 6700                       		beq.s	loc_18B40
000198E2 D2FC 0040                  		adda.w	#$40,a1
000198E6 51C9 FFF4                  		dbf	d1,loc_18AFA
000198EA                            
000198EA 2F08                       		move.l	a0,-(sp)
000198EC 41D2                       		lea	(a2),a0
000198EE 4EB9 0000 E744             		jsr	SingleObjLoad2
000198F4 205F                       		movea.l	(sp)+,a0
000198F6 6600                       		bne.s	loc_18B40
000198F8 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
000198FC 3368 0008 0008             		move.w	8(a0),8(a1)
00019902 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019908 0669 0020 000C             		addi.w	#$20,$C(a1)
0001990E 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019914 234A 003C                  		move.l	a2,$3C(a1)
00019918                            
00019918                            loc_18B36:
00019918 5328 003C                  		subq.b	#1,$3C(a0)
0001991C 6700                       		beq.s	loc_18B40
0001991E 6000 FEC0                  		bra.w	loc_189FE
00019922                            ; ===========================================================================
00019922                            
00019922                            loc_18B40:
00019922 5528 0025                  		subq.b	#2,$25(a0)
00019926 6000 FE84                  		bra.w	loc_189CA
0001992A                            ; ===========================================================================
0001992A                            
0001992A                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001992A 5328 003C                  		subq.b	#1,$3C(a0)
0001992E 6B00                       		bmi.s	loc_18B52
00019930 6000 ED3C                  		bra.w	BossDefeated
00019934                            ; ===========================================================================
00019934                            
00019934                            loc_18B52:
00019934 5428 0025                  		addq.b	#2,$25(a0)
00019938 4268 0012                  		clr.w	$12(a0)
0001993C 08E8 0000 0022             		bset	#0,$22(a0)
00019942 08A8 0007 0022             		bclr	#7,$22(a0)
00019948 4268 0010                  		clr.w	$10(a0)
0001994C 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019952 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019956 6600                       		bne.s	loc_18B7C
00019958 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001995E                            
0001995E                            loc_18B7C:
0001995E 6000 FE80                  		bra.w	loc_189FE
00019962                            ; ===========================================================================
00019962                            
00019962                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019962 5228 003C                  		addq.b	#1,$3C(a0)
00019966 6700                       		beq.s	loc_18B90
00019968 6A00                       		bpl.s	loc_18B96
0001996A 0668 0018 0012             		addi.w	#$18,$12(a0)
00019970 6000                       		bra.s	loc_18BC2
00019972                            ; ===========================================================================
00019972                            
00019972                            loc_18B90:
00019972 4268 0012                  		clr.w	$12(a0)
00019976 6000                       		bra.s	loc_18BC2
00019978                            ; ===========================================================================
00019978                            
00019978                            loc_18B96:
00019978 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001997E 6500                       		bcs.s	loc_18BAE
00019980 6700                       		beq.s	loc_18BB4
00019982 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019988 6500                       		bcs.s	loc_18BC2
0001998A 5428 0025                  		addq.b	#2,$25(a0)
0001998E 6000                       		bra.s	loc_18BC2
00019990                            ; ===========================================================================
00019990                            
00019990                            loc_18BAE:
00019990 5168 0012                  		subq.w	#8,$12(a0)
00019994 6000                       		bra.s	loc_18BC2
00019996                            ; ===========================================================================
00019996                            
00019996                            loc_18BB4:
00019996 4268 0012                  		clr.w	$12(a0)
0001999A 303C 0084                  		move.w	#$84,d0
0001999E 4EB9 0000 15E6             		jsr	(PlaySound).l	; play SLZ music
000199A4                            
000199A4                            loc_18BC2:
000199A4 6000 FE2A                  		bra.w	loc_189EE
000199A8                            ; ===========================================================================
000199A8                            
000199A8                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000199A8 317C 0400 0010             		move.w	#$400,$10(a0)
000199AE 317C FFC0 0012             		move.w	#-$40,$12(a0)
000199B4 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000199BA 6400                       		bcc.s	loc_18BE0
000199BC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000199C0 6000                       		bra.s	loc_18BE8
000199C2                            ; ===========================================================================
000199C2                            
000199C2                            loc_18BE0:
000199C2 4A28 0001                  		tst.b	1(a0)
000199C6 6A00 FCCE                  		bpl.w	Obj7A_Delete
000199CA                            
000199CA                            loc_18BE8:
000199CA 6100 ECE4                  		bsr.w	BossMove
000199CE 6000 FDDC                  		bra.w	loc_189CA
000199D2                            ; ===========================================================================
000199D2                            
000199D2                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000199D2 7000                       		moveq	#0,d0
000199D4 7201                       		moveq	#1,d1
000199D6 2268 0034                  		movea.l	$34(a0),a1
000199DA 1029 0025                  		move.b	$25(a1),d0
000199DE 0C00 0006                  		cmpi.b	#6,d0
000199E2 6B00                       		bmi.s	loc_18C06
000199E4 720A                       		moveq	#$A,d1
000199E6 6000                       		bra.s	loc_18C1A
000199E8                            ; ===========================================================================
000199E8                            
000199E8                            loc_18C06:
000199E8 4A29 0020                  		tst.b	$20(a1)
000199EC 6600                       		bne.s	loc_18C10
000199EE 7205                       		moveq	#5,d1
000199F0 6000                       		bra.s	loc_18C1A
000199F2                            ; ===========================================================================
000199F2                            
000199F2                            loc_18C10:
000199F2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000199F8 6500                       		bcs.s	loc_18C1A
000199FA 7204                       		moveq	#4,d1
000199FC                            
000199FC                            loc_18C1A:
000199FC 1141 001C                  		move.b	d1,$1C(a0)
00019A00 0C00 000A                  		cmpi.b	#$A,d0
00019A04 6600                       		bne.s	loc_18C32
00019A06 117C 0006 001C             		move.b	#6,$1C(a0)
00019A0C 4A28 0001                  		tst.b	1(a0)
00019A10 6A00 FC84                  		bpl.w	Obj7A_Delete
00019A14                            
00019A14                            loc_18C32:
00019A14 6000                       		bra.s	loc_18C6C
00019A16                            ; ===========================================================================
00019A16                            
00019A16                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019A16 117C 0008 001C             		move.b	#8,$1C(a0)
00019A1C 2268 0034                  		movea.l	$34(a0),a1
00019A20 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019A26 6600                       		bne.s	loc_18C56
00019A28 4A28 0001                  		tst.b	1(a0)
00019A2C 6A00 FC68                  		bpl.w	Obj7A_Delete
00019A30 117C 000B 001C             		move.b	#$B,$1C(a0)
00019A36 6000                       		bra.s	loc_18C6C
00019A38                            ; ===========================================================================
00019A38                            
00019A38                            loc_18C56:
00019A38 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019A3E 6E00                       		bgt.s	loc_18C6C
00019A40 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019A46 6D00                       		blt.s	loc_18C6C
00019A48 117C 0007 001C             		move.b	#7,$1C(a0)
00019A4E                            
00019A4E                            loc_18C6C:
00019A4E 43F9 0001 8AF2             		lea	(Ani_Eggman).l,a1
00019A54 4EB9 0000 B300             		jsr	AnimateSprite
00019A5A                            
00019A5A                            loc_18C78:
00019A5A 2268 0034                  		movea.l	$34(a0),a1
00019A5E 3169 0008 0008             		move.w	8(a1),8(a0)
00019A64 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019A6A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019A70 7003                       		moveq	#3,d0
00019A72 C028 0022                  		and.b	$22(a0),d0
00019A76 0228 00FC 0001             		andi.b	#-4,1(a0)
00019A7C 8128 0001                  		or.b	d0,1(a0)
00019A80 4EF9 0000 E2A8             		jmp	DisplaySprite
00019A86                            ; ===========================================================================
00019A86                            
00019A86                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019A86 2268 0034                  		movea.l	$34(a0),a1
00019A8A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019A90 6600                       		bne.s	loc_18CB8
00019A92 4A28 0001                  		tst.b	1(a0)
00019A96 6A00 FBFE                  		bpl.w	Obj7A_Delete
00019A9A                            
00019A9A                            loc_18CB8:
00019A9A 217C 0001 8C1E 0004        		move.l	#Map_BossItems,4(a0)
00019AA2 317C 246C 0002             		move.w	#$246C,2(a0)
00019AA8 117C 0003 001A             		move.b	#3,$1A(a0)
00019AAE 60AA                       		bra.s	loc_18C78
00019AB0                            ; ===========================================================================
00019AB0                            ; ---------------------------------------------------------------------------
00019AB0                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00019AB0                            ; ---------------------------------------------------------------------------
00019AB0                            
00019AB0                            Obj7B:					; XREF: Obj_Index
00019AB0 7000                       		moveq	#0,d0
00019AB2 1028 0024                  		move.b	$24(a0),d0
00019AB6 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019ABA 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00019ABE 3028 0030                  		move.w	$30(a0),d0
00019AC2 0240 FF80                  		andi.w	#$FF80,d0
00019AC6 3238 F700                  		move.w	($FFFFF700).w,d1
00019ACA 0441 0080                  		subi.w	#$80,d1
00019ACE 0241 FF80                  		andi.w	#$FF80,d1
00019AD2 9041                       		sub.w	d1,d0
00019AD4 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019AD8 0C40 0280                  		cmpi.w	#$280,d0
00019ADC 6200 FBB8                  		bhi.w	Obj7A_Delete
00019AE0 4EF9 0000 E2A8             		jmp	DisplaySprite
00019AE6                            ; ===========================================================================
00019AE6 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019AE8 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019AEA 0000                       		dc.w loc_18DC6-Obj7B_Index
00019AEC 0000                       		dc.w loc_18EAA-Obj7B_Index
00019AEE 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019AF0 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019AF2                            ; ===========================================================================
00019AF2                            
00019AF2                            Obj7B_Main:				; XREF: Obj7B_Index
00019AF2 217C 0001 264A 0004        		move.l	#Map_obj5Ea,4(a0)
00019AFA 317C 0518 0002             		move.w	#$518,2(a0)
00019B00 117C 0001 001A             		move.b	#1,$1A(a0)
00019B06 0028 0004 0001             		ori.b	#4,1(a0)
00019B0C 117C 0004 0018             		move.b	#4,$18(a0)
00019B12 117C 008B 0020             		move.b	#$8B,$20(a0)
00019B18 117C 000C 0019             		move.b	#$C,$19(a0)
00019B1E 2268 003C                  		movea.l	$3C(a0),a1
00019B22 3169 0008 0030             		move.w	8(a1),$30(a0)
00019B28 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019B2E 08E8 0000 0022             		bset	#0,$22(a0)
00019B34 3028 0008                  		move.w	8(a0),d0
00019B38 B069 0008                  		cmp.w	8(a1),d0
00019B3C 6E00                       		bgt.s	loc_18D68
00019B3E 08A8 0000 0022             		bclr	#0,$22(a0)
00019B44 117C 0002 003A             		move.b	#2,$3A(a0)
00019B4A                            
00019B4A                            loc_18D68:
00019B4A 5428 0024                  		addq.b	#2,$24(a0)
00019B4E                            
00019B4E                            Obj7B_Fall:				; XREF: Obj7B_Index
00019B4E 4EB9 0000 E20C             		jsr	ObjectFall
00019B54 2268 003C                  		movea.l	$3C(a0),a1
00019B58 45F9 0000 0000             		lea	(word_19018).l,a2
00019B5E 7000                       		moveq	#0,d0
00019B60 1029 001A                  		move.b	$1A(a1),d0
00019B64 3228 0008                  		move.w	8(a0),d1
00019B68 9268 0030                  		sub.w	$30(a0),d1
00019B6C 6400                       		bcc.s	loc_18D8E
00019B6E 5440                       		addq.w	#2,d0
00019B70                            
00019B70                            loc_18D8E:
00019B70 D040                       		add.w	d0,d0
00019B72 3228 0034                  		move.w	$34(a0),d1
00019B76 D272 0000                  		add.w	(a2,d0.w),d1
00019B7A B268 000C                  		cmp.w	$C(a0),d1
00019B7E 6E00                       		bgt.s	locret_18DC4
00019B80 2268 003C                  		movea.l	$3C(a0),a1
00019B84 7202                       		moveq	#2,d1
00019B86 0828 0000 0022             		btst	#0,$22(a0)
00019B8C 6700                       		beq.s	loc_18DAE
00019B8E 7200                       		moveq	#0,d1
00019B90                            
00019B90                            loc_18DAE:
00019B90 317C 00F0 0028             		move.w	#$F0,$28(a0)
00019B96 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019B9C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019BA2 6000 0000                  		bra.w	loc_18FA2
00019BA6                            ; ===========================================================================
00019BA6                            
00019BA6                            locret_18DC4:
00019BA6 4E75                       		rts	
00019BA8                            ; ===========================================================================
00019BA8                            
00019BA8                            loc_18DC6:				; XREF: Obj7B_Index
00019BA8 2268 003C                  		movea.l	$3C(a0),a1
00019BAC 7000                       		moveq	#0,d0
00019BAE 1028 003A                  		move.b	$3A(a0),d0
00019BB2 9029 003A                  		sub.b	$3A(a1),d0
00019BB6 6700                       		beq.s	loc_18E2A
00019BB8 6400                       		bcc.s	loc_18DDA
00019BBA 4400                       		neg.b	d0
00019BBC                            
00019BBC                            loc_18DDA:
00019BBC 323C F7E8                  		move.w	#-$818,d1
00019BC0 343C FEEC                  		move.w	#-$114,d2
00019BC4 0C00 0001                  		cmpi.b	#1,d0
00019BC8 6700                       		beq.s	loc_18E00
00019BCA 323C F6A0                  		move.w	#-$960,d1
00019BCE 343C FF0C                  		move.w	#-$F4,d2
00019BD2 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00019BD8 6D00                       		blt.s	loc_18E00
00019BDA 323C F5E0                  		move.w	#-$A20,d1
00019BDE 343C FF80                  		move.w	#-$80,d2
00019BE2                            
00019BE2                            loc_18E00:
00019BE2 3141 0012                  		move.w	d1,$12(a0)
00019BE6 3142 0010                  		move.w	d2,$10(a0)
00019BEA 3028 0008                  		move.w	8(a0),d0
00019BEE 9068 0030                  		sub.w	$30(a0),d0
00019BF2 6400                       		bcc.s	loc_18E16
00019BF4 4468 0010                  		neg.w	$10(a0)
00019BF8                            
00019BF8                            loc_18E16:
00019BF8 117C 0001 001A             		move.b	#1,$1A(a0)
00019BFE 317C 0020 0028             		move.w	#$20,$28(a0)
00019C04 5428 0024                  		addq.b	#2,$24(a0)
00019C08 6000 0000                  		bra.w	loc_18EAA
00019C0C                            ; ===========================================================================
00019C0C                            
00019C0C                            loc_18E2A:				; XREF: loc_18DC6
00019C0C 45F9 0000 0000             		lea	(word_19018).l,a2
00019C12 7000                       		moveq	#0,d0
00019C14 1029 001A                  		move.b	$1A(a1),d0
00019C18 343C 0028                  		move.w	#$28,d2
00019C1C 3228 0008                  		move.w	8(a0),d1
00019C20 9268 0030                  		sub.w	$30(a0),d1
00019C24 6400                       		bcc.s	loc_18E48
00019C26 4442                       		neg.w	d2
00019C28 5440                       		addq.w	#2,d0
00019C2A                            
00019C2A                            loc_18E48:
00019C2A D040                       		add.w	d0,d0
00019C2C 3228 0034                  		move.w	$34(a0),d1
00019C30 D272 0000                  		add.w	(a2,d0.w),d1
00019C34 3141 000C                  		move.w	d1,$C(a0)
00019C38 D468 0030                  		add.w	$30(a0),d2
00019C3C 3142 0008                  		move.w	d2,8(a0)
00019C40 4268 000E                  		clr.w	$E(a0)
00019C44 4268 000A                  		clr.w	$A(a0)
00019C48 5368 0028                  		subq.w	#1,$28(a0)
00019C4C 6600                       		bne.s	loc_18E7A
00019C4E 317C 0020 0028             		move.w	#$20,$28(a0)
00019C54 117C 0008 0024             		move.b	#8,$24(a0)
00019C5A 4E75                       		rts	
00019C5C                            ; ===========================================================================
00019C5C                            
00019C5C                            loc_18E7A:
00019C5C 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019C62 6600                       		bne.s	loc_18E88
00019C64 117C 0005 001F             		move.b	#5,$1F(a0)
00019C6A                            
00019C6A                            loc_18E88:
00019C6A 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019C70 6600                       		bne.s	loc_18E96
00019C72 117C 0002 001F             		move.b	#2,$1F(a0)
00019C78                            
00019C78                            loc_18E96:
00019C78 5328 001E                  		subq.b	#1,$1E(a0)
00019C7C 6E00                       		bgt.s	locret_18EA8
00019C7E 0868 0000 001A             		bchg	#0,$1A(a0)
00019C84 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019C8A                            
00019C8A                            locret_18EA8:
00019C8A 4E75                       		rts	
00019C8C                            ; ===========================================================================
00019C8C                            
00019C8C                            loc_18EAA:				; XREF: Obj7B_Index
00019C8C 43F8 D040                  		lea	($FFFFD040).w,a1
00019C90 707A                       		moveq	#$7A,d0
00019C92 7240                       		moveq	#$40,d1
00019C94 743E                       		moveq	#$3E,d2
00019C96                            
00019C96                            loc_18EB4:
00019C96 B011                       		cmp.b	(a1),d0
00019C98 6700                       		beq.s	loc_18EC0
00019C9A D2C1                       		adda.w	d1,a1
00019C9C 51CA FFF8                  		dbf	d2,loc_18EB4
00019CA0                            
00019CA0 6000                       		bra.s	loc_18F38
00019CA2                            ; ===========================================================================
00019CA2                            
00019CA2                            loc_18EC0:
00019CA2 3029 0008                  		move.w	8(a1),d0
00019CA6 3229 000C                  		move.w	$C(a1),d1
00019CAA 3428 0008                  		move.w	8(a0),d2
00019CAE 3628 000C                  		move.w	$C(a0),d3
00019CB2 45FA 0000                  		lea	byte_19022(pc),a2
00019CB6 47FA 0000                  		lea	byte_19026(pc),a3
00019CBA 181A                       		move.b	(a2)+,d4
00019CBC 4884                       		ext.w	d4
00019CBE D044                       		add.w	d4,d0
00019CC0 181B                       		move.b	(a3)+,d4
00019CC2 4884                       		ext.w	d4
00019CC4 D444                       		add.w	d4,d2
00019CC6 B440                       		cmp.w	d0,d2
00019CC8 6500                       		bcs.s	loc_18F38
00019CCA 181A                       		move.b	(a2)+,d4
00019CCC 4884                       		ext.w	d4
00019CCE D044                       		add.w	d4,d0
00019CD0 181B                       		move.b	(a3)+,d4
00019CD2 4884                       		ext.w	d4
00019CD4 D444                       		add.w	d4,d2
00019CD6 B042                       		cmp.w	d2,d0
00019CD8 6500                       		bcs.s	loc_18F38
00019CDA 181A                       		move.b	(a2)+,d4
00019CDC 4884                       		ext.w	d4
00019CDE D244                       		add.w	d4,d1
00019CE0 181B                       		move.b	(a3)+,d4
00019CE2 4884                       		ext.w	d4
00019CE4 D644                       		add.w	d4,d3
00019CE6 B641                       		cmp.w	d1,d3
00019CE8 6500                       		bcs.s	loc_18F38
00019CEA 181A                       		move.b	(a2)+,d4
00019CEC 4884                       		ext.w	d4
00019CEE D244                       		add.w	d4,d1
00019CF0 181B                       		move.b	(a3)+,d4
00019CF2 4884                       		ext.w	d4
00019CF4 D644                       		add.w	d4,d3
00019CF6 B243                       		cmp.w	d3,d1
00019CF8 6500                       		bcs.s	loc_18F38
00019CFA 5428 0024                  		addq.b	#2,$24(a0)
00019CFE 4268 0028                  		clr.w	$28(a0)
00019D02 4229 0020                  		clr.b	$20(a1)
00019D06 5329 0021                  		subq.b	#1,$21(a1)
00019D0A 6600                       		bne.s	loc_18F38
00019D0C 08E9 0007 0022             		bset	#7,$22(a1)
00019D12 4268 0010                  		clr.w	$10(a0)
00019D16 4268 0012                  		clr.w	$12(a0)
00019D1A                            
00019D1A                            loc_18F38:
00019D1A 4A68 0012                  		tst.w	$12(a0)
00019D1E 6A00                       		bpl.s	loc_18F5C
00019D20 4EB9 0000 E20C             		jsr	ObjectFall
00019D26 3028 0034                  		move.w	$34(a0),d0
00019D2A 0440 002F                  		subi.w	#$2F,d0
00019D2E B068 000C                  		cmp.w	$C(a0),d0
00019D32 6E00                       		bgt.s	loc_18F58
00019D34 4EB9 0000 E20C             		jsr	ObjectFall
00019D3A                            
00019D3A                            loc_18F58:
00019D3A 6000 FF20                  		bra.w	loc_18E7A
00019D3E                            ; ===========================================================================
00019D3E                            
00019D3E                            loc_18F5C:
00019D3E 4EB9 0000 E20C             		jsr	ObjectFall
00019D44 2268 003C                  		movea.l	$3C(a0),a1
00019D48 45F9 0000 0000             		lea	(word_19018).l,a2
00019D4E 7000                       		moveq	#0,d0
00019D50 1029 001A                  		move.b	$1A(a1),d0
00019D54 3228 0008                  		move.w	8(a0),d1
00019D58 9268 0030                  		sub.w	$30(a0),d1
00019D5C 6400                       		bcc.s	loc_18F7E
00019D5E 5440                       		addq.w	#2,d0
00019D60                            
00019D60                            loc_18F7E:
00019D60 D040                       		add.w	d0,d0
00019D62 3228 0034                  		move.w	$34(a0),d1
00019D66 D272 0000                  		add.w	(a2,d0.w),d1
00019D6A B268 000C                  		cmp.w	$C(a0),d1
00019D6E 6ECA                       		bgt.s	loc_18F58
00019D70 2268 003C                  		movea.l	$3C(a0),a1
00019D74 7202                       		moveq	#2,d1
00019D76 4A68 0010                  		tst.w	$10(a0)
00019D7A 6B00                       		bmi.s	loc_18F9C
00019D7C 7200                       		moveq	#0,d1
00019D7E                            
00019D7E                            loc_18F9C:
00019D7E 317C 0000 0028             		move.w	#0,$28(a0)
00019D84                            
00019D84                            loc_18FA2:
00019D84 1341 003A                  		move.b	d1,$3A(a1)
00019D88 1141 003A                  		move.b	d1,$3A(a0)
00019D8C B229 001A                  		cmp.b	$1A(a1),d1
00019D90 6700                       		beq.s	loc_19008
00019D92 08A9 0003 0022             		bclr	#3,$22(a1)
00019D98 6700                       		beq.s	loc_19008
00019D9A 4229 0025                  		clr.b	$25(a1)
00019D9E 137C 0002 0024             		move.b	#2,$24(a1)
00019DA4 45F8 D000                  		lea	($FFFFD000).w,a2
00019DA8 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019DAE 446A 0012                  		neg.w	$12(a2)
00019DB2 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019DB8 6600                       		bne.s	loc_18FDC
00019DBA E0EA 0012                  		asr	$12(a2)
00019DBE                            
00019DBE                            loc_18FDC:
00019DBE 08EA 0001 0022             		bset	#1,$22(a2)
00019DC4 08AA 0003 0022             		bclr	#3,$22(a2)
00019DCA 422A 003C                  		clr.b	$3C(a2)
00019DCE 2F08                       		move.l	a0,-(sp)
00019DD0 41D2                       		lea	(a2),a0
00019DD2 4EBA A2EC                  		jsr	Obj01_ChkRoll
00019DD6 205F                       		movea.l	(sp)+,a0
00019DD8 157C 0002 0024             		move.b	#2,$24(a2)
00019DDE 303C 00CC                  		move.w	#$CC,d0
00019DE2 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019DE8                            
00019DE8                            loc_19008:
00019DE8 4268 0010                  		clr.w	$10(a0)
00019DEC 4268 0012                  		clr.w	$12(a0)
00019DF0 5428 0024                  		addq.b	#2,$24(a0)
00019DF4 6000 FE66                  		bra.w	loc_18E7A
00019DF8                            ; ===========================================================================
00019DF8 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019E02                            		even
00019E02 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019E06                            		even
00019E06 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019E0A                            		even
00019E0A                            ; ===========================================================================
00019E0A                            
00019E0A                            Obj7B_Explode:				; XREF: Obj7B_Index
00019E0A 10BC 003F                  		move.b	#$3F,(a0)
00019E0E 4228 0024                  		clr.b	$24(a0)
00019E12 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019E18 6700                       		beq.s	Obj7B_MakeFrag
00019E1A 4E75                       		rts	
00019E1C                            ; ===========================================================================
00019E1C                            
00019E1C                            Obj7B_MakeFrag:
00019E1C 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019E22 7203                       		moveq	#3,d1
00019E24 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019E28                            
00019E28                            Obj7B_Loop:
00019E28 4EB9 0000 E72E             		jsr	SingleObjLoad
00019E2E 6600                       		bne.s	loc_1909A
00019E30 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019E34 137C 000A 0024             		move.b	#$A,$24(a1)
00019E3A 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019E42 137C 0003 0018             		move.b	#3,$18(a1)
00019E48 337C 0518 0002             		move.w	#$518,2(a1)
00019E4E 3368 0008 0008             		move.w	8(a0),8(a1)
00019E54 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019E5A 335A 0010                  		move.w	(a2)+,$10(a1)
00019E5E 335A 0012                  		move.w	(a2)+,$12(a1)
00019E62 137C 0098 0020             		move.b	#$98,$20(a1)
00019E68 0029 0004 0001             		ori.b	#4,1(a1)
00019E6E 08E9 0007 0001             		bset	#7,1(a1)
00019E74 137C 000C 0019             		move.b	#$C,$19(a1)
00019E7A                            
00019E7A                            loc_1909A:
00019E7A 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019E7E                            
00019E7E 4E75                       		rts	
00019E80                            ; ===========================================================================
00019E80 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019E84 FF60 FDC0                  		dc.w $FF60, $FDC0
00019E88 0100 FCC0                  		dc.w $100, $FCC0
00019E8C 00A0 FDC0                  		dc.w $A0, $FDC0
00019E90                            ; ===========================================================================
00019E90                            
00019E90                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019E90 4EB9 0000 E26E             		jsr	SpeedToPos
00019E96 3168 0008 0030             		move.w	8(a0),$30(a0)
00019E9C 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019EA2 0668 0018 0012             		addi.w	#$18,$12(a0)
00019EA8 7004                       		moveq	#4,d0
00019EAA C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019EAE E448                       		lsr.w	#2,d0
00019EB0 1140 001A                  		move.b	d0,$1A(a0)
00019EB4 4A28 0001                  		tst.b	1(a0)
00019EB8 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019EBC 4E75                       		rts	
00019EBE                            ; ===========================================================================
00019EBE                            ; ---------------------------------------------------------------------------
00019EBE                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019EBE                            ; ---------------------------------------------------------------------------
00019EBE                            Map_obj7B:
00019EBE                            	include "_maps\obj7B.asm"
00019EBE                            ; ---------------------------------------------------------------------------
00019EBE                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019EBE                            ; ---------------------------------------------------------------------------
00019EBE 0000                       		dc.w byte_190E2-Map_obj7B
00019EC0 0000                       		dc.w byte_190E8-Map_obj7B
00019EC2 01                         byte_190E2:	dc.b 1
00019EC3 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019EC8 01                         byte_190E8:	dc.b 1
00019EC9 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019ECE                            		even
00019ECE                            		even
00019ECE                            
00019ECE                            ; ===========================================================================
00019ECE                            ; ---------------------------------------------------------------------------
00019ECE                            ; Object 75 - Eggman (SYZ)
00019ECE                            ; ---------------------------------------------------------------------------
00019ECE                            
00019ECE                            Obj75:					; XREF: Obj_Index
00019ECE 7000                       		moveq	#0,d0
00019ED0 1028 0024                  		move.b	$24(a0),d0
00019ED4 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019ED8 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019EDC                            ; ===========================================================================
00019EDC 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019EDE 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019EE0 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019EE2 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019EE4 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019EE6                            
00019EE6 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019EE9 0401 05                    		dc.b 4,	1, 5
00019EEC 0607 05                    		dc.b 6,	7, 5
00019EEF 0800 05                    		dc.b 8,	0, 5
00019EF2                            ; ===========================================================================
00019EF2                            
00019EF2                            Obj75_Main:				; XREF: Obj75_Index
00019EF2 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019EF8 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019EFE 3168 0008 0030             		move.w	8(a0),$30(a0)
00019F04 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019F0A 117C 000F 0020             		move.b	#$F,$20(a0)
00019F10 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019F16 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019F1A 2248                       		movea.l	a0,a1
00019F1C 7203                       		moveq	#3,d1
00019F1E 6000                       		bra.s	Obj75_LoadBoss
00019F20                            ; ===========================================================================
00019F20                            
00019F20                            Obj75_Loop:
00019F20 4EB9 0000 E744             		jsr	SingleObjLoad2
00019F26 6600                       		bne.s	Obj75_ShipMain
00019F28 12BC 0075                  		move.b	#$75,(a1)
00019F2C 3368 0008 0008             		move.w	8(a0),8(a1)
00019F32 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019F38                            
00019F38                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019F38 08A8 0000 0022             		bclr	#0,$22(a0)
00019F3E 4229 0025                  		clr.b	$25(a1)
00019F42 135A 0024                  		move.b	(a2)+,$24(a1)
00019F46 135A 001C                  		move.b	(a2)+,$1C(a1)
00019F4A 135A 0018                  		move.b	(a2)+,$18(a1)
00019F4E 237C 0001 8B56 0004        		move.l	#Map_Eggman,4(a1)
00019F56 337C 0400 0002             		move.w	#$400,2(a1)
00019F5C 137C 0004 0001             		move.b	#4,1(a1)
00019F62 137C 0020 0019             		move.b	#$20,$19(a1)
00019F68 2348 0034                  		move.l	a0,$34(a1)
00019F6C 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019F70                            
00019F70                            Obj75_ShipMain:				; XREF: Obj75_Index
00019F70 7000                       		moveq	#0,d0
00019F72 1028 0025                  		move.b	$25(a0),d0
00019F76 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019F7A 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019F7E 43F9 0001 8AF2             		lea	(Ani_Eggman).l,a1
00019F84 4EB9 0000 B300             		jsr	AnimateSprite
00019F8A 7003                       		moveq	#3,d0
00019F8C C028 0022                  		and.b	$22(a0),d0
00019F90 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019F96 8128 0001                  		or.b	d0,1(a0)
00019F9A 4EF9 0000 E2A8             		jmp	DisplaySprite
00019FA0                            ; ===========================================================================
00019FA0 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019FA4 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019FA8 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019FAC                            ; ===========================================================================
00019FAC                            
00019FAC                            loc_191CC:				; XREF: Obj75_ShipIndex
00019FAC 317C FF00 0010             		move.w	#-$100,$10(a0)
00019FB2 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019FB8 6400                       		bcc.s	loc_191DE
00019FBA 5428 0025                  		addq.b	#2,$25(a0)
00019FBE                            
00019FBE                            loc_191DE:
00019FBE 1028 003F                  		move.b	$3F(a0),d0
00019FC2 5428 003F                  		addq.b	#2,$3F(a0)
00019FC6 4EB9 0000 2D86             		jsr	(CalcSine).l
00019FCC E440                       		asr.w	#2,d0
00019FCE 3140 0012                  		move.w	d0,$12(a0)
00019FD2                            
00019FD2                            loc_191F2:
00019FD2 6100 E6DC                  		bsr.w	BossMove
00019FD6 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019FDC 3168 0030 0008             		move.w	$30(a0),8(a0)
00019FE2                            
00019FE2                            loc_19202:
00019FE2 3028 0008                  		move.w	8(a0),d0
00019FE6 0440 2C00                  		subi.w	#$2C00,d0
00019FEA EA48                       		lsr.w	#5,d0
00019FEC 1140 0034                  		move.b	d0,$34(a0)
00019FF0 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019FF6 6400                       		bcc.s	locret_19256
00019FF8 4A28 0022                  		tst.b	$22(a0)
00019FFC 6B00                       		bmi.s	loc_19258
00019FFE 4A28 0020                  		tst.b	$20(a0)
0001A002 6600                       		bne.s	locret_19256
0001A004 4A28 003E                  		tst.b	$3E(a0)
0001A008 6600                       		bne.s	loc_1923A
0001A00A 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A010 303C 00AC                  		move.w	#$AC,d0
0001A014 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A01A                            
0001A01A                            loc_1923A:
0001A01A 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A01E 7000                       		moveq	#0,d0
0001A020 4A51                       		tst.w	(a1)
0001A022 6600                       		bne.s	loc_19248
0001A024 303C 0EEE                  		move.w	#$EEE,d0
0001A028                            
0001A028                            loc_19248:
0001A028 3280                       		move.w	d0,(a1)
0001A02A 5328 003E                  		subq.b	#1,$3E(a0)
0001A02E 6600                       		bne.s	locret_19256
0001A030 117C 000F 0020             		move.b	#$F,$20(a0)
0001A036                            
0001A036                            locret_19256:
0001A036 4E75                       		rts	
0001A038                            ; ===========================================================================
0001A038                            
0001A038                            loc_19258:				; XREF: loc_19202
0001A038 7064                       		moveq	#100,d0
0001A03A 6100 0000                  		bsr.w	AddPoints
0001A03E 117C 0006 0025             		move.b	#6,$25(a0)
0001A044 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A04A 4268 0010                  		clr.w	$10(a0)
0001A04E 4E75                       		rts	
0001A050                            ; ===========================================================================
0001A050                            
0001A050                            loc_19270:				; XREF: Obj75_ShipIndex
0001A050 3028 0030                  		move.w	$30(a0),d0
0001A054 317C 0140 0010             		move.w	#$140,$10(a0)
0001A05A 0828 0000 0022             		btst	#0,$22(a0)
0001A060 6600                       		bne.s	loc_1928E
0001A062 4468 0010                  		neg.w	$10(a0)
0001A066 0C40 2C08                  		cmpi.w	#$2C08,d0
0001A06A 6E00                       		bgt.s	loc_1929E
0001A06C 6000                       		bra.s	loc_19294
0001A06E                            ; ===========================================================================
0001A06E                            
0001A06E                            loc_1928E:
0001A06E 0C40 2D38                  		cmpi.w	#$2D38,d0
0001A072 6D00                       		blt.s	loc_1929E
0001A074                            
0001A074                            loc_19294:
0001A074 0868 0000 0022             		bchg	#0,$22(a0)
0001A07A 4228 003D                  		clr.b	$3D(a0)
0001A07E                            
0001A07E                            loc_1929E:
0001A07E 0440 2C10                  		subi.w	#$2C10,d0
0001A082 0240 001F                  		andi.w	#$1F,d0
0001A086 0440 001F                  		subi.w	#$1F,d0
0001A08A 6A00                       		bpl.s	loc_192AE
0001A08C 4440                       		neg.w	d0
0001A08E                            
0001A08E                            loc_192AE:
0001A08E 5340                       		subq.w	#1,d0
0001A090 6E00                       		bgt.s	loc_192E8
0001A092 4A28 003D                  		tst.b	$3D(a0)
0001A096 6600                       		bne.s	loc_192E8
0001A098 3238 D008                  		move.w	($FFFFD008).w,d1
0001A09C 0441 2C00                  		subi.w	#$2C00,d1
0001A0A0 EA41                       		asr.w	#5,d1
0001A0A2 B228 0034                  		cmp.b	$34(a0),d1
0001A0A6 6600                       		bne.s	loc_192E8
0001A0A8 7000                       		moveq	#0,d0
0001A0AA 1028 0034                  		move.b	$34(a0),d0
0001A0AE EB40                       		asl.w	#5,d0
0001A0B0 0640 2C10                  		addi.w	#$2C10,d0
0001A0B4 3140 0030                  		move.w	d0,$30(a0)
0001A0B8 6100 0000                  		bsr.w	Obj75_FindBlocks
0001A0BC 5428 0025                  		addq.b	#2,$25(a0)
0001A0C0 4268 0028                  		clr.w	$28(a0)
0001A0C4 4268 0010                  		clr.w	$10(a0)
0001A0C8                            
0001A0C8                            loc_192E8:
0001A0C8 6000 FEF4                  		bra.w	loc_191DE
0001A0CC                            ; ===========================================================================
0001A0CC                            
0001A0CC                            loc_192EC:				; XREF: Obj75_ShipIndex
0001A0CC 7000                       		moveq	#0,d0
0001A0CE 1028 0028                  		move.b	$28(a0),d0
0001A0D2 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001A0D6 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001A0DA                            ; ===========================================================================
0001A0DA 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001A0DC 0000                       		dc.w loc_19348-off_192FA
0001A0DE 0000                       		dc.w loc_1938E-off_192FA
0001A0E0 0000                       		dc.w loc_193D0-off_192FA
0001A0E2                            ; ===========================================================================
0001A0E2                            
0001A0E2                            loc_19302:				; XREF: off_192FA
0001A0E2 317C 0180 0012             		move.w	#$180,$12(a0)
0001A0E8 3028 0038                  		move.w	$38(a0),d0
0001A0EC 0C40 0556                  		cmpi.w	#$556,d0
0001A0F0 6500                       		bcs.s	loc_19344
0001A0F2 317C 0556 0038             		move.w	#$556,$38(a0)
0001A0F8 4268 003C                  		clr.w	$3C(a0)
0001A0FC 70FF                       		moveq	#-1,d0
0001A0FE 3028 0036                  		move.w	$36(a0),d0
0001A102 6700                       		beq.s	loc_1933C
0001A104 2240                       		movea.l	d0,a1
0001A106 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A10C 117C 00FF 0029             		move.b	#-1,$29(a0)
0001A112 2348 0034                  		move.l	a0,$34(a1)
0001A116 317C 0032 003C             		move.w	#$32,$3C(a0)
0001A11C                            
0001A11C                            loc_1933C:
0001A11C 4268 0012                  		clr.w	$12(a0)
0001A120 5428 0028                  		addq.b	#2,$28(a0)
0001A124                            
0001A124                            loc_19344:
0001A124 6000 FEAC                  		bra.w	loc_191F2
0001A128                            ; ===========================================================================
0001A128                            
0001A128                            loc_19348:				; XREF: off_192FA
0001A128 5368 003C                  		subq.w	#1,$3C(a0)
0001A12C 6A00                       		bpl.s	loc_19366
0001A12E 5428 0028                  		addq.b	#2,$28(a0)
0001A132 317C F800 0012             		move.w	#-$800,$12(a0)
0001A138 4A68 0036                  		tst.w	$36(a0)
0001A13C 6600                       		bne.s	loc_19362
0001A13E E0E8 0012                  		asr	$12(a0)
0001A142                            
0001A142                            loc_19362:
0001A142 7000                       		moveq	#0,d0
0001A144 6000                       		bra.s	loc_1937C
0001A146                            ; ===========================================================================
0001A146                            
0001A146                            loc_19366:
0001A146 7000                       		moveq	#0,d0
0001A148 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001A14E 6E00                       		bgt.s	loc_1937C
0001A150 7002                       		moveq	#2,d0
0001A152 0828 0001 003D             		btst	#1,$3D(a0)
0001A158 6700                       		beq.s	loc_1937C
0001A15A 4440                       		neg.w	d0
0001A15C                            
0001A15C                            loc_1937C:
0001A15C D068 0038                  		add.w	$38(a0),d0
0001A160 3140 000C                  		move.w	d0,$C(a0)
0001A164 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A16A 6000 FE76                  		bra.w	loc_19202
0001A16E                            ; ===========================================================================
0001A16E                            
0001A16E                            loc_1938E:				; XREF: off_192FA
0001A16E 303C 04DA                  		move.w	#$4DA,d0
0001A172 4A68 0036                  		tst.w	$36(a0)
0001A176 6700                       		beq.s	loc_1939C
0001A178 0440 0018                  		subi.w	#$18,d0
0001A17C                            
0001A17C                            loc_1939C:
0001A17C B068 0038                  		cmp.w	$38(a0),d0
0001A180 6D00                       		blt.s	loc_193BE
0001A182 317C 0008 003C             		move.w	#8,$3C(a0)
0001A188 4A68 0036                  		tst.w	$36(a0)
0001A18C 6700                       		beq.s	loc_193B4
0001A18E 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001A194                            
0001A194                            loc_193B4:
0001A194 5428 0028                  		addq.b	#2,$28(a0)
0001A198 4268 0012                  		clr.w	$12(a0)
0001A19C 6000                       		bra.s	loc_193CC
0001A19E                            ; ===========================================================================
0001A19E                            
0001A19E                            loc_193BE:
0001A19E 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001A1A4 6C00                       		bge.s	loc_193CC
0001A1A6 0668 000C 0012             		addi.w	#$C,$12(a0)
0001A1AC                            
0001A1AC                            loc_193CC:
0001A1AC 6000 FE24                  		bra.w	loc_191F2
0001A1B0                            ; ===========================================================================
0001A1B0                            
0001A1B0                            loc_193D0:				; XREF: off_192FA
0001A1B0 5368 003C                  		subq.w	#1,$3C(a0)
0001A1B4 6E00                       		bgt.s	loc_19406
0001A1B6 6B00                       		bmi.s	loc_193EE
0001A1B8 70FF                       		moveq	#-1,d0
0001A1BA 3028 0036                  		move.w	$36(a0),d0
0001A1BE 6700                       		beq.s	loc_193E8
0001A1C0 2240                       		movea.l	d0,a1
0001A1C2 137C 000A 0029             		move.b	#$A,$29(a1)
0001A1C8                            
0001A1C8                            loc_193E8:
0001A1C8 4268 0036                  		clr.w	$36(a0)
0001A1CC 6000                       		bra.s	loc_19406
0001A1CE                            ; ===========================================================================
0001A1CE                            
0001A1CE                            loc_193EE:
0001A1CE 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001A1D4 6600                       		bne.s	loc_19406
0001A1D6 4228 0029                  		clr.b	$29(a0)
0001A1DA 5528 0025                  		subq.b	#2,$25(a0)
0001A1DE 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001A1E4 6000                       		bra.s	loc_19446
0001A1E6                            ; ===========================================================================
0001A1E6                            
0001A1E6                            loc_19406:
0001A1E6 7001                       		moveq	#1,d0
0001A1E8 4A68 0036                  		tst.w	$36(a0)
0001A1EC 6700                       		beq.s	loc_19410
0001A1EE 7002                       		moveq	#2,d0
0001A1F0                            
0001A1F0                            loc_19410:
0001A1F0 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001A1F6 6700                       		beq.s	loc_19424
0001A1F8 6D00                       		blt.s	loc_1941C
0001A1FA 4440                       		neg.w	d0
0001A1FC                            
0001A1FC                            loc_1941C:
0001A1FC 4A68 0036                  		tst.w	$36(a0)
0001A200 D168 0038                  		add.w	d0,$38(a0)
0001A204                            
0001A204                            loc_19424:
0001A204 7000                       		moveq	#0,d0
0001A206 4A68 0036                  		tst.w	$36(a0)
0001A20A 6700                       		beq.s	loc_19438
0001A20C 7002                       		moveq	#2,d0
0001A20E 0828 0000 003D             		btst	#0,$3D(a0)
0001A214 6700                       		beq.s	loc_19438
0001A216 4440                       		neg.w	d0
0001A218                            
0001A218                            loc_19438:
0001A218 D068 0038                  		add.w	$38(a0),d0
0001A21C 3140 000C                  		move.w	d0,$C(a0)
0001A220 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A226                            
0001A226                            loc_19446:
0001A226 6000 FDBA                  		bra.w	loc_19202
0001A22A                            
0001A22A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A22A                            
0001A22A                            
0001A22A                            Obj75_FindBlocks:			; XREF: loc_192AE
0001A22A 4268 0036                  		clr.w	$36(a0)
0001A22E 43F8 D040                  		lea	($FFFFD040).w,a1
0001A232 703E                       		moveq	#$3E,d0
0001A234 7276                       		moveq	#$76,d1
0001A236 1428 0034                  		move.b	$34(a0),d2
0001A23A                            
0001A23A                            Obj75_FindLoop:
0001A23A B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001A23C 6600                       		bne.s	loc_1946A	; if not, branch
0001A23E B429 0028                  		cmp.b	$28(a1),d2
0001A242 6600                       		bne.s	loc_1946A
0001A244 3149 0036                  		move.w	a1,$36(a0)
0001A248 6000                       		bra.s	locret_19472
0001A24A                            ; ===========================================================================
0001A24A                            
0001A24A                            loc_1946A:
0001A24A 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001A24E 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001A252                            
0001A252                            locret_19472:
0001A252 4E75                       		rts	
0001A254                            ; End of function Obj75_FindBlocks
0001A254                            
0001A254                            ; ===========================================================================
0001A254                            
0001A254                            loc_19474:				; XREF: Obj75_ShipIndex
0001A254 5368 003C                  		subq.w	#1,$3C(a0)
0001A258 6B00                       		bmi.s	loc_1947E
0001A25A 6000 E412                  		bra.w	BossDefeated
0001A25E                            ; ===========================================================================
0001A25E                            
0001A25E                            loc_1947E:
0001A25E 5428 0025                  		addq.b	#2,$25(a0)
0001A262 4268 0012                  		clr.w	$12(a0)
0001A266 08E8 0000 0022             		bset	#0,$22(a0)
0001A26C 08A8 0007 0022             		bclr	#7,$22(a0)
0001A272 4268 0010                  		clr.w	$10(a0)
0001A276 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001A27C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A280 6600                       		bne.s	loc_194A8
0001A282 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A288                            
0001A288                            loc_194A8:
0001A288 6000 FD58                  		bra.w	loc_19202
0001A28C                            ; ===========================================================================
0001A28C                            
0001A28C                            loc_194AC:				; XREF: Obj75_ShipIndex
0001A28C 5268 003C                  		addq.w	#1,$3C(a0)
0001A290 6700                       		beq.s	loc_194BC
0001A292 6A00                       		bpl.s	loc_194C2
0001A294 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A29A 6000                       		bra.s	loc_194EE
0001A29C                            ; ===========================================================================
0001A29C                            
0001A29C                            loc_194BC:
0001A29C 4268 0012                  		clr.w	$12(a0)
0001A2A0 6000                       		bra.s	loc_194EE
0001A2A2                            ; ===========================================================================
0001A2A2                            
0001A2A2                            loc_194C2:
0001A2A2 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001A2A8 6500                       		bcs.s	loc_194DA
0001A2AA 6700                       		beq.s	loc_194E0
0001A2AC 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001A2B2 6500                       		bcs.s	loc_194EE
0001A2B4 5428 0025                  		addq.b	#2,$25(a0)
0001A2B8 6000                       		bra.s	loc_194EE
0001A2BA                            ; ===========================================================================
0001A2BA                            
0001A2BA                            loc_194DA:
0001A2BA 5168 0012                  		subq.w	#8,$12(a0)
0001A2BE 6000                       		bra.s	loc_194EE
0001A2C0                            ; ===========================================================================
0001A2C0                            
0001A2C0                            loc_194E0:
0001A2C0 4268 0012                  		clr.w	$12(a0)
0001A2C4 303C 0085                  		move.w	#$85,d0
0001A2C8 4EB9 0000 15E6             		jsr	(PlaySound).l	; play SYZ music
0001A2CE                            
0001A2CE                            loc_194EE:
0001A2CE 6000 FD02                  		bra.w	loc_191F2
0001A2D2                            ; ===========================================================================
0001A2D2                            
0001A2D2                            loc_194F2:				; XREF: Obj75_ShipIndex
0001A2D2 317C 0400 0010             		move.w	#$400,$10(a0)
0001A2D8 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A2DE 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001A2E4 6400                       		bcc.s	loc_1950C
0001A2E6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A2EA 6000                       		bra.s	loc_19512
0001A2EC                            ; ===========================================================================
0001A2EC                            
0001A2EC                            loc_1950C:
0001A2EC 4A28 0001                  		tst.b	1(a0)
0001A2F0 6A00                       		bpl.s	Obj75_ShipDelete
0001A2F2                            
0001A2F2                            loc_19512:
0001A2F2 6100 E3BC                  		bsr.w	BossMove
0001A2F6 6000 FCC6                  		bra.w	loc_191DE
0001A2FA                            ; ===========================================================================
0001A2FA                            
0001A2FA                            Obj75_ShipDelete:
0001A2FA 4EF9 0000 E2E4             		jmp	DeleteObject
0001A300                            ; ===========================================================================
0001A300                            
0001A300                            Obj75_FaceMain:				; XREF: Obj75_Index
0001A300 7201                       		moveq	#1,d1
0001A302 2268 0034                  		movea.l	$34(a0),a1
0001A306 7000                       		moveq	#0,d0
0001A308 1029 0025                  		move.b	$25(a1),d0
0001A30C 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001A310 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001A314 1141 001C                  		move.b	d1,$1C(a0)
0001A318 1010                       		move.b	(a0),d0
0001A31A B011                       		cmp.b	(a1),d0
0001A31C 6600                       		bne.s	Obj75_FaceDelete
0001A31E 6000                       		bra.s	loc_195BE
0001A320                            ; ===========================================================================
0001A320                            
0001A320                            Obj75_FaceDelete:
0001A320 4EF9 0000 E2E4             		jmp	DeleteObject
0001A326                            ; ===========================================================================
0001A326 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001A32A 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001A32E 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001A332                            ; ===========================================================================
0001A332                            
0001A332                            loc_19552:				; XREF: off_19546
0001A332 720A                       		moveq	#$A,d1
0001A334 4E75                       		rts	
0001A336                            ; ===========================================================================
0001A336                            
0001A336                            loc_19556:				; XREF: off_19546
0001A336 7206                       		moveq	#6,d1
0001A338 4E75                       		rts	
0001A33A                            ; ===========================================================================
0001A33A                            
0001A33A                            loc_1955A:				; XREF: off_19546
0001A33A 7000                       		moveq	#0,d0
0001A33C 1029 0028                  		move.b	$28(a1),d0
0001A340 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001A344 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001A348                            ; ===========================================================================
0001A348 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001A34C 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001A350                            ; ===========================================================================
0001A350                            
0001A350                            loc_19570:				; XREF: off_19568
0001A350 6000                       		bra.s	loc_19574
0001A352                            ; ===========================================================================
0001A352                            
0001A352                            loc_19572:				; XREF: off_19568
0001A352 7206                       		moveq	#6,d1
0001A354                            
0001A354                            loc_19574:				; XREF: off_19546
0001A354 4A29 0020                  		tst.b	$20(a1)
0001A358 6600                       		bne.s	loc_1957E
0001A35A 7205                       		moveq	#5,d1
0001A35C 4E75                       		rts	
0001A35E                            ; ===========================================================================
0001A35E                            
0001A35E                            loc_1957E:
0001A35E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A364 6500                       		bcs.s	locret_19588
0001A366 7204                       		moveq	#4,d1
0001A368                            
0001A368                            locret_19588:
0001A368 4E75                       		rts	
0001A36A                            ; ===========================================================================
0001A36A                            
0001A36A                            Obj75_FlameMain:			; XREF: Obj75_Index
0001A36A 117C 0007 001C             		move.b	#7,$1C(a0)
0001A370 2268 0034                  		movea.l	$34(a0),a1
0001A374 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A37A 6600                       		bne.s	loc_195AA
0001A37C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A382 4A28 0001                  		tst.b	1(a0)
0001A386 6A00                       		bpl.s	Obj75_FlameDelete
0001A388 6000                       		bra.s	loc_195B6
0001A38A                            ; ===========================================================================
0001A38A                            
0001A38A                            loc_195AA:
0001A38A 4A69 0010                  		tst.w	$10(a1)
0001A38E 6700                       		beq.s	loc_195B6
0001A390 117C 0008 001C             		move.b	#8,$1C(a0)
0001A396                            
0001A396                            loc_195B6:
0001A396 6000                       		bra.s	loc_195BE
0001A398                            ; ===========================================================================
0001A398                            
0001A398                            Obj75_FlameDelete:
0001A398 4EF9 0000 E2E4             		jmp	DeleteObject
0001A39E                            ; ===========================================================================
0001A39E                            
0001A39E                            loc_195BE:
0001A39E 43F9 0001 8AF2             		lea	(Ani_Eggman).l,a1
0001A3A4 4EB9 0000 B300             		jsr	AnimateSprite
0001A3AA 2268 0034                  		movea.l	$34(a0),a1
0001A3AE 3169 0008 0008             		move.w	8(a1),8(a0)
0001A3B4 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A3BA                            
0001A3BA                            loc_195DA:
0001A3BA 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A3C0 7003                       		moveq	#3,d0
0001A3C2 C028 0022                  		and.b	$22(a0),d0
0001A3C6 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A3CC 8128 0001                  		or.b	d0,1(a0)
0001A3D0 4EF9 0000 E2A8             		jmp	DisplaySprite
0001A3D6                            ; ===========================================================================
0001A3D6                            
0001A3D6                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001A3D6 217C 0001 8C1E 0004        		move.l	#Map_BossItems,4(a0)
0001A3DE 317C 246C 0002             		move.w	#$246C,2(a0)
0001A3E4 117C 0005 001A             		move.b	#5,$1A(a0)
0001A3EA 2268 0034                  		movea.l	$34(a0),a1
0001A3EE 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A3F4 6600                       		bne.s	loc_1961C
0001A3F6 4A28 0001                  		tst.b	1(a0)
0001A3FA 6A00                       		bpl.s	Obj75_SpikeDelete
0001A3FC                            
0001A3FC                            loc_1961C:
0001A3FC 3169 0008 0008             		move.w	8(a1),8(a0)
0001A402 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A408 3028 003C                  		move.w	$3C(a0),d0
0001A40C 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A412 6600                       		bne.s	loc_19652
0001A414 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A41A 6700                       		beq.s	loc_1964C
0001A41C 4A29 0028                  		tst.b	$28(a1)
0001A420 6600                       		bne.s	loc_19658
0001A422 0C40 0094                  		cmpi.w	#$94,d0
0001A426 6C00                       		bge.s	loc_19658
0001A428 5E40                       		addq.w	#7,d0
0001A42A 6000                       		bra.s	loc_19658
0001A42C                            ; ===========================================================================
0001A42C                            
0001A42C                            loc_1964C:
0001A42C 4A69 003C                  		tst.w	$3C(a1)
0001A430 6A00                       		bpl.s	loc_19658
0001A432                            
0001A432                            loc_19652:
0001A432 4A40                       		tst.w	d0
0001A434 6F00                       		ble.s	loc_19658
0001A436 5B40                       		subq.w	#5,d0
0001A438                            
0001A438                            loc_19658:
0001A438 3140 003C                  		move.w	d0,$3C(a0)
0001A43C E440                       		asr.w	#2,d0
0001A43E D168 000C                  		add.w	d0,$C(a0)
0001A442 117C 0008 0019             		move.b	#8,$19(a0)
0001A448 117C 000C 0016             		move.b	#$C,$16(a0)
0001A44E 4228 0020                  		clr.b	$20(a0)
0001A452 2268 0034                  		movea.l	$34(a0),a1
0001A456 4A29 0020                  		tst.b	$20(a1)
0001A45A 6700                       		beq.s	loc_19688
0001A45C 4A29 0029                  		tst.b	$29(a1)
0001A460 6600                       		bne.s	loc_19688
0001A462 117C 0084 0020             		move.b	#$84,$20(a0)
0001A468                            
0001A468                            loc_19688:
0001A468 6000 FF50                  		bra.w	loc_195DA
0001A46C                            ; ===========================================================================
0001A46C                            
0001A46C                            Obj75_SpikeDelete:
0001A46C 4EF9 0000 E2E4             		jmp	DeleteObject
0001A472                            ; ===========================================================================
0001A472                            ; ---------------------------------------------------------------------------
0001A472                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A472                            ; ---------------------------------------------------------------------------
0001A472                            
0001A472                            Obj76:					; XREF: Obj_Index
0001A472 7000                       		moveq	#0,d0
0001A474 1028 0024                  		move.b	$24(a0),d0
0001A478 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A47C 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A480                            ; ===========================================================================
0001A480 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A482 0000                       		dc.w Obj76_Action-Obj76_Index
0001A484 0000                       		dc.w loc_19762-Obj76_Index
0001A486                            ; ===========================================================================
0001A486                            
0001A486                            Obj76_Main:				; XREF: Obj76_Index
0001A486 7800                       		moveq	#0,d4
0001A488 3A3C 2C10                  		move.w	#$2C10,d5
0001A48C 7C09                       		moveq	#9,d6
0001A48E 43D0                       		lea	(a0),a1
0001A490 6000                       		bra.s	Obj76_MakeBlock
0001A492                            ; ===========================================================================
0001A492                            
0001A492                            Obj76_Loop:
0001A492 4EB9 0000 E72E             		jsr	SingleObjLoad
0001A498 6600                       		bne.s	Obj76_ExitLoop
0001A49A                            
0001A49A                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A49A 12BC 0076                  		move.b	#$76,(a1)
0001A49E 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A4A6 337C 4000 0002             		move.w	#$4000,2(a1)
0001A4AC 137C 0004 0001             		move.b	#4,1(a1)
0001A4B2 137C 0010 0019             		move.b	#$10,$19(a1)
0001A4B8 137C 0010 0016             		move.b	#$10,$16(a1)
0001A4BE 137C 0003 0018             		move.b	#3,$18(a1)
0001A4C4 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A4C8 337C 0582 000C             		move.w	#$582,$C(a1)
0001A4CE 3344 0028                  		move.w	d4,$28(a1)
0001A4D2 0644 0101                  		addi.w	#$101,d4
0001A4D6 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A4DA 5429 0024                  		addq.b	#2,$24(a1)
0001A4DE 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A4E2                            
0001A4E2                            Obj76_ExitLoop:
0001A4E2 4E75                       		rts	
0001A4E4                            ; ===========================================================================
0001A4E4                            
0001A4E4                            Obj76_Action:				; XREF: Obj76_Index
0001A4E4 1028 0029                  		move.b	$29(a0),d0
0001A4E8 B028 0028                  		cmp.b	$28(a0),d0
0001A4EC 6700                       		beq.s	Obj76_Solid
0001A4EE 4A00                       		tst.b	d0
0001A4F0 6B00                       		bmi.s	loc_19718
0001A4F2                            
0001A4F2                            loc_19712:
0001A4F2 6100 0000                  		bsr.w	Obj76_Break
0001A4F6 6000                       		bra.s	Obj76_Display
0001A4F8                            ; ===========================================================================
0001A4F8                            
0001A4F8                            loc_19718:
0001A4F8 2268 0034                  		movea.l	$34(a0),a1
0001A4FC 4A29 0021                  		tst.b	$21(a1)
0001A500 67F0                       		beq.s	loc_19712
0001A502 3169 0008 0008             		move.w	8(a1),8(a0)
0001A508 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A50E 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A514 B2C8                       		cmpa.w	a0,a1
0001A516 6500                       		bcs.s	Obj76_Display
0001A518 3029 0012                  		move.w	$12(a1),d0
0001A51C 48C0                       		ext.l	d0
0001A51E E080                       		asr.l	#8,d0
0001A520 D168 000C                  		add.w	d0,$C(a0)
0001A524 6000                       		bra.s	Obj76_Display
0001A526                            ; ===========================================================================
0001A526                            
0001A526                            Obj76_Solid:				; XREF: Obj76_Action
0001A526 323C 001B                  		move.w	#$1B,d1
0001A52A 343C 0010                  		move.w	#$10,d2
0001A52E 363C 0011                  		move.w	#$11,d3
0001A532 3828 0008                  		move.w	8(a0),d4
0001A536 4EB9 0001 0672             		jsr	SolidObject
0001A53C                            
0001A53C                            Obj76_Display:				; XREF: Obj76_Action
0001A53C 4EF9 0000 E2A8             		jmp	DisplaySprite
0001A542                            ; ===========================================================================
0001A542                            
0001A542                            loc_19762:				; XREF: Obj76_Index
0001A542 4A28 0001                  		tst.b	1(a0)
0001A546 6A00                       		bpl.s	Obj76_Delete
0001A548 4EB9 0000 E20C             		jsr	ObjectFall
0001A54E 4EF9 0000 E2A8             		jmp	DisplaySprite
0001A554                            ; ===========================================================================
0001A554                            
0001A554                            Obj76_Delete:
0001A554 4EF9 0000 E2E4             		jmp	DeleteObject
0001A55A                            
0001A55A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A55A                            
0001A55A                            
0001A55A                            Obj76_Break:				; XREF: Obj76_Action
0001A55A 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A55E 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A562 7801                       		moveq	#1,d4
0001A564 7203                       		moveq	#3,d1
0001A566 7438                       		moveq	#$38,d2
0001A568 5428 0024                  		addq.b	#2,$24(a0)
0001A56C 117C 0008 0019             		move.b	#8,$19(a0)
0001A572 117C 0008 0016             		move.b	#8,$16(a0)
0001A578 43D0                       		lea	(a0),a1
0001A57A 6000                       		bra.s	Obj76_MakeFrag
0001A57C                            ; ===========================================================================
0001A57C                            
0001A57C                            Obj76_LoopFrag:
0001A57C 4EB9 0000 E744             		jsr	SingleObjLoad2
0001A582 6600                       		bne.s	loc_197D4
0001A584                            
0001A584                            Obj76_MakeFrag:
0001A584 45D0                       		lea	(a0),a2
0001A586 47D1                       		lea	(a1),a3
0001A588 7603                       		moveq	#3,d3
0001A58A                            
0001A58A                            loc_197AA:
0001A58A 26DA                       		move.l	(a2)+,(a3)+
0001A58C 26DA                       		move.l	(a2)+,(a3)+
0001A58E 26DA                       		move.l	(a2)+,(a3)+
0001A590 26DA                       		move.l	(a2)+,(a3)+
0001A592 51CB FFF6                  		dbf	d3,loc_197AA
0001A596                            
0001A596 335C 0010                  		move.w	(a4)+,$10(a1)
0001A59A 335C 0012                  		move.w	(a4)+,$12(a1)
0001A59E 361D                       		move.w	(a5)+,d3
0001A5A0 D769 0008                  		add.w	d3,8(a1)
0001A5A4 361D                       		move.w	(a5)+,d3
0001A5A6 D769 000C                  		add.w	d3,$C(a1)
0001A5AA 1344 001A                  		move.b	d4,$1A(a1)
0001A5AE 5244                       		addq.w	#1,d4
0001A5B0 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A5B4                            
0001A5B4                            loc_197D4:
0001A5B4 303C 00CB                  		move.w	#$CB,d0
0001A5B8 4EF9 0000 15EC             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A5BE                            ; End of function Obj76_Break
0001A5BE                            
0001A5BE                            ; ===========================================================================
0001A5BE FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A5C2 0180 FE00                  		dc.w $180, $FE00
0001A5C6 FF00 FF00                  		dc.w $FF00, $FF00
0001A5CA 0100 FF00                  		dc.w $100, $FF00
0001A5CE FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A5D2 0010 0000                  		dc.w $10, 0
0001A5D6 0000 0010                  		dc.w 0,	$10
0001A5DA 0010 0010                  		dc.w $10, $10
0001A5DE                            ; ---------------------------------------------------------------------------
0001A5DE                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A5DE                            ; ---------------------------------------------------------------------------
0001A5DE                            Map_obj76:
0001A5DE                            	include "_maps\obj76.asm"
0001A5DE                            ; ---------------------------------------------------------------------------
0001A5DE                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A5DE                            ; ---------------------------------------------------------------------------
0001A5DE 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A5E2 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A5E6 0000                       		dc.w byte_19826-Map_obj76
0001A5E8 02                         byte_19808:	dc.b 2
0001A5E9 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A5EE 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A5F3 00                         		dc.b 0
0001A5F4 01                         byte_19814:	dc.b 1
0001A5F5 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A5FA 01                         byte_1981A:	dc.b 1
0001A5FB F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A600 01                         byte_19820:	dc.b 1
0001A601 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A606 01                         byte_19826:	dc.b 1
0001A607 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A60C                            		even
0001A60C                            		even
0001A60C                            
0001A60C                            ; ===========================================================================
0001A60C                            
0001A60C                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A60C 4EF9 0000 E2E4             		jmp	DeleteObject
0001A612                            ; ===========================================================================
0001A612                            ; ---------------------------------------------------------------------------
0001A612                            ; Object 82 - Eggman (SBZ2)
0001A612                            ; ---------------------------------------------------------------------------
0001A612                            
0001A612                            Obj82:					; XREF: Obj_Index
0001A612 7000                       		moveq	#0,d0
0001A614 1028 0024                  		move.b	$24(a0),d0
0001A618 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A61C 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A620                            ; ===========================================================================
0001A620 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A622 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A624 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A626                            
0001A626 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A629 0400 03                    		dc.b 4,	0, 3
0001A62C                            ; ===========================================================================
0001A62C                            
0001A62C                            Obj82_Main:				; XREF: Obj82_Index
0001A62C 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A630 317C 2160 0008             		move.w	#$2160,8(a0)
0001A636 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A63C 117C 000F 0020             		move.b	#$F,$20(a0)
0001A642 117C 0010 0021             		move.b	#$10,$21(a0)
0001A648 08A8 0000 0022             		bclr	#0,$22(a0)
0001A64E 4228 0025                  		clr.b	$25(a0)
0001A652 115A 0024                  		move.b	(a2)+,$24(a0)
0001A656 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A65A 115A 0018                  		move.b	(a2)+,$18(a0)
0001A65E 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A666 317C 0400 0002             		move.w	#$400,2(a0)
0001A66C 117C 0004 0001             		move.b	#4,1(a0)
0001A672 08E8 0007 0001             		bset	#7,1(a0)
0001A678 117C 0020 0019             		move.b	#$20,$19(a0)
0001A67E 4EB9 0000 E744             		jsr	SingleObjLoad2
0001A684 6600                       		bne.s	Obj82_Eggman
0001A686 2348 0034                  		move.l	a0,$34(a1)
0001A68A 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A68E 337C 2130 0008             		move.w	#$2130,8(a1)
0001A694 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A69A 4228 0025                  		clr.b	$25(a0)
0001A69E 135A 0024                  		move.b	(a2)+,$24(a1)
0001A6A2 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A6A6 135A 0018                  		move.b	(a2)+,$18(a1)
0001A6AA 237C 0000 CA34 0004        		move.l	#Map_obj32,4(a1)
0001A6B2 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A6B8 137C 0004 0001             		move.b	#4,1(a1)
0001A6BE 08E9 0007 0001             		bset	#7,1(a1)
0001A6C4 137C 0010 0019             		move.b	#$10,$19(a1)
0001A6CA 137C 0000 001A             		move.b	#0,$1A(a1)
0001A6D0                            
0001A6D0                            Obj82_Eggman:				; XREF: Obj82_Index
0001A6D0 7000                       		moveq	#0,d0
0001A6D2 1028 0025                  		move.b	$25(a0),d0
0001A6D6 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A6DA 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A6DE 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A6E2 4EB9 0000 B300             		jsr	AnimateSprite
0001A6E8 4EF9 0000 E2A8             		jmp	DisplaySprite
0001A6EE                            ; ===========================================================================
0001A6EE 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A6F0 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A6F2 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A6F4 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A6F6                            ; ===========================================================================
0001A6F6                            
0001A6F6                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A6F6 3028 0008                  		move.w	8(a0),d0
0001A6FA 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A6FE 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A702 6400                       		bcc.s	loc_19934	; if not, branch
0001A704 5428 0025                  		addq.b	#2,$25(a0)
0001A708 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A70E 117C 0001 001C             		move.b	#1,$1C(a0)
0001A714                            
0001A714                            loc_19934:				; XREF: Obj82_EggIndex
0001A714 4EF9 0000 E26E             		jmp	SpeedToPos
0001A71A                            ; ===========================================================================
0001A71A                            
0001A71A                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A71A 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A71E 6600                       		bne.s	loc_19954	; if time remains, branch
0001A720 5428 0025                  		addq.b	#2,$25(a0)
0001A724 117C 0002 001C             		move.b	#2,$1C(a0)
0001A72A 5868 000C                  		addq.w	#4,$C(a0)
0001A72E 317C 000F 003C             		move.w	#15,$3C(a0)
0001A734                            
0001A734                            loc_19954:
0001A734 60DE                       		bra.s	loc_19934
0001A736                            ; ===========================================================================
0001A736                            
0001A736                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A736 5368 003C                  		subq.w	#1,$3C(a0)
0001A73A 6E00                       		bgt.s	loc_199D0
0001A73C 6600                       		bne.s	loc_1996A
0001A73E 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A744 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A74A                            
0001A74A                            loc_1996A:
0001A74A 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A750 6E00                       		bgt.s	loc_19976
0001A752 4268 0010                  		clr.w	$10(a0)
0001A756                            
0001A756                            loc_19976:
0001A756 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A75C 4A68 0012                  		tst.w	$12(a0)
0001A760 6B00                       		bmi.s	Obj82_FindBlocks
0001A762 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A768 6500                       		bcs.s	Obj82_FindBlocks
0001A76A 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A770 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A776 6500                       		bcs.s	Obj82_FindBlocks
0001A778 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A77E 4268 0012                  		clr.w	$12(a0)
0001A782                            
0001A782                            Obj82_FindBlocks:
0001A782 3028 0010                  		move.w	$10(a0),d0
0001A786 8068 0012                  		or.w	$12(a0),d0
0001A78A 6600                       		bne.s	loc_199D0
0001A78C 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A790 703E                       		moveq	#$3E,d0
0001A792 7240                       		moveq	#$40,d1
0001A794                            
0001A794                            Obj82_FindLoop:	
0001A794 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A796 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A79A 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A79E                            
0001A79E 6600                       		bne.s	loc_199D0
0001A7A0 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A7A6 5428 0025                  		addq.b	#2,$25(a0)
0001A7AA 117C 0001 001C             		move.b	#1,$1C(a0)
0001A7B0                            
0001A7B0                            loc_199D0:
0001A7B0 6000 FF62                  		bra.w	loc_19934
0001A7B4                            ; ===========================================================================
0001A7B4                            
0001A7B4                            Obj82_Switch:				; XREF: Obj82_Index
0001A7B4 7000                       		moveq	#0,d0
0001A7B6 1028 0025                  		move.b	$25(a0),d0
0001A7BA 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A7BE 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A7C2                            ; ===========================================================================
0001A7C2 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A7C4 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A7C6                            ; ===========================================================================
0001A7C6                            
0001A7C6                            loc_199E6:				; XREF: Obj82_SwIndex
0001A7C6 2268 0034                  		movea.l	$34(a0),a1
0001A7CA 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A7D0 6600                       		bne.s	Obj82_SwDisplay
0001A7D2 117C 0001 001A             		move.b	#1,$1A(a0)
0001A7D8 5428 0025                  		addq.b	#2,$25(a0)
0001A7DC                            
0001A7DC                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A7DC 4EF9 0000 E2A8             		jmp	DisplaySprite
0001A7E2                            ; ===========================================================================
0001A7E2                            Ani_obj82:
0001A7E2                            	include "_anim\obj82.asm"
0001A7E2                            ; ---------------------------------------------------------------------------
0001A7E2                            ; Animation script - Eggman (SBZ2)
0001A7E2                            ; ---------------------------------------------------------------------------
0001A7E2 0000                       		dc.w byte_19A10-Ani_obj82
0001A7E4 0000                       		dc.w byte_19A14-Ani_obj82
0001A7E6 0000                       		dc.w byte_19A18-Ani_obj82
0001A7E8 0000                       		dc.w byte_19A20-Ani_obj82
0001A7EA 0000                       		dc.w byte_19A24-Ani_obj82
0001A7EC 0000                       		dc.w byte_19A2A-Ani_obj82
0001A7EE 0000                       		dc.w byte_19A30-Ani_obj82
0001A7F0 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A7F4 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A7F8 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A800 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A804 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A80A 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A810 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A814                            		even
0001A814                            		even
0001A814                            
0001A814                            ; ---------------------------------------------------------------------------
0001A814                            ; Sprite mappings - Eggman (SBZ2)
0001A814                            ; ---------------------------------------------------------------------------
0001A814                            Map_obj82:
0001A814                            	include "_maps\obj82.asm"
0001A814                            ; ================================================================================
0001A814                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A814                            ; ================================================================================
0001A814                            
0001A814                            DATAA16Z12RYSAF:
0001A814 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A818 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A81C 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A820 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A824 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A828 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A82A 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A82B FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A830 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A835 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A83A 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A83B E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A840 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A845 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A84A FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A84F 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A850 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A855 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A85A 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A85F FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A864 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A865 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A86A 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A86F F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A874 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A875 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A87A 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A87F 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A884 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A889 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A88A E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A88F E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A894 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A899 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A89E 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A89F E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A8A4 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A8A9 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A8AE 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A8B3 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A8B8 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A8BD F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A8C2 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A8C3 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A8C8 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A8CD 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A8D2 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A8D7 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A8D8 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A8DD E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A8E2 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A8E7 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A8EC EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A8F1 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A8F2 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A8F7 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A8FC E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A901 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A906 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A90B F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A910 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A915 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A91A 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A91B EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A920 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A925 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A92A                            	even
0001A92A                            	even
0001A92A                            
0001A92A                            ; ===========================================================================
0001A92A                            ; ---------------------------------------------------------------------------
0001A92A                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A92A                            ; ---------------------------------------------------------------------------
0001A92A                            
0001A92A                            Obj83:					; XREF: Obj_Index
0001A92A 7000                       		moveq	#0,d0
0001A92C 1028 0024                  		move.b	$24(a0),d0
0001A930 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A934 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A938                            ; ===========================================================================
0001A938 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A93A 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A93C 0000                       		dc.w loc_19C36-Obj83_Index
0001A93E 0000                       		dc.w loc_19C62-Obj83_Index
0001A940 0000                       		dc.w loc_19C72-Obj83_Index
0001A942 0000                       		dc.w loc_19C80-Obj83_Index
0001A944                            ; ===========================================================================
0001A944                            
0001A944                            Obj83_Main:				; XREF: Obj83_Index
0001A944 317C 2080 0008             		move.w	#$2080,8(a0)
0001A94A 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A950 117C 0080 0019             		move.b	#$80,$19(a0)
0001A956 117C 0010 0016             		move.b	#$10,$16(a0)
0001A95C 117C 0004 0001             		move.b	#4,1(a0)
0001A962 08E8 0007 0001             		bset	#7,1(a0)
0001A968 7800                       		moveq	#0,d4
0001A96A 3A3C 2010                  		move.w	#$2010,d5
0001A96E 7C07                       		moveq	#7,d6
0001A970 45E8 0030                  		lea	$30(a0),a2
0001A974                            
0001A974                            Obj83_MakeBlock:
0001A974 4EB9 0000 E72E             		jsr	SingleObjLoad
0001A97A 6600                       		bne.s	Obj83_ExitMake
0001A97C 34C9                       		move.w	a1,(a2)+
0001A97E 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A982 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A98A 337C 4518 0002             		move.w	#$4518,2(a1)
0001A990 137C 0004 0001             		move.b	#4,1(a1)
0001A996 137C 0010 0019             		move.b	#$10,$19(a1)
0001A99C 137C 0010 0016             		move.b	#$10,$16(a1)
0001A9A2 137C 0003 0018             		move.b	#3,$18(a1)
0001A9A8 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A9AC 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A9B2 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A9B6 137C 0008 0024             		move.b	#8,$24(a1)
0001A9BC 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A9C0                            
0001A9C0                            Obj83_ExitMake:
0001A9C0 5428 0024                  		addq.b	#2,$24(a0)
0001A9C4 4E75                       		rts	
0001A9C6                            ; ===========================================================================
0001A9C6                            
0001A9C6                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A9C6 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A9CC 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A9CE 4228 001A                  		clr.b	$1A(a0)
0001A9D2 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A9D6                            
0001A9D6                            Obj83_Solid:
0001A9D6 7000                       		moveq	#0,d0
0001A9D8 1028 001A                  		move.b	$1A(a0),d0
0001A9DC 4400                       		neg.b	d0
0001A9DE 4880                       		ext.w	d0
0001A9E0 5040                       		addq.w	#8,d0
0001A9E2 E940                       		asl.w	#4,d0
0001A9E4 383C 2100                  		move.w	#$2100,d4
0001A9E8 9840                       		sub.w	d0,d4
0001A9EA 1140 0019                  		move.b	d0,$19(a0)
0001A9EE 3144 0008                  		move.w	d4,8(a0)
0001A9F2 720B                       		moveq	#$B,d1
0001A9F4 D240                       		add.w	d0,d1
0001A9F6 7410                       		moveq	#$10,d2
0001A9F8 7611                       		moveq	#$11,d3
0001A9FA 4EF9 0001 0672             		jmp	SolidObject
0001AA00                            ; ===========================================================================
0001AA00                            
0001AA00                            loc_19C36:				; XREF: Obj83_Index
0001AA00 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001AA06 6400                       		bcc.s	Obj83_Solid2
0001AA08 70FF                       		moveq	#-1,d0
0001AA0A 1028 001A                  		move.b	$1A(a0),d0
0001AA0E 4880                       		ext.w	d0
0001AA10 D040                       		add.w	d0,d0
0001AA12 3030 0030                  		move.w	$30(a0,d0.w),d0
0001AA16 2240                       		movea.l	d0,a1
0001AA18 337C 474F 0028             		move.w	#$474F,$28(a1)
0001AA1E 5228 001A                  		addq.b	#1,$1A(a0)
0001AA22 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001AA28 6700                       		beq.s	loc_19C62
0001AA2A                            
0001AA2A                            Obj83_Solid2:
0001AA2A 60AA                       		bra.s	Obj83_Solid
0001AA2C                            ; ===========================================================================
0001AA2C                            
0001AA2C                            loc_19C62:				; XREF: Obj83_Index
0001AA2C 08A8 0003 0022             		bclr	#3,$22(a0)
0001AA32 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AA38 6000 FBD2                  		bra.w	loc_1982C
0001AA3C                            ; ===========================================================================
0001AA3C                            
0001AA3C                            loc_19C72:				; XREF: Obj83_Index
0001AA3C 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001AA42 6700                       		beq.s	Obj83_Break	; if yes, branch
0001AA44 4EF9 0000 E2A8             		jmp	DisplaySprite
0001AA4A                            ; ===========================================================================
0001AA4A                            
0001AA4A                            loc_19C80:				; XREF: Obj83_Index
0001AA4A 4A28 0001                  		tst.b	1(a0)
0001AA4E 6A00 FBBC                  		bpl.w	loc_1982C
0001AA52 4EB9 0000 E20C             		jsr	ObjectFall
0001AA58 4EF9 0000 E2A8             		jmp	DisplaySprite
0001AA5E                            ; ===========================================================================
0001AA5E                            
0001AA5E                            Obj83_Break:				; XREF: loc_19C72
0001AA5E 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001AA62 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001AA66 7801                       		moveq	#1,d4
0001AA68 7203                       		moveq	#3,d1
0001AA6A 7438                       		moveq	#$38,d2
0001AA6C 5428 0024                  		addq.b	#2,$24(a0)
0001AA70 117C 0008 0019             		move.b	#8,$19(a0)
0001AA76 117C 0008 0016             		move.b	#8,$16(a0)
0001AA7C 43D0                       		lea	(a0),a1
0001AA7E 6000                       		bra.s	Obj83_MakeFrag
0001AA80                            ; ===========================================================================
0001AA80                            
0001AA80                            Obj83_LoopFrag:
0001AA80 4EB9 0000 E744             		jsr	SingleObjLoad2
0001AA86 6600                       		bne.s	Obj83_BreakSnd
0001AA88                            
0001AA88                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001AA88 45D0                       		lea	(a0),a2
0001AA8A 47D1                       		lea	(a1),a3
0001AA8C 7603                       		moveq	#3,d3
0001AA8E                            
0001AA8E                            loc_19CC4:
0001AA8E 26DA                       		move.l	(a2)+,(a3)+
0001AA90 26DA                       		move.l	(a2)+,(a3)+
0001AA92 26DA                       		move.l	(a2)+,(a3)+
0001AA94 26DA                       		move.l	(a2)+,(a3)+
0001AA96 51CB FFF6                  		dbf	d3,loc_19CC4
0001AA9A                            
0001AA9A 335C 0012                  		move.w	(a4)+,$12(a1)
0001AA9E 361D                       		move.w	(a5)+,d3
0001AAA0 D769 0008                  		add.w	d3,8(a1)
0001AAA4 361D                       		move.w	(a5)+,d3
0001AAA6 D769 000C                  		add.w	d3,$C(a1)
0001AAAA 1344 001A                  		move.b	d4,$1A(a1)
0001AAAE 5244                       		addq.w	#1,d4
0001AAB0 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001AAB4                            
0001AAB4                            Obj83_BreakSnd:
0001AAB4 303C 00CB                  		move.w	#$CB,d0
0001AAB8 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play smashing sound
0001AABE 4EF9 0000 E2A8             		jmp	DisplaySprite
0001AAC4                            ; ===========================================================================
0001AAC4 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001AAC8 0120 00C0                  		dc.w $120, $C0
0001AACC FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001AAD0 0010 0000                  		dc.w $10, 0
0001AAD4 0000 0010                  		dc.w 0,	$10
0001AAD8 0010 0010                  		dc.w $10, $10
0001AADC                            ; ---------------------------------------------------------------------------
0001AADC                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001AADC                            ; ---------------------------------------------------------------------------
0001AADC                            Map_obj83:
0001AADC                            	include "_maps\obj83.asm"
0001AADC                            ; ---------------------------------------------------------------------------
0001AADC                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001AADC                            ; ---------------------------------------------------------------------------
0001AADC 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001AAE0 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001AAE4 0000                       		dc.w byte_19D46-Map_obj83
0001AAE6 01                         byte_19D1C:	dc.b 1
0001AAE7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001AAEC 02                         byte_19D22:	dc.b 2
0001AAED F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001AAF2 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001AAF7 00                         		dc.b 0
0001AAF8 02                         byte_19D2E:	dc.b 2
0001AAF9 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001AAFE F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001AB03 00                         		dc.b 0
0001AB04 02                         byte_19D3A:	dc.b 2
0001AB05 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001AB0A F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001AB0F 00                         		dc.b 0
0001AB10 02                         byte_19D46:	dc.b 2
0001AB11 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001AB16 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001AB1C 00                         		even
0001AB1C 00                         		even
0001AB1C                            
0001AB1C                            ; ===========================================================================
0001AB1C                            ; ---------------------------------------------------------------------------
0001AB1C                            ; Object 85 - Eggman (FZ)
0001AB1C                            ; ---------------------------------------------------------------------------
0001AB1C                            
0001AB1C                            Obj85_Delete:
0001AB1C 4EF9 0000 E2E4             		jmp	DeleteObject
0001AB22                            ; ===========================================================================
0001AB22                            
0001AB22                            Obj85:					; XREF: Obj_Index
0001AB22 7000                       		moveq	#0,d0
0001AB24 1028 0024                  		move.b	$24(a0),d0
0001AB28 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001AB2C 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001AB30                            ; ===========================================================================
0001AB30 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001AB32 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001AB34 0000                       		dc.w loc_1A38E-Obj85_Index
0001AB36 0000                       		dc.w loc_1A346-Obj85_Index
0001AB38 0000                       		dc.w loc_1A2C6-Obj85_Index
0001AB3A 0000                       		dc.w loc_1A3AC-Obj85_Index
0001AB3C 0000                       		dc.w loc_1A264-Obj85_Index
0001AB3E                            
0001AB3E 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001AB44 0001 A814                  		dc.l Map_obj82		; mappings pointer
0001AB48 25B0 0590 0300             		dc.w $25B0, $590, $300
0001AB4E 0000 0000                  		dc.l Map_obj84
0001AB52 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001AB58 0000 0000                  		dc.l Map_FZBoss
0001AB5C 26E0 0596 0470             		dc.w $26E0, $596, $470
0001AB62 0001 A814                  		dc.l Map_obj82
0001AB66 26E0 0596 0400             		dc.w $26E0, $596, $400
0001AB6C 0001 8B56                  		dc.l Map_Eggman
0001AB70 26E0 0596 0400             		dc.w $26E0, $596, $400
0001AB76 0001 8B56                  		dc.l Map_Eggman
0001AB7A                            
0001AB7A 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001AB7F 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001AB84 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001AB89 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001AB8E 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001AB93 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001AB98                            ; ===========================================================================
0001AB98                            
0001AB98                            Obj85_Main:				; XREF: Obj85_Index
0001AB98 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001AB9C 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001ABA0 2248                       		movea.l	a0,a1
0001ABA2 7205                       		moveq	#5,d1
0001ABA4 6000                       		bra.s	Obj85_LoadBoss
0001ABA6                            ; ===========================================================================
0001ABA6                            
0001ABA6                            Obj85_Loop:
0001ABA6 4EB9 0000 E744             		jsr	SingleObjLoad2
0001ABAC 6600                       		bne.s	loc_19E20
0001ABAE                            
0001ABAE                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001ABAE 12BC 0085                  		move.b	#$85,(a1)
0001ABB2 335A 0008                  		move.w	(a2)+,8(a1)
0001ABB6 335A 000C                  		move.w	(a2)+,$C(a1)
0001ABBA 335A 0002                  		move.w	(a2)+,2(a1)
0001ABBE 235A 0004                  		move.l	(a2)+,4(a1)
0001ABC2 135B 0024                  		move.b	(a3)+,$24(a1)
0001ABC6 135B 001C                  		move.b	(a3)+,$1C(a1)
0001ABCA 135B 0018                  		move.b	(a3)+,$18(a1)
0001ABCE 135B 0017                  		move.b	(a3)+,$17(a1)
0001ABD2 135B 0016                  		move.b	(a3)+,$16(a1)
0001ABD6 137C 0004 0001             		move.b	#4,1(a1)
0001ABDC 08E8 0007 0001             		bset	#7,1(a0)
0001ABE2 2348 0034                  		move.l	a0,$34(a1)
0001ABE6 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001ABEA                            
0001ABEA                            loc_19E20:
0001ABEA 45E8 0036                  		lea	$36(a0),a2
0001ABEE 4EB9 0000 E72E             		jsr	SingleObjLoad
0001ABF4 6600                       		bne.s	loc_19E5A
0001ABF6 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001ABFA 3489                       		move.w	a1,(a2)
0001ABFC 2348 0034                  		move.l	a0,$34(a1)
0001AC00 45E8 0038                  		lea	$38(a0),a2
0001AC04 7400                       		moveq	#0,d2
0001AC06 7203                       		moveq	#3,d1
0001AC08                            
0001AC08                            loc_19E3E:
0001AC08 4EB9 0000 E744             		jsr	SingleObjLoad2
0001AC0E 6600                       		bne.s	loc_19E5A
0001AC10 34C9                       		move.w	a1,(a2)+
0001AC12 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001AC16 2348 0034                  		move.l	a0,$34(a1)
0001AC1A 1342 0028                  		move.b	d2,$28(a1)
0001AC1E 5442                       		addq.w	#2,d2
0001AC20 51C9 FFE6                  		dbf	d1,loc_19E3E
0001AC24                            
0001AC24                            loc_19E5A:
0001AC24 317C 0000 0034             		move.w	#0,$34(a0)
0001AC2A 4EB8 2D60                  		jsr	RandomNumber	; get a number between 0 and 250
0001AC2E 4240                       		clr.w	d0
0001AC30 4840                       		swap	d0
0001AC32 80FC 00FB                  		divu.w	#251,d0
0001AC36 4840                       		swap	d0
0001AC38 0640 0118                  		add.w	#280,d0		; add 280
0001AC3C 33C0 00FF 7FFE             		move.w	d0,($FF7FFE).l	; that's the number of hits
0001AC42 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AC48                            
0001AC48                            Obj85_Eggman:				; XREF: Obj85_Index
0001AC48 7000                       		moveq	#0,d0
0001AC4A 1028 0034                  		move.b	$34(a0),d0
0001AC4E 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001AC52 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001AC56 4EF9 0000 E2A8             		jmp	DisplaySprite
0001AC5C                            ; ===========================================================================
0001AC5C 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001AC60 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001AC64 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001AC68 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001AC6C                            ; ===========================================================================
0001AC6C                            
0001AC6C                            loc_19E90:				; XREF: off_19E80
0001AC6C 4AB8 F680                  		tst.l	($FFFFF680).w
0001AC70 6600                       		bne.s	loc_19EA2
0001AC72 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001AC78 6500                       		blo.s	loc_19EA2
0001AC7A 5428 0034                  		addq.b	#2,$34(a0)
0001AC7E 103C 0081                  		move.b	#$81,d0
0001AC82 4EB8 15EC                  		jsr	PlaySound_Special
0001AC86                            loc_19EA2:
0001AC86 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001AC8A 4E75                       		rts	
0001AC8C                            ; ===========================================================================
0001AC8C                            
0001AC8C                            loc_19EA8:				; XREF: off_19E80
0001AC8C 4A68 0030                  		tst.w	$30(a0)
0001AC90 6A00                       		bpl.s	loc_19F10
0001AC92 4268 0030                  		clr.w	$30(a0)
0001AC96 4EB9 0000 2D60             		jsr	(RandomNumber).l
0001AC9C 0240 000C                  		andi.w	#$C,d0
0001ACA0 3200                       		move.w	d0,d1
0001ACA2 5441                       		addq.w	#2,d1
0001ACA4 4A80                       		tst.l	d0
0001ACA6 6A00                       		bpl.s	loc_19EC6
0001ACA8 C141                       		exg	d1,d0
0001ACAA                            
0001ACAA                            loc_19EC6:
0001ACAA 43FA 0000                  		lea	word_19FD6(pc),a1
0001ACAE 3031 0000                  		move.w	(a1,d0.w),d0
0001ACB2 3231 1000                  		move.w	(a1,d1.w),d1
0001ACB6 3140 0030                  		move.w	d0,$30(a0)
0001ACBA 74FF                       		moveq	#-1,d2
0001ACBC 3430 0038                  		move.w	$38(a0,d0.w),d2
0001ACC0 2242                       		movea.l	d2,a1
0001ACC2 137C 00FF 0029             		move.b	#-1,$29(a1)
0001ACC8 337C FFFF 0030             		move.w	#-1,$30(a1)
0001ACCE 3430 1038                  		move.w	$38(a0,d1.w),d2
0001ACD2 2242                       		movea.l	d2,a1
0001ACD4 137C 0001 0029             		move.b	#1,$29(a1)
0001ACDA 337C 0000 0030             		move.w	#0,$30(a1)
0001ACE0 317C 0001 0032             		move.w	#1,$32(a0)
0001ACE6 4228 0035                  		clr.b	$35(a0)
0001ACEA 303C 00B7                  		move.w	#$B7,d0
0001ACEE 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001ACF4                            
0001ACF4                            loc_19F10:
0001ACF4 4A68 0032                  		tst.w	$32(a0)
0001ACF8 6B00 0000                  		bmi.w	loc_19FA6
0001ACFC 08A8 0000 0022             		bclr	#0,$22(a0)
0001AD02 3038 D008                  		move.w	($FFFFD008).w,d0
0001AD06 9068 0008                  		sub.w	8(a0),d0
0001AD0A 6500                       		bcs.s	loc_19F2E
0001AD0C 08E8 0000 0022             		bset	#0,$22(a0)
0001AD12                            
0001AD12                            loc_19F2E:
0001AD12 323C 002B                  		move.w	#$2B,d1
0001AD16 343C 0014                  		move.w	#$14,d2
0001AD1A 363C 0014                  		move.w	#$14,d3
0001AD1E 3828 0008                  		move.w	8(a0),d4
0001AD22 4EB9 0001 0672             		jsr	SolidObject
0001AD28 4A44                       		tst.w	d4
0001AD2A 6E00                       		bgt.s	loc_19F50
0001AD2C                            
0001AD2C                            loc_19F48:
0001AD2C 4A28 0035                  		tst.b	$35(a0)
0001AD30 6600                       		bne.s	loc_19F88
0001AD32 6000                       		bra.s	loc_19F96
0001AD34                            ; ===========================================================================
0001AD34                            
0001AD34                            loc_19F50:
0001AD34 5E78 F636                  		addq.w	#7,($FFFFF636).w	; add 7 to... the rng seed?
0001AD38                            ;		cmpi.b	#2,($FFFFD01C).w	; check if player is in ball form (nah)
0001AD38                            ;		bne.s	loc_19F48
0001AD38                            ;		move.w	#$300,d0		; knock player back (nah)
0001AD38                            ;		btst	#0,$22(a0)
0001AD38                            ;		bne.s	loc_19F6A
0001AD38                            ;		neg.w	d0
0001AD38                            ;
0001AD38                            ;loc_19F6A:
0001AD38                            ;		move.w	d0,($FFFFD010).w
0001AD38 4A28 0035                  		tst.b	$35(a0)
0001AD3C 6600                       		bne.s	loc_19F88
0001AD3E 5379 00FF 7FFE             		subq.w	#1,($FF7FFE).l		; no overflowing! dumbass glitch finish the boss again looking ass
0001AD44 6400                       		bcc.s	@notoverflown
0001AD46 4279 00FF 7FFE             		clr.w	($FF7FFE).l
0001AD4C                            @notoverflown:
0001AD4C 117C 0001 0035             		move.b	#1,$35(a0)		; eye-frame timer
0001AD52 303C 00AC                  		move.w	#$AC,d0
0001AD56 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AD5C                            
0001AD5C                            loc_19F88:
0001AD5C 5328 0035                  		subq.b	#1,$35(a0)
0001AD60 6700                       		beq.s	loc_19F96
0001AD62 117C 0003 001C             		move.b	#3,$1C(a0)
0001AD68 6000                       		bra.s	loc_19F9C
0001AD6A                            ; ===========================================================================
0001AD6A                            
0001AD6A                            loc_19F96:
0001AD6A 117C 0001 001C             		move.b	#1,$1C(a0)
0001AD70                            
0001AD70                            loc_19F9C:
0001AD70 43FA FA70                  		lea	Ani_obj82(pc),a1
0001AD74 4EF9 0000 B300             		jmp	AnimateSprite
0001AD7A                            ; ===========================================================================
0001AD7A                            
0001AD7A                            loc_19FA6:
0001AD7A 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001AD80 6700                       		beq.s	loc_19FBC
0001AD82 5428 0034                  		addq.b	#2,$34(a0)
0001AD86 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AD8C 4268 0032                  		clr.w	$32(a0)
0001AD90 4E75                       		rts	
0001AD92                            ; ===========================================================================
0001AD92                            
0001AD92                            loc_19FBC:
0001AD92 117C 0006 0034             		move.b	#6,$34(a0)
0001AD98 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001AD9E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001ADA4 117C 0014 0016             		move.b	#$14,$16(a0)
0001ADAA 4E75                       		rts	
0001ADAC                            ; ===========================================================================
0001ADAC 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001ADBC                            ; ===========================================================================
0001ADBC                            
0001ADBC                            loc_19FE6:				; XREF: off_19E80
0001ADBC 70FF                       		moveq	#-1,d0
0001ADBE 3028 0036                  		move.w	$36(a0),d0
0001ADC2 2240                       		movea.l	d0,a1
0001ADC4 4A68 0030                  		tst.w	$30(a0)
0001ADC8 6A00                       		bpl.s	loc_1A000
0001ADCA 4268 0030                  		clr.w	$30(a0)
0001ADCE 137C 00FF 0029             		move.b	#-1,$29(a1)
0001ADD4 6100                       		bsr.s	loc_1A020
0001ADD6                            
0001ADD6                            loc_1A000:
0001ADD6 700F                       		moveq	#$F,d0
0001ADD8 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001ADDC 6600                       		bne.s	loc_1A00A
0001ADDE 6100                       		bsr.s	loc_1A020
0001ADE0                            
0001ADE0                            loc_1A00A:
0001ADE0 4A68 0032                  		tst.w	$32(a0)
0001ADE4 6700                       		beq.s	locret_1A01E
0001ADE6 5528 0034                  		subq.b	#2,$34(a0)
0001ADEA 317C FFFF 0030             		move.w	#-1,$30(a0)
0001ADF0 4268 0032                  		clr.w	$32(a0)
0001ADF4                            
0001ADF4                            locret_1A01E:
0001ADF4 4E75                       		rts	
0001ADF6                            ; ===========================================================================
0001ADF6                            
0001ADF6                            loc_1A020:
0001ADF6 303C 00B1                  		move.w	#$B1,d0
0001ADFA 4EF9 0000 15EC             		jmp	(PlaySound_Special).l ;	play electricity sound
0001AE00                            ; ===========================================================================
0001AE00                            
0001AE00                            loc_1A02A:				; XREF: off_19E80
0001AE00 117C 0030 0017             		move.b	#$30,$17(a0)
0001AE06 08E8 0000 0022             		bset	#0,$22(a0)
0001AE0C 7210                       		moveq	#$10,d1
0001AE0E 4EB9 0000 E20E             		jsr	ObjectFallCustom
0001AE14 117C 0006 001A             		move.b	#6,$1A(a0)
0001AE1A 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001AE20 6500                       		bcs.s	loc_1A070
0001AE22 317C 059C 000C             		move.w	#$59C,$C(a0)
0001AE28 5428 0034                  		addq.b	#2,$34(a0)
0001AE2C 117C 0020 0017             		move.b	#$20,$17(a0)
0001AE32 317C 0100 0010             		move.w	#$100,$10(a0)
0001AE38 317C FF00 0012             		move.w	#-$100,$12(a0)
0001AE3E 5438 F742                  		addq.b	#2,($FFFFF742).w
0001AE42                            
0001AE42                            loc_1A070:
0001AE42 6000 0000                  		bra.w	loc_1A166
0001AE46                            ; ===========================================================================
0001AE46                            
0001AE46                            loc_1A074:				; XREF: off_19E80
0001AE46 08E8 0000 0022             		bset	#0,$22(a0)
0001AE4C 117C 0004 001C             		move.b	#4,$1C(a0)
0001AE52 7210                       		moveq	#$10,d1
0001AE54 4EB9 0000 E20E             		jsr	ObjectFallCustom
0001AE5A 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001AE60 6500                       		bcs.s	loc_1A09A
0001AE62 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AE68                            
0001AE68                            loc_1A09A:
0001AE68 317C 0400 0010             		move.w	#$400,$10(a0)
0001AE6E 3028 0008                  		move.w	8(a0),d0
0001AE72 9078 D008                  		sub.w	($FFFFD008).w,d0
0001AE76 6A00                       		bpl.s	loc_1A0B4
0001AE78 317C 0500 0010             		move.w	#$500,$10(a0)
0001AE7E 6000 0000                  		bra.w	loc_1A0F2
0001AE82                            ; ===========================================================================
0001AE82                            
0001AE82                            loc_1A0B4:
0001AE82 0440 0070                  		subi.w	#$70,d0
0001AE86 6500                       		bcs.s	loc_1A0F2
0001AE88 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AE8E 5140                       		subq.w	#8,d0
0001AE90 6500                       		bcs.s	loc_1A0F2
0001AE92 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AE98 5140                       		subq.w	#8,d0
0001AE9A 6500                       		bcs.s	loc_1A0F2
0001AE9C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AEA2 5140                       		subq.w	#8,d0
0001AEA4 6500                       		bcs.s	loc_1A0F2
0001AEA6 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AEAC 5140                       		subq.w	#8,d0
0001AEAE 6500                       		bcs.s	loc_1A0F2
0001AEB0 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AEB6 0440 0038                  		subi.w	#$38,d0
0001AEBA 6500                       		bcs.s	loc_1A0F2
0001AEBC 4268 0010                  		clr.w	$10(a0)
0001AEC0                            
0001AEC0                            loc_1A0F2:
0001AEC0 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001AEC6 6500                       		bcs.s	loc_1A110
0001AEC8 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001AECE 317C 0240 0010             		move.w	#$240,$10(a0)
0001AED4 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001AEDA 5428 0034                  		addq.b	#2,$34(a0)
0001AEDE                            
0001AEDE                            loc_1A110:
0001AEDE 6000                       		bra.s	loc_1A15C
0001AEE0                            ; ===========================================================================
0001AEE0                            
0001AEE0                            loc_1A112:				; XREF: off_19E80
0001AEE0 4EB9 0000 E26E             		jsr	SpeedToPos
0001AEE6 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001AEEC 6500                       		bcs.s	loc_1A124
0001AEEE 4268 0010                  		clr.w	$10(a0)
0001AEF2                            
0001AEF2                            loc_1A124:
0001AEF2 0668 0034 0012             		addi.w	#$34,$12(a0)
0001AEF8 4A68 0012                  		tst.w	$12(a0)
0001AEFC 6B00                       		bmi.s	loc_1A142
0001AEFE 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001AF04 6500                       		bcs.s	loc_1A142
0001AF06 317C 0592 000C             		move.w	#$592,$C(a0)
0001AF0C 4268 0012                  		clr.w	$12(a0)
0001AF10                            
0001AF10                            loc_1A142:
0001AF10 3028 0010                  		move.w	$10(a0),d0
0001AF14 8068 0012                  		or.w	$12(a0),d0
0001AF18 6600                       		bne.s	loc_1A15C
0001AF1A 5428 0034                  		addq.b	#2,$34(a0)
0001AF1E 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AF24 117C 0001 0021             		move.b	#1,$21(a0)
0001AF2A                            
0001AF2A                            loc_1A15C:
0001AF2A 43FA F8B6                  		lea	Ani_obj82(pc),a1
0001AF2E 4EB9 0000 B300             		jsr	AnimateSprite
0001AF34                            
0001AF34                            loc_1A166:
0001AF34 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AF3A 6C00                       		bge.s	loc_1A172
0001AF3C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AF40                            
0001AF40                            loc_1A172:
0001AF40 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AF46 6C00                       		bge.s	locret_1A190
0001AF48 323C 001B                  		move.w	#$1B,d1
0001AF4C 343C 0070                  		move.w	#$70,d2
0001AF50 363C 0071                  		move.w	#$71,d3
0001AF54 3828 0008                  		move.w	8(a0),d4
0001AF58 4EF9 0001 0672             		jmp	SolidObject
0001AF5E                            ; ===========================================================================
0001AF5E                            
0001AF5E                            locret_1A190:
0001AF5E 4E75                       		rts	
0001AF60                            ; ===========================================================================
0001AF60                            
0001AF60                            loc_1A192:				; XREF: off_19E80
0001AF60 217C 0001 8B56 0004        		move.l	#Map_Eggman,4(a0)
0001AF68 317C 0400 0002             		move.w	#$400,2(a0)
0001AF6E 117C 0000 001C             		move.b	#0,$1C(a0)
0001AF74 08E8 0000 0022             		bset	#0,$22(a0)
0001AF7A 4EB9 0000 E26E             		jsr	SpeedToPos
0001AF80 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AF86 6400                       		bcc.s	loc_1A1D0
0001AF88 317C 0180 0010             		move.w	#$180,$10(a0)
0001AF8E 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AF94 117C 000F 0020             		move.b	#$F,$20(a0)
0001AF9A 5428 0034                  		addq.b	#2,$34(a0)
0001AF9E                            
0001AF9E                            loc_1A1D0:
0001AF9E 6000 FF8A                  		bra.w	loc_1A15C
0001AFA2                            ; ===========================================================================
0001AFA2                            
0001AFA2                            loc_1A1D4:				; XREF: off_19E80
0001AFA2 08E8 0000 0022             		bset	#0,$22(a0)
0001AFA8 4EB9 0000 E26E             		jsr	SpeedToPos
0001AFAE 4A68 0030                  		tst.w	$30(a0)
0001AFB2 6600                       		bne.s	loc_1A1FC
0001AFB4 4A28 0020                  		tst.b	$20(a0)
0001AFB8 6600                       		bne.s	loc_1A216
0001AFBA 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AFC0 303C 00AC                  		move.w	#$AC,d0
0001AFC4 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AFCA                            
0001AFCA                            loc_1A1FC:
0001AFCA 5368 0030                  		subq.w	#1,$30(a0)
0001AFCE 6600                       		bne.s	loc_1A216
0001AFD0 4A28 0022                  		tst.b	$22(a0)
0001AFD4 6A00                       		bpl.s	loc_1A210
0001AFD6 317C 0060 0012             		move.w	#$60,$12(a0)
0001AFDC 6000                       		bra.s	loc_1A216
0001AFDE                            ; ===========================================================================
0001AFDE                            
0001AFDE                            loc_1A210:
0001AFDE 117C 000F 0020             		move.b	#$F,$20(a0)
0001AFE4                            
0001AFE4                            loc_1A216:
0001AFE4 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AFEA 6D00                       		blt.s	loc_1A23A
0001AFEC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AFF2 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AFF8 4278 D014                  		clr.w	($FFFFD014).w
0001AFFC 4A68 0012                  		tst.w	$12(a0)
0001B000 6A00                       		bpl.s	loc_1A248
0001B002 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001B008                            
0001B008                            loc_1A23A:
0001B008 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001B00E 6D00                       		blt.s	loc_1A248
0001B010 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001B016                            
0001B016                            loc_1A248:
0001B016 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001B01C 6500                       		bcs.s	loc_1A260
0001B01E 4A28 0001                  		tst.b	1(a0)
0001B022 6B00                       		bmi.s	loc_1A260
0001B024 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001B02A 6000 FAF0                  		bra.w	Obj85_Delete
0001B02E                            ; ===========================================================================
0001B02E                            
0001B02E                            loc_1A260:
0001B02E 6000 FEFA                  		bra.w	loc_1A15C
0001B032                            ; ===========================================================================
0001B032                            
0001B032                            loc_1A264:				; XREF: Obj85_Index
0001B032 2268 0034                  		movea.l	$34(a0),a1
0001B036 1011                       		move.b	(a1),d0
0001B038 B010                       		cmp.b	(a0),d0
0001B03A 6600 FAE0                  		bne.w	Obj85_Delete
0001B03E 117C 0007 001C             		move.b	#7,$1C(a0)
0001B044 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001B04A 6C00                       		bge.s	loc_1A280
0001B04C 6000                       		bra.s	loc_1A2A6
0001B04E                            ; ===========================================================================
0001B04E                            
0001B04E                            loc_1A280:
0001B04E 4A69 0010                  		tst.w	$10(a1)
0001B052 6700                       		beq.s	loc_1A28C
0001B054 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B05A                            
0001B05A                            loc_1A28C:
0001B05A 43FA DA96                  		lea	Ani_Eggman(pc),a1
0001B05E 4EB9 0000 B300             		jsr	AnimateSprite
0001B064                            
0001B064                            loc_1A296:
0001B064 2268 0034                  		movea.l	$34(a0),a1
0001B068 3169 0008 0008             		move.w	8(a1),8(a0)
0001B06E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B074                            
0001B074                            loc_1A2A6:
0001B074 2268 0034                  		movea.l	$34(a0),a1
0001B078 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B07E 7003                       		moveq	#3,d0
0001B080 C028 0022                  		and.b	$22(a0),d0
0001B084 0228 00FC 0001             		andi.b	#-4,1(a0)
0001B08A 8128 0001                  		or.b	d0,1(a0)
0001B08E 4EF9 0000 E2A8             		jmp	DisplaySprite
0001B094                            ; ===========================================================================
0001B094                            
0001B094                            loc_1A2C6:				; XREF: Obj85_Index
0001B094 2268 0034                  		movea.l	$34(a0),a1
0001B098 1011                       		move.b	(a1),d0
0001B09A B010                       		cmp.b	(a0),d0
0001B09C 6600 FA7E                  		bne.w	Obj85_Delete
0001B0A0 0CA9 0001 8B56 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B0A8 6700                       		beq.s	loc_1A2E4
0001B0AA 117C 000A 001A             		move.b	#$A,$1A(a0)
0001B0B0 60C2                       		bra.s	loc_1A2A6
0001B0B2                            ; ===========================================================================
0001B0B2                            
0001B0B2                            loc_1A2E4:
0001B0B2 117C 0001 001C             		move.b	#1,$1C(a0)
0001B0B8 4A29 0021                  		tst.b	$21(a1)
0001B0BC 6F00                       		ble.s	loc_1A312
0001B0BE 117C 0006 001C             		move.b	#6,$1C(a0)
0001B0C4 217C 0001 8B56 0004        		move.l	#Map_Eggman,4(a0)
0001B0CC 317C 0400 0002             		move.w	#$400,2(a0)
0001B0D2 43FA DA1E                  		lea	Ani_Eggman(pc),a1
0001B0D6 4EB9 0000 B300             		jsr	AnimateSprite
0001B0DC 6000 FF86                  		bra.w	loc_1A296
0001B0E0                            ; ===========================================================================
0001B0E0                            
0001B0E0                            loc_1A312:
0001B0E0 4A28 0001                  		tst.b	1(a0)
0001B0E4 6A00 FA36                  		bpl.w	Obj85_Delete
0001B0E8 6100 D584                  		bsr.w	BossDefeated
0001B0EC 117C 0002 0018             		move.b	#2,$18(a0)
0001B0F2 117C 0000 001C             		move.b	#0,$1C(a0)
0001B0F8 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001B100 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001B106 43FA 0000                  		lea	Ani_obj85(pc),a1
0001B10A 4EB9 0000 B300             		jsr	AnimateSprite
0001B110 6000 FF52                  		bra.w	loc_1A296
0001B114                            ; ===========================================================================
0001B114                            
0001B114                            loc_1A346:				; XREF: Obj85_Index
0001B114 08E8 0000 0022             		bset	#0,$22(a0)
0001B11A 2268 0034                  		movea.l	$34(a0),a1
0001B11E 0CA9 0001 8B56 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B126 6700                       		beq.s	loc_1A35E
0001B128 6000 FF4A                  		bra.w	loc_1A2A6
0001B12C                            ; ===========================================================================
0001B12C                            
0001B12C                            loc_1A35E:
0001B12C 3169 0008 0008             		move.w	8(a1),8(a0)
0001B132 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B138 4A28 001E                  		tst.b	$1E(a0)
0001B13C 6600                       		bne.s	loc_1A376
0001B13E 117C 0014 001E             		move.b	#$14,$1E(a0)
0001B144                            
0001B144                            loc_1A376:
0001B144 5328 001E                  		subq.b	#1,$1E(a0)
0001B148 6E00                       		bgt.s	loc_1A38A
0001B14A 5228 001A                  		addq.b	#1,$1A(a0)
0001B14E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001B154 6E00 F9C6                  		bgt.w	Obj85_Delete
0001B158                            
0001B158                            loc_1A38A:
0001B158 6000 FF0A                  		bra.w	loc_1A296
0001B15C                            ; ===========================================================================
0001B15C                            
0001B15C                            loc_1A38E:				; XREF: Obj85_Index
0001B15C 117C 000B 001A             		move.b	#$B,$1A(a0)
0001B162 3038 D008                  		move.w	($FFFFD008).w,d0
0001B166 9068 0008                  		sub.w	8(a0),d0
0001B16A 6500                       		bcs.s	loc_1A3A6
0001B16C 4A28 0001                  		tst.b	1(a0)
0001B170 6A00 F9AA                  		bpl.w	Obj85_Delete
0001B174                            
0001B174                            loc_1A3A6:
0001B174 4EF9 0000 E2A8             		jmp	DisplaySprite
0001B17A                            ; ===========================================================================
0001B17A                            
0001B17A                            loc_1A3AC:				; XREF: Obj85_Index
0001B17A 117C 0000 001A             		move.b	#0,$1A(a0)
0001B180 08E8 0000 0022             		bset	#0,$22(a0)
0001B186 2268 0034                  		movea.l	$34(a0),a1
0001B18A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001B190 6600                       		bne.s	loc_1A3D0
0001B192 0CA9 0001 8B56 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B19A 6700 F980                  		beq.w	Obj85_Delete
0001B19E                            
0001B19E                            loc_1A3D0:
0001B19E 6000 FED4                  		bra.w	loc_1A2A6
0001B1A2                            ; ===========================================================================
0001B1A2                            Ani_obj85:
0001B1A2                            	include "_anim\obj85.asm"
0001B1A2                            ; ---------------------------------------------------------------------------
0001B1A2                            ; Animation script - Eggman (FZ)
0001B1A2                            ; ---------------------------------------------------------------------------
0001B1A2 0000                       		dc.w byte_1A3D6-Ani_obj85
0001B1A4 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001B1A8                            		even
0001B1A8                            		even
0001B1A8                            
0001B1A8                            Map_Eggman2:
0001B1A8                            	include "_maps\Eggman2.asm"
0001B1A8                            ; ---------------------------------------------------------------------------
0001B1A8                            ; Sprite mappings - Eggman (FZ)
0001B1A8                            ; ---------------------------------------------------------------------------
0001B1A8 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001B1AA 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001B1AC 06                         byte_1A3DE:	dc.b 6
0001B1AD E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001B1B2 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001B1B7 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001B1BC FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001B1C1 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001B1C6 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001B1CB 06                         byte_1A3FD:	dc.b 6
0001B1CC E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001B1D1 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001B1D6 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001B1DB FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001B1E0 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001B1E5 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001B1EA                            		even
0001B1EA                            		even
0001B1EA                            
0001B1EA                            Map_FZBoss:
0001B1EA                            	include "_maps\FZ boss.asm"
0001B1EA                            ; ---------------------------------------------------------------------------
0001B1EA                            ; Sprite mappings - boss (FZ)
0001B1EA                            ; ---------------------------------------------------------------------------
0001B1EA 0000                       		dc.w byte_1A422-Map_FZBoss
0001B1EC 0000                       		dc.w byte_1A42D-Map_FZBoss
0001B1EE 0000                       		dc.w byte_1A43D-Map_FZBoss
0001B1F0 02                         byte_1A422:	dc.b 2
0001B1F1 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001B1F6 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001B1FB 03                         byte_1A42D:	dc.b 3
0001B1FC 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001B201 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001B206 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001B20B 02                         byte_1A43D:	dc.b 2
0001B20C 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001B211 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001B216                            		even
0001B216                            		even
0001B216                            
0001B216                            ; ===========================================================================
0001B216                            
0001B216                            Obj84_Delete:
0001B216 4EF9 0000 E2E4             		jmp	DeleteObject
0001B21C                            ; ===========================================================================
0001B21C                            ; ---------------------------------------------------------------------------
0001B21C                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001B21C                            ; ---------------------------------------------------------------------------
0001B21C                            
0001B21C                            Obj84:					; XREF: Obj_Index
0001B21C 7000                       		moveq	#0,d0
0001B21E 1028 0024                  		move.b	$24(a0),d0
0001B222 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001B226 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001B22A                            ; ===========================================================================
0001B22A 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001B22C 0000                       		dc.w loc_1A4CE-Obj84_Index
0001B22E 0000                       		dc.w loc_1A57E-Obj84_Index
0001B230                            
0001B230 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001B234 2550 0620                  		dc.w $2550, $620
0001B238 2490 04C0                  		dc.w $2490, $4C0
0001B23C 2510 04C0                  		dc.w $2510, $4C0
0001B240                            ; ===========================================================================
0001B240                            
0001B240                            Obj84_Main:				; XREF: Obj84_Index
0001B240 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001B244 7000                       		moveq	#0,d0
0001B246 1028 0028                  		move.b	$28(a0),d0
0001B24A D040                       		add.w	d0,d0
0001B24C D2C0                       		adda.w	d0,a1
0001B24E 117C 0004 0001             		move.b	#4,1(a0)
0001B254 08E8 0007 0001             		bset	#7,1(a0)
0001B25A 08E8 0004 0001             		bset	#4,1(a0)
0001B260 317C 0300 0002             		move.w	#$300,2(a0)
0001B266 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001B26E 3159 0008                  		move.w	(a1)+,8(a0)
0001B272 3151 000C                  		move.w	(a1),$C(a0)
0001B276 3159 0038                  		move.w	(a1)+,$38(a0)
0001B27A 117C 0020 0016             		move.b	#$20,$16(a0)
0001B280 117C 0060 0017             		move.b	#$60,$17(a0)
0001B286 117C 0020 0019             		move.b	#$20,$19(a0)
0001B28C 117C 0060 0016             		move.b	#$60,$16(a0)
0001B292 117C 0003 0018             		move.b	#3,$18(a0)
0001B298 5428 0024                  		addq.b	#2,$24(a0)
0001B29C                            
0001B29C                            loc_1A4CE:				; XREF: Obj84_Index
0001B29C 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B2A2 6F00                       		ble.s	loc_1A4DC
0001B2A4 08E8 0001 0001             		bset	#1,1(a0)
0001B2AA                            
0001B2AA                            loc_1A4DC:
0001B2AA 42A8 003C                  		clr.l	$3C(a0)
0001B2AE 4A28 0029                  		tst.b	$29(a0)
0001B2B2 6700                       		beq.s	loc_1A4EA
0001B2B4 5428 0024                  		addq.b	#2,$24(a0)
0001B2B8                            
0001B2B8                            loc_1A4EA:
0001B2B8 2028 003C                  		move.l	$3C(a0),d0
0001B2BC 2228 0038                  		move.l	$38(a0),d1
0001B2C0 D280                       		add.l	d0,d1
0001B2C2 4841                       		swap	d1
0001B2C4 3141 000C                  		move.w	d1,$C(a0)
0001B2C8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001B2CE 6600                       		bne.s	loc_1A524
0001B2D0 4A68 0030                  		tst.w	$30(a0)
0001B2D4 6A00                       		bpl.s	loc_1A524
0001B2D6 70F6                       		moveq	#-$A,d0
0001B2D8 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B2DE 6F00                       		ble.s	loc_1A514
0001B2E0 700E                       		moveq	#$E,d0
0001B2E2                            
0001B2E2                            loc_1A514:
0001B2E2 D240                       		add.w	d0,d1
0001B2E4 2268 0034                  		movea.l	$34(a0),a1
0001B2E8 3341 000C                  		move.w	d1,$C(a1)
0001B2EC 3368 0008 0008             		move.w	8(a0),8(a1)
0001B2F2                            
0001B2F2                            loc_1A524:
0001B2F2 323C 002B                  		move.w	#$2B,d1
0001B2F6 343C 0060                  		move.w	#$60,d2
0001B2FA 363C 0061                  		move.w	#$61,d3
0001B2FE 3828 0008                  		move.w	8(a0),d4
0001B302 4EB9 0001 0672             		jsr	SolidObject
0001B308 7000                       		moveq	#0,d0
0001B30A 3228 003C                  		move.w	$3C(a0),d1
0001B30E 6A00                       		bpl.s	loc_1A550
0001B310 4441                       		neg.w	d1
0001B312 5141                       		subq.w	#8,d1
0001B314 6500                       		bcs.s	loc_1A55C
0001B316 5200                       		addq.b	#1,d0
0001B318 E841                       		asr.w	#4,d1
0001B31A D041                       		add.w	d1,d0
0001B31C 6000                       		bra.s	loc_1A55C
0001B31E                            ; ===========================================================================
0001B31E                            
0001B31E                            loc_1A550:
0001B31E 0441 0027                  		subi.w	#$27,d1
0001B322 6500                       		bcs.s	loc_1A55C
0001B324 5200                       		addq.b	#1,d0
0001B326 E841                       		asr.w	#4,d1
0001B328 D041                       		add.w	d1,d0
0001B32A                            
0001B32A                            loc_1A55C:
0001B32A 1140 001A                  		move.b	d0,$1A(a0)
0001B32E 3038 D008                  		move.w	($FFFFD008).w,d0
0001B332 9068 0008                  		sub.w	8(a0),d0
0001B336 6B00                       		bmi.s	loc_1A578
0001B338 0440 0140                  		subi.w	#$140,d0
0001B33C 6B00                       		bmi.s	loc_1A578
0001B33E 4A28 0001                  		tst.b	1(a0)
0001B342 6A00 FED2                  		bpl.w	Obj84_Delete
0001B346                            
0001B346                            loc_1A578:
0001B346 4EF9 0000 E2A8             		jmp	DisplaySprite
0001B34C                            ; ===========================================================================
0001B34C                            
0001B34C                            loc_1A57E:				; XREF: Obj84_Index
0001B34C 7000                       		moveq	#0,d0
0001B34E 1028 0028                  		move.b	$28(a0),d0
0001B352 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001B356 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001B35A 6000 FF5C                  		bra.w	loc_1A4EA
0001B35E                            ; ===========================================================================
0001B35E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001B360 0000                       		dc.w loc_1A598-off_1A590
0001B362 0000                       		dc.w loc_1A604-off_1A590
0001B364 0000                       		dc.w loc_1A604-off_1A590
0001B366                            ; ===========================================================================
0001B366                            
0001B366                            loc_1A598:				; XREF: off_1A590
0001B366 4A28 0029                  		tst.b	$29(a0)
0001B36A 6600                       		bne.s	loc_1A5D4
0001B36C 2268 0034                  		movea.l	$34(a0),a1
0001B370 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B376 6600                       		bne.s	loc_1A5B4
0001B378 6100 D2F4                  		bsr.w	BossDefeated
0001B37C 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001B384                            
0001B384                            loc_1A5B4:
0001B384 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001B38C 6400                       		bcc.s	locret_1A602
0001B38E 42A8 003C                  		clr.l	$3C(a0)
0001B392 2268 0034                  		movea.l	$34(a0),a1
0001B396 5369 0032                  		subq.w	#1,$32(a1)
0001B39A 4269 0030                  		clr.w	$30(a1)
0001B39E 5528 0024                  		subq.b	#2,$24(a0)
0001B3A2 4E75                       		rts	
0001B3A4                            ; ===========================================================================
0001B3A4                            
0001B3A4                            loc_1A5D4:
0001B3A4 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001B3AA 6C00                       		bge.s	loc_1A5E4
0001B3AC 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001B3B4                            
0001B3B4                            loc_1A5E4:
0001B3B4 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001B3BC 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001B3C2 6E00                       		bgt.s	locret_1A602
0001B3C4 4268 003E                  		clr.w	$3E(a0)
0001B3C8 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001B3CE 4228 0029                  		clr.b	$29(a0)
0001B3D2                            
0001B3D2                            locret_1A602:
0001B3D2 4E75                       		rts	
0001B3D4                            ; ===========================================================================
0001B3D4                            
0001B3D4                            loc_1A604:				; XREF: off_1A590
0001B3D4 08E8 0001 0001             		bset	#1,1(a0)
0001B3DA 4A28 0029                  		tst.b	$29(a0)
0001B3DE 6600                       		bne.s	loc_1A646
0001B3E0 2268 0034                  		movea.l	$34(a0),a1
0001B3E4 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B3EA 6600                       		bne.s	loc_1A626
0001B3EC 6100 D280                  		bsr.w	BossDefeated
0001B3F0 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B3F8                            
0001B3F8                            loc_1A626:
0001B3F8 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B400 6400                       		bcc.s	locret_1A674
0001B402 42A8 003C                  		clr.l	$3C(a0)
0001B406 2268 0034                  		movea.l	$34(a0),a1
0001B40A 5369 0032                  		subq.w	#1,$32(a1)
0001B40E 4269 0030                  		clr.w	$30(a1)
0001B412 5528 0024                  		subq.b	#2,$24(a0)
0001B416 4E75                       		rts	
0001B418                            ; ===========================================================================
0001B418                            
0001B418                            loc_1A646:
0001B418 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B41E 6D00                       		blt.s	loc_1A656
0001B420 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B428                            
0001B428                            loc_1A656:
0001B428 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B430 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B436 6D00                       		blt.s	locret_1A674
0001B438 4268 003E                  		clr.w	$3E(a0)
0001B43C 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B442 4228 0029                  		clr.b	$29(a0)
0001B446                            
0001B446                            locret_1A674:
0001B446 4E75                       		rts	
0001B448                            ; ===========================================================================
0001B448                            ; ---------------------------------------------------------------------------
0001B448                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B448                            ; ---------------------------------------------------------------------------
0001B448                            Map_obj84:
0001B448                            	include "_maps\obj84.asm"
0001B448                            ; ---------------------------------------------------------------------------
0001B448                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B448                            ; ---------------------------------------------------------------------------
0001B448 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B44C 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B450 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B454 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B458 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B45C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B460 06                         byte_1A68E:	dc.b 6
0001B461 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B466 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B46B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B470 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B475 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B47A B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B47F 08                         byte_1A6AD:	dc.b 8
0001B480 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B485 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B48A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B48F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B494 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B499 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B49E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B4A3 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B4A8 0A                         byte_1A6D6:	dc.b $A
0001B4A9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B4AE A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B4B3 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B4B8 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B4BD B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B4C2 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B4C7 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B4CC D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B4D1 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B4D6 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B4DB 0C                         byte_1A709:	dc.b $C
0001B4DC A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B4E1 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B4E6 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B4EB B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B4F0 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B4F5 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B4FA D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B4FF D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B504 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B509 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B50E 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B513 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B518 0D                         byte_1A746:	dc.b $D
0001B519 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B51E A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B523 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B528 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B52D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B532 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B537 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B53C D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B541 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B546 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B54B 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B550 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B555 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B55A 0E                         byte_1A788:	dc.b $E
0001B55B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B560 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B565 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B56A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B56F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B574 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B579 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B57E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B583 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B588 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B58D 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B592 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B597 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B59C 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B5A1 02                         byte_1A7CF:	dc.b 2
0001B5A2 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B5A7 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B5AC                            		even
0001B5AC                            		even
0001B5AC                            
0001B5AC                            ; ===========================================================================
0001B5AC                            ; ---------------------------------------------------------------------------
0001B5AC                            ; Object 86 - energy balls (FZ)
0001B5AC                            ; ---------------------------------------------------------------------------
0001B5AC                            
0001B5AC                            Obj86:					; XREF: Obj_Index
0001B5AC 7000                       		moveq	#0,d0
0001B5AE 1028 0024                  		move.b	$24(a0),d0
0001B5B2 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B5B6 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B5BA                            ; ===========================================================================
0001B5BA 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B5BC 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B5BE 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B5C0 0000                       		dc.w loc_1A962-Obj86_Index
0001B5C2 0000                       		dc.w loc_1A982-Obj86_Index
0001B5C4                            ; ===========================================================================
0001B5C4                            
0001B5C4                            Obj86_Main:				; XREF: Obj86_Index
0001B5C4 317C 2588 0008             		move.w	#$2588,8(a0)
0001B5CA 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B5D0 317C 0300 0002             		move.w	#$300,2(a0)
0001B5D6 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B5DE 117C 0000 001C             		move.b	#0,$1C(a0)
0001B5E4 117C 0003 0018             		move.b	#3,$18(a0)
0001B5EA 117C 0008 0017             		move.b	#8,$17(a0)
0001B5F0 117C 0008 0016             		move.b	#8,$16(a0)
0001B5F6 117C 0004 0001             		move.b	#4,1(a0)
0001B5FC 08E8 0007 0001             		bset	#7,1(a0)
0001B602 5428 0024                  		addq.b	#2,$24(a0)
0001B606                            
0001B606                            Obj86_Generator:			; XREF: Obj86_Index
0001B606 2268 0034                  		movea.l	$34(a0),a1
0001B60A 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B610 6600                       		bne.s	loc_1A850
0001B612 10BC 003F                  		move.b	#$3F,(a0)
0001B616 117C 0000 0024             		move.b	#0,$24(a0)
0001B61C 4EF9 0000 E2A8             		jmp	DisplaySprite
0001B622                            ; ===========================================================================
0001B622                            
0001B622                            loc_1A850:
0001B622 117C 0000 001C             		move.b	#0,$1C(a0)
0001B628 4A28 0029                  		tst.b	$29(a0)
0001B62C 6700                       		beq.s	loc_1A86C
0001B62E 5428 0024                  		addq.b	#2,$24(a0)
0001B632 117C 0001 001C             		move.b	#1,$1C(a0)
0001B638 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B63E                            
0001B63E                            loc_1A86C:
0001B63E 323C 0013                  		move.w	#$13,d1
0001B642 343C 0008                  		move.w	#8,d2
0001B646 363C 0011                  		move.w	#$11,d3
0001B64A 3828 0008                  		move.w	8(a0),d4
0001B64E 4EB9 0001 0672             		jsr	SolidObject
0001B654 3038 D008                  		move.w	($FFFFD008).w,d0
0001B658 9068 0008                  		sub.w	8(a0),d0
0001B65C 6B00                       		bmi.s	loc_1A89A
0001B65E 0440 0140                  		subi.w	#$140,d0
0001B662 6B00                       		bmi.s	loc_1A89A
0001B664 4A28 0001                  		tst.b	1(a0)
0001B668 6A00 FBAC                  		bpl.w	Obj84_Delete
0001B66C                            
0001B66C                            loc_1A89A:
0001B66C 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B670 4EB9 0000 B300             		jsr	AnimateSprite
0001B676 4EF9 0000 E2A8             		jmp	DisplaySprite
0001B67C                            ; ===========================================================================
0001B67C                            
0001B67C                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B67C 4A28 0029                  		tst.b	$29(a0)
0001B680 6700 0000                  		beq.w	loc_1A954
0001B684 4228 0029                  		clr.b	$29(a0)
0001B688 D068 0030                  		add.w	$30(a0),d0
0001B68C 0240 001E                  		andi.w	#$1E,d0
0001B690 D4C0                       		adda.w	d0,a2
0001B692 5868 0030                  		addq.w	#4,$30(a0)
0001B696 4268 0032                  		clr.w	$32(a0)
0001B69A 7403                       		moveq	#3,d2
0001B69C                            
0001B69C                            Obj86_Loop:
0001B69C 4EB9 0000 E744             		jsr	SingleObjLoad2
0001B6A2 6600 0000                  		bne.w	loc_1A954
0001B6A6 12BC 0086                  		move.b	#$86,(a1)
0001B6AA 3368 0008 0008             		move.w	8(a0),8(a1)
0001B6B0 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B6B6 137C 0008 0024             		move.b	#8,$24(a1)
0001B6BC 337C 2300 0002             		move.w	#$2300,2(a1)
0001B6C2 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B6CA 137C 000C 0016             		move.b	#$C,$16(a1)
0001B6D0 137C 000C 0017             		move.b	#$C,$17(a1)
0001B6D6 137C 0000 0020             		move.b	#0,$20(a1)
0001B6DC 137C 0003 0018             		move.b	#3,$18(a1)
0001B6E2 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B6E8 137C 0004 0001             		move.b	#4,1(a1)
0001B6EE 08E9 0007 0001             		bset	#7,1(a1)
0001B6F4 2348 0034                  		move.l	a0,$34(a1)
0001B6F8 4EB9 0000 2D60             		jsr	(RandomNumber).l
0001B6FE 3228 0032                  		move.w	$32(a0),d1
0001B702 C3FC FFB1                  		muls.w	#-$4F,d1
0001B706 0641 2578                  		addi.w	#$2578,d1
0001B70A 0240 001F                  		andi.w	#$1F,d0
0001B70E 0440 0010                  		subi.w	#$10,d0
0001B712 D041                       		add.w	d1,d0
0001B714 3340 0030                  		move.w	d0,$30(a1)
0001B718 5268 0032                  		addq.w	#1,$32(a0)
0001B71C 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B722 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B726                            
0001B726                            loc_1A954:
0001B726 4A68 0032                  		tst.w	$32(a0)
0001B72A 6600                       		bne.s	loc_1A95E
0001B72C 5428 0024                  		addq.b	#2,$24(a0)
0001B730                            
0001B730                            loc_1A95E:
0001B730 6000 FF0C                  		bra.w	loc_1A86C
0001B734                            ; ===========================================================================
0001B734                            
0001B734                            loc_1A962:				; XREF: Obj86_Index
0001B734 117C 0002 001C             		move.b	#2,$1C(a0)
0001B73A 4A68 0038                  		tst.w	$38(a0)
0001B73E 6600                       		bne.s	loc_1A97E
0001B740 117C 0002 0024             		move.b	#2,$24(a0)
0001B746 2268 0034                  		movea.l	$34(a0),a1
0001B74A 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B750                            
0001B750                            loc_1A97E:
0001B750 6000 FEEC                  		bra.w	loc_1A86C
0001B754                            ; ===========================================================================
0001B754                            
0001B754                            loc_1A982:				; XREF: Obj86_Index
0001B754 7000                       		moveq	#0,d0
0001B756 1028 0025                  		move.b	$25(a0),d0
0001B75A 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B75E 4EFB 0000                  		jmp	Obj86_Index2(pc,d0.w)
0001B762                            ; ===========================================================================
0001B762 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B764 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B766 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2	; orb random 1
0001B768 0000                       		dc.w Obj86_Ball_Sine-Obj86_Index2	; rob random 2
0001B76A 0000                       		dc.w Obj86_Ball_Explode-Obj86_Index2	; orb random 3
0001B76C 0000                       		dc.w Obj86_Ball_Speed-Obj86_Index2	; yeah you get it
0001B76E 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B770 0000                       		dc.w Obj86_Ball_Homing-Obj86_Index2
0001B772 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B774 0000                       		dc.w Obj86_Ball_Static-Obj86_Index2
0001B776                            ; ===========================================================================
0001B776                            
0001B776                            loc_1A9A6:				; XREF: Obj86_Index2
0001B776 3028 0030                  		move.w	$30(a0),d0
0001B77A 9068 0008                  		sub.w	8(a0),d0
0001B77E E940                       		asl.w	#4,d0
0001B780 3140 0010                  		move.w	d0,$10(a0)
0001B784 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B78A 5428 0025                  		addq.b	#2,$25(a0)
0001B78E                            
0001B78E                            Obj86_Ball_Animate:
0001B78E 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B792 4EB9 0000 B300             		jsr	AnimateSprite
0001B798 4EF9 0000 E2A8             		jmp	DisplaySprite
0001B79E                            ; ===========================================================================
0001B79E                            
0001B79E                            loc_1A9C0:				; XREF: Obj86_Index2
0001B79E 4A68 0010                  		tst.w	$10(a0)
0001B7A2 6700                       		beq.s	loc_1A9E6
0001B7A4 4EB9 0000 E26E             		jsr	SpeedToPos
0001B7AA 3028 0008                  		move.w	8(a0),d0
0001B7AE 9068 0030                  		sub.w	$30(a0),d0
0001B7B2 6400                       		bcc.s	loc_1A9E6
0001B7B4 4268 0010                  		clr.w	$10(a0)
0001B7B8 D168 0008                  		add.w	d0,8(a0)
0001B7BC 2268 0034                  		movea.l	$34(a0),a1
0001B7C0 5369 0032                  		subq.w	#1,$32(a1)
0001B7C4                            
0001B7C4                            loc_1A9E6:
0001B7C4 117C 0000 001C             		move.b	#0,$1C(a0)
0001B7CA 5368 0028                  		subq.w	#1,$28(a0)
0001B7CE 6600                       		bne.s	locret_1AA1C
0001B7D0 4EB8 2D60                  		jsr	RandomNumber
0001B7D4 0240 000E                  		and.w	#7*2,d0
0001B7D8 5840                       		addq.w	#2*2,d0
0001B7DA 1140 0025                  		move.b	d0,$25(a0)	; set routine
0001B7DE 4840                       		swap	d0
0001B7E0 3140 0028                  		move.w	d0,$28(a0)	; set other number
0001B7E4 117C 0001 001C             		move.b	#1,$1C(a0)
0001B7EA 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B7F0 3038 D008                  		move.w	($FFFFD008).w,d0
0001B7F4 9068 0008                  		sub.w	8(a0),d0
0001B7F8 3140 0010                  		move.w	d0,$10(a0)
0001B7FC 317C 0140 0012             		move.w	#$140,$12(a0)
0001B802                            
0001B802                            locret_1AA1C:
0001B802 6000 FF8A                  		bra.w	Obj86_Ball_Animate
0001B806                            ; ===========================================================================
0001B806                            
0001B806                            Obj86_Ball_Explode:
0001B806 5328 0028                  		subq.b	#1,$28(a0)
0001B80A 6A00 FF82                  		bpl.w	Obj86_Ball_Animate
0001B80E 2268 0034                  		movea.l	$34(a0),a1
0001B812 5369 0038                  		subq.w	#1,$38(a1)
0001B816 2248                       		move.l	a0,a1
0001B818 7400                       		moveq	#0,d2	; GMZ
0001B81A 720F                       		moveq	#16-1,d1	; GMZ: Amount of explosion objects
0001B81C 6000                       		bra.s	@start
0001B81E                            @loop:
0001B81E 4EB9 0000 E72E             		jsr	SingleObjLoad
0001B824 6600                       		bne.s	@exit
0001B826 3368 0008 0008             		move.w	8(a0),8(a1)
0001B82C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B832                            @start:
0001B832 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B836 137C 0002 0024             		move.b	#2,$24(a1)	; ML: no animal
0001B83C 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype:
0001B840 5802                       		addq.b	#4,d2
0001B842 51C9 FFDA                  		dbf	d1,@loop
0001B846                            @exit:
0001B846 6000 FF46                  		bra.w	Obj86_Ball_Animate
0001B84A                            ; ===========================================================================
0001B84A                            
0001B84A                            Obj86_Ball_Sine:
0001B84A 1028 0028                  		move.b	$28(a0),d0
0001B84E 5828 0028                  		addq.b	#4,$28(a0)
0001B852 4EB8 2D86                  		jsr	CalcSine
0001B856 C1FC 0002                  		muls.w	#2,d0
0001B85A 3140 0010                  		move.w	d0,$10(a0)
0001B85E                            
0001B85E 1028 0029                  		move.b	$29(a0),d0
0001B862 5828 0029                  		addq.b	#4,$29(a0)
0001B866 4EB8 2D86                  		jsr	CalcSine
0001B86A 4A40                       		tst.w	d0
0001B86C 6B00                       		bmi.s	@upwards
0001B86E E548                       		lsl.w	#2,d0		; x4 go down faster
0001B870                            @upwards:
0001B870 3140 0012                  		move.w	d0,$12(a0)
0001B874 6000 0000                  		bra.w	loc_1AA1E
0001B878                            ; ===========================================================================
0001B878                            
0001B878                            Obj86_Ball_Homing:
0001B878 0C28 00F0 0028             		cmp.b	#$F0,$28(a0)
0001B87E 6400                       		bhs.s	@homer
0001B880 0C28 00E0 0028             		cmp.b	#$E0,$28(a0)
0001B886 6400                       		bhs.s	Obj86_Ball_Vanish
0001B888 5328 0028                  		subq.b	#1,$28(a0)
0001B88C 6400                       		bcc.s	@nomorehoming
0001B88E 3038 D008                  		move.w	($FFFFD008).w,d0
0001B892 9068 0008                  		sub.w	8(a0),d0
0001B896 D168 0010                  		add.w	d0,$10(a0)
0001B89A D168 0010                  		add.w	d0,$10(a0)
0001B89E                            @nomorehoming:
0001B89E 6000 0000                  		bra.w	loc_1AA1E
0001B8A2                            @homer:
0001B8A2 0C28 00DF 0028             		cmp.b	#$DF,$28(a0)
0001B8A8 60F4                       		bra.s	@nomorehoming	; next frame ig
0001B8AA                            ; ===========================================================================
0001B8AA                            
0001B8AA                            Obj86_Ball_Speed:
0001B8AA 4268 0010                  		clr.w	$10(a0)
0001B8AE 7000                       		moveq	#0,d0
0001B8B0 1028 0028                  		move.b	$28(a0),d0
0001B8B4 E448                       		lsr.w	#2,d0
0001B8B6 D168 0012                  		add.w	d0,$12(a0)
0001B8BA 1028 0029                  		move.b	$29(a0),d0
0001B8BE D128 0028                  		add.b	d0,$28(a0)
0001B8C2 6000 0000                  		bra.w	loc_1AA1E
0001B8C6                            ; ===========================================================================
0001B8C6                            
0001B8C6                            Obj86_Ball_Vanish:
0001B8C6 303C 00E1                  		move.w	#$E1,d0
0001B8CA 4EB9 0000 15EC             		jsr	(PlaySound_Special).l
0001B8D0 6000 0000                  		bra.w	loc_1AA34
0001B8D4                            ; ===========================================================================
0001B8D4                            
0001B8D4                            Obj86_Ball_Static:
0001B8D4 4268 0010                  		clr.w	$10(a0)
0001B8D8 7000                       		moveq	#0,d0
0001B8DA 7200                       		moveq	#0,d1
0001B8DC 1028 0028                  		move.b	$28(a0),d0
0001B8E0 1228 0029                  		move.b	$29(a0),d1
0001B8E4 D041                       		add.w	d1,d0
0001B8E6 3140 0012                  		move.w	d0,$12(a0)
0001B8EA 6000 0000                  		bra.w	loc_1AA1E
0001B8EE                            ; ===========================================================================
0001B8EE                            
0001B8EE                            Obj86_Ball_Standard:
0001B8EE                            loc_1AA1E:
0001B8EE 4EB9 0000 E26E             		jsr	SpeedToPos
0001B8F4 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B8FA 6500 FE92                  		blo.w	Obj86_Ball_Animate
0001B8FE                            loc_1AA34:
0001B8FE 2268 0034                  		movea.l	$34(a0),a1
0001B902 5369 0038                  		subq.w	#1,$38(a1)
0001B906 6000 F90E                  		bra.w	Obj84_Delete
0001B90A                            ; ===========================================================================
0001B90A                            Ani_obj86:
0001B90A                            	include "_anim\obj86.asm"
0001B90A                            ; ---------------------------------------------------------------------------
0001B90A                            ; Animation script - energy ball launcher (FZ)
0001B90A                            ; ---------------------------------------------------------------------------
0001B90A 0000                       		dc.w byte_1AA46-Ani_obj86
0001B90C 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B90E 0000                       		dc.w byte_1AA50-Ani_obj86
0001B910 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B914 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B91A 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B920                            		even
0001B920                            		even
0001B920                            
0001B920                            ; ---------------------------------------------------------------------------
0001B920                            ; Sprite mappings - energy ball	launcher (FZ)
0001B920                            ; ---------------------------------------------------------------------------
0001B920                            Map_obj86:
0001B920                            	include "_maps\obj86.asm"
0001B920                            ; ---------------------------------------------------------------------------
0001B920                            ; Sprite mappings - energy ball	launcher (FZ)
0001B920                            ; ---------------------------------------------------------------------------
0001B920 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B924 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B928 01                         byte_1AA5E:	dc.b 1
0001B929 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B92E 01                         byte_1AA64:	dc.b 1
0001B92F F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B934 01                         byte_1AA6A:	dc.b 1
0001B935 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B93A 01                         byte_1AA70:	dc.b 1
0001B93B F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B940                            		even
0001B940                            		even
0001B940                            
0001B940                            Ani_obj86a:
0001B940                            	include "_anim\obj86a.asm"
0001B940                            ; ---------------------------------------------------------------------------
0001B940                            ; Animation script - energy balls (FZ)
0001B940                            ; ---------------------------------------------------------------------------
0001B940 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B942 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B944 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B953 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B962 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B966 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B970                            		even
0001B970                            		even
0001B970                            
0001B970                            ; ---------------------------------------------------------------------------
0001B970                            ; Sprite mappings - energy balls (FZ)
0001B970                            ; ---------------------------------------------------------------------------
0001B970                            Map_obj86a:
0001B970                            	include "_maps\obj86a.asm"
0001B970                            ; ---------------------------------------------------------------------------
0001B970                            ; Sprite mappings - energy balls (FZ)
0001B970                            ; ---------------------------------------------------------------------------
0001B970 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B974 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B978 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B97C 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B980 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B984 0000                       		dc.w byte_1AB20-Map_obj86a
0001B986 02                         byte_1AABC:	dc.b 2
0001B987 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B98C 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B991 02                         byte_1AAC7:	dc.b 2
0001B992 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B997 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B99C 02                         byte_1AAD2:	dc.b 2
0001B99D F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B9A2 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B9A7 02                         byte_1AADD:	dc.b 2
0001B9A8 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B9AD 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B9B2 02                         byte_1AAE8:	dc.b 2
0001B9B3 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B9B8 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B9BD 02                         byte_1AAF3:	dc.b 2
0001B9BE F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B9C3 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B9C8 01                         byte_1AAFE:	dc.b 1
0001B9C9 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B9CE 01                         byte_1AB04:	dc.b 1
0001B9CF F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B9D4 02                         byte_1AB0A:	dc.b 2
0001B9D5 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B9DA 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B9DF 02                         byte_1AB15:	dc.b 2
0001B9E0 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B9E5 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B9EA 00                         byte_1AB20:	dc.b 0
0001B9EC 00                         		even
0001B9EC 00                         		even
0001B9EC                            
0001B9EC                            ; ===========================================================================
0001B9EC                            ; ---------------------------------------------------------------------------
0001B9EC                            ; Object 3E - prison capsule
0001B9EC                            ; ---------------------------------------------------------------------------
0001B9EC                            
0001B9EC                            Obj3E:					; XREF: Obj_Index
0001B9EC 7000                       		moveq	#0,d0
0001B9EE 1028 0024                  		move.b	$24(a0),d0
0001B9F2 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B9F6 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B9FA 3028 0008                  		move.w	8(a0),d0
0001B9FE 0240 FF80                  		andi.w	#$FF80,d0
0001BA02 3238 F700                  		move.w	($FFFFF700).w,d1
0001BA06 0441 0080                  		subi.w	#$80,d1
0001BA0A 0241 FF80                  		andi.w	#$FF80,d1
0001BA0E 9041                       		sub.w	d1,d0
0001BA10 0C40 0280                  		cmpi.w	#$280,d0
0001BA14 6200                       		bhi.s	Obj3E_Delete
0001BA16 4EF9 0000 E2A8             		jmp	DisplaySprite
0001BA1C                            ; ===========================================================================
0001BA1C                            
0001BA1C                            Obj3E_Delete:
0001BA1C 4EF9 0000 E2E4             		jmp	DeleteObject
0001BA22                            ; ===========================================================================
0001BA22 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001BA24 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001BA26 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001BA28 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BA2A 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BA2C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BA2E 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001BA30 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001BA32                            
0001BA32 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001BA36 040C 0501                  		dc.b 4,	$C, 5, 1
0001BA3A 0610 0403                  		dc.b 6,	$10, 4,	3
0001BA3E 0810 0305                  		dc.b 8,	$10, 3,	5
0001BA42                            ; ===========================================================================
0001BA42                            
0001BA42                            Obj3E_Main:				; XREF: Obj3E_Index
0001BA42 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001BA4A 317C 049D 0002             		move.w	#$49D,2(a0)
0001BA50 117C 0004 0001             		move.b	#4,1(a0)
0001BA56 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001BA5C 7000                       		moveq	#0,d0
0001BA5E 1028 0028                  		move.b	$28(a0),d0
0001BA62 E548                       		lsl.w	#2,d0
0001BA64 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001BA68 1159 0024                  		move.b	(a1)+,$24(a0)
0001BA6C 1159 0019                  		move.b	(a1)+,$19(a0)
0001BA70 1159 0018                  		move.b	(a1)+,$18(a0)
0001BA74 1159 001A                  		move.b	(a1)+,$1A(a0)
0001BA78 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001BA7C 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001BA7E 117C 0006 0020             		move.b	#6,$20(a0)
0001BA84 117C 0008 0021             		move.b	#8,$21(a0)
0001BA8A                            
0001BA8A                            Obj3E_Not02:
0001BA8A 4E75                       		rts	
0001BA8C                            ; ===========================================================================
0001BA8C                            
0001BA8C                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001BA8C 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001BA92 6700                       		beq.s	Obj3E_ChkOpened
0001BA94 323C 002B                  		move.w	#$2B,d1
0001BA98 343C 0018                  		move.w	#$18,d2
0001BA9C 363C 0018                  		move.w	#$18,d3
0001BAA0 3828 0008                  		move.w	8(a0),d4
0001BAA4 4EF9 0001 0672             		jmp	SolidObject
0001BAAA                            ; ===========================================================================
0001BAAA                            
0001BAAA                            Obj3E_ChkOpened:
0001BAAA 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001BAAE 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001BAB0 4228 0025                  		clr.b	$25(a0)
0001BAB4 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BABA 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001BAC0                            
0001BAC0                            Obj3E_DoOpen:
0001BAC0 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001BAC6 4E75                       		rts	
0001BAC8                            ; ===========================================================================
0001BAC8                            
0001BAC8                            Obj3E_Switched:				; XREF: Obj3E_Index
0001BAC8 323C 0017                  		move.w	#$17,d1
0001BACC 343C 0008                  		move.w	#8,d2
0001BAD0 363C 0008                  		move.w	#8,d3
0001BAD4 3828 0008                  		move.w	8(a0),d4
0001BAD8 4EB9 0001 0672             		jsr	SolidObject
0001BADE 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001BAE4 4EB9 0000 B300             		jsr	AnimateSprite
0001BAEA 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001BAF0 4A28 0025                  		tst.b	$25(a0)
0001BAF4 6700                       		beq.s	locret_1AC60
0001BAF6 5068 000C                  		addq.w	#8,$C(a0)
0001BAFA 117C 000A 0024             		move.b	#$A,$24(a0)
0001BB00 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001BB06 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001BB0A 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001BB0E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001BB14 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001BB1A 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001BB1C 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001BB22 6000                       		bra.s	Obj3E_ContinueCode
0001BB24                            
0001BB24                            Obj3E_MoveLeft:
0001BB24 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001BB2A                            
0001BB2A                            Obj3E_ContinueCode:
0001BB2A 4228 0025                  		clr.b	$25(a0)
0001BB2E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BB34 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001BB3A                            
0001BB3A                            locret_1AC60:
0001BB3A 4E75                       		rts	
0001BB3C                            ; ===========================================================================
0001BB3C                            
0001BB3C                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001BB3C 7007                       		moveq	#7,d0
0001BB3E C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001BB42 6600                       		bne.s	loc_1ACA0
0001BB44 4EB9 0000 E72E             		jsr	SingleObjLoad
0001BB4A 6600                       		bne.s	loc_1ACA0
0001BB4C 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001BB50 3368 0008 0008             		move.w	8(a0),8(a1)
0001BB56 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BB5C 4EB9 0000 2D60             		jsr	(RandomNumber).l
0001BB62 7200                       		moveq	#0,d1
0001BB64 1200                       		move.b	d0,d1
0001BB66 E409                       		lsr.b	#2,d1
0001BB68 0441 0020                  		subi.w	#$20,d1
0001BB6C D369 0008                  		add.w	d1,8(a1)
0001BB70 E048                       		lsr.w	#8,d0
0001BB72 E608                       		lsr.b	#3,d0
0001BB74 D169 000C                  		add.w	d0,$C(a1)
0001BB78                            
0001BB78                            loc_1ACA0:
0001BB78 5368 001E                  		subq.w	#1,$1E(a0)
0001BB7C 6700                       		beq.s	Obj3E_MakeAnimal
0001BB7E 4E75                       		rts	
0001BB80                            ; ===========================================================================
0001BB80                            
0001BB80                            Obj3E_MakeAnimal:
0001BB80 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001BB86 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001BB8C 117C 0006 001A             		move.b	#6,$1A(a0)
0001BB92 317C 0096 001E             		move.w	#$96,$1E(a0)
0001BB98 0668 0020 000C             		addi.w	#$20,$C(a0)
0001BB9E 7C07                       		moveq	#7,d6
0001BBA0 3A3C 009A                  		move.w	#$9A,d5
0001BBA4 78E4                       		moveq	#-$1C,d4
0001BBA6                            
0001BBA6                            Obj3E_Loop:
0001BBA6 4EB9 0000 E72E             		jsr	SingleObjLoad
0001BBAC 6600                       		bne.s	locret_1ACF8
0001BBAE 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001BBB2 3368 0008 0008             		move.w	8(a0),8(a1)
0001BBB8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BBBE D969 0008                  		add.w	d4,8(a1)
0001BBC2 5E44                       		addq.w	#7,d4
0001BBC4 3345 0036                  		move.w	d5,$36(a1)
0001BBC8 5145                       		subq.w	#8,d5
0001BBCA 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001BBCE                            
0001BBCE                            locret_1ACF8:
0001BBCE 4E75                       		rts	
0001BBD0                            ; ===========================================================================
0001BBD0                            
0001BBD0                            Obj3E_Animals:				; XREF: Obj3E_Index
0001BBD0 7007                       		moveq	#7,d0
0001BBD2 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001BBD6 6600                       		bne.s	loc_1AD38
0001BBD8 4EB9 0000 E72E             		jsr	SingleObjLoad
0001BBDE 6600                       		bne.s	loc_1AD38
0001BBE0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001BBE4 3368 0008 0008             		move.w	8(a0),8(a1)
0001BBEA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BBF0 4EB9 0000 2D60             		jsr	(RandomNumber).l
0001BBF6 0240 001F                  		andi.w	#$1F,d0
0001BBFA 5D40                       		subq.w	#6,d0
0001BBFC 4A41                       		tst.w	d1
0001BBFE 6A00                       		bpl.s	loc_1AD2E
0001BC00 4440                       		neg.w	d0
0001BC02                            
0001BC02                            loc_1AD2E:
0001BC02 D169 0008                  		add.w	d0,8(a1)
0001BC06 337C 000C 0036             		move.w	#$C,$36(a1)
0001BC0C                            
0001BC0C                            loc_1AD38:
0001BC0C 5368 001E                  		subq.w	#1,$1E(a0)
0001BC10 6600                       		bne.s	locret_1AD48
0001BC12 5428 0024                  		addq.b	#2,$24(a0)
0001BC16 317C 00B4 001E             		move.w	#180,$1E(a0)
0001BC1C                            
0001BC1C                            locret_1AD48:
0001BC1C 4E75                       		rts	
0001BC1E                            ; ===========================================================================
0001BC1E                            
0001BC1E                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001BC1E 703E                       		moveq	#$3E,d0
0001BC20 7228                       		moveq	#$28,d1
0001BC22 7440                       		moveq	#$40,d2
0001BC24 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001BC28                            
0001BC28                            Obj3E_FindObj28:
0001BC28 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001BC2A 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001BC2C D2C2                       		adda.w	d2,a1		; next object RAM
0001BC2E 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001BC32                            
0001BC32 4EB9 0000 F92E             		jsr	GotThroughAct
0001BC38 4EF9 0000 E2E4             		jmp	DeleteObject
0001BC3E                            ; ===========================================================================
0001BC3E                            
0001BC3E                            Obj3E_Obj28Found:
0001BC3E 4E75                       		rts	
0001BC40                            ; ===========================================================================
0001BC40                            Ani_obj3E:
0001BC40                            	include "_anim\obj3E.asm"
0001BC40                            ; ---------------------------------------------------------------------------
0001BC40                            ; Animation script - prison capsule
0001BC40                            ; ---------------------------------------------------------------------------
0001BC40 0000                       		dc.w byte_1AD70-Ani_obj3E
0001BC42 0000                       		dc.w byte_1AD70-Ani_obj3E
0001BC44 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001BC48                            		even
0001BC48                            		even
0001BC48                            
0001BC48                            ; ---------------------------------------------------------------------------
0001BC48                            ; Sprite mappings - prison capsule
0001BC48                            ; ---------------------------------------------------------------------------
0001BC48                            Map_obj3E:
0001BC48                            	include "_maps\obj3E.asm"
0001BC48                            ; ---------------------------------------------------------------------------
0001BC48                            ; Sprite mappings - prison capsule
0001BC48                            ; ---------------------------------------------------------------------------
0001BC48 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001BC4C 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001BC50 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001BC54 0000                       		dc.w byte_1ADE2-Map_obj3E
0001BC56 07                         byte_1AD82:	dc.b 7
0001BC57 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001BC5C E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001BC61 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001BC66 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001BC6B F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001BC70 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001BC75 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001BC7A 01                         byte_1ADA6:	dc.b 1
0001BC7B F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001BC80 06                         byte_1ADAC:	dc.b 6
0001BC81 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001BC86 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001BC8B 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001BC90 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001BC95 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001BC9A 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001BC9F 01                         byte_1ADCB:	dc.b 1
0001BCA0 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001BCA5 02                         byte_1ADD1:	dc.b 2
0001BCA6 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001BCAB 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001BCB0 01                         byte_1ADDC:	dc.b 1
0001BCB1 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001BCB6 00                         byte_1ADE2:	dc.b 0
0001BCB8 00                         		even
0001BCB8 00                         		even
0001BCB8                            
0001BCB8                            ; ---------------------------------------------------------------------------
0001BCB8                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001BCB8                            ; ---------------------------------------------------------------------------
0001BCB8                            
0001BCB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCB8                            
0001BCB8                            
0001BCB8                            TouchResponse:				; XREF: Obj01
0001BCB8 4E71                       		nop	
0001BCBA 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001BCBE 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001BCC2 5142                       		subq.w	#8,d2
0001BCC4 7A00                       		moveq	#0,d5
0001BCC6 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001BCCA 5705                       		subq.b	#3,d5
0001BCCC 9645                       		sub.w	d5,d3
0001BCCE 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001BCD4 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001BCD6 0643 000C                  		addi.w	#$C,d3
0001BCDA 7A0A                       		moveq	#$A,d5
0001BCDC                            
0001BCDC                            Touch_NoDuck:
0001BCDC 383C 0010                  		move.w	#$10,d4
0001BCE0 DA45                       		add.w	d5,d5
0001BCE2 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001BCE6 3C3C 005F                  		move.w	#$5F,d6
0001BCEA                            
0001BCEA                            Touch_Loop:
0001BCEA 4A29 0001                  		tst.b	1(a1)
0001BCEE 6A00                       		bpl.s	Touch_NextObj
0001BCF0 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001BCF4 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001BCF6                            
0001BCF6                            Touch_NextObj:
0001BCF6 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001BCFA 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001BCFE                            
0001BCFE 7000                       		moveq	#0,d0
0001BD00 4E75                       		rts	
0001BD02                            ; ===========================================================================
0001BD02 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001BD04 0C14                       		dc.b   $C, $14
0001BD06 140C                       		dc.b  $14,  $C
0001BD08 0410                       		dc.b	4, $10
0001BD0A 0C12                       		dc.b   $C, $12
0001BD0C 1010                       		dc.b  $10, $10
0001BD0E 0606                       		dc.b	6,   6
0001BD10 180C                       		dc.b  $18,  $C
0001BD12 0C10                       		dc.b   $C, $10
0001BD14 100C                       		dc.b  $10,  $C
0001BD16 0808                       		dc.b	8,   8
0001BD18 1410                       		dc.b  $14, $10
0001BD1A 1408                       		dc.b  $14,   8
0001BD1C 0E0E                       		dc.b   $E,  $E
0001BD1E 1818                       		dc.b  $18, $18
0001BD20 2810                       		dc.b  $28, $10
0001BD22 1018                       		dc.b  $10, $18
0001BD24 0810                       		dc.b	8, $10
0001BD26 2070                       		dc.b  $20, $70
0001BD28 4020                       		dc.b  $40, $20
0001BD2A 8020                       		dc.b  $80, $20
0001BD2C 2020                       		dc.b  $20, $20
0001BD2E 0808                       		dc.b	8,   8
0001BD30 0404                       		dc.b	4,   4
0001BD32 2008                       		dc.b  $20,   8
0001BD34 0C0C                       		dc.b   $C,  $C
0001BD36 0804                       		dc.b	8,   4
0001BD38 1804                       		dc.b  $18,   4
0001BD3A 2804                       		dc.b  $28,   4
0001BD3C 0408                       		dc.b	4,   8
0001BD3E 0418                       		dc.b	4, $18
0001BD40 0428                       		dc.b	4, $28
0001BD42 0420                       		dc.b	4, $20
0001BD44 1818                       		dc.b  $18, $18
0001BD46 0C18                       		dc.b   $C, $18
0001BD48 4808                       		dc.b  $48,   8
0001BD4A                            ; ===========================================================================
0001BD4A                            
0001BD4A                            Touch_Height:				; XREF: TouchResponse
0001BD4A 0240 003F                  		andi.w	#$3F,d0
0001BD4E D040                       		add.w	d0,d0
0001BD50 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001BD54 7200                       		moveq	#0,d1
0001BD56 121A                       		move.b	(a2)+,d1
0001BD58 3029 0008                  		move.w	8(a1),d0
0001BD5C 9041                       		sub.w	d1,d0
0001BD5E 9042                       		sub.w	d2,d0
0001BD60 6400                       		bcc.s	loc_1AE98
0001BD62 D241                       		add.w	d1,d1
0001BD64 D041                       		add.w	d1,d0
0001BD66 6500                       		bcs.s	Touch_Width
0001BD68 6000 FF8C                  		bra.w	Touch_NextObj
0001BD6C                            ; ===========================================================================
0001BD6C                            
0001BD6C                            loc_1AE98:
0001BD6C B044                       		cmp.w	d4,d0
0001BD6E 6200 FF86                  		bhi.w	Touch_NextObj
0001BD72                            
0001BD72                            Touch_Width:
0001BD72 7200                       		moveq	#0,d1
0001BD74 121A                       		move.b	(a2)+,d1
0001BD76 3029 000C                  		move.w	$C(a1),d0
0001BD7A 9041                       		sub.w	d1,d0
0001BD7C 9043                       		sub.w	d3,d0
0001BD7E 6400                       		bcc.s	loc_1AEB6
0001BD80 D241                       		add.w	d1,d1
0001BD82 D240                       		add.w	d0,d1
0001BD84 6500                       		bcs.s	Touch_ChkValue
0001BD86 6000 FF6E                  		bra.w	Touch_NextObj
0001BD8A                            ; ===========================================================================
0001BD8A                            
0001BD8A                            loc_1AEB6:
0001BD8A B045                       		cmp.w	d5,d0
0001BD8C 6200 FF68                  		bhi.w	Touch_NextObj
0001BD90                            
0001BD90                            Touch_ChkValue:
0001BD90 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001BD94 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001BD98 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001BD9C 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001BDA0 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001BDA4 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001BDA6 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001BDAA                            
0001BDAA                            ; touch	response is $40-$7F
0001BDAA                            
0001BDAA 1029 0020                  		move.b	$20(a1),d0
0001BDAE 0200 003F                  		andi.b	#$3F,d0
0001BDB2 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001BDB6 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001BDB8 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001BDBE 6400 0000                  		bcc.w	locret_1AEF2
0001BDC2 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001BDC6                            
0001BDC6                            locret_1AEF2:
0001BDC6 4E75                       		rts	
0001BDC8                            ; ===========================================================================
0001BDC8                            
0001BDC8                            Touch_Monitor:
0001BDC8 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001BDCC 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001BDCE 3028 000C                  		move.w	$C(a0),d0
0001BDD2 0440 0010                  		subi.w	#$10,d0
0001BDD6 B069 000C                  		cmp.w	$C(a1),d0
0001BDDA 6500                       		bcs.s	locret_1AF2E
0001BDDC 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BDE0 337C FE80 0012             		move.w	#-$180,$12(a1)
0001BDE6 4A29 0025                  		tst.b	$25(a1)
0001BDEA 6600                       		bne.s	locret_1AF2E
0001BDEC 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001BDF0 4E75                       		rts	
0001BDF2                            ; ===========================================================================
0001BDF2                            
0001BDF2                            loc_1AF1E:
0001BDF2 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001BDF8 6600                       		bne.s	locret_1AF2E
0001BDFA 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BDFE 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001BE02                            
0001BE02                            locret_1AF2E:
0001BE02 4E75                       		rts	
0001BE04                            ; ===========================================================================
0001BE04                            
0001BE04                            Touch_Enemy:				; XREF: Touch_ChkValue
0001BE04 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BE08 6600                       		bne.s	loc_1AF40	; if yes, branch
0001BE0A 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001BE10 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001BE14                            
0001BE14                            loc_1AF40:
0001BE14 4A29 0021                  		tst.b	$21(a1)
0001BE18 6700                       		beq.s	Touch_KillEnemy
0001BE1A 4468 0010                  		neg.w	$10(a0)
0001BE1E 4468 0012                  		neg.w	$12(a0)
0001BE22 E0E8 0010                  		asr	$10(a0)
0001BE26 E0E8 0012                  		asr	$12(a0)
0001BE2A 137C 0000 0020             		move.b	#0,$20(a1)
0001BE30 5329 0021                  		subq.b	#1,$21(a1)
0001BE34 6600                       		bne.s	locret_1AF68
0001BE36 08E9 0007 0022             		bset	#7,$22(a1)
0001BE3C                            
0001BE3C                            locret_1AF68:
0001BE3C 4E75                       		rts	
0001BE3E                            ; ===========================================================================
0001BE3E                            
0001BE3E                            Touch_KillEnemy:
0001BE3E 08E9 0007 0022             		bset	#7,$22(a1)
0001BE44 7000                       		moveq	#0,d0
0001BE46 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001BE4A 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001BE4E 0C40 0006                  		cmpi.w	#6,d0
0001BE52 6500                       		bcs.s	loc_1AF82
0001BE54 7006                       		moveq	#6,d0
0001BE56                            
0001BE56                            loc_1AF82:
0001BE56 3340 003E                  		move.w	d0,$3E(a1)
0001BE5A 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001BE5E 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001BE64 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001BE66 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001BE6A 337C 000A 003E             		move.w	#$A,$3E(a1)
0001BE70                            
0001BE70                            loc_1AF9C:
0001BE70 6100 0000                  		bsr.w	AddPoints
0001BE74 7400                       		moveq	#0,d2	; GMZ
0001BE76 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001BE78 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001BE7A                            
0001BE7A                            TouchKE_Explode:
0001BE7A 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BE7E 137C 0000 0024             		move.b	#0,$24(a1)
0001BE84 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001BE88                            
0001BE88                            TouchKE_NextExplosion:
0001BE88 5802                       		addq.b	#4,d2
0001BE8A 4EB9 0000 E72E             		jsr	SingleObjLoad
0001BE90 6600                       		bne.s	TouchKE_NoExplosion
0001BE92 336A 0008 0008             		move.w	8(a2),8(a1)
0001BE98 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001BE9E 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001BEA2                            
0001BEA2                            TouchKE_NoExplosion:
0001BEA2 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001BEA4 4A68 0012                  		tst.w	$12(a0)
0001BEA8 6B00                       		bmi.s	loc_1AFC2
0001BEAA 3028 000C                  		move.w	$C(a0),d0
0001BEAE B069 000C                  		cmp.w	$C(a1),d0
0001BEB2 6400                       		bcc.s	loc_1AFCA
0001BEB4 4468 0012                  		neg.w	$12(a0)
0001BEB8 4E75                       		rts	
0001BEBA                            ; ===========================================================================
0001BEBA                            
0001BEBA                            loc_1AFC2:
0001BEBA 0668 0100 0012             		addi.w	#$100,$12(a0)
0001BEC0 4E75                       		rts	
0001BEC2                            ; ===========================================================================
0001BEC2                            
0001BEC2                            loc_1AFCA:
0001BEC2 0468 0100 0012             		subi.w	#$100,$12(a0)
0001BEC8 4E75                       		rts	
0001BECA                            ; ===========================================================================
0001BECA 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001BED2                            ; ===========================================================================
0001BED2                            
0001BED2                            loc_1AFDA:				; XREF: Touch_CatKiller
0001BED2 08E9 0007 0022             		bset	#7,$22(a1)
0001BED8                            
0001BED8                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001BED8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BEDC 6700                       		beq.s	Touch_Hurt	; if not, branch
0001BEDE                            
0001BEDE                            loc_1AFE6:				; XREF: Touch_Hurt
0001BEDE 70FF                       		moveq	#-1,d0
0001BEE0 4E75                       		rts	
0001BEE2                            ; ===========================================================================
0001BEE2                            
0001BEE2                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001BEE2 4E71                       		nop	
0001BEE4 4A68 0030                  		tst.w	$30(a0)
0001BEE8 66F4                       		bne.s	loc_1AFE6
0001BEEA 2449                       		movea.l	a1,a2
0001BEEC                            
0001BEEC                            ; End of function TouchResponse
0001BEEC                            ; continue straight to HurtSonic
0001BEEC                            
0001BEEC                            ; ---------------------------------------------------------------------------
0001BEEC                            ; Hurting Sonic	subroutine
0001BEEC                            ; ---------------------------------------------------------------------------
0001BEEC                            
0001BEEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BEEC                            
0001BEEC                            
0001BEEC                            HurtSonic:
0001BEEC 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001BEF0 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001BEF2 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001BEF6 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001BEFA 4EB9 0000 E72E             		jsr	SingleObjLoad
0001BF00 6600                       		bne.s	Hurt_Shield
0001BF02 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001BF06 3368 0008 0008             		move.w	8(a0),8(a1)
0001BF0C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BF12                            
0001BF12                            Hurt_Shield:
0001BF12 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001BF18 117C 0004 0024             		move.b	#4,$24(a0)
0001BF1E 6100 859A                  		bsr.w	Sonic_ResetOnFloor
0001BF22 08E8 0001 0022             		bset	#1,$22(a0)
0001BF28 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001BF2E 317C FE00 0010             		move.w	#-$200,$10(a0)
0001BF34 0828 0006 0022             		btst	#6,$22(a0)
0001BF3A 6700                       		beq.s	Hurt_Reverse
0001BF3C 317C FE00 0012             		move.w	#-$200,$12(a0)
0001BF42 317C FF00 0010             		move.w	#-$100,$10(a0)
0001BF48                            
0001BF48                            Hurt_Reverse:
0001BF48 3028 0008                  		move.w	8(a0),d0
0001BF4C B06A 0008                  		cmp.w	8(a2),d0
0001BF50 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001BF52 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001BF56                            
0001BF56                            Hurt_ChkSpikes:
0001BF56 317C 0000 0014             		move.w	#0,$14(a0)
0001BF5C 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001BF62 317C 0078 0030             		move.w	#$78,$30(a0)
0001BF68 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001BF6C 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001BF70 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BF72 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001BF76 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BF78 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001BF7C                            
0001BF7C                            Hurt_Sound:
0001BF7C 4EB9 0000 15EC             		jsr	(PlaySound_Special).l
0001BF82 70FF                       		moveq	#-1,d0
0001BF84 4E75                       		rts	
0001BF86                            ; ===========================================================================
0001BF86                            
0001BF86                            Hurt_NoRings:
0001BF86 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001BF8A 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001BF8E                            ; End of function HurtSonic
0001BF8E                            
0001BF8E                            ; ---------------------------------------------------------------------------
0001BF8E                            ; Subroutine to	kill Sonic
0001BF8E                            ; ---------------------------------------------------------------------------
0001BF8E                            
0001BF8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF8E                            
0001BF8E                            
0001BF8E                            KillSonic:
0001BF8E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001BF92 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BF94 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BF9A 117C 0006 0024             		move.b	#6,$24(a0)
0001BFA0 6100 8518                  		bsr.w	Sonic_ResetOnFloor
0001BFA4 08E8 0001 0022             		bset	#1,$22(a0)
0001BFAA 317C F900 0012             		move.w	#-$700,$12(a0)
0001BFB0 317C 0000 0010             		move.w	#0,$10(a0)
0001BFB6 317C 0000 0014             		move.w	#0,$14(a0)
0001BFBC 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BFC2 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BFC8 08E8 0007 0002             		bset	#7,2(a0)
0001BFCE 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BFD2 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BFD6 6600                       		bne.s	Kill_Sound
0001BFD8 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BFDC                            
0001BFDC                            Kill_Sound:
0001BFDC 4EB9 0000 15EC             		jsr	(PlaySound_Special).l
0001BFE2                            
0001BFE2                            Kill_NoDeath:
0001BFE2 70FF                       		moveq	#-1,d0
0001BFE4 4E75                       		rts	
0001BFE6                            ; End of function KillSonic
0001BFE6                            
0001BFE6                            
0001BFE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFE6                            
0001BFE6                            
0001BFE6                            Touch_Special:				; XREF: Touch_ChkValue
0001BFE6 1229 0020                  		move.b	$20(a1),d1
0001BFEA 0201 003F                  		andi.b	#$3F,d1
0001BFEE 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BFF2 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BFF4 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BFF8 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BFFA 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BFFE 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001C000 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001C004 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001C006 4E75                       		rts	
0001C008                            ; ===========================================================================
0001C008                            
0001C008                            Touch_CatKiller:			; XREF: Touch_Special
0001C008 6000 FEC8                  		bra.w	loc_1AFDA
0001C00C                            ; ===========================================================================
0001C00C                            
0001C00C                            Touch_Yadrin:				; XREF: Touch_Special
0001C00C 9A40                       		sub.w	d0,d5
0001C00E 0C45 0008                  		cmpi.w	#8,d5
0001C012 6400                       		bcc.s	loc_1B144
0001C014 3029 0008                  		move.w	8(a1),d0
0001C018 5940                       		subq.w	#4,d0
0001C01A 0829 0000 0022             		btst	#0,$22(a1)
0001C020 6700                       		beq.s	loc_1B130
0001C022 0440 0010                  		subi.w	#$10,d0
0001C026                            
0001C026                            loc_1B130:
0001C026 9042                       		sub.w	d2,d0
0001C028 6400                       		bcc.s	loc_1B13C
0001C02A 0640 0018                  		addi.w	#$18,d0
0001C02E 6500                       		bcs.s	loc_1B140
0001C030 6000                       		bra.s	loc_1B144
0001C032                            ; ===========================================================================
0001C032                            
0001C032                            loc_1B13C:
0001C032 B044                       		cmp.w	d4,d0
0001C034 6200                       		bhi.s	loc_1B144
0001C036                            
0001C036                            loc_1B140:
0001C036 6000 FEA0                  		bra.w	Touch_ChkHurt
0001C03A                            ; ===========================================================================
0001C03A                            
0001C03A                            loc_1B144:
0001C03A 6000 FDC8                  		bra.w	Touch_Enemy
0001C03E                            ; ===========================================================================
0001C03E                            
0001C03E                            Touch_D7orE1:				; XREF: Touch_Special
0001C03E 5229 0021                  		addq.b	#1,$21(a1)
0001C042 4E75                       		rts	
0001C044                            ; End of function Touch_Special
0001C044                            
0001C044                            ; ---------------------------------------------------------------------------
0001C044                            ; Subroutine to	show the special stage layout
0001C044                            ; ---------------------------------------------------------------------------
0001C044                            
0001C044                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C044                            
0001C044                            
0001C044                            SS_ShowLayout:				; XREF: SpecialStage
0001C044 6100 0000                  		bsr.w	SS_AniWallsRings
0001C048 6100 0000                  		bsr.w	SS_AniItems
0001C04C 3F05                       		move.w	d5,-(sp)
0001C04E 43F8 8000                  		lea	($FFFF8000).w,a1
0001C052 1038 F780                  		move.b	($FFFFF780).w,d0
0001C056 0200 00FC                  		andi.b	#$FC,d0
0001C05A 4EB9 0000 2D86             		jsr	(CalcSine).l
0001C060 3800                       		move.w	d0,d4
0001C062 3A01                       		move.w	d1,d5
0001C064 C9FC 0018                  		muls.w	#$18,d4
0001C068 CBFC 0018                  		muls.w	#$18,d5
0001C06C 7400                       		moveq	#0,d2
0001C06E 3438 F700                  		move.w	($FFFFF700).w,d2
0001C072 84FC 0018                  		divu.w	#$18,d2
0001C076 4842                       		swap	d2
0001C078 4442                       		neg.w	d2
0001C07A 0642 FF4C                  		addi.w	#-$B4,d2
0001C07E 7600                       		moveq	#0,d3
0001C080 3638 F704                  		move.w	($FFFFF704).w,d3
0001C084 86FC 0018                  		divu.w	#$18,d3
0001C088 4843                       		swap	d3
0001C08A 4443                       		neg.w	d3
0001C08C 0643 FF4C                  		addi.w	#-$B4,d3
0001C090 3E3C 000F                  		move.w	#$F,d7
0001C094                            
0001C094                            loc_1B19E:
0001C094 48A7 E000                  		movem.w	d0-d2,-(sp)
0001C098 48A7 C000                  		movem.w	d0-d1,-(sp)
0001C09C 4440                       		neg.w	d0
0001C09E C3C2                       		muls.w	d2,d1
0001C0A0 C1C3                       		muls.w	d3,d0
0001C0A2 2C00                       		move.l	d0,d6
0001C0A4 DC81                       		add.l	d1,d6
0001C0A6 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001C0AA C1C2                       		muls.w	d2,d0
0001C0AC C3C3                       		muls.w	d3,d1
0001C0AE D280                       		add.l	d0,d1
0001C0B0 2406                       		move.l	d6,d2
0001C0B2 3C3C 000F                  		move.w	#$F,d6
0001C0B6                            
0001C0B6                            loc_1B1C0:
0001C0B6 2002                       		move.l	d2,d0
0001C0B8 E080                       		asr.l	#8,d0
0001C0BA 32C0                       		move.w	d0,(a1)+
0001C0BC 2001                       		move.l	d1,d0
0001C0BE E080                       		asr.l	#8,d0
0001C0C0 32C0                       		move.w	d0,(a1)+
0001C0C2 D485                       		add.l	d5,d2
0001C0C4 D284                       		add.l	d4,d1
0001C0C6 51CE FFEE                  		dbf	d6,loc_1B1C0
0001C0CA                            
0001C0CA 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001C0CE 0643 0018                  		addi.w	#$18,d3
0001C0D2 51CF FFC0                  		dbf	d7,loc_1B19E
0001C0D6                            
0001C0D6 3A1F                       		move.w	(sp)+,d5
0001C0D8 41F9 00FF 0000             		lea	($FF0000).l,a0
0001C0DE 7000                       		moveq	#0,d0
0001C0E0 3038 F704                  		move.w	($FFFFF704).w,d0
0001C0E4 80FC 0018                  		divu.w	#$18,d0
0001C0E8 C0FC 0080                  		mulu.w	#$80,d0
0001C0EC D1C0                       		adda.l	d0,a0
0001C0EE 7000                       		moveq	#0,d0
0001C0F0 3038 F700                  		move.w	($FFFFF700).w,d0
0001C0F4 80FC 0018                  		divu.w	#$18,d0
0001C0F8 D0C0                       		adda.w	d0,a0
0001C0FA 49F8 8000                  		lea	($FFFF8000).w,a4
0001C0FE 3E3C 000F                  		move.w	#$F,d7
0001C102                            
0001C102                            loc_1B20C:
0001C102 3C3C 000F                  		move.w	#$F,d6
0001C106                            
0001C106                            loc_1B210:
0001C106 7000                       		moveq	#0,d0
0001C108 1018                       		move.b	(a0)+,d0
0001C10A 6700                       		beq.s	loc_1B268
0001C10C 0C00 004E                  		cmpi.b	#$4E,d0
0001C110 6200                       		bhi.s	loc_1B268
0001C112 3614                       		move.w	(a4),d3
0001C114 0643 0120                  		addi.w	#$120,d3
0001C118 0C43 0070                  		cmpi.w	#$70,d3
0001C11C 6500                       		bcs.s	loc_1B268
0001C11E 0C43 01D0                  		cmpi.w	#$1D0,d3
0001C122 6400                       		bcc.s	loc_1B268
0001C124 342C 0002                  		move.w	2(a4),d2
0001C128 0642 00F0                  		addi.w	#$F0,d2
0001C12C 0C42 0070                  		cmpi.w	#$70,d2
0001C130 6500                       		bcs.s	loc_1B268
0001C132 0C42 0170                  		cmpi.w	#$170,d2
0001C136 6400                       		bcc.s	loc_1B268
0001C138 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001C13E E748                       		lsl.w	#3,d0
0001C140 4BF5 0000                  		lea	(a5,d0.w),a5
0001C144 225D                       		movea.l	(a5)+,a1
0001C146 321D                       		move.w	(a5)+,d1
0001C148 D241                       		add.w	d1,d1
0001C14A D2F1 1000                  		adda.w	(a1,d1.w),a1
0001C14E 365D                       		movea.w	(a5)+,a3
0001C150 7200                       		moveq	#0,d1
0001C152 1219                       		move.b	(a1)+,d1
0001C154 5301                       		subq.b	#1,d1
0001C156 6B00                       		bmi.s	loc_1B268
0001C158 4EB9 0000 E406             		jsr	sub_D762
0001C15E                            
0001C15E                            loc_1B268:
0001C15E 584C                       		addq.w	#4,a4
0001C160 51CE FFA4                  		dbf	d6,loc_1B210
0001C164                            
0001C164 41E8 0070                  		lea	$70(a0),a0
0001C168 51CF FF98                  		dbf	d7,loc_1B20C
0001C16C                            
0001C16C 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001C170 0C05 0050                  		cmpi.b	#$50,d5
0001C174 6700                       		beq.s	loc_1B288
0001C176 24BC 0000 0000             		move.l	#0,(a2)
0001C17C 4E75                       		rts	
0001C17E                            ; ===========================================================================
0001C17E                            
0001C17E                            loc_1B288:
0001C17E 157C 0000 FFFB             		move.b	#0,-5(a2)
0001C184 4E75                       		rts	
0001C186                            ; End of function SS_ShowLayout
0001C186                            
0001C186                            ; ---------------------------------------------------------------------------
0001C186                            ; Subroutine to	animate	walls and rings	in the special stage
0001C186                            ; ---------------------------------------------------------------------------
0001C186                            
0001C186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C186                            
0001C186                            
0001C186                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001C186 43F9 00FF 400C             		lea	($FF400C).l,a1
0001C18C 7000                       		moveq	#0,d0
0001C18E 1038 F780                  		move.b	($FFFFF780).w,d0
0001C192 E408                       		lsr.b	#2,d0
0001C194 0240 000F                  		andi.w	#$F,d0
0001C198 7223                       		moveq	#$23,d1
0001C19A                            
0001C19A                            loc_1B2A4:
0001C19A 3280                       		move.w	d0,(a1)
0001C19C 5049                       		addq.w	#8,a1
0001C19E 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001C1A2                            
0001C1A2 43F9 00FF 4005             		lea	($FF4005).l,a1
0001C1A8 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001C1AC 6A00                       		bpl.s	loc_1B2C8
0001C1AE 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001C1B4 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001C1B8 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001C1BE                            
0001C1BE                            loc_1B2C8:
0001C1BE 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001C1C4 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001C1C8 6A00                       		bpl.s	loc_1B2E4
0001C1CA 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001C1D0 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001C1D4 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001C1DA                            
0001C1DA                            loc_1B2E4:
0001C1DA 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001C1DE 1340 0138                  		move.b	d0,$138(a1)
0001C1E2 1340 0160                  		move.b	d0,$160(a1)
0001C1E6 1340 0148                  		move.b	d0,$148(a1)
0001C1EA 1340 0150                  		move.b	d0,$150(a1)
0001C1EE 1340 01D8                  		move.b	d0,$1D8(a1)
0001C1F2 1340 01E0                  		move.b	d0,$1E0(a1)
0001C1F6 1340 01E8                  		move.b	d0,$1E8(a1)
0001C1FA 1340 01F0                  		move.b	d0,$1F0(a1)
0001C1FE 1340 01F8                  		move.b	d0,$1F8(a1)
0001C202 1340 0200                  		move.b	d0,$200(a1)
0001C206 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001C20A 6A00                       		bpl.s	loc_1B326
0001C20C 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001C212 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001C216 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001C21C                            
0001C21C                            loc_1B326:
0001C21C 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001C220 1340 0168                  		move.b	d0,$168(a1)
0001C224 1340 0170                  		move.b	d0,$170(a1)
0001C228 1340 0178                  		move.b	d0,$178(a1)
0001C22C 1340 0180                  		move.b	d0,$180(a1)
0001C230 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001C234 6A00                       		bpl.s	loc_1B350
0001C236 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001C23C 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001C240 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001C246                            
0001C246                            loc_1B350:
0001C246 43F9 00FF 4016             		lea	($FF4016).l,a1
0001C24C 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001C252 7000                       		moveq	#0,d0
0001C254 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001C258 D040                       		add.w	d0,d0
0001C25A 41F0 0000                  		lea	(a0,d0.w),a0
0001C25E 3290                       		move.w	(a0),(a1)
0001C260 3368 0002 0008             		move.w	2(a0),8(a1)
0001C266 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C26C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C272 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C278 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C27E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C284 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C28A D0FC 0020                  		adda.w	#$20,a0
0001C28E D2FC 0048                  		adda.w	#$48,a1
0001C292 3290                       		move.w	(a0),(a1)
0001C294 3368 0002 0008             		move.w	2(a0),8(a1)
0001C29A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C2A0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C2A6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C2AC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C2B2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C2B8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C2BE D0FC 0020                  		adda.w	#$20,a0
0001C2C2 D2FC 0048                  		adda.w	#$48,a1
0001C2C6 3290                       		move.w	(a0),(a1)
0001C2C8 3368 0002 0008             		move.w	2(a0),8(a1)
0001C2CE 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C2D4 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C2DA 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C2E0 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C2E6 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C2EC 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C2F2 D0FC 0020                  		adda.w	#$20,a0
0001C2F6 D2FC 0048                  		adda.w	#$48,a1
0001C2FA 3290                       		move.w	(a0),(a1)
0001C2FC 3368 0002 0008             		move.w	2(a0),8(a1)
0001C302 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C308 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C30E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C314 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C31A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C320 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C326 D0FC 0020                  		adda.w	#$20,a0
0001C32A D2FC 0048                  		adda.w	#$48,a1
0001C32E 4E75                       		rts	
0001C330                            ; End of function SS_AniWallsRings
0001C330                            
0001C330                            ; ===========================================================================
0001C330 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C340 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C350 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C360 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C370 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C380 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C390 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C3A0 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C3B0                            ; ---------------------------------------------------------------------------
0001C3B0                            ; Subroutine to	remove items when you collect them in the special stage
0001C3B0                            ; ---------------------------------------------------------------------------
0001C3B0                            
0001C3B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3B0                            
0001C3B0                            
0001C3B0                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001C3B0 45F9 00FF 4400             		lea	($FF4400).l,a2
0001C3B6 303C 001F                  		move.w	#$1F,d0
0001C3BA                            
0001C3BA                            loc_1B4C4:
0001C3BA 4A12                       		tst.b	(a2)
0001C3BC 6700                       		beq.s	locret_1B4CE
0001C3BE 504A                       		addq.w	#8,a2
0001C3C0 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001C3C4                            
0001C3C4                            locret_1B4CE:
0001C3C4 4E75                       		rts	
0001C3C6                            ; End of function SS_RemoveCollectedItem
0001C3C6                            
0001C3C6                            ; ---------------------------------------------------------------------------
0001C3C6                            ; Subroutine to	animate	special	stage items when you touch them
0001C3C6                            ; ---------------------------------------------------------------------------
0001C3C6                            
0001C3C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3C6                            
0001C3C6                            
0001C3C6                            SS_AniItems:				; XREF: SS_ShowLayout
0001C3C6 41F9 00FF 4400             		lea	($FF4400).l,a0
0001C3CC 3E3C 001F                  		move.w	#$1F,d7
0001C3D0                            
0001C3D0                            loc_1B4DA:
0001C3D0 7000                       		moveq	#0,d0
0001C3D2 1010                       		move.b	(a0),d0
0001C3D4 6700                       		beq.s	loc_1B4E8
0001C3D6 E548                       		lsl.w	#2,d0
0001C3D8 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001C3DC 4E91                       		jsr	(a1)
0001C3DE                            
0001C3DE                            loc_1B4E8:
0001C3DE 5048                       		addq.w	#8,a0
0001C3E0                            
0001C3E0                            loc_1B4EA:
0001C3E0 51CF FFEE                  		dbf	d7,loc_1B4DA
0001C3E4                            
0001C3E4 4E75                       		rts	
0001C3E6                            ; End of function SS_AniItems
0001C3E6                            
0001C3E6                            ; ===========================================================================
0001C3E6 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001C3EA 0000 0000                  		dc.l SS_AniBumper
0001C3EE 0000 0000                  		dc.l SS_Ani1Up
0001C3F2 0000 0000                  		dc.l SS_AniReverse
0001C3F6 0000 0000                  		dc.l SS_AniEmeraldSparks
0001C3FA 0000 0000                  		dc.l SS_AniGlassBlock
0001C3FE                            ; ===========================================================================
0001C3FE                            
0001C3FE                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001C3FE 5328 0002                  		subq.b	#1,2(a0)
0001C402 6A00                       		bpl.s	locret_1B530
0001C404 117C 0005 0002             		move.b	#5,2(a0)
0001C40A 7000                       		moveq	#0,d0
0001C40C 1028 0003                  		move.b	3(a0),d0
0001C410 5228 0003                  		addq.b	#1,3(a0)
0001C414 2268 0004                  		movea.l	4(a0),a1
0001C418 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001C41C 1280                       		move.b	d0,(a1)
0001C41E 6600                       		bne.s	locret_1B530
0001C420 4290                       		clr.l	(a0)
0001C422 42A8 0004                  		clr.l	4(a0)
0001C426                            
0001C426                            locret_1B530:
0001C426 4E75                       		rts	
0001C428                            ; ===========================================================================
0001C428 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001C42E                            ; ===========================================================================
0001C42E                            
0001C42E                            SS_AniBumper:				; XREF: SS_AniIndex
0001C42E 5328 0002                  		subq.b	#1,2(a0)
0001C432 6A00                       		bpl.s	locret_1B566
0001C434 117C 0007 0002             		move.b	#7,2(a0)
0001C43A 7000                       		moveq	#0,d0
0001C43C 1028 0003                  		move.b	3(a0),d0
0001C440 5228 0003                  		addq.b	#1,3(a0)
0001C444 2268 0004                  		movea.l	4(a0),a1
0001C448 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001C44C 6600                       		bne.s	loc_1B564
0001C44E 4290                       		clr.l	(a0)
0001C450 42A8 0004                  		clr.l	4(a0)
0001C454 12BC 0025                  		move.b	#$25,(a1)
0001C458 4E75                       		rts	
0001C45A                            ; ===========================================================================
0001C45A                            
0001C45A                            loc_1B564:
0001C45A 1280                       		move.b	d0,(a1)
0001C45C                            
0001C45C                            locret_1B566:
0001C45C 4E75                       		rts	
0001C45E                            ; ===========================================================================
0001C45E 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001C464                            ; ===========================================================================
0001C464                            
0001C464                            SS_Ani1Up:				; XREF: SS_AniIndex
0001C464 5328 0002                  		subq.b	#1,2(a0)
0001C468 6A00                       		bpl.s	locret_1B596
0001C46A 117C 0005 0002             		move.b	#5,2(a0)
0001C470 7000                       		moveq	#0,d0
0001C472 1028 0003                  		move.b	3(a0),d0
0001C476 5228 0003                  		addq.b	#1,3(a0)
0001C47A 2268 0004                  		movea.l	4(a0),a1
0001C47E 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001C482 1280                       		move.b	d0,(a1)
0001C484 6600                       		bne.s	locret_1B596
0001C486 4290                       		clr.l	(a0)
0001C488 42A8 0004                  		clr.l	4(a0)
0001C48C                            
0001C48C                            locret_1B596:
0001C48C 4E75                       		rts	
0001C48E                            ; ===========================================================================
0001C48E 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001C494                            ; ===========================================================================
0001C494                            
0001C494                            SS_AniReverse:				; XREF: SS_AniIndex
0001C494 5328 0002                  		subq.b	#1,2(a0)
0001C498 6A00                       		bpl.s	locret_1B5CC
0001C49A 117C 0007 0002             		move.b	#7,2(a0)
0001C4A0 7000                       		moveq	#0,d0
0001C4A2 1028 0003                  		move.b	3(a0),d0
0001C4A6 5228 0003                  		addq.b	#1,3(a0)
0001C4AA 2268 0004                  		movea.l	4(a0),a1
0001C4AE 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001C4B2 6600                       		bne.s	loc_1B5CA
0001C4B4 4290                       		clr.l	(a0)
0001C4B6 42A8 0004                  		clr.l	4(a0)
0001C4BA 12BC 002B                  		move.b	#$2B,(a1)
0001C4BE 4E75                       		rts	
0001C4C0                            ; ===========================================================================
0001C4C0                            
0001C4C0                            loc_1B5CA:
0001C4C0 1280                       		move.b	d0,(a1)
0001C4C2                            
0001C4C2                            locret_1B5CC:
0001C4C2 4E75                       		rts	
0001C4C4                            ; ===========================================================================
0001C4C4 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001C4CA                            ; ===========================================================================
0001C4CA                            
0001C4CA                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001C4CA 5328 0002                  		subq.b	#1,2(a0)
0001C4CE 6A00                       		bpl.s	locret_1B60C
0001C4D0 117C 0005 0002             		move.b	#5,2(a0)
0001C4D6 7000                       		moveq	#0,d0
0001C4D8 1028 0003                  		move.b	3(a0),d0
0001C4DC 5228 0003                  		addq.b	#1,3(a0)
0001C4E0 2268 0004                  		movea.l	4(a0),a1
0001C4E4 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001C4E8 1280                       		move.b	d0,(a1)
0001C4EA 6600                       		bne.s	locret_1B60C
0001C4EC 4290                       		clr.l	(a0)
0001C4EE 42A8 0004                  		clr.l	4(a0)
0001C4F2 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001C4F8 303C 00A8                  		move.w	#$A8,d0
0001C4FC 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001C502                            
0001C502                            locret_1B60C:
0001C502 4E75                       		rts	
0001C504                            ; ===========================================================================
0001C504 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001C50A                            ; ===========================================================================
0001C50A                            
0001C50A                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001C50A 5328 0002                  		subq.b	#1,2(a0)
0001C50E 6A00                       		bpl.s	locret_1B640
0001C510 117C 0001 0002             		move.b	#1,2(a0)
0001C516 7000                       		moveq	#0,d0
0001C518 1028 0003                  		move.b	3(a0),d0
0001C51C 5228 0003                  		addq.b	#1,3(a0)
0001C520 2268 0004                  		movea.l	4(a0),a1
0001C524 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001C528 1280                       		move.b	d0,(a1)
0001C52A 6600                       		bne.s	locret_1B640
0001C52C 12A8 0004                  		move.b	4(a0),(a1)
0001C530 4290                       		clr.l	(a0)
0001C532 42A8 0004                  		clr.l	4(a0)
0001C536                            
0001C536                            locret_1B640:
0001C536 4E75                       		rts	
0001C538                            ; ===========================================================================
0001C538 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001C542                            ; ---------------------------------------------------------------------------
0001C542                            ; Special stage	layout pointers
0001C542                            ; ---------------------------------------------------------------------------
0001C542                            SS_LayoutIndex:
0001C542                            	include "_inc\Special stage layout pointers.asm"
0001C542                            ; ---------------------------------------------------------------------------
0001C542                            ; Special stage	layout pointers
0001C542                            ; ---------------------------------------------------------------------------
0001C542 0000 0000                  	dc.l SS_1
0001C546 0000 0000                  	dc.l SS_2
0001C54A 0000 0000                  	dc.l SS_3
0001C54E 0000 0000                  	dc.l SS_4
0001C552 0000 0000                  	dc.l SS_5
0001C556 0000 0000                  	dc.l SS_6
0001C55A                            	even
0001C55A                            	even
0001C55A                            
0001C55A                            ; ---------------------------------------------------------------------------
0001C55A                            ; Special stage	start locations
0001C55A                            ; ---------------------------------------------------------------------------
0001C55A                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001C572                            		even
0001C572                            
0001C572                            ; ---------------------------------------------------------------------------
0001C572                            ; Subroutine to	load special stage layout
0001C572                            ; ---------------------------------------------------------------------------
0001C572                            
0001C572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C572                            
0001C572                            
0001C572                            SS_Load:				; XREF: SpecialStage
0001C572 7000                       		moveq	#0,d0
0001C574 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001C578 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001C57C 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001C582 6500                       		bcs.s	SS_ChkEmldNum
0001C584 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001C58A                            
0001C58A                            SS_ChkEmldNum:
0001C58A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001C590 6700                       		beq.s	SS_LoadData	; if yes, branch
0001C592 7200                       		moveq	#0,d1
0001C594 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C598 5301                       		subq.b	#1,d1
0001C59A 6500                       		bcs.s	SS_LoadData
0001C59C 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C5A0                            
0001C5A0                            SS_ChkEmldLoop:	
0001C5A0 B033 1000                  		cmp.b	(a3,d1.w),d0
0001C5A4 6600                       		bne.s	SS_ChkEmldRepeat
0001C5A6 60CA                       		bra.s	SS_Load
0001C5A8                            ; ===========================================================================
0001C5A8                            
0001C5A8                            SS_ChkEmldRepeat:
0001C5A8 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C5AC                            
0001C5AC                            SS_LoadData:
0001C5AC E548                       		lsl.w	#2,d0
0001C5AE 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C5B2 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C5B6 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C5BA 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C5BE 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C5C4 303C 0000                  		move.w	#0,d0
0001C5C8 4EB9 0000 196E             		jsr	(EniDec).l
0001C5CE 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C5D4 303C 0FFF                  		move.w	#$FFF,d0
0001C5D8                            
0001C5D8                            SS_ClrRAM3:
0001C5D8 4299                       		clr.l	(a1)+
0001C5DA 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C5DE                            
0001C5DE 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C5E4 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C5EA 723F                       		moveq	#$3F,d1
0001C5EC                            
0001C5EC                            loc_1B6F6:
0001C5EC 743F                       		moveq	#$3F,d2
0001C5EE                            
0001C5EE                            loc_1B6F8:
0001C5EE 12D8                       		move.b	(a0)+,(a1)+
0001C5F0 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C5F4                            
0001C5F4 43E9 0040                  		lea	$40(a1),a1
0001C5F8 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C5FC                            
0001C5FC 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C602 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C608 724D                       		moveq	#$4D,d1
0001C60A                            
0001C60A                            loc_1B714:
0001C60A 22D8                       		move.l	(a0)+,(a1)+
0001C60C 32FC 0000                  		move.w	#0,(a1)+
0001C610 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C616 32D8                       		move.w	(a0)+,(a1)+
0001C618 51C9 FFF0                  		dbf	d1,loc_1B714
0001C61C                            
0001C61C 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C622 323C 003F                  		move.w	#$3F,d1
0001C626                            
0001C626                            loc_1B730:
0001C626                            
0001C626 4299                       		clr.l	(a1)+
0001C628 51C9 FFFC                  		dbf	d1,loc_1B730
0001C62C                            
0001C62C 4E75                       		rts	
0001C62E                            ; End of function SS_Load
0001C62E                            
0001C62E                            ; ===========================================================================
0001C62E                            ; ---------------------------------------------------------------------------
0001C62E                            ; Special stage	mappings and VRAM pointers
0001C62E                            ; ---------------------------------------------------------------------------
0001C62E                            SS_MapIndex:
0001C62E                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C62E                            ; ---------------------------------------------------------------------------
0001C62E                            ; Special stage	mappings and VRAM pointers
0001C62E                            ; ---------------------------------------------------------------------------
0001C62E 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C632 0142                       	dc.w $142		; VRAM setting
0001C634 0000 0000                  	dc.l Map_SSWalls
0001C638 0142                       	dc.w $142
0001C63A 0000 0000                  	dc.l Map_SSWalls
0001C63E 0142                       	dc.w $142
0001C640 0000 0000                  	dc.l Map_SSWalls
0001C644 0142                       	dc.w $142
0001C646 0000 0000                  	dc.l Map_SSWalls
0001C64A 0142                       	dc.w $142
0001C64C 0000 0000                  	dc.l Map_SSWalls
0001C650 0142                       	dc.w $142
0001C652 0000 0000                  	dc.l Map_SSWalls
0001C656 0142                       	dc.w $142
0001C658 0000 0000                  	dc.l Map_SSWalls
0001C65C 0142                       	dc.w $142
0001C65E 0000 0000                  	dc.l Map_SSWalls
0001C662 0142                       	dc.w $142
0001C664 0000 0000                  	dc.l Map_SSWalls
0001C668 2142                       	dc.w $2142
0001C66A 0000 0000                  	dc.l Map_SSWalls
0001C66E 2142                       	dc.w $2142
0001C670 0000 0000                  	dc.l Map_SSWalls
0001C674 2142                       	dc.w $2142
0001C676 0000 0000                  	dc.l Map_SSWalls
0001C67A 2142                       	dc.w $2142
0001C67C 0000 0000                  	dc.l Map_SSWalls
0001C680 2142                       	dc.w $2142
0001C682 0000 0000                  	dc.l Map_SSWalls
0001C686 2142                       	dc.w $2142
0001C688 0000 0000                  	dc.l Map_SSWalls
0001C68C 2142                       	dc.w $2142
0001C68E 0000 0000                  	dc.l Map_SSWalls
0001C692 2142                       	dc.w $2142
0001C694 0000 0000                  	dc.l Map_SSWalls
0001C698 2142                       	dc.w $2142
0001C69A 0000 0000                  	dc.l Map_SSWalls
0001C69E 4142                       	dc.w $4142
0001C6A0 0000 0000                  	dc.l Map_SSWalls
0001C6A4 4142                       	dc.w $4142
0001C6A6 0000 0000                  	dc.l Map_SSWalls
0001C6AA 4142                       	dc.w $4142
0001C6AC 0000 0000                  	dc.l Map_SSWalls
0001C6B0 4142                       	dc.w $4142
0001C6B2 0000 0000                  	dc.l Map_SSWalls
0001C6B6 4142                       	dc.w $4142
0001C6B8 0000 0000                  	dc.l Map_SSWalls
0001C6BC 4142                       	dc.w $4142
0001C6BE 0000 0000                  	dc.l Map_SSWalls
0001C6C2 4142                       	dc.w $4142
0001C6C4 0000 0000                  	dc.l Map_SSWalls
0001C6C8 4142                       	dc.w $4142
0001C6CA 0000 0000                  	dc.l Map_SSWalls
0001C6CE 4142                       	dc.w $4142
0001C6D0 0000 0000                  	dc.l Map_SSWalls
0001C6D4 6142                       	dc.w $6142
0001C6D6 0000 0000                  	dc.l Map_SSWalls
0001C6DA 6142                       	dc.w $6142
0001C6DC 0000 0000                  	dc.l Map_SSWalls
0001C6E0 6142                       	dc.w $6142
0001C6E2 0000 0000                  	dc.l Map_SSWalls
0001C6E6 6142                       	dc.w $6142
0001C6E8 0000 0000                  	dc.l Map_SSWalls
0001C6EC 6142                       	dc.w $6142
0001C6EE 0000 0000                  	dc.l Map_SSWalls
0001C6F2 6142                       	dc.w $6142
0001C6F4 0000 0000                  	dc.l Map_SSWalls
0001C6F8 6142                       	dc.w $6142
0001C6FA 0000 0000                  	dc.l Map_SSWalls
0001C6FE 6142                       	dc.w $6142
0001C700 0000 0000                  	dc.l Map_SSWalls
0001C704 6142                       	dc.w $6142
0001C706 0000 F796                  	dc.l Map_obj47
0001C70A 023B                       	dc.w $23B
0001C70C 0000 0000                  	dc.l Map_SS_R
0001C710 0570                       	dc.w $570
0001C712 0000 0000                  	dc.l Map_SS_R
0001C716 0251                       	dc.w $251
0001C718 0000 0000                  	dc.l Map_SS_R
0001C71C 0370                       	dc.w $370
0001C71E 0000 0000                  	dc.l Map_SS_Up
0001C722 0263                       	dc.w $263
0001C724 0000 0000                  	dc.l Map_SS_Down
0001C728 0263                       	dc.w $263
0001C72A 0000 0000                  	dc.l Map_SS_R
0001C72E 22F0                       	dc.w $22F0
0001C730 0000 0000                  	dc.l Map_SS_Glass
0001C734 0470                       	dc.w $470
0001C736 0000 0000                  	dc.l Map_SS_Glass
0001C73A 05F0                       	dc.w $5F0
0001C73C 0000 0000                  	dc.l Map_SS_Glass
0001C740 65F0                       	dc.w $65F0
0001C742 0000 0000                  	dc.l Map_SS_Glass
0001C746 25F0                       	dc.w $25F0
0001C748 0000 0000                  	dc.l Map_SS_Glass
0001C74C 45F0                       	dc.w $45F0
0001C74E 0000 0000                  	dc.l Map_SS_R
0001C752 02F0                       	dc.w $2F0
0001C754 0100 F796                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C758 023B                       	dc.w $23B
0001C75A 0200 F796                  	dc.l Map_obj47+$2000000
0001C75E 023B                       	dc.w $23B
0001C760 0000 0000                  	dc.l Map_SS_R
0001C764 0797                       	dc.w $797
0001C766 0000 0000                  	dc.l Map_SS_R
0001C76A 07A0                       	dc.w $7A0
0001C76C 0000 0000                  	dc.l Map_SS_R
0001C770 07A9                       	dc.w $7A9
0001C772 0000 0000                  	dc.l Map_SS_R
0001C776 0797                       	dc.w $797
0001C778 0000 0000                  	dc.l Map_SS_R
0001C77C 07A0                       	dc.w $7A0
0001C77E 0000 0000                  	dc.l Map_SS_R
0001C782 07A9                       	dc.w $7A9
0001C784 0000 AAA2                  	dc.l Map_obj25
0001C788 27B2                       	dc.w $27B2
0001C78A 0000 0000                  	dc.l Map_SS_Chaos3
0001C78E 0770                       	dc.w $770
0001C790 0000 0000                  	dc.l Map_SS_Chaos3
0001C794 2770                       	dc.w $2770
0001C796 0000 0000                  	dc.l Map_SS_Chaos3
0001C79A 4770                       	dc.w $4770
0001C79C 0000 0000                  	dc.l Map_SS_Chaos3
0001C7A0 6770                       	dc.w $6770
0001C7A2 0000 0000                  	dc.l Map_SS_Chaos1
0001C7A6 0770                       	dc.w $770
0001C7A8 0000 0000                  	dc.l Map_SS_Chaos2
0001C7AC 0770                       	dc.w $770
0001C7AE 0000 0000                  	dc.l Map_SS_R
0001C7B2 04F0                       	dc.w $4F0
0001C7B4 0400 AAA2                  	dc.l Map_obj25+$4000000
0001C7B8 27B2                       	dc.w $27B2
0001C7BA 0500 AAA2                  	dc.l Map_obj25+$5000000
0001C7BE 27B2                       	dc.w $27B2
0001C7C0 0600 AAA2                  	dc.l Map_obj25+$6000000
0001C7C4 27B2                       	dc.w $27B2
0001C7C6 0700 AAA2                  	dc.l Map_obj25+$7000000
0001C7CA 27B2                       	dc.w $27B2
0001C7CC 0000 0000                  	dc.l Map_SS_Glass
0001C7D0 23F0                       	dc.w $23F0
0001C7D2 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C7D6 23F0                       	dc.w $23F0
0001C7D8 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C7DC 23F0                       	dc.w $23F0
0001C7DE 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C7E2 23F0                       	dc.w $23F0
0001C7E4 0000 0000                  	dc.l Map_SS_R+$2000000
0001C7E8 04F0                       	dc.w $4F0
0001C7EA 0000 0000                  	dc.l Map_SS_Glass
0001C7EE 05F0                       	dc.w $5F0
0001C7F0 0000 0000                  	dc.l Map_SS_Glass
0001C7F4 65F0                       	dc.w $65F0
0001C7F6 0000 0000                  	dc.l Map_SS_Glass
0001C7FA 25F0                       	dc.w $25F0
0001C7FC 0000 0000                  	dc.l Map_SS_Glass
0001C800 45F0                       	dc.w $45F0
0001C800 45F0                       	dc.w $45F0
0001C802                            
0001C802                            ; ---------------------------------------------------------------------------
0001C802                            ; Sprite mappings - special stage "R" block
0001C802                            ; ---------------------------------------------------------------------------
0001C802                            Map_SS_R:
0001C802                            	include "_maps\SSRblock.asm"
0001C802                            ; ---------------------------------------------------------------------------
0001C802                            ; Sprite mappings - special stage "R" block
0001C802                            ; ---------------------------------------------------------------------------
0001C802 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C806 0000                       		dc.w byte_1B91E-Map_SS_R
0001C808 01                         byte_1B912:	dc.b 1
0001C809 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C80E 01                         byte_1B918:	dc.b 1
0001C80F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C814 00                         byte_1B91E:	dc.b 0
0001C816 00                         		even
0001C816 00                         		even
0001C816                            
0001C816                            ; ---------------------------------------------------------------------------
0001C816                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C816                            ; ---------------------------------------------------------------------------
0001C816                            Map_SS_Glass:
0001C816                            	include "_maps\SSglassblock.asm"
0001C816                            ; ---------------------------------------------------------------------------
0001C816                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C816                            ; ---------------------------------------------------------------------------
0001C816 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C81A 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C81E 01                         byte_1B928:	dc.b 1
0001C81F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C824 01                         byte_1B92E:	dc.b 1
0001C825 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C82A 01                         byte_1B934:	dc.b 1
0001C82B F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C830 01                         byte_1B93A:	dc.b 1
0001C831 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C836                            		even
0001C836                            		even
0001C836                            
0001C836                            ; ---------------------------------------------------------------------------
0001C836                            ; Sprite mappings - special stage "UP" block
0001C836                            ; ---------------------------------------------------------------------------
0001C836                            Map_SS_Up:
0001C836                            	include "_maps\SSUPblock.asm"
0001C836                            ; ---------------------------------------------------------------------------
0001C836                            ; Sprite mappings - special stage "UP" block
0001C836                            ; ---------------------------------------------------------------------------
0001C836 0000                       		dc.w byte_1B944-Map_SS_Up
0001C838 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C83A 01                         byte_1B944:	dc.b 1
0001C83B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C840 01                         byte_1B94A:	dc.b 1
0001C841 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C846                            		even
0001C846                            		even
0001C846                            
0001C846                            ; ---------------------------------------------------------------------------
0001C846                            ; Sprite mappings - special stage "DOWN" block
0001C846                            ; ---------------------------------------------------------------------------
0001C846                            Map_SS_Down:
0001C846                            	include "_maps\SSDOWNblock.asm"
0001C846                            ; ---------------------------------------------------------------------------
0001C846                            ; Sprite mappings - special stage "DOWN" block
0001C846                            ; ---------------------------------------------------------------------------
0001C846 0000                       		dc.w byte_1B954-Map_SS_Down
0001C848 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C84A 01                         byte_1B954:	dc.b 1
0001C84B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C850 01                         byte_1B95A:	dc.b 1
0001C851 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C856                            		even
0001C856                            		even
0001C856                            
0001C856                            ; ---------------------------------------------------------------------------
0001C856                            ; Sprite mappings - special stage chaos	emeralds
0001C856                            ; ---------------------------------------------------------------------------
0001C856 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C858 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C85A 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C85C 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C85E 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C860 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C862 01                         byte_1B96C:	dc.b 1
0001C863 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C868 01                         byte_1B972:	dc.b 1
0001C869 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C86E 01                         byte_1B978:	dc.b 1
0001C86F F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C874 01                         byte_1B97E:	dc.b 1
0001C875 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C87A                            		even
0001C87A                            ; ===========================================================================
0001C87A                            ; ---------------------------------------------------------------------------
0001C87A                            ; Object 09 - Sonic (special stage)
0001C87A                            ; ---------------------------------------------------------------------------
0001C87A                            
0001C87A                            Obj09:					; XREF: Obj_Index
0001C87A                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C87A                            ;		beq.s	Obj09_Normal	; if not, branch
0001C87A 6100 0000                  		bsr.w	SS_FixCamera
0001C87E                            ;		bra.w	DebugMode
0001C87E                            ; ===========================================================================
0001C87E                            
0001C87E                            Obj09_Normal:
0001C87E 7000                       		moveq	#0,d0
0001C880 1028 0024                  		move.b	$24(a0),d0
0001C884 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C888 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C88C                            ; ===========================================================================
0001C88C 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C88E 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C890 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C892 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C894                            ; ===========================================================================
0001C894                            
0001C894                            Obj09_Main:				; XREF: Obj09_Index
0001C894 5428 0024                  		addq.b	#2,$24(a0)
0001C898 117C 000E 0016             		move.b	#$E,$16(a0)
0001C89E 117C 0007 0017             		move.b	#7,$17(a0)
0001C8A4 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C8AC 317C 0780 0002             		move.w	#$780,2(a0)
0001C8B2 117C 0004 0001             		move.b	#4,1(a0)
0001C8B8 117C 0000 0018             		move.b	#0,$18(a0)
0001C8BE 117C 0002 001C             		move.b	#2,$1C(a0)
0001C8C4 08E8 0002 0022             		bset	#2,$22(a0)
0001C8CA 08E8 0001 0022             		bset	#1,$22(a0)
0001C8D0                            
0001C8D0                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C8D0                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C8D0                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C8D0                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001C8D0                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C8D0                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C8D0                            
0001C8D0                            Obj09_NoDebug:
0001C8D0 117C 0000 0030             		move.b	#0,$30(a0)
0001C8D6 7000                       		moveq	#0,d0
0001C8D8 1028 0022                  		move.b	$22(a0),d0
0001C8DC 0240 0002                  		andi.w	#2,d0
0001C8E0 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C8E4 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C8E8 4EBA 808A                  		jsr	LoadSonicDynPLC
0001C8EC 4EF9 0000 E2A8             		jmp	DisplaySprite
0001C8F2                            ; ===========================================================================
0001C8F2 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C8F4 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C8F6                            ; ===========================================================================
0001C8F6                            
0001C8F6                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C8F6 6100 0000                  		bsr.w	Obj09_Rise
0001C8FA 6100 0000                  		bsr.w	Obj09_Move
0001C8FE 6100 0000                  		bsr.w	Obj09_Fall
0001C902 6000                       		bra.s	Obj09_Display
0001C904                            ; ===========================================================================
0001C904                            
0001C904                            Obj09_InAir:				; XREF: Obj09_Modes
0001C904 6100 0000                  		bsr.w	Obj09_Rise
0001C908 6100 0000                  		bsr.w	Obj09_Move
0001C90C 6100 0000                  		bsr.w	Obj09_Fall
0001C910                            
0001C910                            Obj09_Display:				; XREF: Obj09_OnWall
0001C910 6100 0000                  		bsr.w	Obj09_ChkItems
0001C914 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C918 4EB9 0000 E26E             		jsr	SpeedToPos
0001C91E 6100 0000                  		bsr.w	SS_FixCamera
0001C922 3038 F780                  		move.w	($FFFFF780).w,d0
0001C926 D078 F782                  		add.w	($FFFFF782).w,d0
0001C92A 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C92E 4EB9 0001 46CE             		jsr	Sonic_Animate
0001C934 4E75                       		rts	
0001C936                            
0001C936                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C936                            
0001C936                            
0001C936                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C936 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C93C 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C93E 4A78 F784                          tst.w   ($FFFFF784).w
0001C942 6600                               bne.s   @corereverse1
0001C944 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C948 6000                               bra.s   Obj09_ChkRight          
0001C94A                            
0001C94A                            @corereverse1:
0001C94A 6100 0000                          bsr.w	Obj09_MoveRight
0001C94E                            
0001C94E                            Obj09_ChkRight:
0001C94E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C954 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001C956 4A78 F784                          tst.w   ($FFFFF784).w
0001C95A 6600                               bne.s   @corereverse2
0001C95C 6100 0000                  		bsr.w	Obj09_MoveRight
0001C960 6000                               bra.s   Obj09_MoveSpeed 
0001C962                            
0001C962                            @corereverse2:
0001C962 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001C966                            
0001C966                            Obj09_MoveSpeed:
0001C966 1038 F602                  		move.b	($FFFFF602).w,d0
0001C96A 0200 000C                  		andi.b	#$C,d0
0001C96E 6600                       		bne.s	Obj09_MoveCollision
0001C970 3028 0010                  		move.w	$10(a0),d0
0001C974 6700                       		beq.s	Obj09_MoveCollision
0001C976 317C 0000 0010             		move.w	#0,$10(a0)
0001C97C                            
0001C97C                            Obj09_MoveCollision:
0001C97C 1038 F780                  		move.b	($FFFFF780).w,d0
0001C980 0600 0020                  		addi.b	#$20,d0
0001C984 0200 00C0                  		andi.b	#$C0,d0
0001C988 4400                       		neg.b	d0
0001C98A 4EB9 0000 2D86             		jsr	(CalcSine).l
0001C990 C3E8 0010                  		muls.w	$10(a0),d1
0001C994 D3A8 0008                  		add.l	d1,8(a0)
0001C998 C1E8 0012                  		muls.w	$12(a0),d0
0001C99C D1A8 000C                  		add.l	d0,$C(a0)
0001C9A0 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C9A4 2428 000C                  		move.l	$C(a0),d2
0001C9A8 2628 0008                  		move.l	8(a0),d3
0001C9AC 6100 0000                  		bsr.w	sub_1BCE8
0001C9B0 6700                       		beq.s	loc_1BAF2
0001C9B2 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C9B6 93A8 0008                  		sub.l	d1,8(a0)
0001C9BA 91A8 000C                  		sub.l	d0,$C(a0)
0001C9BE 317C 0000 0010             		move.w	#0,$10(a0)
0001C9C4 4E75                       		rts	
0001C9C6                            ; ===========================================================================
0001C9C6                            
0001C9C6                            loc_1BAF2:
0001C9C6 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C9CA 4E75                       		rts	
0001C9CC                            ; End of function Obj09_Move
0001C9CC                            
0001C9CC                            
0001C9CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9CC                            
0001C9CC                            
0001C9CC                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C9CC 08E8 0000 0022             		bset	#0,$22(a0)
0001C9D2 4240                               clr.w   d0
0001C9D4 3038 F786                          move.w  ($FFFFF786).w,d0
0001C9D8 D040                               add.w   d0,d0
0001C9DA 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C9E0 4468 0010                          neg.w   $10(a0)
0001C9E4 4E75                               rts
0001C9E6                            
0001C9E6                            ; End of function Obj09_MoveLeft
0001C9E6                            
0001C9E6                            
0001C9E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9E6                            
0001C9E6                            
0001C9E6                            Obj09_MoveRight:
0001C9E6 08A8 0000 0022             		bclr	#0,$22(a0)
0001C9EC 4240                               clr.w   d0
0001C9EE 3038 F786                          move.w  ($FFFFF786).w,d0
0001C9F2 D040                               add.w   d0,d0
0001C9F4 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C9FA 4E75                       		rts
0001C9FC                            
0001C9FC                            ; End of function Obj09_MoveRight
0001C9FC                            
0001C9FC                            ; ---------------------------------------------------------------------------
0001C9FC                            
0001C9FC                            SS_XSpdIndex:
0001C9FC 0032                       		dc.w 50
0001C9FE 0064                       		dc.w 100
0001CA00 0096                       		dc.w 150
0001CA02 00C8                       		dc.w 200
0001CA04 00FA                       		dc.w 250
0001CA06                            
0001CA06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA06                            
0001CA06                            
0001CA06                            Obj09_Rise:				; XREF: Obj09_OnWall
0001CA06 0838 0000 F602             		btst	#0,($FFFFF602).w
0001CA0C 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001CA0E 4A78 F784                          tst.w   ($FFFFF784).w
0001CA12 6600 0000                          bne.w   @corereverse1
0001CA16 6100 0000                  		bsr.w	Obj09_MoveUp
0001CA1A 6000                               bra.s   Obj09_NoRise
0001CA1C                            
0001CA1C                            @corereverse1:
0001CA1C 6100 0000                  		bsr.w	Obj09_Falling 
0001CA20                                    
0001CA20                            Obj09_NoRise:
0001CA20 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001CA26 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001CA28 4A78 F784                          tst.w   ($FFFFF784).w
0001CA2C 6600 0000                          bne.w   @corereverse2
0001CA30 6100 0000                  		bsr.w	Obj09_Falling			;	
0001CA34 6000                               bra.s   Obj09_MoveYSpeed
0001CA36                            
0001CA36                            @corereverse2:
0001CA36 6100 0000                  		bsr.w	Obj09_MoveUp
0001CA3A                            		
0001CA3A                            Obj09_MoveYSpeed:
0001CA3A 1038 F602                  		move.b	($FFFFF602).w,d0
0001CA3E 0200 0003                  		andi.b	#3,d0
0001CA42 6600                       		bne.s	Obj09_MoveYCollision
0001CA44 3028 0012                  		move.w	$12(a0),d0
0001CA48 6700                       		beq.s	Obj09_MoveYCollision
0001CA4A 317C 0000 0012             		move.w	#0,$12(a0)
0001CA50                            
0001CA50                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001CA50 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001CA54 0600 0020                  		addi.b	#$20,d0					;	?
0001CA58 0200 00C0                  		andi.b	#$C0,d0					;	
0001CA5C 4400                       		neg.b	d0						;	?
0001CA5E 4EB9 0000 2D86             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001CA64 C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001CA68 D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001CA6C C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001CA70 D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001CA74 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001CA78 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001CA7C 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001CA80 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001CA84 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001CA88 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001CA8C 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001CA90 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001CA94 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001CA9A 4E75                       		rts								;	end routine
0001CA9C                            
0001CA9C                            Obj09_MoveUp:
0001CA9C 4240                               clr.w   d0
0001CA9E 3038 F786                          move.w  ($FFFFF786).w,d0
0001CAA2 D040                               add.w   d0,d0
0001CAA4 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001CAAA 4468 0012                          neg.w   $12(a0)
0001CAAE 4E75                               rts
0001CAB0                            
0001CAB0                            Obj09_Falling:
0001CAB0 4240                               clr.w   d0
0001CAB2 3038 F786                          move.w  ($FFFFF786).w,d0
0001CAB6 D040                               add.w   d0,d0
0001CAB8 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001CABE 4E75                       		rts
0001CAC0                            ; End of function Obj09_Jump
0001CAC0                            
0001CAC0                            ; ---------------------------------------------------------------------------
0001CAC0                            SS_YSpdIndex:
0001CAC0 0080                       		dc.w $80
0001CAC2 0100                       		dc.w $100
0001CAC4 0180                       		dc.w $180
0001CAC6 0200                       		dc.w $200
0001CAC8 0280                       		dc.w $280
0001CACA                            
0001CACA                            
0001CACA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CACA                            
0001CACA                            
0001CACA                            nullsub_2:				; XREF: Obj09_InAir
0001CACA 4E75                       		rts	
0001CACC                            ; End of function nullsub_2
0001CACC                            
0001CACC                            ; ===========================================================================
0001CACC                            ; ---------------------------------------------------------------------------
0001CACC                            ; unused subroutine to limit Sonic's upward vertical speed
0001CACC                            ; ---------------------------------------------------------------------------
0001CACC 323C FC00                  		move.w	#-$400,d1
0001CAD0 B268 0012                  		cmp.w	$12(a0),d1
0001CAD4 6F00                       		ble.s	locret_1BBB4
0001CAD6 1038 F602                  		move.b	($FFFFF602).w,d0
0001CADA 0200 0070                  		andi.b	#$70,d0
0001CADE 6600                       		bne.s	locret_1BBB4
0001CAE0 3141 0012                  		move.w	d1,$12(a0)
0001CAE4                            
0001CAE4                            locret_1BBB4:
0001CAE4 4E75                       		rts	
0001CAE6                            ; ---------------------------------------------------------------------------
0001CAE6                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001CAE6                            ; ---------------------------------------------------------------------------
0001CAE6                            
0001CAE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAE6                            
0001CAE6                            
0001CAE6                            SS_FixCamera:				; XREF: Obj09
0001CAE6 3428 000C                  		move.w	$C(a0),d2
0001CAEA 3628 0008                  		move.w	8(a0),d3
0001CAEE 3038 F700                  		move.w	($FFFFF700).w,d0
0001CAF2 0443 00A0                  		subi.w	#$A0,d3
0001CAF6 6500                       		bcs.s	loc_1BBCE
0001CAF8 9043                       		sub.w	d3,d0
0001CAFA 9178 F700                  		sub.w	d0,($FFFFF700).w
0001CAFE                            
0001CAFE                            loc_1BBCE:
0001CAFE 3038 F704                  		move.w	($FFFFF704).w,d0
0001CB02 0442 0070                  		subi.w	#$70,d2
0001CB06 6500                       		bcs.s	locret_1BBDE
0001CB08 9042                       		sub.w	d2,d0
0001CB0A 9178 F704                  		sub.w	d0,($FFFFF704).w
0001CB0E                            
0001CB0E                            locret_1BBDE:
0001CB0E 4E75                       		rts	
0001CB10                            ; End of function SS_FixCamera
0001CB10                            
0001CB10                            ; ===========================================================================
0001CB10                            
0001CB10                            Obj09_ExitStage:			; XREF: Obj09_Index
0001CB10 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001CB16 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001CB1C 6600                       		bne.s	loc_1BBF4
0001CB1E 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001CB24                            
0001CB24                            loc_1BBF4:
0001CB24 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001CB2A 6D00                       		blt.s	loc_1BC12
0001CB2C 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001CB32                            ;		move.w	#$4000,($FFFFF780).w
0001CB32 5428 0024                  		addq.b	#2,$24(a0)
0001CB36 317C 003C 0038             		move.w	#$3C,$38(a0)
0001CB3C                            
0001CB3C                            loc_1BC12:
0001CB3C                            ;		move.w	($FFFFF780).w,d0
0001CB3C                            ;		add.w	($FFFFF782).w,d0
0001CB3C                            ;		move.w	d0,($FFFFF780).w
0001CB3C 4EB9 0001 46CE             		jsr	Sonic_Animate
0001CB42 4EB9 0001 4974             		jsr	LoadSonicDynPLC
0001CB48 6100 FF9C                  		bsr.w	SS_FixCamera
0001CB4C 4EF9 0000 E2A8             		jmp	DisplaySprite
0001CB52                            ; ===========================================================================
0001CB52                            
0001CB52                            Obj09_Exit2:				; XREF: Obj09_Index
0001CB52 5368 0038                  		subq.w	#1,$38(a0)
0001CB56 6600                       		bne.s	loc_1BC40
0001CB58 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001CB5E                            
0001CB5E                            loc_1BC40:
0001CB5E 4EB9 0001 46CE             		jsr	Sonic_Animate
0001CB64 4EB9 0001 4974             		jsr	LoadSonicDynPLC
0001CB6A 6100 FF7A                  		bsr.w	SS_FixCamera
0001CB6E 4EF9 0000 E2A8             		jmp	DisplaySprite
0001CB74                            
0001CB74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB74                            
0001CB74                            
0001CB74                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001CB74 2428 000C                  		move.l	$C(a0),d2
0001CB78 2628 0008                  		move.l	8(a0),d3
0001CB7C 1038 F780                  		move.b	($FFFFF780).w,d0
0001CB80 0200 00FC                  		andi.b	#$FC,d0
0001CB84 4EB9 0000 2D86             		jsr	(CalcSine).l
0001CB8A 3828 0010                  		move.w	$10(a0),d4
0001CB8E 48C4                       		ext.l	d4
0001CB90 E184                       		asl.l	#8,d4
0001CB92 C1FC 002A                  		muls.w	#$2A,d0
0001CB96 D084                       		add.l	d4,d0
0001CB98 3828 0012                  		move.w	$12(a0),d4
0001CB9C 48C4                       		ext.l	d4
0001CB9E E184                       		asl.l	#8,d4
0001CBA0 C3FC 002A                  		muls.w	#$2A,d1
0001CBA4 D284                       		add.l	d4,d1
0001CBA6 7A00                       		moveq	#0,d5
0001CBA8 3A28 0010                  		move.w	$10(a0),d5
0001CBAC 6700                       		beq.s	Obj09_NoXFall
0001CBAE D680                       		add.l	d0,d3
0001CBB0 6100 0000                  		bsr.w	sub_1BCE8
0001CBB4 6700                       		beq.s	loc_1BCB0
0001CBB6 9680                       		sub.l	d0,d3
0001CBB8 7000                       		moveq	#0,d0
0001CBBA 3140 0010                  		move.w	d0,$10(a0)
0001CBBE 08A8 0001 0022             		bclr	#1,$22(a0)
0001CBC4                            
0001CBC4                            Obj09_NoXFall
0001CBC4 7C00                       		moveq	#0,d6
0001CBC6 3C28 0012                  		move.w	$12(a0),d6
0001CBCA 6700                       		beq.s	Obj09_NoYFall
0001CBCC D481                       		add.l	d1,d2
0001CBCE 6100 0000                  		bsr.w	sub_1BCE8
0001CBD2 6700                       		beq.s	loc_1BCC6
0001CBD4 9481                       		sub.l	d1,d2
0001CBD6 7200                       		moveq	#0,d1
0001CBD8 3141 0012                  		move.w	d1,$12(a0)
0001CBDC 4E75                       		rts	
0001CBDE                            ; ===========================================================================
0001CBDE                            
0001CBDE                            loc_1BCB0:
0001CBDE 7C00                       		moveq	#0,d6
0001CBE0 3C28 0012                  		move.w	$12(a0),d6
0001CBE4 6700                       		beq.s	Obj09_NoYFall
0001CBE6 D481                       		add.l	d1,d2
0001CBE8 6100 0000                  		bsr.w	sub_1BCE8
0001CBEC 6700                       		beq.s	loc_1BCD4
0001CBEE 9481                       		sub.l	d1,d2
0001CBF0 7200                       		moveq	#0,d1
0001CBF2 3141 0012                  		move.w	d1,$12(a0)
0001CBF6 08A8 0001 0022             		bclr	#1,$22(a0)
0001CBFC                            
0001CBFC                            loc_1BCC6:
0001CBFC E080                       		asr.l	#8,d0
0001CBFE E081                       		asr.l	#8,d1
0001CC00 3140 0010                  		move.w	d0,$10(a0)
0001CC04 3141 0012                  		move.w	d1,$12(a0)
0001CC08 4E75                       		rts	
0001CC0A                            ; ===========================================================================
0001CC0A                            
0001CC0A                            loc_1BCD4:
0001CC0A E080                       		asr.l	#8,d0
0001CC0C E081                       		asr.l	#8,d1
0001CC0E 3140 0010                  		move.w	d0,$10(a0)
0001CC12 3141 0012                  		move.w	d1,$12(a0)
0001CC16 08E8 0001 0022             		bset	#1,$22(a0)
0001CC1C 4E75                       		rts	
0001CC1E                            
0001CC1E                            Obj09_NoYFall:
0001CC1E 4E75                       		rts
0001CC20                            ; End of function Obj09_Fall
0001CC20                            
0001CC20                            
0001CC20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC20                            
0001CC20                            
0001CC20                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001CC20 43F9 00FF 0000             		lea	($FF0000).l,a1
0001CC26 7800                       		moveq	#0,d4
0001CC28 4842                       		swap	d2
0001CC2A 3802                       		move.w	d2,d4
0001CC2C 4842                       		swap	d2
0001CC2E 0644 0044                  		addi.w	#$44,d4
0001CC32 88FC 0018                  		divu.w	#$18,d4
0001CC36 C8FC 0080                  		mulu.w	#$80,d4
0001CC3A D3C4                       		adda.l	d4,a1
0001CC3C 7800                       		moveq	#0,d4
0001CC3E 4843                       		swap	d3
0001CC40 3803                       		move.w	d3,d4
0001CC42 4843                       		swap	d3
0001CC44 0644 0014                  		addi.w	#$14,d4
0001CC48 88FC 0018                  		divu.w	#$18,d4
0001CC4C D2C4                       		adda.w	d4,a1
0001CC4E 7A00                       		moveq	#0,d5
0001CC50 1819                       		move.b	(a1)+,d4
0001CC52 6100                       		bsr.s	sub_1BD30
0001CC54 1819                       		move.b	(a1)+,d4
0001CC56 6100                       		bsr.s	sub_1BD30
0001CC58 D2FC 007E                  		adda.w	#$7E,a1
0001CC5C 1819                       		move.b	(a1)+,d4
0001CC5E 6100                       		bsr.s	sub_1BD30
0001CC60 1819                       		move.b	(a1)+,d4
0001CC62 6100                       		bsr.s	sub_1BD30
0001CC64 4A05                       		tst.b	d5
0001CC66 4E75                       		rts	
0001CC68                            ; End of function sub_1BCE8
0001CC68                            
0001CC68                            
0001CC68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC68                            
0001CC68                            
0001CC68                            sub_1BD30:				; XREF: sub_1BCE8
0001CC68 6700                       		beq.s	locret_1BD44
0001CC6A 0C04 0028                  		cmpi.b	#$28,d4
0001CC6E 6500                       		blo.s	loc_1BD46
0001CC70 0C04 004B                  		cmpi.b	#$4B,d4
0001CC74 6400                       		bhs.s	loc_1BD46
0001CC76 0C04 003A                  		cmpi.b	#$3A,d4
0001CC7A 6400                       		bhs.s	locret_1BD44
0001CC7C 0C04 002C                  		cmpi.b	#$2C,d4
0001CC80 6400                       		bhs.s	loc_1BD46
0001CC82                            
0001CC82                            locret_1BD44:
0001CC82 4E75                       		rts	
0001CC84                            ; ===========================================================================
0001CC84                            
0001CC84                            loc_1BD46:
0001CC84 1144 0030                  		move.b	d4,$30(a0)
0001CC88 2149 0032                  		move.l	a1,$32(a0)
0001CC8C 7AFF                       		moveq	#-1,d5
0001CC8E 4E75                       		rts	
0001CC90                            ; End of function sub_1BD30
0001CC90                            
0001CC90                            
0001CC90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC90                            
0001CC90                            
0001CC90                            Obj09_ChkItems:				; XREF: Obj09_Display
0001CC90 43F9 00FF 0000             		lea	($FF0000).l,a1
0001CC96 7800                       		moveq	#0,d4
0001CC98 3828 000C                  		move.w	$C(a0),d4
0001CC9C 0644 0050                  		addi.w	#$50,d4
0001CCA0 88FC 0018                  		divu.w	#$18,d4
0001CCA4 C8FC 0080                  		mulu.w	#$80,d4
0001CCA8 D3C4                       		adda.l	d4,a1
0001CCAA 7800                       		moveq	#0,d4
0001CCAC 3828 0008                  		move.w	8(a0),d4
0001CCB0 0644 0020                  		addi.w	#$20,d4
0001CCB4 88FC 0018                  		divu.w	#$18,d4
0001CCB8 D2C4                       		adda.w	d4,a1
0001CCBA 1811                       		move.b	(a1),d4
0001CCBC 6600                       		bne.s	Obj09_ChkCont
0001CCBE 4A28 003A                  		tst.b	$3A(a0)
0001CCC2 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001CCC6 7800                       		moveq	#0,d4
0001CCC8 4E75                       		rts	
0001CCCA                            ; ===========================================================================
0001CCCA                            
0001CCCA                            Obj09_ChkCont:
0001CCCA 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001CCCE 6600                       		bne.s	Obj09_Chk1Up
0001CCD0 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001CCD4 6600                       		bne.s	Obj09_GetCont
0001CCD6 14BC 0001                  		move.b	#1,(a2)
0001CCDA 2549 0004                  		move.l	a1,4(a2)
0001CCDE                            
0001CCDE                            Obj09_GetCont:
0001CCDE 4EB9 0000 A788             		jsr	CollectRing
0001CCE4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001CCEA 6500                       		bcs.s	Obj09_NoCont
0001CCEC 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001CCF2 6600                       		bne.s	Obj09_NoCont
0001CCF4 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001CCF8 303C 00BF                  		move.w	#$BF,d0
0001CCFC 4EB9 0000 15E6             		jsr	(PlaySound).l	; play extra continue sound
0001CD02                            
0001CD02                            Obj09_NoCont:
0001CD02 7800                       		moveq	#0,d4
0001CD04 4E75                       		rts	
0001CD06                            ; ===========================================================================
0001CD06                            
0001CD06                            Obj09_Chk1Up:
0001CD06 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001CD0A 6600                       		bne.s	Obj09_ChkEmer
0001CD0C 6100 F6A2                  		bsr.w	SS_RemoveCollectedItem
0001CD10 6600                       		bne.s	Obj09_Get1Up
0001CD12 14BC 0003                  		move.b	#3,(a2)
0001CD16 2549 0004                  		move.l	a1,4(a2)
0001CD1A                            
0001CD1A                            Obj09_Get1Up:
0001CD1A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001CD1E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001CD22 303C 0088                  		move.w	#$88,d0
0001CD26 4EB9 0000 15E6             		jsr	(PlaySound).l	; play extra life music
0001CD2C 7800                       		moveq	#0,d4
0001CD2E 4E75                       		rts	
0001CD30                            ; ===========================================================================
0001CD30                            
0001CD30                            Obj09_ChkEmer:
0001CD30 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001CD34 6500                       		bcs.s	Obj09_UPblock
0001CD36 0C04 0040                  		cmpi.b	#$40,d4
0001CD3A 6200                       		bhi.s	Obj09_UPblock
0001CD3C 6100 F672                  		bsr.w	SS_RemoveCollectedItem
0001CD40 6600                       		bne.s	Obj09_GetEmer
0001CD42 14BC 0005                  		move.b	#5,(a2)
0001CD46 2549 0004                  		move.l	a1,4(a2)
0001CD4A                            
0001CD4A                            Obj09_GetEmer:
0001CD4A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001CD50 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001CD52 0404 003B                  		subi.b	#$3B,d4
0001CD56 7000                       		moveq	#0,d0
0001CD58 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001CD5C 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001CD60 1584 0000                  		move.b	d4,(a2,d0.w)
0001CD64 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001CD68                            
0001CD68                            Obj09_NoEmer:
0001CD68 303C 0093                  		move.w	#$93,d0
0001CD6C 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play emerald music
0001CD72 7800                       		moveq	#0,d4
0001CD74 4E75                       		rts	
0001CD76                            
0001CD76                            ; ===========================================================================
0001CD76                            
0001CD76                            Obj09_UPblock:
0001CD76 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001CD7A 6600                       		bne.s	Obj09_DOWNblock
0001CD7C 6100 F632                  		bsr.w	SS_RemoveCollectedItem
0001CD80 6600                       		bne.s	Obj09_SpeedUp
0001CD82 14BC 0001                  		move.b	#1,(a2)
0001CD86 2549 0004                  		move.l	a1,4(a2)
0001CD8A                            
0001CD8A                            Obj09_SpeedUp:
0001CD8A 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001CD90 6400                       		bhs.s	Obj09_UPsnd
0001CD92 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001CD96                            
0001CD96                            Obj09_UPsnd:
0001CD96 303C 00A9                  		move.w	#$A9,d0
0001CD9A 4EB9 0000 15EC             		jsr	(PlaySound_Special).l	; play up/down sound
0001CDA0 7800                       		moveq	#0,d4
0001CDA2 4E75                       		rts	
0001CDA4                            ; ===========================================================================
0001CDA4                            
0001CDA4                            Obj09_DOWNblock:
0001CDA4 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001CDA8 6600                       		bne.s	Obj09_Rblock
0001CDAA 6100 F604                  		bsr.w	SS_RemoveCollectedItem
0001CDAE 6600                       		bne.s	Obj09_SpeedDown
0001CDB0 14BC 0001                  		move.b	#1,(a2)
0001CDB4 2549 0004                  		move.l	a1,4(a2)
0001CDB8                            
0001CDB8                            Obj09_SpeedDown:
0001CDB8 4A78 F786                  		tst.w 	($FFFFF786).w
0001CDBC 6700                       		beq.s	Obj09_DOWNsnd
0001CDBE 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001CDC2                            
0001CDC2                            Obj09_DOWNsnd:
0001CDC2 303C 00A9                  		move.w	#$A9,d0
0001CDC6 4EB9 0000 15EC             		jsr	(PlaySound_Special).l	; play up/down sound
0001CDCC 7800                       		moveq	#0,d4
0001CDCE 4E75                       		rts	
0001CDD0                            ; ===========================================================================
0001CDD0                            
0001CDD0                            Obj09_Rblock:
0001CDD0 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001CDD4 6600                       		bne.s	Obj09_ChkGhost
0001CDD6 6100 F5D8                  		bsr.w	SS_RemoveCollectedItem
0001CDDA 6600                       		bne.s	Obj09_RevStage
0001CDDC 14BC 0001                  		move.b	#1,(a2)
0001CDE0 2549 0004                  		move.l	a1,4(a2)
0001CDE4                            
0001CDE4                            Obj09_RevStage:
0001CDE4 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001CDEA 103C 00A9                  		move.b	#$A9,d0
0001CDEE 4EB9 0000 15EC             		jsr	(PlaySound_Special).l	; play sound
0001CDF4 7800                       		moveq	#0,d4
0001CDF6 4E75                       		rts	
0001CDF8                            
0001CDF8                            ; ===========================================================================
0001CDF8                            
0001CDF8                            Obj09_ChkGhost:
0001CDF8 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001CDFC 6600                       		bne.s	Obj09_ChkGhostTag
0001CDFE 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001CE04                            
0001CE04                            Obj09_ChkGhostTag:
0001CE04 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001CE08 6600                       		bne.s	Obj09_NoGhost
0001CE0A 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001CE10 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001CE12 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001CE18                            
0001CE18                            Obj09_NoGhost:
0001CE18 78FF                       		moveq	#-1,d4
0001CE1A 4E75                       		rts	
0001CE1C                            ; ===========================================================================
0001CE1C                            
0001CE1C                            Obj09_MakeGhostSolid:
0001CE1C 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001CE22 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001CE24 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CE2A 723F                       		moveq	#$3F,d1
0001CE2C                            
0001CE2C                            Obj09_GhostLoop2:
0001CE2C 743F                       		moveq	#$3F,d2
0001CE2E                            
0001CE2E                            Obj09_GhostLoop:
0001CE2E 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001CE32 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001CE34 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001CE38                            
0001CE38                            Obj09_NoReplace:
0001CE38 5249                       		addq.w	#1,a1
0001CE3A 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001CE3E 43E9 0040                  		lea	$40(a1),a1
0001CE42 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001CE46                            
0001CE46                            Obj09_GhostNotSolid:
0001CE46 4228 003A                  		clr.b	$3A(a0)
0001CE4A 7800                       		moveq	#0,d4
0001CE4C 4E75                       		rts	
0001CE4E                            ; End of function Obj09_ChkItems
0001CE4E                            
0001CE4E                            
0001CE4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE4E                            
0001CE4E                            
0001CE4E                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001CE4E 1028 0030                  		move.b	$30(a0),d0
0001CE52 6600                       		bne.s	Obj09_GOAL
0001CE54 5328 0036                  		subq.b	#1,$36(a0)
0001CE58 6A00                       		bpl.s	loc_1BEA0
0001CE5A 117C 0000 0036             		move.b	#0,$36(a0)
0001CE60                            
0001CE60                            loc_1BEA0:
0001CE60 5328 0037                  		subq.b	#1,$37(a0)
0001CE64 6A00                       		bpl.s	locret_1BEAC
0001CE66 117C 0000 0037             		move.b	#0,$37(a0)
0001CE6C                            
0001CE6C                            locret_1BEAC:
0001CE6C 4E75                       		rts	
0001CE6E                            ; ===========================================================================
0001CE6E                            
0001CE6E                            ; ===========================================================================
0001CE6E                            
0001CE6E                            Obj09_GOAL:
0001CE6E 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001CE72 6600                       		bne.s	Obj09_ChkGlass
0001CE74 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001CE78 303C 00A8                  		move.w	#$A8,d0		; change item
0001CE7C 4EB9 0000 15EC             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001CE82 4E75                       		rts	
0001CE84                            ; ===========================================================================
0001CE84                            
0001CE84                            ; ===========================================================================
0001CE84                            
0001CE84                            Obj09_ChkGlass:
0001CE84 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001CE88 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001CE8A 0C00 002E                  		cmpi.b	#$2E,d0
0001CE8E 6700                       		beq.s	Obj09_Glass
0001CE90 0C00 002F                  		cmpi.b	#$2F,d0
0001CE94 6700                       		beq.s	Obj09_Glass
0001CE96 0C00 0030                  		cmpi.b	#$30,d0
0001CE9A 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001CE9C                            
0001CE9C                            Obj09_Glass:
0001CE9C 6100 F512                  		bsr.w	SS_RemoveCollectedItem
0001CEA0 6600                       		bne.s	Obj09_GlassSnd
0001CEA2 14BC 0006                  		move.b	#6,(a2)
0001CEA6 2268 0032                  		movea.l	$32(a0),a1
0001CEAA 5389                       		subq.l	#1,a1
0001CEAC 2549 0004                  		move.l	a1,4(a2)
0001CEB0 1011                       		move.b	(a1),d0
0001CEB2 5200                       		addq.b	#1,d0		; change glass type when touched
0001CEB4 0C00 0030                  		cmpi.b	#$30,d0
0001CEB8 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001CEBA 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001CEBC                            
0001CEBC                            Obj09_GlassUpdate:
0001CEBC 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001CEC0                            
0001CEC0                            Obj09_GlassSnd:
0001CEC0 303C 00BA                  		move.w	#$BA,d0
0001CEC4 4EF9 0000 15EC             		jmp	(PlaySound_Special).l ;	play glass block sound
0001CECA                            ; ===========================================================================
0001CECA                            
0001CECA                            Obj09_NoGlass:
0001CECA 4E75                       		rts	
0001CECC                            ; End of function Obj09_ChkItems2
0001CECC                            
0001CECC                            ; ===========================================================================
0001CECC                            ; ---------------------------------------------------------------------------
0001CECC                            ; Object 10 - blank
0001CECC                            ; ---------------------------------------------------------------------------
0001CECC                            
0001CECC                            Obj10:					; XREF: Obj_Index
0001CECC 4E75                       		rts	
0001CECE                            ; ---------------------------------------------------------------------------
0001CECE                            ; Subroutine to	animate	level graphics
0001CECE                            ; ---------------------------------------------------------------------------
0001CECE                            
0001CECE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CECE                            
0001CECE                            
0001CECE                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001CECE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CED2 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001CED4 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CEDA 6100 0000                  		bsr.w	AniArt_GiantRing
0001CEDE 7000                       		moveq	#0,d0
0001CEE0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CEE4 D040                       		add.w	d0,d0
0001CEE6 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001CEEA 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001CEEE                            ; ===========================================================================
0001CEEE                            
0001CEEE                            AniArt_Pause:
0001CEEE 4E75                       		rts	
0001CEF0                            ; End of function AniArt_Load
0001CEF0                            
0001CEF0                            ; ===========================================================================
0001CEF0 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001CEF4 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001CEF8 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001CEFC 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_GHZ-AniArt_Index
0001CF00                            ; ===========================================================================
0001CF00                            ; ---------------------------------------------------------------------------
0001CF00                            ; Animated pattern routine - Green Hill
0001CF00                            ; ---------------------------------------------------------------------------
0001CF00                            
0001CF00                            AniArt_GHZ:				; XREF: AniArt_Index
0001CF00 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CF04 6A00                       		bpl.s	loc_1C08A
0001CF06 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001CF0C 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001CF12 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CF16 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CF1A 0240 0001                  		andi.w	#1,d0
0001CF1E 6700                       		beq.s	loc_1C078
0001CF20 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001CF24                            
0001CF24                            loc_1C078:
0001CF24 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001CF2E 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001CF32 6000 0000                  		bra.w	LoadTiles
0001CF36                            ; ===========================================================================
0001CF36                            
0001CF36                            loc_1C08A:
0001CF36 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CF3A 6A00                       		bpl.s	loc_1C0C0
0001CF3C 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001CF42 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CF48 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CF4C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CF50 0240 0001                  		andi.w	#1,d0
0001CF54 6700                       		beq.s	loc_1C0AE
0001CF56 43E9 0200                  		lea	$200(a1),a1
0001CF5A                            
0001CF5A                            loc_1C0AE:
0001CF5A 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CF64 323C 000F                  		move.w	#$F,d1
0001CF68 6000 0000                  		bra.w	LoadTiles
0001CF6C                            ; ===========================================================================
0001CF6C                            
0001CF6C                            loc_1C0C0:
0001CF6C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CF70 6A00                       		bpl.s	locret_1C10C
0001CF72 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CF78 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CF7C 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CF80 0240 0003                  		andi.w	#3,d0
0001CF84 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001CF88 0800 0000                  		btst	#0,d0
0001CF8C 6600                       		bne.s	loc_1C0E8
0001CF8E 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CF94                            
0001CF94                            loc_1C0E8:
0001CF94 EF48                       		lsl.w	#7,d0
0001CF96 3200                       		move.w	d0,d1
0001CF98 D040                       		add.w	d0,d0
0001CF9A D041                       		add.w	d1,d0
0001CF9C 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CFA6 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CFAC 43F1 0000                  		lea	(a1,d0.w),a1
0001CFB0 323C 000B                  		move.w	#$B,d1
0001CFB4 6100 0000                  		bsr.w	LoadTiles
0001CFB8                            
0001CFB8                            locret_1C10C:
0001CFB8 4E75                       		rts	
0001CFBA                            ; ===========================================================================
0001CFBA 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CFBE                            ; ===========================================================================
0001CFBE                            ; ---------------------------------------------------------------------------
0001CFBE                            ; Animated pattern routine - Marble
0001CFBE                            ; ---------------------------------------------------------------------------
0001CFBE                            
0001CFBE                            AniArt_MZ:				; XREF: AniArt_Index
0001CFBE 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CFC2 6A00                       		bpl.s	loc_1C150
0001CFC4 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CFCA 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CFD0 7000                       		moveq	#0,d0
0001CFD2 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CFD6 5200                       		addq.b	#1,d0
0001CFD8 0C00 0003                  		cmpi.b	#3,d0
0001CFDC 6600                       		bne.s	loc_1C134
0001CFDE 7000                       		moveq	#0,d0
0001CFE0                            
0001CFE0                            loc_1C134:
0001CFE0 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CFE4 C0FC 0100                  		mulu.w	#$100,d0
0001CFE8 D2C0                       		adda.w	d0,a1
0001CFEA 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CFF4 323C 0007                  		move.w	#7,d1
0001CFF8 6100 0000                  		bsr.w	LoadTiles
0001CFFC                            
0001CFFC                            loc_1C150:
0001CFFC 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D000 6A00                       		bpl.s	loc_1C1AE
0001D002 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001D008 7000                       		moveq	#0,d0
0001D00A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D00E 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001D014 EE58                       		ror.w	#7,d0
0001D016 D8C0                       		adda.w	d0,a4
0001D018 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001D022 7600                       		moveq	#0,d3
0001D024 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001D028 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D02C 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001D030 343C 0003                  		move.w	#3,d2
0001D034                            
0001D034                            loc_1C188:
0001D034 3003                       		move.w	d3,d0
0001D036 D040                       		add.w	d0,d0
0001D038 0240 001E                  		andi.w	#$1E,d0
0001D03C 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001D042 3033 0000                  		move.w	(a3,d0.w),d0
0001D046 47F3 0000                  		lea	(a3,d0.w),a3
0001D04A 224C                       		movea.l	a4,a1
0001D04C 323C 001F                  		move.w	#$1F,d1
0001D050 4E93                       		jsr	(a3)
0001D052 5843                       		addq.w	#4,d3
0001D054 51CA FFDE                  		dbf	d2,loc_1C188
0001D058 4E75                       		rts	
0001D05A                            ; ===========================================================================
0001D05A                            
0001D05A                            loc_1C1AE:
0001D05A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D05E 6A00 0000                  		bpl.w	locret_1C1EA
0001D062 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D068 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001D06E 7000                       		moveq	#0,d0
0001D070 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001D074 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001D078 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001D07E C0FC 00C0                  		mulu.w	#$C0,d0
0001D082 D2C0                       		adda.w	d0,a1
0001D084 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001D08E 323C 0005                  		move.w	#5,d1
0001D092 6000 0000                  		bra.w	LoadTiles
0001D096                            ; ===========================================================================
0001D096                            
0001D096                            locret_1C1EA:
0001D096 4E75                       		rts	
0001D098                            ; ===========================================================================
0001D098                            ; ---------------------------------------------------------------------------
0001D098                            ; Animated pattern routine - Scrap Brain
0001D098                            ; ---------------------------------------------------------------------------
0001D098                            
0001D098                            AniArt_SBZ:				; XREF: AniArt_Index
0001D098 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001D09C 6700                       		beq.s	loc_1C1F8
0001D09E 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001D0A2 6000                       		bra.s	loc_1C250
0001D0A4                            ; ===========================================================================
0001D0A4                            
0001D0A4                            loc_1C1F8:
0001D0A4 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D0A8 6A00                       		bpl.s	loc_1C250
0001D0AA 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001D0B0 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001D0B6 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001D0C0 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D0C4 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001D0C8 0240 0007                  		andi.w	#7,d0
0001D0CC 6700                       		beq.s	loc_1C234
0001D0CE 5340                       		subq.w	#1,d0
0001D0D0 C0FC 0180                  		mulu.w	#$180,d0
0001D0D4 43F1 0000                  		lea	(a1,d0.w),a1
0001D0D8 323C 000B                  		move.w	#$B,d1
0001D0DC 6000 0000                  		bra.w	LoadTiles
0001D0E0                            ; ===========================================================================
0001D0E0                            
0001D0E0                            loc_1C234:
0001D0E0 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001D0E6                            
0001D0E6                            loc_1C23A:
0001D0E6 323C 0005                  		move.w	#5,d1
0001D0EA 6100 0000                  		bsr.w	LoadTiles
0001D0EE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001D0F4 323C 0005                  		move.w	#5,d1
0001D0F8 6000 0000                  		bra.w	LoadTiles
0001D0FC                            ; ===========================================================================
0001D0FC                            
0001D0FC                            loc_1C250:
0001D0FC 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001D100 6700                       		beq.s	loc_1C25C
0001D102 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D106 6000                       		bra.s	locret_1C2A0
0001D108                            ; ===========================================================================
0001D108                            
0001D108                            loc_1C25C:
0001D108 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D10C 6A00                       		bpl.s	locret_1C2A0
0001D10E 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001D114 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001D11A 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001D124 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D128 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D12C 0240 0007                  		andi.w	#7,d0
0001D130 6700                       		beq.s	loc_1C298
0001D132 5340                       		subq.w	#1,d0
0001D134 C0FC 0180                  		mulu.w	#$180,d0
0001D138 43F1 0000                  		lea	(a1,d0.w),a1
0001D13C 323C 000B                  		move.w	#$B,d1
0001D140 6000 0000                  		bra.w	LoadTiles
0001D144                            ; ===========================================================================
0001D144                            
0001D144                            loc_1C298:
0001D144 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001D14A 609A                       		bra.s	loc_1C23A
0001D14C                            ; ===========================================================================
0001D14C                            
0001D14C                            locret_1C2A0:
0001D14C 4E75                       		rts	
0001D14E                            ; ===========================================================================
0001D14E                            ; ---------------------------------------------------------------------------
0001D14E                            ; Animated pattern routine - ending sequence
0001D14E                            ; ---------------------------------------------------------------------------
0001D14E                            
0001D14E                            AniArt_Ending:				; XREF: AniArt_Index
0001D14E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D152 6A00                       		bpl.s	loc_1C2F4
0001D154 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001D15A 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001D160 45F8 9400                  		lea	($FFFF9400).w,a2
0001D164 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D168 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D16C 0240 0001                  		andi.w	#1,d0
0001D170 6700                       		beq.s	loc_1C2CE
0001D172 43E9 0200                  		lea	$200(a1),a1
0001D176 45EA 0200                  		lea	$200(a2),a2
0001D17A                            
0001D17A                            loc_1C2CE:
0001D17A 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001D184 323C 000F                  		move.w	#$F,d1
0001D188 6100 0000                  		bsr.w	LoadTiles
0001D18C 224A                       		movea.l	a2,a1
0001D18E 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001D198 323C 000F                  		move.w	#$F,d1
0001D19C 6000 0000                  		bra.w	LoadTiles
0001D1A0                            ; ===========================================================================
0001D1A0                            
0001D1A0                            loc_1C2F4:
0001D1A0 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D1A4 6A00                       		bpl.s	loc_1C33C
0001D1A6 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D1AC 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001D1B0 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001D1B4 0240 0007                  		andi.w	#7,d0
0001D1B8 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001D1BC EF48                       		lsl.w	#7,d0
0001D1BE 3200                       		move.w	d0,d1
0001D1C0 D040                       		add.w	d0,d0
0001D1C2 D041                       		add.w	d1,d0
0001D1C4 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001D1CE 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001D1D4 43F1 0000                  		lea	(a1,d0.w),a1
0001D1D8 323C 000B                  		move.w	#$B,d1
0001D1DC 6000 0000                  		bra.w	LoadTiles
0001D1E0                            ; ===========================================================================
0001D1E0 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001D1E8                            ; ===========================================================================
0001D1E8                            
0001D1E8                            loc_1C33C:
0001D1E8 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001D1EC 6A00                       		bpl.s	loc_1C37A
0001D1EE 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001D1F4 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001D1F8 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001D1FC 0240 0003                  		andi.w	#3,d0
0001D200 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001D204 E148                       		lsl.w	#8,d0
0001D206 D040                       		add.w	d0,d0
0001D208 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001D212 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001D216 43F1 0000                  		lea	(a1,d0.w),a1
0001D21A 323C 000F                  		move.w	#$F,d1
0001D21E 6000 0000                  		bra.w	LoadTiles
0001D222                            ; ===========================================================================
0001D222 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001D226                            ; ===========================================================================
0001D226                            
0001D226                            loc_1C37A:
0001D226 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001D22A 6A00                       		bpl.s	locret_1C3B4
0001D22C 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001D232 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001D236 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001D23A 0240 0003                  		andi.w	#3,d0
0001D23E 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001D242 E148                       		lsl.w	#8,d0
0001D244 D040                       		add.w	d0,d0
0001D246 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001D250 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001D254 43F1 0000                  		lea	(a1,d0.w),a1
0001D258 323C 000F                  		move.w	#$F,d1
0001D25C 6000 0000                  		bra.w	LoadTiles
0001D260                            ; ===========================================================================
0001D260                            
0001D260                            locret_1C3B4:
0001D260 4E75                       		rts	
0001D262                            ; ===========================================================================
0001D262                            
0001D262                            AniArt_none:				; XREF: AniArt_Index
0001D262 4E75                       		rts	
0001D264                            
0001D264                            ; ---------------------------------------------------------------------------
0001D264                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001D264                            ; ---------------------------------------------------------------------------
0001D264                            
0001D264                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D264                            
0001D264                            
0001D264                            LoadTiles:
0001D264 2C99                       		move.l	(a1)+,(a6)
0001D266 2C99                       		move.l	(a1)+,(a6)
0001D268 2C99                       		move.l	(a1)+,(a6)
0001D26A 2C99                       		move.l	(a1)+,(a6)
0001D26C 2C99                       		move.l	(a1)+,(a6)
0001D26E 2C99                       		move.l	(a1)+,(a6)
0001D270 2C99                       		move.l	(a1)+,(a6)
0001D272 2C99                       		move.l	(a1)+,(a6)
0001D274 51C9 FFEE                  		dbf	d1,LoadTiles
0001D278 4E75                       		rts	
0001D27A                            ; End of function LoadTiles
0001D27A                            
0001D27A                            ; ===========================================================================
0001D27A                            ; ---------------------------------------------------------------------------
0001D27A                            ; Animated pattern routine - more Marble Zone
0001D27A                            ; ---------------------------------------------------------------------------
0001D27A 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001D27E 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001D282 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001D286 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001D28A 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001D28E 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001D292 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001D296 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001D29A                            ; ===========================================================================
0001D29A                            
0001D29A                            loc_1C3EE:				; XREF: AniArt_MZextra
0001D29A 2C91                       		move.l	(a1),(a6)
0001D29C 43E9 0010                  		lea	$10(a1),a1
0001D2A0 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001D2A4 4E75                       		rts	
0001D2A6                            ; ===========================================================================
0001D2A6                            
0001D2A6                            loc_1C3FA:				; XREF: AniArt_MZextra
0001D2A6 2029 0002                  		move.l	2(a1),d0
0001D2AA 1029 0001                  		move.b	1(a1),d0
0001D2AE E098                       		ror.l	#8,d0
0001D2B0 2C80                       		move.l	d0,(a6)
0001D2B2 43E9 0010                  		lea	$10(a1),a1
0001D2B6 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001D2BA 4E75                       		rts	
0001D2BC                            ; ===========================================================================
0001D2BC                            
0001D2BC                            loc_1C410:				; XREF: AniArt_MZextra
0001D2BC 2CA9 0002                  		move.l	2(a1),(a6)
0001D2C0 43E9 0010                  		lea	$10(a1),a1
0001D2C4 51C9 FFF6                  		dbf	d1,loc_1C410
0001D2C8 4E75                       		rts	
0001D2CA                            ; ===========================================================================
0001D2CA                            
0001D2CA                            loc_1C41E:				; XREF: AniArt_MZextra
0001D2CA 2029 0004                  		move.l	4(a1),d0
0001D2CE 1029 0003                  		move.b	3(a1),d0
0001D2D2 E098                       		ror.l	#8,d0
0001D2D4 2C80                       		move.l	d0,(a6)
0001D2D6 43E9 0010                  		lea	$10(a1),a1
0001D2DA 51C9 FFEE                  		dbf	d1,loc_1C41E
0001D2DE 4E75                       		rts	
0001D2E0                            ; ===========================================================================
0001D2E0                            
0001D2E0                            loc_1C434:				; XREF: AniArt_MZextra
0001D2E0 2CA9 0004                  		move.l	4(a1),(a6)
0001D2E4 43E9 0010                  		lea	$10(a1),a1
0001D2E8 51C9 FFF6                  		dbf	d1,loc_1C434
0001D2EC 4E75                       		rts	
0001D2EE                            ; ===========================================================================
0001D2EE                            
0001D2EE                            loc_1C442:				; XREF: AniArt_MZextra
0001D2EE 2029 0006                  		move.l	6(a1),d0
0001D2F2 1029 0005                  		move.b	5(a1),d0
0001D2F6 E098                       		ror.l	#8,d0
0001D2F8 2C80                       		move.l	d0,(a6)
0001D2FA 43E9 0010                  		lea	$10(a1),a1
0001D2FE 51C9 FFEE                  		dbf	d1,loc_1C442
0001D302 4E75                       		rts	
0001D304                            ; ===========================================================================
0001D304                            
0001D304                            loc_1C458:				; XREF: AniArt_MZextra
0001D304 2CA9 0006                  		move.l	6(a1),(a6)
0001D308 43E9 0010                  		lea	$10(a1),a1
0001D30C 51C9 FFF6                  		dbf	d1,loc_1C458
0001D310 4E75                       		rts	
0001D312                            ; ===========================================================================
0001D312                            
0001D312                            loc_1C466:				; XREF: AniArt_MZextra
0001D312 2029 0008                  		move.l	8(a1),d0
0001D316 1029 0007                  		move.b	7(a1),d0
0001D31A E098                       		ror.l	#8,d0
0001D31C 2C80                       		move.l	d0,(a6)
0001D31E 43E9 0010                  		lea	$10(a1),a1
0001D322 51C9 FFEE                  		dbf	d1,loc_1C466
0001D326 4E75                       		rts	
0001D328                            ; ===========================================================================
0001D328                            
0001D328                            loc_1C47C:				; XREF: AniArt_MZextra
0001D328 2CA9 0008                  		move.l	8(a1),(a6)
0001D32C 43E9 0010                  		lea	$10(a1),a1
0001D330 51C9 FFF6                  		dbf	d1,loc_1C47C
0001D334 4E75                       		rts	
0001D336                            ; ===========================================================================
0001D336                            
0001D336                            loc_1C48A:				; XREF: AniArt_MZextra
0001D336 2029 000A                  		move.l	$A(a1),d0
0001D33A 1029 0009                  		move.b	9(a1),d0
0001D33E E098                       		ror.l	#8,d0
0001D340 2C80                       		move.l	d0,(a6)
0001D342 43E9 0010                  		lea	$10(a1),a1
0001D346 51C9 FFEE                  		dbf	d1,loc_1C48A
0001D34A 4E75                       		rts	
0001D34C                            ; ===========================================================================
0001D34C                            
0001D34C                            loc_1C4A0:				; XREF: AniArt_MZextra
0001D34C 2CA9 000A                  		move.l	$A(a1),(a6)
0001D350 43E9 0010                  		lea	$10(a1),a1
0001D354 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001D358 4E75                       		rts	
0001D35A                            ; ===========================================================================
0001D35A                            
0001D35A                            loc_1C4AE:				; XREF: AniArt_MZextra
0001D35A 2029 000C                  		move.l	$C(a1),d0
0001D35E 1029 000B                  		move.b	$B(a1),d0
0001D362 E098                       		ror.l	#8,d0
0001D364 2C80                       		move.l	d0,(a6)
0001D366 43E9 0010                  		lea	$10(a1),a1
0001D36A 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001D36E 4E75                       		rts	
0001D370                            ; ===========================================================================
0001D370                            
0001D370                            loc_1C4C4:				; XREF: AniArt_MZextra
0001D370 2CA9 000C                  		move.l	$C(a1),(a6)
0001D374 43E9 0010                  		lea	$10(a1),a1
0001D378 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001D37C 4E75                       		rts	
0001D37E                            ; ===========================================================================
0001D37E                            
0001D37E                            loc_1C4D2:				; XREF: AniArt_MZextra
0001D37E 2029 000C                  		move.l	$C(a1),d0
0001D382 E198                       		rol.l	#8,d0
0001D384 1011                       		move.b	0(a1),d0
0001D386 2C80                       		move.l	d0,(a6)
0001D388 43E9 0010                  		lea	$10(a1),a1
0001D38C 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001D390 4E75                       		rts	
0001D392                            ; ===========================================================================
0001D392                            
0001D392                            loc_1C4E8:				; XREF: AniArt_MZextra
0001D392 3CA9 000E                  		move.w	$E(a1),(a6)
0001D396 3C91                       		move.w	0(a1),(a6)
0001D398 43E9 0010                  		lea	$10(a1),a1
0001D39C 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001D3A0 4E75                       		rts	
0001D3A2                            ; ===========================================================================
0001D3A2                            
0001D3A2                            loc_1C4FA:				; XREF: AniArt_MZextra
0001D3A2 2011                       		move.l	0(a1),d0
0001D3A4 1029 000F                  		move.b	$F(a1),d0
0001D3A8 E098                       		ror.l	#8,d0
0001D3AA 2C80                       		move.l	d0,(a6)
0001D3AC 43E9 0010                  		lea	$10(a1),a1
0001D3B0 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001D3B4 4E75                       		rts	
0001D3B6                            
0001D3B6                            ; ---------------------------------------------------------------------------
0001D3B6                            ; Animated pattern routine - giant ring
0001D3B6                            ; ---------------------------------------------------------------------------
0001D3B6                            
0001D3B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3B6                            
0001D3B6                            
0001D3B6                            AniArt_GiantRing:			; XREF: AniArt_Load
0001D3B6 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001D3BA 6600                       		bne.s	loc_1C518
0001D3BC 4E75                       		rts	
0001D3BE                            ; ===========================================================================
0001D3BE                            
0001D3BE                            loc_1C518:
0001D3BE 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001D3C4 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001D3CA 7000                       		moveq	#0,d0
0001D3CC 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001D3D0 43F1 0000                  		lea	(a1,d0.w),a1
0001D3D4 0640 8000                  		addi.w	#$8000,d0
0001D3D8 E588                       		lsl.l	#2,d0
0001D3DA E448                       		lsr.w	#2,d0
0001D3DC 0040 4000                  		ori.w	#$4000,d0
0001D3E0 4840                       		swap	d0
0001D3E2 2D40 0004                  		move.l	d0,4(a6)
0001D3E6 323C 000D                  		move.w	#$D,d1
0001D3EA 6000 FE78                  		bra.w	LoadTiles
0001D3EE                            ; End of function AniArt_GiantRing
0001D3EE                            
0001D3EE                            ; ===========================================================================
0001D3EE                            ; ---------------------------------------------------------------------------
0001D3EE                            ; Object 21 - SCORE, TIME, RINGS
0001D3EE                            ; ---------------------------------------------------------------------------
0001D3EE                            
0001D3EE                            Obj21:					; XREF: Obj_Index
0001D3EE 7000                       		moveq	#0,d0
0001D3F0 1028 0024                  		move.b	$24(a0),d0
0001D3F4 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001D3F8 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001D3FC                            ; ===========================================================================
0001D3FC 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001D3FE 0000                       		dc.w Obj21_Flash-Obj21_Index
0001D400                            ; ===========================================================================
0001D400                            
0001D400                            Obj21_Main:				; XREF: Obj21_Main
0001D400 5428 0024                  		addq.b	#2,$24(a0)
0001D404 317C 0090 0008             		move.w	#$90,8(a0)
0001D40A 317C 0108 000A             		move.w	#$108,$A(a0)
0001D410 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001D418 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001D41E 117C 0000 0001             		move.b	#0,1(a0)
0001D424 117C 0000 0018             		move.b	#0,$18(a0)
0001D42A                            
0001D42A                            Obj21_Flash:				; XREF: Obj21_Main
0001D42A 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001D42E 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001D430 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001D434 4EF9 0000 E2A8             		jmp	DisplaySprite
0001D43A                            ; ===========================================================================
0001D43A                            
0001D43A                            Obj21_Flash2:
0001D43A 7000                       		moveq	#0,d0
0001D43C 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001D442 6600                       		bne.s	Obj21_Display
0001D444 5240                       		addq.w	#1,d0		; make ring counter flash red
0001D446 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001D44C 6600                       		bne.s	Obj21_Display	; if not, branch
0001D44E 5440                       		addq.w	#2,d0		; make time counter flash red
0001D450                            
0001D450                            Obj21_Display:
0001D450 1140 001A                  		move.b	d0,$1A(a0)
0001D454 4EF9 0000 E2A8             		jmp	DisplaySprite
0001D45A                            ; ===========================================================================
0001D45A                            ; ---------------------------------------------------------------------------
0001D45A                            ; Sprite mappings - SCORE, TIME, RINGS
0001D45A                            ; ---------------------------------------------------------------------------
0001D45A                            Map_obj21:
0001D45A                            	include "_maps\obj21.asm"
0001D45A                            Map_549d:
0001D45A 0000                       Map_549d_0: 	dc.w Map_549d_8-Map_549d
0001D45C 0000                       Map_549d_2: 	dc.w Map_549d_36-Map_549d
0001D45E 0000                       Map_549d_4: 	dc.w Map_549d_64-Map_549d
0001D460 0000                       Map_549d_6: 	dc.w Map_549d_92-Map_549d
0001D462 09                         Map_549d_8: 	dc.b $9
0001D463 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D468 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D46D 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D472 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D477 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D47C A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D481 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D486 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D48B 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D490 09                         Map_549d_36: 	dc.b $9
0001D491 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D496 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D49B 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D4A0 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D4A5 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D4AA A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D4AF 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D4B4 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D4B9 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D4BE 09                         Map_549d_64: 	dc.b $9
0001D4BF 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D4C4 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D4C9 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D4CE 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D4D3 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D4D8 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D4DD 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D4E2 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D4E7 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D4EC 09                         Map_549d_92: 	dc.b $9
0001D4ED 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D4F2 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D4F7 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D4FC 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D501 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D506 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D50B 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D510 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D515 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D51A                            	even
0001D51A                            	even
0001D51A                            
0001D51A                            ; ---------------------------------------------------------------------------
0001D51A                            ; Add points subroutine
0001D51A                            ; ---------------------------------------------------------------------------
0001D51A                            
0001D51A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D51A                            
0001D51A                            
0001D51A                            AddPoints:
0001D51A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001D520 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001D524 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001D528 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001D52A 223C 000F 423F             		move.l	#999999,d1
0001D530 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001D532 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001D536 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001D538 2481                       		move.l	d1,(a2)
0001D53A                            
0001D53A                            loc_1C6AC:
0001D53A 2013                       		move.l	(a3),d0
0001D53C B092                       		cmp.l	(a2),d0
0001D53E 6500 0000                  		bcs.w	locret_1C6B6
0001D542 2480                       		move.l	d0,(a2)
0001D544                            
0001D544                            locret_1C6B6:
0001D544 4E75                       		rts	
0001D546                            ; End of function AddPoints
0001D546                            
0001D546                            ; ---------------------------------------------------------------------------
0001D546                            ; Subroutine to	update the HUD
0001D546                            ; ---------------------------------------------------------------------------
0001D546                            
0001D546                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D546                            
0001D546                            
0001D546                            HudUpdate:
0001D546 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001D54A 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001D54E 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001D552 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001D554 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001D558 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001D55E 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001D562 6100 0000                  		bsr.w	Hud_Score
0001D566                            
0001D566                            Hud_ChkRings:
0001D566 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D56A 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D56C 6A00                       		bpl.s	loc_1C6E4
0001D56E 6100 0000                  		bsr.w	Hud_LoadZero
0001D572                            
0001D572                            loc_1C6E4:
0001D572 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D576 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D57C 7200                       		moveq	#0,d1
0001D57E 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D582 6100 0000                  		bsr.w	Hud_Rings
0001D586                            
0001D586                            Hud_ChkTime:
0001D586 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D58A 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D58C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D590 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D592 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D596 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D59C 6700                       		beq.s	TimeOver	; if yes, branch
0001D59E 5221                       		addq.b	#1,-(a1)
0001D5A0 0C11 003C                  		cmpi.b	#60,(a1)
0001D5A4 6500                       		bcs.s	Hud_ChkLives
0001D5A6 12BC 0000                  		move.b	#0,(a1)
0001D5AA 5221                       		addq.b	#1,-(a1)
0001D5AC 0C11 003C                  		cmpi.b	#60,(a1)
0001D5B0 6500                       		bcs.s	loc_1C734
0001D5B2 12BC 0000                  		move.b	#0,(a1)
0001D5B6 5221                       		addq.b	#1,-(a1)
0001D5B8 0C11 0009                  		cmpi.b	#9,(a1)
0001D5BC 6500                       		bcs.s	loc_1C734
0001D5BE 12BC 0009                  		move.b	#9,(a1)
0001D5C2                            
0001D5C2                            loc_1C734:
0001D5C2 203C 5E40 0003             		move.l	#$5E400003,d0
0001D5C8 7200                       		moveq	#0,d1
0001D5CA 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D5CE 6100 0000                  		bsr.w	Hud_Mins
0001D5D2 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D5D8 7200                       		moveq	#0,d1
0001D5DA 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D5DE 6100 0000                  		bsr.w	Hud_Secs
0001D5E2                            
0001D5E2                            Hud_ChkLives:
0001D5E2 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D5E6 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D5E8 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D5EC 6100 0000                  		bsr.w	Hud_Lives
0001D5F0                            
0001D5F0                            Hud_ChkBonus:
0001D5F0 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D5F4 6700                       		beq.s	Hud_End		; if not, branch
0001D5F6 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D5FA 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D604 7200                       		moveq	#0,d1
0001D606 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D60A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D60E 7200                       		moveq	#0,d1
0001D610 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D614 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D618                            
0001D618                            Hud_End:
0001D618 4E75                       		rts	
0001D61A                            ; ===========================================================================
0001D61A                            
0001D61A                            TimeOver:				; XREF: Hud_ChkTime
0001D61A 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D61E 41F8 D000                  		lea	($FFFFD000).w,a0
0001D622 2448                       		movea.l	a0,a2
0001D624 6100 E968                  		bsr.w	KillSonic
0001D628 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D62E 4E75                       		rts	
0001D630                            ; ===========================================================================
0001D630                            
0001D630                            HudDebug:				; XREF: HudUpdate
0001D630 6100 0000                  		bsr.w	HudDb_XY
0001D634 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D638 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D63A 6A00                       		bpl.s	HudDb_Rings
0001D63C 6100 0000                  		bsr.w	Hud_LoadZero
0001D640                            
0001D640                            HudDb_Rings:
0001D640 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D644 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D64A 7200                       		moveq	#0,d1
0001D64C 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D650 6100 0000                  		bsr.w	Hud_Rings
0001D654                            
0001D654                            HudDb_ObjCount:
0001D654 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D65A 7200                       		moveq	#0,d1
0001D65C 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D660 6100 0000                  		bsr.w	Hud_Secs
0001D664 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D668 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D66A 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D66E 6100 0000                  		bsr.w	Hud_Lives
0001D672                            
0001D672                            HudDb_ChkBonus:
0001D672 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D676 6700                       		beq.s	HudDb_End	; if not, branch
0001D678 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D67C 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D686 7200                       		moveq	#0,d1
0001D688 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D68C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D690 7200                       		moveq	#0,d1
0001D692 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D696 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D69A                            
0001D69A                            HudDb_End:
0001D69A 4E75                       		rts	
0001D69C                            ; End of function HudUpdate
0001D69C                            
0001D69C                            ; ---------------------------------------------------------------------------
0001D69C                            ; Subroutine to	load "0" on the	HUD
0001D69C                            ; ---------------------------------------------------------------------------
0001D69C                            
0001D69C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D69C                            
0001D69C                            
0001D69C                            Hud_LoadZero:				; XREF: HudUpdate
0001D69C 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D6A6 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D6AA 343C 0002                  		move.w	#2,d2
0001D6AE 6000                       		bra.s	loc_1C83E
0001D6B0                            ; End of function Hud_LoadZero
0001D6B0                            
0001D6B0                            ; ---------------------------------------------------------------------------
0001D6B0                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D6B0                            ; ---------------------------------------------------------------------------
0001D6B0                            
0001D6B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6B0                            
0001D6B0                            
0001D6B0                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D6B0 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D6B6 6100 0000                  		bsr.w	Hud_Lives
0001D6BA 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D6C4 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D6C8 343C 000E                  		move.w	#$E,d2
0001D6CC                            
0001D6CC                            loc_1C83E:				; XREF: Hud_LoadZero
0001D6CC 43FA 0000                  		lea	Art_Hud(pc),a1
0001D6D0                            
0001D6D0                            loc_1C842:
0001D6D0 323C 000F                  		move.w	#$F,d1
0001D6D4 101A                       		move.b	(a2)+,d0
0001D6D6 6B00                       		bmi.s	loc_1C85E
0001D6D8 4880                       		ext.w	d0
0001D6DA EB48                       		lsl.w	#5,d0
0001D6DC 47F1 0000                  		lea	(a1,d0.w),a3
0001D6E0                            
0001D6E0                            loc_1C852:
0001D6E0 2C9B                       		move.l	(a3)+,(a6)
0001D6E2 51C9 FFFC                  		dbf	d1,loc_1C852
0001D6E6                            
0001D6E6                            loc_1C858:
0001D6E6 51CA FFE8                  		dbf	d2,loc_1C842
0001D6EA                            
0001D6EA 4E75                       		rts	
0001D6EC                            ; ===========================================================================
0001D6EC                            
0001D6EC                            loc_1C85E:
0001D6EC 2CBC 0000 0000             		move.l	#0,(a6)
0001D6F2 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D6F6                            
0001D6F6 60EE                       		bra.s	loc_1C858
0001D6F8                            ; End of function Hud_Base
0001D6F8                            
0001D6F8                            ; ===========================================================================
0001D6F8 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D704 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D708                            ; ---------------------------------------------------------------------------
0001D708                            ; Subroutine to	load debug mode	numbers	patterns
0001D708                            ; ---------------------------------------------------------------------------
0001D708                            
0001D708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D708                            
0001D708                            
0001D708                            HudDb_XY:				; XREF: HudDebug
0001D708 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D712 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D716 4841                       		swap	d1
0001D718 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D71C 6100                       		bsr.s	HudDb_XY2
0001D71E 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D722 4841                       		swap	d1
0001D724 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D728                            ; End of function HudDb_XY
0001D728                            
0001D728                            
0001D728                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D728                            
0001D728                            
0001D728                            HudDb_XY2:
0001D728 7C07                       		moveq	#7,d6
0001D72A 43F9 0000 060E             		lea	(Art_Text).l,a1
0001D730                            
0001D730                            HudDb_XYLoop:
0001D730 E959                       		rol.w	#4,d1
0001D732 3401                       		move.w	d1,d2
0001D734 0242 000F                  		andi.w	#$F,d2
0001D738 0C42 000A                  		cmpi.w	#$A,d2
0001D73C 6500                       		bcs.s	loc_1C8B2
0001D73E 5E42                       		addq.w	#7,d2
0001D740                            
0001D740                            loc_1C8B2:
0001D740 EB4A                       		lsl.w	#5,d2
0001D742 47F1 2000                  		lea	(a1,d2.w),a3
0001D746 2C9B                       		move.l	(a3)+,(a6)
0001D748 2C9B                       		move.l	(a3)+,(a6)
0001D74A 2C9B                       		move.l	(a3)+,(a6)
0001D74C 2C9B                       		move.l	(a3)+,(a6)
0001D74E 2C9B                       		move.l	(a3)+,(a6)
0001D750 2C9B                       		move.l	(a3)+,(a6)
0001D752 2C9B                       		move.l	(a3)+,(a6)
0001D754 2C9B                       		move.l	(a3)+,(a6)
0001D756 4841                       		swap	d1
0001D758 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D75C                            
0001D75C 4E75                       		rts	
0001D75E                            ; End of function HudDb_XY2
0001D75E                            
0001D75E                            ; ---------------------------------------------------------------------------
0001D75E                            ; Subroutine to	load rings numbers patterns
0001D75E                            ; ---------------------------------------------------------------------------
0001D75E                            
0001D75E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D75E                            
0001D75E                            
0001D75E                            Hud_Rings:				; XREF: HudUpdate
0001D75E 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D764 7C02                       		moveq	#2,d6
0001D766 6000                       		bra.s	Hud_LoadArt
0001D768                            ; End of function Hud_Rings
0001D768                            
0001D768                            ; ---------------------------------------------------------------------------
0001D768                            ; Subroutine to	load score numbers patterns
0001D768                            ; ---------------------------------------------------------------------------
0001D768                            
0001D768                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D768                            
0001D768                            
0001D768                            Hud_Score:				; XREF: HudUpdate
0001D768 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D76E 7C05                       		moveq	#5,d6
0001D770                            
0001D770                            Hud_LoadArt:
0001D770 7800                       		moveq	#0,d4
0001D772 43FA 0000                  		lea	Art_Hud(pc),a1
0001D776                            
0001D776                            Hud_ScoreLoop:
0001D776 7400                       		moveq	#0,d2
0001D778 261A                       		move.l	(a2)+,d3
0001D77A                            
0001D77A                            loc_1C8EC:
0001D77A 9283                       		sub.l	d3,d1
0001D77C 6500                       		bcs.s	loc_1C8F4
0001D77E 5242                       		addq.w	#1,d2
0001D780 60F8                       		bra.s	loc_1C8EC
0001D782                            ; ===========================================================================
0001D782                            
0001D782                            loc_1C8F4:
0001D782 D283                       		add.l	d3,d1
0001D784 4A42                       		tst.w	d2
0001D786 6700                       		beq.s	loc_1C8FE
0001D788 383C 0001                  		move.w	#1,d4
0001D78C                            
0001D78C                            loc_1C8FE:
0001D78C 4A44                       		tst.w	d4
0001D78E 6700                       		beq.s	loc_1C92C
0001D790 ED4A                       		lsl.w	#6,d2
0001D792 2D40 0004                  		move.l	d0,4(a6)
0001D796 47F1 2000                  		lea	(a1,d2.w),a3
0001D79A 2C9B                       		move.l	(a3)+,(a6)
0001D79C 2C9B                       		move.l	(a3)+,(a6)
0001D79E 2C9B                       		move.l	(a3)+,(a6)
0001D7A0 2C9B                       		move.l	(a3)+,(a6)
0001D7A2 2C9B                       		move.l	(a3)+,(a6)
0001D7A4 2C9B                       		move.l	(a3)+,(a6)
0001D7A6 2C9B                       		move.l	(a3)+,(a6)
0001D7A8 2C9B                       		move.l	(a3)+,(a6)
0001D7AA 2C9B                       		move.l	(a3)+,(a6)
0001D7AC 2C9B                       		move.l	(a3)+,(a6)
0001D7AE 2C9B                       		move.l	(a3)+,(a6)
0001D7B0 2C9B                       		move.l	(a3)+,(a6)
0001D7B2 2C9B                       		move.l	(a3)+,(a6)
0001D7B4 2C9B                       		move.l	(a3)+,(a6)
0001D7B6 2C9B                       		move.l	(a3)+,(a6)
0001D7B8 2C9B                       		move.l	(a3)+,(a6)
0001D7BA                            
0001D7BA                            loc_1C92C:
0001D7BA 0680 0040 0000             		addi.l	#$400000,d0
0001D7C0 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D7C4                            
0001D7C4 4E75                       		rts	
0001D7C6                            ; End of function Hud_Score
0001D7C6                            
0001D7C6                            ; ---------------------------------------------------------------------------
0001D7C6                            ; Subroutine to	load countdown numbers on the continue screen
0001D7C6                            ; ---------------------------------------------------------------------------
0001D7C6                            
0001D7C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D7C6                            
0001D7C6                            
0001D7C6                            ContScrCounter:				; XREF: ContinueScreen
0001D7C6 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D7D0 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D7D6 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D7DC 7C01                       		moveq	#1,d6
0001D7DE 7800                       		moveq	#0,d4
0001D7E0 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D7E4                            
0001D7E4                            ContScr_Loop:
0001D7E4 7400                       		moveq	#0,d2
0001D7E6 261A                       		move.l	(a2)+,d3
0001D7E8                            
0001D7E8                            loc_1C95A:
0001D7E8 9283                       		sub.l	d3,d1
0001D7EA 6500                       		bcs.s	loc_1C962
0001D7EC 5242                       		addq.w	#1,d2
0001D7EE 60F8                       		bra.s	loc_1C95A
0001D7F0                            ; ===========================================================================
0001D7F0                            
0001D7F0                            loc_1C962:
0001D7F0 D283                       		add.l	d3,d1
0001D7F2 ED4A                       		lsl.w	#6,d2
0001D7F4 47F1 2000                  		lea	(a1,d2.w),a3
0001D7F8 2C9B                       		move.l	(a3)+,(a6)
0001D7FA 2C9B                       		move.l	(a3)+,(a6)
0001D7FC 2C9B                       		move.l	(a3)+,(a6)
0001D7FE 2C9B                       		move.l	(a3)+,(a6)
0001D800 2C9B                       		move.l	(a3)+,(a6)
0001D802 2C9B                       		move.l	(a3)+,(a6)
0001D804 2C9B                       		move.l	(a3)+,(a6)
0001D806 2C9B                       		move.l	(a3)+,(a6)
0001D808 2C9B                       		move.l	(a3)+,(a6)
0001D80A 2C9B                       		move.l	(a3)+,(a6)
0001D80C 2C9B                       		move.l	(a3)+,(a6)
0001D80E 2C9B                       		move.l	(a3)+,(a6)
0001D810 2C9B                       		move.l	(a3)+,(a6)
0001D812 2C9B                       		move.l	(a3)+,(a6)
0001D814 2C9B                       		move.l	(a3)+,(a6)
0001D816 2C9B                       		move.l	(a3)+,(a6)
0001D818 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D81C                            
0001D81C 4E75                       		rts	
0001D81E                            ; End of function ContScrCounter
0001D81E                            
0001D81E                            ; ===========================================================================
0001D81E                            ; ---------------------------------------------------------------------------
0001D81E                            ; HUD counter sizes
0001D81E                            ; ---------------------------------------------------------------------------
0001D81E 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D822 0000 2710                  Hud_10000:	dc.l 10000
0001D826 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D82A 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D82E 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D832 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D836                            
0001D836                            ; ---------------------------------------------------------------------------
0001D836                            ; Subroutine to	load time numbers patterns
0001D836                            ; ---------------------------------------------------------------------------
0001D836                            
0001D836                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D836                            
0001D836                            
0001D836                            Hud_Mins:				; XREF: Hud_ChkTime
0001D836 45F9 0001 D832             		lea	(Hud_1).l,a2
0001D83C 7C00                       		moveq	#0,d6
0001D83E 6000                       		bra.s	loc_1C9BA
0001D840                            ; End of function Hud_Mins
0001D840                            
0001D840                            
0001D840                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D840                            
0001D840                            
0001D840                            Hud_Secs:				; XREF: Hud_ChkTime
0001D840 45F9 0001 D82E             		lea	(Hud_10).l,a2
0001D846 7C01                       		moveq	#1,d6
0001D848                            
0001D848                            loc_1C9BA:
0001D848 7800                       		moveq	#0,d4
0001D84A 43FA 0000                  		lea	Art_Hud(pc),a1
0001D84E                            
0001D84E                            Hud_TimeLoop:
0001D84E 7400                       		moveq	#0,d2
0001D850 261A                       		move.l	(a2)+,d3
0001D852                            
0001D852                            loc_1C9C4:
0001D852 9283                       		sub.l	d3,d1
0001D854 6500                       		bcs.s	loc_1C9CC
0001D856 5242                       		addq.w	#1,d2
0001D858 60F8                       		bra.s	loc_1C9C4
0001D85A                            ; ===========================================================================
0001D85A                            
0001D85A                            loc_1C9CC:
0001D85A D283                       		add.l	d3,d1
0001D85C 4A42                       		tst.w	d2
0001D85E 6700                       		beq.s	loc_1C9D6
0001D860 383C 0001                  		move.w	#1,d4
0001D864                            
0001D864                            loc_1C9D6:
0001D864 ED4A                       		lsl.w	#6,d2
0001D866 2D40 0004                  		move.l	d0,4(a6)
0001D86A 47F1 2000                  		lea	(a1,d2.w),a3
0001D86E 2C9B                       		move.l	(a3)+,(a6)
0001D870 2C9B                       		move.l	(a3)+,(a6)
0001D872 2C9B                       		move.l	(a3)+,(a6)
0001D874 2C9B                       		move.l	(a3)+,(a6)
0001D876 2C9B                       		move.l	(a3)+,(a6)
0001D878 2C9B                       		move.l	(a3)+,(a6)
0001D87A 2C9B                       		move.l	(a3)+,(a6)
0001D87C 2C9B                       		move.l	(a3)+,(a6)
0001D87E 2C9B                       		move.l	(a3)+,(a6)
0001D880 2C9B                       		move.l	(a3)+,(a6)
0001D882 2C9B                       		move.l	(a3)+,(a6)
0001D884 2C9B                       		move.l	(a3)+,(a6)
0001D886 2C9B                       		move.l	(a3)+,(a6)
0001D888 2C9B                       		move.l	(a3)+,(a6)
0001D88A 2C9B                       		move.l	(a3)+,(a6)
0001D88C 2C9B                       		move.l	(a3)+,(a6)
0001D88E 0680 0040 0000             		addi.l	#$400000,d0
0001D894 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D898                            
0001D898 4E75                       		rts	
0001D89A                            ; End of function Hud_Secs
0001D89A                            
0001D89A                            ; ---------------------------------------------------------------------------
0001D89A                            ; Subroutine to	load time/ring bonus numbers patterns
0001D89A                            ; ---------------------------------------------------------------------------
0001D89A                            
0001D89A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D89A                            
0001D89A                            
0001D89A                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D89A 45F9 0001 D826             		lea	(Hud_1000).l,a2
0001D8A0 7C03                       		moveq	#3,d6
0001D8A2 7800                       		moveq	#0,d4
0001D8A4 43FA 0000                  		lea	Art_Hud(pc),a1
0001D8A8                            
0001D8A8                            Hud_BonusLoop:
0001D8A8 7400                       		moveq	#0,d2
0001D8AA 261A                       		move.l	(a2)+,d3
0001D8AC                            
0001D8AC                            loc_1CA1E:
0001D8AC 9283                       		sub.l	d3,d1
0001D8AE 6500                       		bcs.s	loc_1CA26
0001D8B0 5242                       		addq.w	#1,d2
0001D8B2 60F8                       		bra.s	loc_1CA1E
0001D8B4                            ; ===========================================================================
0001D8B4                            
0001D8B4                            loc_1CA26:
0001D8B4 D283                       		add.l	d3,d1
0001D8B6 4A42                       		tst.w	d2
0001D8B8 6700                       		beq.s	loc_1CA30
0001D8BA 383C 0001                  		move.w	#1,d4
0001D8BE                            
0001D8BE                            loc_1CA30:
0001D8BE 4A44                       		tst.w	d4
0001D8C0 6700                       		beq.s	Hud_ClrBonus
0001D8C2 ED4A                       		lsl.w	#6,d2
0001D8C4 47F1 2000                  		lea	(a1,d2.w),a3
0001D8C8 2C9B                       		move.l	(a3)+,(a6)
0001D8CA 2C9B                       		move.l	(a3)+,(a6)
0001D8CC 2C9B                       		move.l	(a3)+,(a6)
0001D8CE 2C9B                       		move.l	(a3)+,(a6)
0001D8D0 2C9B                       		move.l	(a3)+,(a6)
0001D8D2 2C9B                       		move.l	(a3)+,(a6)
0001D8D4 2C9B                       		move.l	(a3)+,(a6)
0001D8D6 2C9B                       		move.l	(a3)+,(a6)
0001D8D8 2C9B                       		move.l	(a3)+,(a6)
0001D8DA 2C9B                       		move.l	(a3)+,(a6)
0001D8DC 2C9B                       		move.l	(a3)+,(a6)
0001D8DE 2C9B                       		move.l	(a3)+,(a6)
0001D8E0 2C9B                       		move.l	(a3)+,(a6)
0001D8E2 2C9B                       		move.l	(a3)+,(a6)
0001D8E4 2C9B                       		move.l	(a3)+,(a6)
0001D8E6 2C9B                       		move.l	(a3)+,(a6)
0001D8E8                            
0001D8E8                            loc_1CA5A:
0001D8E8 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D8EC                            
0001D8EC 4E75                       		rts	
0001D8EE                            ; ===========================================================================
0001D8EE                            
0001D8EE                            Hud_ClrBonus:
0001D8EE 7A0F                       		moveq	#$F,d5
0001D8F0                            
0001D8F0                            Hud_ClrBonusLoop:
0001D8F0 2CBC 0000 0000             		move.l	#0,(a6)
0001D8F6 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D8FA                            
0001D8FA 60EC                       		bra.s	loc_1CA5A
0001D8FC                            ; End of function Hud_TimeRingBonus
0001D8FC                            
0001D8FC                            ; ---------------------------------------------------------------------------
0001D8FC                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D8FC                            ; ---------------------------------------------------------------------------
0001D8FC                            
0001D8FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D8FC                            
0001D8FC                            
0001D8FC                            Hud_Lives:				; XREF: Hud_ChkLives
0001D8FC 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D902 7200                       		moveq	#0,d1
0001D904 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D908 45F9 0001 D82E             		lea	(Hud_10).l,a2
0001D90E 7C01                       		moveq	#1,d6
0001D910 7800                       		moveq	#0,d4
0001D912 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D916                            
0001D916                            Hud_LivesLoop:
0001D916 2D40 0004                  		move.l	d0,4(a6)
0001D91A 7400                       		moveq	#0,d2
0001D91C 261A                       		move.l	(a2)+,d3
0001D91E                            
0001D91E                            loc_1CA90:
0001D91E 9283                       		sub.l	d3,d1
0001D920 6500                       		bcs.s	loc_1CA98
0001D922 5242                       		addq.w	#1,d2
0001D924 60F8                       		bra.s	loc_1CA90
0001D926                            ; ===========================================================================
0001D926                            
0001D926                            loc_1CA98:
0001D926 D283                       		add.l	d3,d1
0001D928 4A42                       		tst.w	d2
0001D92A 6700                       		beq.s	loc_1CAA2
0001D92C 383C 0001                  		move.w	#1,d4
0001D930                            
0001D930                            loc_1CAA2:
0001D930 4A44                       		tst.w	d4
0001D932 6700                       		beq.s	Hud_ClrLives
0001D934                            
0001D934                            loc_1CAA6:
0001D934 EB4A                       		lsl.w	#5,d2
0001D936 47F1 2000                  		lea	(a1,d2.w),a3
0001D93A 2C9B                       		move.l	(a3)+,(a6)
0001D93C 2C9B                       		move.l	(a3)+,(a6)
0001D93E 2C9B                       		move.l	(a3)+,(a6)
0001D940 2C9B                       		move.l	(a3)+,(a6)
0001D942 2C9B                       		move.l	(a3)+,(a6)
0001D944 2C9B                       		move.l	(a3)+,(a6)
0001D946 2C9B                       		move.l	(a3)+,(a6)
0001D948 2C9B                       		move.l	(a3)+,(a6)
0001D94A                            
0001D94A                            loc_1CABC:
0001D94A 0680 0040 0000             		addi.l	#$400000,d0
0001D950 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D954                            
0001D954 4E75                       		rts	
0001D956                            ; ===========================================================================
0001D956                            
0001D956                            Hud_ClrLives:
0001D956 4A46                       		tst.w	d6
0001D958 67DA                       		beq.s	loc_1CAA6
0001D95A 7A07                       		moveq	#7,d5
0001D95C                            
0001D95C                            Hud_ClrLivesLoop:
0001D95C 2CBC 0000 0000             		move.l	#0,(a6)
0001D962 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D966 60E2                       		bra.s	loc_1CABC
0001D968                            ; End of function Hud_Lives
0001D968                            
0001D968                            ; ===========================================================================
0001D968                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001DC68                            		even
0001DC68                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001DDA8                            		even
0001DDA8                            ; ===========================================================================
0001DDA8                            ; ---------------------------------------------------------------------------
0001DDA8                            ; When debug mode is currently in use
0001DDA8                            ; ---------------------------------------------------------------------------
0001DDA8                            
0001DDA8                            DebugMode:				; XREF: Obj01; Obj09
0001DDA8 7000                       		moveq	#0,d0
0001DDAA 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001DDAE 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001DDB2 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001DDB6                            ; ===========================================================================
0001DDB6 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001DDB8 0000                       		dc.w Debug_Skip-Debug_Index
0001DDBA                            ; ===========================================================================
0001DDBA                            
0001DDBA                            Debug_Main:				; XREF: Debug_Index
0001DDBA 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001DDBE 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001DDC4 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001DDCA 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001DDD0 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001DDD6 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001DDDC 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001DDE2 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001DDE8 117C 0000 001A             		move.b	#0,$1A(a0)
0001DDEE 117C 0000 001C             		move.b	#0,$1C(a0)
0001DDF4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001DDFA 6600                       		bne.s	Debug_Zone	; if not, branch
0001DDFC 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001DE02 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001DE08 7006                       		moveq	#6,d0		; use 6th debug	item list
0001DE0A 6000                       		bra.s	Debug_UseList
0001DE0C                            ; ===========================================================================
0001DE0C                            
0001DE0C                            Debug_Zone:
0001DE0C 7000                       		moveq	#0,d0
0001DE0E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DE12                            
0001DE12                            Debug_UseList:
0001DE12 45F9 0000 0000             		lea	(DebugList).l,a2
0001DE18 D040                       		add.w	d0,d0
0001DE1A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DE1E 3C1A                       		move.w	(a2)+,d6
0001DE20 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DE24 6200                       		bhi.s	loc_1CF9E
0001DE26 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001DE2C                            
0001DE2C                            loc_1CF9E:
0001DE2C 6100 0000                  		bsr.w	Debug_ShowItem
0001DE30 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DE36 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001DE3C                            
0001DE3C                            Debug_Skip:				; XREF: Debug_Index
0001DE3C 7006                       		moveq	#6,d0
0001DE3E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001DE44 6700                       		beq.s	loc_1CFBE
0001DE46 7000                       		moveq	#0,d0
0001DE48 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DE4C                            
0001DE4C                            loc_1CFBE:
0001DE4C 45F9 0000 0000             		lea	(DebugList).l,a2
0001DE52 D040                       		add.w	d0,d0
0001DE54 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DE58 3C1A                       		move.w	(a2)+,d6
0001DE5A 6100 0000                  		bsr.w	Debug_Control
0001DE5E 4EF9 0000 E2A8             		jmp	DisplaySprite
0001DE64                            
0001DE64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE64                            
0001DE64                            
0001DE64                            Debug_Control:
0001DE64 7800                       		moveq	#0,d4
0001DE66 323C 0001                  		move.w	#1,d1
0001DE6A 1838 F605                  		move.b	($FFFFF605).w,d4
0001DE6E 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001DE72 6600                       		bne.s	loc_1D018	; if yes, branch
0001DE74 1038 F604                  		move.b	($FFFFF604).w,d0
0001DE78 0240 000F                  		andi.w	#$F,d0
0001DE7C 6600                       		bne.s	loc_1D000
0001DE7E 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DE84 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001DE8A 6000 0000                  		bra.w	Debug_BackItem
0001DE8E                            ; ===========================================================================
0001DE8E                            
0001DE8E                            loc_1D000:
0001DE8E 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001DE92 6600                       		bne.s	loc_1D01C
0001DE94 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001DE9A 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001DE9E 6600                       		bne.s	loc_1D018
0001DEA0 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001DEA6                            
0001DEA6                            loc_1D018:
0001DEA6 1838 F604                  		move.b	($FFFFF604).w,d4
0001DEAA                            
0001DEAA                            loc_1D01C:
0001DEAA 7200                       		moveq	#0,d1
0001DEAC 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001DEB0 5241                       		addq.w	#1,d1
0001DEB2 4841                       		swap	d1
0001DEB4 E881                       		asr.l	#4,d1
0001DEB6 2428 000C                  		move.l	$C(a0),d2
0001DEBA 2628 0008                  		move.l	8(a0),d3
0001DEBE 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001DEC2 6700                       		beq.s	loc_1D03C	; if not, branch
0001DEC4 9481                       		sub.l	d1,d2
0001DEC6 6400                       		bcc.s	loc_1D03C
0001DEC8 7400                       		moveq	#0,d2
0001DECA                            
0001DECA                            loc_1D03C:
0001DECA 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001DECE 6700                       		beq.s	loc_1D052	; if not, branch
0001DED0 D481                       		add.l	d1,d2
0001DED2 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001DED8 6500                       		bcs.s	loc_1D052
0001DEDA 243C 07FF 0000             		move.l	#$7FF0000,d2
0001DEE0                            
0001DEE0                            loc_1D052:
0001DEE0 0804 0002                  		btst	#2,d4
0001DEE4 6700                       		beq.s	loc_1D05E
0001DEE6 9681                       		sub.l	d1,d3
0001DEE8 6400                       		bcc.s	loc_1D05E
0001DEEA 7600                       		moveq	#0,d3
0001DEEC                            
0001DEEC                            loc_1D05E:
0001DEEC 0804 0003                  		btst	#3,d4
0001DEF0 6700                       		beq.s	loc_1D066
0001DEF2 D681                       		add.l	d1,d3
0001DEF4                            
0001DEF4                            loc_1D066:
0001DEF4 2142 000C                  		move.l	d2,$C(a0)
0001DEF8 2143 0008                  		move.l	d3,8(a0)
0001DEFC                            
0001DEFC                            Debug_BackItem:
0001DEFC 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001DF02 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DF04 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DF0A 6700                       		beq.s	Debug_NextItem	; if not, branch
0001DF0C 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001DF10 6400                       		bcc.s	Debug_NoLoop
0001DF12 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001DF16 6000                       		bra.s	Debug_NoLoop
0001DF18                            ; ===========================================================================
0001DF18                            
0001DF18                            Debug_NextItem:
0001DF18 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001DF1E 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DF20 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001DF24 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DF28 6200                       		bhi.s	Debug_NoLoop
0001DF2A 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001DF30                            
0001DF30                            Debug_NoLoop:
0001DF30 6000 0000                  		bra.w	Debug_ShowItem
0001DF34                            ; ===========================================================================
0001DF34                            
0001DF34                            Debug_MakeItem:
0001DF34 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DF3A 6700                       		beq.s	Debug_Exit	; if not, branch
0001DF3C 4EB9 0000 E72E             		jsr	SingleObjLoad
0001DF42 6600                       		bne.s	Debug_Exit
0001DF44 3368 0008 0008             		move.w	8(a0),8(a1)
0001DF4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DF50 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001DF54 1368 0001 0001             		move.b	1(a0),1(a1)
0001DF5A 1368 0001 0022             		move.b	1(a0),$22(a1)
0001DF60 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001DF66 7000                       		moveq	#0,d0
0001DF68 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DF6C E748                       		lsl.w	#3,d0
0001DF6E 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001DF74 4E75                       		rts	
0001DF76                            ; ===========================================================================
0001DF76                            
0001DF76                            Debug_Exit:
0001DF76 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DF7C 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DF7E 7000                       		moveq	#0,d0
0001DF80 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DF84 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DF8C 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DF92 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DF96 3140 000A                  		move.w	d0,$A(a0)
0001DF9A 3140 000E                  		move.w	d0,$E(a0)
0001DF9E 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DFA4 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DFAA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DFB0 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DFB2 4278 F780                  		clr.w	($FFFFF780).w
0001DFB6 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DFBC 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DFC4 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DFCA 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DFD0 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DFD6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DFDC                            
0001DFDC                            Debug_DoNothing:
0001DFDC 4E75                       		rts	
0001DFDE                            ; End of function Debug_Control
0001DFDE                            
0001DFDE                            
0001DFDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DFDE                            
0001DFDE                            
0001DFDE                            Debug_ShowItem:				; XREF: Debug_Main
0001DFDE 7000                       		moveq	#0,d0
0001DFE0 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DFE4 E748                       		lsl.w	#3,d0
0001DFE6 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DFEC 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DFF2 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DFF8 4E75                       		rts	
0001DFFA                            ; End of function Debug_ShowItem
0001DFFA                            
0001DFFA                            ; ===========================================================================
0001DFFA                            ; ---------------------------------------------------------------------------
0001DFFA                            ; Debug	list pointers
0001DFFA                            ; ---------------------------------------------------------------------------
0001DFFA                            DebugList:
0001DFFA                            	include "_inc\Debug list pointers.asm"
0001DFFA                            ; ---------------------------------------------------------------------------
0001DFFA                            ; Debug	list pointers
0001DFFA                            ; ---------------------------------------------------------------------------
0001DFFA 0000                       	dc.w Debug_GHZ-DebugList
0001DFFC 0000                       	dc.w Debug_LZ-DebugList
0001DFFE 0000                       	dc.w Debug_MZ-DebugList
0001E000 0000                       	dc.w Debug_SLZ-DebugList
0001E002 0000                       	dc.w Debug_SYZ-DebugList
0001E004 0000                       	dc.w Debug_SBZ-DebugList
0001E006 0000                       	dc.w Debug_Ending-DebugList
0001E008 0000                       	dc.w Debug_GHZ-DebugList
0001E008 0000                       	dc.w Debug_GHZ-DebugList
0001E00A                            
0001E00A                            ; ---------------------------------------------------------------------------
0001E00A                            ; Debug	list - Green Hill
0001E00A                            ; ---------------------------------------------------------------------------
0001E00A                            Debug_GHZ:
0001E00A                            	include "_inc\Debug list - GHZ.asm"
0001E00A                            ; ---------------------------------------------------------------------------
0001E00A                            ; Debug	list - Green Hill
0001E00A                            ; ---------------------------------------------------------------------------
0001E00A 0010                       	dc.w $10			; number of items in list
0001E00C 2500 AAA2                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001E010 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001E014 2600 B0A4                  	dc.l Map_obj26+$26000000
0001E018 0000 0680                  	dc.b 0,	0, 6, $80
0001E01C 1F00 A298                  	dc.l Map_obj1F+$1F000000
0001E020 0000 0400                  	dc.b 0,	0, 4, 0
0001E024 2200 A554                  	dc.l Map_obj22+$22000000
0001E028 0000 0444                  	dc.b 0,	0, 4, $44
0001E02C 2B00 B716                  	dc.l Map_obj2B+$2B000000
0001E030 0000 047B                  	dc.b 0,	0, 4, $7B
0001E034 3600 DC4A                  	dc.l Map_obj36+$36000000
0001E038 0000 051B                  	dc.b 0,	0, 5, $1B
0001E03C 1800 8BB6                  	dc.l Map_obj18+$18000000
0001E040 0000 4000                  	dc.b 0,	0, $40,	0
0001E044 3B00 DD70                  	dc.l Map_obj3B+$3B000000
0001E048 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001E04C 4001 043C                  	dc.l Map_obj40+$40000000
0001E050 0000 04F0                  	dc.b 0,	0, 4, $F0
0001E054 4100 E9BC                  	dc.l Map_obj41+$41000000
0001E058 0000 0523                  	dc.b 0,	0, 5, $23
0001E05C 4200 EBE0                  	dc.l Map_obj42+$42000000
0001E060 0000 249B                  	dc.b 0,	0, $24,	$9B
0001E064 4400 EEEE                  	dc.l Map_obj44+$44000000
0001E068 0000 434C                  	dc.b 0,	0, $43,	$4C
0001E06C 1900 8CB6                  	dc.l Map_obj48+$19000000
0001E070 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001E074 7901 7E4C                  	dc.l Map_obj79+$79000000
0001E078 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E07C 4B00 AAE2                  	dc.l Map_obj4B+$4B000000
0001E080 0000 2400                  	dc.b 0,	0, $24,	0
0001E084 7D01 7F9C                  	dc.l Map_obj7D+$7D000000
0001E088 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001E08C                            	even
0001E08C                            	even
0001E08C                            
0001E08C                            ; ---------------------------------------------------------------------------
0001E08C                            ; Debug	list - Labyrinth
0001E08C                            ; ---------------------------------------------------------------------------
0001E08C                            Debug_LZ:
0001E08C                            	include "_inc\Debug list - LZ.asm"
0001E08C                            ; ---------------------------------------------------------------------------
0001E08C                            ; Debug	list - Labyrinth
0001E08C                            ; ---------------------------------------------------------------------------
0001E08C 0019                       	dc.w $19
0001E08E 2500 AAA2                  	dc.l Map_obj25+$25000000
0001E092 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E096 2600 B0A4                  	dc.l Map_obj26+$26000000
0001E09A 0000 0680                  	dc.b 0,	0, 6, $80
0001E09E 4100 E9BC                  	dc.l Map_obj41+$41000000
0001E0A2 0000 0523                  	dc.b 0,	0, 5, $23
0001E0A6 2C00 B7C6                  	dc.l Map_obj2C+$2C000000
0001E0AA 0800 2486                  	dc.b 8,	0, $24,	$86
0001E0AE 2D00 B9BC                  	dc.l Map_obj2D+$2D000000
0001E0B2 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001E0B6 1601 2BEA                  	dc.l Map_obj16+$16000000
0001E0BA 0000 03CC                  	dc.b 0,	0, 3, $CC
0001E0BE 1601 2BEA                  	dc.l Map_obj16+$16000000
0001E0C2 0203 03CC                  	dc.b 2,	3, 3, $CC
0001E0C6 3300 CE72                  	dc.l Map_obj33+$33000000
0001E0CA 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001E0CE 3200 CA34                  	dc.l Map_obj32+$32000000
0001E0D2 0000 0513                  	dc.b 0,	0, 5, $13
0001E0D6 3600 DC4A                  	dc.l Map_obj36+$36000000
0001E0DA 0000 051B                  	dc.b 0,	0, 5, $1B
0001E0DE 5201 0D2E                  	dc.l Map_obj52a+$52000000
0001E0E2 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001E0E6 6101 2E0E                  	dc.l Map_obj61+$61000000
0001E0EA 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001E0EE 6101 2E0E                  	dc.l Map_obj61+$61000000
0001E0F2 1301 43E6                  	dc.b $13, 1, $43, $E6
0001E0F6 6101 2E0E                  	dc.l Map_obj61+$61000000
0001E0FA 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001E0FE 6201 2F62                  	dc.l Map_obj62+$62000000
0001E102 0000 443E                  	dc.b 0,	0, $44,	$3E
0001E106 6101 2E0E                  	dc.l Map_obj61+$61000000
0001E10A 2702 43E6                  	dc.b $27, 2, $43, $E6
0001E10E 6101 2E0E                  	dc.l Map_obj61+$61000000
0001E112 3003 43E6                  	dc.b $30, 3, $43, $E6
0001E116 6301 32C0                  	dc.l Map_obj63+$63000000
0001E11A 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001E11E 6001 2B34                  	dc.l Map_obj60+$60000000
0001E122 0000 0467                  	dc.b 0,	0, 4, $67
0001E126 6401 3606                  	dc.l Map_obj64+$64000000
0001E12A 8413 8348                  	dc.b $84, $13, $83, $48
0001E12E 6501 378E                  	dc.l Map_obj65+$65000000
0001E132 0202 C259                  	dc.b 2,	2, $C2,	$59
0001E136 6501 378E                  	dc.l Map_obj65+$65000000
0001E13A 0909 C259                  	dc.b 9,	9, $C2,	$59
0001E13E 0B01 1F8C                  	dc.l Map_obj0B+$B000000
0001E142 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001E146 0C01 205C                  	dc.l Map_obj0C+$C000000
0001E14A 0200 4328                  	dc.b 2,	0, $43,	$28
0001E14E 7901 7E4C                  	dc.l Map_obj79+$79000000
0001E152 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E156                            	even
0001E156                            	even
0001E156                            
0001E156                            ; ---------------------------------------------------------------------------
0001E156                            ; Debug	list - Marble
0001E156                            ; ---------------------------------------------------------------------------
0001E156                            Debug_MZ:
0001E156                            	include "_inc\Debug list - MZ.asm"
0001E156                            ; ---------------------------------------------------------------------------
0001E156                            ; Debug	list - Marble
0001E156                            ; ---------------------------------------------------------------------------
0001E156 0012                       	dc.w $12
0001E158 2500 AAA2                  	dc.l Map_obj25+$25000000
0001E15C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E160 2600 B0A4                  	dc.l Map_obj26+$26000000
0001E164 0000 0680                  	dc.b 0,	0, 6, $80
0001E168 2200 A554                  	dc.l Map_obj22+$22000000
0001E16C 0000 0444                  	dc.b 0,	0, 4, $44
0001E170 3600 DC4A                  	dc.l Map_obj36+$36000000
0001E174 0000 051B                  	dc.b 0,	0, 5, $1B
0001E178 4100 E9BC                  	dc.l Map_obj41+$41000000
0001E17C 0000 0523                  	dc.b 0,	0, 5, $23
0001E180 1300 BEFE                  	dc.l Map_obj14+$13000000
0001E184 0000 0345                  	dc.b 0,	0, 3, $45
0001E188 4600 F59C                  	dc.l Map_obj46+$46000000
0001E18C 0000 4000                  	dc.b 0,	0, $40,	0
0001E190 4C00 FEE8                  	dc.l Map_obj4C+$4C000000
0001E194 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001E198 4E01 01CC                  	dc.l Map_obj4E+$4E000000
0001E19C 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001E1A0 3300 CE72                  	dc.l Map_obj33+$33000000
0001E1A4 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001E1A8 5001 05CA                  	dc.l Map_obj50+$50000000
0001E1AC 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E1B0 5101 0A66                  	dc.l Map_obj51+$51000000
0001E1B4 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001E1B8 5201 0CD8                  	dc.l Map_obj52+$52000000
0001E1BC 0000 02B8                  	dc.b 0,	0, 2, $B8
0001E1C0 5300 924E                  	dc.l Map_obj53+$53000000
0001E1C4 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001E1C8 5400 FEAE                  	dc.l Map_obj54+$54000000
0001E1CC 0000 8680                  	dc.b 0,	0, $86,	$80
0001E1D0 5501 0EB2                  	dc.l Map_obj55+$55000000
0001E1D4 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E1D8 7801 7AC6                  	dc.l Map_obj78+$78000000
0001E1DC 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E1E0 7901 7E4C                  	dc.l Map_obj79+$79000000
0001E1E4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E1E8                            	even
0001E1E8                            	even
0001E1E8                            
0001E1E8                            ; ---------------------------------------------------------------------------
0001E1E8                            ; Debug	list - Star Light
0001E1E8                            ; ---------------------------------------------------------------------------
0001E1E8                            Debug_SLZ:
0001E1E8                            	include "_inc\Debug list - SLZ.asm"
0001E1E8                            ; ---------------------------------------------------------------------------
0001E1E8                            ; Debug	list - Star Light
0001E1E8                            ; ---------------------------------------------------------------------------
0001E1E8 000F                       	dc.w $F
0001E1EA 2500 AAA2                  	dc.l Map_obj25+$25000000
0001E1EE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E1F2 2600 B0A4                  	dc.l Map_obj26+$26000000
0001E1F6 0000 0680                  	dc.b 0,	0, 6, $80
0001E1FA 5901 19B4                  	dc.l Map_obj59+$59000000
0001E1FE 0000 4000                  	dc.b 0,	0, $40,	0
0001E202 5300 924E                  	dc.l Map_obj53+$53000000
0001E206 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001E20A 1800 8C14                  	dc.l Map_obj18b+$18000000
0001E20E 0000 4000                  	dc.b 0,	0, $40,	0
0001E212 5A01 1AEE                  	dc.l Map_obj5A+$5A000000
0001E216 0000 4000                  	dc.b 0,	0, $40,	0
0001E21A 5B01 1CA6                  	dc.l Map_obj5B+$5B000000
0001E21E 0000 4000                  	dc.b 0,	0, $40,	0
0001E222 5D01 2276                  	dc.l Map_obj5D+$5D000000
0001E226 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001E22A 5E01 2608                  	dc.l Map_obj5E+$5E000000
0001E22E 0000 0374                  	dc.b 0,	0, 3, $74
0001E232 4100 E9BC                  	dc.l Map_obj41+$41000000
0001E236 0000 0523                  	dc.b 0,	0, 5, $23
0001E23A 1300 BEFE                  	dc.l Map_obj14+$13000000
0001E23E 0000 0480                  	dc.b 0,	0, 4, $80
0001E242 1C00 935E                  	dc.l Map_obj1C+$1C000000
0001E246 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001E24A 5F01 287E                  	dc.l Map_obj5F+$5F000000
0001E24E 0000 0400                  	dc.b 0,	0, 4, 0
0001E252 6001 2B34                  	dc.l Map_obj60+$60000000
0001E256 0000 2429                  	dc.b 0,	0, $24,	$29
0001E25A 7901 7E4C                  	dc.l Map_obj79+$79000000
0001E25E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E262                            	even
0001E262                            	even
0001E262                            
0001E262                            ; ---------------------------------------------------------------------------
0001E262                            ; Debug	list - Spring Yard
0001E262                            ; ---------------------------------------------------------------------------
0001E262                            Debug_SYZ:
0001E262                            	include "_inc\Debug list - SYZ.asm"
0001E262                            ; ---------------------------------------------------------------------------
0001E262                            ; Debug	list - Spring Yard
0001E262                            ; ---------------------------------------------------------------------------
0001E262 000F                       	dc.w $F
0001E264 2500 AAA2                  	dc.l Map_obj25+$25000000
0001E268 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E26C 2600 B0A4                  	dc.l Map_obj26+$26000000
0001E270 0000 0680                  	dc.b 0,	0, 6, $80
0001E274 3600 DC4A                  	dc.l Map_obj36+$36000000
0001E278 0000 051B                  	dc.b 0,	0, 5, $1B
0001E27C 4100 E9BC                  	dc.l Map_obj41+$41000000
0001E280 0000 0523                  	dc.b 0,	0, 5, $23
0001E284 4300 EE40                  	dc.l Map_obj43+$43000000
0001E288 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E28C 1200 F61A                  	dc.l Map_obj12+$12000000
0001E290 0000 0000                  	dc.b 0,	0, 0, 0
0001E294 4700 F796                  	dc.l Map_obj47+$47000000
0001E298 0000 0380                  	dc.b 0,	0, 3, $80
0001E29C 1F00 A298                  	dc.l Map_obj1F+$1F000000
0001E2A0 0000 0400                  	dc.b 0,	0, 4, 0
0001E2A4 2200 A554                  	dc.l Map_obj22+$22000000
0001E2A8 0000 0444                  	dc.b 0,	0, 4, $44
0001E2AC 5001 05CA                  	dc.l Map_obj50+$50000000
0001E2B0 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E2B4 1800 8C02                  	dc.l Map_obj18a+$18000000
0001E2B8 0000 4000                  	dc.b 0,	0, $40,	0
0001E2BC 5601 1374                  	dc.l Map_obj56+$56000000
0001E2C0 0000 4000                  	dc.b 0,	0, $40,	0
0001E2C4 3200 CA34                  	dc.l Map_obj32+$32000000
0001E2C8 0000 0513                  	dc.b 0,	0, 5, $13
0001E2CC 7801 7AC6                  	dc.l Map_obj78+$78000000
0001E2D0 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E2D4 7901 7E4C                  	dc.l Map_obj79+$79000000
0001E2D8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E2DC                            	even
0001E2DC                            	even
0001E2DC                            
0001E2DC                            ; ---------------------------------------------------------------------------
0001E2DC                            ; Debug	list - Scrap Brain
0001E2DC                            ; ---------------------------------------------------------------------------
0001E2DC                            Debug_SBZ:
0001E2DC                            	include "_inc\Debug list - SBZ.asm"
0001E2DC                            ; ---------------------------------------------------------------------------
0001E2DC                            ; Debug	list - Scrap Brain
0001E2DC                            ; ---------------------------------------------------------------------------
0001E2DC 001D                       	dc.w $1D
0001E2DE 2500 AAA2                  	dc.l Map_obj25+$25000000
0001E2E2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E2E6 2600 B0A4                  	dc.l Map_obj26+$26000000
0001E2EA 0000 0680                  	dc.b 0,	0, 6, $80
0001E2EE 5F01 287E                  	dc.l Map_obj5F+$5F000000
0001E2F2 0000 0400                  	dc.b 0,	0, 4, 0
0001E2F6 6001 2B34                  	dc.l Map_obj60+$60000000
0001E2FA 0000 0429                  	dc.b 0,	0, 4, $29
0001E2FE 7801 7AC6                  	dc.l Map_obj78+$78000000
0001E302 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001E306 1501 1710                  	dc.l Map_obj15b+$15000000
0001E30A 0702 4391                  	dc.b 7,	2, $43,	$91
0001E30E 6701 63DE                  	dc.l Map_obj67+$67000000
0001E312 E000 C344                  	dc.b $E0, 0, $C3, $44
0001E316 5201 0CD8                  	dc.l Map_obj52+$52000000
0001E31A 2802 22C0                  	dc.b $28, 2, $22, $C0
0001E31E 3200 CA34                  	dc.l Map_obj32+$32000000
0001E322 0000 0513                  	dc.b 0,	0, 5, $13
0001E326 6901 6638                  	dc.l Map_obj69+$69000000
0001E32A 0300 4492                  	dc.b 3,	0, $44,	$92
0001E32E 6901 6692                  	dc.l Map_obj69a+$69000000
0001E332 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001E336 6A01 68F0                  	dc.l Map_obj6A+$6A000000
0001E33A 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001E33E 5300 924E                  	dc.l Map_obj53+$53000000
0001E342 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001E346 5201 0CD8                  	dc.l Map_obj52+$52000000
0001E34A 3903 4460                  	dc.b $39, 3, $44, $60
0001E34E 6B01 6CC0                  	dc.l Map_obj6B+$6B000000
0001E352 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001E356 2A00 94F4                  	dc.l Map_obj2A+$2A000000
0001E35A 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001E35E 6B01 6CC0                  	dc.l Map_obj6B+$6B000000
0001E362 1301 22C0                  	dc.b $13, 1, $22, $C0
0001E366 6A01 68F0                  	dc.l Map_obj6A+$6A000000
0001E36A 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001E36E 6B01 6CC0                  	dc.l Map_obj6B+$6B000000
0001E372 2401 22C0                  	dc.b $24, 1, $22, $C0
0001E376 6A01 68F0                  	dc.l Map_obj6A+$6A000000
0001E37A 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001E37E 6B01 6CC0                  	dc.l Map_obj6B+$6B000000
0001E382 3401 22C0                  	dc.b $34, 1, $22, $C0
0001E386 6C01 6E82                  	dc.l Map_obj6C+$6C000000
0001E38A 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001E38E 6D00 F290                  	dc.l Map_obj6D+$6D000000
0001E392 6400 83D9                  	dc.b $64, 0, $83, $D9
0001E396 6D00 F290                  	dc.l Map_obj6D+$6D000000
0001E39A 640B 83D9                  	dc.b $64, $B, $83, $D9
0001E39E 6E01 6F38                  	dc.l Map_obj6E+$6E000000
0001E3A2 0400 047E                  	dc.b 4,	0, 4, $7E
0001E3A6 7001 738A                  	dc.l Map_obj70+$70000000
0001E3AA 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001E3AE 7101 211C                  	dc.l Map_obj71+$71000000
0001E3B2 1100 8680                  	dc.b $11, 0, $86, $80
0001E3B6 1E00 99AC                  	dc.l Map_obj1E+$1E000000
0001E3BA 0400 2302                  	dc.b 4,	0, $23,	2
0001E3BE 7901 7E4C                  	dc.l Map_obj79+$79000000
0001E3C2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E3C6                            	even
0001E3C6                            	even
0001E3C6                            
0001E3C6                            ; ---------------------------------------------------------------------------
0001E3C6                            ; Debug	list - ending sequence / special stage
0001E3C6                            ; ---------------------------------------------------------------------------
0001E3C6                            Debug_Ending:
0001E3C6                            	include "_inc\Debug list - Ending and SS.asm"
0001E3C6                            ; ---------------------------------------------------------------------------
0001E3C6                            ; Debug	list - ending sequence / special stage
0001E3C6                            ; ---------------------------------------------------------------------------
0001E3C6 000D                       	dc.w $D
0001E3C8 2500 AAA2                  	dc.l Map_obj25+$25000000
0001E3CC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E3D0 4700 F796                  	dc.l Map_obj47+$47000000
0001E3D4 0000 0380                  	dc.b 0,	0, 3, $80
0001E3D8 2800 9FCA                  	dc.l Map_obj28a+$28000000
0001E3DC 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001E3E0 2800 9FCA                  	dc.l Map_obj28a+$28000000
0001E3E4 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001E3E8 2800 9FCA                  	dc.l Map_obj28a+$28000000
0001E3EC 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001E3F0 2800 9FB2                  	dc.l Map_obj28+$28000000
0001E3F4 0D00 0553                  	dc.b $D, 0, 5, $53
0001E3F8 2800 9FB2                  	dc.l Map_obj28+$28000000
0001E3FC 0E00 0553                  	dc.b $E, 0, 5, $53
0001E400 2800 9FB2                  	dc.l Map_obj28+$28000000
0001E404 0F00 0573                  	dc.b $F, 0, 5, $73
0001E408 2800 9FB2                  	dc.l Map_obj28+$28000000
0001E40C 1000 0573                  	dc.b $10, 0, 5,	$73
0001E410 2800 9FCA                  	dc.l Map_obj28a+$28000000
0001E414 1100 0585                  	dc.b $11, 0, 5,	$85
0001E418 2800 9FE2                  	dc.l Map_obj28b+$28000000
0001E41C 1200 0593                  	dc.b $12, 0, 5,	$93
0001E420 2800 9FCA                  	dc.l Map_obj28a+$28000000
0001E424 1300 0565                  	dc.b $13, 0, 5,	$65
0001E428 2800 9FE2                  	dc.l Map_obj28b+$28000000
0001E42C 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001E430                            	even
0001E430                            	even
0001E430                            
0001E430                            ; ---------------------------------------------------------------------------
0001E430                            ; Main level load blocks
0001E430                            ; ---------------------------------------------------------------------------
0001E430                            MainLoadBlocks:
0001E430                            	include "_inc\Main level load blocks.asm"
0001E430                            ; ---------------------------------------------------------------------------
0001E430                            ; Main level load blocks
0001E430                            ;
0001E430                            ; ===FORMAT===
0001E430                            ; level	patterns + (1st	PLC num	* 10^6)
0001E430                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001E430                            ; 256x256 mappings
0001E430                            ; blank, music (unused), pal index (unused), pal index
0001E430                            ; ---------------------------------------------------------------------------
0001E430 0000 0000                  	dc.l Nem_GHZ_2nd|4<<24
0001E434 0000 0000                  	dc.l Blk16_GHZ|5<<24
0001E438 0000 0000                  	dc.l Blk256_GHZ
0001E43C 0081 0404                  	dc.b 0,	$81, 4,	4
0001E440 0000 0000                  	dc.l Nem_LZ|6<<24
0001E444 0000 0000                  	dc.l Blk16_LZ|7<<24
0001E448 0000 0000                  	dc.l Blk256_LZ
0001E44C 0082 0505                  	dc.b 0,	$82, 5,	5
0001E450 0000 0000                  	dc.l Nem_MZ|8<<24
0001E454 0000 0000                  	dc.l Blk16_MZ|9<<24
0001E458 0000 0000                  	dc.l Blk256_MZ
0001E45C 0083 0606                  	dc.b 0,	$83, 6,	6
0001E460 0000 0000                  	dc.l Nem_SLZ|$A<<24
0001E464 0000 0000                  	dc.l Blk16_SLZ|$B<<24
0001E468 0000 0000                  	dc.l Blk256_SLZ
0001E46C 0084 0707                  	dc.b 0,	$84, 7,	7
0001E470 0000 0000                  	dc.l Nem_SYZ|$C<<24
0001E474 0000 0000                  	dc.l Blk16_SYZ|$D<<24
0001E478 0000 0000                  	dc.l Blk256_SYZ
0001E47C 0085 0808                  	dc.b 0,	$85, 8,	8
0001E480 0000 0000                  	dc.l Nem_SBZ|$E<<24
0001E484 0000 0000                  	dc.l Blk16_SBZ|$F<<24
0001E488 0000 0000                  	dc.l Blk256_SBZ
0001E48C 0086 0909                  	dc.b 0,	$86, 9,	9
0001E490 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001E494 0000 0000                  	dc.l Blk16_GHZ
0001E498 0000 0000                  	dc.l Blk256_GHZ
0001E49C 0086 1313                  	dc.b 0,	$86, $13, $13
0001E4A0                            ; there you go lol
0001E4A0 0000 0000                  	dc.l Nem_BHZ_2nd|$20<<24 ; MAKOTO ZONE
0001E4A4 0000 0000                  	dc.l Blk16_BHZ|$21<<24
0001E4A8 0000 0000                  	dc.l Blk256_BHZ
0001E4AC 009E 1515                  	dc.b 0,	$9E, $15, $15
0001E4B0                            	even
0001E4B0                            	even
0001E4B0                            
0001E4B0                            ; ---------------------------------------------------------------------------
0001E4B0                            ; Pattern load cues
0001E4B0                            ; ---------------------------------------------------------------------------
0001E4B0                            ArtLoadCues:
0001E4B0                            	include "_inc\Pattern load cues.asm"
0001E4B0                            ; ---------------------------------------------------------------------------
0001E4B0                            ; Pattern load cues - index
0001E4B0                            ; ---------------------------------------------------------------------------
0001E4B0 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues	; 0
0001E4B4 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues	; 2
0001E4B8 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues		; 4
0001E4BC 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001E4C0 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001E4C4 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001E4C8 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001E4CC 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001E4D0 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues	; $10
0001E4D4 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001E4D8 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001E4DC 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001E4E0 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001E4E4 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001E4E8 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001E4EC 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001E4F0                            
0001E4F0 0000 0000                  	dc.w PLC_BHZ-ArtLoadCues, PLC_BHZ2-ArtLoadCues		; $20
0001E4F4 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001E4F6                            ; ---------------------------------------------------------------------------
0001E4F6                            ; Pattern load cues - standard block 1
0001E4F6                            ; ---------------------------------------------------------------------------
0001E4F6 0004                       PLC_Main:	dc.w 4
0001E4F8 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001E4FC F400                       		dc.w $F400
0001E4FE 0000 0000                  		dc.l Nem_Hud		; HUD
0001E502 D940                       		dc.w $D940
0001E504 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001E508 FA80                       		dc.w $FA80
0001E50A 0000 0000                  		dc.l Nem_Ring		; rings
0001E50E F640                       		dc.w $F640
0001E510 0000 0000                  		dc.l Nem_Points		; points from enemy
0001E514 F2E0                       		dc.w $F2E0
0001E516                            ; ---------------------------------------------------------------------------
0001E516                            ; Pattern load cues - standard block 2
0001E516                            ; ---------------------------------------------------------------------------
0001E516 0002                       PLC_Main2:	dc.w 2
0001E518 0000 0000                  		dc.l Nem_Monitors	; monitors
0001E51C D000                       		dc.w $D000
0001E51E 0000 0000                  		dc.l Nem_Shield		; shield
0001E522 A820                       		dc.w $A820
0001E524 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001E528 AB80                       		dc.w $AB80
0001E52A                            ; ---------------------------------------------------------------------------
0001E52A                            ; Pattern load cues - explosion
0001E52A                            ; ---------------------------------------------------------------------------
0001E52A 0000                       PLC_Explode:	dc.w 0
0001E52C 0000 0000                  		dc.l Nem_Explode	; explosion
0001E530 B400                       		dc.w $B400
0001E532                            ; ---------------------------------------------------------------------------
0001E532                            ; Pattern load cues - game/time	over
0001E532                            ; ---------------------------------------------------------------------------
0001E532 0000                       PLC_GameOver:	dc.w 0
0001E534 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001E538 ABC0                       		dc.w $ABC0
0001E53A                            ; ---------------------------------------------------------------------------
0001E53A                            ; Pattern load cues - Green Hill
0001E53A                            ; ---------------------------------------------------------------------------
0001E53A 000B                       PLC_GHZ:	dc.w $B
0001E53C 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E540 0000                       		dc.w 0
0001E542 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E546 39A0                       		dc.w $39A0
0001E548 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E54C 6B00                       		dc.w $6B00
0001E54E 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E552 7A00                       		dc.w $7A00
0001E554 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E558 8000                       		dc.w $8000
0001E55A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E55E 8880                       		dc.w $8880
0001E560 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E564 8F60                       		dc.w $8F60
0001E566 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E56A 9360                       		dc.w $9360
0001E56C 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E570 9E00                       		dc.w $9E00
0001E572 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E576 A360                       		dc.w $A360
0001E578 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E57C A460                       		dc.w $A460
0001E57E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E582 A660                       		dc.w $A660
0001E584 0005                       PLC_GHZ2:	dc.w 5
0001E586 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E58A 7000                       		dc.w $7000
0001E58C 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E590 71C0                       		dc.w $71C0
0001E592 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E596 7300                       		dc.w $7300
0001E598 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E59C 7540                       		dc.w $7540
0001E59E 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E5A2 A1E0                       		dc.w $A1E0
0001E5A4 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E5A8 6980                       		dc.w $6980
0001E5AA                            ; ---------------------------------------------------------------------------
0001E5AA                            ; Pattern load cues - Labyrinth
0001E5AA                            ; ---------------------------------------------------------------------------
0001E5AA 000B                       PLC_LZ:		dc.w $B
0001E5AC 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E5B0 0000                       		dc.w 0
0001E5B2 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E5B6 3C00                       		dc.w $3C00
0001E5B8 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E5BC 3E00                       		dc.w $3E00
0001E5BE 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E5C2 4B20                       		dc.w $4B20
0001E5C4 0000 0000                  		dc.l Nem_Water		; water	surface
0001E5C8 6000                       		dc.w $6000
0001E5CA 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E5CE 6200                       		dc.w $6200
0001E5D0 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E5D4 6500                       		dc.w $6500
0001E5D6 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E5DA 6900                       		dc.w $6900
0001E5DC 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E5E0 7780                       		dc.w $7780
0001E5E2 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E5E6 7880                       		dc.w $7880
0001E5E8 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E5EC 7980                       		dc.w $7980
0001E5EE 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E5F2 94C0                       		dc.w $94C0
0001E5F4 000C                       PLC_LZ2:	dc.w $C
0001E5F6 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E5FA 7BC0                       		dc.w $7BC0
0001E5FC 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E600 7CC0                       		dc.w $7CC0
0001E602 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E606 7EC0                       		dc.w $7EC0
0001E608 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E60C 5D20                       		dc.w $5D20
0001E60E 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E612 8800                       		dc.w $8800
0001E614 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E618 89E0                       		dc.w $89E0
0001E61A 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E61E 8CE0                       		dc.w $8CE0
0001E620 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E624 90C0                       		dc.w $90C0
0001E626 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E62A A1E0                       		dc.w $A1E0
0001E62C 0000 0000                  		dc.l Nem_Cork		; cork block
0001E630 A000                       		dc.w $A000
0001E632 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E636 A360                       		dc.w $A360
0001E638 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E63C A460                       		dc.w $A460
0001E63E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E642 A660                       		dc.w $A660
0001E644                            ; ---------------------------------------------------------------------------
0001E644                            ; Pattern load cues - Marble
0001E644                            ; ---------------------------------------------------------------------------
0001E644 0009                       PLC_MZ:		dc.w 9
0001E646 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E64A 0000                       		dc.w 0
0001E64C 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E650 6000                       		dc.w $6000
0001E652 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E656 68A0                       		dc.w $68A0
0001E658 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E65C 7000                       		dc.w $7000
0001E65E 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E662 71C0                       		dc.w $71C0
0001E664 0000 0000                  		dc.l Nem_Lava		; lava
0001E668 7500                       		dc.w $7500
0001E66A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E66E 8880                       		dc.w $8880
0001E670 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E674 8F60                       		dc.w $8F60
0001E676 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E67A 9700                       		dc.w $9700
0001E67C 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E680 9FE0                       		dc.w $9FE0
0001E682 0004                       PLC_MZ2:	dc.w 4
0001E684 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E688 A260                       		dc.w $A260
0001E68A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E68E A360                       		dc.w $A360
0001E690 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E694 A460                       		dc.w $A460
0001E696 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E69A A660                       		dc.w $A660
0001E69C 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E6A0 5700                       		dc.w $5700
0001E6A2                            ; ---------------------------------------------------------------------------
0001E6A2                            ; Pattern load cues - Star Light
0001E6A2                            ; ---------------------------------------------------------------------------
0001E6A2 0008                       PLC_SLZ:	dc.w 8
0001E6A4 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E6A8 0000                       		dc.w 0
0001E6AA 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E6AE 8000                       		dc.w $8000
0001E6B0 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E6B4 8520                       		dc.w $8520
0001E6B6 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E6BA 9000                       		dc.w $9000
0001E6BC 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E6C0 9C00                       		dc.w $9C00
0001E6C2 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E6C6 A260                       		dc.w $A260
0001E6C8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E6CC A360                       		dc.w $A360
0001E6CE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E6D2 A460                       		dc.w $A460
0001E6D4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E6D8 A660                       		dc.w $A660
0001E6DA 0005                       PLC_SLZ2:	dc.w 5
0001E6DC 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E6E0 6E80                       		dc.w $6E80
0001E6E2 0000 0000                  		dc.l Nem_Fan		; fan
0001E6E6 7400                       		dc.w $7400
0001E6E8 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E6EC 7980                       		dc.w $7980
0001E6EE 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E6F2 7B80                       		dc.w $7B80
0001E6F4 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E6F8 9B00                       		dc.w $9B00
0001E6FA 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E6FE 9E00                       		dc.w $9E00
0001E700                            ; ---------------------------------------------------------------------------
0001E700                            ; Pattern load cues - Spring Yard
0001E700                            ; ---------------------------------------------------------------------------
0001E700 0004                       PLC_SYZ:	dc.w 4
0001E702 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E706 0000                       		dc.w 0
0001E708 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E70C 8000                       		dc.w $8000
0001E70E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E712 8880                       		dc.w $8880
0001E714 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E718 8F60                       		dc.w $8F60
0001E71A 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E71E 9700                       		dc.w $9700
0001E720 0007                       PLC_SYZ2:	dc.w 7
0001E722 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E726 7000                       		dc.w $7000
0001E728 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E72C 72C0                       		dc.w $72C0
0001E72E 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E732 7740                       		dc.w $7740
0001E734 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E738 9FE0                       		dc.w $9FE0
0001E73A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E73E A1E0                       		dc.w $A1E0
0001E740 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E744 A360                       		dc.w $A360
0001E746 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E74A A460                       		dc.w $A460
0001E74C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E750 A660                       		dc.w $A660
0001E752                            ; ---------------------------------------------------------------------------
0001E752                            ; Pattern load cues - Scrap Brain
0001E752                            ; ---------------------------------------------------------------------------
0001E752 000B                       PLC_SBZ:	dc.w $B
0001E754 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E758 0000                       		dc.w 0
0001E75A 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E75E 5800                       		dc.w $5800
0001E760 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E764 5D00                       		dc.w $5D00
0001E766 0000 0000                  		dc.l Nem_Girder		; girder
0001E76A 5E00                       		dc.w $5E00
0001E76C 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E770 6040                       		dc.w $6040
0001E772 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E776 6880                       		dc.w $6880
0001E778 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E77C 6900                       		dc.w $6900
0001E77E 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E782 7220                       		dc.w $7220
0001E784 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E788 76A0                       		dc.w $76A0
0001E78A 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E78E 7B20                       		dc.w $7B20
0001E790 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E794 7EA0                       		dc.w $7EA0
0001E796 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E79A 9860                       		dc.w $9860
0001E79C 000C                       PLC_SBZ2:	dc.w $C
0001E79E 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E7A2 5600                       		dc.w $5600
0001E7A4 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E7A8 8000                       		dc.w $8000
0001E7AA 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E7AE 8520                       		dc.w $8520
0001E7B0 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E7B4 8C00                       		dc.w $8C00
0001E7B6 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E7BA 8DE0                       		dc.w $8DE0
0001E7BC 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E7C0 8FC0                       		dc.w $8FC0
0001E7C2 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E7C6 9240                       		dc.w $9240
0001E7C8 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E7CC 7F20                       		dc.w $7F20
0001E7CE 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E7D2 9BE0                       		dc.w $9BE0
0001E7D4 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E7D8 A1E0                       		dc.w $A1E0
0001E7DA 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E7DE A360                       		dc.w $A360
0001E7E0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E7E4 A460                       		dc.w $A460
0001E7E6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E7EA A660                       		dc.w $A660
0001E7EC                            ; ---------------------------------------------------------------------------
0001E7EC                            ; Pattern load cues - DR. Breen Hill
0001E7EC                            ; ---------------------------------------------------------------------------
0001E7EC 000B                       PLC_BHZ:	dc.w $B
0001E7EE 0000 0000                  		dc.l Nem_BHZ_1st	; GHZ main patterns
0001E7F2 0000                       		dc.w 0
0001E7F4 0000 0000                  		dc.l Nem_BHZ_2nd	; GHZ secondary	patterns
0001E7F8 39A0                       		dc.w $39A0
0001E7FA 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E7FE 6B00                       		dc.w $6B00
0001E800 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E804 7A00                       		dc.w $7A00
0001E806 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E80A 8000                       		dc.w $8000
0001E80C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E810 8880                       		dc.w $8880
0001E812 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E816 8F60                       		dc.w $8F60
0001E818 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E81C 9360                       		dc.w $9360
0001E81E 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E822 9E00                       		dc.w $9E00
0001E824 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E828 A360                       		dc.w $A360
0001E82A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E82E A460                       		dc.w $A460
0001E830 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E834 A660                       		dc.w $A660
0001E836 0005                       PLC_BHZ2:	dc.w 5
0001E838 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E83C 7000                       		dc.w $7000
0001E83E 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E842 71C0                       		dc.w $71C0
0001E844 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E848 7300                       		dc.w $7300
0001E84A 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E84E 7540                       		dc.w $7540
0001E850 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E854 A1E0                       		dc.w $A1E0
0001E856 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E85A 6980                       		dc.w $6980
0001E85C                            ; ---------------------------------------------------------------------------
0001E85C                            ; Pattern load cues - title card
0001E85C                            ; ---------------------------------------------------------------------------
0001E85C 0000                       PLC_TitleCard:	dc.w 0
0001E85E 0000 0000                  		dc.l Nem_TitleCard
0001E862 B000                       		dc.w $B000
0001E864                            ; ---------------------------------------------------------------------------
0001E864                            ; Pattern load cues - act 3 boss
0001E864                            ; ---------------------------------------------------------------------------
0001E864 0005                       PLC_Boss:	dc.w 5
0001E866 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E86A 8000                       		dc.w $8000
0001E86C 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E870 8D80                       		dc.w $8D80
0001E872 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E876 93A0                       		dc.w $93A0
0001E878 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E87C A300                       		dc.w $A300
0001E87E 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E882 A300                       		dc.w $A300
0001E884 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E888 A540                       		dc.w $A540
0001E88A                            ; ---------------------------------------------------------------------------
0001E88A                            ; Pattern load cues - act 1/2 signpost
0001E88A                            ; ---------------------------------------------------------------------------
0001E88A 0002                       PLC_Signpost:	dc.w 2
0001E88C 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E890 D000                       		dc.w $D000
0001E892 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E896 96C0                       		dc.w $96C0
0001E898 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E89C 8C40                       		dc.w $8C40
0001E89E                            ; ---------------------------------------------------------------------------
0001E89E                            ; Pattern load cues - beta special stage warp effect
0001E89E                            ; ---------------------------------------------------------------------------
0001E89E 0000                       PLC_Warp:	dc.w 0
0001E8A0 0000 0000                  		dc.l Nem_Warp
0001E8A4 A820                       		dc.w $A820
0001E8A6                            ; ---------------------------------------------------------------------------
0001E8A6                            ; Pattern load cues - special stage
0001E8A6                            ; ---------------------------------------------------------------------------
0001E8A6 0010                       PLC_SpeStage:	dc.w $10
0001E8A8 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E8AC 0000                       		dc.w 0
0001E8AE 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E8B2 0A20                       		dc.w $A20
0001E8B4 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E8B8 2840                       		dc.w $2840
0001E8BA 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E8BE 4760                       		dc.w $4760
0001E8C0 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E8C4 4A20                       		dc.w $4A20
0001E8C6 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E8CA 4C60                       		dc.w $4C60
0001E8CC 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E8D0 5E00                       		dc.w $5E00
0001E8D2 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E8D6 6E00                       		dc.w $6E00
0001E8D8 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E8DC 7E00                       		dc.w $7E00
0001E8DE 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E8E2 8E00                       		dc.w $8E00
0001E8E4 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E8E8 9E00                       		dc.w $9E00
0001E8EA 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E8EE AE00                       		dc.w $AE00
0001E8F0 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E8F4 BE00                       		dc.w $BE00
0001E8F6 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E8FA EE00                       		dc.w $EE00
0001E8FC 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E900 F2E0                       		dc.w $F2E0
0001E902 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E906 F400                       		dc.w $F400
0001E908 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E90C F520                       		dc.w $F520
0001E90E 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E912 F2E0                       		dc.w $F2E0
0001E914 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E918 F400                       		dc.w $F400
0001E91A 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E91E F520                       		dc.w $F520
0001E920                            ; ---------------------------------------------------------------------------
0001E920                            ; Pattern load cues - GHZ animals
0001E920                            ; ---------------------------------------------------------------------------
0001E920 0001                       PLC_GHZAnimals:	dc.w 1
0001E922 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E926 B000                       		dc.w $B000
0001E928 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E92C B240                       		dc.w $B240
0001E92E                            ; ---------------------------------------------------------------------------
0001E92E                            ; Pattern load cues - LZ animals
0001E92E                            ; ---------------------------------------------------------------------------
0001E92E 0001                       PLC_LZAnimals:	dc.w 1
0001E930 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E934 B000                       		dc.w $B000
0001E936 0000 0000                  		dc.l Nem_Seal		; seal
0001E93A B240                       		dc.w $B240
0001E93C                            ; ---------------------------------------------------------------------------
0001E93C                            ; Pattern load cues - MZ animals
0001E93C                            ; ---------------------------------------------------------------------------
0001E93C 0001                       PLC_MZAnimals:	dc.w 1
0001E93E 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E942 B000                       		dc.w $B000
0001E944 0000 0000                  		dc.l Nem_Seal		; seal
0001E948 B240                       		dc.w $B240
0001E94A                            ; ---------------------------------------------------------------------------
0001E94A                            ; Pattern load cues - SLZ animals
0001E94A                            ; ---------------------------------------------------------------------------
0001E94A 0001                       PLC_SLZAnimals:	dc.w 1
0001E94C 0000 0000                  		dc.l Nem_Pig		; pig
0001E950 B000                       		dc.w $B000
0001E952 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E956 B240                       		dc.w $B240
0001E958                            ; ---------------------------------------------------------------------------
0001E958                            ; Pattern load cues - SYZ animals
0001E958                            ; ---------------------------------------------------------------------------
0001E958 0001                       PLC_SYZAnimals:	dc.w 1
0001E95A 0000 0000                  		dc.l Nem_Pig		; pig
0001E95E B000                       		dc.w $B000
0001E960 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E964 B240                       		dc.w $B240
0001E966                            ; ---------------------------------------------------------------------------
0001E966                            ; Pattern load cues - SBZ animals
0001E966                            ; ---------------------------------------------------------------------------
0001E966 0001                       PLC_SBZAnimals:	dc.w 1
0001E968 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E96C B000                       		dc.w $B000
0001E96E 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E972 B240                       		dc.w $B240
0001E974                            ; ---------------------------------------------------------------------------
0001E974                            ; Pattern load cues - special stage results screen
0001E974                            ; ---------------------------------------------------------------------------
0001E974 0001                       PLC_SpeStResult:dc.w 1
0001E976 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E97A A820                       		dc.w $A820
0001E97C 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E980 AA20                       		dc.w $AA20
0001E982                            ; ---------------------------------------------------------------------------
0001E982                            ; Pattern load cues - ending sequence
0001E982                            ; ---------------------------------------------------------------------------
0001E982 000E                       PLC_Ending:	dc.w $E
0001E984 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E988 0000                       		dc.w 0
0001E98A 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E98E 39A0                       		dc.w $39A0
0001E990 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E994 6B00                       		dc.w $6B00
0001E996 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E99A 7400                       		dc.w $7400
0001E99C 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E9A0 78A0                       		dc.w $78A0
0001E9A2 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E9A6 7C20                       		dc.w $7C20
0001E9A8 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E9AC A480                       		dc.w $A480
0001E9AE 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E9B2 AA60                       		dc.w $AA60
0001E9B4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E9B8 ACA0                       		dc.w $ACA0
0001E9BA 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E9BE AE60                       		dc.w $AE60
0001E9C0 0000 0000                  		dc.l Nem_Seal		; seal
0001E9C4 B0A0                       		dc.w $B0A0
0001E9C6 0000 0000                  		dc.l Nem_Pig		; pig
0001E9CA B260                       		dc.w $B260
0001E9CC 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E9D0 B4A0                       		dc.w $B4A0
0001E9D2 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E9D6 B660                       		dc.w $B660
0001E9D8 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E9DC B8A0                       		dc.w $B8A0
0001E9DE                            ; ---------------------------------------------------------------------------
0001E9DE                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E9DE                            ; ---------------------------------------------------------------------------
0001E9DE 0002                       PLC_TryAgain:	dc.w 2
0001E9E0 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E9E4 78A0                       		dc.w $78A0
0001E9E6 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E9EA 7C20                       		dc.w $7C20
0001E9EC 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E9F0 B400                       		dc.w $B400
0001E9F2                            ; ---------------------------------------------------------------------------
0001E9F2                            ; Pattern load cues - Eggman on SBZ 2
0001E9F2                            ; ---------------------------------------------------------------------------
0001E9F2 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E9F4 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E9F8 A300                       		dc.w $A300
0001E9FA 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E9FE 8000                       		dc.w $8000
0001EA00 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001EA04 9400                       		dc.w $9400
0001EA06                            ; ---------------------------------------------------------------------------
0001EA06                            ; Pattern load cues - final boss
0001EA06                            ; ---------------------------------------------------------------------------
0001EA06 0004                       PLC_FZBoss:	dc.w 4
0001EA08 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001EA0C 7400                       		dc.w $7400
0001EA0E 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001EA12 6000                       		dc.w $6000
0001EA14 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001EA18 8000                       		dc.w $8000
0001EA1A 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001EA1E 8E00                       		dc.w $8E00
0001EA20 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001EA24 A540                       		dc.w $A540
0001EA26                            ; ---------------------------------------------------------------------------
0001EA26                            ; Pattern load cues - Teto boss
0001EA26                            ; ---------------------------------------------------------------------------
0001EA26 0002                       PLC_TetoBoss:	dc.w 2
0001EA28 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001EA2C 8000                       		dc.w $8000
0001EA2E 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001EA32 93A0                       		dc.w $93A0
0001EA34 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001EA38 9000                       		dc.w $9000
0001EA3A                            		even
0001EA3A                            		even
0001EA3A                            
0001EA3A                            		incbin	misc\padding.bin
0001EB28                            		even
0001EB28                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001EF7E                            		even
0001EF7E                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001F016                            		even
0001F016                            Nem_Gomer:	incbin	artnem\gomer.bin
0001F158                            		even
0001F158                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001F1A6                            		even
0001F1A6                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001F2BA                            		even
0001F2BA                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
00020184                            		even
00020184                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
0002428A                            		even
0002428A                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
000242BE                            		even
000242BE                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
0002437C                            		even
0002437C                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024824                            		even
00024824                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00024882                            		even
00024882                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00025488                            		even
00025488                            ; ---------------------------------------------------------------------------
00025488                            ; Sprite mappings - Sonic
00025488                            ; ---------------------------------------------------------------------------
00025488                            Map_Sonic:
00025488                            	include "_maps\Sonic.asm"
00025488                            Map_a933:
00025488 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
0002548A 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
0002548C 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
0002548E 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
00025490 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
00025492 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
00025494 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
00025496 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
00025498 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
0002549A 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
0002549C 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
0002549E 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
000254A0 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
000254A2 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
000254A4 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
000254A6 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
000254A8 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
000254AA 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
000254AC 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
000254AE 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
000254B0 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
000254B2 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
000254B4 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
000254B6 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
000254B8 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
000254BA 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
000254BC 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
000254BE 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
000254C0 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
000254C2 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
000254C4 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
000254C6 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
000254C8 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
000254CA 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
000254CC 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
000254CE 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
000254D0 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
000254D2 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
000254D4 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
000254D6 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
000254D8 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
000254DA 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
000254DC 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
000254DE 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
000254E0 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
000254E2 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
000254E4 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
000254E6 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
000254E8 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
000254EA 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
000254EC 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
000254EE 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
000254F0 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
000254F2 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
000254F4 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
000254F6 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
000254F8 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
000254FA 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
000254FC 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
000254FE 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
00025500 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
00025502 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
00025504 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
00025506 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
00025508 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
0002550A 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
0002550C 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
0002550E 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
00025510 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
00025512 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
00025514 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
00025516 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
00025518 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
0002551A 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
0002551C 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
0002551E 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
00025520 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
00025522 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
00025524 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
00025526 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
00025528 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
0002552A 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
0002552C 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
0002552E 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
00025530 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
00025532 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
00025534 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
00025536 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
00025538 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
0002553A 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
0002553C 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
0002553E 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
00025540 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
00025542 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
00025544 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
00025546 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
00025548 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
0002554A 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
0002554C 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
0002554E 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
00025550 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
00025552 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
00025554 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
00025556 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
00025558 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
0002555A 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
0002555C 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
0002555E 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
00025560 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
00025562 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
00025564 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
00025566 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
00025568 00                         Map_a933_E0: 	dc.b $0
00025569 02                         Map_a933_E1: 	dc.b $2
0002556A ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
0002556F 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00025574 03                         Map_a933_EC: 	dc.b $3
00025575 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002557A FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
0002557F 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00025584 03                         Map_a933_FC: 	dc.b $3
00025585 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002558A FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
0002558F 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00025594 03                         Map_a933_10C: 	dc.b $3
00025595 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002559A FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
0002559F 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000255A4 03                         Map_a933_11C: 	dc.b $3
000255A5 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000255AA 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
000255AF 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000255B4 04                         Map_a933_12C: 	dc.b $4
000255B5 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
000255BA FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
000255BF FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
000255C4 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
000255C9 02                         Map_a933_141: 	dc.b $2
000255CA EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
000255CF FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
000255D4 02                         Map_a933_14C: 	dc.b $2
000255D5 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
000255DA FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
000255DF 04                         Map_a933_157: 	dc.b $4
000255E0 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000255E5 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
000255EA FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
000255EF 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
000255F4 02                         Map_a933_16C: 	dc.b $2
000255F5 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
000255FA EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
000255FF 03                         Map_a933_177: 	dc.b $3
00025600 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00025605 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
0002560A 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
0002560F 05                         Map_a933_187: 	dc.b $5
00025610 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025615 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
0002561A FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
0002561F 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00025624 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00025629 06                         Map_a933_1A1: 	dc.b $6
0002562A EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
0002562F EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025634 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00025639 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
0002563E FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00025643 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00025648 04                         Map_a933_1C0: 	dc.b $4
00025649 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
0002564E ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00025653 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00025658 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
0002565D 05                         Map_a933_1D5: 	dc.b $5
0002565E EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025663 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00025668 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
0002566D 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00025672 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00025677 04                         Map_a933_1EF: 	dc.b $4
00025678 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
0002567D EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025682 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00025687 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
0002568C 05                         Map_a933_204: 	dc.b $5
0002568D ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00025692 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00025697 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
0002569C FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
000256A1 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
000256A6 04                         Map_a933_21E: 	dc.b $4
000256A7 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
000256AC EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
000256B1 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
000256B6 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
000256BB 02                         Map_a933_233: 	dc.b $2
000256BC F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
000256C1 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
000256C6 02                         Map_a933_23E: 	dc.b $2
000256C7 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
000256CC F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
000256D1 04                         Map_a933_249: 	dc.b $4
000256D2 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
000256D7 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
000256DC FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
000256E1 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
000256E6 02                         Map_a933_25E: 	dc.b $2
000256E7 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
000256EC F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
000256F1 03                         Map_a933_269: 	dc.b $3
000256F2 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
000256F7 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
000256FC F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00025701 06                         Map_a933_279: 	dc.b $6
00025702 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00025707 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
0002570C F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00025711 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00025716 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
0002571B FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00025720 06                         Map_a933_298: 	dc.b $6
00025721 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025726 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
0002572B EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00025730 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00025735 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
0002573A 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
0002573F 04                         Map_a933_2B7: 	dc.b $4
00025740 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025745 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
0002574A EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
0002574F 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00025754 05                         Map_a933_2CC: 	dc.b $5
00025755 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002575A ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
0002575F F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00025764 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00025769 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
0002576E 04                         Map_a933_2E6: 	dc.b $4
0002576F FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025774 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00025779 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
0002577E 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00025783 05                         Map_a933_2FB: 	dc.b $5
00025784 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025789 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
0002578E F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00025793 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00025798 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
0002579D 02                         Map_a933_315: 	dc.b $2
0002579E EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000257A3 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000257A8 02                         Map_a933_320: 	dc.b $2
000257A9 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000257AE FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000257B3 02                         Map_a933_32B: 	dc.b $2
000257B4 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000257B9 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000257BE 02                         Map_a933_336: 	dc.b $2
000257BF EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000257C4 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000257C9 04                         Map_a933_341: 	dc.b $4
000257CA EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000257CF EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000257D4 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000257D9 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000257DE 03                         Map_a933_356: 	dc.b $3
000257DF EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000257E4 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000257E9 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000257EE 04                         Map_a933_366: 	dc.b $4
000257EF EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000257F4 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000257F9 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000257FE FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025803 03                         Map_a933_37B: 	dc.b $3
00025804 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025809 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002580E FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025813 02                         Map_a933_38B: 	dc.b $2
00025814 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025819 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002581E 02                         Map_a933_396: 	dc.b $2
0002581F F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025824 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025829 02                         Map_a933_3A1: 	dc.b $2
0002582A F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002582F F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025834 02                         Map_a933_3AC: 	dc.b $2
00025835 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002583A F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002583F 04                         Map_a933_3B7: 	dc.b $4
00025840 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025845 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002584A EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002584F 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025854 02                         Map_a933_3CC: 	dc.b $2
00025855 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002585A EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002585F 04                         Map_a933_3D7: 	dc.b $4
00025860 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025865 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002586A EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002586F 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025874 02                         Map_a933_3EC: 	dc.b $2
00025875 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002587A EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002587F 01                         Map_a933_3F7: 	dc.b $1
00025880 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025885 01                         Map_a933_3FD: 	dc.b $1
00025886 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002588B 01                         Map_a933_403: 	dc.b $1
0002588C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025891 01                         Map_a933_409: 	dc.b $1
00025892 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025897 01                         Map_a933_40F: 	dc.b $1
00025898 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002589D 02                         Map_a933_415: 	dc.b $2
0002589E F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000258A3 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000258A8 01                         Map_a933_420: 	dc.b $1
000258A9 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000258AE 02                         Map_a933_426: 	dc.b $2
000258AF EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000258B4 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000258B9 01                         Map_a933_431: 	dc.b $1
000258BA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000258BF 02                         Map_a933_437: 	dc.b $2
000258C0 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000258C5 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000258CA 04                         Map_a933_442: 	dc.b $4
000258CB ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000258D0 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000258D5 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000258DA 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000258DF 06                         Map_a933_457: 	dc.b $6
000258E0 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
000258E5 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
000258EA 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
000258EF 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
000258F4 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
000258F9 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
000258FE 02                         Map_a933_476: 	dc.b $2
000258FF 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00025904 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
00025909 02                         Map_a933_481: 	dc.b $2
0002590A 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
0002590F EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00025914 04                         Map_a933_48C: 	dc.b $4
00025915 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002591A F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002591F 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025924 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025929 02                         Map_a933_4A1: 	dc.b $2
0002592A F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
0002592F F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025934 03                         Map_a933_4AC: 	dc.b $3
00025935 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
0002593A FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
0002593F 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025944 04                         Map_a933_4BC: 	dc.b $4
00025945 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002594A F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002594F 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00025954 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025959 02                         Map_a933_4D1: 	dc.b $2
0002595A EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
0002595F 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
00025964 04                         Map_a933_4DC: 	dc.b $4
00025965 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002596A 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002596F F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025974 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025979 04                         Map_a933_4F1: 	dc.b $4
0002597A F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002597F 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025984 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025989 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002598E 05                         Map_a933_506: 	dc.b $5
0002598F E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025994 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00025999 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002599E 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000259A3 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000259A8 05                         Map_a933_520: 	dc.b $5
000259A9 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000259AE E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000259B3 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000259B8 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000259BD 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000259C2 02                         Map_a933_53A: 	dc.b $2
000259C3 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000259C8 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000259CD 03                         Map_a933_545: 	dc.b $3
000259CE EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000259D3 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000259D8 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000259DD 02                         Map_a933_555: 	dc.b $2
000259DE ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000259E3 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000259E8 03                         Map_a933_560: 	dc.b $3
000259E9 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000259EE 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000259F3 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000259F8 02                         Map_a933_570: 	dc.b $2
000259F9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000259FE FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00025A03 03                         Map_a933_57B: 	dc.b $3
00025A04 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00025A09 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00025A0E E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00025A13 03                         Map_a933_58B: 	dc.b $3
00025A14 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025A19 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025A1E F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025A23 05                         Map_a933_59B: 	dc.b $5
00025A24 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025A29 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025A2E F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025A33 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025A38 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025A3D 05                         Map_a933_5B5: 	dc.b $5
00025A3E E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025A43 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025A48 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025A4D 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025A52 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025A57 02                         Map_a933_5CF: 	dc.b $2
00025A58 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025A5D F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025A62 03                         Map_a933_5DA: 	dc.b $3
00025A63 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025A68 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00025A6D 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025A72 01                         Map_a933_5EA: 	dc.b $1
00025A73 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00025A78 01                         Map_a933_5F0: 	dc.b $1
00025A79 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00025A7E 01                         Map_a933_5F6: 	dc.b $1
00025A7F F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00025A84 04                         Map_a933_5FC: 	dc.b $4
00025A85 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00025A8A F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00025A8F 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
00025A94 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
00025A99 03                         Map_a933_611: 	dc.b $3
00025A9A F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00025A9F FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
00025AA4 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00025AA9 03                         Map_a933_621: 	dc.b $3
00025AAA F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00025AAF F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00025AB4 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00025AB9 03                         Map_a933_631: 	dc.b $3
00025ABA EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025ABF FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00025AC4 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00025AC9 02                         Map_a933_641: 	dc.b $2
00025ACA F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00025ACF F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00025AD4 02                         Map_a933_64C: 	dc.b $2
00025AD5 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025ADA EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025ADF 03                         Map_a933_657: 	dc.b $3
00025AE0 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
00025AE5 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
00025AEA 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00025AEF 02                         Map_a933_667: 	dc.b $2
00025AF0 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
00025AF5 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
00025AFA 04                         Map_a933_672: 	dc.b $4
00025AFB ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00025B00 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
00025B05 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
00025B0A 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00025B0F 00                         Map_a933_687: 	dc.b $0
00025B10 00                         Map_a933_688: 	dc.b $0
00025B11 00                         Map_a933_689: 	dc.b $0
00025B12 00                         Map_a933_68A: 	dc.b $0
00025B13 02                         Map_a933_68B: 	dc.b $2
00025B14 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025B19 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025B1E 00                         Map_a933_696: 	dc.b $0
00025B1F 02                         Map_a933_697: 	dc.b $2
00025B20 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025B25 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025B2A 00                         Map_a933_6A2: 	dc.b $0
00025B2B 00                         Map_a933_6A3: 	dc.b $0
00025B2C 00                         Map_a933_6A4: 	dc.b $0
00025B2D 02                         Map_a933_6A5: 	dc.b $2
00025B2E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025B33 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025B38 00                         Map_a933_6B0: 	dc.b $0
00025B39 02                         Map_a933_6B1: 	dc.b $2
00025B3A F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025B3F EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025B44 00                         Map_a933_6BC: 	dc.b $0
00025B45 00                         Map_a933_6BD: 	dc.b $0
00025B46 00                         Map_a933_6BE: 	dc.b $0
00025B47 02                         Map_a933_6BF: 	dc.b $2
00025B48 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025B4D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025B52 00                         Map_a933_6CA: 	dc.b $0
00025B53 02                         Map_a933_6CB: 	dc.b $2
00025B54 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025B59 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025B5E 00                         Map_a933_6D6: 	dc.b $0
00025B60 00                         	even
00025B60 00                         	even
00025B60                            
00025B60                            ; ---------------------------------------------------------------------------
00025B60                            ; Uncompressed graphics	loading	array for Sonic
00025B60                            ; ---------------------------------------------------------------------------
00025B60                            SonicDynPLC:
00025B60                            	include "_inc\Sonic dynamic pattern load cues.asm"
00025B60                            DPLC_33c5:
00025B60 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
00025B62 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
00025B64 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
00025B66 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
00025B68 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
00025B6A 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
00025B6C 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
00025B6E 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
00025B70 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
00025B72 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
00025B74 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
00025B76 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
00025B78 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
00025B7A 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
00025B7C 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
00025B7E 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
00025B80 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
00025B82 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
00025B84 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
00025B86 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
00025B88 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
00025B8A 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
00025B8C 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
00025B8E 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
00025B90 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
00025B92 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
00025B94 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
00025B96 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
00025B98 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
00025B9A 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
00025B9C 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
00025B9E 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
00025BA0 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
00025BA2 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
00025BA4 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
00025BA6 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
00025BA8 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
00025BAA 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
00025BAC 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
00025BAE 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
00025BB0 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
00025BB2 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
00025BB4 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
00025BB6 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
00025BB8 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
00025BBA 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
00025BBC 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
00025BBE 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
00025BC0 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
00025BC2 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
00025BC4 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
00025BC6 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
00025BC8 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
00025BCA 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
00025BCC 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
00025BCE 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
00025BD0 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
00025BD2 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
00025BD4 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
00025BD6 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
00025BD8 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
00025BDA 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
00025BDC 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
00025BDE 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
00025BE0 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
00025BE2 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
00025BE4 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
00025BE6 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
00025BE8 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
00025BEA 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
00025BEC 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
00025BEE 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
00025BF0 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
00025BF2 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
00025BF4 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
00025BF6 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
00025BF8 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
00025BFA 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
00025BFC 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
00025BFE 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
00025C00 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
00025C02 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
00025C04 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
00025C06 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
00025C08 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
00025C0A 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
00025C0C 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
00025C0E 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
00025C10 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
00025C12 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
00025C14 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
00025C16 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
00025C18 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
00025C1A 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
00025C1C 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
00025C1E 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
00025C20 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
00025C22 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
00025C24 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
00025C26 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
00025C28 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
00025C2A 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
00025C2C 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
00025C2E 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
00025C30 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
00025C32 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
00025C34 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
00025C36 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
00025C38 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
00025C3A 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
00025C3C 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
00025C3E 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
00025C40 00                         DPLC_33c5_E0: 	dc.b $0
00025C41 02                         DPLC_33c5_E1: 	dc.b $2
00025C42 F000                       	dc.b $F0, $0
00025C44 1010                       	dc.b $10, $10
00025C46 03                         DPLC_33c5_E6: 	dc.b $3
00025C47 5012                       	dc.b $50, $12
00025C49 5018                       	dc.b $50, $18
00025C4B 201E                       	dc.b $20, $1E
00025C4D 03                         DPLC_33c5_ED: 	dc.b $3
00025C4E 5021                       	dc.b $50, $21
00025C50 5018                       	dc.b $50, $18
00025C52 201E                       	dc.b $20, $1E
00025C54 03                         DPLC_33c5_F4: 	dc.b $3
00025C55 5021                       	dc.b $50, $21
00025C57 5018                       	dc.b $50, $18
00025C59 2027                       	dc.b $20, $27
00025C5B 03                         DPLC_33c5_FB: 	dc.b $3
00025C5C 802A                       	dc.b $80, $2A
00025C5E 2033                       	dc.b $20, $33
00025C60 2036                       	dc.b $20, $36
00025C62 04                         DPLC_33c5_102: 	dc.b $4
00025C63 7039                       	dc.b $70, $39
00025C65 5041                       	dc.b $50, $41
00025C67 5047                       	dc.b $50, $47
00025C69 104D                       	dc.b $10, $4D
00025C6B 02                         DPLC_33c5_10B: 	dc.b $2
00025C6C 7039                       	dc.b $70, $39
00025C6E B04F                       	dc.b $B0, $4F
00025C70 02                         DPLC_33c5_110: 	dc.b $2
00025C71 505B                       	dc.b $50, $5B
00025C73 8061                       	dc.b $80, $61
00025C75 04                         DPLC_33c5_115: 	dc.b $4
00025C76 505B                       	dc.b $50, $5B
00025C78 506A                       	dc.b $50, $6A
00025C7A 5070                       	dc.b $50, $70
00025C7C 1076                       	dc.b $10, $76
00025C7E 02                         DPLC_33c5_11E: 	dc.b $2
00025C7F F4F0                       	dc.b $F4, $F0
00025C81 1500                       	dc.b $15, $0
00025C83 03                         DPLC_33c5_123: 	dc.b $3
00025C84 7039                       	dc.b $70, $39
00025C86 3078                       	dc.b $30, $78
00025C88 507C                       	dc.b $50, $7C
00025C8A 05                         DPLC_33c5_12A: 	dc.b $5
00025C8B 5082                       	dc.b $50, $82
00025C8D 5088                       	dc.b $50, $88
00025C8F 208E                       	dc.b $20, $8E
00025C91 5091                       	dc.b $50, $91
00025C93 0097                       	dc.b $0, $97
00025C95 06                         DPLC_33c5_135: 	dc.b $6
00025C96 5082                       	dc.b $50, $82
00025C98 1098                       	dc.b $10, $98
00025C9A 309A                       	dc.b $30, $9A
00025C9C 509E                       	dc.b $50, $9E
00025C9E 30A4                       	dc.b $30, $A4
00025CA0 00A8                       	dc.b $0, $A8
00025CA2 04                         DPLC_33c5_142: 	dc.b $4
00025CA3 50A9                       	dc.b $50, $A9
00025CA5 10AF                       	dc.b $10, $AF
00025CA7 70B1                       	dc.b $70, $B1
00025CA9 20B9                       	dc.b $20, $B9
00025CAB 05                         DPLC_33c5_14B: 	dc.b $5
00025CAC 50BC                       	dc.b $50, $BC
00025CAE 30C2                       	dc.b $30, $C2
00025CB0 70C6                       	dc.b $70, $C6
00025CB2 20CE                       	dc.b $20, $CE
00025CB4 10D1                       	dc.b $10, $D1
00025CB6 04                         DPLC_33c5_156: 	dc.b $4
00025CB7 50BC                       	dc.b $50, $BC
00025CB9 10D3                       	dc.b $10, $D3
00025CBB 70D5                       	dc.b $70, $D5
00025CBD 20DD                       	dc.b $20, $DD
00025CBF 05                         DPLC_33c5_15F: 	dc.b $5
00025CC0 5082                       	dc.b $50, $82
00025CC2 1098                       	dc.b $10, $98
00025CC4 008E                       	dc.b $0, $8E
00025CC6 70E0                       	dc.b $70, $E0
00025CC8 20E8                       	dc.b $20, $E8
00025CCA 04                         DPLC_33c5_16A: 	dc.b $4
00025CCB 70EB                       	dc.b $70, $EB
00025CCD 50F3                       	dc.b $50, $F3
00025CCF 10F9                       	dc.b $10, $F9
00025CD1 50FB                       	dc.b $50, $FB
00025CD3 02                         DPLC_33c5_173: 	dc.b $2
00025CD4 70EB                       	dc.b $70, $EB
00025CD6 B101                       	dc.b $B1, $1
00025CD8 02                         DPLC_33c5_178: 	dc.b $2
00025CD9 510D                       	dc.b $51, $D
00025CDB 8113                       	dc.b $81, $13
00025CDD 04                         DPLC_33c5_17D: 	dc.b $4
00025CDE 510D                       	dc.b $51, $D
00025CE0 511C                       	dc.b $51, $1C
00025CE2 1122                       	dc.b $11, $22
00025CE4 5124                       	dc.b $51, $24
00025CE6 02                         DPLC_33c5_186: 	dc.b $2
00025CE7 510D                       	dc.b $51, $D
00025CE9 B12A                       	dc.b $B1, $2A
00025CEB 03                         DPLC_33c5_18B: 	dc.b $3
00025CEC 70EB                       	dc.b $70, $EB
00025CEE 0101                       	dc.b $1, $1
00025CF0 8136                       	dc.b $81, $36
00025CF2 06                         DPLC_33c5_192: 	dc.b $6
00025CF3 513F                       	dc.b $51, $3F
00025CF5 1145                       	dc.b $11, $45
00025CF7 1147                       	dc.b $11, $47
00025CF9 8149                       	dc.b $81, $49
00025CFB 0152                       	dc.b $1, $52
00025CFD 0153                       	dc.b $1, $53
00025CFF 06                         DPLC_33c5_19F: 	dc.b $6
00025D00 513F                       	dc.b $51, $3F
00025D02 2154                       	dc.b $21, $54
00025D04 1157                       	dc.b $11, $57
00025D06 1159                       	dc.b $11, $59
00025D08 815B                       	dc.b $81, $5B
00025D0A 0152                       	dc.b $1, $52
00025D0C 04                         DPLC_33c5_1AC: 	dc.b $4
00025D0D 5164                       	dc.b $51, $64
00025D0F 116A                       	dc.b $11, $6A
00025D11 816C                       	dc.b $81, $6C
00025D13 1175                       	dc.b $11, $75
00025D15 05                         DPLC_33c5_1B5: 	dc.b $5
00025D16 5177                       	dc.b $51, $77
00025D18 217D                       	dc.b $21, $7D
00025D1A 1180                       	dc.b $11, $80
00025D1C 7182                       	dc.b $71, $82
00025D1E 218A                       	dc.b $21, $8A
00025D20 04                         DPLC_33c5_1C0: 	dc.b $4
00025D21 5177                       	dc.b $51, $77
00025D23 118D                       	dc.b $11, $8D
00025D25 818F                       	dc.b $81, $8F
00025D27 1198                       	dc.b $11, $98
00025D29 05                         DPLC_33c5_1C9: 	dc.b $5
00025D2A 513F                       	dc.b $51, $3F
00025D2C 819A                       	dc.b $81, $9A
00025D2E 1159                       	dc.b $11, $59
00025D30 11A3                       	dc.b $11, $A3
00025D32 0152                       	dc.b $1, $52
00025D34 02                         DPLC_33c5_1D4: 	dc.b $2
00025D35 51A5                       	dc.b $51, $A5
00025D37 B1AB                       	dc.b $B1, $AB
00025D39 02                         DPLC_33c5_1D9: 	dc.b $2
00025D3A 505B                       	dc.b $50, $5B
00025D3C B1B7                       	dc.b $B1, $B7
00025D3E 02                         DPLC_33c5_1DE: 	dc.b $2
00025D3F 51A5                       	dc.b $51, $A5
00025D41 B1C3                       	dc.b $B1, $C3
00025D43 02                         DPLC_33c5_1E3: 	dc.b $2
00025D44 505B                       	dc.b $50, $5B
00025D46 B1CF                       	dc.b $B1, $CF
00025D48 04                         DPLC_33c5_1E8: 	dc.b $4
00025D49 51DB                       	dc.b $51, $DB
00025D4B 11E1                       	dc.b $11, $E1
00025D4D B1E3                       	dc.b $B1, $E3
00025D4F 01EF                       	dc.b $1, $EF
00025D51 03                         DPLC_33c5_1F1: 	dc.b $3
00025D52 51F0                       	dc.b $51, $F0
00025D54 11F6                       	dc.b $11, $F6
00025D56 B1F8                       	dc.b $B1, $F8
00025D58 04                         DPLC_33c5_1F8: 	dc.b $4
00025D59 51DB                       	dc.b $51, $DB
00025D5B 1204                       	dc.b $12, $4
00025D5D B206                       	dc.b $B2, $6
00025D5F 01EF                       	dc.b $1, $EF
00025D61 03                         DPLC_33c5_201: 	dc.b $3
00025D62 51F0                       	dc.b $51, $F0
00025D64 11F6                       	dc.b $11, $F6
00025D66 B212                       	dc.b $B2, $12
00025D68 02                         DPLC_33c5_208: 	dc.b $2
00025D69 521E                       	dc.b $52, $1E
00025D6B B224                       	dc.b $B2, $24
00025D6D 02                         DPLC_33c5_20D: 	dc.b $2
00025D6E 510D                       	dc.b $51, $D
00025D70 B230                       	dc.b $B2, $30
00025D72 02                         DPLC_33c5_212: 	dc.b $2
00025D73 521E                       	dc.b $52, $1E
00025D75 B23C                       	dc.b $B2, $3C
00025D77 02                         DPLC_33c5_217: 	dc.b $2
00025D78 510D                       	dc.b $51, $D
00025D7A B248                       	dc.b $B2, $48
00025D7C 04                         DPLC_33c5_21C: 	dc.b $4
00025D7D 5254                       	dc.b $52, $54
00025D7F 125A                       	dc.b $12, $5A
00025D81 B25C                       	dc.b $B2, $5C
00025D83 0268                       	dc.b $2, $68
00025D85 02                         DPLC_33c5_225: 	dc.b $2
00025D86 7269                       	dc.b $72, $69
00025D88 B271                       	dc.b $B2, $71
00025D8A 04                         DPLC_33c5_22A: 	dc.b $4
00025D8B 5254                       	dc.b $52, $54
00025D8D 127D                       	dc.b $12, $7D
00025D8F B27F                       	dc.b $B2, $7F
00025D91 0268                       	dc.b $2, $68
00025D93 02                         DPLC_33c5_233: 	dc.b $2
00025D94 7269                       	dc.b $72, $69
00025D96 B28B                       	dc.b $B2, $8B
00025D98 01                         DPLC_33c5_238: 	dc.b $1
00025D99 F297                       	dc.b $F2, $97
00025D9B 01                         DPLC_33c5_23B: 	dc.b $1
00025D9C F2A7                       	dc.b $F2, $A7
00025D9E 01                         DPLC_33c5_23E: 	dc.b $1
00025D9F F2B7                       	dc.b $F2, $B7
00025DA1 01                         DPLC_33c5_241: 	dc.b $1
00025DA2 F2C7                       	dc.b $F2, $C7
00025DA4 01                         DPLC_33c5_244: 	dc.b $1
00025DA5 F2D7                       	dc.b $F2, $D7
00025DA7 02                         DPLC_33c5_247: 	dc.b $2
00025DA8 B2E7                       	dc.b $B2, $E7
00025DAA 22F3                       	dc.b $22, $F3
00025DAC 01                         DPLC_33c5_24C: 	dc.b $1
00025DAD F2F6                       	dc.b $F2, $F6
00025DAF 02                         DPLC_33c5_24F: 	dc.b $2
00025DB0 B306                       	dc.b $B3, $6
00025DB2 2312                       	dc.b $23, $12
00025DB4 01                         DPLC_33c5_254: 	dc.b $1
00025DB5 F315                       	dc.b $F3, $15
00025DB7 02                         DPLC_33c5_257: 	dc.b $2
00025DB8 5325                       	dc.b $53, $25
00025DBA B32B                       	dc.b $B3, $2B
00025DBC 04                         DPLC_33c5_25C: 	dc.b $4
00025DBD 5337                       	dc.b $53, $37
00025DBF 733D                       	dc.b $73, $3D
00025DC1 1345                       	dc.b $13, $45
00025DC3 0347                       	dc.b $3, $47
00025DC5 02                         DPLC_33c5_265: 	dc.b $2
00025DC6 D348                       	dc.b $D3, $48
00025DC8 34EC                       	dc.b $34, $EC
00025DCA 02                         DPLC_33c5_26A: 	dc.b $2
00025DCB F528                       	dc.b $F5, $28
00025DCD 0538                       	dc.b $5, $38
00025DCF 02                         DPLC_33c5_26F: 	dc.b $2
00025DD0 F539                       	dc.b $F5, $39
00025DD2 0549                       	dc.b $5, $49
00025DD4 02                         DPLC_33c5_274: 	dc.b $2
00025DD5 E356                       	dc.b $E3, $56
00025DD7 054A                       	dc.b $5, $4A
00025DD9 01                         DPLC_33c5_279: 	dc.b $1
00025DDA 8365                       	dc.b $83, $65
00025DDC 03                         DPLC_33c5_27C: 	dc.b $3
00025DDD 736E                       	dc.b $73, $6E
00025DDF 0376                       	dc.b $3, $76
00025DE1 3377                       	dc.b $33, $77
00025DE3 02                         DPLC_33c5_283: 	dc.b $2
00025DE4 E37B                       	dc.b $E3, $7B
00025DE6 054A                       	dc.b $5, $4A
00025DE8 01                         DPLC_33c5_288: 	dc.b $1
00025DE9 D561                       	dc.b $D5, $61
00025DEB 04                         DPLC_33c5_28B: 	dc.b $4
00025DEC B399                       	dc.b $B3, $99
00025DEE 33A5                       	dc.b $33, $A5
00025DF0 03A9                       	dc.b $3, $A9
00025DF2 03AA                       	dc.b $3, $AA
00025DF4 04                         DPLC_33c5_294: 	dc.b $4
00025DF5 B3AB                       	dc.b $B3, $AB
00025DF7 33B7                       	dc.b $33, $B7
00025DF9 03BB                       	dc.b $3, $BB
00025DFB 03BC                       	dc.b $3, $BC
00025DFD 05                         DPLC_33c5_29D: 	dc.b $5
00025DFE 83BD                       	dc.b $83, $BD
00025E00 13C6                       	dc.b $13, $C6
00025E02 53C8                       	dc.b $53, $C8
00025E04 13CE                       	dc.b $13, $CE
00025E06 03D0                       	dc.b $3, $D0
00025E08 05                         DPLC_33c5_2A8: 	dc.b $5
00025E09 83D1                       	dc.b $83, $D1
00025E0B 13DA                       	dc.b $13, $DA
00025E0D 53C8                       	dc.b $53, $C8
00025E0F 13CE                       	dc.b $13, $CE
00025E11 03D0                       	dc.b $3, $D0
00025E13 02                         DPLC_33c5_2B3: 	dc.b $2
00025E14 83DC                       	dc.b $83, $DC
00025E16 73E5                       	dc.b $73, $E5
00025E18 03                         DPLC_33c5_2B8: 	dc.b $3
00025E19 83ED                       	dc.b $83, $ED
00025E1B 23F6                       	dc.b $23, $F6
00025E1D 13F9                       	dc.b $13, $F9
00025E1F 02                         DPLC_33c5_2BF: 	dc.b $2
00025E20 83FB                       	dc.b $83, $FB
00025E22 7404                       	dc.b $74, $4
00025E24 03                         DPLC_33c5_2C4: 	dc.b $3
00025E25 83ED                       	dc.b $83, $ED
00025E27 240C                       	dc.b $24, $C
00025E29 140F                       	dc.b $14, $F
00025E2B 02                         DPLC_33c5_2CB: 	dc.b $2
00025E2C 5411                       	dc.b $54, $11
00025E2E B417                       	dc.b $B4, $17
00025E30 03                         DPLC_33c5_2D0: 	dc.b $3
00025E31 8423                       	dc.b $84, $23
00025E33 342C                       	dc.b $34, $2C
00025E35 0430                       	dc.b $4, $30
00025E37 03                         DPLC_33c5_2D7: 	dc.b $3
00025E38 7431                       	dc.b $74, $31
00025E3A 1439                       	dc.b $14, $39
00025E3C B43B                       	dc.b $B4, $3B
00025E3E 05                         DPLC_33c5_2DE: 	dc.b $5
00025E3F 7447                       	dc.b $74, $47
00025E41 144F                       	dc.b $14, $4F
00025E43 5451                       	dc.b $54, $51
00025E45 3457                       	dc.b $34, $57
00025E47 045B                       	dc.b $4, $5B
00025E49 05                         DPLC_33c5_2E9: 	dc.b $5
00025E4A 745C                       	dc.b $74, $5C
00025E4C 144F                       	dc.b $14, $4F
00025E4E 5464                       	dc.b $54, $64
00025E50 3457                       	dc.b $34, $57
00025E52 045B                       	dc.b $4, $5B
00025E54 02                         DPLC_33c5_2F4: 	dc.b $2
00025E55 246A                       	dc.b $24, $6A
00025E57 F46D                       	dc.b $F4, $6D
00025E59 03                         DPLC_33c5_2F9: 	dc.b $3
00025E5A 247D                       	dc.b $24, $7D
00025E5C B480                       	dc.b $B4, $80
00025E5E 248C                       	dc.b $24, $8C
00025E60 01                         DPLC_33c5_300: 	dc.b $1
00025E61 B48F                       	dc.b $B4, $8F
00025E63 01                         DPLC_33c5_303: 	dc.b $1
00025E64 549B                       	dc.b $54, $9B
00025E66 01                         DPLC_33c5_306: 	dc.b $1
00025E67 14A1                       	dc.b $14, $A1
00025E69 02                         DPLC_33c5_309: 	dc.b $2
00025E6A E356                       	dc.b $E3, $56
00025E6C 054A                       	dc.b $5, $4A
00025E6E 03                         DPLC_33c5_30E: 	dc.b $3
00025E6F 736E                       	dc.b $73, $6E
00025E71 0376                       	dc.b $3, $76
00025E73 3377                       	dc.b $33, $77
00025E75 03                         DPLC_33c5_315: 	dc.b $3
00025E76 B4A3                       	dc.b $B4, $A3
00025E78 14AF                       	dc.b $14, $AF
00025E7A 34B1                       	dc.b $34, $B1
00025E7C 03                         DPLC_33c5_31C: 	dc.b $3
00025E7D 54B5                       	dc.b $54, $B5
00025E7F B4BB                       	dc.b $B4, $BB
00025E81 1074                       	dc.b $10, $74
00025E83 02                         DPLC_33c5_323: 	dc.b $2
00025E84 F4C7                       	dc.b $F4, $C7
00025E86 24D7                       	dc.b $24, $D7
00025E88 02                         DPLC_33c5_328: 	dc.b $2
00025E89 F4DA                       	dc.b $F4, $DA
00025E8B 14EA                       	dc.b $14, $EA
00025E8D 02                         DPLC_33c5_32D: 	dc.b $2
00025E8E F502                       	dc.b $F5, $2
00025E90 2512                       	dc.b $25, $12
00025E92 02                         DPLC_33c5_332: 	dc.b $2
00025E93 F515                       	dc.b $F5, $15
00025E95 2525                       	dc.b $25, $25
00025E97 02                         DPLC_33c5_337: 	dc.b $2
00025E98 F54B                       	dc.b $F5, $4B
00025E9A 755B                       	dc.b $75, $5B
00025E9C 00                         DPLC_33c5_33C: 	dc.b $0
00025E9D 00                         DPLC_33c5_33D: 	dc.b $0
00025E9E 00                         DPLC_33c5_33E: 	dc.b $0
00025E9F 00                         DPLC_33c5_33F: 	dc.b $0
00025EA0 02                         DPLC_33c5_340: 	dc.b $2
00025EA1 F4DA                       	dc.b $F4, $DA
00025EA3 14EA                       	dc.b $14, $EA
00025EA5 00                         DPLC_33c5_345: 	dc.b $0
00025EA6 02                         DPLC_33c5_346: 	dc.b $2
00025EA7 F4DA                       	dc.b $F4, $DA
00025EA9 14EA                       	dc.b $14, $EA
00025EAB 00                         DPLC_33c5_34B: 	dc.b $0
00025EAC 00                         DPLC_33c5_34C: 	dc.b $0
00025EAD 00                         DPLC_33c5_34D: 	dc.b $0
00025EAE 02                         DPLC_33c5_34E: 	dc.b $2
00025EAF F4DA                       	dc.b $F4, $DA
00025EB1 14EA                       	dc.b $14, $EA
00025EB3 00                         DPLC_33c5_353: 	dc.b $0
00025EB4 02                         DPLC_33c5_354: 	dc.b $2
00025EB5 F4DA                       	dc.b $F4, $DA
00025EB7 14EA                       	dc.b $14, $EA
00025EB9 00                         DPLC_33c5_359: 	dc.b $0
00025EBA 00                         DPLC_33c5_35A: 	dc.b $0
00025EBB 00                         DPLC_33c5_35B: 	dc.b $0
00025EBC 02                         DPLC_33c5_35C: 	dc.b $2
00025EBD F4DA                       	dc.b $F4, $DA
00025EBF 14EA                       	dc.b $14, $EA
00025EC1 00                         DPLC_33c5_361: 	dc.b $0
00025EC2 02                         DPLC_33c5_362: 	dc.b $2
00025EC3 F4DA                       	dc.b $F4, $DA
00025EC5 14EA                       	dc.b $14, $EA
00025EC7 00                         DPLC_33c5_367: 	dc.b $0
00025EC8                            	even
00025EC8                            	even
00025EC8                            
00025EC8                            ; ---------------------------------------------------------------------------
00025EC8                            ; Uncompressed graphics	- Sonic
00025EC8                            ; ---------------------------------------------------------------------------
00025EC8                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00030CA8                            		even
00030CA8                            ; ---------------------------------------------------------------------------
00030CA8                            ; Compressed graphics - various
00030CA8                            ; ---------------------------------------------------------------------------
00030CA8                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00030DAC                            		even
00030DAC                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00030DE6                            		even
00030DE6                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030F7C                            		even
00030F7C                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
000310C4                            		even
000310C4                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
000311CE                            		even
000311CE                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00031220                            		even
00031220                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00031468                            		even
00031468                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
000315EE                            		even
000315EE                            ; ---------------------------------------------------------------------------
000315EE                            ; Sprite mappings - walls of the special stage
000315EE                            ; ---------------------------------------------------------------------------
000315EE                            Map_SSWalls:
000315EE                            	include "_maps\SSwalls.asm"
000315EE                            ; ---------------------------------------------------------------------------
000315EE                            ; Sprite mappings - walls of the special stage
000315EE                            ; ---------------------------------------------------------------------------
000315EE 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
000315F2 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
000315F6 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
000315FA 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
000315FE 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00031602 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00031606 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0003160A 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0003160E 01                         byte_2C584:	dc.b 1
0003160F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00031614 01                         byte_2C58A:	dc.b 1
00031615 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003161A 01                         byte_2C590:	dc.b 1
0003161B F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00031620 01                         byte_2C596:	dc.b 1
00031621 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00031626 01                         byte_2C59C:	dc.b 1
00031627 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003162C 01                         byte_2C5A2:	dc.b 1
0003162D F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00031632 01                         byte_2C5A8:	dc.b 1
00031633 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00031638 01                         byte_2C5AE:	dc.b 1
00031639 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003163E 01                         byte_2C5B4:	dc.b 1
0003163F F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00031644 01                         byte_2C5BA:	dc.b 1
00031645 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003164A 01                         byte_2C5C0:	dc.b 1
0003164B F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00031650 01                         byte_2C5C6:	dc.b 1
00031651 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00031656 01                         byte_2C5CC:	dc.b 1
00031657 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003165C 01                         byte_2C5D2:	dc.b 1
0003165D F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00031662 01                         byte_2C5D8:	dc.b 1
00031663 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00031668 01                         byte_2C5DE:	dc.b 1
00031669 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003166E                            		even
0003166E                            		even
0003166E                            ; ---------------------------------------------------------------------------
0003166E                            ; Compressed graphics - special stage
0003166E                            ; ---------------------------------------------------------------------------
0003166E                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031FA6                            		even
00031FA6                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
000320F4                            		even
000320F4                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00033586                            		even
00033586                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00033886                            		even
00033886                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00033D7A                            		even
00033D7A                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00033E68                            		even
00033E68                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00033F38                            		even
00033F38                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0003402E                            		even
0003402E                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0003408C                            		even
0003408C                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0003411E                            		even
0003411E                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
000341E0                            		even
000341E0                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
000342AE                            		even
000342AE                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003437A                            		even
0003437A                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00034442                            		even
00034442                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0003450C                            		even
0003450C                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000345DC                            		even
000345DC                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000347D0                            		even
000347D0                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00034938                            		even
00034938                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000349E8                            		even
000349E8                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00034AC2                            		even
00034AC2                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00034B46                            		even
00034B46                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00034CC4                            		even
00034CC4                            ; ---------------------------------------------------------------------------
00034CC4                            ; Compressed graphics - GHZ stuff
00034CC4                            ; ---------------------------------------------------------------------------
00034CC4                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034D0E                            		even
00034D0E                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00034E28                            		even
00034E28                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034F14                            		even
00034F14                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034F5C                            		even
00034F5C                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
000350FA                            		even
000350FA                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
000351B6                            		even
000351B6                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
000353CA                            		even
000353CA                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
000354F6                            		even
000354F6                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00035624                            		even
00035624                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000356C2                            		even
000356C2                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00035722                            		even
00035722                            ; ---------------------------------------------------------------------------
00035722                            ; Compressed graphics - LZ stuff
00035722                            ; ---------------------------------------------------------------------------
00035722                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00035846                            		even
00035846                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0003603A                            		even
0003603A                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
000361BA                            		even
000361BA                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00036324                            		even
00036324                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003697A                            		even
0003697A                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036A30                            		even
00036A30                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00036AD2                            		even
00036AD2                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036C2E                            		even
00036C2E                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00036C92                            		even
00036C92                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036DE4                            		even
00036DE4                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
000372C6                            		even
000372C6                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00037436                            		even
00037436                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
000376EE                            		even
000376EE                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00037826                            		even
00037826                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00037950                            		even
00037950                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00037A60                            		even
00037A60                            ; ---------------------------------------------------------------------------
00037A60                            ; Compressed graphics - MZ stuff
00037A60                            ; ---------------------------------------------------------------------------
00037A60                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037CEE                            		even
00037CEE                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00037DAC                            		even
00037DAC                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037E64                            		even
00037E64                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037EB8                            		even
00037EB8                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0003818A 00                         		even
0003818A                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00038AA0                            		even
00038AA0                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00038C04                            		even
00038C04                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00038C8C                            		even
00038C8C                            ; ---------------------------------------------------------------------------
00038C8C                            ; Compressed graphics - SLZ stuff
00038C8C                            ; ---------------------------------------------------------------------------
00038C8C                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038EC8                            		even
00038EC8                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
0003900E                            		even
0003900E                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00039252                            		even
00039252                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000392B4                            		even
000392B4                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00039396                            		even
00039396                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00039578                            		even
00039578                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00039684                            		even
00039684                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00039728                            		even
00039728                            ; ---------------------------------------------------------------------------
00039728                            ; Compressed graphics - SYZ stuff
00039728                            ; ---------------------------------------------------------------------------
00039728                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00039892                            		even
00039892                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
000398F4                            		even
000398F4                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000399D6                            		even
000399D6                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00039C64                            		even
00039C64                            ; ---------------------------------------------------------------------------
00039C64                            ; Compressed graphics - SBZ stuff
00039C64                            ; ---------------------------------------------------------------------------
00039C64                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00039CB8                            		even
00039CB8                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039F54                            		even
00039F54                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003A158                            		even
0003A158                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003A2F6                            		even
0003A2F6                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003A626                            		even
0003A626                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003A804                            		even
0003A804                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003A85C                            		even
0003A85C                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003AA26 00                         		even
0003AA26                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003AB24                            		even
0003AB24                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003ACB0                            		even
0003ACB0                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003AD00                            		even
0003AD00                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003AD58                            		even
0003AD58                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003AE54                            		even
0003AE54                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003AF6A                            		even
0003AF6A                            ; ---------------------------------------------------------------------------
0003AF6A                            ; Compressed graphics - enemies
0003AF6A                            ; ---------------------------------------------------------------------------
0003AF6A                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003B3D8 00                         		even
0003B3D8                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003B582 00                         		even
0003B582                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B944 00                         		even
0003B944                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003BB2C                            		even
0003BB2C                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003BCE4 00                         		even
0003BCE4                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003BE2E                            		even
0003BE2E                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003C0B8                            		even
0003C0B8                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C6DC                            		even
0003C6DC                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C8D2                            		even
0003C8D2                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003CEF0                            		even
0003CEF0                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003D2F0 00                         		even
0003D2F0                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003D5EC                            		even
0003D5EC                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D834                            		even
0003D834                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003DACC                            		even
0003DACC                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003DCAA                            		even
0003DCAA                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003DE38                            		even
0003DE38                            ; ---------------------------------------------------------------------------
0003DE38                            ; Compressed graphics - various
0003DE38                            ; ---------------------------------------------------------------------------
0003DE38                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003E368                            		even
0003E368                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003E45E                            		even
0003E45E                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003E564                            		even
0003E564                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003E658                            		even
0003E658                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003EB9C                            		even
0003EB9C                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003F202                            		even
0003F202                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003F2B2                            		even
0003F2B2                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003F444                            		even
0003F444                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003F558                            		even
0003F558                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003F62A                            		even
0003F62A                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003FAA6                            		even
0003FAA6                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003FB66                            		even
0003FB66                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003FCDA                            		even
0003FCDA                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003FFDC                            		even
0003FFDC                            ; ---------------------------------------------------------------------------
0003FFDC                            ; Compressed graphics - continue screen
0003FFDC                            ; ---------------------------------------------------------------------------
0003FFDC                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0004028C                            		even
0004028C                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
000404C6                            		even
000404C6                            ; ---------------------------------------------------------------------------
000404C6                            ; Compressed graphics - animals
000404C6                            ; ---------------------------------------------------------------------------
000404C6                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0004061E                            		even
0004061E                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0004077A                            		even
0004077A                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
000408F6                            		even
000408F6                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040A12                            		even
00040A12                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00040B48                            		even
00040B48                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00040C82                            		even
00040C82                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00040DDE                            		even
00040DDE                            ; ---------------------------------------------------------------------------
00040DDE                            ; Compressed graphics - primary patterns and block mappings
00040DDE                            ; ---------------------------------------------------------------------------
00040DDE                            Blk16_GHZ:	incbin	map16\ghz.bin
000416F2                            		even
000416F2                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00043000                            		even
00043000                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00044380                            		even
00044380                            Blk256_GHZ:	incbin	map256\ghz.bin
000467BA                            		even
000467BA                            Blk16_LZ:	incbin	map16\lz.bin
00046EF4                            		even
00046EF4                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00049348                            		even
00049348                            Blk256_LZ:	incbin	map256\lz.bin
0004BCC8                            		even
0004BCC8                            Blk16_MZ:	incbin	map16\mz.bin
0004C430                            		even
0004C430                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004ED6C                            		even
0004ED6C                            Blk256_MZ:	incbin	map256\mz.bin
00050582                            		even
00050582                            Blk16_SLZ:	incbin	map16\slz.bin
00050C4C                            		even
00050C4C                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00052BA0                            		even
00052BA0                            Blk256_SLZ:	incbin	map256\slz.bin
0005321A                            		even
0005321A                            Blk16_SYZ:	incbin	map16\syz.bin
00053E40                            		even
00053E40                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000583D2                            		even
000583D2                            Blk256_SYZ:	incbin	map256\syz.bin
0005A42E                            		even
0005A42E                            Blk16_SBZ:	incbin	map16\sbz.bin
0005B376                            		even
0005B376                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005DD3A                            		even
0005DD3A                            Blk256_SBZ:	incbin	map256\sbz.bin
00060830                            		even
00060830                            Blk16_BHZ:	incbin	map16\bhz.bin
00061144                            		even
00061144                            Nem_BHZ_1st:	incbin	artnem\8x8bhz1.bin	; GHZ primary patterns
00062756                            		even
00062756                            Nem_BHZ_2nd:	incbin	artnem\8x8bhz2.bin	; GHZ secondary patterns
00063AEA                            		even
00063AEA                            Blk256_BHZ:	incbin	map256\bhz.bin
00065C3A                            		even
00065C3A                            ; ---------------------------------------------------------------------------
00065C3A                            ; Compressed graphics - bosses and ending sequence
00065C3A                            ; ---------------------------------------------------------------------------
00065C3A                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00066454 00                         		even
00066454                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00066AA2                            		even
00066AA2                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
00066B1C                            		even
00066B1C                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00066E06                            		even
00066E06                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006768A                            		even
0006768A                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
000683E0 00                         		even
000683E0                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00068B48                            		even
00068B48                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000690C8                            		even
000690C8                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
000691E8                            		even
000691E8                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000693E6                            		even
000693E6                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006A5C4                            		even
0006A5C4                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006AF08                            		even
0006AF08                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006B2DE                            		even
0006B2DE                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006B86E                            		even
0006B86E                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006BAF6                            		even
0006BAF6                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006C0E4 00                         		even
0006C0E4                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006C36C                            		even
0006C36C                            		incbin	misc\padding2.bin
0006C470                            		even
0006C470                            ; ---------------------------------------------------------------------------
0006C470                            ; Collision data
0006C470                            ; ---------------------------------------------------------------------------
0006C470                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006C570                            		even
0006C570                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0006D570                            		even
0006D570                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006E570                            		even
0006E570                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0006E728 00                         		even
0006E728                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006E890                            		even
0006E890                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0006EA20 00                         		even
0006EA20                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0006EC14                            		even
0006EC14                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0006EE1A                            		even
0006EE1A                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006F0B8                            		even
0006F0B8                            Col_BHZ:	incbin	collide\bhz.bin		; GHZ index
0006F270 00                         		even
0006F270                            ; ---------------------------------------------------------------------------
0006F270                            ; Special layouts
0006F270                            ; ---------------------------------------------------------------------------
0006F270                            SS_1:		incbin	sslayout\1.bin
0006F4B8                            		even
0006F4B8                            SS_2:		incbin	sslayout\2.bin
0006F870                            		even
0006F870                            SS_3:		incbin	sslayout\3.bin
0006FBCC                            		even
0006FBCC                            SS_4:		incbin	sslayout\4.bin
000700A6                            		even
000700A6                            SS_5:		incbin	sslayout\5.bin
00070556                            		even
00070556                            SS_6:		incbin	sslayout\6.bin
00070848                            		even
00070848                            ; ---------------------------------------------------------------------------
00070848                            ; Animated uncompressed graphics
00070848                            ; ---------------------------------------------------------------------------
00070848                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00070A48                            		even
00070A48                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00070E48                            		even
00070E48                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
000712C8                            		even
000712C8                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
000715C8                            		even
000715C8                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00071BC8                            		even
00071BC8                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00071EC8                            		even
00071EC8                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00072948                            		even
00072948                            
00072948                            ; ---------------------------------------------------------------------------
00072948                            ; Level	layout index
00072948                            ; ---------------------------------------------------------------------------
00072948 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0007294E 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00072954 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0007295A 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00072960 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00072966 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007296C 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00072972 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00072978 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0007297E 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00072984 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0007298A 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00072990 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00072996 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007299C 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000729A2 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
000729A8 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
000729AE 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
000729B4 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
000729BA 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
000729C0 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
000729C6 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
000729CC 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
000729D2 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
000729D8 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000729DE 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000729E4 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000729EA 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000729F0 0000 0000 0000             		dc.w Level_BHZ1-Level_Index, Level_BHZbg-Level_Index, byte_68D70-Level_Index
000729F6 0000 0000 0000             		dc.w Level_BHZ2-Level_Index, Level_BHZbg-Level_Index, byte_68E3C-Level_Index
000729FC 0000 0000 0000             		dc.w Level_BHZ3-Level_Index, Level_BHZbg-Level_Index, byte_68F84-Level_Index
00072A02 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00072A08                            
00072A08                            Level_GHZ1:	incbin	levels\ghz1.bin
00072AFA                            		even
00072AFA 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00072AFE                            Level_GHZ2:	incbin	levels\ghz2.bin
00072BC6                            		even
00072BC6 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00072BCA                            Level_GHZ3:	incbin	levels\ghz3.bin
00072CEC                            		even
00072CEC                            Level_GHZbg:	incbin	levels\ghzbg.bin
00072D0E                            		even
00072D0E 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00072D12 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00072D16                            
00072D16                            Level_LZ1:	incbin	levels\lz1.bin
00072E18                            		even
00072E18                            Level_LZbg:	incbin	levels\lzbg.bin
00072F1A                            		even
00072F1A 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00072F1E                            Level_LZ2:	incbin	levels\lz2.bin
00072FB8                            		even
00072FB8 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00072FBC                            Level_LZ3:	incbin	levels\lz3.bin
000730D6                            		even
000730D6 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
000730DA                            Level_SBZ3:	incbin	levels\sbz3.bin
00073194                            		even
00073194 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00073198                            
00073198                            Level_MZ1:	incbin	levels\mz1.bin
00073236                            		even
00073236                            Level_MZ1bg:	incbin	levels\mz1bg.bin
000732B0                            		even
000732B0                            Level_MZ2:	incbin	levels\mz2.bin
00073354                            		even
00073354                            Level_MZ2bg:	incbin	levels\mz2bg.bin
000733E6                            		even
000733E6 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
000733EA                            Level_MZ3:	incbin	levels\mz3.bin
000734CC                            		even
000734CC                            Level_MZ3bg:	incbin	levels\mz3bg.bin
00073570 00                         		even
00073570 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00073574 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00073578                            
00073578                            Level_SLZ1:	incbin	levels\slz1.bin
0007368A                            		even
0007368A                            Level_SLZbg:	incbin	levels\slzbg.bin
000736A4                            		even
000736A4                            Level_SLZ2:	incbin	levels\slz2.bin
00073794                            		even
00073794                            Level_SLZ3:	incbin	levels\slz3.bin
000738AE                            		even
000738AE 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
000738B2                            
000738B2                            Level_SYZ1:	incbin	levels\syz1.bin
0007396E 00                         		even
0007396E                            Level_SYZbg:	incbin	levels\syzbg.bin
000739A8                            		even
000739A8 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
000739AC                            Level_SYZ2:	incbin	levels\syz2.bin
00073AB0                            		even
00073AB0 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00073AB4                            Level_SYZ3:	incbin	levels\syz3.bin
00073C0E 00                         		even
00073C0E 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00073C12 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00073C16                            
00073C16                            Level_SBZ1:	incbin	levels\sbz1.bin
00073D38                            		even
00073D38                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00073D76                            		even
00073D76                            Level_SBZ2:	incbin	levels\sbz2.bin
00073EB8                            		even
00073EB8                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00074022                            		even
00074022 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00074026 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007402A                            Level_End:	incbin	levels\ending.bin
0007405A 00                         		even
0007405A 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007405E                            Level_BHZ1:	incbin	levels\bhz1.bin
00074150                            		even
00074150                            
00074150                            Level_BHZ2:	incbin	levels\bhz2.bin
00074218                            		even
00074218                            
00074218                            Level_BHZ3:	incbin	levels\bhz3.bin
0007433A                            		even
0007433A                            Level_BHZbg:	incbin	levels\bhzbg.bin
0007435C                            		even
0007435C                            ; ---------------------------------------------------------------------------
0007435C                            ; Animated uncompressed giant ring graphics
0007435C                            ; ---------------------------------------------------------------------------
0007435C                            Art_BigRing:	incbin	artunc\bigring.bin
00074F9C                            		even
00074F9C                            
00074F9C                            		incbin	misc\padding3.bin
00075038                            		even
00075038                            
00075038                            ; ---------------------------------------------------------------------------
00075038                            ; Sprite locations index
00075038                            ; ---------------------------------------------------------------------------
00075038 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007503C 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075040 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075044 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075048 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007504C 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075050 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075054 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075058 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007505C 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075060 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075064 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075068 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007506C 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075070 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075074 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075078 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007507C 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075080 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075084 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075088 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007508C 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075090 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075094 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00075098 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007509C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000750A0 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000750A4 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000750A8 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000750AC 0000 0000                  		dc.w ObjPos_BHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000750B0 0000 0000                  		dc.w ObjPos_BHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000750B4 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000750B8                            ObjPos_LZxpf_Index:
000750B8 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
000750BC 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_LZxpf_Index, ObjPos_LZ2pf2-ObjPos_LZxpf_Index
000750C0 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_LZxpf_Index, ObjPos_LZ3pf2-ObjPos_LZxpf_Index
000750C4 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
000750C8                            
000750C8                            ObjPos_SBZ1pf_Index:
000750C8 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
000750CC 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf4-ObjPos_SBZ1pf_Index
000750D0 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf6-ObjPos_SBZ1pf_Index
000750D4 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
000750D8 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
000750DE                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
00075984                            		even
00075984                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
00075C4E                            		even
00075C4E                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0007661A                            		even
0007661A                            ObjPos_LZ1:	incbin	objpos\lz1.bin
000769C2                            		even
000769C2                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00076CF8                            		even
00076CF8                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0007720E                            		even
0007720E                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000776A6                            		even
000776A6                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000776D8                            		even
000776D8                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007770A                            		even
0007770A                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007773C                            		even
0007773C                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007776E                            		even
0007776E                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000777B8                            		even
000777B8                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000777F6                            		even
000777F6                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00077AF0                            		even
00077AF0                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00077F9A                            		even
00077F9A                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00078510                            		even
00078510                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007853A                            		even
0007853A                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000789A2                            		even
000789A2                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00078F84                            		even
00078F84                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000795F6                            		even
000795F6                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00079B60                            		even
00079B60                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0007A166                            		even
0007A166                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007A8A4                            		even
0007A8A4                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007AF82                            		even
0007AF82                            ObjPos_FZ:	incbin	objpos\fz.bin
0007AFCA                            		even
0007AFCA                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007AFFC                            		even
0007AFFC                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007B02E                            		even
0007B02E                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007B060                            		even
0007B060                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007B092                            		even
0007B092                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007B0C4                            		even
0007B0C4                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007B0FC                            		even
0007B0FC                            ObjPos_End:	incbin	objpos\ending.bin
0007B258                            		even
0007B258                            ObjPos_BHZ1:	incbin	objpos\bhz1.bin
0007B86A                            		even
0007B86A                            ObjPos_BHZ2:	incbin	objpos\bhz2.bin
0007BE2E                            		even
0007BE2E                            ObjPos_BHZ3:	incbin	objpos\bhz3.bin
0007C4E8                            		even
0007C4E8 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007C4EE                            ; ---------------------------------------------------------------------------
0007C4EE                            		incbin	misc\padding4.bin
0007CB18                            		even
0007CB18                            
0007CB18 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0007CB1C 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0007CB20 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0007CB24 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007CB28 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0007CB2C 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0007CB30                            ; ---------------------------------------------------------------------------
0007CB30                            ; PSG instruments used in music
0007CB30                            ; ---------------------------------------------------------------------------
0007CB30 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0007CB3C 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007CB48 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007CB54                            
0007CB54 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
0007CB64 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
0007CB6B                            
0007CB6B 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
0007CB72                            
0007CB72 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
0007CB82 80                                     dc.b    $80
0007CB83                            
0007CB83 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
0007CB8E                            
0007CB8E 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
0007CB9E 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
0007CBAE 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
0007CBB8                            
0007CBB8 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
0007CBC7                            
0007CBC7 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0007CBD7 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
0007CBE3                            
0007CBE3 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
0007CBF3 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
0007CC03 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
0007CC0B                            
0007CC0B 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
0007CC1B 80                                     dc.b    $80
0007CC1C                            
0007CC1C 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007CC24                            ; ---------------------------------------------------------------------------
0007CC24                            ; Music	Pointers
0007CC24                            ; ---------------------------------------------------------------------------
0007CC24 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0007CC2C 0000 0000 0000 0000        		dc.l Music83, Music84
0007CC34 0000 0000 0000 0000        		dc.l Music85, Music86
0007CC3C 0000 0000 0000 0000        		dc.l Music87, Music88
0007CC44 0000 0000 0000 0000        		dc.l Music89, Music8A
0007CC4C 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007CC54 0000 0000 0000 0000        		dc.l Music8D, Music8E
0007CC5C 0000 0000 0000 0000        		dc.l Music8F, Music90
0007CC64 0000 0000 0000 0000        		dc.l Music91, Music92
0007CC6C 0000 0000 0000 0000        		dc.l Music93, Music94
0007CC74 0000 0000 0000 0000        		dc.l Music95, Music96
0007CC7C 0000 0000 0000 0000        		dc.l Music97, Music98
0007CC84 0000 0000 0000 0000        		dc.l Music99, Music9A
0007CC8C 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007CC94 0000 0000 0000 0000        		dc.l Music9D, Music9E
0007CC9C 0000 0000                  		dc.l Music9F
0007CCA0                            ; ---------------------------------------------------------------------------
0007CCA0                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0007CCA0                            ; ---------------------------------------------------------------------------
0007CCA0 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007CCB0 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0007CCC0 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0007CCD0 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0007CCE0 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0007CCF0 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0007CD00 9090 9090                  		dc.b $90, $90, $90, $90
0007CD04                            
0007CD04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CD04                            
0007CD04                            
0007CD04                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0007CD04                            ; every 5th frame, update a second time (same technique as most SMPS versions, but more scuffed)
0007CD04 4A38 FFF8                  		tst.b	($FFFFFFF8).w		; if in 60hz mode, branch
0007CD08 6A00                       		bpl.s	@main
0007CD0A 7000                       		moveq	#0,d0			; PAL song timer "optimization"
0007CD0C 3038 FE0E                  		move.w	($FFFFFE0E).w,d0	; TODO: proper timer, this is prone to overflow and cause slight variations
0007CD10 80FC 0005                  		divu.w	#5,d0			;       also divisions are generally slow
0007CD14 4840                       		swap	d0
0007CD16 4A40                       		tst.w	d0
0007CD18 6600                       		bne.s	@main
0007CD1A 6100 0000                  		bsr.w	@main
0007CD1E                            @main:
0007CD1E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0007CD26 4E71                       		nop
0007CD28 4E71                       		nop
0007CD2A 4E71                       		nop
0007CD2C                            ; loc_71B5A:
0007CD2C                            @wait:
0007CD2C 0839 0000 00A1 1100        		btst	#0,($A11100).l
0007CD34 66F6                       		bne.s	@wait
0007CD36                            
0007CD36 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0007CD3E 6700                       		beq.s	loc_71B82
0007CD40 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007CD48 4E71                       		nop
0007CD4A 4E71                       		nop
0007CD4C 4E71                       		nop
0007CD4E 4E71                       		nop
0007CD50 4E71                       		nop
0007CD52 60CA                       		bra.s	@main		; if you want really funky sound, use sub_71B4C instead ;)
0007CD54                            ; ===========================================================================
0007CD54                            
0007CD54                            loc_71B82:
0007CD54 4DF9 00FF F000             		lea	($FFF000).l,a6
0007CD5A 422E 000E                  		clr.b	$E(a6)
0007CD5E 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0007CD62 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0007CD66 532E 0001                  		subq.b	#1,1(a6)
0007CD6A 6600                       		bne.s	loc_71B9E
0007CD6C 4EBA 0000                  		jsr	sub_7260C(pc)
0007CD70                            
0007CD70                            loc_71B9E:
0007CD70 102E 0004                  		move.b	4(a6),d0
0007CD74 6700                       		beq.s	loc_71BA8
0007CD76 4EBA 0000                  		jsr	sub_72504(pc)
0007CD7A                            
0007CD7A                            loc_71BA8:
0007CD7A 4A2E 0024                  		tst.b	$24(a6)
0007CD7E 6700                       		beq.s	loc_71BB2
0007CD80 4EBA 0000                  		jsr	sub_7267C(pc)
0007CD84                            
0007CD84                            loc_71BB2:
0007CD84 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0007CD88 6700                       		beq.s	loc_71BBC	; if not, branch
0007CD8A 4EBA 0000                  		jsr	Sound_Play(pc)
0007CD8E                            
0007CD8E                            loc_71BBC:
0007CD8E 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007CD94 6700                       		beq.s	loc_71BC8
0007CD96 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0007CD9A                            
0007CD9A                            loc_71BC8:
0007CD9A 4BEE 0040                  		lea	$40(a6),a5
0007CD9E 4A15                       		tst.b	(a5)
0007CDA0 6A00                       		bpl.s	loc_71BD4
0007CDA2 4EBA 0000                  		jsr	sub_71C4E(pc)
0007CDA6                            
0007CDA6                            loc_71BD4:
0007CDA6 422E 0008                  		clr.b	8(a6)
0007CDAA 7E05                       		moveq	#5,d7
0007CDAC                            
0007CDAC                            loc_71BDA:
0007CDAC DAFC 0030                  		adda.w	#$30,a5
0007CDB0 4A15                       		tst.b	(a5)
0007CDB2 6A00                       		bpl.s	loc_71BE6
0007CDB4 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CDB8                            
0007CDB8                            loc_71BE6:
0007CDB8 51CF FFF2                  		dbf	d7,loc_71BDA
0007CDBC                            
0007CDBC 7E02                       		moveq	#2,d7
0007CDBE                            
0007CDBE                            loc_71BEC:
0007CDBE DAFC 0030                  		adda.w	#$30,a5
0007CDC2 4A15                       		tst.b	(a5)
0007CDC4 6A00                       		bpl.s	loc_71BF8
0007CDC6 4EBA 0000                  		jsr	sub_72850(pc)
0007CDCA                            
0007CDCA                            loc_71BF8:
0007CDCA 51CF FFF2                  		dbf	d7,loc_71BEC
0007CDCE                            
0007CDCE 1D7C 0080 000E             		move.b	#$80,$E(a6)
0007CDD4 7E02                       		moveq	#2,d7
0007CDD6                            
0007CDD6                            loc_71C04:
0007CDD6 DAFC 0030                  		adda.w	#$30,a5
0007CDDA 4A15                       		tst.b	(a5)
0007CDDC 6A00                       		bpl.s	loc_71C10
0007CDDE 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CDE2                            
0007CDE2                            loc_71C10:
0007CDE2 51CF FFF2                  		dbf	d7,loc_71C04
0007CDE6                            
0007CDE6 7E02                       		moveq	#2,d7
0007CDE8                            
0007CDE8                            loc_71C16:
0007CDE8 DAFC 0030                  		adda.w	#$30,a5
0007CDEC 4A15                       		tst.b	(a5)
0007CDEE 6A00                       		bpl.s	loc_71C22
0007CDF0 4EBA 0000                  		jsr	sub_72850(pc)
0007CDF4                            
0007CDF4                            loc_71C22:
0007CDF4 51CF FFF2                  		dbf	d7,loc_71C16
0007CDF8 1D7C 0040 000E             		move.b	#$40,$E(a6)
0007CDFE DAFC 0030                  		adda.w	#$30,a5
0007CE02 4A15                       		tst.b	(a5)
0007CE04 6A00                       		bpl.s	loc_71C38
0007CE06 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CE0A                            
0007CE0A                            loc_71C38:
0007CE0A DAFC 0030                  		adda.w	#$30,a5
0007CE0E 4A15                       		tst.b	(a5)
0007CE10 6A00                       		bpl.s	loc_71C44
0007CE12 4EBA 0000                  		jsr	sub_72850(pc)
0007CE16                            
0007CE16                            loc_71C44:
0007CE16 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007CE1E 4E75                       		rts	
0007CE20                            ; End of function sub_71B4C
0007CE20                            
0007CE20                            
0007CE20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CE20                            
0007CE20                            
0007CE20                            sub_71C4E:				; XREF: sub_71B4C
0007CE20 532D 000E                  		subq.b	#1,$E(a5)
0007CE24 6600                       		bne.s	locret_71CAA
0007CE26 1D7C 0080 0008             		move.b	#$80,8(a6)
0007CE2C 286D 0004                  		movea.l	4(a5),a4
0007CE30                            
0007CE30                            loc_71C5E:
0007CE30 7A00                       		moveq	#0,d5
0007CE32 1A1C                       		move.b	(a4)+,d5
0007CE34 0C05 00E0                  		cmpi.b	#-$20,d5
0007CE38 6500                       		bcs.s	loc_71C6E
0007CE3A 4EBA 0000                  		jsr	sub_72A5A(pc)
0007CE3E 60F0                       		bra.s	loc_71C5E
0007CE40                            ; ===========================================================================
0007CE40                            
0007CE40                            loc_71C6E:
0007CE40 4A05                       		tst.b	d5
0007CE42 6A00                       		bpl.s	loc_71C84
0007CE44 1B45 0010                  		move.b	d5,$10(a5)
0007CE48 1A1C                       		move.b	(a4)+,d5
0007CE4A 6A00                       		bpl.s	loc_71C84
0007CE4C 534C                       		subq.w	#1,a4
0007CE4E 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007CE54 6000                       		bra.s	loc_71C88
0007CE56                            ; ===========================================================================
0007CE56                            
0007CE56                            loc_71C84:
0007CE56 4EBA 0000                  		jsr	sub_71D40(pc)
0007CE5A                            
0007CE5A                            loc_71C88:
0007CE5A 2B4C 0004                  		move.l	a4,4(a5)
0007CE5E 0815 0002                  		btst	#2,(a5)
0007CE62 6600                       		bne.s	locret_71CAA
0007CE64 7000                       		moveq	#0,d0
0007CE66 102D 0010                  		move.b	$10(a5),d0
0007CE6A 0C00 0080                  		cmpi.b	#$80,d0
0007CE6E 6700                       		beq.s	locret_71CAA
0007CE70 0800 0003                  		btst	#3,d0
0007CE74 6600                       		bne.s	loc_71CAC
0007CE76 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0007CE7C                            
0007CE7C                            locret_71CAA:
0007CE7C 4E75                       		rts	
0007CE7E                            ; ===========================================================================
0007CE7E                            
0007CE7E                            loc_71CAC:
0007CE7E 0400 0088                  		subi.b	#$88,d0
0007CE82 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0007CE86 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0007CE8C 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0007CE94 4E75                       		rts	
0007CE96                            ; End of function sub_71C4E
0007CE96                            
0007CE96                            ; ===========================================================================
0007CE96 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0007CE9C                            
0007CE9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CE9C                            
0007CE9C                            
0007CE9C                            sub_71CCA:				; XREF: sub_71B4C
0007CE9C 532D 000E                  		subq.b	#1,$E(a5)
0007CEA0 6600                       		bne.s	loc_71CE0
0007CEA2 0895 0004                  		bclr	#4,(a5)
0007CEA6 4EBA 0000                  		jsr	sub_71CEC(pc)
0007CEAA 4EBA 0000                  		jsr	sub_71E18(pc)
0007CEAE 6000 0000                  		bra.w	loc_726E2
0007CEB2                            ; ===========================================================================
0007CEB2                            
0007CEB2                            loc_71CE0:
0007CEB2 4EBA 0000                  		jsr	sub_71D9E(pc)
0007CEB6 4EBA 0000                  		jsr	sub_71DC6(pc)
0007CEBA 6000 0000                  		bra.w	loc_71E24
0007CEBE                            ; End of function sub_71CCA
0007CEBE                            
0007CEBE                            
0007CEBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CEBE                            
0007CEBE                            
0007CEBE                            sub_71CEC:				; XREF: sub_71CCA
0007CEBE 286D 0004                  		movea.l	4(a5),a4
0007CEC2 0895 0001                  		bclr	#1,(a5)
0007CEC6                            
0007CEC6                            loc_71CF4:
0007CEC6 7A00                       		moveq	#0,d5
0007CEC8 1A1C                       		move.b	(a4)+,d5
0007CECA 0C05 00E0                  		cmpi.b	#-$20,d5
0007CECE 6500                       		bcs.s	loc_71D04
0007CED0 4EBA 0000                  		jsr	sub_72A5A(pc)
0007CED4 60F0                       		bra.s	loc_71CF4
0007CED6                            ; ===========================================================================
0007CED6                            
0007CED6                            loc_71D04:
0007CED6 4EBA 0000                  		jsr	sub_726FE(pc)
0007CEDA 4A05                       		tst.b	d5
0007CEDC 6A00                       		bpl.s	loc_71D1A
0007CEDE 4EBA 0000                  		jsr	sub_71D22(pc)
0007CEE2 1A1C                       		move.b	(a4)+,d5
0007CEE4 6A00                       		bpl.s	loc_71D1A
0007CEE6 534C                       		subq.w	#1,a4
0007CEE8 6000 0000                  		bra.w	sub_71D60
0007CEEC                            ; ===========================================================================
0007CEEC                            
0007CEEC                            loc_71D1A:
0007CEEC 4EBA 0000                  		jsr	sub_71D40(pc)
0007CEF0 6000 0000                  		bra.w	sub_71D60
0007CEF4                            ; End of function sub_71CEC
0007CEF4                            
0007CEF4                            
0007CEF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CEF4                            
0007CEF4                            
0007CEF4                            sub_71D22:				; XREF: sub_71CEC
0007CEF4 0405 0080                  		subi.b	#$80,d5
0007CEF8 6700                       		beq.s	loc_71D58
0007CEFA DA2D 0008                  		add.b	8(a5),d5
0007CEFE 0245 007F                  		andi.w	#$7F,d5
0007CF02 E34D                       		lsl.w	#1,d5
0007CF04 41FA 0000                  		lea	word_72790(pc),a0
0007CF08 3C30 5000                  		move.w	(a0,d5.w),d6
0007CF0C 3B46 0010                  		move.w	d6,$10(a5)
0007CF10 4E75                       		rts	
0007CF12                            ; End of function sub_71D22
0007CF12                            
0007CF12                            
0007CF12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CF12                            
0007CF12                            
0007CF12                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007CF12 1005                       		move.b	d5,d0
0007CF14 122D 0002                  		move.b	2(a5),d1
0007CF18                            
0007CF18                            loc_71D46:
0007CF18 5301                       		subq.b	#1,d1
0007CF1A 6700                       		beq.s	loc_71D4E
0007CF1C D005                       		add.b	d5,d0
0007CF1E 60F8                       		bra.s	loc_71D46
0007CF20                            ; ===========================================================================
0007CF20                            
0007CF20                            loc_71D4E:
0007CF20 1B40 000F                  		move.b	d0,$F(a5)
0007CF24 1B40 000E                  		move.b	d0,$E(a5)
0007CF28 4E75                       		rts	
0007CF2A                            ; End of function sub_71D40
0007CF2A                            
0007CF2A                            ; ===========================================================================
0007CF2A                            
0007CF2A                            loc_71D58:				; XREF: sub_71D22
0007CF2A 08D5 0001                  		bset	#1,(a5)
0007CF2E 426D 0010                  		clr.w	$10(a5)
0007CF32                            
0007CF32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CF32                            
0007CF32                            
0007CF32                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007CF32 2B4C 0004                  		move.l	a4,4(a5)
0007CF36 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007CF3C 0815 0004                  		btst	#4,(a5)
0007CF40 6600                       		bne.s	locret_71D9C
0007CF42 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0007CF48 422D 000C                  		clr.b	$C(a5)
0007CF4C 0815 0003                  		btst	#3,(a5)
0007CF50 6700                       		beq.s	locret_71D9C
0007CF52 206D 0014                  		movea.l	$14(a5),a0
0007CF56 1B58 0018                  		move.b	(a0)+,$18(a5)
0007CF5A 1B58 0019                  		move.b	(a0)+,$19(a5)
0007CF5E 1B58 001A                  		move.b	(a0)+,$1A(a5)
0007CF62 1018                       		move.b	(a0)+,d0
0007CF64 E208                       		lsr.b	#1,d0
0007CF66 1B40 001B                  		move.b	d0,$1B(a5)
0007CF6A 426D 001C                  		clr.w	$1C(a5)
0007CF6E                            
0007CF6E                            locret_71D9C:
0007CF6E 4E75                       		rts	
0007CF70                            ; End of function sub_71D60
0007CF70                            
0007CF70                            
0007CF70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CF70                            
0007CF70                            
0007CF70                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0007CF70 4A2D 0012                  		tst.b	$12(a5)
0007CF74 6700                       		beq.s	locret_71DC4
0007CF76 532D 0012                  		subq.b	#1,$12(a5)
0007CF7A 6600                       		bne.s	locret_71DC4
0007CF7C 08D5 0001                  		bset	#1,(a5)
0007CF80 4A2D 0001                  		tst.b	1(a5)
0007CF84 6B00 0000                  		bmi.w	loc_71DBE
0007CF88 4EBA 0000                  		jsr	sub_726FE(pc)
0007CF8C 584F                       		addq.w	#4,sp
0007CF8E 4E75                       		rts	
0007CF90                            ; ===========================================================================
0007CF90                            
0007CF90                            loc_71DBE:
0007CF90 4EBA 0000                  		jsr	sub_729A0(pc)
0007CF94 584F                       		addq.w	#4,sp
0007CF96                            
0007CF96                            locret_71DC4:
0007CF96 4E75                       		rts	
0007CF98                            ; End of function sub_71D9E
0007CF98                            
0007CF98                            
0007CF98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CF98                            
0007CF98                            
0007CF98                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0007CF98 584F                       		addq.w	#4,sp
0007CF9A 0815 0003                  		btst	#3,(a5)
0007CF9E 6700                       		beq.s	locret_71E16
0007CFA0 4A2D 0018                  		tst.b	$18(a5)
0007CFA4 6700                       		beq.s	loc_71DDA
0007CFA6 532D 0018                  		subq.b	#1,$18(a5)
0007CFAA 4E75                       		rts	
0007CFAC                            ; ===========================================================================
0007CFAC                            
0007CFAC                            loc_71DDA:
0007CFAC 532D 0019                  		subq.b	#1,$19(a5)
0007CFB0 6700                       		beq.s	loc_71DE2
0007CFB2 4E75                       		rts	
0007CFB4                            ; ===========================================================================
0007CFB4                            
0007CFB4                            loc_71DE2:
0007CFB4 206D 0014                  		movea.l	$14(a5),a0
0007CFB8 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007CFBE 4A2D 001B                  		tst.b	$1B(a5)
0007CFC2 6600                       		bne.s	loc_71DFE
0007CFC4 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0007CFCA 442D 001A                  		neg.b	$1A(a5)
0007CFCE 4E75                       		rts	
0007CFD0                            ; ===========================================================================
0007CFD0                            
0007CFD0                            loc_71DFE:
0007CFD0 532D 001B                  		subq.b	#1,$1B(a5)
0007CFD4 1C2D 001A                  		move.b	$1A(a5),d6
0007CFD8 4886                       		ext.w	d6
0007CFDA DC6D 001C                  		add.w	$1C(a5),d6
0007CFDE 3B46 001C                  		move.w	d6,$1C(a5)
0007CFE2 DC6D 0010                  		add.w	$10(a5),d6
0007CFE6 594F                       		subq.w	#4,sp
0007CFE8                            
0007CFE8                            locret_71E16:
0007CFE8 4E75                       		rts	
0007CFEA                            ; End of function sub_71DC6
0007CFEA                            
0007CFEA                            
0007CFEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CFEA                            
0007CFEA                            
0007CFEA                            sub_71E18:				; XREF: sub_71CCA
0007CFEA 0815 0001                  		btst	#1,(a5)
0007CFEE 6600                       		bne.s	locret_71E48
0007CFF0 3C2D 0010                  		move.w	$10(a5),d6
0007CFF4 6700                       		beq.s	loc_71E4A
0007CFF6                            
0007CFF6                            loc_71E24:				; XREF: sub_71CCA
0007CFF6 102D 001E                  		move.b	$1E(a5),d0
0007CFFA 4880                       		ext.w	d0
0007CFFC DC40                       		add.w	d0,d6
0007CFFE 0815 0002                  		btst	#2,(a5)
0007D002 6600                       		bne.s	locret_71E48
0007D004 3206                       		move.w	d6,d1
0007D006 E049                       		lsr.w	#8,d1
0007D008 103C 00A4                  		move.b	#-$5C,d0
0007D00C 4EBA 0000                  		jsr	sub_72722(pc)
0007D010 1206                       		move.b	d6,d1
0007D012 103C 00A0                  		move.b	#-$60,d0
0007D016 4EBA 0000                  		jsr	sub_72722(pc)
0007D01A                            
0007D01A                            locret_71E48:
0007D01A 4E75                       		rts	
0007D01C                            ; ===========================================================================
0007D01C                            
0007D01C                            loc_71E4A:
0007D01C 08D5 0001                  		bset	#1,(a5)
0007D020 4E75                       		rts	
0007D022                            ; End of function sub_71E18
0007D022                            
0007D022                            ; ===========================================================================
0007D022                            
0007D022                            loc_71E50:				; XREF: sub_71B4C
0007D022 6B00                       		bmi.s	loc_71E94
0007D024 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0007D02A 6700 0000                  		beq.w	loc_71EFE
0007D02E 1D7C 0002 0003             		move.b	#2,3(a6)
0007D034 7602                       		moveq	#2,d3
0007D036 103C 00B4                  		move.b	#-$4C,d0
0007D03A 7200                       		moveq	#0,d1
0007D03C                            
0007D03C                            loc_71E6A:
0007D03C 4EBA 0000                  		jsr	sub_7272E(pc)
0007D040 4EBA 0000                  		jsr	sub_72764(pc)
0007D044 5200                       		addq.b	#1,d0
0007D046 51CB FFF4                  		dbf	d3,loc_71E6A
0007D04A                            
0007D04A 7602                       		moveq	#2,d3
0007D04C 7028                       		moveq	#$28,d0
0007D04E                            
0007D04E                            loc_71E7C:
0007D04E 1203                       		move.b	d3,d1
0007D050 4EBA 0000                  		jsr	sub_7272E(pc)
0007D054 5801                       		addq.b	#4,d1
0007D056 4EBA 0000                  		jsr	sub_7272E(pc)
0007D05A 51CB FFF2                  		dbf	d3,loc_71E7C
0007D05E                            
0007D05E 4EBA 0000                  		jsr	sub_729B6(pc)
0007D062 6000 FDB2                  		bra.w	loc_71C44
0007D066                            ; ===========================================================================
0007D066                            
0007D066                            loc_71E94:				; XREF: loc_71E50
0007D066 422E 0003                  		clr.b	3(a6)
0007D06A 7630                       		moveq	#$30,d3
0007D06C 4BEE 0040                  		lea	$40(a6),a5
0007D070 7806                       		moveq	#6,d4
0007D072                            
0007D072                            loc_71EA0:
0007D072 0815 0007                  		btst	#7,(a5)
0007D076 6700                       		beq.s	loc_71EB8
0007D078 0815 0002                  		btst	#2,(a5)
0007D07C 6600                       		bne.s	loc_71EB8
0007D07E 103C 00B4                  		move.b	#-$4C,d0
0007D082 122D 000A                  		move.b	$A(a5),d1
0007D086 4EBA 0000                  		jsr	sub_72722(pc)
0007D08A                            
0007D08A                            loc_71EB8:
0007D08A DAC3                       		adda.w	d3,a5
0007D08C 51CC FFE4                  		dbf	d4,loc_71EA0
0007D090                            
0007D090 4BEE 0220                  		lea	$220(a6),a5
0007D094 7802                       		moveq	#2,d4
0007D096                            
0007D096                            loc_71EC4:
0007D096 0815 0007                  		btst	#7,(a5)
0007D09A 6700                       		beq.s	loc_71EDC
0007D09C 0815 0002                  		btst	#2,(a5)
0007D0A0 6600                       		bne.s	loc_71EDC
0007D0A2 103C 00B4                  		move.b	#-$4C,d0
0007D0A6 122D 000A                  		move.b	$A(a5),d1
0007D0AA 4EBA 0000                  		jsr	sub_72722(pc)
0007D0AE                            
0007D0AE                            loc_71EDC:
0007D0AE DAC3                       		adda.w	d3,a5
0007D0B0 51CC FFE4                  		dbf	d4,loc_71EC4
0007D0B4                            
0007D0B4 4BEE 0340                  		lea	$340(a6),a5
0007D0B8 0815 0007                  		btst	#7,(a5)
0007D0BC 6700                       		beq.s	loc_71EFE
0007D0BE 0815 0002                  		btst	#2,(a5)
0007D0C2 6600                       		bne.s	loc_71EFE
0007D0C4 103C 00B4                  		move.b	#-$4C,d0
0007D0C8 122D 000A                  		move.b	$A(a5),d1
0007D0CC 4EBA 0000                  		jsr	sub_72722(pc)
0007D0D0                            
0007D0D0                            loc_71EFE:
0007D0D0 6000 FD44                  		bra.w	loc_71C44
0007D0D4                            
0007D0D4                            ; ---------------------------------------------------------------------------
0007D0D4                            ; Subroutine to	play a sound or	music track
0007D0D4                            ; ---------------------------------------------------------------------------
0007D0D4                            
0007D0D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D0D4                            
0007D0D4                            
0007D0D4                            Sound_Play:				; XREF: sub_71B4C
0007D0D4 2079 0007 CB18             		movea.l	(Go_SoundTypes).l,a0
0007D0DA 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007D0DE 1616                       		move.b	0(a6),d3
0007D0E0 7802                       		moveq	#2,d4
0007D0E2                            
0007D0E2                            loc_71F12:
0007D0E2 1011                       		move.b	(a1),d0		; move track number to d0
0007D0E4 1200                       		move.b	d0,d1
0007D0E6 4219                       		clr.b	(a1)+
0007D0E8 0400 0081                  		subi.b	#$81,d0
0007D0EC 6500                       		bcs.s	loc_71F3E
0007D0EE 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007D0F4 6700                       		beq.s	loc_71F2C
0007D0F6 1D41 000A                  		move.b	d1,$A(a6)
0007D0FA 6000                       		bra.s	loc_71F3E
0007D0FC                            ; ===========================================================================
0007D0FC                            
0007D0FC                            loc_71F2C:
0007D0FC 0240 007F                  		andi.w	#$7F,d0
0007D100 1430 0000                  		move.b	(a0,d0.w),d2
0007D104 B403                       		cmp.b	d3,d2
0007D106 6500                       		bcs.s	loc_71F3E
0007D108 1602                       		move.b	d2,d3
0007D10A 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007D10E                            
0007D10E                            loc_71F3E:
0007D10E 51CC FFD2                  		dbf	d4,loc_71F12
0007D112                            
0007D112 4A03                       		tst.b	d3
0007D114 6B00                       		bmi.s	locret_71F4A
0007D116 1C83                       		move.b	d3,0(a6)
0007D118                            
0007D118                            locret_71F4A:
0007D118 4E75                       		rts	
0007D11A                            ; End of function Sound_Play
0007D11A                            
0007D11A                            
0007D11A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D11A                            
0007D11A                            
0007D11A                            Sound_ChkValue:				; XREF: sub_71B4C
0007D11A 7E00                       		moveq	#0,d7
0007D11C 1E2E 0009                  		move.b	9(a6),d7
0007D120 6700 0000                  		beq.w	Sound_E4
0007D124 6A00                       		bpl.s	locret_71F8C
0007D126 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0007D12C 0C07 009F                  		cmpi.b	#$9F,d7
0007D130 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0007D134 0C07 00A0                  		cmpi.b	#$A0,d7
0007D138 6500 0000                  		bcs.w	locret_71F8C
0007D13C 0C07 00CF                  		cmpi.b	#$CF,d7
0007D140 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0007D144 0C07 00D0                  		cmpi.b	#$D0,d7
0007D148 6500 0000                  		bcs.w	locret_71F8C
0007D14C 0C07 00E0                  		cmpi.b	#$E0,d7
0007D150 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0007D154 0C07 00E5                  		cmpi.b	#$E5,d7
0007D158 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
0007D15A                            
0007D15A                            locret_71F8C:
0007D15A 4E75                       		rts	
0007D15C                            ; ===========================================================================
0007D15C                            
0007D15C                            Sound_E0toE5				; XREF: Sound_ChkValue
0007D15C 0407 00E0                  		subi.b	#$E0,d7
0007D160 E54F                       		lsl.w	#2,d7
0007D162 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0007D166                            ; ===========================================================================
0007D166                            
0007D166                            Sound_ExIndex:
0007D166 6000 0000                  		bra.w	Sound_E0
0007D16A                            ; ===========================================================================
0007D16A 6000 0000                  		bra.w	Sound_E1
0007D16E                            ; ===========================================================================
0007D16E 6000 0000                  		bra.w	Sound_E2
0007D172                            ; ===========================================================================
0007D172 6000 0000                  		bra.w	Sound_E3
0007D176                            ; ===========================================================================
0007D176 6000 0000                  		bra.w	Sound_E4
0007D17A                            ; ===========================================================================
0007D17A 6000 0000                  		bra.w	Sound_E5
0007D17E                            ; ===========================================================================
0007D17E                            ; ---------------------------------------------------------------------------
0007D17E                            ; Play "Say-gaa" PCM sound
0007D17E                            ; ---------------------------------------------------------------------------
0007D17E                            
0007D17E                            Sound_E1:				  
0007D17E 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0007D186 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0007D18E 303C 007F                  		move.w	#127,d0				; delay so the YM doesn't crap itself
0007D192 51C8 FFFE                  		dbf	d0,*
0007D196 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007D19C 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0007D1A2 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007D1AA                            PlayPCM_Loop:	  
0007D1AA 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007D1B0 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0007D1B4 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007D1B8 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007D1BA 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007D1BC 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0007D1C0 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007D1C6 4EB8 143C                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007D1CA 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0007D1D0 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0007D1D2 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0007D1D4                            return_PlayPCM: 
0007D1D4 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; silence PCM to avoid an awful sounding click
0007D1DC 584F                       		addq.w	#4,sp 
0007D1DE 4E75                       		rts
0007D1E0                            		
0007D1E0                            ; ---------------------------------------------------------------------------
0007D1E0                            ; Play you are an idiot pcm sound
0007D1E0                            ; since the sfx already crashes the game forever load it here :V
0007D1E0                            ; ---------------------------------------------------------------------------
0007D1E0                            
0007D1E0                            Sound_E5: 
0007D1E0 4EB8 1514                  		jsr	ClearScreen
0007D1E4 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0007D1EC 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0007D1F4                            
0007D1F4                            		;control port on a5
0007D1F4 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
0007D1FA 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0007D200 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
0007D204 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
0007D208 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
0007D20C                            		
0007D20C 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0007D210                            		
0007D210 2ABC 4000 0000             		move.l	#$40000000,(a5)
0007D216 41F9 0002 4882             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
0007D21C 4EB8 1690                  		jsr	NemDec
0007D220 43F9 00FF 0000             		lea	($FF0000).l,a1
0007D226 41F9 0002 4824             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
0007D22C 303C 0000                  		move.w	#0,d0
0007D230 4EB8 196E                  		jsr	EniDec
0007D234 43F9 00FF 0000             		lea	($FF0000).l,a1
0007D23A 203C 4304 0003             		move.l	#$43040003,d0
0007D240 7223                       		moveq	#35,d1
0007D242 740D                       		moveq	#13,d2
0007D244 4EB8 1670                  		jsr	ShowVDPGraphics
0007D248 7014                       		moveq	#20,d0
0007D24A 4EB8 2334                  		jsr	PalLoad2	; load pallet
0007D24E                            
0007D24E                            
0007D24E 4BF9 00C0 0004             		lea	($C00004).l,a5
0007D254 50F8 FE25                  		st.b	($FFFFFE25).w			; start with -1, so the NOT makes it 0
0007D258 7600                       		moveq	#0,d3				; make @palett jump to @start when done
0007D25A 6000                       		bra.s	@palett
0007D25C                            @start:
0007D25C 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007D262 263C 0000 0000             		move.l	#IdiotPCM_End-IdiotPCM,d3	; Load the size of the idiot PCM sample into d3 
0007D268 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel
0007D270                            @loop:
0007D270 44D5                       		move.w	(a5),ccr
0007D272 6B00                       		bmi.s	@vblank
0007D274                            
0007D274 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007D27A 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007D27E 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007D282 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0007D284 66EA                       		bne.s	@loop				; if not zero, loop
0007D286 60D4                       		bra.s	@start
0007D288                            @vblank:
0007D288 0C38 000F FE24             		cmp.b	#15,($FFFFFE24).w
0007D28E 6700                       		beq.s	@palett
0007D290 5238 FE24                  		addq.b	#1,($FFFFFE24).w
0007D294                            @loop_vblank:
0007D294 44D5                       		move.w	(a5),ccr
0007D296 6AD8                       		bpl.s	@loop
0007D298                            
0007D298 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007D29E 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007D2A2 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007D2A6 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0007D2A8 66EA                       		bne.s	@loop_vblank			; if not zero, loop
0007D2AA 60B0                       		bra.s	@start
0007D2AC                            @palett:
0007D2AC 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
0007D2B2                            
0007D2B2 4238 FE24                  		clr.b	($FFFFFE24).w
0007D2B6 4638 FE25                  		not.b	($FFFFFE25).w
0007D2BA 6700                       		beq.s	@not_black
0007D2BC 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
0007D2C2 6000                       		bra.s	@merge
0007D2C4                            	@not_black:
0007D2C4 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0007D2CA                            	@merge:
0007D2CA 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
0007D2CE 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
0007D2D2 3F3C 0080                  		move.w	#$80+((0&$C000)>>14),-(sp) ;dest
0007D2D6 3A9F                       		move.w	(sp)+,(a5)
0007D2D8                            		
0007D2D8 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
0007D2DC 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
0007D2E0 4A83                       		tst.l	d3
0007D2E2 66B0                       		bne.s	@loop_vblank
0007D2E4 6000 FF76                  		bra.w	@start
0007D2E8                            ; ===========================================================================
0007D2E8                            ; ---------------------------------------------------------------------------
0007D2E8                            ; Play music track $81-$9F
0007D2E8                            ; ---------------------------------------------------------------------------
0007D2E8                            
0007D2E8                            Sound_81to9F:				; XREF: Sound_ChkValue
0007D2E8 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0007D2EC 6600                       		bne.s	loc_72024	; if not, branch
0007D2EE 4A2E 0027                  		tst.b	$27(a6)
0007D2F2 6600 0000                  		bne.w	loc_721B6
0007D2F6 4BEE 0040                  		lea	$40(a6),a5
0007D2FA 7009                       		moveq	#9,d0
0007D2FC                            
0007D2FC                            loc_71FE6:
0007D2FC 0895 0002                  		bclr	#2,(a5)
0007D300 DAFC 0030                  		adda.w	#$30,a5
0007D304 51C8 FFF6                  		dbf	d0,loc_71FE6
0007D308                            
0007D308 4BEE 0220                  		lea	$220(a6),a5
0007D30C 7005                       		moveq	#5,d0
0007D30E                            
0007D30E                            loc_71FF8:
0007D30E 0895 0007                  		bclr	#7,(a5)
0007D312 DAFC 0030                  		adda.w	#$30,a5
0007D316 51C8 FFF6                  		dbf	d0,loc_71FF8
0007D31A 4216                       		clr.b	0(a6)
0007D31C 204E                       		movea.l	a6,a0
0007D31E 43EE 03A0                  		lea	$3A0(a6),a1
0007D322 303C 0087                  		move.w	#$87,d0
0007D326                            
0007D326                            loc_72012:
0007D326 22D8                       		move.l	(a0)+,(a1)+
0007D328 51C8 FFFC                  		dbf	d0,loc_72012
0007D32C                            
0007D32C 1D7C 0080 0027             		move.b	#$80,$27(a6)
0007D332 4216                       		clr.b	0(a6)
0007D334 6000                       		bra.s	loc_7202C
0007D336                            ; ===========================================================================
0007D336                            
0007D336                            loc_72024:
0007D336 422E 0027                  		clr.b	$27(a6)
0007D33A 422E 0026                  		clr.b	$26(a6)
0007D33E                            
0007D33E                            loc_7202C:
0007D33E 4EBA 0000                  		jsr	sub_725CA(pc)
0007D342 2879 0007 CB28             		movea.l	(off_719A0).l,a4
0007D348 0407 0081                  		subi.b	#$81,d7
0007D34C 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007D352 2879 0007 CB20             		movea.l	(Go_MusicIndex).l,a4
0007D358 E54F                       		lsl.w	#2,d7
0007D35A 2874 7000                  		movea.l	(a4,d7.w),a4
0007D35E 7000                       		moveq	#0,d0
0007D360 3014                       		move.w	(a4),d0
0007D362 D08C                       		add.l	a4,d0
0007D364 2D40 0018                  		move.l	d0,$18(a6)
0007D368 102C 0005                  		move.b	5(a4),d0
0007D36C 1D40 0028                  		move.b	d0,$28(a6)
0007D370 4A2E 002A                  		tst.b	$2A(a6)
0007D374 6700                       		beq.s	loc_72068
0007D376 102E 0029                  		move.b	$29(a6),d0
0007D37A                            
0007D37A                            loc_72068:
0007D37A 1D40 0002                  		move.b	d0,2(a6)
0007D37E 1D40 0001                  		move.b	d0,1(a6)
0007D382 7200                       		moveq	#0,d1
0007D384 264C                       		movea.l	a4,a3
0007D386 5C4C                       		addq.w	#6,a4
0007D388 7E00                       		moveq	#0,d7
0007D38A 1E2B 0002                  		move.b	2(a3),d7
0007D38E 6700 0000                  		beq.w	loc_72114
0007D392 5307                       		subq.b	#1,d7
0007D394 123C 00C0                  		move.b	#-$40,d1
0007D398 182B 0004                  		move.b	4(a3),d4
0007D39C 7C30                       		moveq	#$30,d6
0007D39E 1A3C 0001                  		move.b	#1,d5
0007D3A2 43EE 0040                  		lea	$40(a6),a1
0007D3A6 45FA 0000                  		lea	byte_721BA(pc),a2
0007D3AA                            
0007D3AA                            loc_72098:
0007D3AA 08D1 0007                  		bset	#7,(a1)
0007D3AE 135A 0001                  		move.b	(a2)+,1(a1)
0007D3B2 1344 0002                  		move.b	d4,2(a1)
0007D3B6 1346 000D                  		move.b	d6,$D(a1)
0007D3BA 1341 000A                  		move.b	d1,$A(a1)
0007D3BE 1345 000E                  		move.b	d5,$E(a1)
0007D3C2 7000                       		moveq	#0,d0
0007D3C4 301C                       		move.w	(a4)+,d0
0007D3C6 D08B                       		add.l	a3,d0
0007D3C8 2340 0004                  		move.l	d0,4(a1)
0007D3CC 335C 0008                  		move.w	(a4)+,8(a1)
0007D3D0 D2C6                       		adda.w	d6,a1
0007D3D2 51CF FFD6                  		dbf	d7,loc_72098
0007D3D6 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0007D3DC 6600                       		bne.s	loc_720D8
0007D3DE 702B                       		moveq	#$2B,d0
0007D3E0 7200                       		moveq	#0,d1
0007D3E2 4EBA 0000                  		jsr	sub_7272E(pc)
0007D3E6 6000 0000                  		bra.w	loc_72114
0007D3EA                            ; ===========================================================================
0007D3EA                            
0007D3EA                            loc_720D8:
0007D3EA 7028                       		moveq	#$28,d0
0007D3EC 7206                       		moveq	#6,d1
0007D3EE 4EBA 0000                  		jsr	sub_7272E(pc)
0007D3F2 103C 0042                  		move.b	#$42,d0
0007D3F6 727F                       		moveq	#$7F,d1
0007D3F8 4EBA 0000                  		jsr	sub_72764(pc)
0007D3FC 103C 004A                  		move.b	#$4A,d0
0007D400 727F                       		moveq	#$7F,d1
0007D402 4EBA 0000                  		jsr	sub_72764(pc)
0007D406 103C 0046                  		move.b	#$46,d0
0007D40A 727F                       		moveq	#$7F,d1
0007D40C 4EBA 0000                  		jsr	sub_72764(pc)
0007D410 103C 004E                  		move.b	#$4E,d0
0007D414 727F                       		moveq	#$7F,d1
0007D416 4EBA 0000                  		jsr	sub_72764(pc)
0007D41A 103C 00B6                  		move.b	#-$4A,d0
0007D41E 123C 00C0                  		move.b	#-$40,d1
0007D422 4EBA 0000                  		jsr	sub_72764(pc)
0007D426                            
0007D426                            loc_72114:
0007D426 7E00                       		moveq	#0,d7
0007D428 1E2B 0003                  		move.b	3(a3),d7
0007D42C 6700                       		beq.s	loc_72154
0007D42E 5307                       		subq.b	#1,d7
0007D430 43EE 0190                  		lea	$190(a6),a1
0007D434 45FA 0000                  		lea	byte_721C2(pc),a2
0007D438                            
0007D438                            loc_72126:
0007D438 08D1 0007                  		bset	#7,(a1)
0007D43C 135A 0001                  		move.b	(a2)+,1(a1)
0007D440 1344 0002                  		move.b	d4,2(a1)
0007D444 1346 000D                  		move.b	d6,$D(a1)
0007D448 1345 000E                  		move.b	d5,$E(a1)
0007D44C 7000                       		moveq	#0,d0
0007D44E 301C                       		move.w	(a4)+,d0
0007D450 D08B                       		add.l	a3,d0
0007D452 2340 0004                  		move.l	d0,4(a1)
0007D456 335C 0008                  		move.w	(a4)+,8(a1)
0007D45A 101C                       		move.b	(a4)+,d0
0007D45C 135C 000B                  		move.b	(a4)+,$B(a1)
0007D460 D2C6                       		adda.w	d6,a1
0007D462 51CF FFD4                  		dbf	d7,loc_72126
0007D466                            
0007D466                            loc_72154:
0007D466 43EE 0220                  		lea	$220(a6),a1
0007D46A 7E05                       		moveq	#5,d7
0007D46C                            
0007D46C                            loc_7215A:
0007D46C 4A11                       		tst.b	(a1)
0007D46E 6A00 0000                  		bpl.w	loc_7217C
0007D472 7000                       		moveq	#0,d0
0007D474 1029 0001                  		move.b	1(a1),d0
0007D478 6B00                       		bmi.s	loc_7216E
0007D47A 5500                       		subq.b	#2,d0
0007D47C E508                       		lsl.b	#2,d0
0007D47E 6000                       		bra.s	loc_72170
0007D480                            ; ===========================================================================
0007D480                            
0007D480                            loc_7216E:
0007D480 E608                       		lsr.b	#3,d0
0007D482                            
0007D482                            loc_72170:
0007D482 41FA 0000                  		lea	dword_722CC(pc),a0
0007D486 2070 0000                  		movea.l	(a0,d0.w),a0
0007D48A 08D0 0002                  		bset	#2,(a0)
0007D48E                            
0007D48E                            loc_7217C:
0007D48E D2C6                       		adda.w	d6,a1
0007D490 51CF FFDA                  		dbf	d7,loc_7215A
0007D494                            
0007D494 4A6E 0340                  		tst.w	$340(a6)
0007D498 6A00                       		bpl.s	loc_7218E
0007D49A 08EE 0002 0100             		bset	#2,$100(a6)
0007D4A0                            
0007D4A0                            loc_7218E:
0007D4A0 4A6E 0370                  		tst.w	$370(a6)
0007D4A4 6A00                       		bpl.s	loc_7219A
0007D4A6 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007D4AC                            
0007D4AC                            loc_7219A:
0007D4AC 4BEE 0070                  		lea	$70(a6),a5
0007D4B0 7805                       		moveq	#5,d4
0007D4B2                            
0007D4B2                            loc_721A0:
0007D4B2 4EBA 0000                  		jsr	sub_726FE(pc)
0007D4B6 DAC6                       		adda.w	d6,a5
0007D4B8 51CC FFF8                  		dbf	d4,loc_721A0
0007D4BC 7802                       		moveq	#2,d4
0007D4BE                            
0007D4BE                            loc_721AC:
0007D4BE 4EBA 0000                  		jsr	sub_729A0(pc)
0007D4C2 DAC6                       		adda.w	d6,a5
0007D4C4 51CC FFF8                  		dbf	d4,loc_721AC
0007D4C8                            
0007D4C8                            loc_721B6:
0007D4C8 584F                       		addq.w	#4,sp
0007D4CA 4E75                       		rts	
0007D4CC                            ; ===========================================================================
0007D4CC 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0007D4D4                            		even
0007D4D4 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0007D4D8                            		even
0007D4D8                            ; ===========================================================================
0007D4D8                            ; ---------------------------------------------------------------------------
0007D4D8                            ; Play normal sound effect
0007D4D8                            ; ---------------------------------------------------------------------------
0007D4D8                            
0007D4D8                            Sound_A0toCF:				; XREF: Sound_ChkValue
0007D4D8 4A2E 0027                  		tst.b	$27(a6)
0007D4DC 6600 0000                  		bne.w	loc_722C6
0007D4E0 4A2E 0004                  		tst.b	4(a6)
0007D4E4 6600 0000                  		bne.w	loc_722C6
0007D4E8 4A2E 0024                  		tst.b	$24(a6)
0007D4EC 6600 0000                  		bne.w	loc_722C6
0007D4F0 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0007D4F4 6600                       		bne.s	Sound_notB5	; if not, branch
0007D4F6 4A2E 002B                  		tst.b	$2B(a6)
0007D4FA 6600                       		bne.s	loc_721EE
0007D4FC 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0007D500                            
0007D500                            loc_721EE:
0007D500 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0007D506                            
0007D506                            Sound_notB5:
0007D506 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0007D50A 6600                       		bne.s	Sound_notA7	; if not, branch
0007D50C 4A2E 002C                  		tst.b	$2C(a6)
0007D510 6600 0000                  		bne.w	locret_722C4
0007D514 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0007D51A                            
0007D51A                            Sound_notA7:
0007D51A 2079 0007 CB24             		movea.l	(Go_SoundIndex).l,a0
0007D520 0407 00A0                  		subi.b	#$A0,d7
0007D524 E54F                       		lsl.w	#2,d7
0007D526 2670 7000                  		movea.l	(a0,d7.w),a3
0007D52A 224B                       		movea.l	a3,a1
0007D52C 7200                       		moveq	#0,d1
0007D52E 3219                       		move.w	(a1)+,d1
0007D530 D28B                       		add.l	a3,d1
0007D532 1A19                       		move.b	(a1)+,d5
0007D534 1E19                       		move.b	(a1)+,d7
0007D536 5307                       		subq.b	#1,d7
0007D538 7C30                       		moveq	#$30,d6
0007D53A                            
0007D53A                            loc_72228:
0007D53A 7600                       		moveq	#0,d3
0007D53C 1629 0001                  		move.b	1(a1),d3
0007D540 1803                       		move.b	d3,d4
0007D542 6B00                       		bmi.s	loc_72244
0007D544 5543                       		subq.w	#2,d3
0007D546 E54B                       		lsl.w	#2,d3
0007D548 4BFA 0000                  		lea	dword_722CC(pc),a5
0007D54C 2A75 3000                  		movea.l	(a5,d3.w),a5
0007D550 08D5 0002                  		bset	#2,(a5)
0007D554 6000                       		bra.s	loc_7226E
0007D556                            ; ===========================================================================
0007D556                            
0007D556                            loc_72244:
0007D556 E64B                       		lsr.w	#3,d3
0007D558 4BFA 0000                  		lea	dword_722CC(pc),a5
0007D55C 2A75 3000                  		movea.l	(a5,d3.w),a5
0007D560 08D5 0002                  		bset	#2,(a5)
0007D564 0C04 00C0                  		cmpi.b	#$C0,d4
0007D568 6600                       		bne.s	loc_7226E
0007D56A 1004                       		move.b	d4,d0
0007D56C 0000 001F                  		ori.b	#$1F,d0
0007D570 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D576 0840 0005                  		bchg	#5,d0
0007D57A 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D580                            
0007D580                            loc_7226E:
0007D580 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0007D584 244D                       		movea.l	a5,a2
0007D586 700B                       		moveq	#$B,d0
0007D588                            
0007D588                            loc_72276:
0007D588 429A                       		clr.l	(a2)+
0007D58A 51C8 FFFC                  		dbf	d0,loc_72276
0007D58E                            
0007D58E 3A99                       		move.w	(a1)+,(a5)
0007D590 1B45 0002                  		move.b	d5,2(a5)
0007D594 7000                       		moveq	#0,d0
0007D596 3019                       		move.w	(a1)+,d0
0007D598 D08B                       		add.l	a3,d0
0007D59A 2B40 0004                  		move.l	d0,4(a5)
0007D59E 3B59 0008                  		move.w	(a1)+,8(a5)
0007D5A2 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D5A8 1B46 000D                  		move.b	d6,$D(a5)
0007D5AC 4A04                       		tst.b	d4
0007D5AE 6B00                       		bmi.s	loc_722A8
0007D5B0 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D5B6 2B41 0020                  		move.l	d1,$20(a5)
0007D5BA                            
0007D5BA                            loc_722A8:
0007D5BA 51CF FF7E                  		dbf	d7,loc_72228
0007D5BE                            
0007D5BE 4A2E 0250                  		tst.b	$250(a6)
0007D5C2 6A00                       		bpl.s	loc_722B8
0007D5C4 08EE 0002 0340             		bset	#2,$340(a6)
0007D5CA                            
0007D5CA                            loc_722B8:
0007D5CA 4A2E 0310                  		tst.b	$310(a6)
0007D5CE 6A00                       		bpl.s	locret_722C4
0007D5D0 08EE 0002 0370             		bset	#2,$370(a6)
0007D5D6                            
0007D5D6                            locret_722C4:
0007D5D6 4E75                       		rts	
0007D5D8                            ; ===========================================================================
0007D5D8                            
0007D5D8                            loc_722C6:
0007D5D8 4216                       		clr.b	0(a6)
0007D5DA 4E75                       		rts	
0007D5DC                            ; ===========================================================================
0007D5DC 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0007D5E0 0000 0000                  		dc.l 0
0007D5E4 00FF F100                  		dc.l $FFF100
0007D5E8 00FF F130                  		dc.l $FFF130
0007D5EC 00FF F190                  		dc.l $FFF190
0007D5F0 00FF F1C0                  		dc.l $FFF1C0
0007D5F4 00FF F1F0                  		dc.l $FFF1F0
0007D5F8 00FF F1F0                  		dc.l $FFF1F0
0007D5FC 00FF F220                  dword_722EC:	dc.l $FFF220
0007D600 0000 0000                  		dc.l 0
0007D604 00FF F250                  		dc.l $FFF250
0007D608 00FF F280                  		dc.l $FFF280
0007D60C 00FF F2B0                  		dc.l $FFF2B0
0007D610 00FF F2E0                  		dc.l $FFF2E0
0007D614 00FF F310                  		dc.l $FFF310
0007D618 00FF F310                  		dc.l $FFF310
0007D61C                            ; ===========================================================================
0007D61C                            ; ---------------------------------------------------------------------------
0007D61C                            ; Play GHZ waterfall sound
0007D61C                            ; ---------------------------------------------------------------------------
0007D61C                            
0007D61C                            Sound_D0toDF:				; XREF: Sound_ChkValue
0007D61C 4A2E 0027                  		tst.b	$27(a6)
0007D620 6600 0000                  		bne.w	locret_723C6
0007D624 4A2E 0004                  		tst.b	4(a6)
0007D628 6600 0000                  		bne.w	locret_723C6
0007D62C 4A2E 0024                  		tst.b	$24(a6)
0007D630 6600 0000                  		bne.w	locret_723C6
0007D634 2079 0007 CB1C             		movea.l	(Go_SoundD0).l,a0
0007D63A 0407 00D0                  		subi.b	#$D0,d7
0007D63E E54F                       		lsl.w	#2,d7
0007D640 2670 7000                  		movea.l	(a0,d7.w),a3
0007D644 224B                       		movea.l	a3,a1
0007D646 7000                       		moveq	#0,d0
0007D648 3019                       		move.w	(a1)+,d0
0007D64A D08B                       		add.l	a3,d0
0007D64C 2D40 0020                  		move.l	d0,$20(a6)
0007D650 1A19                       		move.b	(a1)+,d5
0007D652 1E19                       		move.b	(a1)+,d7
0007D654 5307                       		subq.b	#1,d7
0007D656 7C30                       		moveq	#$30,d6
0007D658                            
0007D658                            loc_72348:
0007D658 1829 0001                  		move.b	1(a1),d4
0007D65C 6B00                       		bmi.s	loc_7235A
0007D65E 08EE 0002 0100             		bset	#2,$100(a6)
0007D664 4BEE 0340                  		lea	$340(a6),a5
0007D668 6000                       		bra.s	loc_72364
0007D66A                            ; ===========================================================================
0007D66A                            
0007D66A                            loc_7235A:
0007D66A 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007D670 4BEE 0370                  		lea	$370(a6),a5
0007D674                            
0007D674                            loc_72364:
0007D674 244D                       		movea.l	a5,a2
0007D676 700B                       		moveq	#$B,d0
0007D678                            
0007D678                            loc_72368:
0007D678 429A                       		clr.l	(a2)+
0007D67A 51C8 FFFC                  		dbf	d0,loc_72368
0007D67E                            
0007D67E 3A99                       		move.w	(a1)+,(a5)
0007D680 1B45 0002                  		move.b	d5,2(a5)
0007D684 7000                       		moveq	#0,d0
0007D686 3019                       		move.w	(a1)+,d0
0007D688 D08B                       		add.l	a3,d0
0007D68A 2B40 0004                  		move.l	d0,4(a5)
0007D68E 3B59 0008                  		move.w	(a1)+,8(a5)
0007D692 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D698 1B46 000D                  		move.b	d6,$D(a5)
0007D69C 4A04                       		tst.b	d4
0007D69E 6B00                       		bmi.s	loc_72396
0007D6A0 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D6A6                            
0007D6A6                            loc_72396:
0007D6A6 51CF FFB0                  		dbf	d7,loc_72348
0007D6AA                            
0007D6AA 4A2E 0250                  		tst.b	$250(a6)
0007D6AE 6A00                       		bpl.s	loc_723A6
0007D6B0 08EE 0002 0340             		bset	#2,$340(a6)
0007D6B6                            
0007D6B6                            loc_723A6:
0007D6B6 4A2E 0310                  		tst.b	$310(a6)
0007D6BA 6A00                       		bpl.s	locret_723C6
0007D6BC 08EE 0002 0370             		bset	#2,$370(a6)
0007D6C2 0004 001F                  		ori.b	#$1F,d4
0007D6C6 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D6CC 0844 0005                  		bchg	#5,d4
0007D6D0 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D6D6                            
0007D6D6                            locret_723C6:
0007D6D6 4E75                       		rts	
0007D6D8                            ; End of function Sound_ChkValue
0007D6D8                            
0007D6D8                            ; ===========================================================================
0007D6D8 00FF F100                  		dc.l $FFF100
0007D6DC 00FF F1F0                  		dc.l $FFF1F0
0007D6E0 00FF F250                  		dc.l $FFF250
0007D6E4 00FF F310                  		dc.l $FFF310
0007D6E8 00FF F340                  		dc.l $FFF340
0007D6EC 00FF F370                  		dc.l $FFF370
0007D6F0                            
0007D6F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D6F0                            
0007D6F0                            
0007D6F0                            Snd_FadeOut1:				; XREF: Sound_E0
0007D6F0 4216                       		clr.b	0(a6)
0007D6F2 4BEE 0220                  		lea	$220(a6),a5
0007D6F6 7E05                       		moveq	#5,d7
0007D6F8                            
0007D6F8                            loc_723EA:
0007D6F8 4A15                       		tst.b	(a5)
0007D6FA 6A00 0000                  		bpl.w	loc_72472
0007D6FE 0895 0007                  		bclr	#7,(a5)
0007D702 7600                       		moveq	#0,d3
0007D704 162D 0001                  		move.b	1(a5),d3
0007D708 6B00                       		bmi.s	loc_7243C
0007D70A 4EBA 0000                  		jsr	sub_726FE(pc)
0007D70E 0C03 0004                  		cmpi.b	#4,d3
0007D712 6600                       		bne.s	loc_72416
0007D714 4A2E 0340                  		tst.b	$340(a6)
0007D718 6A00                       		bpl.s	loc_72416
0007D71A 4BEE 0340                  		lea	$340(a6),a5
0007D71E 226E 0020                  		movea.l	$20(a6),a1
0007D722 6000                       		bra.s	loc_72428
0007D724                            ; ===========================================================================
0007D724                            
0007D724                            loc_72416:
0007D724 5503                       		subq.b	#2,d3
0007D726 E50B                       		lsl.b	#2,d3
0007D728 41FA FEB2                  		lea	dword_722CC(pc),a0
0007D72C 264D                       		movea.l	a5,a3
0007D72E 2A70 3000                  		movea.l	(a0,d3.w),a5
0007D732 226E 0018                  		movea.l	$18(a6),a1
0007D736                            
0007D736                            loc_72428:
0007D736 0895 0002                  		bclr	#2,(a5)
0007D73A 08D5 0001                  		bset	#1,(a5)
0007D73E 102D 000B                  		move.b	$B(a5),d0
0007D742 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D746 2A4B                       		movea.l	a3,a5
0007D748 6000                       		bra.s	loc_72472
0007D74A                            ; ===========================================================================
0007D74A                            
0007D74A                            loc_7243C:
0007D74A 4EBA 0000                  		jsr	sub_729A0(pc)
0007D74E 41EE 0370                  		lea	$370(a6),a0
0007D752 0C03 00E0                  		cmpi.b	#$E0,d3
0007D756 6700                       		beq.s	loc_7245A
0007D758 0C03 00C0                  		cmpi.b	#$C0,d3
0007D75C 6700                       		beq.s	loc_7245A
0007D75E E60B                       		lsr.b	#3,d3
0007D760 41FA FE7A                  		lea	dword_722CC(pc),a0
0007D764 2070 3000                  		movea.l	(a0,d3.w),a0
0007D768                            
0007D768                            loc_7245A:
0007D768 0890 0002                  		bclr	#2,(a0)
0007D76C 08D0 0001                  		bset	#1,(a0)
0007D770 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007D776 6600                       		bne.s	loc_72472
0007D778 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007D780                            
0007D780                            loc_72472:
0007D780 DAFC 0030                  		adda.w	#$30,a5
0007D784 51CF FF72                  		dbf	d7,loc_723EA
0007D788                            
0007D788 4E75                       		rts	
0007D78A                            ; End of function Snd_FadeOut1
0007D78A                            
0007D78A                            
0007D78A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D78A                            
0007D78A                            
0007D78A                            Snd_FadeOut2:				; XREF: Sound_E0
0007D78A 4BEE 0340                  		lea	$340(a6),a5
0007D78E 4A15                       		tst.b	(a5)
0007D790 6A00                       		bpl.s	loc_724AE
0007D792 0895 0007                  		bclr	#7,(a5)
0007D796 0815 0002                  		btst	#2,(a5)
0007D79A 6600                       		bne.s	loc_724AE
0007D79C 4EBA 0000                  		jsr	loc_7270A(pc)
0007D7A0 4BEE 0100                  		lea	$100(a6),a5
0007D7A4 0895 0002                  		bclr	#2,(a5)
0007D7A8 08D5 0001                  		bset	#1,(a5)
0007D7AC 4A15                       		tst.b	(a5)
0007D7AE 6A00                       		bpl.s	loc_724AE
0007D7B0 226E 0018                  		movea.l	$18(a6),a1
0007D7B4 102D 000B                  		move.b	$B(a5),d0
0007D7B8 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D7BC                            
0007D7BC                            loc_724AE:
0007D7BC 4BEE 0370                  		lea	$370(a6),a5
0007D7C0 4A15                       		tst.b	(a5)
0007D7C2 6A00                       		bpl.s	locret_724E4
0007D7C4 0895 0007                  		bclr	#7,(a5)
0007D7C8 0815 0002                  		btst	#2,(a5)
0007D7CC 6600                       		bne.s	locret_724E4
0007D7CE 4EBA 0000                  		jsr	loc_729A6(pc)
0007D7D2 4BEE 01F0                  		lea	$1F0(a6),a5
0007D7D6 0895 0002                  		bclr	#2,(a5)
0007D7DA 08D5 0001                  		bset	#1,(a5)
0007D7DE 4A15                       		tst.b	(a5)
0007D7E0 6A00                       		bpl.s	locret_724E4
0007D7E2 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0007D7E8 6600                       		bne.s	locret_724E4
0007D7EA 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0007D7F2                            
0007D7F2                            locret_724E4:
0007D7F2 4E75                       		rts	
0007D7F4                            ; End of function Snd_FadeOut2
0007D7F4                            
0007D7F4                            ; ===========================================================================
0007D7F4                            ; ---------------------------------------------------------------------------
0007D7F4                            ; Fade out music
0007D7F4                            ; ---------------------------------------------------------------------------
0007D7F4                            
0007D7F4                            Sound_E0:				; XREF: Sound_ExIndex
0007D7F4 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0007D7F8 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007D7FC 1D7C 0003 0006             		move.b	#3,6(a6)
0007D802 1D7C 0028 0004             		move.b	#$28,4(a6)
0007D808 422E 0040                  		clr.b	$40(a6)
0007D80C 422E 002A                  		clr.b	$2A(a6)
0007D810 4E75                       		rts	
0007D812                            
0007D812                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D812                            
0007D812                            
0007D812                            sub_72504:				; XREF: sub_71B4C
0007D812 102E 0006                  		move.b	6(a6),d0
0007D816 6700                       		beq.s	loc_72510
0007D818 532E 0006                  		subq.b	#1,6(a6)
0007D81C 4E75                       		rts	
0007D81E                            ; ===========================================================================
0007D81E                            
0007D81E                            loc_72510:
0007D81E 532E 0004                  		subq.b	#1,4(a6)
0007D822 6700 0000                  		beq.w	Sound_E4
0007D826 1D7C 0003 0006             		move.b	#3,6(a6)
0007D82C 4BEE 0070                  		lea	$70(a6),a5
0007D830 7E05                       		moveq	#5,d7
0007D832                            
0007D832                            loc_72524:
0007D832 4A15                       		tst.b	(a5)
0007D834 6A00                       		bpl.s	loc_72538
0007D836 522D 0009                  		addq.b	#1,9(a5)
0007D83A 6A00                       		bpl.s	loc_72534
0007D83C 0895 0007                  		bclr	#7,(a5)
0007D840 6000                       		bra.s	loc_72538
0007D842                            ; ===========================================================================
0007D842                            
0007D842                            loc_72534:
0007D842 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D846                            
0007D846                            loc_72538:
0007D846 DAFC 0030                  		adda.w	#$30,a5
0007D84A 51CF FFE6                  		dbf	d7,loc_72524
0007D84E                            
0007D84E 7E02                       		moveq	#2,d7
0007D850                            
0007D850                            loc_72542:
0007D850 4A15                       		tst.b	(a5)
0007D852 6A00                       		bpl.s	loc_72560
0007D854 522D 0009                  		addq.b	#1,9(a5)
0007D858 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0007D85E 6500                       		bcs.s	loc_72558
0007D860 0895 0007                  		bclr	#7,(a5)
0007D864 6000                       		bra.s	loc_72560
0007D866                            ; ===========================================================================
0007D866                            
0007D866                            loc_72558:
0007D866 1C2D 0009                  		move.b	9(a5),d6
0007D86A 4EBA 0000                  		jsr	sub_7296A(pc)
0007D86E                            
0007D86E                            loc_72560:
0007D86E DAFC 0030                  		adda.w	#$30,a5
0007D872 51CF FFDC                  		dbf	d7,loc_72542
0007D876                            
0007D876 4E75                       		rts	
0007D878                            ; End of function sub_72504
0007D878                            
0007D878                            
0007D878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D878                            
0007D878                            
0007D878                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007D878 7602                       		moveq	#2,d3
0007D87A 7028                       		moveq	#$28,d0
0007D87C                            
0007D87C                            loc_7256E:
0007D87C 1203                       		move.b	d3,d1
0007D87E 4EBA 0000                  		jsr	sub_7272E(pc)
0007D882 5801                       		addq.b	#4,d1
0007D884 4EBA 0000                  		jsr	sub_7272E(pc)
0007D888 51CB FFF2                  		dbf	d3,loc_7256E
0007D88C                            
0007D88C 7040                       		moveq	#$40,d0
0007D88E 727F                       		moveq	#$7F,d1
0007D890 7802                       		moveq	#2,d4
0007D892                            
0007D892                            loc_72584:
0007D892 7603                       		moveq	#3,d3
0007D894                            
0007D894                            loc_72586:
0007D894 4EBA 0000                  		jsr	sub_7272E(pc)
0007D898 4EBA 0000                  		jsr	sub_72764(pc)
0007D89C 5840                       		addq.w	#4,d0
0007D89E 51CB FFF4                  		dbf	d3,loc_72586
0007D8A2                            
0007D8A2 0400 000F                  		subi.b	#$F,d0
0007D8A6 51CC FFEA                  		dbf	d4,loc_72584
0007D8AA                            
0007D8AA 4E75                       		rts	
0007D8AC                            ; End of function sub_7256A
0007D8AC                            
0007D8AC                            ; ===========================================================================
0007D8AC                            ; ---------------------------------------------------------------------------
0007D8AC                            ; Stop music
0007D8AC                            ; ---------------------------------------------------------------------------
0007D8AC                            
0007D8AC                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007D8AC 702B                       		moveq	#$2B,d0
0007D8AE 123C 0080                  		move.b	#$80,d1
0007D8B2 4EBA 0000                  		jsr	sub_7272E(pc)
0007D8B6 7027                       		moveq	#$27,d0
0007D8B8 7200                       		moveq	#0,d1
0007D8BA 4EBA 0000                  		jsr	sub_7272E(pc)
0007D8BE 204E                       		movea.l	a6,a0
0007D8C0 303C 00E3                  		move.w	#$E3,d0
0007D8C4                            
0007D8C4                            loc_725B6:
0007D8C4 4298                       		clr.l	(a0)+
0007D8C6 51C8 FFFC                  		dbf	d0,loc_725B6
0007D8CA                            
0007D8CA 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0007D8D0 4EBA FFA6                  		jsr	sub_7256A(pc)
0007D8D4 6000 0000                  		bra.w	sub_729B6
0007D8D8                            
0007D8D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D8D8                            
0007D8D8                            
0007D8D8                            sub_725CA:				; XREF: Sound_ChkValue
0007D8D8 204E                       		movea.l	a6,a0
0007D8DA 1216                       		move.b	0(a6),d1
0007D8DC 142E 0027                  		move.b	$27(a6),d2
0007D8E0 162E 002A                  		move.b	$2A(a6),d3
0007D8E4 182E 0026                  		move.b	$26(a6),d4
0007D8E8 3A2E 000A                  		move.w	$A(a6),d5
0007D8EC 303C 0087                  		move.w	#$87,d0
0007D8F0                            
0007D8F0                            loc_725E4:
0007D8F0 4298                       		clr.l	(a0)+
0007D8F2 51C8 FFFC                  		dbf	d0,loc_725E4
0007D8F6                            
0007D8F6 1C81                       		move.b	d1,0(a6)
0007D8F8 1D42 0027                  		move.b	d2,$27(a6)
0007D8FC 1D43 002A                  		move.b	d3,$2A(a6)
0007D900 1D44 0026                  		move.b	d4,$26(a6)
0007D904 3D45 000A                  		move.w	d5,$A(a6)
0007D908 1D7C 0080 0009             		move.b	#$80,9(a6)
0007D90E 4EBA FF68                  		jsr	sub_7256A(pc)
0007D912 6000 0000                  		bra.w	sub_729B6
0007D916                            ; End of function sub_725CA
0007D916                            
0007D916                            
0007D916                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D916                            
0007D916                            
0007D916                            sub_7260C:				; XREF: sub_71B4C
0007D916 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007D91C 41EE 004E                  		lea	$4E(a6),a0
0007D920 7030                       		moveq	#$30,d0
0007D922 7209                       		moveq	#9,d1
0007D924                            
0007D924                            loc_7261A:
0007D924 5210                       		addq.b	#1,(a0)
0007D926 D0C0                       		adda.w	d0,a0
0007D928 51C9 FFFA                  		dbf	d1,loc_7261A
0007D92C                            
0007D92C 4E75                       		rts	
0007D92E                            ; End of function sub_7260C
0007D92E                            
0007D92E                            ; ===========================================================================
0007D92E                            ; ---------------------------------------------------------------------------
0007D92E                            ; Speed	up music
0007D92E                            ; ---------------------------------------------------------------------------
0007D92E                            
0007D92E                            Sound_E2:				; XREF: Sound_ExIndex
0007D92E 4A2E 0027                  		tst.b	$27(a6)
0007D932 6600                       		bne.s	loc_7263E
0007D934 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007D93A 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0007D940 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0007D946 4E75                       		rts	
0007D948                            ; ===========================================================================
0007D948                            
0007D948                            loc_7263E:
0007D948 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007D94E 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0007D954 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007D95A 4E75                       		rts	
0007D95C                            ; ===========================================================================
0007D95C                            ; ---------------------------------------------------------------------------
0007D95C                            ; Change music back to normal speed
0007D95C                            ; ---------------------------------------------------------------------------
0007D95C                            
0007D95C                            Sound_E3:				; XREF: Sound_ExIndex
0007D95C 4A2E 0027                  		tst.b	$27(a6)
0007D960 6600                       		bne.s	loc_7266A
0007D962 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007D968 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007D96E 422E 002A                  		clr.b	$2A(a6)
0007D972 4E75                       		rts	
0007D974                            ; ===========================================================================
0007D974                            
0007D974                            loc_7266A:
0007D974 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007D97A 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007D980 422E 03CA                  		clr.b	$3CA(a6)
0007D984 4E75                       		rts	
0007D986                            
0007D986                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D986                            
0007D986                            
0007D986                            sub_7267C:				; XREF: sub_71B4C
0007D986 4A2E 0025                  		tst.b	$25(a6)
0007D98A 6700                       		beq.s	loc_72688
0007D98C 532E 0025                  		subq.b	#1,$25(a6)
0007D990 4E75                       		rts	
0007D992                            ; ===========================================================================
0007D992                            
0007D992                            loc_72688:
0007D992 4A2E 0026                  		tst.b	$26(a6)
0007D996 6700                       		beq.s	loc_726D6
0007D998 532E 0026                  		subq.b	#1,$26(a6)
0007D99C 1D7C 0002 0025             		move.b	#2,$25(a6)
0007D9A2 4BEE 0070                  		lea	$70(a6),a5
0007D9A6 7E05                       		moveq	#5,d7
0007D9A8                            
0007D9A8                            loc_7269E:
0007D9A8 4A15                       		tst.b	(a5)
0007D9AA 6A00                       		bpl.s	loc_726AA
0007D9AC 532D 0009                  		subq.b	#1,9(a5)
0007D9B0 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D9B4                            
0007D9B4                            loc_726AA:
0007D9B4 DAFC 0030                  		adda.w	#$30,a5
0007D9B8 51CF FFEE                  		dbf	d7,loc_7269E
0007D9BC 7E02                       		moveq	#2,d7
0007D9BE                            
0007D9BE                            loc_726B4:
0007D9BE 4A15                       		tst.b	(a5)
0007D9C0 6A00                       		bpl.s	loc_726CC
0007D9C2 532D 0009                  		subq.b	#1,9(a5)
0007D9C6 1C2D 0009                  		move.b	9(a5),d6
0007D9CA 0C06 0010                  		cmpi.b	#$10,d6
0007D9CE 6500                       		bcs.s	loc_726C8
0007D9D0 7C0F                       		moveq	#$F,d6
0007D9D2                            
0007D9D2                            loc_726C8:
0007D9D2 4EBA 0000                  		jsr	sub_7296A(pc)
0007D9D6                            
0007D9D6                            loc_726CC:
0007D9D6 DAFC 0030                  		adda.w	#$30,a5
0007D9DA 51CF FFE2                  		dbf	d7,loc_726B4
0007D9DE 4E75                       		rts	
0007D9E0                            ; ===========================================================================
0007D9E0                            
0007D9E0                            loc_726D6:
0007D9E0 08AE 0002 0040             		bclr	#2,$40(a6)
0007D9E6 422E 0024                  		clr.b	$24(a6)
0007D9EA 4E75                       		rts	
0007D9EC                            ; End of function sub_7267C
0007D9EC                            
0007D9EC                            ; ===========================================================================
0007D9EC                            
0007D9EC                            loc_726E2:				; XREF: sub_71CCA
0007D9EC 0815 0001                  		btst	#1,(a5)
0007D9F0 6600                       		bne.s	locret_726FC
0007D9F2 0815 0002                  		btst	#2,(a5)
0007D9F6 6600                       		bne.s	locret_726FC
0007D9F8 7028                       		moveq	#$28,d0
0007D9FA 122D 0001                  		move.b	1(a5),d1
0007D9FE 0001 00F0                  		ori.b	#-$10,d1
0007DA02 6000 0000                  		bra.w	sub_7272E
0007DA06                            ; ===========================================================================
0007DA06                            
0007DA06                            locret_726FC:
0007DA06 4E75                       		rts	
0007DA08                            
0007DA08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA08                            
0007DA08                            
0007DA08                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0007DA08 0815 0004                  		btst	#4,(a5)
0007DA0C 6600                       		bne.s	locret_72714
0007DA0E 0815 0002                  		btst	#2,(a5)
0007DA12 6600                       		bne.s	locret_72714
0007DA14                            
0007DA14                            loc_7270A:				; XREF: Snd_FadeOut2
0007DA14 7028                       		moveq	#$28,d0
0007DA16 122D 0001                  		move.b	1(a5),d1
0007DA1A 6000 0000                  		bra.w	sub_7272E
0007DA1E                            ; ===========================================================================
0007DA1E                            
0007DA1E                            locret_72714:
0007DA1E 4E75                       		rts	
0007DA20                            ; End of function sub_726FE
0007DA20                            
0007DA20                            ; ===========================================================================
0007DA20                            
0007DA20                            loc_72716:				; XREF: sub_72A5A
0007DA20 0815 0002                  		btst	#2,(a5)
0007DA24 6600                       		bne.s	locret_72720
0007DA26 6000 0000                  		bra.w	sub_72722
0007DA2A                            ; ===========================================================================
0007DA2A                            
0007DA2A                            locret_72720:
0007DA2A 4E75                       		rts	
0007DA2C                            
0007DA2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA2C                            
0007DA2C                            
0007DA2C                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007DA2C 082D 0002 0001             		btst	#2,1(a5)
0007DA32 6600                       		bne.s	loc_7275A
0007DA34 D02D 0001                  		add.b	1(a5),d0
0007DA38                            ; End of function sub_72722
0007DA38                            
0007DA38                            
0007DA38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA38                            
0007DA38                            
0007DA38                            sub_7272E:				; XREF: loc_71E6A
0007DA38 1439 00A0 4000             		move.b	($A04000).l,d2
0007DA3E 0802 0007                  		btst	#7,d2
0007DA42 66F4                       		bne.s	sub_7272E
0007DA44 13C0 00A0 4000             		move.b	d0,($A04000).l
0007DA4A 4E71                       		nop	
0007DA4C 4E71                       		nop	
0007DA4E 4E71                       		nop	
0007DA50                            
0007DA50                            loc_72746:
0007DA50 1439 00A0 4000             		move.b	($A04000).l,d2
0007DA56 0802 0007                  		btst	#7,d2
0007DA5A 66F4                       		bne.s	loc_72746
0007DA5C                            
0007DA5C 13C1 00A0 4001             		move.b	d1,($A04001).l
0007DA62 4E75                       		rts	
0007DA64                            ; End of function sub_7272E
0007DA64                            
0007DA64                            ; ===========================================================================
0007DA64                            
0007DA64                            loc_7275A:				; XREF: sub_72722
0007DA64 142D 0001                  		move.b	1(a5),d2
0007DA68 0882 0002                  		bclr	#2,d2
0007DA6C D002                       		add.b	d2,d0
0007DA6E                            
0007DA6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA6E                            
0007DA6E                            
0007DA6E                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007DA6E 1439 00A0 4000             		move.b	($A04000).l,d2
0007DA74 0802 0007                  		btst	#7,d2
0007DA78 66F4                       		bne.s	sub_72764
0007DA7A 13C0 00A0 4002             		move.b	d0,($A04002).l
0007DA80 4E71                       		nop	
0007DA82 4E71                       		nop	
0007DA84 4E71                       		nop	
0007DA86                            
0007DA86                            loc_7277C:
0007DA86 1439 00A0 4000             		move.b	($A04000).l,d2
0007DA8C 0802 0007                  		btst	#7,d2
0007DA90 66F4                       		bne.s	loc_7277C
0007DA92                            
0007DA92 13C1 00A0 4003             		move.b	d1,($A04003).l
0007DA98 4E75                       		rts	
0007DA9A                            ; End of function sub_72764
0007DA9A                            
0007DA9A                            ; ===========================================================================
0007DA9A 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007DAAC 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007DABE 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007DACE 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007DADE 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007DAEE 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007DAFE 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007DB0E 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007DB1E 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007DB2E 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007DB3E 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0007DB4E 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007DB5A                            
0007DB5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DB5A                            
0007DB5A                            
0007DB5A                            sub_72850:				; XREF: sub_71B4C
0007DB5A 532D 000E                  		subq.b	#1,$E(a5)
0007DB5E 6600                       		bne.s	loc_72866
0007DB60 0895 0004                  		bclr	#4,(a5)
0007DB64 4EBA 0000                  		jsr	sub_72878(pc)
0007DB68 4EBA 0000                  		jsr	sub_728DC(pc)
0007DB6C 6000 0000                  		bra.w	loc_7292E
0007DB70                            ; ===========================================================================
0007DB70                            
0007DB70                            loc_72866:
0007DB70 4EBA F3FE                  		jsr	sub_71D9E(pc)
0007DB74 4EBA 0000                  		jsr	sub_72926(pc)
0007DB78 4EBA F41E                  		jsr	sub_71DC6(pc)
0007DB7C 4EBA 0000                  		jsr	sub_728E2(pc)
0007DB80 4E75                       		rts	
0007DB82                            ; End of function sub_72850
0007DB82                            
0007DB82                            
0007DB82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DB82                            
0007DB82                            
0007DB82                            sub_72878:				; XREF: sub_72850
0007DB82 0895 0001                  		bclr	#1,(a5)
0007DB86 286D 0004                  		movea.l	4(a5),a4
0007DB8A                            
0007DB8A                            loc_72880:
0007DB8A 7A00                       		moveq	#0,d5
0007DB8C 1A1C                       		move.b	(a4)+,d5
0007DB8E 0C05 00E0                  		cmpi.b	#$E0,d5
0007DB92 6500                       		bcs.s	loc_72890
0007DB94 4EBA 0000                  		jsr	sub_72A5A(pc)
0007DB98 60F0                       		bra.s	loc_72880
0007DB9A                            ; ===========================================================================
0007DB9A                            
0007DB9A                            loc_72890:
0007DB9A 4A05                       		tst.b	d5
0007DB9C 6A00                       		bpl.s	loc_728A4
0007DB9E 4EBA 0000                  		jsr	sub_728AC(pc)
0007DBA2 1A1C                       		move.b	(a4)+,d5
0007DBA4 4A05                       		tst.b	d5
0007DBA6 6A00                       		bpl.s	loc_728A4
0007DBA8 534C                       		subq.w	#1,a4
0007DBAA 6000 F386                  		bra.w	sub_71D60
0007DBAE                            ; ===========================================================================
0007DBAE                            
0007DBAE                            loc_728A4:
0007DBAE 4EBA F362                  		jsr	sub_71D40(pc)
0007DBB2 6000 F37E                  		bra.w	sub_71D60
0007DBB6                            ; End of function sub_72878
0007DBB6                            
0007DBB6                            
0007DBB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DBB6                            
0007DBB6                            
0007DBB6                            sub_728AC:				; XREF: sub_72878
0007DBB6 0405 0081                  		subi.b	#$81,d5
0007DBBA 6500                       		bcs.s	loc_728CA
0007DBBC DA2D 0008                  		add.b	8(a5),d5
0007DBC0 0245 007F                  		andi.w	#$7F,d5
0007DBC4 E34D                       		lsl.w	#1,d5
0007DBC6 41FA 0000                  		lea	word_729CE(pc),a0
0007DBCA 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0007DBD0 6000 F360                  		bra.w	sub_71D60
0007DBD4                            ; ===========================================================================
0007DBD4                            
0007DBD4                            loc_728CA:
0007DBD4 08D5 0001                  		bset	#1,(a5)
0007DBD8 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0007DBDE 4EBA F352                  		jsr	sub_71D60(pc)
0007DBE2 6000 0000                  		bra.w	sub_729A0
0007DBE6                            ; End of function sub_728AC
0007DBE6                            
0007DBE6                            
0007DBE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DBE6                            
0007DBE6                            
0007DBE6                            sub_728DC:				; XREF: sub_72850
0007DBE6 3C2D 0010                  		move.w	$10(a5),d6
0007DBEA 6B00                       		bmi.s	loc_72920
0007DBEC                            ; End of function sub_728DC
0007DBEC                            
0007DBEC                            
0007DBEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DBEC                            
0007DBEC                            
0007DBEC                            sub_728E2:				; XREF: sub_72850
0007DBEC 102D 001E                  		move.b	$1E(a5),d0
0007DBF0 4880                       		ext.w	d0
0007DBF2 DC40                       		add.w	d0,d6
0007DBF4 0815 0002                  		btst	#2,(a5)
0007DBF8 6600                       		bne.s	locret_7291E
0007DBFA 0815 0001                  		btst	#1,(a5)
0007DBFE 6600                       		bne.s	locret_7291E
0007DC00 102D 0001                  		move.b	1(a5),d0
0007DC04 0C00 00E0                  		cmpi.b	#$E0,d0
0007DC08 6600                       		bne.s	loc_72904
0007DC0A 103C 00C0                  		move.b	#$C0,d0
0007DC0E                            
0007DC0E                            loc_72904:
0007DC0E 3206                       		move.w	d6,d1
0007DC10 0201 000F                  		andi.b	#$F,d1
0007DC14 8001                       		or.b	d1,d0
0007DC16 E84E                       		lsr.w	#4,d6
0007DC18 0206 003F                  		andi.b	#$3F,d6
0007DC1C 13C0 00C0 0011             		move.b	d0,($C00011).l
0007DC22 13C6 00C0 0011             		move.b	d6,($C00011).l
0007DC28                            
0007DC28                            locret_7291E:
0007DC28 4E75                       		rts	
0007DC2A                            ; End of function sub_728E2
0007DC2A                            
0007DC2A                            ; ===========================================================================
0007DC2A                            
0007DC2A                            loc_72920:				; XREF: sub_728DC
0007DC2A 08D5 0001                  		bset	#1,(a5)
0007DC2E 4E75                       		rts	
0007DC30                            
0007DC30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DC30                            
0007DC30                            
0007DC30                            sub_72926:				; XREF: sub_72850
0007DC30 4A2D 000B                  		tst.b	$B(a5)
0007DC34 6700 0000                  		beq.w	locret_7298A
0007DC38                            
0007DC38                            loc_7292E:				; XREF: sub_72850
0007DC38 1C2D 0009                  		move.b	9(a5),d6
0007DC3C 7000                       		moveq	#0,d0
0007DC3E 102D 000B                  		move.b	$B(a5),d0
0007DC42 6700                       		beq.s	sub_7296A
0007DC44 2079 0007 CB2C             		movea.l	(Go_PSGIndex).l,a0
0007DC4A 5340                       		subq.w	#1,d0
0007DC4C E548                       		lsl.w	#2,d0
0007DC4E 2070 0000                  		movea.l	(a0,d0.w),a0
0007DC52 102D 000C                  		move.b	$C(a5),d0
0007DC56 1030 0000                  		move.b	(a0,d0.w),d0
0007DC5A 522D 000C                  		addq.b	#1,$C(a5)
0007DC5E 0800 0007                  		btst	#7,d0
0007DC62 6700                       		beq.s	loc_72960
0007DC64 0C00 0080                  		cmpi.b	#$80,d0
0007DC68 6700                       		beq.s	loc_7299A
0007DC6A                            
0007DC6A                            loc_72960:
0007DC6A DC40                       		add.w	d0,d6
0007DC6C 0C06 0010                  		cmpi.b	#$10,d6
0007DC70 6500                       		bcs.s	sub_7296A
0007DC72 7C0F                       		moveq	#$F,d6
0007DC74                            ; End of function sub_72926
0007DC74                            
0007DC74                            
0007DC74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DC74                            
0007DC74                            
0007DC74                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0007DC74 0815 0001                  		btst	#1,(a5)
0007DC78 6600                       		bne.s	locret_7298A
0007DC7A 0815 0002                  		btst	#2,(a5)
0007DC7E 6600                       		bne.s	locret_7298A
0007DC80 0815 0004                  		btst	#4,(a5)
0007DC84 6600                       		bne.s	loc_7298C
0007DC86                            
0007DC86                            loc_7297C:
0007DC86 8C2D 0001                  		or.b	1(a5),d6
0007DC8A 0606 0010                  		addi.b	#$10,d6
0007DC8E 13C6 00C0 0011             		move.b	d6,($C00011).l
0007DC94                            
0007DC94                            locret_7298A:
0007DC94 4E75                       		rts	
0007DC96                            ; ===========================================================================
0007DC96                            
0007DC96                            loc_7298C:
0007DC96 4A2D 0013                  		tst.b	$13(a5)
0007DC9A 67EA                       		beq.s	loc_7297C
0007DC9C 4A2D 0012                  		tst.b	$12(a5)
0007DCA0 66E4                       		bne.s	loc_7297C
0007DCA2 4E75                       		rts	
0007DCA4                            ; End of function sub_7296A
0007DCA4                            
0007DCA4                            ; ===========================================================================
0007DCA4                            
0007DCA4                            loc_7299A:				; XREF: sub_72926
0007DCA4 532D 000C                  		subq.b	#1,$C(a5)
0007DCA8 4E75                       		rts	
0007DCAA                            
0007DCAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DCAA                            
0007DCAA                            
0007DCAA                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007DCAA 0815 0002                  		btst	#2,(a5)
0007DCAE 6600                       		bne.s	locret_729B4
0007DCB0                            
0007DCB0                            loc_729A6:				; XREF: Snd_FadeOut2
0007DCB0 102D 0001                  		move.b	1(a5),d0
0007DCB4 0000 001F                  		ori.b	#$1F,d0
0007DCB8 13C0 00C0 0011             		move.b	d0,($C00011).l
0007DCBE                            
0007DCBE                            locret_729B4:
0007DCBE 4E75                       		rts	
0007DCC0                            ; End of function sub_729A0
0007DCC0                            
0007DCC0                            
0007DCC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DCC0                            
0007DCC0                            
0007DCC0                            sub_729B6:				; XREF: loc_71E7C
0007DCC0 41F9 00C0 0011             		lea	($C00011).l,a0
0007DCC6 10BC 009F                  		move.b	#$9F,(a0)
0007DCCA 10BC 00BF                  		move.b	#$BF,(a0)
0007DCCE 10BC 00DF                  		move.b	#$DF,(a0)
0007DCD2 10BC 00FF                  		move.b	#$FF,(a0)
0007DCD6 4E75                       		rts	
0007DCD8                            ; End of function sub_729B6
0007DCD8                            
0007DCD8                            ; ===========================================================================
0007DCD8 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0007DCEA 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0007DCFC 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0007DD10 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0007DD24 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0007DD38 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0007DD4C 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0007DD60 0011 0000                  		dc.w $11, 0
0007DD64                            
0007DD64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DD64                            
0007DD64                            
0007DD64                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007DD64 0445 00E0                  		subi.w	#$E0,d5
0007DD68 E54D                       		lsl.w	#2,d5
0007DD6A 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007DD6E                            ; End of function sub_72A5A
0007DD6E                            
0007DD6E                            ; ===========================================================================
0007DD6E                            
0007DD6E                            loc_72A64:
0007DD6E 6000 0000                  		bra.w	loc_72ACC
0007DD72                            ; ===========================================================================
0007DD72 6000 0000                  		bra.w	loc_72AEC
0007DD76                            ; ===========================================================================
0007DD76 6000 0000                  		bra.w	loc_72AF2
0007DD7A                            ; ===========================================================================
0007DD7A 6000 0000                  		bra.w	loc_72AF8
0007DD7E                            ; ===========================================================================
0007DD7E 6000 0000                  		bra.w	loc_72B14
0007DD82                            ; ===========================================================================
0007DD82 6000 0000                  		bra.w	loc_72B9E
0007DD86                            ; ===========================================================================
0007DD86 6000 0000                  		bra.w	loc_72BA4
0007DD8A                            ; ===========================================================================
0007DD8A 6000 0000                  		bra.w	loc_72BAE
0007DD8E                            ; ===========================================================================
0007DD8E 6000 0000                  		bra.w	loc_72BB4
0007DD92                            ; ===========================================================================
0007DD92 6000 0000                  		bra.w	loc_72BBE
0007DD96                            ; ===========================================================================
0007DD96 6000 0000                  		bra.w	loc_72BC6
0007DD9A                            ; ===========================================================================
0007DD9A 6000 0000                  		bra.w	loc_72BD0
0007DD9E                            ; ===========================================================================
0007DD9E 6000 0000                  		bra.w	loc_72BE6
0007DDA2                            ; ===========================================================================
0007DDA2 6000 0000                  		bra.w	loc_72BEE
0007DDA6                            ; ===========================================================================
0007DDA6 6000 0000                  		bra.w	loc_72BF4
0007DDAA                            ; ===========================================================================
0007DDAA 6000 0000                  		bra.w	loc_72C26
0007DDAE                            ; ===========================================================================
0007DDAE 6000 0000                  		bra.w	loc_72D30
0007DDB2                            ; ===========================================================================
0007DDB2 6000 0000                  		bra.w	loc_72D52
0007DDB6                            ; ===========================================================================
0007DDB6 6000 0000                  		bra.w	loc_72D58
0007DDBA                            ; ===========================================================================
0007DDBA 6000 0000                  		bra.w	loc_72E06
0007DDBE                            ; ===========================================================================
0007DDBE 6000 0000                  		bra.w	loc_72E20
0007DDC2                            ; ===========================================================================
0007DDC2 6000 0000                  		bra.w	loc_72E26
0007DDC6                            ; ===========================================================================
0007DDC6 6000 0000                  		bra.w	loc_72E2C
0007DDCA                            ; ===========================================================================
0007DDCA 6000 0000                  		bra.w	loc_72E38
0007DDCE                            ; ===========================================================================
0007DDCE 6000 0000                  		bra.w	loc_72E52
0007DDD2                            ; ===========================================================================
0007DDD2 6000 0000                  		bra.w	loc_72E64
0007DDD6                            ; ===========================================================================
0007DDD6                            
0007DDD6                            loc_72ACC:				; XREF: loc_72A64
0007DDD6 121C                       		move.b	(a4)+,d1
0007DDD8 4A2D 0001                  		tst.b	1(a5)
0007DDDC 6B00                       		bmi.s	locret_72AEA
0007DDDE 102D 000A                  		move.b	$A(a5),d0
0007DDE2 0200 0037                  		andi.b	#$37,d0
0007DDE6 8200                       		or.b	d0,d1
0007DDE8 1B41 000A                  		move.b	d1,$A(a5)
0007DDEC 103C 00B4                  		move.b	#$B4,d0
0007DDF0 6000 FC2E                  		bra.w	loc_72716
0007DDF4                            ; ===========================================================================
0007DDF4                            
0007DDF4                            locret_72AEA:
0007DDF4 4E75                       		rts	
0007DDF6                            ; ===========================================================================
0007DDF6                            
0007DDF6                            loc_72AEC:				; XREF: loc_72A64
0007DDF6 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0007DDFA 4E75                       		rts	
0007DDFC                            ; ===========================================================================
0007DDFC                            
0007DDFC                            loc_72AF2:				; XREF: loc_72A64
0007DDFC 1D5C 0007                  		move.b	(a4)+,7(a6)
0007DE00 4E75                       		rts	
0007DE02                            ; ===========================================================================
0007DE02                            
0007DE02                            loc_72AF8:				; XREF: loc_72A64
0007DE02 7000                       		moveq	#0,d0
0007DE04 102D 000D                  		move.b	$D(a5),d0
0007DE08 2875 0000                  		movea.l	(a5,d0.w),a4
0007DE0C 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0007DE14 544C                       		addq.w	#2,a4
0007DE16 5800                       		addq.b	#4,d0
0007DE18 1B40 000D                  		move.b	d0,$D(a5)
0007DE1C 4E75                       		rts	
0007DE1E                            ; ===========================================================================
0007DE1E                            
0007DE1E                            loc_72B14:				; XREF: loc_72A64
0007DE1E 204E                       		movea.l	a6,a0
0007DE20 43EE 03A0                  		lea	$3A0(a6),a1
0007DE24 303C 0087                  		move.w	#$87,d0
0007DE28                            
0007DE28                            loc_72B1E:
0007DE28 20D9                       		move.l	(a1)+,(a0)+
0007DE2A 51C8 FFFC                  		dbf	d0,loc_72B1E
0007DE2E                            
0007DE2E 08EE 0002 0040             		bset	#2,$40(a6)
0007DE34 264D                       		movea.l	a5,a3
0007DE36 1C3C 0028                  		move.b	#$28,d6
0007DE3A 9C2E 0026                  		sub.b	$26(a6),d6
0007DE3E 7E05                       		moveq	#5,d7
0007DE40 4BEE 0070                  		lea	$70(a6),a5
0007DE44                            
0007DE44                            loc_72B3A:
0007DE44 0815 0007                  		btst	#7,(a5)
0007DE48 6700                       		beq.s	loc_72B5C
0007DE4A 08D5 0001                  		bset	#1,(a5)
0007DE4E DD2D 0009                  		add.b	d6,9(a5)
0007DE52 0815 0002                  		btst	#2,(a5)
0007DE56 6600                       		bne.s	loc_72B5C
0007DE58 7000                       		moveq	#0,d0
0007DE5A 102D 000B                  		move.b	$B(a5),d0
0007DE5E 226E 0018                  		movea.l	$18(a6),a1
0007DE62 4EBA 0000                  		jsr	sub_72C4E(pc)
0007DE66                            
0007DE66                            loc_72B5C:
0007DE66 DAFC 0030                  		adda.w	#$30,a5
0007DE6A 51CF FFD8                  		dbf	d7,loc_72B3A
0007DE6E                            
0007DE6E 7E02                       		moveq	#2,d7
0007DE70                            
0007DE70                            loc_72B66:
0007DE70 0815 0007                  		btst	#7,(a5)
0007DE74 6700                       		beq.s	loc_72B78
0007DE76 08D5 0001                  		bset	#1,(a5)
0007DE7A 4EBA FE2E                  		jsr	sub_729A0(pc)
0007DE7E DD2D 0009                  		add.b	d6,9(a5)
0007DE82                            
0007DE82                            loc_72B78:
0007DE82 DAFC 0030                  		adda.w	#$30,a5
0007DE86 51CF FFE8                  		dbf	d7,loc_72B66
0007DE8A 2A4B                       		movea.l	a3,a5
0007DE8C 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007DE92 1D7C 0028 0026             		move.b	#$28,$26(a6)
0007DE98 422E 0027                  		clr.b	$27(a6)
0007DE9C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0007DEA4 504F                       		addq.w	#8,sp
0007DEA6 4E75                       		rts	
0007DEA8                            ; ===========================================================================
0007DEA8                            
0007DEA8                            loc_72B9E:				; XREF: loc_72A64
0007DEA8 1B5C 0002                  		move.b	(a4)+,2(a5)
0007DEAC 4E75                       		rts	
0007DEAE                            ; ===========================================================================
0007DEAE                            
0007DEAE                            loc_72BA4:				; XREF: loc_72A64
0007DEAE 101C                       		move.b	(a4)+,d0
0007DEB0 D12D 0009                  		add.b	d0,9(a5)
0007DEB4 6000 0000                  		bra.w	sub_72CB4
0007DEB8                            ; ===========================================================================
0007DEB8                            
0007DEB8                            loc_72BAE:				; XREF: loc_72A64
0007DEB8 08D5 0004                  		bset	#4,(a5)
0007DEBC 4E75                       		rts	
0007DEBE                            ; ===========================================================================
0007DEBE                            
0007DEBE                            loc_72BB4:				; XREF: loc_72A64
0007DEBE 1B54 0012                  		move.b	(a4),$12(a5)
0007DEC2 1B5C 0013                  		move.b	(a4)+,$13(a5)
0007DEC6 4E75                       		rts	
0007DEC8                            ; ===========================================================================
0007DEC8                            
0007DEC8                            loc_72BBE:				; XREF: loc_72A64
0007DEC8 101C                       		move.b	(a4)+,d0
0007DECA D12D 0008                  		add.b	d0,8(a5)
0007DECE 4E75                       		rts	
0007DED0                            ; ===========================================================================
0007DED0                            
0007DED0                            loc_72BC6:				; XREF: loc_72A64
0007DED0 1D54 0002                  		move.b	(a4),2(a6)
0007DED4 1D5C 0001                  		move.b	(a4)+,1(a6)
0007DED8 4E75                       		rts	
0007DEDA                            ; ===========================================================================
0007DEDA                            
0007DEDA                            loc_72BD0:				; XREF: loc_72A64
0007DEDA 41EE 0040                  		lea	$40(a6),a0
0007DEDE 101C                       		move.b	(a4)+,d0
0007DEE0 7230                       		moveq	#$30,d1
0007DEE2 7409                       		moveq	#9,d2
0007DEE4                            
0007DEE4                            loc_72BDA:
0007DEE4 1140 0002                  		move.b	d0,2(a0)
0007DEE8 D0C1                       		adda.w	d1,a0
0007DEEA 51CA FFF8                  		dbf	d2,loc_72BDA
0007DEEE                            
0007DEEE 4E75                       		rts	
0007DEF0                            ; ===========================================================================
0007DEF0                            
0007DEF0                            loc_72BE6:				; XREF: loc_72A64
0007DEF0 101C                       		move.b	(a4)+,d0
0007DEF2 D12D 0009                  		add.b	d0,9(a5)
0007DEF6 4E75                       		rts	
0007DEF8                            ; ===========================================================================
0007DEF8                            
0007DEF8                            loc_72BEE:				; XREF: loc_72A64
0007DEF8 422E 002C                  		clr.b	$2C(a6)
0007DEFC 4E75                       		rts	
0007DEFE                            ; ===========================================================================
0007DEFE                            
0007DEFE                            loc_72BF4:				; XREF: loc_72A64
0007DEFE 0895 0007                  		bclr	#7,(a5)
0007DF02 0895 0004                  		bclr	#4,(a5)
0007DF06 4EBA FB00                  		jsr	sub_726FE(pc)
0007DF0A 4A2E 0250                  		tst.b	$250(a6)
0007DF0E 6B00                       		bmi.s	loc_72C22
0007DF10 264D                       		movea.l	a5,a3
0007DF12 4BEE 0100                  		lea	$100(a6),a5
0007DF16 226E 0018                  		movea.l	$18(a6),a1
0007DF1A 0895 0002                  		bclr	#2,(a5)
0007DF1E 08D5 0001                  		bset	#1,(a5)
0007DF22 102D 000B                  		move.b	$B(a5),d0
0007DF26 4EBA 0000                  		jsr	sub_72C4E(pc)
0007DF2A 2A4B                       		movea.l	a3,a5
0007DF2C                            
0007DF2C                            loc_72C22:
0007DF2C 504F                       		addq.w	#8,sp
0007DF2E 4E75                       		rts	
0007DF30                            ; ===========================================================================
0007DF30                            
0007DF30                            loc_72C26:				; XREF: loc_72A64
0007DF30 7000                       		moveq	#0,d0
0007DF32 101C                       		move.b	(a4)+,d0
0007DF34 1B40 000B                  		move.b	d0,$B(a5)
0007DF38 0815 0002                  		btst	#2,(a5)
0007DF3C 6600 0000                  		bne.w	locret_72CAA
0007DF40 226E 0018                  		movea.l	$18(a6),a1
0007DF44 4A2E 000E                  		tst.b	$E(a6)
0007DF48 6700                       		beq.s	sub_72C4E
0007DF4A 226D 0020                  		movea.l	$20(a5),a1
0007DF4E 4A2E 000E                  		tst.b	$E(a6)
0007DF52 6B00                       		bmi.s	sub_72C4E
0007DF54 226E 0020                  		movea.l	$20(a6),a1
0007DF58                            
0007DF58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DF58                            
0007DF58                            
0007DF58                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0007DF58 5340                       		subq.w	#1,d0
0007DF5A 6B00                       		bmi.s	loc_72C5C
0007DF5C 323C 0019                  		move.w	#$19,d1
0007DF60                            
0007DF60                            loc_72C56:
0007DF60 D2C1                       		adda.w	d1,a1
0007DF62 51C8 FFFC                  		dbf	d0,loc_72C56
0007DF66                            
0007DF66                            loc_72C5C:
0007DF66 1219                       		move.b	(a1)+,d1
0007DF68 1B41 001F                  		move.b	d1,$1F(a5)
0007DF6C 1801                       		move.b	d1,d4
0007DF6E 103C 00B0                  		move.b	#$B0,d0
0007DF72 4EBA FAB8                  		jsr	sub_72722(pc)
0007DF76 45FA 0000                  		lea	byte_72D18(pc),a2
0007DF7A 7613                       		moveq	#$13,d3
0007DF7C                            
0007DF7C                            loc_72C72:
0007DF7C 101A                       		move.b	(a2)+,d0
0007DF7E 1219                       		move.b	(a1)+,d1
0007DF80 4EBA FAAA                  		jsr	sub_72722(pc)
0007DF84 51CB FFF6                  		dbf	d3,loc_72C72
0007DF88 7A03                       		moveq	#3,d5
0007DF8A 0244 0007                  		andi.w	#7,d4
0007DF8E 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0007DF92 162D 0009                  		move.b	9(a5),d3
0007DF96                            
0007DF96                            loc_72C8C:
0007DF96 101A                       		move.b	(a2)+,d0
0007DF98 1219                       		move.b	(a1)+,d1
0007DF9A E20C                       		lsr.b	#1,d4
0007DF9C 6400                       		bcc.s	loc_72C96
0007DF9E D203                       		add.b	d3,d1
0007DFA0                            
0007DFA0                            loc_72C96:
0007DFA0 4EBA FA8A                  		jsr	sub_72722(pc)
0007DFA4 51CD FFF0                  		dbf	d5,loc_72C8C
0007DFA8 103C 00B4                  		move.b	#$B4,d0
0007DFAC 122D 000A                  		move.b	$A(a5),d1
0007DFB0 4EBA FA7A                  		jsr	sub_72722(pc)
0007DFB4                            
0007DFB4                            locret_72CAA:
0007DFB4 4E75                       		rts	
0007DFB6                            ; End of function sub_72C4E
0007DFB6                            
0007DFB6                            ; ===========================================================================
0007DFB6 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0007DFBE                            
0007DFBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DFBE                            
0007DFBE                            
0007DFBE                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0007DFBE 0815 0002                  		btst	#2,(a5)
0007DFC2 6600                       		bne.s	locret_72D16
0007DFC4 7000                       		moveq	#0,d0
0007DFC6 102D 000B                  		move.b	$B(a5),d0
0007DFCA 226E 0018                  		movea.l	$18(a6),a1
0007DFCE 4A2E 000E                  		tst.b	$E(a6)
0007DFD2 6700                       		beq.s	loc_72CD8
0007DFD4 226E 0020                  		movea.l	$20(a6),a1
0007DFD8 4A2E 000E                  		tst.b	$E(a6)
0007DFDC 6B00                       		bmi.s	loc_72CD8
0007DFDE 226E 0020                  		movea.l	$20(a6),a1
0007DFE2                            
0007DFE2                            loc_72CD8:
0007DFE2 5340                       		subq.w	#1,d0
0007DFE4 6B00                       		bmi.s	loc_72CE6
0007DFE6 323C 0019                  		move.w	#$19,d1
0007DFEA                            
0007DFEA                            loc_72CE0:
0007DFEA D2C1                       		adda.w	d1,a1
0007DFEC 51C8 FFFC                  		dbf	d0,loc_72CE0
0007DFF0                            
0007DFF0                            loc_72CE6:
0007DFF0 D2FC 0015                  		adda.w	#$15,a1
0007DFF4 45FA 0000                  		lea	byte_72D2C(pc),a2
0007DFF8 102D 001F                  		move.b	$1F(a5),d0
0007DFFC 0240 0007                  		andi.w	#7,d0
0007E000 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0007E004 162D 0009                  		move.b	9(a5),d3
0007E008 6B00                       		bmi.s	locret_72D16
0007E00A 7A03                       		moveq	#3,d5
0007E00C                            
0007E00C                            loc_72D02:
0007E00C 101A                       		move.b	(a2)+,d0
0007E00E 1219                       		move.b	(a1)+,d1
0007E010 E20C                       		lsr.b	#1,d4
0007E012 6400                       		bcc.s	loc_72D12
0007E014 D203                       		add.b	d3,d1
0007E016 6500                       		bcs.s	loc_72D12
0007E018 4EBA FA12                  		jsr	sub_72722(pc)
0007E01C                            
0007E01C                            loc_72D12:
0007E01C 51CD FFEE                  		dbf	d5,loc_72D02
0007E020                            
0007E020                            locret_72D16:
0007E020 4E75                       		rts	
0007E022                            ; End of function sub_72CB4
0007E022                            
0007E022                            ; ===========================================================================
0007E022 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007E02C 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0007E036 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007E03A                            ; ===========================================================================
0007E03A                            
0007E03A                            loc_72D30:				; XREF: loc_72A64
0007E03A 08D5 0003                  		bset	#3,(a5)
0007E03E 2B4C 0014                  		move.l	a4,$14(a5)
0007E042 1B5C 0018                  		move.b	(a4)+,$18(a5)
0007E046 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007E04A 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007E04E 101C                       		move.b	(a4)+,d0
0007E050 E208                       		lsr.b	#1,d0
0007E052 1B40 001B                  		move.b	d0,$1B(a5)
0007E056 426D 001C                  		clr.w	$1C(a5)
0007E05A 4E75                       		rts	
0007E05C                            ; ===========================================================================
0007E05C                            
0007E05C                            loc_72D52:				; XREF: loc_72A64
0007E05C 08D5 0003                  		bset	#3,(a5)
0007E060 4E75                       		rts	
0007E062                            ; ===========================================================================
0007E062                            
0007E062                            loc_72D58:				; XREF: loc_72A64
0007E062 0895 0007                  		bclr	#7,(a5)
0007E066 0895 0004                  		bclr	#4,(a5)
0007E06A 4A2D 0001                  		tst.b	1(a5)
0007E06E 6B00                       		bmi.s	loc_72D74
0007E070 4A2E 0008                  		tst.b	8(a6)
0007E074 6B00 0000                  		bmi.w	loc_72E02
0007E078 4EBA F98E                  		jsr	sub_726FE(pc)
0007E07C 6000                       		bra.s	loc_72D78
0007E07E                            ; ===========================================================================
0007E07E                            
0007E07E                            loc_72D74:
0007E07E 4EBA FC2A                  		jsr	sub_729A0(pc)
0007E082                            
0007E082                            loc_72D78:
0007E082 4A2E 000E                  		tst.b	$E(a6)
0007E086 6A00 0000                  		bpl.w	loc_72E02
0007E08A 4216                       		clr.b	0(a6)
0007E08C 7000                       		moveq	#0,d0
0007E08E 102D 0001                  		move.b	1(a5),d0
0007E092 6B00                       		bmi.s	loc_72DCC
0007E094 41FA F546                  		lea	dword_722CC(pc),a0
0007E098 264D                       		movea.l	a5,a3
0007E09A 0C00 0004                  		cmpi.b	#4,d0
0007E09E 6600                       		bne.s	loc_72DA8
0007E0A0 4A2E 0340                  		tst.b	$340(a6)
0007E0A4 6A00                       		bpl.s	loc_72DA8
0007E0A6 4BEE 0340                  		lea	$340(a6),a5
0007E0AA 226E 0020                  		movea.l	$20(a6),a1
0007E0AE 6000                       		bra.s	loc_72DB8
0007E0B0                            ; ===========================================================================
0007E0B0                            
0007E0B0                            loc_72DA8:
0007E0B0 5500                       		subq.b	#2,d0
0007E0B2 E508                       		lsl.b	#2,d0
0007E0B4 2A70 0000                  		movea.l	(a0,d0.w),a5
0007E0B8 4A15                       		tst.b	(a5)
0007E0BA 6A00                       		bpl.s	loc_72DC8
0007E0BC 226E 0018                  		movea.l	$18(a6),a1
0007E0C0                            
0007E0C0                            loc_72DB8:
0007E0C0 0895 0002                  		bclr	#2,(a5)
0007E0C4 08D5 0001                  		bset	#1,(a5)
0007E0C8 102D 000B                  		move.b	$B(a5),d0
0007E0CC 4EBA FE8A                  		jsr	sub_72C4E(pc)
0007E0D0                            
0007E0D0                            loc_72DC8:
0007E0D0 2A4B                       		movea.l	a3,a5
0007E0D2 6000                       		bra.s	loc_72E02
0007E0D4                            ; ===========================================================================
0007E0D4                            
0007E0D4                            loc_72DCC:
0007E0D4 41EE 0370                  		lea	$370(a6),a0
0007E0D8 4A10                       		tst.b	(a0)
0007E0DA 6A00                       		bpl.s	loc_72DE0
0007E0DC 0C00 00E0                  		cmpi.b	#$E0,d0
0007E0E0 6700                       		beq.s	loc_72DEA
0007E0E2 0C00 00C0                  		cmpi.b	#$C0,d0
0007E0E6 6700                       		beq.s	loc_72DEA
0007E0E8                            
0007E0E8                            loc_72DE0:
0007E0E8 41FA F4F2                  		lea	dword_722CC(pc),a0
0007E0EC E608                       		lsr.b	#3,d0
0007E0EE 2070 0000                  		movea.l	(a0,d0.w),a0
0007E0F2                            
0007E0F2                            loc_72DEA:
0007E0F2 0890 0002                  		bclr	#2,(a0)
0007E0F6 08D0 0001                  		bset	#1,(a0)
0007E0FA 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007E100 6600                       		bne.s	loc_72E02
0007E102 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007E10A                            
0007E10A                            loc_72E02:
0007E10A 504F                       		addq.w	#8,sp
0007E10C 4E75                       		rts	
0007E10E                            ; ===========================================================================
0007E10E                            
0007E10E                            loc_72E06:				; XREF: loc_72A64
0007E10E 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0007E114 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0007E118 0815 0002                  		btst	#2,(a5)
0007E11C 6600                       		bne.s	locret_72E1E
0007E11E 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0007E126                            
0007E126                            locret_72E1E:
0007E126 4E75                       		rts	
0007E128                            ; ===========================================================================
0007E128                            
0007E128                            loc_72E20:				; XREF: loc_72A64
0007E128 0895 0003                  		bclr	#3,(a5)
0007E12C 4E75                       		rts	
0007E12E                            ; ===========================================================================
0007E12E                            
0007E12E                            loc_72E26:				; XREF: loc_72A64
0007E12E 1B5C 000B                  		move.b	(a4)+,$B(a5)
0007E132 4E75                       		rts	
0007E134                            ; ===========================================================================
0007E134                            
0007E134                            loc_72E2C:				; XREF: loc_72A64
0007E134 101C                       		move.b	(a4)+,d0
0007E136 E148                       		lsl.w	#8,d0
0007E138 101C                       		move.b	(a4)+,d0
0007E13A D8C0                       		adda.w	d0,a4
0007E13C 534C                       		subq.w	#1,a4
0007E13E 4E75                       		rts	
0007E140                            ; ===========================================================================
0007E140                            
0007E140                            loc_72E38:				; XREF: loc_72A64
0007E140 7000                       		moveq	#0,d0
0007E142 101C                       		move.b	(a4)+,d0
0007E144 121C                       		move.b	(a4)+,d1
0007E146 4A35 0024                  		tst.b	$24(a5,d0.w)
0007E14A 6600                       		bne.s	loc_72E48
0007E14C 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007E150                            
0007E150                            loc_72E48:
0007E150 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0007E154 66DE                       		bne.s	loc_72E2C
0007E156 544C                       		addq.w	#2,a4
0007E158 4E75                       		rts	
0007E15A                            ; ===========================================================================
0007E15A                            
0007E15A                            loc_72E52:				; XREF: loc_72A64
0007E15A 7000                       		moveq	#0,d0
0007E15C 102D 000D                  		move.b	$D(a5),d0
0007E160 5900                       		subq.b	#4,d0
0007E162 2B8C 0000                  		move.l	a4,(a5,d0.w)
0007E166 1B40 000D                  		move.b	d0,$D(a5)
0007E16A 60C8                       		bra.s	loc_72E2C
0007E16C                            ; ===========================================================================
0007E16C                            
0007E16C                            loc_72E64:				; XREF: loc_72A64
0007E16C 103C 0088                  		move.b	#$88,d0
0007E170 123C 000F                  		move.b	#$F,d1
0007E174 4EBA F8C2                  		jsr	sub_7272E(pc)
0007E178 103C 008C                  		move.b	#$8C,d0
0007E17C 123C 000F                  		move.b	#$F,d1
0007E180 6000 F8B6                  		bra.w	sub_7272E
0007E184                            ; ===========================================================================
0007E184                            Kos_Z80:	incbin	sound\z80_1.bin
0007E234 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0007E236 21                         		dc.b $21
0007E237 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0007E239                            		incbin	sound\z80_2.bin
0007F8E4                            		even
0007F8E4                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
000860E4                            		even
000860E4                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008F982                            		even
0008F982                            Music83:	incbin	sound\music83.bin ; Marble Act 1
000935A2 00                         		even
000935A2                            Music84:	include	sound\music84.asm ; Star Light Act 1
000935A2                            music84_Header:
000935A2 =00000001                  smpsHeaderStartSong = 1
000935A2 0000                       	smpsHeaderVoice     music84_Voices
000935A4 0603                       	smpsHeaderChan      $06, $03
000935A6 0205                       	smpsHeaderTempo     $02, $05
000935A8                            
000935AC 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
000935B0 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000935B4 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000935B8 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000935BC 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
000935C0 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
000935C6 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
000935CC 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
000935D2                            
000935D2                            ; FM1 Data
000935D2                            music84_FM1:
000935D2 E0C0                       	smpsPan             panCenter, $00
000935D6 E107                       	smpsAlterNote       $07
000935D8 9B03 8007                  	dc.b	nD2, $03, nRst, $07
000935DC E106                       	smpsAlterNote       $06
000935DE 9903 800B                  	dc.b	nC2, $03, nRst, $0B
000935E2 E10B                       	smpsAlterNote       $0B
000935E4 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
000935EA E10C                       	smpsAlterNote       $0C
000935EC E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000935EF E10B                       	smpsAlterNote       $0B
000935F1 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000935F4 E109                       	smpsAlterNote       $09
000935F6 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
000935FB E108                       	smpsAlterNote       $08
000935FD 8001                       	dc.b	nRst, $01
000935FF E10B                       	smpsAlterNote       $0B
00093601 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00093607 E107                       	smpsAlterNote       $07
00093609 9B03                       	dc.b	nD2, $03
0009360B                            
0009360B                            music84_Jump04:
0009360B E107                       	smpsAlterNote       $07
0009360D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093611 E10B                       	smpsAlterNote       $0B
00093613 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093617 E107                       	smpsAlterNote       $07
00093619 9B03                       	dc.b	nD2, $03
0009361B E11A                       	smpsAlterNote       $1A
0009361D A301                       	dc.b	nBb2, $01
0009361F E1F2                       	smpsAlterNote       $F2
00093621 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093624 E1FF                       	smpsAlterNote       $FF
00093626 E701                       	dc.b	smpsNoAttack, $01
00093628 E111                       	smpsAlterNote       $11
0009362A E701                       	dc.b	smpsNoAttack, $01
0009362C E106                       	smpsAlterNote       $06
0009362E E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093631 E107                       	smpsAlterNote       $07
00093633 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093637 E108                       	smpsAlterNote       $08
00093639 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00093641 E109                       	smpsAlterNote       $09
00093643 A003                       	dc.b	nG2, $03
00093645 E10C                       	smpsAlterNote       $0C
00093647 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0009364B E1FD                       	smpsAlterNote       $FD
0009364D A401                       	dc.b	nB2, $01
0009364F E109                       	smpsAlterNote       $09
00093651 E701                       	dc.b	smpsNoAttack, $01
00093653 E106                       	smpsAlterNote       $06
00093655 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093658 E109                       	smpsAlterNote       $09
0009365A A007                       	dc.b	nG2, $07
0009365C E108                       	smpsAlterNote       $08
0009365E 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00093662 E107                       	smpsAlterNote       $07
00093664 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0009366A E10B                       	smpsAlterNote       $0B
0009366C A203 8001                  	dc.b	nA2, $03, nRst, $01
00093670 E107                       	smpsAlterNote       $07
00093672 9B03                       	dc.b	nD2, $03
00093674 E11A                       	smpsAlterNote       $1A
00093676 A301                       	dc.b	nBb2, $01
00093678 E1F9                       	smpsAlterNote       $F9
0009367A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009367D E107                       	smpsAlterNote       $07
0009367F E701                       	dc.b	smpsNoAttack, $01
00093681 E111                       	smpsAlterNote       $11
00093683 E701                       	dc.b	smpsNoAttack, $01
00093685 E106                       	smpsAlterNote       $06
00093687 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0009368C E107                       	smpsAlterNote       $07
0009368E 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093696 E1EC                       	smpsAlterNote       $EC
00093698 A101                       	dc.b	nAb2, $01
0009369A E108                       	smpsAlterNote       $08
0009369C E701                       	dc.b	smpsNoAttack, $01
0009369E E116                       	smpsAlterNote       $16
000936A0 E701                       	dc.b	smpsNoAttack, $01
000936A2 E1F5                       	smpsAlterNote       $F5
000936A4 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000936A7 E10B                       	smpsAlterNote       $0B
000936A9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000936AD E107                       	smpsAlterNote       $07
000936AF 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000936B5 E109                       	smpsAlterNote       $09
000936B7 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000936BB E10B                       	smpsAlterNote       $0B
000936BD 9603                       	dc.b	nA1, $03
000936BF E107                       	smpsAlterNote       $07
000936C1 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000936C7 E10B                       	smpsAlterNote       $0B
000936C9 A203 8001                  	dc.b	nA2, $03, nRst, $01
000936CD E107                       	smpsAlterNote       $07
000936CF 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000936D3 E11A                       	smpsAlterNote       $1A
000936D5 A301                       	dc.b	nBb2, $01
000936D7 E1F9                       	smpsAlterNote       $F9
000936D9 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000936DC E107                       	smpsAlterNote       $07
000936DE E701                       	dc.b	smpsNoAttack, $01
000936E0 E1FB                       	smpsAlterNote       $FB
000936E2 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000936E5 E106                       	smpsAlterNote       $06
000936E7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000936EB E107                       	smpsAlterNote       $07
000936ED 9B03                       	dc.b	nD2, $03
000936EF E108                       	smpsAlterNote       $08
000936F1 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000936F7 E109                       	smpsAlterNote       $09
000936F9 A002 8001                  	dc.b	nG2, $02, nRst, $01
000936FD E10C                       	smpsAlterNote       $0C
000936FF A303                       	dc.b	nBb2, $03
00093701 E1F0                       	smpsAlterNote       $F0
00093703 A401                       	dc.b	nB2, $01
00093705 E1FD                       	smpsAlterNote       $FD
00093707 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0009370C E106                       	smpsAlterNote       $06
0009370E 8001                       	dc.b	nRst, $01
00093710 E109                       	smpsAlterNote       $09
00093712 A006 8001                  	dc.b	nG2, $06, nRst, $01
00093716 E108                       	smpsAlterNote       $08
00093718 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0009371C E107                       	smpsAlterNote       $07
0009371E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093724 E10B                       	smpsAlterNote       $0B
00093726 A203                       	dc.b	nA2, $03
00093728 E107                       	smpsAlterNote       $07
0009372A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009372E E1F2                       	smpsAlterNote       $F2
00093730 A401                       	dc.b	nB2, $01
00093732 E1FF                       	smpsAlterNote       $FF
00093734 E701                       	dc.b	smpsNoAttack, $01
00093736 E107                       	smpsAlterNote       $07
00093738 E701                       	dc.b	smpsNoAttack, $01
0009373A E1FB                       	smpsAlterNote       $FB
0009373C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009373F E106                       	smpsAlterNote       $06
00093741 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093745 E107                       	smpsAlterNote       $07
00093747 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00093751 E117                       	smpsAlterNote       $17
00093753 A001                       	dc.b	nG2, $01
00093755 E1FA                       	smpsAlterNote       $FA
00093757 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0009375A E108                       	smpsAlterNote       $08
0009375C E701                       	dc.b	smpsNoAttack, $01
0009375E E1E7                       	smpsAlterNote       $E7
00093760 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093763 E103                       	smpsAlterNote       $03
00093765 E701                       	dc.b	smpsNoAttack, $01
00093767 E10B                       	smpsAlterNote       $0B
00093769 E702                       	dc.b	smpsNoAttack, $02
0009376B E107                       	smpsAlterNote       $07
0009376D 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00093775 E106                       	smpsAlterNote       $06
00093777 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
0009377D E10C                       	smpsAlterNote       $0C
0009377F 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00093785 E109                       	smpsAlterNote       $09
00093787 9E03                       	dc.b	nF2, $03
00093789 E10C                       	smpsAlterNote       $0C
0009378B 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0009378F E1EA                       	smpsAlterNote       $EA
00093791 A201                       	dc.b	nA2, $01
00093793 E106                       	smpsAlterNote       $06
00093795 E701                       	dc.b	smpsNoAttack, $01
00093797 E1E2                       	smpsAlterNote       $E2
00093799 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0009379C E1F0                       	smpsAlterNote       $F0
0009379E E701                       	dc.b	smpsNoAttack, $01
000937A0 E10C                       	smpsAlterNote       $0C
000937A2 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000937AE E116                       	smpsAlterNote       $16
000937B0 9C01                       	dc.b	nEb2, $01
000937B2 E105                       	smpsAlterNote       $05
000937B4 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000937B7 E1F1                       	smpsAlterNote       $F1
000937B9 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000937BC E1FF                       	smpsAlterNote       $FF
000937BE E701                       	dc.b	smpsNoAttack, $01
000937C0 E109                       	smpsAlterNote       $09
000937C2 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000937C6 E10C                       	smpsAlterNote       $0C
000937C8 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000937D4 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
000937DA E109                       	smpsAlterNote       $09
000937DC 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000937E0 E10C                       	smpsAlterNote       $0C
000937E2 9703                       	dc.b	nBb1, $03
000937E4 E11A                       	smpsAlterNote       $1A
000937E6 A101                       	dc.b	nAb2, $01
000937E8 E1FB                       	smpsAlterNote       $FB
000937EA E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000937ED E10A                       	smpsAlterNote       $0A
000937EF E701                       	dc.b	smpsNoAttack, $01
000937F1 E1E8                       	smpsAlterNote       $E8
000937F3 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000937F6 E106                       	smpsAlterNote       $06
000937F8 E701                       	dc.b	smpsNoAttack, $01
000937FA E10C                       	smpsAlterNote       $0C
000937FC E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00093808 E1F9                       	smpsAlterNote       $F9
0009380A 9D01                       	dc.b	nE2, $01
0009380C E108                       	smpsAlterNote       $08
0009380E E701                       	dc.b	smpsNoAttack, $01
00093810 E1F6                       	smpsAlterNote       $F6
00093812 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093815 E109                       	smpsAlterNote       $09
00093817 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0009381B E10C                       	smpsAlterNote       $0C
0009381D 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00093829 E108                       	smpsAlterNote       $08
0009382B 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00093831 E106                       	smpsAlterNote       $06
00093833 A403 8001                  	dc.b	nB2, $03, nRst, $01
00093837 E108                       	smpsAlterNote       $08
00093839 9D03                       	dc.b	nE2, $03
0009383B E1EB                       	smpsAlterNote       $EB
0009383D A801                       	dc.b	nEb3, $01
0009383F E109                       	smpsAlterNote       $09
00093841 E701                       	dc.b	smpsNoAttack, $01
00093843 E1FA                       	smpsAlterNote       $FA
00093845 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00093848 E108                       	smpsAlterNote       $08
0009384A E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00093856 E1E9                       	smpsAlterNote       $E9
00093858 A301                       	dc.b	nBb2, $01
0009385A E107                       	smpsAlterNote       $07
0009385C E701                       	dc.b	smpsNoAttack, $01
0009385E E1F0                       	smpsAlterNote       $F0
00093860 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093863 E1F7                       	smpsAlterNote       $F7
00093865 E701                       	dc.b	smpsNoAttack, $01
00093867 E107                       	smpsAlterNote       $07
00093869 E701                       	dc.b	smpsNoAttack, $01
0009386B E106                       	smpsAlterNote       $06
0009386D E701                       	dc.b	smpsNoAttack, $01
0009386F E108                       	smpsAlterNote       $08
00093871 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00093877 E106                       	smpsAlterNote       $06
00093879 A403 8001                  	dc.b	nB2, $03, nRst, $01
0009387D E108                       	smpsAlterNote       $08
0009387F 9D03                       	dc.b	nE2, $03
00093881 E10B                       	smpsAlterNote       $0B
00093883 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
0009388B E108                       	smpsAlterNote       $08
0009388D 9D03                       	dc.b	nE2, $03
0009388F E10B                       	smpsAlterNote       $0B
00093891 9603 8001                  	dc.b	nA1, $03, nRst, $01
00093895 E113                       	smpsAlterNote       $13
00093897 A001                       	dc.b	nG2, $01
00093899 E118                       	smpsAlterNote       $18
0009389B E701                       	dc.b	smpsNoAttack, $01
0009389D E1E9                       	smpsAlterNote       $E9
0009389F E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000938A2 E1F3                       	smpsAlterNote       $F3
000938A4 E701                       	dc.b	smpsNoAttack, $01
000938A6 E1FD                       	smpsAlterNote       $FD
000938A8 E701                       	dc.b	smpsNoAttack, $01
000938AA E102                       	smpsAlterNote       $02
000938AC E701                       	dc.b	smpsNoAttack, $01
000938AE E107                       	smpsAlterNote       $07
000938B0 8001                       	dc.b	nRst, $01
000938B2 E10B                       	smpsAlterNote       $0B
000938B4 9603                       	dc.b	nA1, $03
000938B6 E10C                       	smpsAlterNote       $0C
000938B8 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
000938BE E10B                       	smpsAlterNote       $0B
000938C0 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000938CC 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
000938D2 E107                       	smpsAlterNote       $07
000938D4 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000938DA E10B                       	smpsAlterNote       $0B
000938DC A203                       	dc.b	nA2, $03
000938DE E107                       	smpsAlterNote       $07
000938E0 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000938E4 E1F2                       	smpsAlterNote       $F2
000938E6 A401                       	dc.b	nB2, $01
000938E8 E1FF                       	smpsAlterNote       $FF
000938EA E701                       	dc.b	smpsNoAttack, $01
000938EC E107                       	smpsAlterNote       $07
000938EE E701                       	dc.b	smpsNoAttack, $01
000938F0 E1FB                       	smpsAlterNote       $FB
000938F2 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000938F5 E106                       	smpsAlterNote       $06
000938F7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000938FB E107                       	smpsAlterNote       $07
000938FD 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093901 E108                       	smpsAlterNote       $08
00093903 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00093909 E109                       	smpsAlterNote       $09
0009390B A003 8001                  	dc.b	nG2, $03, nRst, $01
0009390F E10C                       	smpsAlterNote       $0C
00093911 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00093915 E1F0                       	smpsAlterNote       $F0
00093917 A401                       	dc.b	nB2, $01
00093919 E109                       	smpsAlterNote       $09
0009391B E701                       	dc.b	smpsNoAttack, $01
0009391D E106                       	smpsAlterNote       $06
0009391F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093922 E109                       	smpsAlterNote       $09
00093924 A007                       	dc.b	nG2, $07
00093926 E108                       	smpsAlterNote       $08
00093928 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0009392C E107                       	smpsAlterNote       $07
0009392E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093934 E10B                       	smpsAlterNote       $0B
00093936 A202 8001                  	dc.b	nA2, $02, nRst, $01
0009393A E107                       	smpsAlterNote       $07
0009393C 9B03                       	dc.b	nD2, $03
0009393E E11A                       	smpsAlterNote       $1A
00093940 A301                       	dc.b	nBb2, $01
00093942 E1F2                       	smpsAlterNote       $F2
00093944 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093947 E1FF                       	smpsAlterNote       $FF
00093949 E701                       	dc.b	smpsNoAttack, $01
0009394B E111                       	smpsAlterNote       $11
0009394D E701                       	dc.b	smpsNoAttack, $01
0009394F E106                       	smpsAlterNote       $06
00093951 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093954 E107                       	smpsAlterNote       $07
00093956 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00093962 E117                       	smpsAlterNote       $17
00093964 A001                       	dc.b	nG2, $01
00093966 E1FA                       	smpsAlterNote       $FA
00093968 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0009396B E116                       	smpsAlterNote       $16
0009396D E701                       	dc.b	smpsNoAttack, $01
0009396F E1F5                       	smpsAlterNote       $F5
00093971 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093974 E103                       	smpsAlterNote       $03
00093976 E701                       	dc.b	smpsNoAttack, $01
00093978 E10B                       	smpsAlterNote       $0B
0009397A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009397E E107                       	smpsAlterNote       $07
00093980 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093986 E109                       	smpsAlterNote       $09
00093988 9E03                       	dc.b	nF2, $03
0009398A E10B                       	smpsAlterNote       $0B
0009398C 9603 8001                  	dc.b	nA1, $03, nRst, $01
00093990 E107                       	smpsAlterNote       $07
00093992 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093998 E10B                       	smpsAlterNote       $0B
0009399A A203 8001                  	dc.b	nA2, $03, nRst, $01
0009399E E107                       	smpsAlterNote       $07
000939A0 9B03                       	dc.b	nD2, $03
000939A2 E11A                       	smpsAlterNote       $1A
000939A4 A301                       	dc.b	nBb2, $01
000939A6 E1F9                       	smpsAlterNote       $F9
000939A8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000939AB E107                       	smpsAlterNote       $07
000939AD E701                       	dc.b	smpsNoAttack, $01
000939AF E111                       	smpsAlterNote       $11
000939B1 E701                       	dc.b	smpsNoAttack, $01
000939B3 E106                       	smpsAlterNote       $06
000939B5 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000939BA E107                       	smpsAlterNote       $07
000939BC 9B03                       	dc.b	nD2, $03
000939BE E108                       	smpsAlterNote       $08
000939C0 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000939C6 E109                       	smpsAlterNote       $09
000939C8 A003                       	dc.b	nG2, $03
000939CA E10C                       	smpsAlterNote       $0C
000939CC A303 8001                  	dc.b	nBb2, $03, nRst, $01
000939D0 E1FD                       	smpsAlterNote       $FD
000939D2 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
000939D7 E106                       	smpsAlterNote       $06
000939D9 8001                       	dc.b	nRst, $01
000939DB E109                       	smpsAlterNote       $09
000939DD A006 8001                  	dc.b	nG2, $06, nRst, $01
000939E1 E108                       	smpsAlterNote       $08
000939E3 9C03                       	dc.b	nEb2, $03
000939E5 E107                       	smpsAlterNote       $07
000939E7 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000939ED E10B                       	smpsAlterNote       $0B
000939EF A203 8001                  	dc.b	nA2, $03, nRst, $01
000939F3 E107                       	smpsAlterNote       $07
000939F5 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000939F9 E11A                       	smpsAlterNote       $1A
000939FB A301                       	dc.b	nBb2, $01
000939FD E1F9                       	smpsAlterNote       $F9
000939FF E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093A02 E107                       	smpsAlterNote       $07
00093A04 E701                       	dc.b	smpsNoAttack, $01
00093A06 E1FB                       	smpsAlterNote       $FB
00093A08 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093A0B E106                       	smpsAlterNote       $06
00093A0D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093A11 E107                       	smpsAlterNote       $07
00093A13 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093A1B E1EC                       	smpsAlterNote       $EC
00093A1D A101                       	dc.b	nAb2, $01
00093A1F E108                       	smpsAlterNote       $08
00093A21 E701                       	dc.b	smpsNoAttack, $01
00093A23 E1E7                       	smpsAlterNote       $E7
00093A25 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093A28 E1F5                       	smpsAlterNote       $F5
00093A2A E701                       	dc.b	smpsNoAttack, $01
00093A2C E10B                       	smpsAlterNote       $0B
00093A2E E702                       	dc.b	smpsNoAttack, $02
00093A30 E107                       	smpsAlterNote       $07
00093A32 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00093A38 E106                       	smpsAlterNote       $06
00093A3A 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00093A40 E10C                       	smpsAlterNote       $0C
00093A42 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00093A4A E109                       	smpsAlterNote       $09
00093A4C 9E03                       	dc.b	nF2, $03
00093A4E E10C                       	smpsAlterNote       $0C
00093A50 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093A54 E1EA                       	smpsAlterNote       $EA
00093A56 A201                       	dc.b	nA2, $01
00093A58 E106                       	smpsAlterNote       $06
00093A5A E701                       	dc.b	smpsNoAttack, $01
00093A5C E114                       	smpsAlterNote       $14
00093A5E E701                       	dc.b	smpsNoAttack, $01
00093A60 E1F0                       	smpsAlterNote       $F0
00093A62 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093A65 E10C                       	smpsAlterNote       $0C
00093A67 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00093A73 9703                       	dc.b	nBb1, $03
00093A75 E116                       	smpsAlterNote       $16
00093A77 9C01                       	dc.b	nEb2, $01
00093A79 E105                       	smpsAlterNote       $05
00093A7B E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093A7E E113                       	smpsAlterNote       $13
00093A80 E701                       	dc.b	smpsNoAttack, $01
00093A82 E1FF                       	smpsAlterNote       $FF
00093A84 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093A87 E109                       	smpsAlterNote       $09
00093A89 E703                       	dc.b	smpsNoAttack, $03
00093A8B E10C                       	smpsAlterNote       $0C
00093A8D 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00093A99 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093AA1 E109                       	smpsAlterNote       $09
00093AA3 9E03                       	dc.b	nF2, $03
00093AA5 E10C                       	smpsAlterNote       $0C
00093AA7 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093AAB E1EC                       	smpsAlterNote       $EC
00093AAD A201                       	dc.b	nA2, $01
00093AAF E10A                       	smpsAlterNote       $0A
00093AB1 E701                       	dc.b	smpsNoAttack, $01
00093AB3 E1E8                       	smpsAlterNote       $E8
00093AB5 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093AB8 E1F7                       	smpsAlterNote       $F7
00093ABA E701                       	dc.b	smpsNoAttack, $01
00093ABC E10C                       	smpsAlterNote       $0C
00093ABE E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00093ACA E1EA                       	smpsAlterNote       $EA
00093ACC 9D01                       	dc.b	nE2, $01
00093ACE E108                       	smpsAlterNote       $08
00093AD0 E701                       	dc.b	smpsNoAttack, $01
00093AD2 E1F6                       	smpsAlterNote       $F6
00093AD4 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093AD7 E105                       	smpsAlterNote       $05
00093AD9 E701                       	dc.b	smpsNoAttack, $01
00093ADB E109                       	smpsAlterNote       $09
00093ADD E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093AE1 E10C                       	smpsAlterNote       $0C
00093AE3 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00093AEF E108                       	smpsAlterNote       $08
00093AF1 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00093AF7 E106                       	smpsAlterNote       $06
00093AF9 A403 8001                  	dc.b	nB2, $03, nRst, $01
00093AFD E108                       	smpsAlterNote       $08
00093AFF 9D03                       	dc.b	nE2, $03
00093B01 E1EB                       	smpsAlterNote       $EB
00093B03 A801                       	dc.b	nEb3, $01
00093B05 E109                       	smpsAlterNote       $09
00093B07 E701                       	dc.b	smpsNoAttack, $01
00093B09 E1EB                       	smpsAlterNote       $EB
00093B0B E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00093B0E E108                       	smpsAlterNote       $08
00093B10 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00093B1C E1E9                       	smpsAlterNote       $E9
00093B1E A301                       	dc.b	nBb2, $01
00093B20 E1F8                       	smpsAlterNote       $F8
00093B22 E701                       	dc.b	smpsNoAttack, $01
00093B24 E116                       	smpsAlterNote       $16
00093B26 E701                       	dc.b	smpsNoAttack, $01
00093B28 E1F7                       	smpsAlterNote       $F7
00093B2A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093B2D E107                       	smpsAlterNote       $07
00093B2F E701                       	dc.b	smpsNoAttack, $01
00093B31 E1EE                       	smpsAlterNote       $EE
00093B33 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093B36 E106                       	smpsAlterNote       $06
00093B38 8001                       	dc.b	nRst, $01
00093B3A E108                       	smpsAlterNote       $08
00093B3C 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00093B42 E106                       	smpsAlterNote       $06
00093B44 A402 8001                  	dc.b	nB2, $02, nRst, $01
00093B48 E108                       	smpsAlterNote       $08
00093B4A 9D03                       	dc.b	nE2, $03
00093B4C E10B                       	smpsAlterNote       $0B
00093B4E 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00093B54 E108                       	smpsAlterNote       $08
00093B56 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00093B5A E10B                       	smpsAlterNote       $0B
00093B5C 9603                       	dc.b	nA1, $03
00093B5E E10E                       	smpsAlterNote       $0E
00093B60 A001                       	dc.b	nG2, $01
00093B62 E118                       	smpsAlterNote       $18
00093B64 E701                       	dc.b	smpsNoAttack, $01
00093B66 E1E9                       	smpsAlterNote       $E9
00093B68 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093B6B E1EE                       	smpsAlterNote       $EE
00093B6D E701                       	dc.b	smpsNoAttack, $01
00093B6F E1F8                       	smpsAlterNote       $F8
00093B71 E701                       	dc.b	smpsNoAttack, $01
00093B73 E102                       	smpsAlterNote       $02
00093B75 E701                       	dc.b	smpsNoAttack, $01
00093B77 E107                       	smpsAlterNote       $07
00093B79 8001                       	dc.b	nRst, $01
00093B7B E10B                       	smpsAlterNote       $0B
00093B7D 9603                       	dc.b	nA1, $03
00093B7F E10C                       	smpsAlterNote       $0C
00093B81 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00093B87 E10B                       	smpsAlterNote       $0B
00093B89 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00093B95 8001 9603                  	dc.b	nRst, $01, nA1, $03
00093B99 E10C                       	smpsAlterNote       $0C
00093B9B 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00093BA7 8001                       	dc.b	nRst, $01
00093BA9 E10B                       	smpsAlterNote       $0B
00093BAB 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00093BB3 E107                       	smpsAlterNote       $07
00093BB5 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00093BB9 E10B                       	smpsAlterNote       $0B
00093BBB 9603                       	dc.b	nA1, $03
00093BBD E109                       	smpsAlterNote       $09
00093BBF 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00093BC3 E108                       	smpsAlterNote       $08
00093BC5 9D06                       	dc.b	nE2, $06
00093BC7 E107                       	smpsAlterNote       $07
00093BC9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093BCD E106                       	smpsAlterNote       $06
00093BCF 9903                       	dc.b	nC2, $03
00093BD1 E10C                       	smpsAlterNote       $0C
00093BD3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093BD7 E10B                       	smpsAlterNote       $0B
00093BD9 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00093BE5 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093BEF E10C                       	smpsAlterNote       $0C
00093BF1 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00093BFD 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00093C09 8001                       	dc.b	nRst, $01
00093C0B E10B                       	smpsAlterNote       $0B
00093C0D 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093C19 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00093C25 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00093C31 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093C3B E10C                       	smpsAlterNote       $0C
00093C3D 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00093C49 E10B                       	smpsAlterNote       $0B
00093C4B 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00093C53 E107                       	smpsAlterNote       $07
00093C55 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00093C59 E10B                       	smpsAlterNote       $0B
00093C5B 9603                       	dc.b	nA1, $03
00093C5D E109                       	smpsAlterNote       $09
00093C5F 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00093C63 E108                       	smpsAlterNote       $08
00093C65 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00093C69 E107                       	smpsAlterNote       $07
00093C6B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093C6F E106                       	smpsAlterNote       $06
00093C71 9903                       	dc.b	nC2, $03
00093C73 E10C                       	smpsAlterNote       $0C
00093C75 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093C79 E10B                       	smpsAlterNote       $0B
00093C7B 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093C87 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093C91 E10C                       	smpsAlterNote       $0C
00093C93 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00093C9F 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00093CAB 8001                       	dc.b	nRst, $01
00093CAD E10B                       	smpsAlterNote       $0B
00093CAF 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093CBB 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093CC5 E10C                       	smpsAlterNote       $0C
00093CC7 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093CD3 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00093CDF E10B                       	smpsAlterNote       $0B
00093CE1 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093CED 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00093CF7 E10C                       	smpsAlterNote       $0C
00093CF9 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093D05 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00093D11 E10B                       	smpsAlterNote       $0B
00093D13 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00093D1F 8001                       	dc.b	nRst, $01
00093D21 E1EC                       	smpsAlterNote       $EC
00093D23 A101                       	dc.b	nAb2, $01
00093D25 E1FA                       	smpsAlterNote       $FA
00093D27 E701                       	dc.b	smpsNoAttack, $01
00093D29 E116                       	smpsAlterNote       $16
00093D2B E701                       	dc.b	smpsNoAttack, $01
00093D2D E1F5                       	smpsAlterNote       $F5
00093D2F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093D32 E10B                       	smpsAlterNote       $0B
00093D34 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00093D40 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00093D4C E107                       	smpsAlterNote       $07
00093D4E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093D54 E10B                       	smpsAlterNote       $0B
00093D56 A203                       	dc.b	nA2, $03
00093D58 E107                       	smpsAlterNote       $07
00093D5A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093D5E E1F3                       	smpsAlterNote       $F3
00093D60 A401                       	dc.b	nB2, $01
00093D62 E102                       	smpsAlterNote       $02
00093D64 E701                       	dc.b	smpsNoAttack, $01
00093D66 E109                       	smpsAlterNote       $09
00093D68 E701                       	dc.b	smpsNoAttack, $01
00093D6A E102                       	smpsAlterNote       $02
00093D6C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093D6F E106                       	smpsAlterNote       $06
00093D71 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093D75 E107                       	smpsAlterNote       $07
00093D77 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093D7B E108                       	smpsAlterNote       $08
00093D7D 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00093D83 E109                       	smpsAlterNote       $09
00093D85 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093D89 E1F2                       	smpsAlterNote       $F2
00093D8B A401                       	dc.b	nB2, $01
00093D8D E1FF                       	smpsAlterNote       $FF
00093D8F E701                       	dc.b	smpsNoAttack, $01
00093D91 E111                       	smpsAlterNote       $11
00093D93 E701                       	dc.b	smpsNoAttack, $01
00093D95 E1FB                       	smpsAlterNote       $FB
00093D97 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093D9A E106                       	smpsAlterNote       $06
00093D9C E702                       	dc.b	smpsNoAttack, $02
00093D9E E109                       	smpsAlterNote       $09
00093DA0 A007                       	dc.b	nG2, $07
00093DA2 E108                       	smpsAlterNote       $08
00093DA4 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00093DA8 E107                       	smpsAlterNote       $07
00093DAA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093DB0 E10B                       	smpsAlterNote       $0B
00093DB2 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093DB6 E107                       	smpsAlterNote       $07
00093DB8 9B03                       	dc.b	nD2, $03
00093DBA E11A                       	smpsAlterNote       $1A
00093DBC A301                       	dc.b	nBb2, $01
00093DBE E1F2                       	smpsAlterNote       $F2
00093DC0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093DC3 E1FF                       	smpsAlterNote       $FF
00093DC5 E701                       	dc.b	smpsNoAttack, $01
00093DC7 E111                       	smpsAlterNote       $11
00093DC9 E701                       	dc.b	smpsNoAttack, $01
00093DCB E106                       	smpsAlterNote       $06
00093DCD E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093DD0 E107                       	smpsAlterNote       $07
00093DD2 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00093DDE E117                       	smpsAlterNote       $17
00093DE0 A001                       	dc.b	nG2, $01
00093DE2 E1FA                       	smpsAlterNote       $FA
00093DE4 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093DE7 E116                       	smpsAlterNote       $16
00093DE9 E701                       	dc.b	smpsNoAttack, $01
00093DEB E1F5                       	smpsAlterNote       $F5
00093DED E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093DF0 E103                       	smpsAlterNote       $03
00093DF2 E701                       	dc.b	smpsNoAttack, $01
00093DF4 E10B                       	smpsAlterNote       $0B
00093DF6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093DFA E107                       	smpsAlterNote       $07
00093DFC 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093E02 E109                       	smpsAlterNote       $09
00093E04 9E03                       	dc.b	nF2, $03
00093E06 E10B                       	smpsAlterNote       $0B
00093E08 9603 8001                  	dc.b	nA1, $03, nRst, $01
00093E0C E107                       	smpsAlterNote       $07
00093E0E 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093E14 E10B                       	smpsAlterNote       $0B
00093E16 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093E1A E107                       	smpsAlterNote       $07
00093E1C 9B03                       	dc.b	nD2, $03
00093E1E E11A                       	smpsAlterNote       $1A
00093E20 A301                       	dc.b	nBb2, $01
00093E22 E1F9                       	smpsAlterNote       $F9
00093E24 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093E27 E1FF                       	smpsAlterNote       $FF
00093E29 E701                       	dc.b	smpsNoAttack, $01
00093E2B E111                       	smpsAlterNote       $11
00093E2D E701                       	dc.b	smpsNoAttack, $01
00093E2F E106                       	smpsAlterNote       $06
00093E31 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093E34 E107                       	smpsAlterNote       $07
00093E36 9B03                       	dc.b	nD2, $03
00093E38 E108                       	smpsAlterNote       $08
00093E3A 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00093E40 E109                       	smpsAlterNote       $09
00093E42 A003                       	dc.b	nG2, $03
00093E44 E1F0                       	smpsAlterNote       $F0
00093E46 A501                       	dc.b	nC3, $01
00093E48 E106                       	smpsAlterNote       $06
00093E4A E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00093E4E E109                       	smpsAlterNote       $09
00093E50 A006 8001                  	dc.b	nG2, $06, nRst, $01
00093E54 E108                       	smpsAlterNote       $08
00093E56 9C03                       	dc.b	nEb2, $03
00093E58 E107                       	smpsAlterNote       $07
00093E5A 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00093E60 E10B                       	smpsAlterNote       $0B
00093E62 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093E66 E107                       	smpsAlterNote       $07
00093E68 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093E6C E11A                       	smpsAlterNote       $1A
00093E6E A301                       	dc.b	nBb2, $01
00093E70 E1F9                       	smpsAlterNote       $F9
00093E72 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093E75 E107                       	smpsAlterNote       $07
00093E77 E701                       	dc.b	smpsNoAttack, $01
00093E79 E1FB                       	smpsAlterNote       $FB
00093E7B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093E7E E106                       	smpsAlterNote       $06
00093E80 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093E84 E107                       	smpsAlterNote       $07
00093E86 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093E8E E1EC                       	smpsAlterNote       $EC
00093E90 A101                       	dc.b	nAb2, $01
00093E92 E108                       	smpsAlterNote       $08
00093E94 E701                       	dc.b	smpsNoAttack, $01
00093E96 E1E7                       	smpsAlterNote       $E7
00093E98 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093E9B E1F5                       	smpsAlterNote       $F5
00093E9D E701                       	dc.b	smpsNoAttack, $01
00093E9F E10B                       	smpsAlterNote       $0B
00093EA1 E702                       	dc.b	smpsNoAttack, $02
00093EA3 E107                       	smpsAlterNote       $07
00093EA5 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00093EAB E106                       	smpsAlterNote       $06
00093EAD 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00093EB3 E10C                       	smpsAlterNote       $0C
00093EB5 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00093EBD E109                       	smpsAlterNote       $09
00093EBF 9E03                       	dc.b	nF2, $03
00093EC1 E10C                       	smpsAlterNote       $0C
00093EC3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093EC7 E1EA                       	smpsAlterNote       $EA
00093EC9 A201                       	dc.b	nA2, $01
00093ECB E106                       	smpsAlterNote       $06
00093ECD E701                       	dc.b	smpsNoAttack, $01
00093ECF E114                       	smpsAlterNote       $14
00093ED1 E701                       	dc.b	smpsNoAttack, $01
00093ED3 E1F0                       	smpsAlterNote       $F0
00093ED5 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093ED8 E10C                       	smpsAlterNote       $0C
00093EDA E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00093EE6 9703                       	dc.b	nBb1, $03
00093EE8 E116                       	smpsAlterNote       $16
00093EEA 9C01                       	dc.b	nEb2, $01
00093EEC E105                       	smpsAlterNote       $05
00093EEE E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093EF1 E113                       	smpsAlterNote       $13
00093EF3 E701                       	dc.b	smpsNoAttack, $01
00093EF5 E1FF                       	smpsAlterNote       $FF
00093EF7 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093EFA E109                       	smpsAlterNote       $09
00093EFC E703                       	dc.b	smpsNoAttack, $03
00093EFE E10C                       	smpsAlterNote       $0C
00093F00 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00093F0C 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093F14 E109                       	smpsAlterNote       $09
00093F16 9E03                       	dc.b	nF2, $03
00093F18 E10C                       	smpsAlterNote       $0C
00093F1A 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093F1E E1EA                       	smpsAlterNote       $EA
00093F20 A201                       	dc.b	nA2, $01
00093F22 E106                       	smpsAlterNote       $06
00093F24 E701                       	dc.b	smpsNoAttack, $01
00093F26 E1E2                       	smpsAlterNote       $E2
00093F28 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093F2B E1F0                       	smpsAlterNote       $F0
00093F2D E701                       	dc.b	smpsNoAttack, $01
00093F2F E10C                       	smpsAlterNote       $0C
00093F31 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00093F3D E116                       	smpsAlterNote       $16
00093F3F 9C01                       	dc.b	nEb2, $01
00093F41 E105                       	smpsAlterNote       $05
00093F43 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093F46 E1F1                       	smpsAlterNote       $F1
00093F48 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093F4B E1FF                       	smpsAlterNote       $FF
00093F4D E701                       	dc.b	smpsNoAttack, $01
00093F4F E109                       	smpsAlterNote       $09
00093F51 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093F55 E10C                       	smpsAlterNote       $0C
00093F57 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00093F63 E106                       	smpsAlterNote       $06
00093F65 9903                       	dc.b	nC2, $03
00093F67 E107                       	smpsAlterNote       $07
00093F69 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093F6D E109                       	smpsAlterNote       $09
00093F6F 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00093F75 E107                       	smpsAlterNote       $07
00093F77 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093F7B E108                       	smpsAlterNote       $08
00093F7D 9D03                       	dc.b	nE2, $03
00093F7F E10B                       	smpsAlterNote       $0B
00093F81 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00093F87 E109                       	smpsAlterNote       $09
00093F89 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00093F8F E10C                       	smpsAlterNote       $0C
00093F91 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00093F97 E106                       	smpsAlterNote       $06
00093F99 9903                       	dc.b	nC2, $03
00093F9B E11A                       	smpsAlterNote       $1A
00093F9D A301                       	dc.b	nBb2, $01
00093F9F E1F9                       	smpsAlterNote       $F9
00093FA1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093FA4 E1FF                       	smpsAlterNote       $FF
00093FA6 E701                       	dc.b	smpsNoAttack, $01
00093FA8 E111                       	smpsAlterNote       $11
00093FAA E701                       	dc.b	smpsNoAttack, $01
00093FAC E106                       	smpsAlterNote       $06
00093FAE E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00093FB5 E109                       	smpsAlterNote       $09
00093FB7 A003                       	dc.b	nG2, $03
00093FB9 E106                       	smpsAlterNote       $06
00093FBB 9907                       	dc.b	nC2, $07
00093FBD E107                       	smpsAlterNote       $07
00093FBF 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00093FC7 E10B                       	smpsAlterNote       $0B
00093FC9 A203                       	dc.b	nA2, $03
00093FCB E107                       	smpsAlterNote       $07
00093FCD 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093FD1 E1F2                       	smpsAlterNote       $F2
00093FD3 A401                       	dc.b	nB2, $01
00093FD5 E1F9                       	smpsAlterNote       $F9
00093FD7 E701                       	dc.b	smpsNoAttack, $01
00093FD9 E107                       	smpsAlterNote       $07
00093FDB E701                       	dc.b	smpsNoAttack, $01
00093FDD E1FB                       	smpsAlterNote       $FB
00093FDF E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093FE2 E106                       	smpsAlterNote       $06
00093FE4 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093FE8 E107                       	smpsAlterNote       $07
00093FEA 9B03                       	dc.b	nD2, $03
00093FEC E108                       	smpsAlterNote       $08
00093FEE 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093FF4 E109                       	smpsAlterNote       $09
00093FF6 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093FFA E1F2                       	smpsAlterNote       $F2
00093FFC A401                       	dc.b	nB2, $01
00093FFE E1F9                       	smpsAlterNote       $F9
00094000 E701                       	dc.b	smpsNoAttack, $01
00094002 E107                       	smpsAlterNote       $07
00094004 E701                       	dc.b	smpsNoAttack, $01
00094006 E1FB                       	smpsAlterNote       $FB
00094008 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009400B E106                       	smpsAlterNote       $06
0009400D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00094011 E108                       	smpsAlterNote       $08
00094013 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00094017 E10C                       	smpsAlterNote       $0C
00094019 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0009401D E107                       	smpsAlterNote       $07
0009401F 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00094025 E10B                       	smpsAlterNote       $0B
00094027 A203                       	dc.b	nA2, $03
00094029 E107                       	smpsAlterNote       $07
0009402B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009402F E1F2                       	smpsAlterNote       $F2
00094031 A401                       	dc.b	nB2, $01
00094033 E1FF                       	smpsAlterNote       $FF
00094035 E701                       	dc.b	smpsNoAttack, $01
00094037 E107                       	smpsAlterNote       $07
00094039 E701                       	dc.b	smpsNoAttack, $01
0009403B E1FB                       	smpsAlterNote       $FB
0009403D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00094040 E106                       	smpsAlterNote       $06
00094042 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00094046 E107                       	smpsAlterNote       $07
00094048 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0009404C E108                       	smpsAlterNote       $08
0009404E 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00094054 E109                       	smpsAlterNote       $09
00094056 A003 8001                  	dc.b	nG2, $03, nRst, $01
0009405A E1F2                       	smpsAlterNote       $F2
0009405C A401                       	dc.b	nB2, $01
0009405E E1FF                       	smpsAlterNote       $FF
00094060 E701                       	dc.b	smpsNoAttack, $01
00094062 E111                       	smpsAlterNote       $11
00094064 E701                       	dc.b	smpsNoAttack, $01
00094066 E1FB                       	smpsAlterNote       $FB
00094068 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009406B E106                       	smpsAlterNote       $06
0009406D E702                       	dc.b	smpsNoAttack, $02
0009406F E108                       	smpsAlterNote       $08
00094071 9C07                       	dc.b	nEb2, $07
00094073 E10C                       	smpsAlterNote       $0C
00094075 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00094079 E107                       	smpsAlterNote       $07
0009407B 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00094081 E10B                       	smpsAlterNote       $0B
00094083 A202 8001                  	dc.b	nA2, $02, nRst, $01
00094087 E107                       	smpsAlterNote       $07
00094089 9B03                       	dc.b	nD2, $03
0009408B E11A                       	smpsAlterNote       $1A
0009408D A301                       	dc.b	nBb2, $01
0009408F E1F2                       	smpsAlterNote       $F2
00094091 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00094094 E1FF                       	smpsAlterNote       $FF
00094096 E701                       	dc.b	smpsNoAttack, $01
00094098 E111                       	smpsAlterNote       $11
0009409A E701                       	dc.b	smpsNoAttack, $01
0009409C E106                       	smpsAlterNote       $06
0009409E E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000940A1 E107                       	smpsAlterNote       $07
000940A3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000940A7 E108                       	smpsAlterNote       $08
000940A9 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
000940B1 E109                       	smpsAlterNote       $09
000940B3 A003                       	dc.b	nG2, $03
000940B5 E11A                       	smpsAlterNote       $1A
000940B7 A301                       	dc.b	nBb2, $01
000940B9 E1F2                       	smpsAlterNote       $F2
000940BB E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000940BE E1FF                       	smpsAlterNote       $FF
000940C0 E701                       	dc.b	smpsNoAttack, $01
000940C2 E111                       	smpsAlterNote       $11
000940C4 E701                       	dc.b	smpsNoAttack, $01
000940C6 E106                       	smpsAlterNote       $06
000940C8 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000940CB E108                       	smpsAlterNote       $08
000940CD 9C07                       	dc.b	nEb2, $07
000940CF E10C                       	smpsAlterNote       $0C
000940D1 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000940D5 E107                       	smpsAlterNote       $07
000940D7 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
000940E3 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
000940ED E108                       	smpsAlterNote       $08
000940EF 9C06                       	dc.b	nEb2, $06
000940F1 E10C                       	smpsAlterNote       $0C
000940F3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000940F7 E108                       	smpsAlterNote       $08
000940F9 9C03                       	dc.b	nEb2, $03
000940FB E109                       	smpsAlterNote       $09
000940FD A003 8001                  	dc.b	nG2, $03, nRst, $01
00094101 E10C                       	smpsAlterNote       $0C
00094103 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
0009410B E107                       	smpsAlterNote       $07
0009410D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00094111 F6F4 F8                    	smpsJump            music84_Jump04
00094114                            
00094114                            ; FM2 Data
00094114                            music84_FM2:
00094114 E0C0                       	smpsPan             panCenter, $00
00094118 E10B                       	smpsAlterNote       $0B
0009411A C603 8007                  	dc.b	nA5, $03, nRst, $07
0009411E E109                       	smpsAlterNote       $09
00094120 C403 800B                  	dc.b	nG5, $03, nRst, $0B
00094124 E108                       	smpsAlterNote       $08
00094126 C103 8004                  	dc.b	nE5, $03, nRst, $04
0009412C E080                       	smpsPan             panLeft, $00
0009412E E10C                       	smpsAlterNote       $0C
00094130 E6F9                       	smpsAlterVol        $F9
00094132 C703                       	dc.b	nBb5, $03
00094134 E10B                       	smpsAlterNote       $0B
00094136 C603 8001                  	dc.b	nA5, $03, nRst, $01
0009413A E109                       	smpsAlterNote       $09
0009413C C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00094142 E108                       	smpsAlterNote       $08
00094144 C103 8001                  	dc.b	nE5, $03, nRst, $01
00094148 E106                       	smpsAlterNote       $06
0009414A BD03                       	dc.b	nC5, $03
0009414C E10B                       	smpsAlterNote       $0B
0009414E BA03 8001                  	dc.b	nA4, $03, nRst, $01
00094154 E0C0                       	smpsPan             panCenter, $00
00094156 E107                       	smpsAlterNote       $07
00094158 E606                       	smpsAlterVol        $06
0009415A BF03                       	dc.b	nD5, $03
0009415C                            
0009415C                            music84_Jump03:
0009415C E108                       	smpsAlterNote       $08
0009415E C103 8001                  	dc.b	nE5, $03, nRst, $01
00094162 E109                       	smpsAlterNote       $09
00094164 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
0009416A E10B                       	smpsAlterNote       $0B
0009416C C607                       	dc.b	nA5, $07
0009416E E107                       	smpsAlterNote       $07
00094170 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094174 E106                       	smpsAlterNote       $06
00094176 C90D                       	dc.b	nC6, $0D
00094178 E100                       	smpsAlterNote       $00
0009417A E701                       	dc.b	smpsNoAttack, $01
0009417C E1FF                       	smpsAlterNote       $FF
0009417E E701                       	dc.b	smpsNoAttack, $01
00094180 E103                       	smpsAlterNote       $03
00094182 E701                       	dc.b	smpsNoAttack, $01
00094184 E109                       	smpsAlterNote       $09
00094186 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009418A E106                       	smpsAlterNote       $06
0009418C E701                       	dc.b	smpsNoAttack, $01
0009418E E100                       	smpsAlterNote       $00
00094190 E701                       	dc.b	smpsNoAttack, $01
00094192 E10C                       	smpsAlterNote       $0C
00094194 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094198 E10B                       	smpsAlterNote       $0B
0009419A C603                       	dc.b	nA5, $03
0009419C E109                       	smpsAlterNote       $09
0009419E C403 8001                  	dc.b	nG5, $03, nRst, $01
000941A2 E10B                       	smpsAlterNote       $0B
000941A4 C60D                       	dc.b	nA5, $0D
000941A6 E105                       	smpsAlterNote       $05
000941A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941AC E10B                       	smpsAlterNote       $0B
000941AE E701                       	dc.b	smpsNoAttack, $01
000941B0 E10E                       	smpsAlterNote       $0E
000941B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941B6 E108                       	smpsAlterNote       $08
000941B8 E701                       	dc.b	smpsNoAttack, $01
000941BA E104                       	smpsAlterNote       $04
000941BC E701                       	dc.b	smpsNoAttack, $01
000941BE E105                       	smpsAlterNote       $05
000941C0 E701                       	dc.b	smpsNoAttack, $01
000941C2 E10B                       	smpsAlterNote       $0B
000941C4 E701                       	dc.b	smpsNoAttack, $01
000941C6 E10F                       	smpsAlterNote       $0F
000941C8 E701                       	dc.b	smpsNoAttack, $01
000941CA E10B                       	smpsAlterNote       $0B
000941CC E701                       	dc.b	smpsNoAttack, $01
000941CE E108                       	smpsAlterNote       $08
000941D0 E701                       	dc.b	smpsNoAttack, $01
000941D2 E104                       	smpsAlterNote       $04
000941D4 E701                       	dc.b	smpsNoAttack, $01
000941D6 E108                       	smpsAlterNote       $08
000941D8 E701                       	dc.b	smpsNoAttack, $01
000941DA E10E                       	smpsAlterNote       $0E
000941DC E701                       	dc.b	smpsNoAttack, $01
000941DE E10F                       	smpsAlterNote       $0F
000941E0 E701                       	dc.b	smpsNoAttack, $01
000941E2 E10B                       	smpsAlterNote       $0B
000941E4 E701                       	dc.b	smpsNoAttack, $01
000941E6 E105                       	smpsAlterNote       $05
000941E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941EC E108                       	smpsAlterNote       $08
000941EE E701                       	dc.b	smpsNoAttack, $01
000941F0 E10E                       	smpsAlterNote       $0E
000941F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941F6 E108                       	smpsAlterNote       $08
000941F8 E701                       	dc.b	smpsNoAttack, $01
000941FA E105                       	smpsAlterNote       $05
000941FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094200 E10B                       	smpsAlterNote       $0B
00094202 E701                       	dc.b	smpsNoAttack, $01
00094204 E10F                       	smpsAlterNote       $0F
00094206 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0009420A E107                       	smpsAlterNote       $07
0009420C BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094210 E108                       	smpsAlterNote       $08
00094212 C103                       	dc.b	nE5, $03
00094214 E109                       	smpsAlterNote       $09
00094216 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0009421E E10B                       	smpsAlterNote       $0B
00094220 C606 8001                  	dc.b	nA5, $06, nRst, $01
00094224 E107                       	smpsAlterNote       $07
00094226 BF03                       	dc.b	nD5, $03
00094228 E106                       	smpsAlterNote       $06
0009422A C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0009422E E107                       	smpsAlterNote       $07
00094230 CB03                       	dc.b	nD6, $03
00094232 E10C                       	smpsAlterNote       $0C
00094234 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00094238 E10B                       	smpsAlterNote       $0B
0009423A C604 8001                  	dc.b	nA5, $04, nRst, $01
0009423E E109                       	smpsAlterNote       $09
00094240 C404                       	dc.b	nG5, $04
00094242 E10B                       	smpsAlterNote       $0B
00094244 C60D                       	dc.b	nA5, $0D
00094246 E108                       	smpsAlterNote       $08
00094248 E701                       	dc.b	smpsNoAttack, $01
0009424A E104                       	smpsAlterNote       $04
0009424C E701                       	dc.b	smpsNoAttack, $01
0009424E E108                       	smpsAlterNote       $08
00094250 E701                       	dc.b	smpsNoAttack, $01
00094252 E10B                       	smpsAlterNote       $0B
00094254 E701                       	dc.b	smpsNoAttack, $01
00094256 E10F                       	smpsAlterNote       $0F
00094258 E701                       	dc.b	smpsNoAttack, $01
0009425A E10B                       	smpsAlterNote       $0B
0009425C E701                       	dc.b	smpsNoAttack, $01
0009425E E105                       	smpsAlterNote       $05
00094260 E701                       	dc.b	smpsNoAttack, $01
00094262 E104                       	smpsAlterNote       $04
00094264 E701                       	dc.b	smpsNoAttack, $01
00094266 E108                       	smpsAlterNote       $08
00094268 E701                       	dc.b	smpsNoAttack, $01
0009426A E10E                       	smpsAlterNote       $0E
0009426C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094270 E10B                       	smpsAlterNote       $0B
00094272 E701                       	dc.b	smpsNoAttack, $01
00094274 E105                       	smpsAlterNote       $05
00094276 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009427A E10B                       	smpsAlterNote       $0B
0009427C E701                       	dc.b	smpsNoAttack, $01
0009427E E10E                       	smpsAlterNote       $0E
00094280 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094284 E108                       	smpsAlterNote       $08
00094286 E701                       	dc.b	smpsNoAttack, $01
00094288 E104                       	smpsAlterNote       $04
0009428A E701                       	dc.b	smpsNoAttack, $01
0009428C E105                       	smpsAlterNote       $05
0009428E E701                       	dc.b	smpsNoAttack, $01
00094290 E10B                       	smpsAlterNote       $0B
00094292 E701                       	dc.b	smpsNoAttack, $01
00094294 E10F                       	smpsAlterNote       $0F
00094296 E701                       	dc.b	smpsNoAttack, $01
00094298 E10B                       	smpsAlterNote       $0B
0009429A E701                       	dc.b	smpsNoAttack, $01
0009429C E108                       	smpsAlterNote       $08
0009429E E701                       	dc.b	smpsNoAttack, $01
000942A0 E105                       	smpsAlterNote       $05
000942A2 8001                       	dc.b	nRst, $01
000942A4 E109                       	smpsAlterNote       $09
000942A6 C401                       	dc.b	nG5, $01
000942A8 E10B                       	smpsAlterNote       $0B
000942AA E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
000942B3 E109                       	smpsAlterNote       $09
000942B5 C404 8001                  	dc.b	nG5, $04, nRst, $01
000942B9 E10B                       	smpsAlterNote       $0B
000942BB C604 8001                  	dc.b	nA5, $04, nRst, $01
000942BF E107                       	smpsAlterNote       $07
000942C1 BF0D                       	dc.b	nD5, $0D
000942C3 E101                       	smpsAlterNote       $01
000942C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942C9 E104                       	smpsAlterNote       $04
000942CB E701                       	dc.b	smpsNoAttack, $01
000942CD E10A                       	smpsAlterNote       $0A
000942CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942D3 E104                       	smpsAlterNote       $04
000942D5 E701                       	dc.b	smpsNoAttack, $01
000942D7 E101                       	smpsAlterNote       $01
000942D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942DD E107                       	smpsAlterNote       $07
000942DF E701                       	dc.b	smpsNoAttack, $01
000942E1 E10B                       	smpsAlterNote       $0B
000942E3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000942E7 E108                       	smpsAlterNote       $08
000942E9 C101                       	dc.b	nE5, $01
000942EB E109                       	smpsAlterNote       $09
000942ED E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000942F2 E10B                       	smpsAlterNote       $0B
000942F4 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000942FC E108                       	smpsAlterNote       $08
000942FE CD06                       	dc.b	nE6, $06
00094300 E109                       	smpsAlterNote       $09
00094302 CE07                       	dc.b	nF6, $07
00094304 E108                       	smpsAlterNote       $08
00094306 CD03 8001                  	dc.b	nE6, $03, nRst, $01
0009430A E106                       	smpsAlterNote       $06
0009430C C903                       	dc.b	nC6, $03
0009430E E109                       	smpsAlterNote       $09
00094310 C403 8001                  	dc.b	nG5, $03, nRst, $01
00094314 E10C                       	smpsAlterNote       $0C
00094316 C70D                       	dc.b	nBb5, $0D
00094318 E106                       	smpsAlterNote       $06
0009431A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009431E E109                       	smpsAlterNote       $09
00094320 E701                       	dc.b	smpsNoAttack, $01
00094322 E10F                       	smpsAlterNote       $0F
00094324 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094328 E109                       	smpsAlterNote       $09
0009432A E701                       	dc.b	smpsNoAttack, $01
0009432C E106                       	smpsAlterNote       $06
0009432E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094332 E10C                       	smpsAlterNote       $0C
00094334 E701                       	dc.b	smpsNoAttack, $01
00094336 E110                       	smpsAlterNote       $10
00094338 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009433C E10B                       	smpsAlterNote       $0B
0009433E C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00094342 E105                       	smpsAlterNote       $05
00094344 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094348 E10B                       	smpsAlterNote       $0B
0009434A E701                       	dc.b	smpsNoAttack, $01
0009434C E10E                       	smpsAlterNote       $0E
0009434E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094352 E108                       	smpsAlterNote       $08
00094354 E701                       	dc.b	smpsNoAttack, $01
00094356 E104                       	smpsAlterNote       $04
00094358 E701                       	dc.b	smpsNoAttack, $01
0009435A E105                       	smpsAlterNote       $05
0009435C E701                       	dc.b	smpsNoAttack, $01
0009435E E10B                       	smpsAlterNote       $0B
00094360 E701                       	dc.b	smpsNoAttack, $01
00094362 E10F                       	smpsAlterNote       $0F
00094364 E701                       	dc.b	smpsNoAttack, $01
00094366 E10B                       	smpsAlterNote       $0B
00094368 E701                       	dc.b	smpsNoAttack, $01
0009436A E108                       	smpsAlterNote       $08
0009436C E701                       	dc.b	smpsNoAttack, $01
0009436E E104                       	smpsAlterNote       $04
00094370 E701                       	dc.b	smpsNoAttack, $01
00094372 E108                       	smpsAlterNote       $08
00094374 E701                       	dc.b	smpsNoAttack, $01
00094376 E10E                       	smpsAlterNote       $0E
00094378 E701                       	dc.b	smpsNoAttack, $01
0009437A E10F                       	smpsAlterNote       $0F
0009437C E701                       	dc.b	smpsNoAttack, $01
0009437E E10B                       	smpsAlterNote       $0B
00094380 E701                       	dc.b	smpsNoAttack, $01
00094382 E105                       	smpsAlterNote       $05
00094384 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094388 E108                       	smpsAlterNote       $08
0009438A E701                       	dc.b	smpsNoAttack, $01
0009438C E10E                       	smpsAlterNote       $0E
0009438E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094392 E108                       	smpsAlterNote       $08
00094394 E701                       	dc.b	smpsNoAttack, $01
00094396 E105                       	smpsAlterNote       $05
00094398 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009439C E10B                       	smpsAlterNote       $0B
0009439E E701                       	dc.b	smpsNoAttack, $01
000943A0 E10F                       	smpsAlterNote       $0F
000943A2 E701                       	dc.b	smpsNoAttack, $01
000943A4 E10E                       	smpsAlterNote       $0E
000943A6 E701                       	dc.b	smpsNoAttack, $01
000943A8 E108                       	smpsAlterNote       $08
000943AA E701                       	dc.b	smpsNoAttack, $01
000943AC E104                       	smpsAlterNote       $04
000943AE E701                       	dc.b	smpsNoAttack, $01
000943B0 E108                       	smpsAlterNote       $08
000943B2 E701                       	dc.b	smpsNoAttack, $01
000943B4 E10E                       	smpsAlterNote       $0E
000943B6 E701                       	dc.b	smpsNoAttack, $01
000943B8 E10F                       	smpsAlterNote       $0F
000943BA E701                       	dc.b	smpsNoAttack, $01
000943BC E10B                       	smpsAlterNote       $0B
000943BE E701                       	dc.b	smpsNoAttack, $01
000943C0 E105                       	smpsAlterNote       $05
000943C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000943C6 E108                       	smpsAlterNote       $08
000943C8 E701                       	dc.b	smpsNoAttack, $01
000943CA E10E                       	smpsAlterNote       $0E
000943CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000943D0 E108                       	smpsAlterNote       $08
000943D2 E701                       	dc.b	smpsNoAttack, $01
000943D4 E105                       	smpsAlterNote       $05
000943D6 E701                       	dc.b	smpsNoAttack, $01
000943D8 E10B                       	smpsAlterNote       $0B
000943DA C60D                       	dc.b	nA5, $0D
000943DC E108                       	smpsAlterNote       $08
000943DE E701                       	dc.b	smpsNoAttack, $01
000943E0 E104                       	smpsAlterNote       $04
000943E2 E701                       	dc.b	smpsNoAttack, $01
000943E4 E105                       	smpsAlterNote       $05
000943E6 E701                       	dc.b	smpsNoAttack, $01
000943E8 E10B                       	smpsAlterNote       $0B
000943EA E701                       	dc.b	smpsNoAttack, $01
000943EC E10F                       	smpsAlterNote       $0F
000943EE E701                       	dc.b	smpsNoAttack, $01
000943F0 E10B                       	smpsAlterNote       $0B
000943F2 E701                       	dc.b	smpsNoAttack, $01
000943F4 E108                       	smpsAlterNote       $08
000943F6 E701                       	dc.b	smpsNoAttack, $01
000943F8 E104                       	smpsAlterNote       $04
000943FA E701                       	dc.b	smpsNoAttack, $01
000943FC E108                       	smpsAlterNote       $08
000943FE E701                       	dc.b	smpsNoAttack, $01
00094400 E10E                       	smpsAlterNote       $0E
00094402 E701                       	dc.b	smpsNoAttack, $01
00094404 E10F                       	smpsAlterNote       $0F
00094406 E701                       	dc.b	smpsNoAttack, $01
0009440A E109                       	smpsAlterNote       $09
0009440C E6FF                       	smpsAlterVol        $FF
0009440E C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00094418 E108                       	smpsAlterNote       $08
0009441A C103 800E                  	dc.b	nE5, $03, nRst, $0E
00094420 E107                       	smpsAlterNote       $07
00094422 E601                       	smpsAlterVol        $01
00094424 BF03                       	dc.b	nD5, $03
00094426 E108                       	smpsAlterNote       $08
00094428 C103 8001                  	dc.b	nE5, $03, nRst, $01
0009442C E109                       	smpsAlterNote       $09
0009442E C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00094434 E10B                       	smpsAlterNote       $0B
00094436 C606 8001                  	dc.b	nA5, $06, nRst, $01
0009443A E107                       	smpsAlterNote       $07
0009443C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094440 E106                       	smpsAlterNote       $06
00094442 C90D                       	dc.b	nC6, $0D
00094444 E103                       	smpsAlterNote       $03
00094446 E701                       	dc.b	smpsNoAttack, $01
00094448 E1FF                       	smpsAlterNote       $FF
0009444A E701                       	dc.b	smpsNoAttack, $01
0009444C E103                       	smpsAlterNote       $03
0009444E E701                       	dc.b	smpsNoAttack, $01
00094450 E109                       	smpsAlterNote       $09
00094452 E701                       	dc.b	smpsNoAttack, $01
00094454 E10A                       	smpsAlterNote       $0A
00094456 E701                       	dc.b	smpsNoAttack, $01
00094458 E106                       	smpsAlterNote       $06
0009445A E701                       	dc.b	smpsNoAttack, $01
0009445C E100                       	smpsAlterNote       $00
0009445E E701                       	dc.b	smpsNoAttack, $01
00094460 E10C                       	smpsAlterNote       $0C
00094462 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094466 E10B                       	smpsAlterNote       $0B
00094468 C603                       	dc.b	nA5, $03
0009446A E109                       	smpsAlterNote       $09
0009446C C403 8001                  	dc.b	nG5, $03, nRst, $01
00094470 E10B                       	smpsAlterNote       $0B
00094472 C60D                       	dc.b	nA5, $0D
00094474 E105                       	smpsAlterNote       $05
00094476 E701                       	dc.b	smpsNoAttack, $01
00094478 E104                       	smpsAlterNote       $04
0009447A E701                       	dc.b	smpsNoAttack, $01
0009447C E108                       	smpsAlterNote       $08
0009447E E701                       	dc.b	smpsNoAttack, $01
00094480 E10E                       	smpsAlterNote       $0E
00094482 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094486 E10B                       	smpsAlterNote       $0B
00094488 E701                       	dc.b	smpsNoAttack, $01
0009448A E105                       	smpsAlterNote       $05
0009448C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094490 E10B                       	smpsAlterNote       $0B
00094492 E701                       	dc.b	smpsNoAttack, $01
00094494 E10E                       	smpsAlterNote       $0E
00094496 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009449A E108                       	smpsAlterNote       $08
0009449C E701                       	dc.b	smpsNoAttack, $01
0009449E E104                       	smpsAlterNote       $04
000944A0 E701                       	dc.b	smpsNoAttack, $01
000944A2 E105                       	smpsAlterNote       $05
000944A4 E701                       	dc.b	smpsNoAttack, $01
000944A6 E10B                       	smpsAlterNote       $0B
000944A8 E701                       	dc.b	smpsNoAttack, $01
000944AA E10F                       	smpsAlterNote       $0F
000944AC E701                       	dc.b	smpsNoAttack, $01
000944AE E10B                       	smpsAlterNote       $0B
000944B0 E701                       	dc.b	smpsNoAttack, $01
000944B2 E108                       	smpsAlterNote       $08
000944B4 E701                       	dc.b	smpsNoAttack, $01
000944B6 E104                       	smpsAlterNote       $04
000944B8 E701                       	dc.b	smpsNoAttack, $01
000944BA E108                       	smpsAlterNote       $08
000944BC E701                       	dc.b	smpsNoAttack, $01
000944BE E10E                       	smpsAlterNote       $0E
000944C0 E701                       	dc.b	smpsNoAttack, $01
000944C2 E10F                       	smpsAlterNote       $0F
000944C4 E701                       	dc.b	smpsNoAttack, $01
000944C6 E10B                       	smpsAlterNote       $0B
000944C8 E701                       	dc.b	smpsNoAttack, $01
000944CA E105                       	smpsAlterNote       $05
000944CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944D0 E108                       	smpsAlterNote       $08
000944D2 E701                       	dc.b	smpsNoAttack, $01
000944D4 E10E                       	smpsAlterNote       $0E
000944D6 E701                       	dc.b	smpsNoAttack, $01
000944D8 E10F                       	smpsAlterNote       $0F
000944DA 800F                       	dc.b	nRst, $0F
000944DC E107                       	smpsAlterNote       $07
000944DE BF02 8001                  	dc.b	nD5, $02, nRst, $01
000944E2 E108                       	smpsAlterNote       $08
000944E4 C103                       	dc.b	nE5, $03
000944E6 E109                       	smpsAlterNote       $09
000944E8 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000944EE E10B                       	smpsAlterNote       $0B
000944F0 C606 8001                  	dc.b	nA5, $06, nRst, $01
000944F4 E107                       	smpsAlterNote       $07
000944F6 BF03                       	dc.b	nD5, $03
000944F8 E106                       	smpsAlterNote       $06
000944FA C90E                       	dc.b	nC6, $0E
000944FC E107                       	smpsAlterNote       $07
000944FE CB03 8001                  	dc.b	nD6, $03, nRst, $01
00094502 E10C                       	smpsAlterNote       $0C
00094504 C704                       	dc.b	nBb5, $04
00094506 E10B                       	smpsAlterNote       $0B
00094508 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009450C E109                       	smpsAlterNote       $09
0009450E C404                       	dc.b	nG5, $04
00094510 E10B                       	smpsAlterNote       $0B
00094512 C60D                       	dc.b	nA5, $0D
00094514 E108                       	smpsAlterNote       $08
00094516 E701                       	dc.b	smpsNoAttack, $01
00094518 E105                       	smpsAlterNote       $05
0009451A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009451E E10B                       	smpsAlterNote       $0B
00094520 E701                       	dc.b	smpsNoAttack, $01
00094522 E10F                       	smpsAlterNote       $0F
00094524 E701                       	dc.b	smpsNoAttack, $01
00094526 E10E                       	smpsAlterNote       $0E
00094528 E701                       	dc.b	smpsNoAttack, $01
0009452A E108                       	smpsAlterNote       $08
0009452C E701                       	dc.b	smpsNoAttack, $01
0009452E E104                       	smpsAlterNote       $04
00094530 E701                       	dc.b	smpsNoAttack, $01
00094532 E108                       	smpsAlterNote       $08
00094534 E701                       	dc.b	smpsNoAttack, $01
00094536 E10B                       	smpsAlterNote       $0B
00094538 E701                       	dc.b	smpsNoAttack, $01
0009453A E10F                       	smpsAlterNote       $0F
0009453C E701                       	dc.b	smpsNoAttack, $01
0009453E E10B                       	smpsAlterNote       $0B
00094540 E701                       	dc.b	smpsNoAttack, $01
00094542 E105                       	smpsAlterNote       $05
00094544 E701                       	dc.b	smpsNoAttack, $01
00094546 E104                       	smpsAlterNote       $04
00094548 E701                       	dc.b	smpsNoAttack, $01
0009454A E108                       	smpsAlterNote       $08
0009454C E701                       	dc.b	smpsNoAttack, $01
0009454E E10E                       	smpsAlterNote       $0E
00094550 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094554 E10B                       	smpsAlterNote       $0B
00094556 E701                       	dc.b	smpsNoAttack, $01
00094558 E105                       	smpsAlterNote       $05
0009455A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009455E E10B                       	smpsAlterNote       $0B
00094560 E701                       	dc.b	smpsNoAttack, $01
00094562 E10E                       	smpsAlterNote       $0E
00094564 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094568 E108                       	smpsAlterNote       $08
0009456A E701                       	dc.b	smpsNoAttack, $01
0009456C E105                       	smpsAlterNote       $05
0009456E 8001                       	dc.b	nRst, $01
00094570 E109                       	smpsAlterNote       $09
00094572 C402                       	dc.b	nG5, $02
00094574 E10B                       	smpsAlterNote       $0B
00094576 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0009457F E109                       	smpsAlterNote       $09
00094581 C404                       	dc.b	nG5, $04
00094583 E10B                       	smpsAlterNote       $0B
00094585 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094589 E107                       	smpsAlterNote       $07
0009458B BF0D                       	dc.b	nD5, $0D
0009458D E101                       	smpsAlterNote       $01
0009458F E701                       	dc.b	smpsNoAttack, $01
00094591 E100                       	smpsAlterNote       $00
00094593 E701                       	dc.b	smpsNoAttack, $01
00094595 E104                       	smpsAlterNote       $04
00094597 E701                       	dc.b	smpsNoAttack, $01
00094599 E10A                       	smpsAlterNote       $0A
0009459B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009459F E107                       	smpsAlterNote       $07
000945A1 E701                       	dc.b	smpsNoAttack, $01
000945A3 E101                       	smpsAlterNote       $01
000945A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945A9 E107                       	smpsAlterNote       $07
000945AB E701                       	dc.b	smpsNoAttack, $01
000945AD E10A                       	smpsAlterNote       $0A
000945AF E701                       	dc.b	smpsNoAttack, $01
000945B1 E10B                       	smpsAlterNote       $0B
000945B3 8001                       	dc.b	nRst, $01
000945B5 E108                       	smpsAlterNote       $08
000945B7 C101                       	dc.b	nE5, $01
000945B9 E109                       	smpsAlterNote       $09
000945BB E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000945C0 E10B                       	smpsAlterNote       $0B
000945C2 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000945CA E108                       	smpsAlterNote       $08
000945CC CD06 8001                  	dc.b	nE6, $06, nRst, $01
000945D0 E109                       	smpsAlterNote       $09
000945D2 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000945D6 E108                       	smpsAlterNote       $08
000945D8 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000945DC E106                       	smpsAlterNote       $06
000945DE C903                       	dc.b	nC6, $03
000945E0 E109                       	smpsAlterNote       $09
000945E2 C403 8001                  	dc.b	nG5, $03, nRst, $01
000945E6 E10C                       	smpsAlterNote       $0C
000945E8 C70D                       	dc.b	nBb5, $0D
000945EA E109                       	smpsAlterNote       $09
000945EC E701                       	dc.b	smpsNoAttack, $01
000945EE E105                       	smpsAlterNote       $05
000945F0 E701                       	dc.b	smpsNoAttack, $01
000945F2 E109                       	smpsAlterNote       $09
000945F4 E701                       	dc.b	smpsNoAttack, $01
000945F6 E10F                       	smpsAlterNote       $0F
000945F8 E701                       	dc.b	smpsNoAttack, $01
000945FA E110                       	smpsAlterNote       $10
000945FC E701                       	dc.b	smpsNoAttack, $01
000945FE E10C                       	smpsAlterNote       $0C
00094600 E701                       	dc.b	smpsNoAttack, $01
00094602 E106                       	smpsAlterNote       $06
00094604 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094608 E109                       	smpsAlterNote       $09
0009460A E701                       	dc.b	smpsNoAttack, $01
0009460C E10F                       	smpsAlterNote       $0F
0009460E E701                       	dc.b	smpsNoAttack, $01
00094610 E110                       	smpsAlterNote       $10
00094612 8001                       	dc.b	nRst, $01
00094614 E10B                       	smpsAlterNote       $0B
00094616 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0009461C E105                       	smpsAlterNote       $05
0009461E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094622 E108                       	smpsAlterNote       $08
00094624 E701                       	dc.b	smpsNoAttack, $01
00094626 E10E                       	smpsAlterNote       $0E
00094628 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009462C E108                       	smpsAlterNote       $08
0009462E E701                       	dc.b	smpsNoAttack, $01
00094630 E105                       	smpsAlterNote       $05
00094632 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094636 E10B                       	smpsAlterNote       $0B
00094638 E701                       	dc.b	smpsNoAttack, $01
0009463A E10F                       	smpsAlterNote       $0F
0009463C E701                       	dc.b	smpsNoAttack, $01
0009463E E10E                       	smpsAlterNote       $0E
00094640 E701                       	dc.b	smpsNoAttack, $01
00094642 E108                       	smpsAlterNote       $08
00094644 E701                       	dc.b	smpsNoAttack, $01
00094646 E104                       	smpsAlterNote       $04
00094648 E701                       	dc.b	smpsNoAttack, $01
0009464A E108                       	smpsAlterNote       $08
0009464C E701                       	dc.b	smpsNoAttack, $01
0009464E E10B                       	smpsAlterNote       $0B
00094650 E701                       	dc.b	smpsNoAttack, $01
00094652 E10F                       	smpsAlterNote       $0F
00094654 E701                       	dc.b	smpsNoAttack, $01
00094656 E10B                       	smpsAlterNote       $0B
00094658 E701                       	dc.b	smpsNoAttack, $01
0009465A E105                       	smpsAlterNote       $05
0009465C E701                       	dc.b	smpsNoAttack, $01
0009465E E104                       	smpsAlterNote       $04
00094660 E701                       	dc.b	smpsNoAttack, $01
00094662 E108                       	smpsAlterNote       $08
00094664 E701                       	dc.b	smpsNoAttack, $01
00094666 E10E                       	smpsAlterNote       $0E
00094668 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009466C E10B                       	smpsAlterNote       $0B
0009466E E701                       	dc.b	smpsNoAttack, $01
00094670 E105                       	smpsAlterNote       $05
00094672 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094676 E10B                       	smpsAlterNote       $0B
00094678 E701                       	dc.b	smpsNoAttack, $01
0009467A E10E                       	smpsAlterNote       $0E
0009467C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094680 E108                       	smpsAlterNote       $08
00094682 E701                       	dc.b	smpsNoAttack, $01
00094684 E104                       	smpsAlterNote       $04
00094686 E701                       	dc.b	smpsNoAttack, $01
00094688 E105                       	smpsAlterNote       $05
0009468A E701                       	dc.b	smpsNoAttack, $01
0009468C E10B                       	smpsAlterNote       $0B
0009468E E701                       	dc.b	smpsNoAttack, $01
00094690 E10F                       	smpsAlterNote       $0F
00094692 E701                       	dc.b	smpsNoAttack, $01
00094694 E10B                       	smpsAlterNote       $0B
00094696 E701                       	dc.b	smpsNoAttack, $01
00094698 E108                       	smpsAlterNote       $08
0009469A E701                       	dc.b	smpsNoAttack, $01
0009469C E104                       	smpsAlterNote       $04
0009469E E701                       	dc.b	smpsNoAttack, $01
000946A0 E108                       	smpsAlterNote       $08
000946A2 E701                       	dc.b	smpsNoAttack, $01
000946A4 E10E                       	smpsAlterNote       $0E
000946A6 E701                       	dc.b	smpsNoAttack, $01
000946A8 E10F                       	smpsAlterNote       $0F
000946AA E701                       	dc.b	smpsNoAttack, $01
000946AC E10B                       	smpsAlterNote       $0B
000946AE E701                       	dc.b	smpsNoAttack, $01
000946B0 E105                       	smpsAlterNote       $05
000946B2 E701                       	dc.b	smpsNoAttack, $01
000946B4 E10B                       	smpsAlterNote       $0B
000946B6 C60E                       	dc.b	nA5, $0E
000946B8 E105                       	smpsAlterNote       $05
000946BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946BE E10B                       	smpsAlterNote       $0B
000946C0 E701                       	dc.b	smpsNoAttack, $01
000946C2 E10E                       	smpsAlterNote       $0E
000946C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946C8 E108                       	smpsAlterNote       $08
000946CA E701                       	dc.b	smpsNoAttack, $01
000946CC E104                       	smpsAlterNote       $04
000946CE E701                       	dc.b	smpsNoAttack, $01
000946D0 E105                       	smpsAlterNote       $05
000946D2 E701                       	dc.b	smpsNoAttack, $01
000946D4 E10B                       	smpsAlterNote       $0B
000946D6 E701                       	dc.b	smpsNoAttack, $01
000946D8 E10F                       	smpsAlterNote       $0F
000946DA E701                       	dc.b	smpsNoAttack, $01
000946DC E10B                       	smpsAlterNote       $0B
000946DE E701                       	dc.b	smpsNoAttack, $01
000946E0 E108                       	smpsAlterNote       $08
000946E2 E701                       	dc.b	smpsNoAttack, $01
000946E4 E104                       	smpsAlterNote       $04
000946E6 E701                       	dc.b	smpsNoAttack, $01
000946E8 E108                       	smpsAlterNote       $08
000946EA E701                       	dc.b	smpsNoAttack, $01
000946EC E10E                       	smpsAlterNote       $0E
000946EE E701                       	dc.b	smpsNoAttack, $01
000946F0 E10F                       	smpsAlterNote       $0F
000946F2 E701                       	dc.b	smpsNoAttack, $01
000946F4 E10B                       	smpsAlterNote       $0B
000946F6 E701                       	dc.b	smpsNoAttack, $01
000946F8 E105                       	smpsAlterNote       $05
000946FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946FE E108                       	smpsAlterNote       $08
00094700 E701                       	dc.b	smpsNoAttack, $01
00094702 E10E                       	smpsAlterNote       $0E
00094704 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094708 E108                       	smpsAlterNote       $08
0009470A E701                       	dc.b	smpsNoAttack, $01
0009470C E105                       	smpsAlterNote       $05
0009470E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094712 E10B                       	smpsAlterNote       $0B
00094714 E701                       	dc.b	smpsNoAttack, $01
00094716 E10F                       	smpsAlterNote       $0F
00094718 E701                       	dc.b	smpsNoAttack, $01
0009471A E10E                       	smpsAlterNote       $0E
0009471C E701                       	dc.b	smpsNoAttack, $01
0009471E E108                       	smpsAlterNote       $08
00094720 E701                       	dc.b	smpsNoAttack, $01
00094722 E104                       	smpsAlterNote       $04
00094724 E701                       	dc.b	smpsNoAttack, $01
00094726 E108                       	smpsAlterNote       $08
00094728 E701                       	dc.b	smpsNoAttack, $01
0009472A E10E                       	smpsAlterNote       $0E
0009472C E701                       	dc.b	smpsNoAttack, $01
0009472E E10F                       	smpsAlterNote       $0F
00094730 E701                       	dc.b	smpsNoAttack, $01
00094732 E10B                       	smpsAlterNote       $0B
00094734 E701                       	dc.b	smpsNoAttack, $01
00094736 E105                       	smpsAlterNote       $05
00094738 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009473C E108                       	smpsAlterNote       $08
0009473E E701                       	dc.b	smpsNoAttack, $01
00094740 E10E                       	smpsAlterNote       $0E
00094742 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094746 E108                       	smpsAlterNote       $08
00094748 E701                       	dc.b	smpsNoAttack, $01
0009474A E105                       	smpsAlterNote       $05
0009474C E701                       	dc.b	smpsNoAttack, $01
00094750 E10B                       	smpsAlterNote       $0B
00094752 E6FD                       	smpsAlterVol        $FD
00094754 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094758 E109                       	smpsAlterNote       $09
0009475A C404                       	dc.b	nG5, $04
0009475C E10B                       	smpsAlterNote       $0B
0009475E C604 8001                  	dc.b	nA5, $04, nRst, $01
00094762 E107                       	smpsAlterNote       $07
00094764 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0009476A E10B                       	smpsAlterNote       $0B
0009476C C604                       	dc.b	nA5, $04
0009476E E109                       	smpsAlterNote       $09
00094770 C404 8001                  	dc.b	nG5, $04, nRst, $01
00094774 E10B                       	smpsAlterNote       $0B
00094776 C604                       	dc.b	nA5, $04
00094778 E108                       	smpsAlterNote       $08
0009477A C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00094782 E106                       	smpsAlterNote       $06
00094784 C904 8001                  	dc.b	nC6, $04, nRst, $01
00094788 E10C                       	smpsAlterNote       $0C
0009478A C704                       	dc.b	nBb5, $04
0009478C E10B                       	smpsAlterNote       $0B
0009478E C604 8001                  	dc.b	nA5, $04, nRst, $01
00094792 E109                       	smpsAlterNote       $09
00094794 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0009479E E10B                       	smpsAlterNote       $0B
000947A0 C60D                       	dc.b	nA5, $0D
000947A2 E108                       	smpsAlterNote       $08
000947A4 E701                       	dc.b	smpsNoAttack, $01
000947A6 E104                       	smpsAlterNote       $04
000947A8 E701                       	dc.b	smpsNoAttack, $01
000947AA E108                       	smpsAlterNote       $08
000947AC E701                       	dc.b	smpsNoAttack, $01
000947AE E10E                       	smpsAlterNote       $0E
000947B0 E701                       	dc.b	smpsNoAttack, $01
000947B2 E10F                       	smpsAlterNote       $0F
000947B4 E701                       	dc.b	smpsNoAttack, $01
000947B6 E10B                       	smpsAlterNote       $0B
000947B8 E701                       	dc.b	smpsNoAttack, $01
000947BA E105                       	smpsAlterNote       $05
000947BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947C0 E108                       	smpsAlterNote       $08
000947C2 E701                       	dc.b	smpsNoAttack, $01
000947C4 E10E                       	smpsAlterNote       $0E
000947C6 E701                       	dc.b	smpsNoAttack, $01
000947C8 E10F                       	smpsAlterNote       $0F
000947CA 8001                       	dc.b	nRst, $01
000947CC E109                       	smpsAlterNote       $09
000947CE C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000947D4 E108                       	smpsAlterNote       $08
000947D6 C10D                       	dc.b	nE5, $0D
000947D8 E102                       	smpsAlterNote       $02
000947DA E701                       	dc.b	smpsNoAttack, $01
000947DC E101                       	smpsAlterNote       $01
000947DE E701                       	dc.b	smpsNoAttack, $01
000947E0 E105                       	smpsAlterNote       $05
000947E2 E701                       	dc.b	smpsNoAttack, $01
000947E4 E10B                       	smpsAlterNote       $0B
000947E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947EA E108                       	smpsAlterNote       $08
000947EC E701                       	dc.b	smpsNoAttack, $01
000947EE E102                       	smpsAlterNote       $02
000947F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947F4 E108                       	smpsAlterNote       $08
000947F6 E701                       	dc.b	smpsNoAttack, $01
000947F8 E10B                       	smpsAlterNote       $0B
000947FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947FE E105                       	smpsAlterNote       $05
00094800 E701                       	dc.b	smpsNoAttack, $01
00094802 E101                       	smpsAlterNote       $01
00094804 E701                       	dc.b	smpsNoAttack, $01
00094806 E102                       	smpsAlterNote       $02
00094808 E701                       	dc.b	smpsNoAttack, $01
0009480A E108                       	smpsAlterNote       $08
0009480C E701                       	dc.b	smpsNoAttack, $01
0009480E E10C                       	smpsAlterNote       $0C
00094810 E701                       	dc.b	smpsNoAttack, $01
00094812 E108                       	smpsAlterNote       $08
00094814 E701                       	dc.b	smpsNoAttack, $01
00094816 E105                       	smpsAlterNote       $05
00094818 E701                       	dc.b	smpsNoAttack, $01
0009481A E101                       	smpsAlterNote       $01
0009481C E701                       	dc.b	smpsNoAttack, $01
0009481E E105                       	smpsAlterNote       $05
00094820 E701                       	dc.b	smpsNoAttack, $01
00094822 E10B                       	smpsAlterNote       $0B
00094824 E701                       	dc.b	smpsNoAttack, $01
00094826 E10C                       	smpsAlterNote       $0C
00094828 E701                       	dc.b	smpsNoAttack, $01
0009482A E108                       	smpsAlterNote       $08
0009482C E701                       	dc.b	smpsNoAttack, $01
0009482E E102                       	smpsAlterNote       $02
00094830 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094834 E105                       	smpsAlterNote       $05
00094836 E701                       	dc.b	smpsNoAttack, $01
00094838 E10B                       	smpsAlterNote       $0B
0009483A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009483E E105                       	smpsAlterNote       $05
00094840 E701                       	dc.b	smpsNoAttack, $01
00094842 E102                       	smpsAlterNote       $02
00094844 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094848 E108                       	smpsAlterNote       $08
0009484A E701                       	dc.b	smpsNoAttack, $01
0009484C E10C                       	smpsAlterNote       $0C
0009484E E701                       	dc.b	smpsNoAttack, $01
00094850 E10B                       	smpsAlterNote       $0B
00094852 E701                       	dc.b	smpsNoAttack, $01
00094854 E105                       	smpsAlterNote       $05
00094856 E701                       	dc.b	smpsNoAttack, $01
00094858 E101                       	smpsAlterNote       $01
0009485A E701                       	dc.b	smpsNoAttack, $01
0009485C E105                       	smpsAlterNote       $05
0009485E E701                       	dc.b	smpsNoAttack, $01
00094860 E108                       	smpsAlterNote       $08
00094862 E701                       	dc.b	smpsNoAttack, $01
00094864 E10C                       	smpsAlterNote       $0C
00094866 E701                       	dc.b	smpsNoAttack, $01
00094868 E108                       	smpsAlterNote       $08
0009486A E701                       	dc.b	smpsNoAttack, $01
0009486C E102                       	smpsAlterNote       $02
0009486E E701                       	dc.b	smpsNoAttack, $01
00094870 E101                       	smpsAlterNote       $01
00094872 E701                       	dc.b	smpsNoAttack, $01
00094874 E105                       	smpsAlterNote       $05
00094876 E701                       	dc.b	smpsNoAttack, $01
00094878 E10B                       	smpsAlterNote       $0B
0009487A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009487E E108                       	smpsAlterNote       $08
00094880 E701                       	dc.b	smpsNoAttack, $01
00094882 E102                       	smpsAlterNote       $02
00094884 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094888 E108                       	smpsAlterNote       $08
0009488A E701                       	dc.b	smpsNoAttack, $01
0009488C E10B                       	smpsAlterNote       $0B
0009488E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094892 E105                       	smpsAlterNote       $05
00094894 E701                       	dc.b	smpsNoAttack, $01
00094896 E101                       	smpsAlterNote       $01
00094898 E701                       	dc.b	smpsNoAttack, $01
0009489A E102                       	smpsAlterNote       $02
0009489C E701                       	dc.b	smpsNoAttack, $01
0009489E E108                       	smpsAlterNote       $08
000948A0 E701                       	dc.b	smpsNoAttack, $01
000948A2 E10C                       	smpsAlterNote       $0C
000948A4 E701                       	dc.b	smpsNoAttack, $01
000948A6 E108                       	smpsAlterNote       $08
000948A8 E701                       	dc.b	smpsNoAttack, $01
000948AA E105                       	smpsAlterNote       $05
000948AC E701                       	dc.b	smpsNoAttack, $01
000948AE E101                       	smpsAlterNote       $01
000948B0 E701                       	dc.b	smpsNoAttack, $01
000948B2 E105                       	smpsAlterNote       $05
000948B4 E701                       	dc.b	smpsNoAttack, $01
000948B6 E10B                       	smpsAlterNote       $0B
000948B8 E701                       	dc.b	smpsNoAttack, $01
000948BA E10C                       	smpsAlterNote       $0C
000948BC E701                       	dc.b	smpsNoAttack, $01
000948BE E108                       	smpsAlterNote       $08
000948C0 E701                       	dc.b	smpsNoAttack, $01
000948C2 E102                       	smpsAlterNote       $02
000948C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948C8 E105                       	smpsAlterNote       $05
000948CA E701                       	dc.b	smpsNoAttack, $01
000948CC E10B                       	smpsAlterNote       $0B
000948CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948D2 E105                       	smpsAlterNote       $05
000948D4 E701                       	dc.b	smpsNoAttack, $01
000948D6 E101                       	smpsAlterNote       $01
000948D8 E701                       	dc.b	smpsNoAttack, $01
000948DA E102                       	smpsAlterNote       $02
000948DC E701                       	dc.b	smpsNoAttack, $01
000948DE E108                       	smpsAlterNote       $08
000948E0 E701                       	dc.b	smpsNoAttack, $01
000948E2 E10C                       	smpsAlterNote       $0C
000948E4 E701                       	dc.b	smpsNoAttack, $01
000948E6 E108                       	smpsAlterNote       $08
000948E8 E701                       	dc.b	smpsNoAttack, $01
000948EA E105                       	smpsAlterNote       $05
000948EC E701                       	dc.b	smpsNoAttack, $01
000948EE E101                       	smpsAlterNote       $01
000948F0 E701                       	dc.b	smpsNoAttack, $01
000948F2 E105                       	smpsAlterNote       $05
000948F4 E701                       	dc.b	smpsNoAttack, $01
000948F6 E10B                       	smpsAlterNote       $0B
000948F8 E701                       	dc.b	smpsNoAttack, $01
000948FA E10C                       	smpsAlterNote       $0C
000948FC E701                       	dc.b	smpsNoAttack, $01
000948FE E108                       	smpsAlterNote       $08
00094900 E701                       	dc.b	smpsNoAttack, $01
00094902 E102                       	smpsAlterNote       $02
00094904 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094908 E105                       	smpsAlterNote       $05
0009490A E701                       	dc.b	smpsNoAttack, $01
0009490C E10B                       	smpsAlterNote       $0B
0009490E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094912 E105                       	smpsAlterNote       $05
00094914 E701                       	dc.b	smpsNoAttack, $01
00094916 E102                       	smpsAlterNote       $02
00094918 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009491C E108                       	smpsAlterNote       $08
0009491E E701                       	dc.b	smpsNoAttack, $01
00094920 E10C                       	smpsAlterNote       $0C
00094922 E701                       	dc.b	smpsNoAttack, $01
00094924 E10B                       	smpsAlterNote       $0B
00094926 E701                       	dc.b	smpsNoAttack, $01
00094928 E105                       	smpsAlterNote       $05
0009492A E701                       	dc.b	smpsNoAttack, $01
0009492C E101                       	smpsAlterNote       $01
0009492E E701                       	dc.b	smpsNoAttack, $01
00094930 E105                       	smpsAlterNote       $05
00094932 E701                       	dc.b	smpsNoAttack, $01
00094934 E108                       	smpsAlterNote       $08
00094936 E701                       	dc.b	smpsNoAttack, $01
00094938 E10C                       	smpsAlterNote       $0C
0009493A E701                       	dc.b	smpsNoAttack, $01
0009493E E10B                       	smpsAlterNote       $0B
00094940 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094944 E109                       	smpsAlterNote       $09
00094946 C404                       	dc.b	nG5, $04
00094948 E10B                       	smpsAlterNote       $0B
0009494A C604 8001                  	dc.b	nA5, $04, nRst, $01
0009494E E107                       	smpsAlterNote       $07
00094950 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00094956 E10B                       	smpsAlterNote       $0B
00094958 C604                       	dc.b	nA5, $04
0009495A E109                       	smpsAlterNote       $09
0009495C C404 8001                  	dc.b	nG5, $04, nRst, $01
00094960 E10B                       	smpsAlterNote       $0B
00094962 C604                       	dc.b	nA5, $04
00094964 E108                       	smpsAlterNote       $08
00094966 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
0009496C E106                       	smpsAlterNote       $06
0009496E C904 8001                  	dc.b	nC6, $04, nRst, $01
00094972 E10C                       	smpsAlterNote       $0C
00094974 C704                       	dc.b	nBb5, $04
00094976 E10B                       	smpsAlterNote       $0B
00094978 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009497C E109                       	smpsAlterNote       $09
0009497E C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00094988 E10B                       	smpsAlterNote       $0B
0009498A C60D                       	dc.b	nA5, $0D
0009498C E108                       	smpsAlterNote       $08
0009498E E701                       	dc.b	smpsNoAttack, $01
00094990 E104                       	smpsAlterNote       $04
00094992 E701                       	dc.b	smpsNoAttack, $01
00094994 E108                       	smpsAlterNote       $08
00094996 E701                       	dc.b	smpsNoAttack, $01
00094998 E10B                       	smpsAlterNote       $0B
0009499A E701                       	dc.b	smpsNoAttack, $01
0009499C E10F                       	smpsAlterNote       $0F
0009499E E701                       	dc.b	smpsNoAttack, $01
000949A0 E10B                       	smpsAlterNote       $0B
000949A2 E701                       	dc.b	smpsNoAttack, $01
000949A4 E105                       	smpsAlterNote       $05
000949A6 E701                       	dc.b	smpsNoAttack, $01
000949A8 E104                       	smpsAlterNote       $04
000949AA E701                       	dc.b	smpsNoAttack, $01
000949AC E108                       	smpsAlterNote       $08
000949AE E701                       	dc.b	smpsNoAttack, $01
000949B0 E10E                       	smpsAlterNote       $0E
000949B2 E701                       	dc.b	smpsNoAttack, $01
000949B4 E10F                       	smpsAlterNote       $0F
000949B6 8001                       	dc.b	nRst, $01
000949B8 E109                       	smpsAlterNote       $09
000949BA C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000949C0 E108                       	smpsAlterNote       $08
000949C2 C10D                       	dc.b	nE5, $0D
000949C4 E105                       	smpsAlterNote       $05
000949C6 E701                       	dc.b	smpsNoAttack, $01
000949C8 E101                       	smpsAlterNote       $01
000949CA E701                       	dc.b	smpsNoAttack, $01
000949CC E105                       	smpsAlterNote       $05
000949CE E701                       	dc.b	smpsNoAttack, $01
000949D0 E10B                       	smpsAlterNote       $0B
000949D2 E701                       	dc.b	smpsNoAttack, $01
000949D4 E10C                       	smpsAlterNote       $0C
000949D6 E701                       	dc.b	smpsNoAttack, $01
000949D8 E108                       	smpsAlterNote       $08
000949DA E701                       	dc.b	smpsNoAttack, $01
000949DC E102                       	smpsAlterNote       $02
000949DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949E2 E105                       	smpsAlterNote       $05
000949E4 E701                       	dc.b	smpsNoAttack, $01
000949E6 E10B                       	smpsAlterNote       $0B
000949E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949EC E105                       	smpsAlterNote       $05
000949EE E701                       	dc.b	smpsNoAttack, $01
000949F0 E102                       	smpsAlterNote       $02
000949F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949F6 E108                       	smpsAlterNote       $08
000949F8 E701                       	dc.b	smpsNoAttack, $01
000949FA E10C                       	smpsAlterNote       $0C
000949FC E701                       	dc.b	smpsNoAttack, $01
000949FE E10B                       	smpsAlterNote       $0B
00094A00 E701                       	dc.b	smpsNoAttack, $01
00094A02 E105                       	smpsAlterNote       $05
00094A04 E701                       	dc.b	smpsNoAttack, $01
00094A06 E101                       	smpsAlterNote       $01
00094A08 E701                       	dc.b	smpsNoAttack, $01
00094A0A E105                       	smpsAlterNote       $05
00094A0C E701                       	dc.b	smpsNoAttack, $01
00094A0E E108                       	smpsAlterNote       $08
00094A10 E701                       	dc.b	smpsNoAttack, $01
00094A12 E10C                       	smpsAlterNote       $0C
00094A14 E701                       	dc.b	smpsNoAttack, $01
00094A16 E108                       	smpsAlterNote       $08
00094A18 E701                       	dc.b	smpsNoAttack, $01
00094A1A E102                       	smpsAlterNote       $02
00094A1C E701                       	dc.b	smpsNoAttack, $01
00094A1E E101                       	smpsAlterNote       $01
00094A20 E701                       	dc.b	smpsNoAttack, $01
00094A22 E105                       	smpsAlterNote       $05
00094A24 E701                       	dc.b	smpsNoAttack, $01
00094A26 E10B                       	smpsAlterNote       $0B
00094A28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A2C E108                       	smpsAlterNote       $08
00094A2E E701                       	dc.b	smpsNoAttack, $01
00094A30 E102                       	smpsAlterNote       $02
00094A32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A36 E108                       	smpsAlterNote       $08
00094A38 E701                       	dc.b	smpsNoAttack, $01
00094A3A E10B                       	smpsAlterNote       $0B
00094A3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A40 E105                       	smpsAlterNote       $05
00094A42 E701                       	dc.b	smpsNoAttack, $01
00094A44 E101                       	smpsAlterNote       $01
00094A46 E701                       	dc.b	smpsNoAttack, $01
00094A48 E102                       	smpsAlterNote       $02
00094A4A E701                       	dc.b	smpsNoAttack, $01
00094A4C E108                       	smpsAlterNote       $08
00094A4E E701                       	dc.b	smpsNoAttack, $01
00094A50 E10C                       	smpsAlterNote       $0C
00094A52 E701                       	dc.b	smpsNoAttack, $01
00094A54 E108                       	smpsAlterNote       $08
00094A56 E701                       	dc.b	smpsNoAttack, $01
00094A58 E105                       	smpsAlterNote       $05
00094A5A E701                       	dc.b	smpsNoAttack, $01
00094A5C E101                       	smpsAlterNote       $01
00094A5E E701                       	dc.b	smpsNoAttack, $01
00094A60 E105                       	smpsAlterNote       $05
00094A62 E701                       	dc.b	smpsNoAttack, $01
00094A64 E10B                       	smpsAlterNote       $0B
00094A66 E701                       	dc.b	smpsNoAttack, $01
00094A68 E10C                       	smpsAlterNote       $0C
00094A6A E701                       	dc.b	smpsNoAttack, $01
00094A6C E108                       	smpsAlterNote       $08
00094A6E E701                       	dc.b	smpsNoAttack, $01
00094A70 E102                       	smpsAlterNote       $02
00094A72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A76 E108                       	smpsAlterNote       $08
00094A78 E701                       	dc.b	smpsNoAttack, $01
00094A7A E10B                       	smpsAlterNote       $0B
00094A7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A80 E105                       	smpsAlterNote       $05
00094A82 E701                       	dc.b	smpsNoAttack, $01
00094A84 E101                       	smpsAlterNote       $01
00094A86 E701                       	dc.b	smpsNoAttack, $01
00094A88 E102                       	smpsAlterNote       $02
00094A8A E701                       	dc.b	smpsNoAttack, $01
00094A8C E108                       	smpsAlterNote       $08
00094A8E E701                       	dc.b	smpsNoAttack, $01
00094A90 E10C                       	smpsAlterNote       $0C
00094A92 E701                       	dc.b	smpsNoAttack, $01
00094A94 E108                       	smpsAlterNote       $08
00094A96 E701                       	dc.b	smpsNoAttack, $01
00094A98 E105                       	smpsAlterNote       $05
00094A9A E701                       	dc.b	smpsNoAttack, $01
00094A9C E101                       	smpsAlterNote       $01
00094A9E E701                       	dc.b	smpsNoAttack, $01
00094AA0 E105                       	smpsAlterNote       $05
00094AA2 E701                       	dc.b	smpsNoAttack, $01
00094AA4 E10B                       	smpsAlterNote       $0B
00094AA6 E701                       	dc.b	smpsNoAttack, $01
00094AA8 E10C                       	smpsAlterNote       $0C
00094AAA E701                       	dc.b	smpsNoAttack, $01
00094AAC E108                       	smpsAlterNote       $08
00094AAE E701                       	dc.b	smpsNoAttack, $01
00094AB0 E102                       	smpsAlterNote       $02
00094AB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AB6 E105                       	smpsAlterNote       $05
00094AB8 E701                       	dc.b	smpsNoAttack, $01
00094ABA E10B                       	smpsAlterNote       $0B
00094ABC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AC0 E105                       	smpsAlterNote       $05
00094AC2 E701                       	dc.b	smpsNoAttack, $01
00094AC4 E102                       	smpsAlterNote       $02
00094AC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094ACA E108                       	smpsAlterNote       $08
00094ACC E701                       	dc.b	smpsNoAttack, $01
00094ACE E10C                       	smpsAlterNote       $0C
00094AD0 E701                       	dc.b	smpsNoAttack, $01
00094AD2 E10B                       	smpsAlterNote       $0B
00094AD4 E701                       	dc.b	smpsNoAttack, $01
00094AD6 E105                       	smpsAlterNote       $05
00094AD8 E701                       	dc.b	smpsNoAttack, $01
00094ADA E101                       	smpsAlterNote       $01
00094ADC E701                       	dc.b	smpsNoAttack, $01
00094ADE E105                       	smpsAlterNote       $05
00094AE0 E701                       	dc.b	smpsNoAttack, $01
00094AE2 E108                       	smpsAlterNote       $08
00094AE4 E701                       	dc.b	smpsNoAttack, $01
00094AE6 E10C                       	smpsAlterNote       $0C
00094AE8 E701                       	dc.b	smpsNoAttack, $01
00094AEA E108                       	smpsAlterNote       $08
00094AEC E701                       	dc.b	smpsNoAttack, $01
00094AEE E102                       	smpsAlterNote       $02
00094AF0 E701                       	dc.b	smpsNoAttack, $01
00094AF2 E101                       	smpsAlterNote       $01
00094AF4 E701                       	dc.b	smpsNoAttack, $01
00094AF6 E105                       	smpsAlterNote       $05
00094AF8 E701                       	dc.b	smpsNoAttack, $01
00094AFA E10B                       	smpsAlterNote       $0B
00094AFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B00 E108                       	smpsAlterNote       $08
00094B02 E701                       	dc.b	smpsNoAttack, $01
00094B04 E102                       	smpsAlterNote       $02
00094B06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B0A E108                       	smpsAlterNote       $08
00094B0C E701                       	dc.b	smpsNoAttack, $01
00094B0E E10B                       	smpsAlterNote       $0B
00094B10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B14 E105                       	smpsAlterNote       $05
00094B16 E701                       	dc.b	smpsNoAttack, $01
00094B18 E102                       	smpsAlterNote       $02
00094B1A 8001                       	dc.b	nRst, $01
00094B1C E107                       	smpsAlterNote       $07
00094B1E BF01 8001                  	dc.b	nD5, $01, nRst, $01
00094B22 E108                       	smpsAlterNote       $08
00094B24 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00094B28 E102                       	smpsAlterNote       $02
00094B2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B2E E108                       	smpsAlterNote       $08
00094B30 E701                       	dc.b	smpsNoAttack, $01
00094B32 E10B                       	smpsAlterNote       $0B
00094B34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B38 E105                       	smpsAlterNote       $05
00094B3A E701                       	dc.b	smpsNoAttack, $01
00094B3C E101                       	smpsAlterNote       $01
00094B3E E701                       	dc.b	smpsNoAttack, $01
00094B40 E102                       	smpsAlterNote       $02
00094B42 E701                       	dc.b	smpsNoAttack, $01
00094B44 E108                       	smpsAlterNote       $08
00094B46 E701                       	dc.b	smpsNoAttack, $01
00094B48 E10C                       	smpsAlterNote       $0C
00094B4A E701                       	dc.b	smpsNoAttack, $01
00094B4C E108                       	smpsAlterNote       $08
00094B4E E701                       	dc.b	smpsNoAttack, $01
00094B50 E105                       	smpsAlterNote       $05
00094B52 E701                       	dc.b	smpsNoAttack, $01
00094B54 E101                       	smpsAlterNote       $01
00094B56 E701                       	dc.b	smpsNoAttack, $01
00094B58 E105                       	smpsAlterNote       $05
00094B5A E701                       	dc.b	smpsNoAttack, $01
00094B5C E10B                       	smpsAlterNote       $0B
00094B5E E701                       	dc.b	smpsNoAttack, $01
00094B60 E10C                       	smpsAlterNote       $0C
00094B62 E701                       	dc.b	smpsNoAttack, $01
00094B64 E108                       	smpsAlterNote       $08
00094B66 E701                       	dc.b	smpsNoAttack, $01
00094B68 E102                       	smpsAlterNote       $02
00094B6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B6E E105                       	smpsAlterNote       $05
00094B70 E701                       	dc.b	smpsNoAttack, $01
00094B72 E10B                       	smpsAlterNote       $0B
00094B74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B78 E105                       	smpsAlterNote       $05
00094B7A E701                       	dc.b	smpsNoAttack, $01
00094B7C E102                       	smpsAlterNote       $02
00094B7E E701                       	dc.b	smpsNoAttack, $01
00094B80 E109                       	smpsAlterNote       $09
00094B82 C40A C207                  	dc.b	nG5, $0A, nF5, $07
00094B86 E108                       	smpsAlterNote       $08
00094B88 C10D                       	dc.b	nE5, $0D
00094B8A E105                       	smpsAlterNote       $05
00094B8C E701                       	dc.b	smpsNoAttack, $01
00094B8E E101                       	smpsAlterNote       $01
00094B90 E701                       	dc.b	smpsNoAttack, $01
00094B92 E102                       	smpsAlterNote       $02
00094B94 E701                       	dc.b	smpsNoAttack, $01
00094B96 E108                       	smpsAlterNote       $08
00094B98 E701                       	dc.b	smpsNoAttack, $01
00094B9A E10C                       	smpsAlterNote       $0C
00094B9C E701                       	dc.b	smpsNoAttack, $01
00094B9E E108                       	smpsAlterNote       $08
00094BA0 E701                       	dc.b	smpsNoAttack, $01
00094BA2 E105                       	smpsAlterNote       $05
00094BA4 E701                       	dc.b	smpsNoAttack, $01
00094BA6 E101                       	smpsAlterNote       $01
00094BA8 E701                       	dc.b	smpsNoAttack, $01
00094BAA E105                       	smpsAlterNote       $05
00094BAC E701                       	dc.b	smpsNoAttack, $01
00094BAE E10B                       	smpsAlterNote       $0B
00094BB0 E701                       	dc.b	smpsNoAttack, $01
00094BB2 E10C                       	smpsAlterNote       $0C
00094BB4 E701                       	dc.b	smpsNoAttack, $01
00094BB6 E108                       	smpsAlterNote       $08
00094BB8 E701                       	dc.b	smpsNoAttack, $01
00094BBA E102                       	smpsAlterNote       $02
00094BBC E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00094BC4 E10B                       	smpsAlterNote       $0B
00094BC6 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00094BCA E10C                       	smpsAlterNote       $0C
00094BCC BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00094BD0 E10B                       	smpsAlterNote       $0B
00094BD2 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00094BD8 E107                       	smpsAlterNote       $07
00094BDA BF03                       	dc.b	nD5, $03
00094BDC E108                       	smpsAlterNote       $08
00094BDE C103 8001                  	dc.b	nE5, $03, nRst, $01
00094BE2 E109                       	smpsAlterNote       $09
00094BE4 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00094BEA E10B                       	smpsAlterNote       $0B
00094BEC C606 8001                  	dc.b	nA5, $06, nRst, $01
00094BF0 E107                       	smpsAlterNote       $07
00094BF2 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094BF6 E106                       	smpsAlterNote       $06
00094BF8 C90D                       	dc.b	nC6, $0D
00094BFA E103                       	smpsAlterNote       $03
00094BFC E701                       	dc.b	smpsNoAttack, $01
00094BFE E1FF                       	smpsAlterNote       $FF
00094C00 E701                       	dc.b	smpsNoAttack, $01
00094C02 E103                       	smpsAlterNote       $03
00094C04 E701                       	dc.b	smpsNoAttack, $01
00094C06 E109                       	smpsAlterNote       $09
00094C08 E701                       	dc.b	smpsNoAttack, $01
00094C0A E10A                       	smpsAlterNote       $0A
00094C0C E701                       	dc.b	smpsNoAttack, $01
00094C0E E106                       	smpsAlterNote       $06
00094C10 E701                       	dc.b	smpsNoAttack, $01
00094C12 E100                       	smpsAlterNote       $00
00094C14 E701                       	dc.b	smpsNoAttack, $01
00094C16 E10C                       	smpsAlterNote       $0C
00094C18 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094C1C E10B                       	smpsAlterNote       $0B
00094C1E C603                       	dc.b	nA5, $03
00094C20 E109                       	smpsAlterNote       $09
00094C22 C403 8001                  	dc.b	nG5, $03, nRst, $01
00094C26 E10B                       	smpsAlterNote       $0B
00094C28 C60D                       	dc.b	nA5, $0D
00094C2A E105                       	smpsAlterNote       $05
00094C2C E701                       	dc.b	smpsNoAttack, $01
00094C2E E104                       	smpsAlterNote       $04
00094C30 E701                       	dc.b	smpsNoAttack, $01
00094C32 E108                       	smpsAlterNote       $08
00094C34 E701                       	dc.b	smpsNoAttack, $01
00094C36 E10E                       	smpsAlterNote       $0E
00094C38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C3C E10B                       	smpsAlterNote       $0B
00094C3E E701                       	dc.b	smpsNoAttack, $01
00094C40 E105                       	smpsAlterNote       $05
00094C42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C46 E10B                       	smpsAlterNote       $0B
00094C48 E701                       	dc.b	smpsNoAttack, $01
00094C4A E10E                       	smpsAlterNote       $0E
00094C4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C50 E108                       	smpsAlterNote       $08
00094C52 E701                       	dc.b	smpsNoAttack, $01
00094C54 E104                       	smpsAlterNote       $04
00094C56 E701                       	dc.b	smpsNoAttack, $01
00094C58 E105                       	smpsAlterNote       $05
00094C5A E701                       	dc.b	smpsNoAttack, $01
00094C5C E10B                       	smpsAlterNote       $0B
00094C5E E701                       	dc.b	smpsNoAttack, $01
00094C60 E10F                       	smpsAlterNote       $0F
00094C62 E701                       	dc.b	smpsNoAttack, $01
00094C64 E10B                       	smpsAlterNote       $0B
00094C66 E701                       	dc.b	smpsNoAttack, $01
00094C68 E108                       	smpsAlterNote       $08
00094C6A E701                       	dc.b	smpsNoAttack, $01
00094C6C E104                       	smpsAlterNote       $04
00094C6E E701                       	dc.b	smpsNoAttack, $01
00094C70 E108                       	smpsAlterNote       $08
00094C72 E701                       	dc.b	smpsNoAttack, $01
00094C74 E10E                       	smpsAlterNote       $0E
00094C76 E701                       	dc.b	smpsNoAttack, $01
00094C78 E10F                       	smpsAlterNote       $0F
00094C7A E701                       	dc.b	smpsNoAttack, $01
00094C7C E10B                       	smpsAlterNote       $0B
00094C7E E701                       	dc.b	smpsNoAttack, $01
00094C80 E105                       	smpsAlterNote       $05
00094C82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C86 E108                       	smpsAlterNote       $08
00094C88 E701                       	dc.b	smpsNoAttack, $01
00094C8A E10E                       	smpsAlterNote       $0E
00094C8C E701                       	dc.b	smpsNoAttack, $01
00094C8E E10F                       	smpsAlterNote       $0F
00094C90 800F                       	dc.b	nRst, $0F
00094C92 E107                       	smpsAlterNote       $07
00094C94 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094C98 E108                       	smpsAlterNote       $08
00094C9A C103                       	dc.b	nE5, $03
00094C9C E109                       	smpsAlterNote       $09
00094C9E C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00094CA4 E10B                       	smpsAlterNote       $0B
00094CA6 C607                       	dc.b	nA5, $07
00094CA8 E107                       	smpsAlterNote       $07
00094CAA BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094CAE E106                       	smpsAlterNote       $06
00094CB0 C90D                       	dc.b	nC6, $0D
00094CB2 E107                       	smpsAlterNote       $07
00094CB4 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00094CB8 E10C                       	smpsAlterNote       $0C
00094CBA C704                       	dc.b	nBb5, $04
00094CBC E10B                       	smpsAlterNote       $0B
00094CBE C604 8001                  	dc.b	nA5, $04, nRst, $01
00094CC2 E109                       	smpsAlterNote       $09
00094CC4 C404                       	dc.b	nG5, $04
00094CC6 E10B                       	smpsAlterNote       $0B
00094CC8 C60D                       	dc.b	nA5, $0D
00094CCA E108                       	smpsAlterNote       $08
00094CCC E701                       	dc.b	smpsNoAttack, $01
00094CCE E105                       	smpsAlterNote       $05
00094CD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CD4 E10B                       	smpsAlterNote       $0B
00094CD6 E701                       	dc.b	smpsNoAttack, $01
00094CD8 E10F                       	smpsAlterNote       $0F
00094CDA E701                       	dc.b	smpsNoAttack, $01
00094CDC E10E                       	smpsAlterNote       $0E
00094CDE E701                       	dc.b	smpsNoAttack, $01
00094CE0 E108                       	smpsAlterNote       $08
00094CE2 E701                       	dc.b	smpsNoAttack, $01
00094CE4 E104                       	smpsAlterNote       $04
00094CE6 E701                       	dc.b	smpsNoAttack, $01
00094CE8 E108                       	smpsAlterNote       $08
00094CEA E701                       	dc.b	smpsNoAttack, $01
00094CEC E10B                       	smpsAlterNote       $0B
00094CEE E701                       	dc.b	smpsNoAttack, $01
00094CF0 E10F                       	smpsAlterNote       $0F
00094CF2 E701                       	dc.b	smpsNoAttack, $01
00094CF4 E10B                       	smpsAlterNote       $0B
00094CF6 E701                       	dc.b	smpsNoAttack, $01
00094CF8 E105                       	smpsAlterNote       $05
00094CFA E701                       	dc.b	smpsNoAttack, $01
00094CFC E104                       	smpsAlterNote       $04
00094CFE E701                       	dc.b	smpsNoAttack, $01
00094D00 E108                       	smpsAlterNote       $08
00094D02 E701                       	dc.b	smpsNoAttack, $01
00094D04 E10E                       	smpsAlterNote       $0E
00094D06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D0A E10B                       	smpsAlterNote       $0B
00094D0C E701                       	dc.b	smpsNoAttack, $01
00094D0E E105                       	smpsAlterNote       $05
00094D10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D14 E10B                       	smpsAlterNote       $0B
00094D16 E701                       	dc.b	smpsNoAttack, $01
00094D18 E10E                       	smpsAlterNote       $0E
00094D1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D1E E108                       	smpsAlterNote       $08
00094D20 E701                       	dc.b	smpsNoAttack, $01
00094D22 E105                       	smpsAlterNote       $05
00094D24 8001                       	dc.b	nRst, $01
00094D26 E109                       	smpsAlterNote       $09
00094D28 C401 8001                  	dc.b	nG5, $01, nRst, $01
00094D2C E10B                       	smpsAlterNote       $0B
00094D2E C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00094D36 E109                       	smpsAlterNote       $09
00094D38 C404                       	dc.b	nG5, $04
00094D3A E10B                       	smpsAlterNote       $0B
00094D3C C604 8001                  	dc.b	nA5, $04, nRst, $01
00094D40 E107                       	smpsAlterNote       $07
00094D42 BF0D                       	dc.b	nD5, $0D
00094D44 E101                       	smpsAlterNote       $01
00094D46 E701                       	dc.b	smpsNoAttack, $01
00094D48 E100                       	smpsAlterNote       $00
00094D4A E701                       	dc.b	smpsNoAttack, $01
00094D4C E104                       	smpsAlterNote       $04
00094D4E E701                       	dc.b	smpsNoAttack, $01
00094D50 E10A                       	smpsAlterNote       $0A
00094D52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D56 E107                       	smpsAlterNote       $07
00094D58 E701                       	dc.b	smpsNoAttack, $01
00094D5A E101                       	smpsAlterNote       $01
00094D5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D60 E107                       	smpsAlterNote       $07
00094D62 E701                       	dc.b	smpsNoAttack, $01
00094D64 E10A                       	smpsAlterNote       $0A
00094D66 E701                       	dc.b	smpsNoAttack, $01
00094D68 E10B                       	smpsAlterNote       $0B
00094D6A 8001                       	dc.b	nRst, $01
00094D6C E108                       	smpsAlterNote       $08
00094D6E 8001                       	dc.b	nRst, $01
00094D70 E109                       	smpsAlterNote       $09
00094D72 8001 C401                  	dc.b	nRst, $01, nG5, $01
00094D76 E10B                       	smpsAlterNote       $0B
00094D78 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00094D80 E108                       	smpsAlterNote       $08
00094D82 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00094D86 E109                       	smpsAlterNote       $09
00094D88 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00094D8C E108                       	smpsAlterNote       $08
00094D8E CD02 8001                  	dc.b	nE6, $02, nRst, $01
00094D92 E106                       	smpsAlterNote       $06
00094D94 C903                       	dc.b	nC6, $03
00094D96 E109                       	smpsAlterNote       $09
00094D98 C403 8001                  	dc.b	nG5, $03, nRst, $01
00094D9C E10C                       	smpsAlterNote       $0C
00094D9E C70D                       	dc.b	nBb5, $0D
00094DA0 E109                       	smpsAlterNote       $09
00094DA2 E701                       	dc.b	smpsNoAttack, $01
00094DA4 E105                       	smpsAlterNote       $05
00094DA6 E701                       	dc.b	smpsNoAttack, $01
00094DA8 E109                       	smpsAlterNote       $09
00094DAA E701                       	dc.b	smpsNoAttack, $01
00094DAC E10F                       	smpsAlterNote       $0F
00094DAE E701                       	dc.b	smpsNoAttack, $01
00094DB0 E110                       	smpsAlterNote       $10
00094DB2 E701                       	dc.b	smpsNoAttack, $01
00094DB4 E10C                       	smpsAlterNote       $0C
00094DB6 E701                       	dc.b	smpsNoAttack, $01
00094DB8 E106                       	smpsAlterNote       $06
00094DBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DBE E109                       	smpsAlterNote       $09
00094DC0 E701                       	dc.b	smpsNoAttack, $01
00094DC2 E10F                       	smpsAlterNote       $0F
00094DC4 E701                       	dc.b	smpsNoAttack, $01
00094DC6 E110                       	smpsAlterNote       $10
00094DC8 8001                       	dc.b	nRst, $01
00094DCA E10B                       	smpsAlterNote       $0B
00094DCC C606 8001                  	dc.b	nA5, $06, nRst, $01
00094DD0 E109                       	smpsAlterNote       $09
00094DD2 C40D                       	dc.b	nG5, $0D
00094DD4 E103                       	smpsAlterNote       $03
00094DD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DDA E106                       	smpsAlterNote       $06
00094DDC E701                       	dc.b	smpsNoAttack, $01
00094DDE E10C                       	smpsAlterNote       $0C
00094DE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DE4 E106                       	smpsAlterNote       $06
00094DE6 E701                       	dc.b	smpsNoAttack, $01
00094DE8 E103                       	smpsAlterNote       $03
00094DEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DEE E109                       	smpsAlterNote       $09
00094DF0 E701                       	dc.b	smpsNoAttack, $01
00094DF2 E10D                       	smpsAlterNote       $0D
00094DF4 E701                       	dc.b	smpsNoAttack, $01
00094DF6 E10C                       	smpsAlterNote       $0C
00094DF8 E701                       	dc.b	smpsNoAttack, $01
00094DFA E106                       	smpsAlterNote       $06
00094DFC E701                       	dc.b	smpsNoAttack, $01
00094DFE E102                       	smpsAlterNote       $02
00094E00 E701                       	dc.b	smpsNoAttack, $01
00094E02 E103                       	smpsAlterNote       $03
00094E04 8001                       	dc.b	nRst, $01
00094E06 E10B                       	smpsAlterNote       $0B
00094E08 C60D                       	dc.b	nA5, $0D
00094E0A E108                       	smpsAlterNote       $08
00094E0C E701                       	dc.b	smpsNoAttack, $01
00094E0E E104                       	smpsAlterNote       $04
00094E10 E701                       	dc.b	smpsNoAttack, $01
00094E12 E108                       	smpsAlterNote       $08
00094E14 E701                       	dc.b	smpsNoAttack, $01
00094E16 E10B                       	smpsAlterNote       $0B
00094E18 E701                       	dc.b	smpsNoAttack, $01
00094E1A E10F                       	smpsAlterNote       $0F
00094E1C E701                       	dc.b	smpsNoAttack, $01
00094E1E E10B                       	smpsAlterNote       $0B
00094E20 E701                       	dc.b	smpsNoAttack, $01
00094E22 E105                       	smpsAlterNote       $05
00094E24 E701                       	dc.b	smpsNoAttack, $01
00094E26 E104                       	smpsAlterNote       $04
00094E28 E701                       	dc.b	smpsNoAttack, $01
00094E2A E108                       	smpsAlterNote       $08
00094E2C E701                       	dc.b	smpsNoAttack, $01
00094E2E E10E                       	smpsAlterNote       $0E
00094E30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E34 E10B                       	smpsAlterNote       $0B
00094E36 E701                       	dc.b	smpsNoAttack, $01
00094E38 E105                       	smpsAlterNote       $05
00094E3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E3E E10C                       	smpsAlterNote       $0C
00094E40 C70E                       	dc.b	nBb5, $0E
00094E42 E106                       	smpsAlterNote       $06
00094E44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E48 E10C                       	smpsAlterNote       $0C
00094E4A E701                       	dc.b	smpsNoAttack, $01
00094E4C E10F                       	smpsAlterNote       $0F
00094E4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E52 E109                       	smpsAlterNote       $09
00094E54 E701                       	dc.b	smpsNoAttack, $01
00094E56 E105                       	smpsAlterNote       $05
00094E58 E701                       	dc.b	smpsNoAttack, $01
00094E5A E106                       	smpsAlterNote       $06
00094E5C E701                       	dc.b	smpsNoAttack, $01
00094E5E E10C                       	smpsAlterNote       $0C
00094E60 E701                       	dc.b	smpsNoAttack, $01
00094E62 E110                       	smpsAlterNote       $10
00094E64 E701                       	dc.b	smpsNoAttack, $01
00094E66 E10C                       	smpsAlterNote       $0C
00094E68 E701                       	dc.b	smpsNoAttack, $01
00094E6A E109                       	smpsAlterNote       $09
00094E6C E701                       	dc.b	smpsNoAttack, $01
00094E6E E105                       	smpsAlterNote       $05
00094E70 E701                       	dc.b	smpsNoAttack, $01
00094E72 E106                       	smpsAlterNote       $06
00094E74 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00094E78 E107                       	smpsAlterNote       $07
00094E7A CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00094E7F E108                       	smpsAlterNote       $08
00094E81 CD0D                       	dc.b	nE6, $0D
00094E83 E107                       	smpsAlterNote       $07
00094E85 CB0D                       	dc.b	nD6, $0D
00094E87 E104                       	smpsAlterNote       $04
00094E89 E701                       	dc.b	smpsNoAttack, $01
00094E8B E100                       	smpsAlterNote       $00
00094E8D E701                       	dc.b	smpsNoAttack, $01
00094E8F E101                       	smpsAlterNote       $01
00094E91 E701                       	dc.b	smpsNoAttack, $01
00094E93 E107                       	smpsAlterNote       $07
00094E95 E701                       	dc.b	smpsNoAttack, $01
00094E97 E10B                       	smpsAlterNote       $0B
00094E99 E701                       	dc.b	smpsNoAttack, $01
00094E9B E107                       	smpsAlterNote       $07
00094E9D E701                       	dc.b	smpsNoAttack, $01
00094E9F E104                       	smpsAlterNote       $04
00094EA1 E701                       	dc.b	smpsNoAttack, $01
00094EA3 E100                       	smpsAlterNote       $00
00094EA5 E701                       	dc.b	smpsNoAttack, $01
00094EA7 E104                       	smpsAlterNote       $04
00094EA9 E701                       	dc.b	smpsNoAttack, $01
00094EAB E10A                       	smpsAlterNote       $0A
00094EAD E701                       	dc.b	smpsNoAttack, $01
00094EAF E10B                       	smpsAlterNote       $0B
00094EB1 E701                       	dc.b	smpsNoAttack, $01
00094EB3 E108                       	smpsAlterNote       $08
00094EB5 CC0D                       	dc.b	nEb6, $0D
00094EB7 E105                       	smpsAlterNote       $05
00094EB9 E701                       	dc.b	smpsNoAttack, $01
00094EBB E101                       	smpsAlterNote       $01
00094EBD E701                       	dc.b	smpsNoAttack, $01
00094EBF E102                       	smpsAlterNote       $02
00094EC1 E701                       	dc.b	smpsNoAttack, $01
00094EC3 E108                       	smpsAlterNote       $08
00094EC5 E701                       	dc.b	smpsNoAttack, $01
00094EC7 E106                       	smpsAlterNote       $06
00094EC9 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00094ED5 8001                       	dc.b	nRst, $01
00094ED7 E107                       	smpsAlterNote       $07
00094ED9 CB0D                       	dc.b	nD6, $0D
00094EDB E104                       	smpsAlterNote       $04
00094EDD E701                       	dc.b	smpsNoAttack, $01
00094EDF E100                       	smpsAlterNote       $00
00094EE1 E701                       	dc.b	smpsNoAttack, $01
00094EE3 E104                       	smpsAlterNote       $04
00094EE5 E701                       	dc.b	smpsNoAttack, $01
00094EE7 E107                       	smpsAlterNote       $07
00094EE9 E701                       	dc.b	smpsNoAttack, $01
00094EEB E10B                       	smpsAlterNote       $0B
00094EED E701                       	dc.b	smpsNoAttack, $01
00094EEF E107                       	smpsAlterNote       $07
00094EF1 E701                       	dc.b	smpsNoAttack, $01
00094EF3 E101                       	smpsAlterNote       $01
00094EF5 E701                       	dc.b	smpsNoAttack, $01
00094EF7 E100                       	smpsAlterNote       $00
00094EF9 E701                       	dc.b	smpsNoAttack, $01
00094EFB E104                       	smpsAlterNote       $04
00094EFD E701                       	dc.b	smpsNoAttack, $01
00094EFF E10A                       	smpsAlterNote       $0A
00094F01 E701                       	dc.b	smpsNoAttack, $01
00094F03 E10B                       	smpsAlterNote       $0B
00094F05 8001                       	dc.b	nRst, $01
00094F07 E109                       	smpsAlterNote       $09
00094F09 CE0A                       	dc.b	nF6, $0A
00094F0B E108                       	smpsAlterNote       $08
00094F0D CC07                       	dc.b	nEb6, $07
00094F0F E106                       	smpsAlterNote       $06
00094F11 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00094F1D E107                       	smpsAlterNote       $07
00094F1F CB0D                       	dc.b	nD6, $0D
00094F21 E101                       	smpsAlterNote       $01
00094F23 E701                       	dc.b	smpsNoAttack, $01
00094F25 E100                       	smpsAlterNote       $00
00094F27 E701                       	dc.b	smpsNoAttack, $01
00094F29 E104                       	smpsAlterNote       $04
00094F2B E701                       	dc.b	smpsNoAttack, $01
00094F2D E10A                       	smpsAlterNote       $0A
00094F2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F33 E107                       	smpsAlterNote       $07
00094F35 E701                       	dc.b	smpsNoAttack, $01
00094F37 E101                       	smpsAlterNote       $01
00094F39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F3D E107                       	smpsAlterNote       $07
00094F3F E701                       	dc.b	smpsNoAttack, $01
00094F41 E10A                       	smpsAlterNote       $0A
00094F43 E701                       	dc.b	smpsNoAttack, $01
00094F45 E10B                       	smpsAlterNote       $0B
00094F47 8001                       	dc.b	nRst, $01
00094F49 E108                       	smpsAlterNote       $08
00094F4B CC0D                       	dc.b	nEb6, $0D
00094F4D E102                       	smpsAlterNote       $02
00094F4F E701                       	dc.b	smpsNoAttack, $01
00094F51 E101                       	smpsAlterNote       $01
00094F53 E701                       	dc.b	smpsNoAttack, $01
00094F55 E105                       	smpsAlterNote       $05
00094F57 E701                       	dc.b	smpsNoAttack, $01
00094F59 E108                       	smpsAlterNote       $08
00094F5B 8001                       	dc.b	nRst, $01
00094F5D E106                       	smpsAlterNote       $06
00094F5F C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00094F6B 8001                       	dc.b	nRst, $01
00094F6D E107                       	smpsAlterNote       $07
00094F6F CB0D                       	dc.b	nD6, $0D
00094F71 E101                       	smpsAlterNote       $01
00094F73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F77 E104                       	smpsAlterNote       $04
00094F79 E701                       	dc.b	smpsNoAttack, $01
00094F7B E10A                       	smpsAlterNote       $0A
00094F7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F81 E104                       	smpsAlterNote       $04
00094F83 E701                       	dc.b	smpsNoAttack, $01
00094F85 E101                       	smpsAlterNote       $01
00094F87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F8B E107                       	smpsAlterNote       $07
00094F8D E701                       	dc.b	smpsNoAttack, $01
00094F8F E10B                       	smpsAlterNote       $0B
00094F91 E701                       	dc.b	smpsNoAttack, $01
00094F93 E10A                       	smpsAlterNote       $0A
00094F95 E701                       	dc.b	smpsNoAttack, $01
00094F97 E104                       	smpsAlterNote       $04
00094F99 E701                       	dc.b	smpsNoAttack, $01
00094F9B E100                       	smpsAlterNote       $00
00094F9D E701                       	dc.b	smpsNoAttack, $01
00094F9F E101                       	smpsAlterNote       $01
00094FA1 801C                       	dc.b	nRst, $1C
00094FA5 E107                       	smpsAlterNote       $07
00094FA7 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094FAB E603                       	smpsAlterVol        $03
00094FAD F6F1 AD                    	smpsJump            music84_Jump03
00094FB0                            
00094FB0                            ; FM3 Data
00094FB0                            music84_FM3:
00094FB0 E0C0                       	smpsPan             panCenter, $00
00094FB4 E109                       	smpsAlterNote       $09
00094FB6 C203 8007                  	dc.b	nF5, $03, nRst, $07
00094FBA E108                       	smpsAlterNote       $08
00094FBC C103 800B                  	dc.b	nE5, $03, nRst, $0B
00094FC0 E10B                       	smpsAlterNote       $0B
00094FC2 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00094FC8 E040                       	smpsPan             panRight, $00
00094FCA E110                       	smpsAlterNote       $10
00094FCC E6F9                       	smpsAlterVol        $F9
00094FCE C702 8001                  	dc.b	nBb5, $02, nRst, $01
00094FD2 E10F                       	smpsAlterNote       $0F
00094FD4 C603                       	dc.b	nA5, $03
00094FD6 E10D                       	smpsAlterNote       $0D
00094FD8 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00094FDE E10C                       	smpsAlterNote       $0C
00094FE0 C103 8001                  	dc.b	nE5, $03, nRst, $01
00094FE4 E10A                       	smpsAlterNote       $0A
00094FE6 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00094FEA E10F                       	smpsAlterNote       $0F
00094FEC BA01 8001                  	dc.b	nA4, $01, nRst, $01
00094FF0 E0C0                       	smpsPan             panCenter, $00
00094FF4 E109                       	smpsAlterNote       $09
00094FF6 E609                       	smpsAlterVol        $09
00094FF8 B603                       	dc.b	nF4, $03
00094FFA                            
00094FFA                            music84_Jump02:
00094FFA E70A                       	dc.b	smpsNoAttack, $0A
00094FFC E103                       	smpsAlterNote       $03
00094FFE E701                       	dc.b	smpsNoAttack, $01
00095000 E102                       	smpsAlterNote       $02
00095002 E701                       	dc.b	smpsNoAttack, $01
00095004 E106                       	smpsAlterNote       $06
00095006 E701                       	dc.b	smpsNoAttack, $01
00095008 E10C                       	smpsAlterNote       $0C
0009500A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009500E E109                       	smpsAlterNote       $09
00095010 E701                       	dc.b	smpsNoAttack, $01
00095012 E103                       	smpsAlterNote       $03
00095014 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095018 E109                       	smpsAlterNote       $09
0009501A E701                       	dc.b	smpsNoAttack, $01
0009501C E10C                       	smpsAlterNote       $0C
0009501E E701                       	dc.b	smpsNoAttack, $01
00095020 E10D                       	smpsAlterNote       $0D
00095022 8001                       	dc.b	nRst, $01
00095024 E109                       	smpsAlterNote       $09
00095026 B80D                       	dc.b	nG4, $0D
00095028 E103                       	smpsAlterNote       $03
0009502A E701                       	dc.b	smpsNoAttack, $01
0009502C E102                       	smpsAlterNote       $02
0009502E E701                       	dc.b	smpsNoAttack, $01
00095030 E106                       	smpsAlterNote       $06
00095032 E701                       	dc.b	smpsNoAttack, $01
00095034 E10C                       	smpsAlterNote       $0C
00095036 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009503A E109                       	smpsAlterNote       $09
0009503C E701                       	dc.b	smpsNoAttack, $01
0009503E E103                       	smpsAlterNote       $03
00095040 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095044 E109                       	smpsAlterNote       $09
00095046 E701                       	dc.b	smpsNoAttack, $01
00095048 E10C                       	smpsAlterNote       $0C
0009504A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009504E E106                       	smpsAlterNote       $06
00095050 E701                       	dc.b	smpsNoAttack, $01
00095052 E102                       	smpsAlterNote       $02
00095054 E701                       	dc.b	smpsNoAttack, $01
00095056 E103                       	smpsAlterNote       $03
00095058 E701                       	dc.b	smpsNoAttack, $01
0009505A E109                       	smpsAlterNote       $09
0009505C E701                       	dc.b	smpsNoAttack, $01
0009505E E10D                       	smpsAlterNote       $0D
00095060 E701                       	dc.b	smpsNoAttack, $01
00095062 E109                       	smpsAlterNote       $09
00095064 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095068 E10B                       	smpsAlterNote       $0B
0009506A BA0D                       	dc.b	nA4, $0D
0009506C E105                       	smpsAlterNote       $05
0009506E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095072 E108                       	smpsAlterNote       $08
00095074 E701                       	dc.b	smpsNoAttack, $01
00095076 E10E                       	smpsAlterNote       $0E
00095078 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009507C E108                       	smpsAlterNote       $08
0009507E E701                       	dc.b	smpsNoAttack, $01
00095080 E104                       	smpsAlterNote       $04
00095082 E701                       	dc.b	smpsNoAttack, $01
00095084 E105                       	smpsAlterNote       $05
00095086 E701                       	dc.b	smpsNoAttack, $01
00095088 E10B                       	smpsAlterNote       $0B
0009508A E701                       	dc.b	smpsNoAttack, $01
0009508C E10F                       	smpsAlterNote       $0F
0009508E E701                       	dc.b	smpsNoAttack, $01
00095090 E10B                       	smpsAlterNote       $0B
00095092 E701                       	dc.b	smpsNoAttack, $01
00095094 E108                       	smpsAlterNote       $08
00095096 E701                       	dc.b	smpsNoAttack, $01
00095098 E104                       	smpsAlterNote       $04
0009509A E701                       	dc.b	smpsNoAttack, $01
0009509C E108                       	smpsAlterNote       $08
0009509E E701                       	dc.b	smpsNoAttack, $01
000950A0 E10E                       	smpsAlterNote       $0E
000950A2 E701                       	dc.b	smpsNoAttack, $01
000950A4 E10F                       	smpsAlterNote       $0F
000950A6 E701                       	dc.b	smpsNoAttack, $01
000950A8 E10B                       	smpsAlterNote       $0B
000950AA E701                       	dc.b	smpsNoAttack, $01
000950AC E105                       	smpsAlterNote       $05
000950AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950B2 E108                       	smpsAlterNote       $08
000950B4 E701                       	dc.b	smpsNoAttack, $01
000950B6 E10E                       	smpsAlterNote       $0E
000950B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950BC E108                       	smpsAlterNote       $08
000950BE E701                       	dc.b	smpsNoAttack, $01
000950C0 E105                       	smpsAlterNote       $05
000950C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950C6 E10B                       	smpsAlterNote       $0B
000950C8 E701                       	dc.b	smpsNoAttack, $01
000950CA E10F                       	smpsAlterNote       $0F
000950CC E701                       	dc.b	smpsNoAttack, $01
000950CE E10E                       	smpsAlterNote       $0E
000950D0 E701                       	dc.b	smpsNoAttack, $01
000950D2 E108                       	smpsAlterNote       $08
000950D4 E701                       	dc.b	smpsNoAttack, $01
000950D6 E104                       	smpsAlterNote       $04
000950D8 E701                       	dc.b	smpsNoAttack, $01
000950DA E105                       	smpsAlterNote       $05
000950DC 8001                       	dc.b	nRst, $01
000950DE E108                       	smpsAlterNote       $08
000950E0 B50A                       	dc.b	nE4, $0A
000950E2 E109                       	smpsAlterNote       $09
000950E4 B60D                       	dc.b	nF4, $0D
000950E6 E106                       	smpsAlterNote       $06
000950E8 E701                       	dc.b	smpsNoAttack, $01
000950EA E103                       	smpsAlterNote       $03
000950EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950F0 E109                       	smpsAlterNote       $09
000950F2 E701                       	dc.b	smpsNoAttack, $01
000950F4 E10D                       	smpsAlterNote       $0D
000950F6 E701                       	dc.b	smpsNoAttack, $01
000950F8 E10C                       	smpsAlterNote       $0C
000950FA E701                       	dc.b	smpsNoAttack, $01
000950FC E106                       	smpsAlterNote       $06
000950FE E701                       	dc.b	smpsNoAttack, $01
00095100 E102                       	smpsAlterNote       $02
00095102 E701                       	dc.b	smpsNoAttack, $01
00095104 E106                       	smpsAlterNote       $06
00095106 E701                       	dc.b	smpsNoAttack, $01
00095108 E109                       	smpsAlterNote       $09
0009510A E701                       	dc.b	smpsNoAttack, $01
0009510C E10D                       	smpsAlterNote       $0D
0009510E E701                       	dc.b	smpsNoAttack, $01
00095110 E109                       	smpsAlterNote       $09
00095112 B80D                       	dc.b	nG4, $0D
00095114 E106                       	smpsAlterNote       $06
00095116 E701                       	dc.b	smpsNoAttack, $01
00095118 E103                       	smpsAlterNote       $03
0009511A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009511E E109                       	smpsAlterNote       $09
00095120 E701                       	dc.b	smpsNoAttack, $01
00095122 E10D                       	smpsAlterNote       $0D
00095124 E701                       	dc.b	smpsNoAttack, $01
00095126 E10C                       	smpsAlterNote       $0C
00095128 E701                       	dc.b	smpsNoAttack, $01
0009512A E106                       	smpsAlterNote       $06
0009512C E701                       	dc.b	smpsNoAttack, $01
0009512E E102                       	smpsAlterNote       $02
00095130 E701                       	dc.b	smpsNoAttack, $01
00095132 E106                       	smpsAlterNote       $06
00095134 E701                       	dc.b	smpsNoAttack, $01
00095136 E109                       	smpsAlterNote       $09
00095138 E701                       	dc.b	smpsNoAttack, $01
0009513A E10D                       	smpsAlterNote       $0D
0009513C E701                       	dc.b	smpsNoAttack, $01
0009513E E109                       	smpsAlterNote       $09
00095140 E701                       	dc.b	smpsNoAttack, $01
00095142 E103                       	smpsAlterNote       $03
00095144 E701                       	dc.b	smpsNoAttack, $01
00095146 E102                       	smpsAlterNote       $02
00095148 E701                       	dc.b	smpsNoAttack, $01
0009514A E106                       	smpsAlterNote       $06
0009514C E701                       	dc.b	smpsNoAttack, $01
0009514E E10C                       	smpsAlterNote       $0C
00095150 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095154 E109                       	smpsAlterNote       $09
00095156 E701                       	dc.b	smpsNoAttack, $01
00095158 E10B                       	smpsAlterNote       $0B
0009515A BA0D                       	dc.b	nA4, $0D
0009515C E108                       	smpsAlterNote       $08
0009515E E701                       	dc.b	smpsNoAttack, $01
00095160 E104                       	smpsAlterNote       $04
00095162 E701                       	dc.b	smpsNoAttack, $01
00095164 E108                       	smpsAlterNote       $08
00095166 E701                       	dc.b	smpsNoAttack, $01
00095168 E10B                       	smpsAlterNote       $0B
0009516A E701                       	dc.b	smpsNoAttack, $01
0009516C E10F                       	smpsAlterNote       $0F
0009516E E701                       	dc.b	smpsNoAttack, $01
00095170 E10B                       	smpsAlterNote       $0B
00095172 E701                       	dc.b	smpsNoAttack, $01
00095174 E105                       	smpsAlterNote       $05
00095176 E701                       	dc.b	smpsNoAttack, $01
00095178 E104                       	smpsAlterNote       $04
0009517A E701                       	dc.b	smpsNoAttack, $01
0009517C E108                       	smpsAlterNote       $08
0009517E E701                       	dc.b	smpsNoAttack, $01
00095180 E10E                       	smpsAlterNote       $0E
00095182 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095186 E10B                       	smpsAlterNote       $0B
00095188 E701                       	dc.b	smpsNoAttack, $01
0009518A E105                       	smpsAlterNote       $05
0009518C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095190 E10B                       	smpsAlterNote       $0B
00095192 E701                       	dc.b	smpsNoAttack, $01
00095194 E10E                       	smpsAlterNote       $0E
00095196 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009519A E108                       	smpsAlterNote       $08
0009519C E701                       	dc.b	smpsNoAttack, $01
0009519E E104                       	smpsAlterNote       $04
000951A0 E701                       	dc.b	smpsNoAttack, $01
000951A2 E105                       	smpsAlterNote       $05
000951A4 E701                       	dc.b	smpsNoAttack, $01
000951A6 E10B                       	smpsAlterNote       $0B
000951A8 E701                       	dc.b	smpsNoAttack, $01
000951AA E10F                       	smpsAlterNote       $0F
000951AC E701                       	dc.b	smpsNoAttack, $01
000951AE E10B                       	smpsAlterNote       $0B
000951B0 E701                       	dc.b	smpsNoAttack, $01
000951B2 E108                       	smpsAlterNote       $08
000951B4 E701                       	dc.b	smpsNoAttack, $01
000951B6 E105                       	smpsAlterNote       $05
000951B8 8001                       	dc.b	nRst, $01
000951BA E109                       	smpsAlterNote       $09
000951BC B609 8001                  	dc.b	nF4, $09, nRst, $01
000951C0 E108                       	smpsAlterNote       $08
000951C2 B506 8001                  	dc.b	nE4, $06, nRst, $01
000951C6 E107                       	smpsAlterNote       $07
000951C8 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000951CC E108                       	smpsAlterNote       $08
000951CE B502 8001                  	dc.b	nE4, $02, nRst, $01
000951D2 E109                       	smpsAlterNote       $09
000951D4 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
000951DA E10B                       	smpsAlterNote       $0B
000951DC BA0D                       	dc.b	nA4, $0D
000951DE E108                       	smpsAlterNote       $08
000951E0 E701                       	dc.b	smpsNoAttack, $01
000951E2 E104                       	smpsAlterNote       $04
000951E4 E701                       	dc.b	smpsNoAttack, $01
000951E6 E108                       	smpsAlterNote       $08
000951E8 E701                       	dc.b	smpsNoAttack, $01
000951EA E10E                       	smpsAlterNote       $0E
000951EC E701                       	dc.b	smpsNoAttack, $01
000951EE E10F                       	smpsAlterNote       $0F
000951F0 E701                       	dc.b	smpsNoAttack, $01
000951F2 E10B                       	smpsAlterNote       $0B
000951F4 E701                       	dc.b	smpsNoAttack, $01
000951F6 E105                       	smpsAlterNote       $05
000951F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951FC E108                       	smpsAlterNote       $08
000951FE E701                       	dc.b	smpsNoAttack, $01
00095200 E10E                       	smpsAlterNote       $0E
00095202 E701                       	dc.b	smpsNoAttack, $01
00095204 E10F                       	smpsAlterNote       $0F
00095206 8001                       	dc.b	nRst, $01
00095208 E109                       	smpsAlterNote       $09
0009520A C20D                       	dc.b	nF5, $0D
0009520C E103                       	smpsAlterNote       $03
0009520E E701                       	dc.b	smpsNoAttack, $01
00095210 E102                       	smpsAlterNote       $02
00095212 E701                       	dc.b	smpsNoAttack, $01
00095214 E106                       	smpsAlterNote       $06
00095216 E701                       	dc.b	smpsNoAttack, $01
00095218 E10C                       	smpsAlterNote       $0C
0009521A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009521E E109                       	smpsAlterNote       $09
00095220 E701                       	dc.b	smpsNoAttack, $01
00095222 E103                       	smpsAlterNote       $03
00095224 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095228 E109                       	smpsAlterNote       $09
0009522A E701                       	dc.b	smpsNoAttack, $01
0009522C E10C                       	smpsAlterNote       $0C
0009522E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095232 E106                       	smpsAlterNote       $06
00095234 E701                       	dc.b	smpsNoAttack, $01
00095236 E102                       	smpsAlterNote       $02
00095238 E701                       	dc.b	smpsNoAttack, $01
0009523A E103                       	smpsAlterNote       $03
0009523C E701                       	dc.b	smpsNoAttack, $01
0009523E E109                       	smpsAlterNote       $09
00095240 E701                       	dc.b	smpsNoAttack, $01
00095242 E10D                       	smpsAlterNote       $0D
00095244 E701                       	dc.b	smpsNoAttack, $01
00095246 E109                       	smpsAlterNote       $09
00095248 E701                       	dc.b	smpsNoAttack, $01
0009524A E106                       	smpsAlterNote       $06
0009524C E701                       	dc.b	smpsNoAttack, $01
0009524E E102                       	smpsAlterNote       $02
00095250 E701                       	dc.b	smpsNoAttack, $01
00095252 E106                       	smpsAlterNote       $06
00095254 E701                       	dc.b	smpsNoAttack, $01
00095256 E10C                       	smpsAlterNote       $0C
00095258 E701                       	dc.b	smpsNoAttack, $01
0009525A E10D                       	smpsAlterNote       $0D
0009525C E701                       	dc.b	smpsNoAttack, $01
0009525E E109                       	smpsAlterNote       $09
00095260 E701                       	dc.b	smpsNoAttack, $01
00095262 E103                       	smpsAlterNote       $03
00095264 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095268 E106                       	smpsAlterNote       $06
0009526A E701                       	dc.b	smpsNoAttack, $01
0009526C E10C                       	smpsAlterNote       $0C
0009526E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095272 E106                       	smpsAlterNote       $06
00095274 E701                       	dc.b	smpsNoAttack, $01
00095276 E103                       	smpsAlterNote       $03
00095278 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009527C E109                       	smpsAlterNote       $09
0009527E E701                       	dc.b	smpsNoAttack, $01
00095280 E10D                       	smpsAlterNote       $0D
00095282 E701                       	dc.b	smpsNoAttack, $01
00095284 E10C                       	smpsAlterNote       $0C
00095286 E701                       	dc.b	smpsNoAttack, $01
00095288 E106                       	smpsAlterNote       $06
0009528A E701                       	dc.b	smpsNoAttack, $01
0009528C E102                       	smpsAlterNote       $02
0009528E E701                       	dc.b	smpsNoAttack, $01
00095290 E106                       	smpsAlterNote       $06
00095292 E701                       	dc.b	smpsNoAttack, $01
00095294 E109                       	smpsAlterNote       $09
00095296 E701                       	dc.b	smpsNoAttack, $01
00095298 E10D                       	smpsAlterNote       $0D
0009529A E701                       	dc.b	smpsNoAttack, $01
0009529C E109                       	smpsAlterNote       $09
0009529E E701                       	dc.b	smpsNoAttack, $01
000952A0 E103                       	smpsAlterNote       $03
000952A2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000952A6 E109                       	smpsAlterNote       $09
000952A8 C206                       	dc.b	nF5, $06
000952AA E108                       	smpsAlterNote       $08
000952AC C10E                       	dc.b	nE5, $0E
000952AE E102                       	smpsAlterNote       $02
000952B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952B4 E108                       	smpsAlterNote       $08
000952B6 E701                       	dc.b	smpsNoAttack, $01
000952B8 E10B                       	smpsAlterNote       $0B
000952BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952BE E105                       	smpsAlterNote       $05
000952C0 E701                       	dc.b	smpsNoAttack, $01
000952C2 E101                       	smpsAlterNote       $01
000952C4 E701                       	dc.b	smpsNoAttack, $01
000952C6 E102                       	smpsAlterNote       $02
000952C8 E701                       	dc.b	smpsNoAttack, $01
000952CA E108                       	smpsAlterNote       $08
000952CC E701                       	dc.b	smpsNoAttack, $01
000952CE E10C                       	smpsAlterNote       $0C
000952D0 E701                       	dc.b	smpsNoAttack, $01
000952D2 E107                       	smpsAlterNote       $07
000952D4 BF0E                       	dc.b	nD5, $0E
000952D6 E101                       	smpsAlterNote       $01
000952D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952DC E107                       	smpsAlterNote       $07
000952DE E701                       	dc.b	smpsNoAttack, $01
000952E0 E10A                       	smpsAlterNote       $0A
000952E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952E6 E104                       	smpsAlterNote       $04
000952E8 E701                       	dc.b	smpsNoAttack, $01
000952EA E100                       	smpsAlterNote       $00
000952EC E701                       	dc.b	smpsNoAttack, $01
000952EE E104                       	smpsAlterNote       $04
000952F0 E701                       	dc.b	smpsNoAttack, $01
000952F2 E107                       	smpsAlterNote       $07
000952F4 E701                       	dc.b	smpsNoAttack, $01
000952F6 E10B                       	smpsAlterNote       $0B
000952F8 E701                       	dc.b	smpsNoAttack, $01
000952FA E107                       	smpsAlterNote       $07
000952FC E701                       	dc.b	smpsNoAttack, $01
000952FE E101                       	smpsAlterNote       $01
00095300 E701                       	dc.b	smpsNoAttack, $01
00095302 E100                       	smpsAlterNote       $00
00095304 E701                       	dc.b	smpsNoAttack, $01
00095306 E104                       	smpsAlterNote       $04
00095308 E701                       	dc.b	smpsNoAttack, $01
0009530A E10A                       	smpsAlterNote       $0A
0009530C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095310 E107                       	smpsAlterNote       $07
00095312 E701                       	dc.b	smpsNoAttack, $01
00095314 E101                       	smpsAlterNote       $01
00095316 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009531A E107                       	smpsAlterNote       $07
0009531C E701                       	dc.b	smpsNoAttack, $01
0009531E E10A                       	smpsAlterNote       $0A
00095320 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095324 E104                       	smpsAlterNote       $04
00095326 E701                       	dc.b	smpsNoAttack, $01
00095328 E100                       	smpsAlterNote       $00
0009532A E701                       	dc.b	smpsNoAttack, $01
0009532C E101                       	smpsAlterNote       $01
0009532E E701                       	dc.b	smpsNoAttack, $01
00095330 E107                       	smpsAlterNote       $07
00095332 E701                       	dc.b	smpsNoAttack, $01
00095334 E10B                       	smpsAlterNote       $0B
00095336 E701                       	dc.b	smpsNoAttack, $01
00095338 E107                       	smpsAlterNote       $07
0009533A E701                       	dc.b	smpsNoAttack, $01
0009533C E104                       	smpsAlterNote       $04
0009533E E701                       	dc.b	smpsNoAttack, $01
00095340 E100                       	smpsAlterNote       $00
00095342 E701                       	dc.b	smpsNoAttack, $01
00095344 E104                       	smpsAlterNote       $04
00095346 E701                       	dc.b	smpsNoAttack, $01
00095348 E10A                       	smpsAlterNote       $0A
0009534A E701                       	dc.b	smpsNoAttack, $01
0009534C E10B                       	smpsAlterNote       $0B
0009534E E701                       	dc.b	smpsNoAttack, $01
00095350 E107                       	smpsAlterNote       $07
00095352 E701                       	dc.b	smpsNoAttack, $01
00095354 E101                       	smpsAlterNote       $01
00095356 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009535A E104                       	smpsAlterNote       $04
0009535C E701                       	dc.b	smpsNoAttack, $01
0009535E E10A                       	smpsAlterNote       $0A
00095360 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095364 E104                       	smpsAlterNote       $04
00095366 E701                       	dc.b	smpsNoAttack, $01
00095368 E101                       	smpsAlterNote       $01
0009536A E701                       	dc.b	smpsNoAttack, $01
0009536E E107                       	smpsAlterNote       $07
00095370 E6FF                       	smpsAlterVol        $FF
00095372 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0009537E 8004                       	dc.b	nRst, $04
00095382 E109                       	smpsAlterNote       $09
00095384 E602                       	smpsAlterVol        $02
00095386 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
0009538C E108                       	smpsAlterNote       $08
0009538E B502 8001                  	dc.b	nE4, $02, nRst, $01
00095392 E109                       	smpsAlterNote       $09
00095394 B60D                       	dc.b	nF4, $0D
00095396 E106                       	smpsAlterNote       $06
00095398 E701                       	dc.b	smpsNoAttack, $01
0009539A E102                       	smpsAlterNote       $02
0009539C E701                       	dc.b	smpsNoAttack, $01
0009539E E106                       	smpsAlterNote       $06
000953A0 E701                       	dc.b	smpsNoAttack, $01
000953A2 E109                       	smpsAlterNote       $09
000953A4 E701                       	dc.b	smpsNoAttack, $01
000953A6 E10D                       	smpsAlterNote       $0D
000953A8 E701                       	dc.b	smpsNoAttack, $01
000953AA E109                       	smpsAlterNote       $09
000953AC E701                       	dc.b	smpsNoAttack, $01
000953AE E103                       	smpsAlterNote       $03
000953B0 E701                       	dc.b	smpsNoAttack, $01
000953B2 E102                       	smpsAlterNote       $02
000953B4 E701                       	dc.b	smpsNoAttack, $01
000953B6 E106                       	smpsAlterNote       $06
000953B8 E701                       	dc.b	smpsNoAttack, $01
000953BA E10C                       	smpsAlterNote       $0C
000953BC E701                       	dc.b	smpsNoAttack, $01
000953BE E10D                       	smpsAlterNote       $0D
000953C0 8001                       	dc.b	nRst, $01
000953C2 E109                       	smpsAlterNote       $09
000953C4 B80D                       	dc.b	nG4, $0D
000953C6 E106                       	smpsAlterNote       $06
000953C8 E701                       	dc.b	smpsNoAttack, $01
000953CA E102                       	smpsAlterNote       $02
000953CC E701                       	dc.b	smpsNoAttack, $01
000953CE E106                       	smpsAlterNote       $06
000953D0 E701                       	dc.b	smpsNoAttack, $01
000953D2 E10C                       	smpsAlterNote       $0C
000953D4 E701                       	dc.b	smpsNoAttack, $01
000953D6 E10D                       	smpsAlterNote       $0D
000953D8 E701                       	dc.b	smpsNoAttack, $01
000953DA E109                       	smpsAlterNote       $09
000953DC E701                       	dc.b	smpsNoAttack, $01
000953DE E103                       	smpsAlterNote       $03
000953E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953E4 E106                       	smpsAlterNote       $06
000953E6 E701                       	dc.b	smpsNoAttack, $01
000953E8 E10C                       	smpsAlterNote       $0C
000953EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953EE E106                       	smpsAlterNote       $06
000953F0 E701                       	dc.b	smpsNoAttack, $01
000953F2 E103                       	smpsAlterNote       $03
000953F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953F8 E109                       	smpsAlterNote       $09
000953FA E701                       	dc.b	smpsNoAttack, $01
000953FC E10D                       	smpsAlterNote       $0D
000953FE E701                       	dc.b	smpsNoAttack, $01
00095400 E10C                       	smpsAlterNote       $0C
00095402 E701                       	dc.b	smpsNoAttack, $01
00095404 E109                       	smpsAlterNote       $09
00095406 8001                       	dc.b	nRst, $01
00095408 E10B                       	smpsAlterNote       $0B
0009540A BA03                       	dc.b	nA4, $03
0009540C E10C                       	smpsAlterNote       $0C
0009540E BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00095412 E10B                       	smpsAlterNote       $0B
00095414 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
0009541A E10C                       	smpsAlterNote       $0C
0009541C C703 8001                  	dc.b	nBb5, $03, nRst, $01
00095420 E10B                       	smpsAlterNote       $0B
00095422 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00095428 E10C                       	smpsAlterNote       $0C
0009542A D303                       	dc.b	nBb6, $03
0009542C E10B                       	smpsAlterNote       $0B
0009542E D20D                       	dc.b	nA6, $0D
00095430 E108                       	smpsAlterNote       $08
00095432 E701                       	dc.b	smpsNoAttack, $01
00095434 E104                       	smpsAlterNote       $04
00095436 E701                       	dc.b	smpsNoAttack, $01
00095438 E105                       	smpsAlterNote       $05
0009543A E701                       	dc.b	smpsNoAttack, $01
0009543C E10B                       	smpsAlterNote       $0B
0009543E E701                       	dc.b	smpsNoAttack, $01
00095440 E10F                       	smpsAlterNote       $0F
00095442 E701                       	dc.b	smpsNoAttack, $01
00095444 E10B                       	smpsAlterNote       $0B
00095446 E701                       	dc.b	smpsNoAttack, $01
00095448 E108                       	smpsAlterNote       $08
0009544A E701                       	dc.b	smpsNoAttack, $01
0009544C E104                       	smpsAlterNote       $04
0009544E E701                       	dc.b	smpsNoAttack, $01
00095450 E108                       	smpsAlterNote       $08
00095452 E701                       	dc.b	smpsNoAttack, $01
00095454 E10E                       	smpsAlterNote       $0E
00095456 E701                       	dc.b	smpsNoAttack, $01
00095458 E10F                       	smpsAlterNote       $0F
0009545A E701                       	dc.b	smpsNoAttack, $01
0009545C E10B                       	smpsAlterNote       $0B
0009545E E701                       	dc.b	smpsNoAttack, $01
00095460 E105                       	smpsAlterNote       $05
00095462 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00095468 E109                       	smpsAlterNote       $09
0009546A CE07                       	dc.b	nF6, $07
0009546C E108                       	smpsAlterNote       $08
0009546E CD06 8001                  	dc.b	nE6, $06, nRst, $01
00095472 E109                       	smpsAlterNote       $09
00095474 CE03 8001                  	dc.b	nF6, $03, nRst, $01
00095478 E108                       	smpsAlterNote       $08
0009547A CC0D                       	dc.b	nEb6, $0D
0009547C E102                       	smpsAlterNote       $02
0009547E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095482 E108                       	smpsAlterNote       $08
00095484 E701                       	dc.b	smpsNoAttack, $01
00095486 E10B                       	smpsAlterNote       $0B
00095488 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009548C E105                       	smpsAlterNote       $05
0009548E E701                       	dc.b	smpsNoAttack, $01
00095490 E101                       	smpsAlterNote       $01
00095492 E701                       	dc.b	smpsNoAttack, $01
00095494 E102                       	smpsAlterNote       $02
00095496 E701                       	dc.b	smpsNoAttack, $01
00095498 E108                       	smpsAlterNote       $08
0009549A E701                       	dc.b	smpsNoAttack, $01
0009549C E10C                       	smpsAlterNote       $0C
0009549E E701                       	dc.b	smpsNoAttack, $01
000954A0 E108                       	smpsAlterNote       $08
000954A2 E701                       	dc.b	smpsNoAttack, $01
000954A4 E105                       	smpsAlterNote       $05
000954A6 E701                       	dc.b	smpsNoAttack, $01
000954A8 E101                       	smpsAlterNote       $01
000954AA E701                       	dc.b	smpsNoAttack, $01
000954AC E105                       	smpsAlterNote       $05
000954AE E701                       	dc.b	smpsNoAttack, $01
000954B0 E10B                       	smpsAlterNote       $0B
000954B2 E701                       	dc.b	smpsNoAttack, $01
000954B4 E10C                       	smpsAlterNote       $0C
000954B6 E701                       	dc.b	smpsNoAttack, $01
000954B8 E108                       	smpsAlterNote       $08
000954BA E701                       	dc.b	smpsNoAttack, $01
000954BC E107                       	smpsAlterNote       $07
000954BE CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
000954C8 E10B                       	smpsAlterNote       $0B
000954CA C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000954D4 E109                       	smpsAlterNote       $09
000954D6 C203                       	dc.b	nF5, $03
000954D8 E108                       	smpsAlterNote       $08
000954DA C103 8001                  	dc.b	nE5, $03, nRst, $01
000954DE E109                       	smpsAlterNote       $09
000954E0 C20D                       	dc.b	nF5, $0D
000954E2 E108                       	smpsAlterNote       $08
000954E4 C10E                       	dc.b	nE5, $0E
000954E6 E107                       	smpsAlterNote       $07
000954E8 BF0D                       	dc.b	nD5, $0D
000954EA E104                       	smpsAlterNote       $04
000954EC E701                       	dc.b	smpsNoAttack, $01
000954EE E100                       	smpsAlterNote       $00
000954F0 E701                       	dc.b	smpsNoAttack, $01
000954F2 E104                       	smpsAlterNote       $04
000954F4 E701                       	dc.b	smpsNoAttack, $01
000954F6 E107                       	smpsAlterNote       $07
000954F8 E701                       	dc.b	smpsNoAttack, $01
000954FA E10B                       	smpsAlterNote       $0B
000954FC E701                       	dc.b	smpsNoAttack, $01
000954FE E107                       	smpsAlterNote       $07
00095500 E701                       	dc.b	smpsNoAttack, $01
00095502 E101                       	smpsAlterNote       $01
00095504 E701                       	dc.b	smpsNoAttack, $01
00095506 E100                       	smpsAlterNote       $00
00095508 E701                       	dc.b	smpsNoAttack, $01
0009550A E104                       	smpsAlterNote       $04
0009550C E701                       	dc.b	smpsNoAttack, $01
0009550E E10A                       	smpsAlterNote       $0A
00095510 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095514 E107                       	smpsAlterNote       $07
00095516 E701                       	dc.b	smpsNoAttack, $01
00095518 E101                       	smpsAlterNote       $01
0009551A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009551E E107                       	smpsAlterNote       $07
00095520 E701                       	dc.b	smpsNoAttack, $01
00095522 E10A                       	smpsAlterNote       $0A
00095524 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095528 E104                       	smpsAlterNote       $04
0009552A E701                       	dc.b	smpsNoAttack, $01
0009552C E100                       	smpsAlterNote       $00
0009552E E701                       	dc.b	smpsNoAttack, $01
00095530 E101                       	smpsAlterNote       $01
00095532 E701                       	dc.b	smpsNoAttack, $01
00095534 E107                       	smpsAlterNote       $07
00095536 E701                       	dc.b	smpsNoAttack, $01
00095538 E10B                       	smpsAlterNote       $0B
0009553A E701                       	dc.b	smpsNoAttack, $01
0009553C E107                       	smpsAlterNote       $07
0009553E E701                       	dc.b	smpsNoAttack, $01
00095540 E104                       	smpsAlterNote       $04
00095542 E701                       	dc.b	smpsNoAttack, $01
00095544 E100                       	smpsAlterNote       $00
00095546 E701                       	dc.b	smpsNoAttack, $01
00095548 E104                       	smpsAlterNote       $04
0009554A E701                       	dc.b	smpsNoAttack, $01
0009554C E10A                       	smpsAlterNote       $0A
0009554E E701                       	dc.b	smpsNoAttack, $01
00095550 E10B                       	smpsAlterNote       $0B
00095552 E701                       	dc.b	smpsNoAttack, $01
00095554 E107                       	smpsAlterNote       $07
00095556 E701                       	dc.b	smpsNoAttack, $01
00095558 E101                       	smpsAlterNote       $01
0009555A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009555E E104                       	smpsAlterNote       $04
00095560 E701                       	dc.b	smpsNoAttack, $01
00095562 E10A                       	smpsAlterNote       $0A
00095564 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095568 E104                       	smpsAlterNote       $04
0009556A E701                       	dc.b	smpsNoAttack, $01
0009556C E101                       	smpsAlterNote       $01
0009556E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095572 E107                       	smpsAlterNote       $07
00095574 E701                       	dc.b	smpsNoAttack, $01
00095576 E10B                       	smpsAlterNote       $0B
00095578 E701                       	dc.b	smpsNoAttack, $01
0009557A E10A                       	smpsAlterNote       $0A
0009557C E701                       	dc.b	smpsNoAttack, $01
0009557E E104                       	smpsAlterNote       $04
00095580 E701                       	dc.b	smpsNoAttack, $01
00095582 E100                       	smpsAlterNote       $00
00095584 E701                       	dc.b	smpsNoAttack, $01
00095586 E104                       	smpsAlterNote       $04
00095588 E701                       	dc.b	smpsNoAttack, $01
0009558A E107                       	smpsAlterNote       $07
0009558C E701                       	dc.b	smpsNoAttack, $01
0009558E E10B                       	smpsAlterNote       $0B
00095590 E701                       	dc.b	smpsNoAttack, $01
00095592 E107                       	smpsAlterNote       $07
00095594 E701                       	dc.b	smpsNoAttack, $01
00095596 E101                       	smpsAlterNote       $01
00095598 E701                       	dc.b	smpsNoAttack, $01
0009559A E100                       	smpsAlterNote       $00
0009559C E701                       	dc.b	smpsNoAttack, $01
0009559E E104                       	smpsAlterNote       $04
000955A0 E701                       	dc.b	smpsNoAttack, $01
000955A2 E10A                       	smpsAlterNote       $0A
000955A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955A8 E107                       	smpsAlterNote       $07
000955AA E701                       	dc.b	smpsNoAttack, $01
000955AC E101                       	smpsAlterNote       $01
000955AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955B2 E107                       	smpsAlterNote       $07
000955B4 E701                       	dc.b	smpsNoAttack, $01
000955B6 E10A                       	smpsAlterNote       $0A
000955B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955BC E104                       	smpsAlterNote       $04
000955BE E701                       	dc.b	smpsNoAttack, $01
000955C0 E100                       	smpsAlterNote       $00
000955C2 E701                       	dc.b	smpsNoAttack, $01
000955C4 E101                       	smpsAlterNote       $01
000955C6 E701                       	dc.b	smpsNoAttack, $01
000955C8 E107                       	smpsAlterNote       $07
000955CA E701                       	dc.b	smpsNoAttack, $01
000955CC E10B                       	smpsAlterNote       $0B
000955CE E701                       	dc.b	smpsNoAttack, $01
000955D0 E107                       	smpsAlterNote       $07
000955D2 E701                       	dc.b	smpsNoAttack, $01
000955D4 E104                       	smpsAlterNote       $04
000955D6 E701                       	dc.b	smpsNoAttack, $01
000955D8 E100                       	smpsAlterNote       $00
000955DA E701                       	dc.b	smpsNoAttack, $01
000955DC E101                       	smpsAlterNote       $01
000955DE 8001                       	dc.b	nRst, $01
000955E0 E109                       	smpsAlterNote       $09
000955E2 C20D                       	dc.b	nF5, $0D
000955E4 E106                       	smpsAlterNote       $06
000955E6 E701                       	dc.b	smpsNoAttack, $01
000955E8 E102                       	smpsAlterNote       $02
000955EA E701                       	dc.b	smpsNoAttack, $01
000955EC E106                       	smpsAlterNote       $06
000955EE E701                       	dc.b	smpsNoAttack, $01
000955F0 E10C                       	smpsAlterNote       $0C
000955F2 E701                       	dc.b	smpsNoAttack, $01
000955F4 E10D                       	smpsAlterNote       $0D
000955F6 E701                       	dc.b	smpsNoAttack, $01
000955F8 E109                       	smpsAlterNote       $09
000955FA E701                       	dc.b	smpsNoAttack, $01
000955FC E103                       	smpsAlterNote       $03
000955FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095602 E106                       	smpsAlterNote       $06
00095604 E701                       	dc.b	smpsNoAttack, $01
00095606 E10C                       	smpsAlterNote       $0C
00095608 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009560C E106                       	smpsAlterNote       $06
0009560E E701                       	dc.b	smpsNoAttack, $01
00095610 E103                       	smpsAlterNote       $03
00095612 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095616 E109                       	smpsAlterNote       $09
00095618 E701                       	dc.b	smpsNoAttack, $01
0009561A E10D                       	smpsAlterNote       $0D
0009561C E701                       	dc.b	smpsNoAttack, $01
0009561E E10C                       	smpsAlterNote       $0C
00095620 E701                       	dc.b	smpsNoAttack, $01
00095622 E109                       	smpsAlterNote       $09
00095624 8001                       	dc.b	nRst, $01
00095626 E108                       	smpsAlterNote       $08
00095628 C10D                       	dc.b	nE5, $0D
0009562A E109                       	smpsAlterNote       $09
0009562C C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00095630 E108                       	smpsAlterNote       $08
00095632 C10D                       	dc.b	nE5, $0D
00095634 E102                       	smpsAlterNote       $02
00095636 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009563A E105                       	smpsAlterNote       $05
0009563C E701                       	dc.b	smpsNoAttack, $01
0009563E E108                       	smpsAlterNote       $08
00095640 8001                       	dc.b	nRst, $01
00095642 E107                       	smpsAlterNote       $07
00095644 BF0D                       	dc.b	nD5, $0D
00095646 E108                       	smpsAlterNote       $08
00095648 C107                       	dc.b	nE5, $07
0009564A E109                       	smpsAlterNote       $09
0009564C C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00095652 E10B                       	smpsAlterNote       $0B
00095654 C603                       	dc.b	nA5, $03
00095656 E10C                       	smpsAlterNote       $0C
00095658 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0009565E E10B                       	smpsAlterNote       $0B
00095660 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00095666 E109                       	smpsAlterNote       $09
00095668 D003                       	dc.b	nG6, $03
0009566A E108                       	smpsAlterNote       $08
0009566C CD02 8001                  	dc.b	nE6, $02, nRst, $01
00095670 E10B                       	smpsAlterNote       $0B
00095672 C601 8001                  	dc.b	nA5, $01, nRst, $01
00095676 E108                       	smpsAlterNote       $08
00095678 C102                       	dc.b	nE5, $02
0009567C E10C                       	smpsAlterNote       $0C
0009567E E6FB                       	smpsAlterVol        $FB
00095680 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0009568C 8001                       	dc.b	nRst, $01
0009568E E10B                       	smpsAlterNote       $0B
00095690 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00095698 E107                       	smpsAlterNote       $07
0009569A A706 8001                  	dc.b	nD3, $06, nRst, $01
0009569E E10B                       	smpsAlterNote       $0B
000956A0 A203                       	dc.b	nA2, $03
000956A2 E109                       	smpsAlterNote       $09
000956A4 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000956A8 E108                       	smpsAlterNote       $08
000956AA A906                       	dc.b	nE3, $06
000956AC E107                       	smpsAlterNote       $07
000956AE A703 8001                  	dc.b	nD3, $03, nRst, $01
000956B2 E106                       	smpsAlterNote       $06
000956B4 A503                       	dc.b	nC3, $03
000956B6 E10C                       	smpsAlterNote       $0C
000956B8 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000956BC E10B                       	smpsAlterNote       $0B
000956BE A203 8004                  	dc.b	nA2, $03, nRst, $04
000956C2 E11B                       	smpsAlterNote       $1B
000956C4 C401                       	dc.b	nG5, $01
000956C6 E1F4                       	smpsAlterNote       $F4
000956C8 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000956CB E106                       	smpsAlterNote       $06
000956CD E701                       	dc.b	smpsNoAttack, $01
000956CF E10F                       	smpsAlterNote       $0F
000956D1 E701                       	dc.b	smpsNoAttack, $01
000956D3 E1E4                       	smpsAlterNote       $E4
000956D5 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000956D8 E1F6                       	smpsAlterNote       $F6
000956DA E701                       	dc.b	smpsNoAttack, $01
000956DC E108                       	smpsAlterNote       $08
000956DE E701                       	dc.b	smpsNoAttack, $01
000956E0 E10B                       	smpsAlterNote       $0B
000956E2 E706                       	dc.b	smpsNoAttack, $06
000956E4 E105                       	smpsAlterNote       $05
000956E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956EA E108                       	smpsAlterNote       $08
000956EC E701                       	dc.b	smpsNoAttack, $01
000956EE E10E                       	smpsAlterNote       $0E
000956F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956F4 E108                       	smpsAlterNote       $08
000956F6 E701                       	dc.b	smpsNoAttack, $01
000956F8 E105                       	smpsAlterNote       $05
000956FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956FE E10B                       	smpsAlterNote       $0B
00095700 E701                       	dc.b	smpsNoAttack, $01
00095702 E10F                       	smpsAlterNote       $0F
00095704 E701                       	dc.b	smpsNoAttack, $01
00095706 E10E                       	smpsAlterNote       $0E
00095708 E701                       	dc.b	smpsNoAttack, $01
0009570A E108                       	smpsAlterNote       $08
0009570C E701                       	dc.b	smpsNoAttack, $01
0009570E E104                       	smpsAlterNote       $04
00095710 E701                       	dc.b	smpsNoAttack, $01
00095712 E108                       	smpsAlterNote       $08
00095714 E701                       	dc.b	smpsNoAttack, $01
00095716 E10B                       	smpsAlterNote       $0B
00095718 E701                       	dc.b	smpsNoAttack, $01
0009571A E10F                       	smpsAlterNote       $0F
0009571C E701                       	dc.b	smpsNoAttack, $01
0009571E E10B                       	smpsAlterNote       $0B
00095720 E701                       	dc.b	smpsNoAttack, $01
00095722 E105                       	smpsAlterNote       $05
00095724 E701                       	dc.b	smpsNoAttack, $01
00095726 E104                       	smpsAlterNote       $04
00095728 E701                       	dc.b	smpsNoAttack, $01
0009572A E108                       	smpsAlterNote       $08
0009572C E701                       	dc.b	smpsNoAttack, $01
0009572E E10E                       	smpsAlterNote       $0E
00095730 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095734 E10B                       	smpsAlterNote       $0B
00095736 E701                       	dc.b	smpsNoAttack, $01
00095738 E105                       	smpsAlterNote       $05
0009573A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009573E E10B                       	smpsAlterNote       $0B
00095740 E701                       	dc.b	smpsNoAttack, $01
00095742 E10E                       	smpsAlterNote       $0E
00095744 E701                       	dc.b	smpsNoAttack, $01
00095746 E10F                       	smpsAlterNote       $0F
00095748 8001                       	dc.b	nRst, $01
0009574A E109                       	smpsAlterNote       $09
0009574C C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00095752 E108                       	smpsAlterNote       $08
00095754 C101 8001                  	dc.b	nE5, $01, nRst, $01
00095758 E109                       	smpsAlterNote       $09
0009575A C202                       	dc.b	nF5, $02
0009575C E108                       	smpsAlterNote       $08
0009575E C102                       	dc.b	nE5, $02
00095760 E107                       	smpsAlterNote       $07
00095762 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00095766 E108                       	smpsAlterNote       $08
00095768 C101 8001                  	dc.b	nE5, $01, nRst, $01
0009576C E107                       	smpsAlterNote       $07
0009576E BF02                       	dc.b	nD5, $02
00095770 E106                       	smpsAlterNote       $06
00095772 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00095776 E107                       	smpsAlterNote       $07
00095778 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0009577C E106                       	smpsAlterNote       $06
0009577E BD02                       	dc.b	nC5, $02
00095780 E10C                       	smpsAlterNote       $0C
00095782 BB02                       	dc.b	nBb4, $02
00095784 E106                       	smpsAlterNote       $06
00095786 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0009578A E10C                       	smpsAlterNote       $0C
0009578C BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00095790 E10B                       	smpsAlterNote       $0B
00095792 BA02                       	dc.b	nA4, $02
00095794 E10C                       	smpsAlterNote       $0C
00095796 BB02                       	dc.b	nBb4, $02
00095798 E10B                       	smpsAlterNote       $0B
0009579A BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000957A4 E108                       	smpsAlterNote       $08
000957A6 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000957AE E107                       	smpsAlterNote       $07
000957B0 BE02                       	dc.b	nCs5, $02
000957B2 E10B                       	smpsAlterNote       $0B
000957B4 BA02                       	dc.b	nA4, $02
000957B6 E109                       	smpsAlterNote       $09
000957B8 B802 8001                  	dc.b	nG4, $02, nRst, $01
000957BC E108                       	smpsAlterNote       $08
000957BE B501 8001                  	dc.b	nE4, $01, nRst, $01
000957C2 E10B                       	smpsAlterNote       $0B
000957C4 AE02                       	dc.b	nA3, $02
000957C6 E10C                       	smpsAlterNote       $0C
000957C8 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
000957D4 E10B                       	smpsAlterNote       $0B
000957D6 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000957DE E107                       	smpsAlterNote       $07
000957E0 A706 8001                  	dc.b	nD3, $06, nRst, $01
000957E4 E10B                       	smpsAlterNote       $0B
000957E6 A203                       	dc.b	nA2, $03
000957E8 E109                       	smpsAlterNote       $09
000957EA AA03 8001                  	dc.b	nF3, $03, nRst, $01
000957EE E108                       	smpsAlterNote       $08
000957F0 A906 8001                  	dc.b	nE3, $06, nRst, $01
000957F4 E107                       	smpsAlterNote       $07
000957F6 A702 8001                  	dc.b	nD3, $02, nRst, $01
000957FA E106                       	smpsAlterNote       $06
000957FC A503                       	dc.b	nC3, $03
000957FE E10C                       	smpsAlterNote       $0C
00095800 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095806 E107                       	smpsAlterNote       $07
00095808 B20D                       	dc.b	nCs4, $0D
0009580A E104                       	smpsAlterNote       $04
0009580C E701                       	dc.b	smpsNoAttack, $01
0009580E E100                       	smpsAlterNote       $00
00095810 E701                       	dc.b	smpsNoAttack, $01
00095812 E104                       	smpsAlterNote       $04
00095814 E701                       	dc.b	smpsNoAttack, $01
00095816 E10A                       	smpsAlterNote       $0A
00095818 E701                       	dc.b	smpsNoAttack, $01
0009581A E10B                       	smpsAlterNote       $0B
0009581C E701                       	dc.b	smpsNoAttack, $01
0009581E E107                       	smpsAlterNote       $07
00095820 E701                       	dc.b	smpsNoAttack, $01
00095822 E101                       	smpsAlterNote       $01
00095824 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095828 E104                       	smpsAlterNote       $04
0009582A E701                       	dc.b	smpsNoAttack, $01
0009582C E10A                       	smpsAlterNote       $0A
0009582E E701                       	dc.b	smpsNoAttack, $01
00095830 E10B                       	smpsAlterNote       $0B
00095832 8001                       	dc.b	nRst, $01
00095834 E107                       	smpsAlterNote       $07
00095836 B30D                       	dc.b	nD4, $0D
00095838 E104                       	smpsAlterNote       $04
0009583A E701                       	dc.b	smpsNoAttack, $01
0009583C E100                       	smpsAlterNote       $00
0009583E E701                       	dc.b	smpsNoAttack, $01
00095840 E104                       	smpsAlterNote       $04
00095842 E701                       	dc.b	smpsNoAttack, $01
00095844 E10A                       	smpsAlterNote       $0A
00095846 E701                       	dc.b	smpsNoAttack, $01
00095848 E10B                       	smpsAlterNote       $0B
0009584A E701                       	dc.b	smpsNoAttack, $01
0009584C E107                       	smpsAlterNote       $07
0009584E E701                       	dc.b	smpsNoAttack, $01
00095850 E101                       	smpsAlterNote       $01
00095852 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095856 E104                       	smpsAlterNote       $04
00095858 E701                       	dc.b	smpsNoAttack, $01
0009585A E10A                       	smpsAlterNote       $0A
0009585C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095860 E104                       	smpsAlterNote       $04
00095862 E701                       	dc.b	smpsNoAttack, $01
00095864 E101                       	smpsAlterNote       $01
00095866 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009586A E107                       	smpsAlterNote       $07
0009586C E701                       	dc.b	smpsNoAttack, $01
0009586E E10B                       	smpsAlterNote       $0B
00095870 E701                       	dc.b	smpsNoAttack, $01
00095872 E10A                       	smpsAlterNote       $0A
00095874 E701                       	dc.b	smpsNoAttack, $01
00095876 E107                       	smpsAlterNote       $07
00095878 8001                       	dc.b	nRst, $01
0009587A E108                       	smpsAlterNote       $08
0009587C B50D                       	dc.b	nE4, $0D
0009587E E102                       	smpsAlterNote       $02
00095880 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095884 E105                       	smpsAlterNote       $05
00095886 E701                       	dc.b	smpsNoAttack, $01
00095888 E10B                       	smpsAlterNote       $0B
0009588A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009588E E105                       	smpsAlterNote       $05
00095890 E701                       	dc.b	smpsNoAttack, $01
00095892 E102                       	smpsAlterNote       $02
00095894 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095898 E108                       	smpsAlterNote       $08
0009589A E701                       	dc.b	smpsNoAttack, $01
0009589C E10C                       	smpsAlterNote       $0C
0009589E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000958A2 E107                       	smpsAlterNote       $07
000958A4 B30D                       	dc.b	nD4, $0D
000958A6 E101                       	smpsAlterNote       $01
000958A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958AC E104                       	smpsAlterNote       $04
000958AE E701                       	dc.b	smpsNoAttack, $01
000958B0 E10A                       	smpsAlterNote       $0A
000958B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958B6 E104                       	smpsAlterNote       $04
000958B8 E701                       	dc.b	smpsNoAttack, $01
000958BA E101                       	smpsAlterNote       $01
000958BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958C0 E107                       	smpsAlterNote       $07
000958C2 E701                       	dc.b	smpsNoAttack, $01
000958C4 E10B                       	smpsAlterNote       $0B
000958C6 E701                       	dc.b	smpsNoAttack, $01
000958C8 E10A                       	smpsAlterNote       $0A
000958CA E701                       	dc.b	smpsNoAttack, $01
000958CC E104                       	smpsAlterNote       $04
000958CE E701                       	dc.b	smpsNoAttack, $01
000958D0 E100                       	smpsAlterNote       $00
000958D2 E701                       	dc.b	smpsNoAttack, $01
000958D4 E104                       	smpsAlterNote       $04
000958D6 E701                       	dc.b	smpsNoAttack, $01
000958D8 E107                       	smpsAlterNote       $07
000958DA E701                       	dc.b	smpsNoAttack, $01
000958DC E10B                       	smpsAlterNote       $0B
000958DE E701                       	dc.b	smpsNoAttack, $01
000958E0 E107                       	smpsAlterNote       $07
000958E2 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
000958E6 E101                       	smpsAlterNote       $01
000958E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958EC E107                       	smpsAlterNote       $07
000958EE E701                       	dc.b	smpsNoAttack, $01
000958F0 E10A                       	smpsAlterNote       $0A
000958F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958F6 E104                       	smpsAlterNote       $04
000958F8 E701                       	dc.b	smpsNoAttack, $01
000958FA E100                       	smpsAlterNote       $00
000958FC E701                       	dc.b	smpsNoAttack, $01
000958FE E101                       	smpsAlterNote       $01
00095900 E701                       	dc.b	smpsNoAttack, $01
00095902 E107                       	smpsAlterNote       $07
00095904 E701                       	dc.b	smpsNoAttack, $01
00095906 E10B                       	smpsAlterNote       $0B
00095908 E701                       	dc.b	smpsNoAttack, $01
0009590A E107                       	smpsAlterNote       $07
0009590C B30E                       	dc.b	nD4, $0E
0009590E E101                       	smpsAlterNote       $01
00095910 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095914 E107                       	smpsAlterNote       $07
00095916 E701                       	dc.b	smpsNoAttack, $01
00095918 E10A                       	smpsAlterNote       $0A
0009591A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009591E E104                       	smpsAlterNote       $04
00095920 E701                       	dc.b	smpsNoAttack, $01
00095922 E100                       	smpsAlterNote       $00
00095924 E701                       	dc.b	smpsNoAttack, $01
00095926 E101                       	smpsAlterNote       $01
00095928 E701                       	dc.b	smpsNoAttack, $01
0009592A E107                       	smpsAlterNote       $07
0009592C E701                       	dc.b	smpsNoAttack, $01
0009592E E10B                       	smpsAlterNote       $0B
00095930 E701                       	dc.b	smpsNoAttack, $01
00095932 E107                       	smpsAlterNote       $07
00095934 E701                       	dc.b	smpsNoAttack, $01
00095936 E104                       	smpsAlterNote       $04
00095938 E701                       	dc.b	smpsNoAttack, $01
0009593A E100                       	smpsAlterNote       $00
0009593C E701                       	dc.b	smpsNoAttack, $01
0009593E E104                       	smpsAlterNote       $04
00095940 E701                       	dc.b	smpsNoAttack, $01
00095942 E10A                       	smpsAlterNote       $0A
00095944 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095948 E107                       	smpsAlterNote       $07
0009594A E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0009594E E104                       	smpsAlterNote       $04
00095950 E701                       	dc.b	smpsNoAttack, $01
00095952 E100                       	smpsAlterNote       $00
00095954 E701                       	dc.b	smpsNoAttack, $01
00095956 E101                       	smpsAlterNote       $01
00095958 E701                       	dc.b	smpsNoAttack, $01
0009595A E107                       	smpsAlterNote       $07
0009595C E701                       	dc.b	smpsNoAttack, $01
0009595E E10B                       	smpsAlterNote       $0B
00095960 E701                       	dc.b	smpsNoAttack, $01
00095962 E107                       	smpsAlterNote       $07
00095964 E701                       	dc.b	smpsNoAttack, $01
00095966 E104                       	smpsAlterNote       $04
00095968 E701                       	dc.b	smpsNoAttack, $01
0009596A E100                       	smpsAlterNote       $00
0009596C E701                       	dc.b	smpsNoAttack, $01
0009596E E104                       	smpsAlterNote       $04
00095970 E701                       	dc.b	smpsNoAttack, $01
00095972 E10A                       	smpsAlterNote       $0A
00095974 E701                       	dc.b	smpsNoAttack, $01
00095976 E10B                       	smpsAlterNote       $0B
00095978 E701                       	dc.b	smpsNoAttack, $01
0009597C E6FF                       	smpsAlterVol        $FF
0009597E A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0009598A 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
00095992 E109                       	smpsAlterNote       $09
00095994 E601                       	smpsAlterVol        $01
00095996 B60D                       	dc.b	nF4, $0D
00095998 E106                       	smpsAlterNote       $06
0009599A E701                       	dc.b	smpsNoAttack, $01
0009599C E102                       	smpsAlterNote       $02
0009599E E701                       	dc.b	smpsNoAttack, $01
000959A0 E106                       	smpsAlterNote       $06
000959A2 E701                       	dc.b	smpsNoAttack, $01
000959A4 E109                       	smpsAlterNote       $09
000959A6 E701                       	dc.b	smpsNoAttack, $01
000959A8 E10D                       	smpsAlterNote       $0D
000959AA E701                       	dc.b	smpsNoAttack, $01
000959AC E109                       	smpsAlterNote       $09
000959AE E701                       	dc.b	smpsNoAttack, $01
000959B0 E103                       	smpsAlterNote       $03
000959B2 E701                       	dc.b	smpsNoAttack, $01
000959B4 E102                       	smpsAlterNote       $02
000959B6 E701                       	dc.b	smpsNoAttack, $01
000959B8 E106                       	smpsAlterNote       $06
000959BA E701                       	dc.b	smpsNoAttack, $01
000959BC E10C                       	smpsAlterNote       $0C
000959BE E701                       	dc.b	smpsNoAttack, $01
000959C0 E10D                       	smpsAlterNote       $0D
000959C2 8001                       	dc.b	nRst, $01
000959C4 E109                       	smpsAlterNote       $09
000959C6 B80D                       	dc.b	nG4, $0D
000959C8 E106                       	smpsAlterNote       $06
000959CA E701                       	dc.b	smpsNoAttack, $01
000959CC E102                       	smpsAlterNote       $02
000959CE E701                       	dc.b	smpsNoAttack, $01
000959D0 E106                       	smpsAlterNote       $06
000959D2 E701                       	dc.b	smpsNoAttack, $01
000959D4 E109                       	smpsAlterNote       $09
000959D6 E701                       	dc.b	smpsNoAttack, $01
000959D8 E10D                       	smpsAlterNote       $0D
000959DA E701                       	dc.b	smpsNoAttack, $01
000959DC E109                       	smpsAlterNote       $09
000959DE E701                       	dc.b	smpsNoAttack, $01
000959E0 E103                       	smpsAlterNote       $03
000959E2 E701                       	dc.b	smpsNoAttack, $01
000959E4 E102                       	smpsAlterNote       $02
000959E6 E701                       	dc.b	smpsNoAttack, $01
000959E8 E106                       	smpsAlterNote       $06
000959EA E701                       	dc.b	smpsNoAttack, $01
000959EC E10C                       	smpsAlterNote       $0C
000959EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959F2 E106                       	smpsAlterNote       $06
000959F4 E701                       	dc.b	smpsNoAttack, $01
000959F6 E103                       	smpsAlterNote       $03
000959F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959FC E109                       	smpsAlterNote       $09
000959FE E701                       	dc.b	smpsNoAttack, $01
00095A00 E10D                       	smpsAlterNote       $0D
00095A02 E701                       	dc.b	smpsNoAttack, $01
00095A04 E10C                       	smpsAlterNote       $0C
00095A06 E701                       	dc.b	smpsNoAttack, $01
00095A08 E109                       	smpsAlterNote       $09
00095A0A 8001                       	dc.b	nRst, $01
00095A0C E10B                       	smpsAlterNote       $0B
00095A0E BA0D                       	dc.b	nA4, $0D
00095A10 E105                       	smpsAlterNote       $05
00095A12 E701                       	dc.b	smpsNoAttack, $01
00095A14 E104                       	smpsAlterNote       $04
00095A16 E701                       	dc.b	smpsNoAttack, $01
00095A18 E108                       	smpsAlterNote       $08
00095A1A E701                       	dc.b	smpsNoAttack, $01
00095A1C E10E                       	smpsAlterNote       $0E
00095A1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A22 E10B                       	smpsAlterNote       $0B
00095A24 E701                       	dc.b	smpsNoAttack, $01
00095A26 E105                       	smpsAlterNote       $05
00095A28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A2C E10B                       	smpsAlterNote       $0B
00095A2E E701                       	dc.b	smpsNoAttack, $01
00095A30 E10E                       	smpsAlterNote       $0E
00095A32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A36 E108                       	smpsAlterNote       $08
00095A38 E701                       	dc.b	smpsNoAttack, $01
00095A3A E104                       	smpsAlterNote       $04
00095A3C E701                       	dc.b	smpsNoAttack, $01
00095A3E E105                       	smpsAlterNote       $05
00095A40 E701                       	dc.b	smpsNoAttack, $01
00095A42 E10B                       	smpsAlterNote       $0B
00095A44 E701                       	dc.b	smpsNoAttack, $01
00095A46 E10F                       	smpsAlterNote       $0F
00095A48 E701                       	dc.b	smpsNoAttack, $01
00095A4A E10B                       	smpsAlterNote       $0B
00095A4C E701                       	dc.b	smpsNoAttack, $01
00095A4E E108                       	smpsAlterNote       $08
00095A50 E701                       	dc.b	smpsNoAttack, $01
00095A52 E104                       	smpsAlterNote       $04
00095A54 E701                       	dc.b	smpsNoAttack, $01
00095A56 E108                       	smpsAlterNote       $08
00095A58 E701                       	dc.b	smpsNoAttack, $01
00095A5A E10E                       	smpsAlterNote       $0E
00095A5C E701                       	dc.b	smpsNoAttack, $01
00095A5E E10F                       	smpsAlterNote       $0F
00095A60 E701                       	dc.b	smpsNoAttack, $01
00095A62 E10B                       	smpsAlterNote       $0B
00095A64 E701                       	dc.b	smpsNoAttack, $01
00095A66 E105                       	smpsAlterNote       $05
00095A68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A6C E108                       	smpsAlterNote       $08
00095A6E E701                       	dc.b	smpsNoAttack, $01
00095A70 E10E                       	smpsAlterNote       $0E
00095A72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A76 E108                       	smpsAlterNote       $08
00095A78 E701                       	dc.b	smpsNoAttack, $01
00095A7A E105                       	smpsAlterNote       $05
00095A7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A80 E108                       	smpsAlterNote       $08
00095A82 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00095A86 E109                       	smpsAlterNote       $09
00095A88 B60D                       	dc.b	nF4, $0D
00095A8A E103                       	smpsAlterNote       $03
00095A8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A90 E106                       	smpsAlterNote       $06
00095A92 E701                       	dc.b	smpsNoAttack, $01
00095A94 E10C                       	smpsAlterNote       $0C
00095A96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A9A E106                       	smpsAlterNote       $06
00095A9C E701                       	dc.b	smpsNoAttack, $01
00095A9E E103                       	smpsAlterNote       $03
00095AA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095AA4 E109                       	smpsAlterNote       $09
00095AA6 E701                       	dc.b	smpsNoAttack, $01
00095AA8 E10D                       	smpsAlterNote       $0D
00095AAA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095AAE E109                       	smpsAlterNote       $09
00095AB0 B80D                       	dc.b	nG4, $0D
00095AB2 E103                       	smpsAlterNote       $03
00095AB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095AB8 E109                       	smpsAlterNote       $09
00095ABA E701                       	dc.b	smpsNoAttack, $01
00095ABC E10C                       	smpsAlterNote       $0C
00095ABE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095AC2 E106                       	smpsAlterNote       $06
00095AC4 E701                       	dc.b	smpsNoAttack, $01
00095AC6 E102                       	smpsAlterNote       $02
00095AC8 E701                       	dc.b	smpsNoAttack, $01
00095ACA E103                       	smpsAlterNote       $03
00095ACC E701                       	dc.b	smpsNoAttack, $01
00095ACE E109                       	smpsAlterNote       $09
00095AD0 E701                       	dc.b	smpsNoAttack, $01
00095AD2 E10D                       	smpsAlterNote       $0D
00095AD4 E701                       	dc.b	smpsNoAttack, $01
00095AD6 E109                       	smpsAlterNote       $09
00095AD8 E701                       	dc.b	smpsNoAttack, $01
00095ADA E106                       	smpsAlterNote       $06
00095ADC E701                       	dc.b	smpsNoAttack, $01
00095ADE E102                       	smpsAlterNote       $02
00095AE0 E701                       	dc.b	smpsNoAttack, $01
00095AE2 E106                       	smpsAlterNote       $06
00095AE4 E701                       	dc.b	smpsNoAttack, $01
00095AE6 E10C                       	smpsAlterNote       $0C
00095AE8 E701                       	dc.b	smpsNoAttack, $01
00095AEA E10D                       	smpsAlterNote       $0D
00095AEC E701                       	dc.b	smpsNoAttack, $01
00095AEE E109                       	smpsAlterNote       $09
00095AF0 E701                       	dc.b	smpsNoAttack, $01
00095AF2 E10B                       	smpsAlterNote       $0B
00095AF4 BA0D                       	dc.b	nA4, $0D
00095AF6 E108                       	smpsAlterNote       $08
00095AF8 E701                       	dc.b	smpsNoAttack, $01
00095AFA E105                       	smpsAlterNote       $05
00095AFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B00 E10B                       	smpsAlterNote       $0B
00095B02 E701                       	dc.b	smpsNoAttack, $01
00095B04 E10F                       	smpsAlterNote       $0F
00095B06 E701                       	dc.b	smpsNoAttack, $01
00095B08 E10E                       	smpsAlterNote       $0E
00095B0A E701                       	dc.b	smpsNoAttack, $01
00095B0C E108                       	smpsAlterNote       $08
00095B0E E701                       	dc.b	smpsNoAttack, $01
00095B10 E104                       	smpsAlterNote       $04
00095B12 E701                       	dc.b	smpsNoAttack, $01
00095B14 E108                       	smpsAlterNote       $08
00095B16 E701                       	dc.b	smpsNoAttack, $01
00095B18 E10B                       	smpsAlterNote       $0B
00095B1A E701                       	dc.b	smpsNoAttack, $01
00095B1C E10F                       	smpsAlterNote       $0F
00095B1E E701                       	dc.b	smpsNoAttack, $01
00095B20 E10B                       	smpsAlterNote       $0B
00095B22 E701                       	dc.b	smpsNoAttack, $01
00095B24 E105                       	smpsAlterNote       $05
00095B26 E701                       	dc.b	smpsNoAttack, $01
00095B28 E104                       	smpsAlterNote       $04
00095B2A E701                       	dc.b	smpsNoAttack, $01
00095B2C E108                       	smpsAlterNote       $08
00095B2E E701                       	dc.b	smpsNoAttack, $01
00095B30 E10E                       	smpsAlterNote       $0E
00095B32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B36 E10B                       	smpsAlterNote       $0B
00095B38 E701                       	dc.b	smpsNoAttack, $01
00095B3A E105                       	smpsAlterNote       $05
00095B3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B40 E10B                       	smpsAlterNote       $0B
00095B42 E701                       	dc.b	smpsNoAttack, $01
00095B44 E10E                       	smpsAlterNote       $0E
00095B46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B4A E108                       	smpsAlterNote       $08
00095B4C E701                       	dc.b	smpsNoAttack, $01
00095B4E E105                       	smpsAlterNote       $05
00095B50 8001                       	dc.b	nRst, $01
00095B52 E109                       	smpsAlterNote       $09
00095B54 B60A                       	dc.b	nF4, $0A
00095B56 E108                       	smpsAlterNote       $08
00095B58 B507                       	dc.b	nE4, $07
00095B5A E107                       	smpsAlterNote       $07
00095B5C B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00095B60 E108                       	smpsAlterNote       $08
00095B62 B503                       	dc.b	nE4, $03
00095B64 E109                       	smpsAlterNote       $09
00095B66 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00095B6E E10B                       	smpsAlterNote       $0B
00095B70 BA0D                       	dc.b	nA4, $0D
00095B72 E108                       	smpsAlterNote       $08
00095B74 E701                       	dc.b	smpsNoAttack, $01
00095B76 E104                       	smpsAlterNote       $04
00095B78 E701                       	dc.b	smpsNoAttack, $01
00095B7A E108                       	smpsAlterNote       $08
00095B7C E701                       	dc.b	smpsNoAttack, $01
00095B7E E10B                       	smpsAlterNote       $0B
00095B80 E701                       	dc.b	smpsNoAttack, $01
00095B82 E10F                       	smpsAlterNote       $0F
00095B84 E701                       	dc.b	smpsNoAttack, $01
00095B86 E10B                       	smpsAlterNote       $0B
00095B88 E701                       	dc.b	smpsNoAttack, $01
00095B8A E105                       	smpsAlterNote       $05
00095B8C E701                       	dc.b	smpsNoAttack, $01
00095B8E E104                       	smpsAlterNote       $04
00095B90 E701                       	dc.b	smpsNoAttack, $01
00095B92 E108                       	smpsAlterNote       $08
00095B94 E701                       	dc.b	smpsNoAttack, $01
00095B96 E10E                       	smpsAlterNote       $0E
00095B98 E701                       	dc.b	smpsNoAttack, $01
00095B9A E10F                       	smpsAlterNote       $0F
00095B9C 8001                       	dc.b	nRst, $01
00095B9E E109                       	smpsAlterNote       $09
00095BA0 C20D                       	dc.b	nF5, $0D
00095BA2 E106                       	smpsAlterNote       $06
00095BA4 E701                       	dc.b	smpsNoAttack, $01
00095BA6 E102                       	smpsAlterNote       $02
00095BA8 E701                       	dc.b	smpsNoAttack, $01
00095BAA E106                       	smpsAlterNote       $06
00095BAC E701                       	dc.b	smpsNoAttack, $01
00095BAE E109                       	smpsAlterNote       $09
00095BB0 E701                       	dc.b	smpsNoAttack, $01
00095BB2 E10D                       	smpsAlterNote       $0D
00095BB4 E701                       	dc.b	smpsNoAttack, $01
00095BB6 E109                       	smpsAlterNote       $09
00095BB8 E701                       	dc.b	smpsNoAttack, $01
00095BBA E103                       	smpsAlterNote       $03
00095BBC E701                       	dc.b	smpsNoAttack, $01
00095BBE E102                       	smpsAlterNote       $02
00095BC0 E701                       	dc.b	smpsNoAttack, $01
00095BC2 E106                       	smpsAlterNote       $06
00095BC4 E701                       	dc.b	smpsNoAttack, $01
00095BC6 E10C                       	smpsAlterNote       $0C
00095BC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BCC E109                       	smpsAlterNote       $09
00095BCE E701                       	dc.b	smpsNoAttack, $01
00095BD0 E103                       	smpsAlterNote       $03
00095BD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BD6 E109                       	smpsAlterNote       $09
00095BD8 E701                       	dc.b	smpsNoAttack, $01
00095BDA E10C                       	smpsAlterNote       $0C
00095BDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BE0 E106                       	smpsAlterNote       $06
00095BE2 E701                       	dc.b	smpsNoAttack, $01
00095BE4 E102                       	smpsAlterNote       $02
00095BE6 E701                       	dc.b	smpsNoAttack, $01
00095BE8 E103                       	smpsAlterNote       $03
00095BEA E701                       	dc.b	smpsNoAttack, $01
00095BEC E109                       	smpsAlterNote       $09
00095BEE E701                       	dc.b	smpsNoAttack, $01
00095BF0 E10D                       	smpsAlterNote       $0D
00095BF2 E701                       	dc.b	smpsNoAttack, $01
00095BF4 E109                       	smpsAlterNote       $09
00095BF6 E701                       	dc.b	smpsNoAttack, $01
00095BF8 E106                       	smpsAlterNote       $06
00095BFA E701                       	dc.b	smpsNoAttack, $01
00095BFC E102                       	smpsAlterNote       $02
00095BFE E701                       	dc.b	smpsNoAttack, $01
00095C00 E106                       	smpsAlterNote       $06
00095C02 E701                       	dc.b	smpsNoAttack, $01
00095C04 E10C                       	smpsAlterNote       $0C
00095C06 E701                       	dc.b	smpsNoAttack, $01
00095C08 E10D                       	smpsAlterNote       $0D
00095C0A E701                       	dc.b	smpsNoAttack, $01
00095C0C E109                       	smpsAlterNote       $09
00095C0E E701                       	dc.b	smpsNoAttack, $01
00095C10 E103                       	smpsAlterNote       $03
00095C12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C16 E106                       	smpsAlterNote       $06
00095C18 E701                       	dc.b	smpsNoAttack, $01
00095C1A E10C                       	smpsAlterNote       $0C
00095C1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C20 E106                       	smpsAlterNote       $06
00095C22 E701                       	dc.b	smpsNoAttack, $01
00095C24 E103                       	smpsAlterNote       $03
00095C26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C2A E109                       	smpsAlterNote       $09
00095C2C E701                       	dc.b	smpsNoAttack, $01
00095C2E E10D                       	smpsAlterNote       $0D
00095C30 E701                       	dc.b	smpsNoAttack, $01
00095C32 E10C                       	smpsAlterNote       $0C
00095C34 E701                       	dc.b	smpsNoAttack, $01
00095C36 E106                       	smpsAlterNote       $06
00095C38 E701                       	dc.b	smpsNoAttack, $01
00095C3A E103                       	smpsAlterNote       $03
00095C3C 8001                       	dc.b	nRst, $01
00095C3E E109                       	smpsAlterNote       $09
00095C40 C206 8001                  	dc.b	nF5, $06, nRst, $01
00095C46 E10C                       	smpsAlterNote       $0C
00095C48 E601                       	smpsAlterVol        $01
00095C4A BB0D                       	dc.b	nBb4, $0D
00095C4C E106                       	smpsAlterNote       $06
00095C4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C52 E109                       	smpsAlterNote       $09
00095C54 E701                       	dc.b	smpsNoAttack, $01
00095C56 E10F                       	smpsAlterNote       $0F
00095C58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C5C E109                       	smpsAlterNote       $09
00095C5E E701                       	dc.b	smpsNoAttack, $01
00095C60 E106                       	smpsAlterNote       $06
00095C62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C66 E10C                       	smpsAlterNote       $0C
00095C68 E701                       	dc.b	smpsNoAttack, $01
00095C6A E110                       	smpsAlterNote       $10
00095C6C E701                       	dc.b	smpsNoAttack, $01
00095C6E E10F                       	smpsAlterNote       $0F
00095C70 E701                       	dc.b	smpsNoAttack, $01
00095C72 E109                       	smpsAlterNote       $09
00095C74 E701                       	dc.b	smpsNoAttack, $01
00095C76 E105                       	smpsAlterNote       $05
00095C78 E701                       	dc.b	smpsNoAttack, $01
00095C7A E106                       	smpsAlterNote       $06
00095C7C 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00095C80 E103                       	smpsAlterNote       $03
00095C82 E701                       	dc.b	smpsNoAttack, $01
00095C84 E1FF                       	smpsAlterNote       $FF
00095C86 E701                       	dc.b	smpsNoAttack, $01
00095C88 E103                       	smpsAlterNote       $03
00095C8A E701                       	dc.b	smpsNoAttack, $01
00095C8C E106                       	smpsAlterNote       $06
00095C8E E701                       	dc.b	smpsNoAttack, $01
00095C90 E10A                       	smpsAlterNote       $0A
00095C92 E701                       	dc.b	smpsNoAttack, $01
00095C94 E106                       	smpsAlterNote       $06
00095C96 E701                       	dc.b	smpsNoAttack, $01
00095C98 E100                       	smpsAlterNote       $00
00095C9A E701                       	dc.b	smpsNoAttack, $01
00095C9C E1FF                       	smpsAlterNote       $FF
00095C9E E701                       	dc.b	smpsNoAttack, $01
00095CA0 E103                       	smpsAlterNote       $03
00095CA2 E701                       	dc.b	smpsNoAttack, $01
00095CA4 E109                       	smpsAlterNote       $09
00095CA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CAA E106                       	smpsAlterNote       $06
00095CAC E701                       	dc.b	smpsNoAttack, $01
00095CAE E100                       	smpsAlterNote       $00
00095CB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CB4 E107                       	smpsAlterNote       $07
00095CB6 BF0E                       	dc.b	nD5, $0E
00095CB8 E101                       	smpsAlterNote       $01
00095CBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CBE E107                       	smpsAlterNote       $07
00095CC0 E701                       	dc.b	smpsNoAttack, $01
00095CC2 E10A                       	smpsAlterNote       $0A
00095CC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CC8 E104                       	smpsAlterNote       $04
00095CCA E701                       	dc.b	smpsNoAttack, $01
00095CCC E100                       	smpsAlterNote       $00
00095CCE E701                       	dc.b	smpsNoAttack, $01
00095CD0 E101                       	smpsAlterNote       $01
00095CD2 E701                       	dc.b	smpsNoAttack, $01
00095CD4 E107                       	smpsAlterNote       $07
00095CD6 E701                       	dc.b	smpsNoAttack, $01
00095CD8 E10B                       	smpsAlterNote       $0B
00095CDA E701                       	dc.b	smpsNoAttack, $01
00095CDC E107                       	smpsAlterNote       $07
00095CDE E701                       	dc.b	smpsNoAttack, $01
00095CE0 E104                       	smpsAlterNote       $04
00095CE2 E701                       	dc.b	smpsNoAttack, $01
00095CE4 E100                       	smpsAlterNote       $00
00095CE6 E701                       	dc.b	smpsNoAttack, $01
00095CE8 E101                       	smpsAlterNote       $01
00095CEA 8001                       	dc.b	nRst, $01
00095CEC E108                       	smpsAlterNote       $08
00095CEE C10C                       	dc.b	nE5, $0C
00095CF0 E109                       	smpsAlterNote       $09
00095CF2 C201 8001                  	dc.b	nF5, $01, nRst, $01
00095CF6 E10A                       	smpsAlterNote       $0A
00095CF8 8001                       	dc.b	nRst, $01
00095CFA E109                       	smpsAlterNote       $09
00095CFC C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00095D00 E106                       	smpsAlterNote       $06
00095D02 E701                       	dc.b	smpsNoAttack, $01
00095D04 E102                       	smpsAlterNote       $02
00095D06 E701                       	dc.b	smpsNoAttack, $01
00095D08 E103                       	smpsAlterNote       $03
00095D0A E701                       	dc.b	smpsNoAttack, $01
00095D0C E109                       	smpsAlterNote       $09
00095D0E E701                       	dc.b	smpsNoAttack, $01
00095D10 E10D                       	smpsAlterNote       $0D
00095D12 E701                       	dc.b	smpsNoAttack, $01
00095D14 E109                       	smpsAlterNote       $09
00095D16 E701                       	dc.b	smpsNoAttack, $01
00095D18 E106                       	smpsAlterNote       $06
00095D1A E701                       	dc.b	smpsNoAttack, $01
00095D1C E102                       	smpsAlterNote       $02
00095D1E E701                       	dc.b	smpsNoAttack, $01
00095D20 E106                       	smpsAlterNote       $06
00095D22 E701                       	dc.b	smpsNoAttack, $01
00095D24 E10C                       	smpsAlterNote       $0C
00095D26 E701                       	dc.b	smpsNoAttack, $01
00095D28 E10D                       	smpsAlterNote       $0D
00095D2A E701                       	dc.b	smpsNoAttack, $01
00095D2C E109                       	smpsAlterNote       $09
00095D2E C40D                       	dc.b	nG5, $0D
00095D30 E106                       	smpsAlterNote       $06
00095D32 E701                       	dc.b	smpsNoAttack, $01
00095D34 E102                       	smpsAlterNote       $02
00095D36 E701                       	dc.b	smpsNoAttack, $01
00095D38 E103                       	smpsAlterNote       $03
00095D3A E701                       	dc.b	smpsNoAttack, $01
00095D3C E109                       	smpsAlterNote       $09
00095D3E E701                       	dc.b	smpsNoAttack, $01
00095D40 E108                       	smpsAlterNote       $08
00095D42 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00095D4E E109                       	smpsAlterNote       $09
00095D50 C20D                       	dc.b	nF5, $0D
00095D52 E106                       	smpsAlterNote       $06
00095D54 E701                       	dc.b	smpsNoAttack, $01
00095D56 E102                       	smpsAlterNote       $02
00095D58 E701                       	dc.b	smpsNoAttack, $01
00095D5A E106                       	smpsAlterNote       $06
00095D5C E701                       	dc.b	smpsNoAttack, $01
00095D5E E109                       	smpsAlterNote       $09
00095D60 E701                       	dc.b	smpsNoAttack, $01
00095D62 E10D                       	smpsAlterNote       $0D
00095D64 E701                       	dc.b	smpsNoAttack, $01
00095D66 E109                       	smpsAlterNote       $09
00095D68 E701                       	dc.b	smpsNoAttack, $01
00095D6A E103                       	smpsAlterNote       $03
00095D6C E701                       	dc.b	smpsNoAttack, $01
00095D6E E102                       	smpsAlterNote       $02
00095D70 E701                       	dc.b	smpsNoAttack, $01
00095D72 E106                       	smpsAlterNote       $06
00095D74 E701                       	dc.b	smpsNoAttack, $01
00095D76 E10C                       	smpsAlterNote       $0C
00095D78 E701                       	dc.b	smpsNoAttack, $01
00095D7A E10D                       	smpsAlterNote       $0D
00095D7C 8001                       	dc.b	nRst, $01
00095D7E E112                       	smpsAlterNote       $12
00095D80 C401                       	dc.b	nG5, $01
00095D82 E1EB                       	smpsAlterNote       $EB
00095D84 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00095D87 E1FD                       	smpsAlterNote       $FD
00095D89 E701                       	dc.b	smpsNoAttack, $01
00095D8B E10F                       	smpsAlterNote       $0F
00095D8D E701                       	dc.b	smpsNoAttack, $01
00095D8F E118                       	smpsAlterNote       $18
00095D91 E701                       	dc.b	smpsNoAttack, $01
00095D93 E1ED                       	smpsAlterNote       $ED
00095D95 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00095D98 E1FF                       	smpsAlterNote       $FF
00095D9A E701                       	dc.b	smpsNoAttack, $01
00095D9C E10B                       	smpsAlterNote       $0B
00095D9E E703                       	dc.b	smpsNoAttack, $03
00095DA0 E109                       	smpsAlterNote       $09
00095DA2 C407                       	dc.b	nG5, $07
00095DA4 E108                       	smpsAlterNote       $08
00095DA6 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00095DB2 E109                       	smpsAlterNote       $09
00095DB4 C20D                       	dc.b	nF5, $0D
00095DB6 E103                       	smpsAlterNote       $03
00095DB8 E701                       	dc.b	smpsNoAttack, $01
00095DBA E102                       	smpsAlterNote       $02
00095DBC E701                       	dc.b	smpsNoAttack, $01
00095DBE E106                       	smpsAlterNote       $06
00095DC0 E701                       	dc.b	smpsNoAttack, $01
00095DC2 E10C                       	smpsAlterNote       $0C
00095DC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DC8 E109                       	smpsAlterNote       $09
00095DCA E701                       	dc.b	smpsNoAttack, $01
00095DCC E103                       	smpsAlterNote       $03
00095DCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DD2 E109                       	smpsAlterNote       $09
00095DD4 E701                       	dc.b	smpsNoAttack, $01
00095DD6 E10C                       	smpsAlterNote       $0C
00095DD8 E701                       	dc.b	smpsNoAttack, $01
00095DDA E10D                       	smpsAlterNote       $0D
00095DDC 8001                       	dc.b	nRst, $01
00095DDE E10B                       	smpsAlterNote       $0B
00095DE0 C609 8001                  	dc.b	nA5, $09, nRst, $01
00095DE4 E109                       	smpsAlterNote       $09
00095DE6 B806 8001                  	dc.b	nG4, $06, nRst, $01
00095DEA E108                       	smpsAlterNote       $08
00095DEC C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00095DF8 8001                       	dc.b	nRst, $01
00095DFA E109                       	smpsAlterNote       $09
00095DFC C20D                       	dc.b	nF5, $0D
00095DFE E103                       	smpsAlterNote       $03
00095E00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E04 E106                       	smpsAlterNote       $06
00095E06 E701                       	dc.b	smpsNoAttack, $01
00095E08 E10C                       	smpsAlterNote       $0C
00095E0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E0E E106                       	smpsAlterNote       $06
00095E10 E701                       	dc.b	smpsNoAttack, $01
00095E12 E103                       	smpsAlterNote       $03
00095E14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E18 E109                       	smpsAlterNote       $09
00095E1A E701                       	dc.b	smpsNoAttack, $01
00095E1C E10D                       	smpsAlterNote       $0D
00095E1E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095E24 E108                       	smpsAlterNote       $08
00095E26 E6FF                       	smpsAlterVol        $FF
00095E28 A806                       	dc.b	nEb3, $06
00095E2A E10C                       	smpsAlterNote       $0C
00095E2C A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095E30 E108                       	smpsAlterNote       $08
00095E32 A803                       	dc.b	nEb3, $03
00095E34 E109                       	smpsAlterNote       $09
00095E36 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00095E3A E10C                       	smpsAlterNote       $0C
00095E3C AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00095E46 E109                       	smpsAlterNote       $09
00095E48 E602                       	smpsAlterVol        $02
00095E4A B604                       	dc.b	nF4, $04
00095E4C E602                       	smpsAlterVol        $02
00095E4E F6F1 AA                    	smpsJump            music84_Jump02
00095E51                            
00095E51                            ; FM4 Data
00095E51                            music84_FM4:
00095E53 E040                       	smpsPan             panRight, $00
00095E55 8003                       	dc.b	nRst, $03
00095E57 E10F                       	smpsAlterNote       $0F
00095E59 C603 8008                  	dc.b	nA5, $03, nRst, $08
00095E5D E10D                       	smpsAlterNote       $0D
00095E5F C403 800A                  	dc.b	nG5, $03, nRst, $0A
00095E63 E10C                       	smpsAlterNote       $0C
00095E65 C103 8004                  	dc.b	nE5, $03, nRst, $04
00095E6B E6FE                       	smpsAlterVol        $FE
00095E6D E110                       	smpsAlterNote       $10
00095E6F C703 8001                  	dc.b	nBb5, $03, nRst, $01
00095E73 E10F                       	smpsAlterNote       $0F
00095E75 C602 8001                  	dc.b	nA5, $02, nRst, $01
00095E79 E10D                       	smpsAlterNote       $0D
00095E7B C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00095E84 E10C                       	smpsAlterNote       $0C
00095E86 C103                       	dc.b	nE5, $03
00095E88 E10A                       	smpsAlterNote       $0A
00095E8A BD03 8001                  	dc.b	nC5, $03, nRst, $01
00095E90 03                         	dc.b	$03
00095E91                            
00095E91                            music84_Jump01:
00095E91 E10B                       	smpsAlterNote       $0B
00095E93 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00095E97 E10C                       	smpsAlterNote       $0C
00095E99 C102 8001                  	dc.b	nE5, $02, nRst, $01
00095E9D E10D                       	smpsAlterNote       $0D
00095E9F C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00095EA9 E10B                       	smpsAlterNote       $0B
00095EAB BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00095EAF E107                       	smpsAlterNote       $07
00095EB1 E701                       	dc.b	smpsNoAttack, $01
00095EB3 E103                       	smpsAlterNote       $03
00095EB5 E701                       	dc.b	smpsNoAttack, $01
00095EB7 E104                       	smpsAlterNote       $04
00095EB9 E701                       	dc.b	smpsNoAttack, $01
00095EBB E10A                       	smpsAlterNote       $0A
00095EBD E701                       	dc.b	smpsNoAttack, $01
00095EBF E10E                       	smpsAlterNote       $0E
00095EC1 E701                       	dc.b	smpsNoAttack, $01
00095EC3 E10A                       	smpsAlterNote       $0A
00095EC5 E701                       	dc.b	smpsNoAttack, $01
00095EC7 E107                       	smpsAlterNote       $07
00095EC9 E701                       	dc.b	smpsNoAttack, $01
00095ECB E104                       	smpsAlterNote       $04
00095ECD 8001                       	dc.b	nRst, $01
00095ECF E110                       	smpsAlterNote       $10
00095ED1 C703                       	dc.b	nBb5, $03
00095ED3 E10F                       	smpsAlterNote       $0F
00095ED5 C603 8001                  	dc.b	nA5, $03, nRst, $01
00095ED9 E10D                       	smpsAlterNote       $0D
00095EDB C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00095EE1 E10C                       	smpsAlterNote       $0C
00095EE3 E701                       	dc.b	smpsNoAttack, $01
00095EE5 E108                       	smpsAlterNote       $08
00095EE7 E701                       	dc.b	smpsNoAttack, $01
00095EE9 E10C                       	smpsAlterNote       $0C
00095EEB E701                       	dc.b	smpsNoAttack, $01
00095EED E10F                       	smpsAlterNote       $0F
00095EEF E701                       	dc.b	smpsNoAttack, $01
00095EF1 E113                       	smpsAlterNote       $13
00095EF3 E701                       	dc.b	smpsNoAttack, $01
00095EF5 E10F                       	smpsAlterNote       $0F
00095EF7 E701                       	dc.b	smpsNoAttack, $01
00095EF9 E109                       	smpsAlterNote       $09
00095EFB E701                       	dc.b	smpsNoAttack, $01
00095EFD E108                       	smpsAlterNote       $08
00095EFF E701                       	dc.b	smpsNoAttack, $01
00095F01 E10C                       	smpsAlterNote       $0C
00095F03 E701                       	dc.b	smpsNoAttack, $01
00095F05 E112                       	smpsAlterNote       $12
00095F07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F0B E10C                       	smpsAlterNote       $0C
00095F0D E701                       	dc.b	smpsNoAttack, $01
00095F0F E109                       	smpsAlterNote       $09
00095F11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F15 E10F                       	smpsAlterNote       $0F
00095F17 E701                       	dc.b	smpsNoAttack, $01
00095F19 E113                       	smpsAlterNote       $13
00095F1B E701                       	dc.b	smpsNoAttack, $01
00095F1D E112                       	smpsAlterNote       $12
00095F1F E701                       	dc.b	smpsNoAttack, $01
00095F21 E10C                       	smpsAlterNote       $0C
00095F23 E701                       	dc.b	smpsNoAttack, $01
00095F25 E108                       	smpsAlterNote       $08
00095F27 E701                       	dc.b	smpsNoAttack, $01
00095F29 E10C                       	smpsAlterNote       $0C
00095F2B E701                       	dc.b	smpsNoAttack, $01
00095F2D E10F                       	smpsAlterNote       $0F
00095F2F E701                       	dc.b	smpsNoAttack, $01
00095F31 E113                       	smpsAlterNote       $13
00095F33 E701                       	dc.b	smpsNoAttack, $01
00095F35 E10F                       	smpsAlterNote       $0F
00095F37 E701                       	dc.b	smpsNoAttack, $01
00095F39 E109                       	smpsAlterNote       $09
00095F3B E701                       	dc.b	smpsNoAttack, $01
00095F3D E108                       	smpsAlterNote       $08
00095F3F E701                       	dc.b	smpsNoAttack, $01
00095F41 E10C                       	smpsAlterNote       $0C
00095F43 E701                       	dc.b	smpsNoAttack, $01
00095F45 E112                       	smpsAlterNote       $12
00095F47 E701                       	dc.b	smpsNoAttack, $01
00095F49 E113                       	smpsAlterNote       $13
00095F4B 800F                       	dc.b	nRst, $0F
00095F4D E10B                       	smpsAlterNote       $0B
00095F4F BF03                       	dc.b	nD5, $03
00095F51 E10C                       	smpsAlterNote       $0C
00095F53 C103 8001                  	dc.b	nE5, $03, nRst, $01
00095F57 E10D                       	smpsAlterNote       $0D
00095F59 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00095F61 E10B                       	smpsAlterNote       $0B
00095F63 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00095F6D E110                       	smpsAlterNote       $10
00095F6F C704                       	dc.b	nBb5, $04
00095F71 E10F                       	smpsAlterNote       $0F
00095F73 C604 8001                  	dc.b	nA5, $04, nRst, $01
00095F77 E10D                       	smpsAlterNote       $0D
00095F79 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00095F7F E109                       	smpsAlterNote       $09
00095F81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F85 E10F                       	smpsAlterNote       $0F
00095F87 E701                       	dc.b	smpsNoAttack, $01
00095F89 E112                       	smpsAlterNote       $12
00095F8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F8F E10C                       	smpsAlterNote       $0C
00095F91 E701                       	dc.b	smpsNoAttack, $01
00095F93 E108                       	smpsAlterNote       $08
00095F95 E701                       	dc.b	smpsNoAttack, $01
00095F97 E109                       	smpsAlterNote       $09
00095F99 E701                       	dc.b	smpsNoAttack, $01
00095F9B E10F                       	smpsAlterNote       $0F
00095F9D E701                       	dc.b	smpsNoAttack, $01
00095F9F E113                       	smpsAlterNote       $13
00095FA1 E701                       	dc.b	smpsNoAttack, $01
00095FA3 E10F                       	smpsAlterNote       $0F
00095FA5 E701                       	dc.b	smpsNoAttack, $01
00095FA7 E10C                       	smpsAlterNote       $0C
00095FA9 E701                       	dc.b	smpsNoAttack, $01
00095FAB E108                       	smpsAlterNote       $08
00095FAD E701                       	dc.b	smpsNoAttack, $01
00095FAF E10C                       	smpsAlterNote       $0C
00095FB1 E701                       	dc.b	smpsNoAttack, $01
00095FB3 E112                       	smpsAlterNote       $12
00095FB5 E701                       	dc.b	smpsNoAttack, $01
00095FB7 E113                       	smpsAlterNote       $13
00095FB9 E701                       	dc.b	smpsNoAttack, $01
00095FBB E10F                       	smpsAlterNote       $0F
00095FBD E701                       	dc.b	smpsNoAttack, $01
00095FBF E109                       	smpsAlterNote       $09
00095FC1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FC5 E10C                       	smpsAlterNote       $0C
00095FC7 E701                       	dc.b	smpsNoAttack, $01
00095FC9 E112                       	smpsAlterNote       $12
00095FCB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FCF E10C                       	smpsAlterNote       $0C
00095FD1 E701                       	dc.b	smpsNoAttack, $01
00095FD3 E109                       	smpsAlterNote       $09
00095FD5 E701                       	dc.b	smpsNoAttack, $01
00095FD7 E10D                       	smpsAlterNote       $0D
00095FD9 C401 8001                  	dc.b	nG5, $01, nRst, $01
00095FDD E10F                       	smpsAlterNote       $0F
00095FDF C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00095FE9 E10D                       	smpsAlterNote       $0D
00095FEB C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00095FF1 E10B                       	smpsAlterNote       $0B
00095FF3 BF0D                       	dc.b	nD5, $0D
00095FF5 E108                       	smpsAlterNote       $08
00095FF7 E701                       	dc.b	smpsNoAttack, $01
00095FF9 E104                       	smpsAlterNote       $04
00095FFB E701                       	dc.b	smpsNoAttack, $01
00095FFD E108                       	smpsAlterNote       $08
00095FFF E701                       	dc.b	smpsNoAttack, $01
00096001 E10B                       	smpsAlterNote       $0B
00096003 E701                       	dc.b	smpsNoAttack, $01
00096005 E10F                       	smpsAlterNote       $0F
00096007 E701                       	dc.b	smpsNoAttack, $01
00096009 E10B                       	smpsAlterNote       $0B
0009600B E701                       	dc.b	smpsNoAttack, $01
0009600D E105                       	smpsAlterNote       $05
0009600F E701                       	dc.b	smpsNoAttack, $01
00096011 E104                       	smpsAlterNote       $04
00096013 E701                       	dc.b	smpsNoAttack, $01
00096015 E108                       	smpsAlterNote       $08
00096017 E701                       	dc.b	smpsNoAttack, $01
00096019 E10E                       	smpsAlterNote       $0E
0009601B E701                       	dc.b	smpsNoAttack, $01
0009601D E10F                       	smpsAlterNote       $0F
0009601F 8001                       	dc.b	nRst, $01
00096021 E10C                       	smpsAlterNote       $0C
00096023 C101                       	dc.b	nE5, $01
00096025 E10D                       	smpsAlterNote       $0D
00096027 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0009602D E10F                       	smpsAlterNote       $0F
0009602F C606 8001                  	dc.b	nA5, $06, nRst, $01
00096033 E10C                       	smpsAlterNote       $0C
00096035 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00096039 E10D                       	smpsAlterNote       $0D
0009603B CE06 8001                  	dc.b	nF6, $06, nRst, $01
0009603F E10C                       	smpsAlterNote       $0C
00096041 CD03                       	dc.b	nE6, $03
00096043 E10A                       	smpsAlterNote       $0A
00096045 C903 8001                  	dc.b	nC6, $03, nRst, $01
00096049 E10D                       	smpsAlterNote       $0D
0009604B C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00096053 E109                       	smpsAlterNote       $09
00096055 E701                       	dc.b	smpsNoAttack, $01
00096057 E10D                       	smpsAlterNote       $0D
00096059 E701                       	dc.b	smpsNoAttack, $01
0009605B E110                       	smpsAlterNote       $10
0009605D E701                       	dc.b	smpsNoAttack, $01
0009605F E114                       	smpsAlterNote       $14
00096061 E701                       	dc.b	smpsNoAttack, $01
00096063 E110                       	smpsAlterNote       $10
00096065 E701                       	dc.b	smpsNoAttack, $01
00096067 E10A                       	smpsAlterNote       $0A
00096069 E701                       	dc.b	smpsNoAttack, $01
0009606B E109                       	smpsAlterNote       $09
0009606D E701                       	dc.b	smpsNoAttack, $01
0009606F E10D                       	smpsAlterNote       $0D
00096071 E701                       	dc.b	smpsNoAttack, $01
00096073 E113                       	smpsAlterNote       $13
00096075 E701                       	dc.b	smpsNoAttack, $01
00096077 E114                       	smpsAlterNote       $14
00096079 8001                       	dc.b	nRst, $01
0009607B E10F                       	smpsAlterNote       $0F
0009607D C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00096083 E10C                       	smpsAlterNote       $0C
00096085 E701                       	dc.b	smpsNoAttack, $01
00096087 E108                       	smpsAlterNote       $08
00096089 E701                       	dc.b	smpsNoAttack, $01
0009608B E10C                       	smpsAlterNote       $0C
0009608D E701                       	dc.b	smpsNoAttack, $01
0009608F E112                       	smpsAlterNote       $12
00096091 E701                       	dc.b	smpsNoAttack, $01
00096093 E113                       	smpsAlterNote       $13
00096095 E701                       	dc.b	smpsNoAttack, $01
00096097 E10F                       	smpsAlterNote       $0F
00096099 E701                       	dc.b	smpsNoAttack, $01
0009609B E109                       	smpsAlterNote       $09
0009609D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960A1 E10C                       	smpsAlterNote       $0C
000960A3 E701                       	dc.b	smpsNoAttack, $01
000960A5 E112                       	smpsAlterNote       $12
000960A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960AB E10C                       	smpsAlterNote       $0C
000960AD E701                       	dc.b	smpsNoAttack, $01
000960AF E109                       	smpsAlterNote       $09
000960B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960B5 E10F                       	smpsAlterNote       $0F
000960B7 E701                       	dc.b	smpsNoAttack, $01
000960B9 E113                       	smpsAlterNote       $13
000960BB E701                       	dc.b	smpsNoAttack, $01
000960BD E112                       	smpsAlterNote       $12
000960BF E701                       	dc.b	smpsNoAttack, $01
000960C1 E10C                       	smpsAlterNote       $0C
000960C3 E701                       	dc.b	smpsNoAttack, $01
000960C5 E108                       	smpsAlterNote       $08
000960C7 E701                       	dc.b	smpsNoAttack, $01
000960C9 E10C                       	smpsAlterNote       $0C
000960CB E701                       	dc.b	smpsNoAttack, $01
000960CD E10F                       	smpsAlterNote       $0F
000960CF E701                       	dc.b	smpsNoAttack, $01
000960D1 E113                       	smpsAlterNote       $13
000960D3 E701                       	dc.b	smpsNoAttack, $01
000960D5 E10F                       	smpsAlterNote       $0F
000960D7 E701                       	dc.b	smpsNoAttack, $01
000960D9 E109                       	smpsAlterNote       $09
000960DB E701                       	dc.b	smpsNoAttack, $01
000960DD E108                       	smpsAlterNote       $08
000960DF E701                       	dc.b	smpsNoAttack, $01
000960E1 E10C                       	smpsAlterNote       $0C
000960E3 E701                       	dc.b	smpsNoAttack, $01
000960E5 E112                       	smpsAlterNote       $12
000960E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960EB E10F                       	smpsAlterNote       $0F
000960ED E701                       	dc.b	smpsNoAttack, $01
000960EF E109                       	smpsAlterNote       $09
000960F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960F5 E10F                       	smpsAlterNote       $0F
000960F7 E701                       	dc.b	smpsNoAttack, $01
000960F9 E113                       	smpsAlterNote       $13
000960FB E701                       	dc.b	smpsNoAttack, $01
000960FD E112                       	smpsAlterNote       $12
000960FF E701                       	dc.b	smpsNoAttack, $01
00096101 E10C                       	smpsAlterNote       $0C
00096103 E701                       	dc.b	smpsNoAttack, $01
00096105 E108                       	smpsAlterNote       $08
00096107 E701                       	dc.b	smpsNoAttack, $01
00096109 E10C                       	smpsAlterNote       $0C
0009610B E701                       	dc.b	smpsNoAttack, $01
0009610D E10F                       	smpsAlterNote       $0F
0009610F E701                       	dc.b	smpsNoAttack, $01
00096111 E113                       	smpsAlterNote       $13
00096113 E701                       	dc.b	smpsNoAttack, $01
00096115 E10F                       	smpsAlterNote       $0F
00096117 E701                       	dc.b	smpsNoAttack, $01
00096119 E109                       	smpsAlterNote       $09
0009611B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009611F E10F                       	smpsAlterNote       $0F
00096121 C60D                       	dc.b	nA5, $0D
00096123 E109                       	smpsAlterNote       $09
00096125 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096129 E10C                       	smpsAlterNote       $0C
0009612B E701                       	dc.b	smpsNoAttack, $01
0009612D E112                       	smpsAlterNote       $12
0009612F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096133 E10C                       	smpsAlterNote       $0C
00096135 E701                       	dc.b	smpsNoAttack, $01
00096137 E109                       	smpsAlterNote       $09
00096139 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009613D E10F                       	smpsAlterNote       $0F
0009613F E701                       	dc.b	smpsNoAttack, $01
00096141 E113                       	smpsAlterNote       $13
00096143 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096149 E10D                       	smpsAlterNote       $0D
0009614B C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00096153 E10C                       	smpsAlterNote       $0C
00096155 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0009615B E6FF                       	smpsAlterVol        $FF
0009615D E10B                       	smpsAlterNote       $0B
0009615F BF03 8001                  	dc.b	nD5, $03, nRst, $01
00096163 E10C                       	smpsAlterNote       $0C
00096165 C103                       	dc.b	nE5, $03
00096167 E10D                       	smpsAlterNote       $0D
00096169 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00096173 E10B                       	smpsAlterNote       $0B
00096175 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00096179 E107                       	smpsAlterNote       $07
0009617B E701                       	dc.b	smpsNoAttack, $01
0009617D E104                       	smpsAlterNote       $04
0009617F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096183 E10A                       	smpsAlterNote       $0A
00096185 E701                       	dc.b	smpsNoAttack, $01
00096187 E10D                       	smpsAlterNote       $0D
00096189 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009618D E107                       	smpsAlterNote       $07
0009618F E701                       	dc.b	smpsNoAttack, $01
00096191 E104                       	smpsAlterNote       $04
00096193 8001                       	dc.b	nRst, $01
00096195 E110                       	smpsAlterNote       $10
00096197 C703                       	dc.b	nBb5, $03
00096199 E10F                       	smpsAlterNote       $0F
0009619B C603 8001                  	dc.b	nA5, $03, nRst, $01
0009619F E10D                       	smpsAlterNote       $0D
000961A1 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000961A5 E10C                       	smpsAlterNote       $0C
000961A7 E701                       	dc.b	smpsNoAttack, $01
000961A9 E108                       	smpsAlterNote       $08
000961AB E701                       	dc.b	smpsNoAttack, $01
000961AD E109                       	smpsAlterNote       $09
000961AF E701                       	dc.b	smpsNoAttack, $01
000961B1 E10F                       	smpsAlterNote       $0F
000961B3 E701                       	dc.b	smpsNoAttack, $01
000961B5 E113                       	smpsAlterNote       $13
000961B7 E701                       	dc.b	smpsNoAttack, $01
000961B9 E10F                       	smpsAlterNote       $0F
000961BB E701                       	dc.b	smpsNoAttack, $01
000961BD E10C                       	smpsAlterNote       $0C
000961BF E701                       	dc.b	smpsNoAttack, $01
000961C1 E108                       	smpsAlterNote       $08
000961C3 E701                       	dc.b	smpsNoAttack, $01
000961C5 E10C                       	smpsAlterNote       $0C
000961C7 E701                       	dc.b	smpsNoAttack, $01
000961C9 E112                       	smpsAlterNote       $12
000961CB E701                       	dc.b	smpsNoAttack, $01
000961CD E113                       	smpsAlterNote       $13
000961CF E701                       	dc.b	smpsNoAttack, $01
000961D1 E10F                       	smpsAlterNote       $0F
000961D3 E701                       	dc.b	smpsNoAttack, $01
000961D5 E109                       	smpsAlterNote       $09
000961D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961DB E10C                       	smpsAlterNote       $0C
000961DD E701                       	dc.b	smpsNoAttack, $01
000961DF E112                       	smpsAlterNote       $12
000961E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961E5 E10C                       	smpsAlterNote       $0C
000961E7 E701                       	dc.b	smpsNoAttack, $01
000961E9 E109                       	smpsAlterNote       $09
000961EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961EF E10F                       	smpsAlterNote       $0F
000961F1 E701                       	dc.b	smpsNoAttack, $01
000961F3 E113                       	smpsAlterNote       $13
000961F5 E701                       	dc.b	smpsNoAttack, $01
000961F7 E112                       	smpsAlterNote       $12
000961F9 E701                       	dc.b	smpsNoAttack, $01
000961FB E10C                       	smpsAlterNote       $0C
000961FD E701                       	dc.b	smpsNoAttack, $01
000961FF E108                       	smpsAlterNote       $08
00096201 E701                       	dc.b	smpsNoAttack, $01
00096203 E10C                       	smpsAlterNote       $0C
00096205 E701                       	dc.b	smpsNoAttack, $01
00096207 E10F                       	smpsAlterNote       $0F
00096209 E701                       	dc.b	smpsNoAttack, $01
0009620B E113                       	smpsAlterNote       $13
0009620D E701                       	dc.b	smpsNoAttack, $01
0009620F E10F                       	smpsAlterNote       $0F
00096211 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00096215 E110                       	smpsAlterNote       $10
00096217 BB03                       	dc.b	nBb4, $03
00096219 E10F                       	smpsAlterNote       $0F
0009621B BA06 8001                  	dc.b	nA4, $06, nRst, $01
0009621F E10B                       	smpsAlterNote       $0B
00096221 BF03                       	dc.b	nD5, $03
00096223 E10C                       	smpsAlterNote       $0C
00096225 C103 8001                  	dc.b	nE5, $03, nRst, $01
00096229 E10D                       	smpsAlterNote       $0D
0009622B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00096235 E10B                       	smpsAlterNote       $0B
00096237 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00096243 E110                       	smpsAlterNote       $10
00096245 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00096249 E10F                       	smpsAlterNote       $0F
0009624B C604                       	dc.b	nA5, $04
0009624D E10D                       	smpsAlterNote       $0D
0009624F C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00096255 E109                       	smpsAlterNote       $09
00096257 E701                       	dc.b	smpsNoAttack, $01
00096259 E108                       	smpsAlterNote       $08
0009625B E701                       	dc.b	smpsNoAttack, $01
0009625D E10C                       	smpsAlterNote       $0C
0009625F E701                       	dc.b	smpsNoAttack, $01
00096261 E112                       	smpsAlterNote       $12
00096263 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096267 E10F                       	smpsAlterNote       $0F
00096269 E701                       	dc.b	smpsNoAttack, $01
0009626B E109                       	smpsAlterNote       $09
0009626D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096271 E10F                       	smpsAlterNote       $0F
00096273 E701                       	dc.b	smpsNoAttack, $01
00096275 E112                       	smpsAlterNote       $12
00096277 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009627B E10C                       	smpsAlterNote       $0C
0009627D E701                       	dc.b	smpsNoAttack, $01
0009627F E108                       	smpsAlterNote       $08
00096281 E701                       	dc.b	smpsNoAttack, $01
00096283 E109                       	smpsAlterNote       $09
00096285 E701                       	dc.b	smpsNoAttack, $01
00096287 E10F                       	smpsAlterNote       $0F
00096289 E701                       	dc.b	smpsNoAttack, $01
0009628B E113                       	smpsAlterNote       $13
0009628D E701                       	dc.b	smpsNoAttack, $01
0009628F E10F                       	smpsAlterNote       $0F
00096291 E701                       	dc.b	smpsNoAttack, $01
00096293 E10C                       	smpsAlterNote       $0C
00096295 E701                       	dc.b	smpsNoAttack, $01
00096297 E108                       	smpsAlterNote       $08
00096299 E701                       	dc.b	smpsNoAttack, $01
0009629B E10C                       	smpsAlterNote       $0C
0009629D E701                       	dc.b	smpsNoAttack, $01
0009629F E112                       	smpsAlterNote       $12
000962A1 E701                       	dc.b	smpsNoAttack, $01
000962A3 E113                       	smpsAlterNote       $13
000962A5 E701                       	dc.b	smpsNoAttack, $01
000962A7 E10F                       	smpsAlterNote       $0F
000962A9 E701                       	dc.b	smpsNoAttack, $01
000962AB E109                       	smpsAlterNote       $09
000962AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962B1 E10C                       	smpsAlterNote       $0C
000962B3 E701                       	dc.b	smpsNoAttack, $01
000962B5 E112                       	smpsAlterNote       $12
000962B7 E701                       	dc.b	smpsNoAttack, $01
000962B9 E113                       	smpsAlterNote       $13
000962BB 8001                       	dc.b	nRst, $01
000962BD E10F                       	smpsAlterNote       $0F
000962BF C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
000962CB C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
000962D3 E10D                       	smpsAlterNote       $0D
000962D5 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000962DB E10B                       	smpsAlterNote       $0B
000962DD BF0D                       	dc.b	nD5, $0D
000962DF E108                       	smpsAlterNote       $08
000962E1 E701                       	dc.b	smpsNoAttack, $01
000962E3 E104                       	smpsAlterNote       $04
000962E5 E701                       	dc.b	smpsNoAttack, $01
000962E7 E105                       	smpsAlterNote       $05
000962E9 E701                       	dc.b	smpsNoAttack, $01
000962EB E10B                       	smpsAlterNote       $0B
000962ED E701                       	dc.b	smpsNoAttack, $01
000962EF E10F                       	smpsAlterNote       $0F
000962F1 E701                       	dc.b	smpsNoAttack, $01
000962F3 E10B                       	smpsAlterNote       $0B
000962F5 E701                       	dc.b	smpsNoAttack, $01
000962F7 E108                       	smpsAlterNote       $08
000962F9 E701                       	dc.b	smpsNoAttack, $01
000962FB E104                       	smpsAlterNote       $04
000962FD E701                       	dc.b	smpsNoAttack, $01
000962FF E108                       	smpsAlterNote       $08
00096301 E701                       	dc.b	smpsNoAttack, $01
00096303 E10E                       	smpsAlterNote       $0E
00096305 E701                       	dc.b	smpsNoAttack, $01
00096307 E10F                       	smpsAlterNote       $0F
00096309 E701                       	dc.b	smpsNoAttack, $01
0009630B E10C                       	smpsAlterNote       $0C
0009630D C101                       	dc.b	nE5, $01
0009630F E10D                       	smpsAlterNote       $0D
00096311 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00096319 E10F                       	smpsAlterNote       $0F
0009631B C607                       	dc.b	nA5, $07
0009631D E10C                       	smpsAlterNote       $0C
0009631F CD07                       	dc.b	nE6, $07
00096321 E10D                       	smpsAlterNote       $0D
00096323 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00096327 E10C                       	smpsAlterNote       $0C
00096329 CD03                       	dc.b	nE6, $03
0009632B E10A                       	smpsAlterNote       $0A
0009632D C903 8001                  	dc.b	nC6, $03, nRst, $01
00096331 E10D                       	smpsAlterNote       $0D
00096333 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00096339 E10A                       	smpsAlterNote       $0A
0009633B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009633F E110                       	smpsAlterNote       $10
00096341 E701                       	dc.b	smpsNoAttack, $01
00096343 E114                       	smpsAlterNote       $14
00096345 E701                       	dc.b	smpsNoAttack, $01
00096347 E113                       	smpsAlterNote       $13
00096349 E701                       	dc.b	smpsNoAttack, $01
0009634B E10D                       	smpsAlterNote       $0D
0009634D E701                       	dc.b	smpsNoAttack, $01
0009634F E109                       	smpsAlterNote       $09
00096351 E701                       	dc.b	smpsNoAttack, $01
00096353 E10D                       	smpsAlterNote       $0D
00096355 E701                       	dc.b	smpsNoAttack, $01
00096357 E110                       	smpsAlterNote       $10
00096359 E701                       	dc.b	smpsNoAttack, $01
0009635B E114                       	smpsAlterNote       $14
0009635D E701                       	dc.b	smpsNoAttack, $01
0009635F E10F                       	smpsAlterNote       $0F
00096361 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00096365 E10C                       	smpsAlterNote       $0C
00096367 E701                       	dc.b	smpsNoAttack, $01
00096369 E108                       	smpsAlterNote       $08
0009636B E701                       	dc.b	smpsNoAttack, $01
0009636D E10C                       	smpsAlterNote       $0C
0009636F E701                       	dc.b	smpsNoAttack, $01
00096371 E10F                       	smpsAlterNote       $0F
00096373 E701                       	dc.b	smpsNoAttack, $01
00096375 E113                       	smpsAlterNote       $13
00096377 E701                       	dc.b	smpsNoAttack, $01
00096379 E10F                       	smpsAlterNote       $0F
0009637B E701                       	dc.b	smpsNoAttack, $01
0009637D E109                       	smpsAlterNote       $09
0009637F E701                       	dc.b	smpsNoAttack, $01
00096381 E108                       	smpsAlterNote       $08
00096383 E701                       	dc.b	smpsNoAttack, $01
00096385 E10C                       	smpsAlterNote       $0C
00096387 E701                       	dc.b	smpsNoAttack, $01
00096389 E112                       	smpsAlterNote       $12
0009638B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009638F E10F                       	smpsAlterNote       $0F
00096391 E701                       	dc.b	smpsNoAttack, $01
00096393 E109                       	smpsAlterNote       $09
00096395 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096399 E10F                       	smpsAlterNote       $0F
0009639B E701                       	dc.b	smpsNoAttack, $01
0009639D E112                       	smpsAlterNote       $12
0009639F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963A3 E10C                       	smpsAlterNote       $0C
000963A5 E701                       	dc.b	smpsNoAttack, $01
000963A7 E108                       	smpsAlterNote       $08
000963A9 E701                       	dc.b	smpsNoAttack, $01
000963AB E109                       	smpsAlterNote       $09
000963AD E701                       	dc.b	smpsNoAttack, $01
000963AF E10F                       	smpsAlterNote       $0F
000963B1 E701                       	dc.b	smpsNoAttack, $01
000963B3 E113                       	smpsAlterNote       $13
000963B5 E701                       	dc.b	smpsNoAttack, $01
000963B7 E10F                       	smpsAlterNote       $0F
000963B9 E701                       	dc.b	smpsNoAttack, $01
000963BB E10C                       	smpsAlterNote       $0C
000963BD E701                       	dc.b	smpsNoAttack, $01
000963BF E108                       	smpsAlterNote       $08
000963C1 E701                       	dc.b	smpsNoAttack, $01
000963C3 E10C                       	smpsAlterNote       $0C
000963C5 E701                       	dc.b	smpsNoAttack, $01
000963C7 E112                       	smpsAlterNote       $12
000963C9 E701                       	dc.b	smpsNoAttack, $01
000963CB E113                       	smpsAlterNote       $13
000963CD E701                       	dc.b	smpsNoAttack, $01
000963CF E10F                       	smpsAlterNote       $0F
000963D1 E701                       	dc.b	smpsNoAttack, $01
000963D3 E109                       	smpsAlterNote       $09
000963D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963D9 E10C                       	smpsAlterNote       $0C
000963DB E701                       	dc.b	smpsNoAttack, $01
000963DD E112                       	smpsAlterNote       $12
000963DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963E3 E10C                       	smpsAlterNote       $0C
000963E5 E701                       	dc.b	smpsNoAttack, $01
000963E7 E109                       	smpsAlterNote       $09
000963E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963ED E10F                       	smpsAlterNote       $0F
000963EF E701                       	dc.b	smpsNoAttack, $01
000963F1 E113                       	smpsAlterNote       $13
000963F3 E701                       	dc.b	smpsNoAttack, $01
000963F5 E112                       	smpsAlterNote       $12
000963F7 E701                       	dc.b	smpsNoAttack, $01
000963F9 E10C                       	smpsAlterNote       $0C
000963FB E701                       	dc.b	smpsNoAttack, $01
000963FD E109                       	smpsAlterNote       $09
000963FF 8001                       	dc.b	nRst, $01
00096401 E10F                       	smpsAlterNote       $0F
00096403 C60D                       	dc.b	nA5, $0D
00096405 E10C                       	smpsAlterNote       $0C
00096407 E701                       	dc.b	smpsNoAttack, $01
00096409 E108                       	smpsAlterNote       $08
0009640B E701                       	dc.b	smpsNoAttack, $01
0009640D E10C                       	smpsAlterNote       $0C
0009640F E701                       	dc.b	smpsNoAttack, $01
00096411 E112                       	smpsAlterNote       $12
00096413 E701                       	dc.b	smpsNoAttack, $01
00096415 E113                       	smpsAlterNote       $13
00096417 E701                       	dc.b	smpsNoAttack, $01
00096419 E10F                       	smpsAlterNote       $0F
0009641B E701                       	dc.b	smpsNoAttack, $01
0009641D E109                       	smpsAlterNote       $09
0009641F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096423 E10C                       	smpsAlterNote       $0C
00096425 E701                       	dc.b	smpsNoAttack, $01
00096427 E112                       	smpsAlterNote       $12
00096429 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009642D E10C                       	smpsAlterNote       $0C
0009642F E701                       	dc.b	smpsNoAttack, $01
00096431 E109                       	smpsAlterNote       $09
00096433 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096437 E10F                       	smpsAlterNote       $0F
00096439 E701                       	dc.b	smpsNoAttack, $01
0009643B E113                       	smpsAlterNote       $13
0009643D E701                       	dc.b	smpsNoAttack, $01
0009643F E112                       	smpsAlterNote       $12
00096441 E701                       	dc.b	smpsNoAttack, $01
00096443 E10C                       	smpsAlterNote       $0C
00096445 E701                       	dc.b	smpsNoAttack, $01
00096447 E108                       	smpsAlterNote       $08
00096449 E701                       	dc.b	smpsNoAttack, $01
0009644B E10C                       	smpsAlterNote       $0C
0009644D E701                       	dc.b	smpsNoAttack, $01
0009644F E10F                       	smpsAlterNote       $0F
00096451 E701                       	dc.b	smpsNoAttack, $01
00096453 E113                       	smpsAlterNote       $13
00096455 E701                       	dc.b	smpsNoAttack, $01
00096457 E10F                       	smpsAlterNote       $0F
00096459 E701                       	dc.b	smpsNoAttack, $01
0009645B E109                       	smpsAlterNote       $09
0009645D E701                       	dc.b	smpsNoAttack, $01
0009645F E108                       	smpsAlterNote       $08
00096461 E701                       	dc.b	smpsNoAttack, $01
00096463 E10C                       	smpsAlterNote       $0C
00096465 E701                       	dc.b	smpsNoAttack, $01
00096467 E112                       	smpsAlterNote       $12
00096469 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009646D E10F                       	smpsAlterNote       $0F
0009646F E701                       	dc.b	smpsNoAttack, $01
00096471 E109                       	smpsAlterNote       $09
00096473 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096477 E10F                       	smpsAlterNote       $0F
00096479 E701                       	dc.b	smpsNoAttack, $01
0009647B E112                       	smpsAlterNote       $12
0009647D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096481 E10C                       	smpsAlterNote       $0C
00096483 E701                       	dc.b	smpsNoAttack, $01
00096485 E108                       	smpsAlterNote       $08
00096487 E701                       	dc.b	smpsNoAttack, $01
00096489 E10C                       	smpsAlterNote       $0C
0009648B E701                       	dc.b	smpsNoAttack, $01
0009648D E10F                       	smpsAlterNote       $0F
0009648F E701                       	dc.b	smpsNoAttack, $01
00096491 E113                       	smpsAlterNote       $13
00096493 E701                       	dc.b	smpsNoAttack, $01
00096495 E10F                       	smpsAlterNote       $0F
00096497 E701                       	dc.b	smpsNoAttack, $01
00096499 E109                       	smpsAlterNote       $09
0009649B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000964A1 E601                       	smpsAlterVol        $01
000964A3 E10F                       	smpsAlterNote       $0F
000964A5 C604                       	dc.b	nA5, $04
000964A7 E10D                       	smpsAlterNote       $0D
000964A9 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000964AF E10B                       	smpsAlterNote       $0B
000964B1 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
000964B9 E10F                       	smpsAlterNote       $0F
000964BB C604 8001                  	dc.b	nA5, $04, nRst, $01
000964BF E10D                       	smpsAlterNote       $0D
000964C1 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000964C7 E10C                       	smpsAlterNote       $0C
000964C9 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
000964CF E10A                       	smpsAlterNote       $0A
000964D1 C904 8001                  	dc.b	nC6, $04, nRst, $01
000964D5 E110                       	smpsAlterNote       $10
000964D7 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000964DB E10F                       	smpsAlterNote       $0F
000964DD C604                       	dc.b	nA5, $04
000964DF E10D                       	smpsAlterNote       $0D
000964E1 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000964ED E109                       	smpsAlterNote       $09
000964EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964F3 E10F                       	smpsAlterNote       $0F
000964F5 E701                       	dc.b	smpsNoAttack, $01
000964F7 E112                       	smpsAlterNote       $12
000964F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964FD E10C                       	smpsAlterNote       $0C
000964FF E701                       	dc.b	smpsNoAttack, $01
00096501 E108                       	smpsAlterNote       $08
00096503 E701                       	dc.b	smpsNoAttack, $01
00096505 E10C                       	smpsAlterNote       $0C
00096507 E701                       	dc.b	smpsNoAttack, $01
00096509 E10F                       	smpsAlterNote       $0F
0009650B E701                       	dc.b	smpsNoAttack, $01
0009650D E113                       	smpsAlterNote       $13
0009650F E701                       	dc.b	smpsNoAttack, $01
00096511 E10D                       	smpsAlterNote       $0D
00096513 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00096519 E10C                       	smpsAlterNote       $0C
0009651B C10D                       	dc.b	nE5, $0D
0009651D E109                       	smpsAlterNote       $09
0009651F E701                       	dc.b	smpsNoAttack, $01
00096521 E105                       	smpsAlterNote       $05
00096523 E701                       	dc.b	smpsNoAttack, $01
00096525 E106                       	smpsAlterNote       $06
00096527 E701                       	dc.b	smpsNoAttack, $01
00096529 E10C                       	smpsAlterNote       $0C
0009652B E701                       	dc.b	smpsNoAttack, $01
0009652D E110                       	smpsAlterNote       $10
0009652F E701                       	dc.b	smpsNoAttack, $01
00096531 E10C                       	smpsAlterNote       $0C
00096533 E701                       	dc.b	smpsNoAttack, $01
00096535 E109                       	smpsAlterNote       $09
00096537 E701                       	dc.b	smpsNoAttack, $01
00096539 E105                       	smpsAlterNote       $05
0009653B E701                       	dc.b	smpsNoAttack, $01
0009653D E109                       	smpsAlterNote       $09
0009653F E701                       	dc.b	smpsNoAttack, $01
00096541 E10F                       	smpsAlterNote       $0F
00096543 E701                       	dc.b	smpsNoAttack, $01
00096545 E110                       	smpsAlterNote       $10
00096547 E701                       	dc.b	smpsNoAttack, $01
00096549 E10C                       	smpsAlterNote       $0C
0009654B E701                       	dc.b	smpsNoAttack, $01
0009654D E106                       	smpsAlterNote       $06
0009654F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096553 E109                       	smpsAlterNote       $09
00096555 E701                       	dc.b	smpsNoAttack, $01
00096557 E10F                       	smpsAlterNote       $0F
00096559 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009655D E109                       	smpsAlterNote       $09
0009655F E701                       	dc.b	smpsNoAttack, $01
00096561 E106                       	smpsAlterNote       $06
00096563 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096567 E10C                       	smpsAlterNote       $0C
00096569 E701                       	dc.b	smpsNoAttack, $01
0009656B E110                       	smpsAlterNote       $10
0009656D E701                       	dc.b	smpsNoAttack, $01
0009656F E10F                       	smpsAlterNote       $0F
00096571 E701                       	dc.b	smpsNoAttack, $01
00096573 E109                       	smpsAlterNote       $09
00096575 E701                       	dc.b	smpsNoAttack, $01
00096577 E105                       	smpsAlterNote       $05
00096579 E701                       	dc.b	smpsNoAttack, $01
0009657B E109                       	smpsAlterNote       $09
0009657D E701                       	dc.b	smpsNoAttack, $01
0009657F E10C                       	smpsAlterNote       $0C
00096581 E701                       	dc.b	smpsNoAttack, $01
00096583 E110                       	smpsAlterNote       $10
00096585 E701                       	dc.b	smpsNoAttack, $01
00096587 E10C                       	smpsAlterNote       $0C
00096589 E701                       	dc.b	smpsNoAttack, $01
0009658B E106                       	smpsAlterNote       $06
0009658D E701                       	dc.b	smpsNoAttack, $01
0009658F E105                       	smpsAlterNote       $05
00096591 E701                       	dc.b	smpsNoAttack, $01
00096593 E109                       	smpsAlterNote       $09
00096595 E701                       	dc.b	smpsNoAttack, $01
00096597 E10F                       	smpsAlterNote       $0F
00096599 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009659D E10C                       	smpsAlterNote       $0C
0009659F E701                       	dc.b	smpsNoAttack, $01
000965A1 E106                       	smpsAlterNote       $06
000965A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965A7 E10C                       	smpsAlterNote       $0C
000965A9 E701                       	dc.b	smpsNoAttack, $01
000965AB E10F                       	smpsAlterNote       $0F
000965AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965B1 E109                       	smpsAlterNote       $09
000965B3 E701                       	dc.b	smpsNoAttack, $01
000965B5 E105                       	smpsAlterNote       $05
000965B7 E701                       	dc.b	smpsNoAttack, $01
000965B9 E106                       	smpsAlterNote       $06
000965BB E701                       	dc.b	smpsNoAttack, $01
000965BD E10C                       	smpsAlterNote       $0C
000965BF E701                       	dc.b	smpsNoAttack, $01
000965C1 E110                       	smpsAlterNote       $10
000965C3 E701                       	dc.b	smpsNoAttack, $01
000965C5 E10C                       	smpsAlterNote       $0C
000965C7 E701                       	dc.b	smpsNoAttack, $01
000965C9 E109                       	smpsAlterNote       $09
000965CB E701                       	dc.b	smpsNoAttack, $01
000965CD E105                       	smpsAlterNote       $05
000965CF E701                       	dc.b	smpsNoAttack, $01
000965D1 E109                       	smpsAlterNote       $09
000965D3 E701                       	dc.b	smpsNoAttack, $01
000965D5 E10F                       	smpsAlterNote       $0F
000965D7 E701                       	dc.b	smpsNoAttack, $01
000965D9 E110                       	smpsAlterNote       $10
000965DB E701                       	dc.b	smpsNoAttack, $01
000965DD E10C                       	smpsAlterNote       $0C
000965DF E701                       	dc.b	smpsNoAttack, $01
000965E1 E106                       	smpsAlterNote       $06
000965E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965E7 E109                       	smpsAlterNote       $09
000965E9 E701                       	dc.b	smpsNoAttack, $01
000965EB E10F                       	smpsAlterNote       $0F
000965ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965F1 E109                       	smpsAlterNote       $09
000965F3 E701                       	dc.b	smpsNoAttack, $01
000965F5 E106                       	smpsAlterNote       $06
000965F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965FB E10C                       	smpsAlterNote       $0C
000965FD E701                       	dc.b	smpsNoAttack, $01
000965FF E110                       	smpsAlterNote       $10
00096601 E701                       	dc.b	smpsNoAttack, $01
00096603 E10F                       	smpsAlterNote       $0F
00096605 E701                       	dc.b	smpsNoAttack, $01
00096607 E109                       	smpsAlterNote       $09
00096609 E701                       	dc.b	smpsNoAttack, $01
0009660B E105                       	smpsAlterNote       $05
0009660D E701                       	dc.b	smpsNoAttack, $01
0009660F E109                       	smpsAlterNote       $09
00096611 E701                       	dc.b	smpsNoAttack, $01
00096613 E10C                       	smpsAlterNote       $0C
00096615 E701                       	dc.b	smpsNoAttack, $01
00096617 E110                       	smpsAlterNote       $10
00096619 E701                       	dc.b	smpsNoAttack, $01
0009661B E10C                       	smpsAlterNote       $0C
0009661D E701                       	dc.b	smpsNoAttack, $01
0009661F E106                       	smpsAlterNote       $06
00096621 E701                       	dc.b	smpsNoAttack, $01
00096623 E105                       	smpsAlterNote       $05
00096625 E701                       	dc.b	smpsNoAttack, $01
00096627 E109                       	smpsAlterNote       $09
00096629 E701                       	dc.b	smpsNoAttack, $01
0009662B E10F                       	smpsAlterNote       $0F
0009662D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096631 E109                       	smpsAlterNote       $09
00096633 E701                       	dc.b	smpsNoAttack, $01
00096635 E106                       	smpsAlterNote       $06
00096637 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009663B E10C                       	smpsAlterNote       $0C
0009663D E701                       	dc.b	smpsNoAttack, $01
0009663F E110                       	smpsAlterNote       $10
00096641 E701                       	dc.b	smpsNoAttack, $01
00096643 E10F                       	smpsAlterNote       $0F
00096645 E701                       	dc.b	smpsNoAttack, $01
00096647 E109                       	smpsAlterNote       $09
00096649 E701                       	dc.b	smpsNoAttack, $01
0009664B E105                       	smpsAlterNote       $05
0009664D E701                       	dc.b	smpsNoAttack, $01
0009664F E109                       	smpsAlterNote       $09
00096651 E701                       	dc.b	smpsNoAttack, $01
00096653 E10C                       	smpsAlterNote       $0C
00096655 E701                       	dc.b	smpsNoAttack, $01
00096657 E110                       	smpsAlterNote       $10
00096659 E701                       	dc.b	smpsNoAttack, $01
0009665B E10C                       	smpsAlterNote       $0C
0009665D E701                       	dc.b	smpsNoAttack, $01
0009665F E106                       	smpsAlterNote       $06
00096661 E701                       	dc.b	smpsNoAttack, $01
00096663 E105                       	smpsAlterNote       $05
00096665 E701                       	dc.b	smpsNoAttack, $01
00096667 E109                       	smpsAlterNote       $09
00096669 E701                       	dc.b	smpsNoAttack, $01
0009666B E10F                       	smpsAlterNote       $0F
0009666D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096671 E10C                       	smpsAlterNote       $0C
00096673 E701                       	dc.b	smpsNoAttack, $01
00096675 E106                       	smpsAlterNote       $06
00096677 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009667B E10C                       	smpsAlterNote       $0C
0009667D E701                       	dc.b	smpsNoAttack, $01
0009667F E10F                       	smpsAlterNote       $0F
00096681 E701                       	dc.b	smpsNoAttack, $01
00096683 E110                       	smpsAlterNote       $10
00096685 8001                       	dc.b	nRst, $01
00096687 E10F                       	smpsAlterNote       $0F
00096689 C604                       	dc.b	nA5, $04
0009668B E10D                       	smpsAlterNote       $0D
0009668D C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00096693 E10B                       	smpsAlterNote       $0B
00096695 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0009669B E10F                       	smpsAlterNote       $0F
0009669D C604 8001                  	dc.b	nA5, $04, nRst, $01
000966A1 E10D                       	smpsAlterNote       $0D
000966A3 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000966A9 E10C                       	smpsAlterNote       $0C
000966AB C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000966B1 E10A                       	smpsAlterNote       $0A
000966B3 C904                       	dc.b	nC6, $04
000966B5 E110                       	smpsAlterNote       $10
000966B7 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000966BB E10F                       	smpsAlterNote       $0F
000966BD C604                       	dc.b	nA5, $04
000966BF E10D                       	smpsAlterNote       $0D
000966C1 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000966CD E109                       	smpsAlterNote       $09
000966CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966D3 E10F                       	smpsAlterNote       $0F
000966D5 E701                       	dc.b	smpsNoAttack, $01
000966D7 E112                       	smpsAlterNote       $12
000966D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966DD E10C                       	smpsAlterNote       $0C
000966DF E701                       	dc.b	smpsNoAttack, $01
000966E1 E108                       	smpsAlterNote       $08
000966E3 E701                       	dc.b	smpsNoAttack, $01
000966E5 E109                       	smpsAlterNote       $09
000966E7 E701                       	dc.b	smpsNoAttack, $01
000966E9 E10F                       	smpsAlterNote       $0F
000966EB E701                       	dc.b	smpsNoAttack, $01
000966ED E113                       	smpsAlterNote       $13
000966EF E701                       	dc.b	smpsNoAttack, $01
000966F1 E10D                       	smpsAlterNote       $0D
000966F3 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000966F9 E10C                       	smpsAlterNote       $0C
000966FB C10D                       	dc.b	nE5, $0D
000966FD E109                       	smpsAlterNote       $09
000966FF E701                       	dc.b	smpsNoAttack, $01
00096701 E106                       	smpsAlterNote       $06
00096703 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096707 E10C                       	smpsAlterNote       $0C
00096709 E701                       	dc.b	smpsNoAttack, $01
0009670B E110                       	smpsAlterNote       $10
0009670D E701                       	dc.b	smpsNoAttack, $01
0009670F E10F                       	smpsAlterNote       $0F
00096711 E701                       	dc.b	smpsNoAttack, $01
00096713 E109                       	smpsAlterNote       $09
00096715 E701                       	dc.b	smpsNoAttack, $01
00096717 E105                       	smpsAlterNote       $05
00096719 E701                       	dc.b	smpsNoAttack, $01
0009671B E109                       	smpsAlterNote       $09
0009671D E701                       	dc.b	smpsNoAttack, $01
0009671F E10C                       	smpsAlterNote       $0C
00096721 E701                       	dc.b	smpsNoAttack, $01
00096723 E110                       	smpsAlterNote       $10
00096725 E701                       	dc.b	smpsNoAttack, $01
00096727 E10C                       	smpsAlterNote       $0C
00096729 E701                       	dc.b	smpsNoAttack, $01
0009672B E106                       	smpsAlterNote       $06
0009672D E701                       	dc.b	smpsNoAttack, $01
0009672F E105                       	smpsAlterNote       $05
00096731 E701                       	dc.b	smpsNoAttack, $01
00096733 E109                       	smpsAlterNote       $09
00096735 E701                       	dc.b	smpsNoAttack, $01
00096737 E10F                       	smpsAlterNote       $0F
00096739 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009673D E10C                       	smpsAlterNote       $0C
0009673F E701                       	dc.b	smpsNoAttack, $01
00096741 E106                       	smpsAlterNote       $06
00096743 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096747 E10C                       	smpsAlterNote       $0C
00096749 E701                       	dc.b	smpsNoAttack, $01
0009674B E10F                       	smpsAlterNote       $0F
0009674D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096751 E109                       	smpsAlterNote       $09
00096753 E701                       	dc.b	smpsNoAttack, $01
00096755 E105                       	smpsAlterNote       $05
00096757 E701                       	dc.b	smpsNoAttack, $01
00096759 E106                       	smpsAlterNote       $06
0009675B E701                       	dc.b	smpsNoAttack, $01
0009675D E10C                       	smpsAlterNote       $0C
0009675F E701                       	dc.b	smpsNoAttack, $01
00096761 E110                       	smpsAlterNote       $10
00096763 E701                       	dc.b	smpsNoAttack, $01
00096765 E10C                       	smpsAlterNote       $0C
00096767 E701                       	dc.b	smpsNoAttack, $01
00096769 E109                       	smpsAlterNote       $09
0009676B E701                       	dc.b	smpsNoAttack, $01
0009676D E105                       	smpsAlterNote       $05
0009676F E701                       	dc.b	smpsNoAttack, $01
00096771 E109                       	smpsAlterNote       $09
00096773 E701                       	dc.b	smpsNoAttack, $01
00096775 E10F                       	smpsAlterNote       $0F
00096777 E701                       	dc.b	smpsNoAttack, $01
00096779 E110                       	smpsAlterNote       $10
0009677B E701                       	dc.b	smpsNoAttack, $01
0009677D E10C                       	smpsAlterNote       $0C
0009677F E701                       	dc.b	smpsNoAttack, $01
00096781 E106                       	smpsAlterNote       $06
00096783 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096787 E109                       	smpsAlterNote       $09
00096789 E701                       	dc.b	smpsNoAttack, $01
0009678B E10F                       	smpsAlterNote       $0F
0009678D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096791 E109                       	smpsAlterNote       $09
00096793 E701                       	dc.b	smpsNoAttack, $01
00096795 E106                       	smpsAlterNote       $06
00096797 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009679B E10C                       	smpsAlterNote       $0C
0009679D E701                       	dc.b	smpsNoAttack, $01
0009679F E110                       	smpsAlterNote       $10
000967A1 E701                       	dc.b	smpsNoAttack, $01
000967A3 E10F                       	smpsAlterNote       $0F
000967A5 E701                       	dc.b	smpsNoAttack, $01
000967A7 E109                       	smpsAlterNote       $09
000967A9 E701                       	dc.b	smpsNoAttack, $01
000967AB E105                       	smpsAlterNote       $05
000967AD E701                       	dc.b	smpsNoAttack, $01
000967AF E109                       	smpsAlterNote       $09
000967B1 E701                       	dc.b	smpsNoAttack, $01
000967B3 E10F                       	smpsAlterNote       $0F
000967B5 E701                       	dc.b	smpsNoAttack, $01
000967B7 E110                       	smpsAlterNote       $10
000967B9 E701                       	dc.b	smpsNoAttack, $01
000967BB E10C                       	smpsAlterNote       $0C
000967BD E701                       	dc.b	smpsNoAttack, $01
000967BF E106                       	smpsAlterNote       $06
000967C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967C5 E109                       	smpsAlterNote       $09
000967C7 E701                       	dc.b	smpsNoAttack, $01
000967C9 E10F                       	smpsAlterNote       $0F
000967CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967CF E109                       	smpsAlterNote       $09
000967D1 E701                       	dc.b	smpsNoAttack, $01
000967D3 E106                       	smpsAlterNote       $06
000967D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967D9 E10C                       	smpsAlterNote       $0C
000967DB E701                       	dc.b	smpsNoAttack, $01
000967DD E110                       	smpsAlterNote       $10
000967DF E701                       	dc.b	smpsNoAttack, $01
000967E1 E10F                       	smpsAlterNote       $0F
000967E3 E701                       	dc.b	smpsNoAttack, $01
000967E5 E109                       	smpsAlterNote       $09
000967E7 E701                       	dc.b	smpsNoAttack, $01
000967E9 E105                       	smpsAlterNote       $05
000967EB E701                       	dc.b	smpsNoAttack, $01
000967ED E109                       	smpsAlterNote       $09
000967EF E701                       	dc.b	smpsNoAttack, $01
000967F1 E10C                       	smpsAlterNote       $0C
000967F3 E701                       	dc.b	smpsNoAttack, $01
000967F5 E110                       	smpsAlterNote       $10
000967F7 E701                       	dc.b	smpsNoAttack, $01
000967F9 E10C                       	smpsAlterNote       $0C
000967FB E701                       	dc.b	smpsNoAttack, $01
000967FD E106                       	smpsAlterNote       $06
000967FF E701                       	dc.b	smpsNoAttack, $01
00096801 E105                       	smpsAlterNote       $05
00096803 E701                       	dc.b	smpsNoAttack, $01
00096805 E109                       	smpsAlterNote       $09
00096807 E701                       	dc.b	smpsNoAttack, $01
00096809 E10F                       	smpsAlterNote       $0F
0009680B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009680F E10C                       	smpsAlterNote       $0C
00096811 E701                       	dc.b	smpsNoAttack, $01
00096813 E106                       	smpsAlterNote       $06
00096815 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096819 E10C                       	smpsAlterNote       $0C
0009681B E701                       	dc.b	smpsNoAttack, $01
0009681D E10F                       	smpsAlterNote       $0F
0009681F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096823 E109                       	smpsAlterNote       $09
00096825 E701                       	dc.b	smpsNoAttack, $01
00096827 E105                       	smpsAlterNote       $05
00096829 E701                       	dc.b	smpsNoAttack, $01
0009682B E106                       	smpsAlterNote       $06
0009682D E701                       	dc.b	smpsNoAttack, $01
0009682F E10C                       	smpsAlterNote       $0C
00096831 E701                       	dc.b	smpsNoAttack, $01
00096833 E110                       	smpsAlterNote       $10
00096835 E701                       	dc.b	smpsNoAttack, $01
00096837 E10C                       	smpsAlterNote       $0C
00096839 E701                       	dc.b	smpsNoAttack, $01
0009683B E109                       	smpsAlterNote       $09
0009683D E701                       	dc.b	smpsNoAttack, $01
0009683F E105                       	smpsAlterNote       $05
00096841 E701                       	dc.b	smpsNoAttack, $01
00096843 E109                       	smpsAlterNote       $09
00096845 E701                       	dc.b	smpsNoAttack, $01
00096847 E10F                       	smpsAlterNote       $0F
00096849 E701                       	dc.b	smpsNoAttack, $01
0009684B E110                       	smpsAlterNote       $10
0009684D E701                       	dc.b	smpsNoAttack, $01
0009684F E10C                       	smpsAlterNote       $0C
00096851 E701                       	dc.b	smpsNoAttack, $01
00096853 E106                       	smpsAlterNote       $06
00096855 E701                       	dc.b	smpsNoAttack, $01
00096857 E10B                       	smpsAlterNote       $0B
00096859 BF02                       	dc.b	nD5, $02
0009685B E10C                       	smpsAlterNote       $0C
0009685D C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
00096863 E109                       	smpsAlterNote       $09
00096865 E701                       	dc.b	smpsNoAttack, $01
00096867 E105                       	smpsAlterNote       $05
00096869 E701                       	dc.b	smpsNoAttack, $01
0009686B E109                       	smpsAlterNote       $09
0009686D E701                       	dc.b	smpsNoAttack, $01
0009686F E10F                       	smpsAlterNote       $0F
00096871 E701                       	dc.b	smpsNoAttack, $01
00096873 E110                       	smpsAlterNote       $10
00096875 E701                       	dc.b	smpsNoAttack, $01
00096877 E10C                       	smpsAlterNote       $0C
00096879 E701                       	dc.b	smpsNoAttack, $01
0009687B E106                       	smpsAlterNote       $06
0009687D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096881 E109                       	smpsAlterNote       $09
00096883 E701                       	dc.b	smpsNoAttack, $01
00096885 E10F                       	smpsAlterNote       $0F
00096887 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009688B E109                       	smpsAlterNote       $09
0009688D E701                       	dc.b	smpsNoAttack, $01
0009688F E106                       	smpsAlterNote       $06
00096891 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096895 E10C                       	smpsAlterNote       $0C
00096897 E701                       	dc.b	smpsNoAttack, $01
00096899 E110                       	smpsAlterNote       $10
0009689B E701                       	dc.b	smpsNoAttack, $01
0009689D E10F                       	smpsAlterNote       $0F
0009689F E701                       	dc.b	smpsNoAttack, $01
000968A1 E109                       	smpsAlterNote       $09
000968A3 E701                       	dc.b	smpsNoAttack, $01
000968A5 E105                       	smpsAlterNote       $05
000968A7 E701                       	dc.b	smpsNoAttack, $01
000968A9 E109                       	smpsAlterNote       $09
000968AB E701                       	dc.b	smpsNoAttack, $01
000968AD E10C                       	smpsAlterNote       $0C
000968AF E701                       	dc.b	smpsNoAttack, $01
000968B1 E110                       	smpsAlterNote       $10
000968B3 E701                       	dc.b	smpsNoAttack, $01
000968B5 E10C                       	smpsAlterNote       $0C
000968B7 E701                       	dc.b	smpsNoAttack, $01
000968B9 E106                       	smpsAlterNote       $06
000968BB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000968BF E10D                       	smpsAlterNote       $0D
000968C1 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
000968C9 E10C                       	smpsAlterNote       $0C
000968CB C10D                       	dc.b	nE5, $0D
000968CD E106                       	smpsAlterNote       $06
000968CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968D3 E109                       	smpsAlterNote       $09
000968D5 E701                       	dc.b	smpsNoAttack, $01
000968D7 E10F                       	smpsAlterNote       $0F
000968D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968DD E109                       	smpsAlterNote       $09
000968DF E701                       	dc.b	smpsNoAttack, $01
000968E1 E106                       	smpsAlterNote       $06
000968E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968E7 E10C                       	smpsAlterNote       $0C
000968E9 E701                       	dc.b	smpsNoAttack, $01
000968EB E110                       	smpsAlterNote       $10
000968ED E701                       	dc.b	smpsNoAttack, $01
000968EF E10F                       	smpsAlterNote       $0F
000968F1 E701                       	dc.b	smpsNoAttack, $01
000968F3 E109                       	smpsAlterNote       $09
000968F5 E701                       	dc.b	smpsNoAttack, $01
000968F7 E105                       	smpsAlterNote       $05
000968F9 E701                       	dc.b	smpsNoAttack, $01
000968FB E106                       	smpsAlterNote       $06
000968FD 800F                       	dc.b	nRst, $0F
00096901 E6FF                       	smpsAlterVol        $FF
00096903 E10F                       	smpsAlterNote       $0F
00096905 BA01                       	dc.b	nA4, $01
00096907 E110                       	smpsAlterNote       $10
00096909 BB02                       	dc.b	nBb4, $02
0009690B E10F                       	smpsAlterNote       $0F
0009690D BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
00096913 E10B                       	smpsAlterNote       $0B
00096915 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00096919 E10C                       	smpsAlterNote       $0C
0009691B C103                       	dc.b	nE5, $03
0009691D E10D                       	smpsAlterNote       $0D
0009691F C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00096929 E10B                       	smpsAlterNote       $0B
0009692B BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0009692F E104                       	smpsAlterNote       $04
00096931 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096935 E10A                       	smpsAlterNote       $0A
00096937 E701                       	dc.b	smpsNoAttack, $01
00096939 E10D                       	smpsAlterNote       $0D
0009693B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009693F E107                       	smpsAlterNote       $07
00096941 E701                       	dc.b	smpsNoAttack, $01
00096943 E104                       	smpsAlterNote       $04
00096945 8001                       	dc.b	nRst, $01
00096947 E110                       	smpsAlterNote       $10
00096949 C703                       	dc.b	nBb5, $03
0009694B E10F                       	smpsAlterNote       $0F
0009694D C603 8001                  	dc.b	nA5, $03, nRst, $01
00096951 E10D                       	smpsAlterNote       $0D
00096953 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00096957 E10C                       	smpsAlterNote       $0C
00096959 E701                       	dc.b	smpsNoAttack, $01
0009695B E108                       	smpsAlterNote       $08
0009695D E701                       	dc.b	smpsNoAttack, $01
0009695F E109                       	smpsAlterNote       $09
00096961 E701                       	dc.b	smpsNoAttack, $01
00096963 E10F                       	smpsAlterNote       $0F
00096965 E701                       	dc.b	smpsNoAttack, $01
00096967 E113                       	smpsAlterNote       $13
00096969 E701                       	dc.b	smpsNoAttack, $01
0009696B E10F                       	smpsAlterNote       $0F
0009696D E701                       	dc.b	smpsNoAttack, $01
0009696F E10C                       	smpsAlterNote       $0C
00096971 E701                       	dc.b	smpsNoAttack, $01
00096973 E108                       	smpsAlterNote       $08
00096975 E701                       	dc.b	smpsNoAttack, $01
00096977 E10C                       	smpsAlterNote       $0C
00096979 E701                       	dc.b	smpsNoAttack, $01
0009697B E112                       	smpsAlterNote       $12
0009697D E701                       	dc.b	smpsNoAttack, $01
0009697F E113                       	smpsAlterNote       $13
00096981 E701                       	dc.b	smpsNoAttack, $01
00096983 E10F                       	smpsAlterNote       $0F
00096985 E701                       	dc.b	smpsNoAttack, $01
00096987 E109                       	smpsAlterNote       $09
00096989 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009698D E10C                       	smpsAlterNote       $0C
0009698F E701                       	dc.b	smpsNoAttack, $01
00096991 E112                       	smpsAlterNote       $12
00096993 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096997 E10C                       	smpsAlterNote       $0C
00096999 E701                       	dc.b	smpsNoAttack, $01
0009699B E109                       	smpsAlterNote       $09
0009699D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969A1 E10F                       	smpsAlterNote       $0F
000969A3 E701                       	dc.b	smpsNoAttack, $01
000969A5 E113                       	smpsAlterNote       $13
000969A7 E701                       	dc.b	smpsNoAttack, $01
000969A9 E112                       	smpsAlterNote       $12
000969AB E701                       	dc.b	smpsNoAttack, $01
000969AD E10C                       	smpsAlterNote       $0C
000969AF E701                       	dc.b	smpsNoAttack, $01
000969B1 E108                       	smpsAlterNote       $08
000969B3 E701                       	dc.b	smpsNoAttack, $01
000969B5 E10C                       	smpsAlterNote       $0C
000969B7 E701                       	dc.b	smpsNoAttack, $01
000969B9 E10F                       	smpsAlterNote       $0F
000969BB E701                       	dc.b	smpsNoAttack, $01
000969BD E113                       	smpsAlterNote       $13
000969BF E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000969C3 E10B                       	smpsAlterNote       $0B
000969C5 BF03                       	dc.b	nD5, $03
000969C7 E10C                       	smpsAlterNote       $0C
000969C9 C103 8001                  	dc.b	nE5, $03, nRst, $01
000969CD E10D                       	smpsAlterNote       $0D
000969CF C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000969D9 E10B                       	smpsAlterNote       $0B
000969DB BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000969E7 E110                       	smpsAlterNote       $10
000969E9 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000969ED E10F                       	smpsAlterNote       $0F
000969EF C604                       	dc.b	nA5, $04
000969F1 E10D                       	smpsAlterNote       $0D
000969F3 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000969F9 E109                       	smpsAlterNote       $09
000969FB E701                       	dc.b	smpsNoAttack, $01
000969FD E108                       	smpsAlterNote       $08
000969FF E701                       	dc.b	smpsNoAttack, $01
00096A01 E10C                       	smpsAlterNote       $0C
00096A03 E701                       	dc.b	smpsNoAttack, $01
00096A05 E112                       	smpsAlterNote       $12
00096A07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A0B E10F                       	smpsAlterNote       $0F
00096A0D E701                       	dc.b	smpsNoAttack, $01
00096A0F E109                       	smpsAlterNote       $09
00096A11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A15 E10F                       	smpsAlterNote       $0F
00096A17 E701                       	dc.b	smpsNoAttack, $01
00096A19 E112                       	smpsAlterNote       $12
00096A1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A1F E10C                       	smpsAlterNote       $0C
00096A21 E701                       	dc.b	smpsNoAttack, $01
00096A23 E108                       	smpsAlterNote       $08
00096A25 E701                       	dc.b	smpsNoAttack, $01
00096A27 E109                       	smpsAlterNote       $09
00096A29 E701                       	dc.b	smpsNoAttack, $01
00096A2B E10F                       	smpsAlterNote       $0F
00096A2D E701                       	dc.b	smpsNoAttack, $01
00096A2F E113                       	smpsAlterNote       $13
00096A31 E701                       	dc.b	smpsNoAttack, $01
00096A33 E10F                       	smpsAlterNote       $0F
00096A35 E701                       	dc.b	smpsNoAttack, $01
00096A37 E10C                       	smpsAlterNote       $0C
00096A39 E701                       	dc.b	smpsNoAttack, $01
00096A3B E108                       	smpsAlterNote       $08
00096A3D E701                       	dc.b	smpsNoAttack, $01
00096A3F E10C                       	smpsAlterNote       $0C
00096A41 E701                       	dc.b	smpsNoAttack, $01
00096A43 E112                       	smpsAlterNote       $12
00096A45 E701                       	dc.b	smpsNoAttack, $01
00096A47 E113                       	smpsAlterNote       $13
00096A49 E701                       	dc.b	smpsNoAttack, $01
00096A4B E10F                       	smpsAlterNote       $0F
00096A4D E701                       	dc.b	smpsNoAttack, $01
00096A4F E109                       	smpsAlterNote       $09
00096A51 E701                       	dc.b	smpsNoAttack, $01
00096A53 E10D                       	smpsAlterNote       $0D
00096A55 C402                       	dc.b	nG5, $02
00096A57 E10F                       	smpsAlterNote       $0F
00096A59 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00096A63 E10D                       	smpsAlterNote       $0D
00096A65 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00096A6B E10B                       	smpsAlterNote       $0B
00096A6D BF0D                       	dc.b	nD5, $0D
00096A6F E108                       	smpsAlterNote       $08
00096A71 E701                       	dc.b	smpsNoAttack, $01
00096A73 E104                       	smpsAlterNote       $04
00096A75 E701                       	dc.b	smpsNoAttack, $01
00096A77 E105                       	smpsAlterNote       $05
00096A79 E701                       	dc.b	smpsNoAttack, $01
00096A7B E10B                       	smpsAlterNote       $0B
00096A7D E701                       	dc.b	smpsNoAttack, $01
00096A7F E10F                       	smpsAlterNote       $0F
00096A81 E701                       	dc.b	smpsNoAttack, $01
00096A83 E10B                       	smpsAlterNote       $0B
00096A85 E701                       	dc.b	smpsNoAttack, $01
00096A87 E108                       	smpsAlterNote       $08
00096A89 E701                       	dc.b	smpsNoAttack, $01
00096A8B E104                       	smpsAlterNote       $04
00096A8D E701                       	dc.b	smpsNoAttack, $01
00096A8F E108                       	smpsAlterNote       $08
00096A91 E701                       	dc.b	smpsNoAttack, $01
00096A93 E10E                       	smpsAlterNote       $0E
00096A95 E701                       	dc.b	smpsNoAttack, $01
00096A97 E10F                       	smpsAlterNote       $0F
00096A99 E701                       	dc.b	smpsNoAttack, $01
00096A9B E10C                       	smpsAlterNote       $0C
00096A9D C101                       	dc.b	nE5, $01
00096A9F E10D                       	smpsAlterNote       $0D
00096AA1 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00096AA9 E10F                       	smpsAlterNote       $0F
00096AAB C607                       	dc.b	nA5, $07
00096AAD E10C                       	smpsAlterNote       $0C
00096AAF CD07                       	dc.b	nE6, $07
00096AB1 E10D                       	smpsAlterNote       $0D
00096AB3 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00096AB7 E10C                       	smpsAlterNote       $0C
00096AB9 CD03                       	dc.b	nE6, $03
00096ABB E10A                       	smpsAlterNote       $0A
00096ABD C903 8001                  	dc.b	nC6, $03, nRst, $01
00096AC1 E10D                       	smpsAlterNote       $0D
00096AC3 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00096AC9 E10A                       	smpsAlterNote       $0A
00096ACB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096ACF E110                       	smpsAlterNote       $10
00096AD1 E701                       	dc.b	smpsNoAttack, $01
00096AD3 E114                       	smpsAlterNote       $14
00096AD5 E701                       	dc.b	smpsNoAttack, $01
00096AD7 E113                       	smpsAlterNote       $13
00096AD9 E701                       	dc.b	smpsNoAttack, $01
00096ADB E10D                       	smpsAlterNote       $0D
00096ADD E701                       	dc.b	smpsNoAttack, $01
00096ADF E109                       	smpsAlterNote       $09
00096AE1 E701                       	dc.b	smpsNoAttack, $01
00096AE3 E10D                       	smpsAlterNote       $0D
00096AE5 E701                       	dc.b	smpsNoAttack, $01
00096AE7 E110                       	smpsAlterNote       $10
00096AE9 E701                       	dc.b	smpsNoAttack, $01
00096AEB E114                       	smpsAlterNote       $14
00096AED E701                       	dc.b	smpsNoAttack, $01
00096AEF E10F                       	smpsAlterNote       $0F
00096AF1 C607                       	dc.b	nA5, $07
00096AF3 E10D                       	smpsAlterNote       $0D
00096AF5 C40D                       	dc.b	nG5, $0D
00096AF7 E10A                       	smpsAlterNote       $0A
00096AF9 E701                       	dc.b	smpsNoAttack, $01
00096AFB E106                       	smpsAlterNote       $06
00096AFD E701                       	dc.b	smpsNoAttack, $01
00096AFF E10A                       	smpsAlterNote       $0A
00096B01 E701                       	dc.b	smpsNoAttack, $01
00096B03 E10D                       	smpsAlterNote       $0D
00096B05 E701                       	dc.b	smpsNoAttack, $01
00096B07 E111                       	smpsAlterNote       $11
00096B09 E701                       	dc.b	smpsNoAttack, $01
00096B0B E10D                       	smpsAlterNote       $0D
00096B0D E701                       	dc.b	smpsNoAttack, $01
00096B0F E107                       	smpsAlterNote       $07
00096B11 E701                       	dc.b	smpsNoAttack, $01
00096B13 E106                       	smpsAlterNote       $06
00096B15 E701                       	dc.b	smpsNoAttack, $01
00096B17 E10A                       	smpsAlterNote       $0A
00096B19 E701                       	dc.b	smpsNoAttack, $01
00096B1B E110                       	smpsAlterNote       $10
00096B1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B21 E10D                       	smpsAlterNote       $0D
00096B23 E701                       	dc.b	smpsNoAttack, $01
00096B25 E107                       	smpsAlterNote       $07
00096B27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B2B E10F                       	smpsAlterNote       $0F
00096B2D C60E                       	dc.b	nA5, $0E
00096B2F E109                       	smpsAlterNote       $09
00096B31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B35 E10F                       	smpsAlterNote       $0F
00096B37 E701                       	dc.b	smpsNoAttack, $01
00096B39 E112                       	smpsAlterNote       $12
00096B3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B3F E10C                       	smpsAlterNote       $0C
00096B41 E701                       	dc.b	smpsNoAttack, $01
00096B43 E108                       	smpsAlterNote       $08
00096B45 E701                       	dc.b	smpsNoAttack, $01
00096B47 E109                       	smpsAlterNote       $09
00096B49 E701                       	dc.b	smpsNoAttack, $01
00096B4B E10F                       	smpsAlterNote       $0F
00096B4D E701                       	dc.b	smpsNoAttack, $01
00096B4F E113                       	smpsAlterNote       $13
00096B51 E701                       	dc.b	smpsNoAttack, $01
00096B53 E10F                       	smpsAlterNote       $0F
00096B55 E701                       	dc.b	smpsNoAttack, $01
00096B57 E10C                       	smpsAlterNote       $0C
00096B59 E701                       	dc.b	smpsNoAttack, $01
00096B5B E108                       	smpsAlterNote       $08
00096B5D E701                       	dc.b	smpsNoAttack, $01
00096B5F E109                       	smpsAlterNote       $09
00096B61 8001                       	dc.b	nRst, $01
00096B63 E110                       	smpsAlterNote       $10
00096B65 C70D                       	dc.b	nBb5, $0D
00096B67 E10D                       	smpsAlterNote       $0D
00096B69 E701                       	dc.b	smpsNoAttack, $01
00096B6B E109                       	smpsAlterNote       $09
00096B6D E701                       	dc.b	smpsNoAttack, $01
00096B6F E10D                       	smpsAlterNote       $0D
00096B71 E701                       	dc.b	smpsNoAttack, $01
00096B73 E113                       	smpsAlterNote       $13
00096B75 E701                       	dc.b	smpsNoAttack, $01
00096B77 E114                       	smpsAlterNote       $14
00096B79 E701                       	dc.b	smpsNoAttack, $01
00096B7B E110                       	smpsAlterNote       $10
00096B7D E701                       	dc.b	smpsNoAttack, $01
00096B7F E10A                       	smpsAlterNote       $0A
00096B81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B85 E10D                       	smpsAlterNote       $0D
00096B87 E701                       	dc.b	smpsNoAttack, $01
00096B89 E113                       	smpsAlterNote       $13
00096B8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B8F E10D                       	smpsAlterNote       $0D
00096B91 E701                       	dc.b	smpsNoAttack, $01
00096B93 E10A                       	smpsAlterNote       $0A
00096B95 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
00096B9F E10B                       	smpsAlterNote       $0B
00096BA1 8001                       	dc.b	nRst, $01
00096BA3 E10C                       	smpsAlterNote       $0C
00096BA5 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
00096BA9 E10B                       	smpsAlterNote       $0B
00096BAB CB0D                       	dc.b	nD6, $0D
00096BAD E105                       	smpsAlterNote       $05
00096BAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BB3 E108                       	smpsAlterNote       $08
00096BB5 E701                       	dc.b	smpsNoAttack, $01
00096BB7 E10E                       	smpsAlterNote       $0E
00096BB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BBD E108                       	smpsAlterNote       $08
00096BBF E701                       	dc.b	smpsNoAttack, $01
00096BC1 E105                       	smpsAlterNote       $05
00096BC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BC7 E10B                       	smpsAlterNote       $0B
00096BC9 E701                       	dc.b	smpsNoAttack, $01
00096BCB E10F                       	smpsAlterNote       $0F
00096BCD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096BD1 E10C                       	smpsAlterNote       $0C
00096BD3 CC0D                       	dc.b	nEb6, $0D
00096BD5 E106                       	smpsAlterNote       $06
00096BD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BDB E109                       	smpsAlterNote       $09
00096BDD E701                       	dc.b	smpsNoAttack, $01
00096BDF E10C                       	smpsAlterNote       $0C
00096BE1 8001                       	dc.b	nRst, $01
00096BE3 E10A                       	smpsAlterNote       $0A
00096BE5 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00096BF1 CB0E                       	dc.b	nD6, $0E
00096BF3 E105                       	smpsAlterNote       $05
00096BF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BF9 E10B                       	smpsAlterNote       $0B
00096BFB E701                       	dc.b	smpsNoAttack, $01
00096BFD E10E                       	smpsAlterNote       $0E
00096BFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C03 E108                       	smpsAlterNote       $08
00096C05 E701                       	dc.b	smpsNoAttack, $01
00096C07 E104                       	smpsAlterNote       $04
00096C09 E701                       	dc.b	smpsNoAttack, $01
00096C0B E105                       	smpsAlterNote       $05
00096C0D E701                       	dc.b	smpsNoAttack, $01
00096C0F E10B                       	smpsAlterNote       $0B
00096C11 E701                       	dc.b	smpsNoAttack, $01
00096C13 E10F                       	smpsAlterNote       $0F
00096C15 E701                       	dc.b	smpsNoAttack, $01
00096C17 E10D                       	smpsAlterNote       $0D
00096C19 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
00096C1D E10C                       	smpsAlterNote       $0C
00096C1F CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00096C23 E10A                       	smpsAlterNote       $0A
00096C25 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00096C31 CB0D                       	dc.b	nD6, $0D
00096C33 E108                       	smpsAlterNote       $08
00096C35 E701                       	dc.b	smpsNoAttack, $01
00096C37 E104                       	smpsAlterNote       $04
00096C39 E701                       	dc.b	smpsNoAttack, $01
00096C3B E105                       	smpsAlterNote       $05
00096C3D E701                       	dc.b	smpsNoAttack, $01
00096C3F E10B                       	smpsAlterNote       $0B
00096C41 E701                       	dc.b	smpsNoAttack, $01
00096C43 E10F                       	smpsAlterNote       $0F
00096C45 E701                       	dc.b	smpsNoAttack, $01
00096C47 E10B                       	smpsAlterNote       $0B
00096C49 E701                       	dc.b	smpsNoAttack, $01
00096C4B E108                       	smpsAlterNote       $08
00096C4D E701                       	dc.b	smpsNoAttack, $01
00096C4F E104                       	smpsAlterNote       $04
00096C51 E701                       	dc.b	smpsNoAttack, $01
00096C53 E108                       	smpsAlterNote       $08
00096C55 E701                       	dc.b	smpsNoAttack, $01
00096C57 E10E                       	smpsAlterNote       $0E
00096C59 E701                       	dc.b	smpsNoAttack, $01
00096C5B E10F                       	smpsAlterNote       $0F
00096C5D E701                       	dc.b	smpsNoAttack, $01
00096C5F E10C                       	smpsAlterNote       $0C
00096C61 CC0D                       	dc.b	nEb6, $0D
00096C63 E109                       	smpsAlterNote       $09
00096C65 E701                       	dc.b	smpsNoAttack, $01
00096C67 E105                       	smpsAlterNote       $05
00096C69 E701                       	dc.b	smpsNoAttack, $01
00096C6B E106                       	smpsAlterNote       $06
00096C6D E701                       	dc.b	smpsNoAttack, $01
00096C6F E10C                       	smpsAlterNote       $0C
00096C71 E701                       	dc.b	smpsNoAttack, $01
00096C73 E10A                       	smpsAlterNote       $0A
00096C75 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
00096C81 CB0D                       	dc.b	nD6, $0D
00096C83 E108                       	smpsAlterNote       $08
00096C85 E701                       	dc.b	smpsNoAttack, $01
00096C87 E104                       	smpsAlterNote       $04
00096C89 E701                       	dc.b	smpsNoAttack, $01
00096C8B E108                       	smpsAlterNote       $08
00096C8D E701                       	dc.b	smpsNoAttack, $01
00096C8F E10B                       	smpsAlterNote       $0B
00096C91 E701                       	dc.b	smpsNoAttack, $01
00096C93 E10F                       	smpsAlterNote       $0F
00096C95 E701                       	dc.b	smpsNoAttack, $01
00096C97 E10B                       	smpsAlterNote       $0B
00096C99 E701                       	dc.b	smpsNoAttack, $01
00096C9B E105                       	smpsAlterNote       $05
00096C9D E701                       	dc.b	smpsNoAttack, $01
00096C9F E104                       	smpsAlterNote       $04
00096CA1 E701                       	dc.b	smpsNoAttack, $01
00096CA3 E108                       	smpsAlterNote       $08
00096CA5 E701                       	dc.b	smpsNoAttack, $01
00096CA7 E10E                       	smpsAlterNote       $0E
00096CA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CAD E10B                       	smpsAlterNote       $0B
00096CAF E701                       	dc.b	smpsNoAttack, $01
00096CB1 E105                       	smpsAlterNote       $05
00096CB3 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00096CBB 03                         	dc.b	$03
00096CBC E601                       	smpsAlterVol        $01
00096CBE F6F1 D1                    	smpsJump            music84_Jump01
00096CC1                            
00096CC1                            ; FM5 Data
00096CC1                            music84_FM5:
00096CC3 E080                       	smpsPan             panLeft, $00
00096CC5 8003                       	dc.b	nRst, $03
00096CC7 E10D                       	smpsAlterNote       $0D
00096CC9 C203 8008                  	dc.b	nF5, $03, nRst, $08
00096CCD E10C                       	smpsAlterNote       $0C
00096CCF C103 800A                  	dc.b	nE5, $03, nRst, $0A
00096CD3 E10F                       	smpsAlterNote       $0F
00096CD5 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00096CDB E6FE                       	smpsAlterVol        $FE
00096CDD C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00096CE3 E10D                       	smpsAlterNote       $0D
00096CE5 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00096CEB E10C                       	smpsAlterNote       $0C
00096CED C102 8001                  	dc.b	nE5, $02, nRst, $01
00096CF1 E10A                       	smpsAlterNote       $0A
00096CF3 BD01 8001                  	dc.b	nC5, $01, nRst, $01
00096CF9 03                         	dc.b	$03
00096CFA                            
00096CFA                            music84_Jump00:
00096CFA 8004                       	dc.b	nRst, $04
00096CFC E602                       	smpsAlterVol        $02
00096CFE E10D                       	smpsAlterNote       $0D
00096D00 B60D                       	dc.b	nF4, $0D
00096D02 E107                       	smpsAlterNote       $07
00096D04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D08 E10A                       	smpsAlterNote       $0A
00096D0A E701                       	dc.b	smpsNoAttack, $01
00096D0C E110                       	smpsAlterNote       $10
00096D0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D12 E10A                       	smpsAlterNote       $0A
00096D14 E701                       	dc.b	smpsNoAttack, $01
00096D16 E107                       	smpsAlterNote       $07
00096D18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D1C E10D                       	smpsAlterNote       $0D
00096D1E E701                       	dc.b	smpsNoAttack, $01
00096D20 E111                       	smpsAlterNote       $11
00096D22 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096D26 E10D                       	smpsAlterNote       $0D
00096D28 B80D                       	dc.b	nG4, $0D
00096D2A E107                       	smpsAlterNote       $07
00096D2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D30 E10A                       	smpsAlterNote       $0A
00096D32 E701                       	dc.b	smpsNoAttack, $01
00096D34 E110                       	smpsAlterNote       $10
00096D36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D3A E10A                       	smpsAlterNote       $0A
00096D3C E701                       	dc.b	smpsNoAttack, $01
00096D3E E107                       	smpsAlterNote       $07
00096D40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D44 E10D                       	smpsAlterNote       $0D
00096D46 E701                       	dc.b	smpsNoAttack, $01
00096D48 E111                       	smpsAlterNote       $11
00096D4A E701                       	dc.b	smpsNoAttack, $01
00096D4C E110                       	smpsAlterNote       $10
00096D4E E701                       	dc.b	smpsNoAttack, $01
00096D50 E10A                       	smpsAlterNote       $0A
00096D52 E701                       	dc.b	smpsNoAttack, $01
00096D54 E106                       	smpsAlterNote       $06
00096D56 E701                       	dc.b	smpsNoAttack, $01
00096D58 E10A                       	smpsAlterNote       $0A
00096D5A E701                       	dc.b	smpsNoAttack, $01
00096D5C E10D                       	smpsAlterNote       $0D
00096D5E E701                       	dc.b	smpsNoAttack, $01
00096D60 E111                       	smpsAlterNote       $11
00096D62 E701                       	dc.b	smpsNoAttack, $01
00096D64 E10D                       	smpsAlterNote       $0D
00096D66 E701                       	dc.b	smpsNoAttack, $01
00096D68 E10F                       	smpsAlterNote       $0F
00096D6A BA0E                       	dc.b	nA4, $0E
00096D6C E109                       	smpsAlterNote       $09
00096D6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D72 E10F                       	smpsAlterNote       $0F
00096D74 E701                       	dc.b	smpsNoAttack, $01
00096D76 E112                       	smpsAlterNote       $12
00096D78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D7C E10C                       	smpsAlterNote       $0C
00096D7E E701                       	dc.b	smpsNoAttack, $01
00096D80 E108                       	smpsAlterNote       $08
00096D82 E701                       	dc.b	smpsNoAttack, $01
00096D84 E109                       	smpsAlterNote       $09
00096D86 E701                       	dc.b	smpsNoAttack, $01
00096D88 E10F                       	smpsAlterNote       $0F
00096D8A E701                       	dc.b	smpsNoAttack, $01
00096D8C E113                       	smpsAlterNote       $13
00096D8E E701                       	dc.b	smpsNoAttack, $01
00096D90 E10F                       	smpsAlterNote       $0F
00096D92 E701                       	dc.b	smpsNoAttack, $01
00096D94 E109                       	smpsAlterNote       $09
00096D96 E701                       	dc.b	smpsNoAttack, $01
00096D98 E108                       	smpsAlterNote       $08
00096D9A E701                       	dc.b	smpsNoAttack, $01
00096D9C E10C                       	smpsAlterNote       $0C
00096D9E E701                       	dc.b	smpsNoAttack, $01
00096DA0 E112                       	smpsAlterNote       $12
00096DA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DA6 E10F                       	smpsAlterNote       $0F
00096DA8 E701                       	dc.b	smpsNoAttack, $01
00096DAA E109                       	smpsAlterNote       $09
00096DAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DB0 E10F                       	smpsAlterNote       $0F
00096DB2 E701                       	dc.b	smpsNoAttack, $01
00096DB4 E112                       	smpsAlterNote       $12
00096DB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DBA E10C                       	smpsAlterNote       $0C
00096DBC E701                       	dc.b	smpsNoAttack, $01
00096DBE E108                       	smpsAlterNote       $08
00096DC0 E701                       	dc.b	smpsNoAttack, $01
00096DC2 E109                       	smpsAlterNote       $09
00096DC4 E701                       	dc.b	smpsNoAttack, $01
00096DC6 E10F                       	smpsAlterNote       $0F
00096DC8 E701                       	dc.b	smpsNoAttack, $01
00096DCA E113                       	smpsAlterNote       $13
00096DCC E701                       	dc.b	smpsNoAttack, $01
00096DCE E10F                       	smpsAlterNote       $0F
00096DD0 E701                       	dc.b	smpsNoAttack, $01
00096DD2 E10C                       	smpsAlterNote       $0C
00096DD4 E701                       	dc.b	smpsNoAttack, $01
00096DD6 E108                       	smpsAlterNote       $08
00096DD8 E701                       	dc.b	smpsNoAttack, $01
00096DDA E109                       	smpsAlterNote       $09
00096DDC 8001                       	dc.b	nRst, $01
00096DDE E10C                       	smpsAlterNote       $0C
00096DE0 B50A                       	dc.b	nE4, $0A
00096DE2 E10D                       	smpsAlterNote       $0D
00096DE4 B60D                       	dc.b	nF4, $0D
00096DE6 E10A                       	smpsAlterNote       $0A
00096DE8 E701                       	dc.b	smpsNoAttack, $01
00096DEA E106                       	smpsAlterNote       $06
00096DEC E701                       	dc.b	smpsNoAttack, $01
00096DEE E107                       	smpsAlterNote       $07
00096DF0 E701                       	dc.b	smpsNoAttack, $01
00096DF2 E10D                       	smpsAlterNote       $0D
00096DF4 E701                       	dc.b	smpsNoAttack, $01
00096DF6 E111                       	smpsAlterNote       $11
00096DF8 E701                       	dc.b	smpsNoAttack, $01
00096DFA E10D                       	smpsAlterNote       $0D
00096DFC E701                       	dc.b	smpsNoAttack, $01
00096DFE E10A                       	smpsAlterNote       $0A
00096E00 E701                       	dc.b	smpsNoAttack, $01
00096E02 E106                       	smpsAlterNote       $06
00096E04 E701                       	dc.b	smpsNoAttack, $01
00096E06 E10A                       	smpsAlterNote       $0A
00096E08 E701                       	dc.b	smpsNoAttack, $01
00096E0A E110                       	smpsAlterNote       $10
00096E0C E701                       	dc.b	smpsNoAttack, $01
00096E0E E111                       	smpsAlterNote       $11
00096E10 E701                       	dc.b	smpsNoAttack, $01
00096E12 E10D                       	smpsAlterNote       $0D
00096E14 B80D                       	dc.b	nG4, $0D
00096E16 E10A                       	smpsAlterNote       $0A
00096E18 E701                       	dc.b	smpsNoAttack, $01
00096E1A E106                       	smpsAlterNote       $06
00096E1C E701                       	dc.b	smpsNoAttack, $01
00096E1E E107                       	smpsAlterNote       $07
00096E20 E701                       	dc.b	smpsNoAttack, $01
00096E22 E10D                       	smpsAlterNote       $0D
00096E24 E701                       	dc.b	smpsNoAttack, $01
00096E26 E111                       	smpsAlterNote       $11
00096E28 E701                       	dc.b	smpsNoAttack, $01
00096E2A E10D                       	smpsAlterNote       $0D
00096E2C E701                       	dc.b	smpsNoAttack, $01
00096E2E E10A                       	smpsAlterNote       $0A
00096E30 E701                       	dc.b	smpsNoAttack, $01
00096E32 E106                       	smpsAlterNote       $06
00096E34 E701                       	dc.b	smpsNoAttack, $01
00096E36 E10A                       	smpsAlterNote       $0A
00096E38 E701                       	dc.b	smpsNoAttack, $01
00096E3A E110                       	smpsAlterNote       $10
00096E3C E701                       	dc.b	smpsNoAttack, $01
00096E3E E111                       	smpsAlterNote       $11
00096E40 E701                       	dc.b	smpsNoAttack, $01
00096E42 E10D                       	smpsAlterNote       $0D
00096E44 E701                       	dc.b	smpsNoAttack, $01
00096E46 E107                       	smpsAlterNote       $07
00096E48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E4C E10A                       	smpsAlterNote       $0A
00096E4E E701                       	dc.b	smpsNoAttack, $01
00096E50 E110                       	smpsAlterNote       $10
00096E52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E56 E10D                       	smpsAlterNote       $0D
00096E58 8001                       	dc.b	nRst, $01
00096E5A E10F                       	smpsAlterNote       $0F
00096E5C BA0D                       	dc.b	nA4, $0D
00096E5E E10C                       	smpsAlterNote       $0C
00096E60 E701                       	dc.b	smpsNoAttack, $01
00096E62 E108                       	smpsAlterNote       $08
00096E64 E701                       	dc.b	smpsNoAttack, $01
00096E66 E10C                       	smpsAlterNote       $0C
00096E68 E701                       	dc.b	smpsNoAttack, $01
00096E6A E112                       	smpsAlterNote       $12
00096E6C E701                       	dc.b	smpsNoAttack, $01
00096E6E E113                       	smpsAlterNote       $13
00096E70 E701                       	dc.b	smpsNoAttack, $01
00096E72 E10F                       	smpsAlterNote       $0F
00096E74 E701                       	dc.b	smpsNoAttack, $01
00096E76 E109                       	smpsAlterNote       $09
00096E78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E7C E10C                       	smpsAlterNote       $0C
00096E7E E701                       	dc.b	smpsNoAttack, $01
00096E80 E112                       	smpsAlterNote       $12
00096E82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E86 E10C                       	smpsAlterNote       $0C
00096E88 E701                       	dc.b	smpsNoAttack, $01
00096E8A E109                       	smpsAlterNote       $09
00096E8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E90 E10F                       	smpsAlterNote       $0F
00096E92 E701                       	dc.b	smpsNoAttack, $01
00096E94 E113                       	smpsAlterNote       $13
00096E96 E701                       	dc.b	smpsNoAttack, $01
00096E98 E112                       	smpsAlterNote       $12
00096E9A E701                       	dc.b	smpsNoAttack, $01
00096E9C E10C                       	smpsAlterNote       $0C
00096E9E E701                       	dc.b	smpsNoAttack, $01
00096EA0 E108                       	smpsAlterNote       $08
00096EA2 E701                       	dc.b	smpsNoAttack, $01
00096EA4 E10C                       	smpsAlterNote       $0C
00096EA6 E701                       	dc.b	smpsNoAttack, $01
00096EA8 E10F                       	smpsAlterNote       $0F
00096EAA E701                       	dc.b	smpsNoAttack, $01
00096EAC E113                       	smpsAlterNote       $13
00096EAE E701                       	dc.b	smpsNoAttack, $01
00096EB0 E10F                       	smpsAlterNote       $0F
00096EB2 E701                       	dc.b	smpsNoAttack, $01
00096EB4 E109                       	smpsAlterNote       $09
00096EB6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096EBA E10D                       	smpsAlterNote       $0D
00096EBC B609 8001                  	dc.b	nF4, $09, nRst, $01
00096EC0 E10C                       	smpsAlterNote       $0C
00096EC2 B506 8001                  	dc.b	nE4, $06, nRst, $01
00096EC6 E10B                       	smpsAlterNote       $0B
00096EC8 B30D                       	dc.b	nD4, $0D
00096ECA E10C                       	smpsAlterNote       $0C
00096ECC B503 8001                  	dc.b	nE4, $03, nRst, $01
00096ED0 E10D                       	smpsAlterNote       $0D
00096ED2 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00096EDA E109                       	smpsAlterNote       $09
00096EDC E701                       	dc.b	smpsNoAttack, $01
00096EDE E108                       	smpsAlterNote       $08
00096EE0 E701                       	dc.b	smpsNoAttack, $01
00096EE2 E10C                       	smpsAlterNote       $0C
00096EE4 E701                       	dc.b	smpsNoAttack, $01
00096EE6 E112                       	smpsAlterNote       $12
00096EE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EEC E10F                       	smpsAlterNote       $0F
00096EEE E701                       	dc.b	smpsNoAttack, $01
00096EF0 E109                       	smpsAlterNote       $09
00096EF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EF6 E10F                       	smpsAlterNote       $0F
00096EF8 E701                       	dc.b	smpsNoAttack, $01
00096EFA E112                       	smpsAlterNote       $12
00096EFC E701                       	dc.b	smpsNoAttack, $01
00096EFE E113                       	smpsAlterNote       $13
00096F00 8001                       	dc.b	nRst, $01
00096F02 E10D                       	smpsAlterNote       $0D
00096F04 C20D                       	dc.b	nF5, $0D
00096F06 E107                       	smpsAlterNote       $07
00096F08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F0C E10A                       	smpsAlterNote       $0A
00096F0E E701                       	dc.b	smpsNoAttack, $01
00096F10 E110                       	smpsAlterNote       $10
00096F12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F16 E10A                       	smpsAlterNote       $0A
00096F18 E701                       	dc.b	smpsNoAttack, $01
00096F1A E107                       	smpsAlterNote       $07
00096F1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F20 E10D                       	smpsAlterNote       $0D
00096F22 E701                       	dc.b	smpsNoAttack, $01
00096F24 E111                       	smpsAlterNote       $11
00096F26 E701                       	dc.b	smpsNoAttack, $01
00096F28 E110                       	smpsAlterNote       $10
00096F2A E701                       	dc.b	smpsNoAttack, $01
00096F2C E10A                       	smpsAlterNote       $0A
00096F2E E701                       	dc.b	smpsNoAttack, $01
00096F30 E106                       	smpsAlterNote       $06
00096F32 E701                       	dc.b	smpsNoAttack, $01
00096F34 E10A                       	smpsAlterNote       $0A
00096F36 E701                       	dc.b	smpsNoAttack, $01
00096F38 E10D                       	smpsAlterNote       $0D
00096F3A E701                       	dc.b	smpsNoAttack, $01
00096F3C E111                       	smpsAlterNote       $11
00096F3E E701                       	dc.b	smpsNoAttack, $01
00096F40 E10D                       	smpsAlterNote       $0D
00096F42 E701                       	dc.b	smpsNoAttack, $01
00096F44 E107                       	smpsAlterNote       $07
00096F46 E701                       	dc.b	smpsNoAttack, $01
00096F48 E106                       	smpsAlterNote       $06
00096F4A E701                       	dc.b	smpsNoAttack, $01
00096F4C E10A                       	smpsAlterNote       $0A
00096F4E E701                       	dc.b	smpsNoAttack, $01
00096F50 E110                       	smpsAlterNote       $10
00096F52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F56 E10D                       	smpsAlterNote       $0D
00096F58 E701                       	dc.b	smpsNoAttack, $01
00096F5A E107                       	smpsAlterNote       $07
00096F5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F60 E10D                       	smpsAlterNote       $0D
00096F62 E701                       	dc.b	smpsNoAttack, $01
00096F64 E110                       	smpsAlterNote       $10
00096F66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F6A E10A                       	smpsAlterNote       $0A
00096F6C E701                       	dc.b	smpsNoAttack, $01
00096F6E E106                       	smpsAlterNote       $06
00096F70 E701                       	dc.b	smpsNoAttack, $01
00096F72 E107                       	smpsAlterNote       $07
00096F74 E701                       	dc.b	smpsNoAttack, $01
00096F76 E10D                       	smpsAlterNote       $0D
00096F78 E701                       	dc.b	smpsNoAttack, $01
00096F7A E111                       	smpsAlterNote       $11
00096F7C E701                       	dc.b	smpsNoAttack, $01
00096F7E E10D                       	smpsAlterNote       $0D
00096F80 E701                       	dc.b	smpsNoAttack, $01
00096F82 E10A                       	smpsAlterNote       $0A
00096F84 E701                       	dc.b	smpsNoAttack, $01
00096F86 E106                       	smpsAlterNote       $06
00096F88 E701                       	dc.b	smpsNoAttack, $01
00096F8A E10A                       	smpsAlterNote       $0A
00096F8C E701                       	dc.b	smpsNoAttack, $01
00096F8E E110                       	smpsAlterNote       $10
00096F90 E701                       	dc.b	smpsNoAttack, $01
00096F92 E111                       	smpsAlterNote       $11
00096F94 E701                       	dc.b	smpsNoAttack, $01
00096F96 E10D                       	smpsAlterNote       $0D
00096F98 E701                       	dc.b	smpsNoAttack, $01
00096F9A E107                       	smpsAlterNote       $07
00096F9C E701                       	dc.b	smpsNoAttack, $01
00096F9E E10D                       	smpsAlterNote       $0D
00096FA0 C207                       	dc.b	nF5, $07
00096FA2 E10C                       	smpsAlterNote       $0C
00096FA4 C10D                       	dc.b	nE5, $0D
00096FA6 E109                       	smpsAlterNote       $09
00096FA8 E701                       	dc.b	smpsNoAttack, $01
00096FAA E106                       	smpsAlterNote       $06
00096FAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FB0 E10C                       	smpsAlterNote       $0C
00096FB2 E701                       	dc.b	smpsNoAttack, $01
00096FB4 E110                       	smpsAlterNote       $10
00096FB6 E701                       	dc.b	smpsNoAttack, $01
00096FB8 E10F                       	smpsAlterNote       $0F
00096FBA E701                       	dc.b	smpsNoAttack, $01
00096FBC E109                       	smpsAlterNote       $09
00096FBE E701                       	dc.b	smpsNoAttack, $01
00096FC0 E105                       	smpsAlterNote       $05
00096FC2 E701                       	dc.b	smpsNoAttack, $01
00096FC4 E109                       	smpsAlterNote       $09
00096FC6 E701                       	dc.b	smpsNoAttack, $01
00096FC8 E10C                       	smpsAlterNote       $0C
00096FCA E701                       	dc.b	smpsNoAttack, $01
00096FCC E110                       	smpsAlterNote       $10
00096FCE E701                       	dc.b	smpsNoAttack, $01
00096FD0 E10B                       	smpsAlterNote       $0B
00096FD2 BF0D                       	dc.b	nD5, $0D
00096FD4 E108                       	smpsAlterNote       $08
00096FD6 E701                       	dc.b	smpsNoAttack, $01
00096FD8 E105                       	smpsAlterNote       $05
00096FDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FDE E10B                       	smpsAlterNote       $0B
00096FE0 E701                       	dc.b	smpsNoAttack, $01
00096FE2 E10F                       	smpsAlterNote       $0F
00096FE4 E701                       	dc.b	smpsNoAttack, $01
00096FE6 E10E                       	smpsAlterNote       $0E
00096FE8 E701                       	dc.b	smpsNoAttack, $01
00096FEA E108                       	smpsAlterNote       $08
00096FEC E701                       	dc.b	smpsNoAttack, $01
00096FEE E104                       	smpsAlterNote       $04
00096FF0 E701                       	dc.b	smpsNoAttack, $01
00096FF2 E108                       	smpsAlterNote       $08
00096FF4 E701                       	dc.b	smpsNoAttack, $01
00096FF6 E10E                       	smpsAlterNote       $0E
00096FF8 E701                       	dc.b	smpsNoAttack, $01
00096FFA E10F                       	smpsAlterNote       $0F
00096FFC E701                       	dc.b	smpsNoAttack, $01
00096FFE E10B                       	smpsAlterNote       $0B
00097000 E701                       	dc.b	smpsNoAttack, $01
00097002 E105                       	smpsAlterNote       $05
00097004 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097008 E108                       	smpsAlterNote       $08
0009700A E701                       	dc.b	smpsNoAttack, $01
0009700C E10E                       	smpsAlterNote       $0E
0009700E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097012 E108                       	smpsAlterNote       $08
00097014 E701                       	dc.b	smpsNoAttack, $01
00097016 E105                       	smpsAlterNote       $05
00097018 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009701C E10B                       	smpsAlterNote       $0B
0009701E E701                       	dc.b	smpsNoAttack, $01
00097020 E10F                       	smpsAlterNote       $0F
00097022 E701                       	dc.b	smpsNoAttack, $01
00097024 E10E                       	smpsAlterNote       $0E
00097026 E701                       	dc.b	smpsNoAttack, $01
00097028 E108                       	smpsAlterNote       $08
0009702A E701                       	dc.b	smpsNoAttack, $01
0009702C E104                       	smpsAlterNote       $04
0009702E E701                       	dc.b	smpsNoAttack, $01
00097030 E108                       	smpsAlterNote       $08
00097032 E701                       	dc.b	smpsNoAttack, $01
00097034 E10B                       	smpsAlterNote       $0B
00097036 E701                       	dc.b	smpsNoAttack, $01
00097038 E10F                       	smpsAlterNote       $0F
0009703A E701                       	dc.b	smpsNoAttack, $01
0009703C E10B                       	smpsAlterNote       $0B
0009703E E701                       	dc.b	smpsNoAttack, $01
00097040 E105                       	smpsAlterNote       $05
00097042 E701                       	dc.b	smpsNoAttack, $01
00097044 E104                       	smpsAlterNote       $04
00097046 E701                       	dc.b	smpsNoAttack, $01
00097048 E108                       	smpsAlterNote       $08
0009704A E701                       	dc.b	smpsNoAttack, $01
0009704C E10E                       	smpsAlterNote       $0E
0009704E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097052 E10B                       	smpsAlterNote       $0B
00097054 E701                       	dc.b	smpsNoAttack, $01
00097056 E105                       	smpsAlterNote       $05
00097058 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009705C E10B                       	smpsAlterNote       $0B
0009705E E701                       	dc.b	smpsNoAttack, $01
00097060 E10E                       	smpsAlterNote       $0E
00097062 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097066 E108                       	smpsAlterNote       $08
00097068 E701                       	dc.b	smpsNoAttack, $01
0009706A E105                       	smpsAlterNote       $05
0009706C 8001                       	dc.b	nRst, $01
00097070 E601                       	smpsAlterVol        $01
00097072 E10B                       	smpsAlterNote       $0B
00097074 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00097080 8004                       	dc.b	nRst, $04
00097084 E6FF                       	smpsAlterVol        $FF
00097086 E10D                       	smpsAlterNote       $0D
00097088 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
00097090 E10C                       	smpsAlterNote       $0C
00097092 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00097097 E10D                       	smpsAlterNote       $0D
00097099 B60D                       	dc.b	nF4, $0D
0009709B E10A                       	smpsAlterNote       $0A
0009709D E701                       	dc.b	smpsNoAttack, $01
0009709F E106                       	smpsAlterNote       $06
000970A1 E701                       	dc.b	smpsNoAttack, $01
000970A3 E10A                       	smpsAlterNote       $0A
000970A5 E701                       	dc.b	smpsNoAttack, $01
000970A7 E110                       	smpsAlterNote       $10
000970A9 E701                       	dc.b	smpsNoAttack, $01
000970AB E111                       	smpsAlterNote       $11
000970AD E701                       	dc.b	smpsNoAttack, $01
000970AF E10D                       	smpsAlterNote       $0D
000970B1 E701                       	dc.b	smpsNoAttack, $01
000970B3 E107                       	smpsAlterNote       $07
000970B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970B9 E10A                       	smpsAlterNote       $0A
000970BB E701                       	dc.b	smpsNoAttack, $01
000970BD E110                       	smpsAlterNote       $10
000970BF E701                       	dc.b	smpsNoAttack, $01
000970C1 E111                       	smpsAlterNote       $11
000970C3 8001                       	dc.b	nRst, $01
000970C5 E10D                       	smpsAlterNote       $0D
000970C7 B80D                       	dc.b	nG4, $0D
000970C9 E10A                       	smpsAlterNote       $0A
000970CB E701                       	dc.b	smpsNoAttack, $01
000970CD E106                       	smpsAlterNote       $06
000970CF E701                       	dc.b	smpsNoAttack, $01
000970D1 E10A                       	smpsAlterNote       $0A
000970D3 E701                       	dc.b	smpsNoAttack, $01
000970D5 E110                       	smpsAlterNote       $10
000970D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970DB E10D                       	smpsAlterNote       $0D
000970DD E701                       	dc.b	smpsNoAttack, $01
000970DF E107                       	smpsAlterNote       $07
000970E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970E5 E10D                       	smpsAlterNote       $0D
000970E7 E701                       	dc.b	smpsNoAttack, $01
000970E9 E110                       	smpsAlterNote       $10
000970EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970EF E10A                       	smpsAlterNote       $0A
000970F1 E701                       	dc.b	smpsNoAttack, $01
000970F3 E106                       	smpsAlterNote       $06
000970F5 E701                       	dc.b	smpsNoAttack, $01
000970F7 E107                       	smpsAlterNote       $07
000970F9 E701                       	dc.b	smpsNoAttack, $01
000970FB E10D                       	smpsAlterNote       $0D
000970FD E701                       	dc.b	smpsNoAttack, $01
000970FF E111                       	smpsAlterNote       $11
00097101 E701                       	dc.b	smpsNoAttack, $01
00097103 E10D                       	smpsAlterNote       $0D
00097105 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097109 E10F                       	smpsAlterNote       $0F
0009710B BA02 8001                  	dc.b	nA4, $02, nRst, $01
0009710F E110                       	smpsAlterNote       $10
00097111 BB03                       	dc.b	nBb4, $03
00097113 E10F                       	smpsAlterNote       $0F
00097115 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0009711B E110                       	smpsAlterNote       $10
0009711D C703 8001                  	dc.b	nBb5, $03, nRst, $01
00097121 E10F                       	smpsAlterNote       $0F
00097123 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00097129 E110                       	smpsAlterNote       $10
0009712B D302 8001                  	dc.b	nBb6, $02, nRst, $01
0009712F E10F                       	smpsAlterNote       $0F
00097131 D20D                       	dc.b	nA6, $0D
00097133 E10C                       	smpsAlterNote       $0C
00097135 E701                       	dc.b	smpsNoAttack, $01
00097137 E108                       	smpsAlterNote       $08
00097139 E701                       	dc.b	smpsNoAttack, $01
0009713B E10C                       	smpsAlterNote       $0C
0009713D E701                       	dc.b	smpsNoAttack, $01
0009713F E10F                       	smpsAlterNote       $0F
00097141 E701                       	dc.b	smpsNoAttack, $01
00097143 E113                       	smpsAlterNote       $13
00097145 E701                       	dc.b	smpsNoAttack, $01
00097147 E10F                       	smpsAlterNote       $0F
00097149 E701                       	dc.b	smpsNoAttack, $01
0009714B E109                       	smpsAlterNote       $09
0009714D E701                       	dc.b	smpsNoAttack, $01
0009714F E108                       	smpsAlterNote       $08
00097151 E701                       	dc.b	smpsNoAttack, $01
00097153 E10C                       	smpsAlterNote       $0C
00097155 E701                       	dc.b	smpsNoAttack, $01
00097157 E112                       	smpsAlterNote       $12
00097159 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009715D E10F                       	smpsAlterNote       $0F
0009715F E701                       	dc.b	smpsNoAttack, $01
00097161 E109                       	smpsAlterNote       $09
00097163 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00097169 E10D                       	smpsAlterNote       $0D
0009716B CE07                       	dc.b	nF6, $07
0009716D E10C                       	smpsAlterNote       $0C
0009716F CD06 8001                  	dc.b	nE6, $06, nRst, $01
00097173 E10D                       	smpsAlterNote       $0D
00097175 CE03                       	dc.b	nF6, $03
00097177 E10C                       	smpsAlterNote       $0C
00097179 CC0D                       	dc.b	nEb6, $0D
0009717B E109                       	smpsAlterNote       $09
0009717D E701                       	dc.b	smpsNoAttack, $01
0009717F E106                       	smpsAlterNote       $06
00097181 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097185 E10C                       	smpsAlterNote       $0C
00097187 E701                       	dc.b	smpsNoAttack, $01
00097189 E110                       	smpsAlterNote       $10
0009718B E701                       	dc.b	smpsNoAttack, $01
0009718D E10F                       	smpsAlterNote       $0F
0009718F E701                       	dc.b	smpsNoAttack, $01
00097191 E109                       	smpsAlterNote       $09
00097193 E701                       	dc.b	smpsNoAttack, $01
00097195 E105                       	smpsAlterNote       $05
00097197 E701                       	dc.b	smpsNoAttack, $01
00097199 E109                       	smpsAlterNote       $09
0009719B E701                       	dc.b	smpsNoAttack, $01
0009719D E10C                       	smpsAlterNote       $0C
0009719F E701                       	dc.b	smpsNoAttack, $01
000971A1 E110                       	smpsAlterNote       $10
000971A3 E701                       	dc.b	smpsNoAttack, $01
000971A5 E10C                       	smpsAlterNote       $0C
000971A7 E701                       	dc.b	smpsNoAttack, $01
000971A9 E106                       	smpsAlterNote       $06
000971AB E701                       	dc.b	smpsNoAttack, $01
000971AD E105                       	smpsAlterNote       $05
000971AF E701                       	dc.b	smpsNoAttack, $01
000971B1 E109                       	smpsAlterNote       $09
000971B3 E701                       	dc.b	smpsNoAttack, $01
000971B5 E10F                       	smpsAlterNote       $0F
000971B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971BB E10C                       	smpsAlterNote       $0C
000971BD E701                       	dc.b	smpsNoAttack, $01
000971BF E10B                       	smpsAlterNote       $0B
000971C1 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
000971CB E10F                       	smpsAlterNote       $0F
000971CD C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000971D7 E10D                       	smpsAlterNote       $0D
000971D9 C203                       	dc.b	nF5, $03
000971DB E10C                       	smpsAlterNote       $0C
000971DD C103 8001                  	dc.b	nE5, $03, nRst, $01
000971E1 E10D                       	smpsAlterNote       $0D
000971E3 C20D                       	dc.b	nF5, $0D
000971E5 E10C                       	smpsAlterNote       $0C
000971E7 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
000971EB E10B                       	smpsAlterNote       $0B
000971ED BF0D                       	dc.b	nD5, $0D
000971EF E108                       	smpsAlterNote       $08
000971F1 E701                       	dc.b	smpsNoAttack, $01
000971F3 E104                       	smpsAlterNote       $04
000971F5 E701                       	dc.b	smpsNoAttack, $01
000971F7 E108                       	smpsAlterNote       $08
000971F9 E701                       	dc.b	smpsNoAttack, $01
000971FB E10E                       	smpsAlterNote       $0E
000971FD E701                       	dc.b	smpsNoAttack, $01
000971FF E10F                       	smpsAlterNote       $0F
00097201 E701                       	dc.b	smpsNoAttack, $01
00097203 E10B                       	smpsAlterNote       $0B
00097205 E701                       	dc.b	smpsNoAttack, $01
00097207 E105                       	smpsAlterNote       $05
00097209 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009720D E108                       	smpsAlterNote       $08
0009720F E701                       	dc.b	smpsNoAttack, $01
00097211 E10E                       	smpsAlterNote       $0E
00097213 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097217 E108                       	smpsAlterNote       $08
00097219 E701                       	dc.b	smpsNoAttack, $01
0009721B E105                       	smpsAlterNote       $05
0009721D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097221 E10B                       	smpsAlterNote       $0B
00097223 E701                       	dc.b	smpsNoAttack, $01
00097225 E10F                       	smpsAlterNote       $0F
00097227 E701                       	dc.b	smpsNoAttack, $01
00097229 E10E                       	smpsAlterNote       $0E
0009722B E701                       	dc.b	smpsNoAttack, $01
0009722D E108                       	smpsAlterNote       $08
0009722F E701                       	dc.b	smpsNoAttack, $01
00097231 E104                       	smpsAlterNote       $04
00097233 E701                       	dc.b	smpsNoAttack, $01
00097235 E108                       	smpsAlterNote       $08
00097237 E701                       	dc.b	smpsNoAttack, $01
00097239 E10B                       	smpsAlterNote       $0B
0009723B E701                       	dc.b	smpsNoAttack, $01
0009723D E10F                       	smpsAlterNote       $0F
0009723F E701                       	dc.b	smpsNoAttack, $01
00097241 E10B                       	smpsAlterNote       $0B
00097243 E701                       	dc.b	smpsNoAttack, $01
00097245 E105                       	smpsAlterNote       $05
00097247 E701                       	dc.b	smpsNoAttack, $01
00097249 E104                       	smpsAlterNote       $04
0009724B E701                       	dc.b	smpsNoAttack, $01
0009724D E108                       	smpsAlterNote       $08
0009724F E701                       	dc.b	smpsNoAttack, $01
00097251 E10E                       	smpsAlterNote       $0E
00097253 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097257 E10B                       	smpsAlterNote       $0B
00097259 E701                       	dc.b	smpsNoAttack, $01
0009725B E105                       	smpsAlterNote       $05
0009725D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097261 E10B                       	smpsAlterNote       $0B
00097263 E701                       	dc.b	smpsNoAttack, $01
00097265 E10E                       	smpsAlterNote       $0E
00097267 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009726B E108                       	smpsAlterNote       $08
0009726D E701                       	dc.b	smpsNoAttack, $01
0009726F E104                       	smpsAlterNote       $04
00097271 E701                       	dc.b	smpsNoAttack, $01
00097273 E105                       	smpsAlterNote       $05
00097275 E701                       	dc.b	smpsNoAttack, $01
00097277 E10B                       	smpsAlterNote       $0B
00097279 E701                       	dc.b	smpsNoAttack, $01
0009727B E10F                       	smpsAlterNote       $0F
0009727D E701                       	dc.b	smpsNoAttack, $01
0009727F E10B                       	smpsAlterNote       $0B
00097281 E701                       	dc.b	smpsNoAttack, $01
00097283 E108                       	smpsAlterNote       $08
00097285 E701                       	dc.b	smpsNoAttack, $01
00097287 E104                       	smpsAlterNote       $04
00097289 E701                       	dc.b	smpsNoAttack, $01
0009728B E108                       	smpsAlterNote       $08
0009728D E701                       	dc.b	smpsNoAttack, $01
0009728F E10E                       	smpsAlterNote       $0E
00097291 E701                       	dc.b	smpsNoAttack, $01
00097293 E10F                       	smpsAlterNote       $0F
00097295 E701                       	dc.b	smpsNoAttack, $01
00097297 E10B                       	smpsAlterNote       $0B
00097299 E701                       	dc.b	smpsNoAttack, $01
0009729B E105                       	smpsAlterNote       $05
0009729D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972A1 E108                       	smpsAlterNote       $08
000972A3 E701                       	dc.b	smpsNoAttack, $01
000972A5 E10E                       	smpsAlterNote       $0E
000972A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972AB E108                       	smpsAlterNote       $08
000972AD E701                       	dc.b	smpsNoAttack, $01
000972AF E105                       	smpsAlterNote       $05
000972B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972B5 E10B                       	smpsAlterNote       $0B
000972B7 E701                       	dc.b	smpsNoAttack, $01
000972B9 E10F                       	smpsAlterNote       $0F
000972BB E701                       	dc.b	smpsNoAttack, $01
000972BD E10E                       	smpsAlterNote       $0E
000972BF E701                       	dc.b	smpsNoAttack, $01
000972C1 E108                       	smpsAlterNote       $08
000972C3 E701                       	dc.b	smpsNoAttack, $01
000972C5 E104                       	smpsAlterNote       $04
000972C7 E701                       	dc.b	smpsNoAttack, $01
000972C9 E108                       	smpsAlterNote       $08
000972CB E701                       	dc.b	smpsNoAttack, $01
000972CD E10B                       	smpsAlterNote       $0B
000972CF E701                       	dc.b	smpsNoAttack, $01
000972D1 E10F                       	smpsAlterNote       $0F
000972D3 E701                       	dc.b	smpsNoAttack, $01
000972D5 E10B                       	smpsAlterNote       $0B
000972D7 E701                       	dc.b	smpsNoAttack, $01
000972D9 E105                       	smpsAlterNote       $05
000972DB E701                       	dc.b	smpsNoAttack, $01
000972DD E104                       	smpsAlterNote       $04
000972DF E701                       	dc.b	smpsNoAttack, $01
000972E1 E105                       	smpsAlterNote       $05
000972E3 8001                       	dc.b	nRst, $01
000972E5 E10D                       	smpsAlterNote       $0D
000972E7 C20D                       	dc.b	nF5, $0D
000972E9 E107                       	smpsAlterNote       $07
000972EB E701                       	dc.b	smpsNoAttack, $01
000972ED E106                       	smpsAlterNote       $06
000972EF E701                       	dc.b	smpsNoAttack, $01
000972F1 E10A                       	smpsAlterNote       $0A
000972F3 E701                       	dc.b	smpsNoAttack, $01
000972F5 E110                       	smpsAlterNote       $10
000972F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972FB E10D                       	smpsAlterNote       $0D
000972FD E701                       	dc.b	smpsNoAttack, $01
000972FF E107                       	smpsAlterNote       $07
00097301 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097305 E10D                       	smpsAlterNote       $0D
00097307 E701                       	dc.b	smpsNoAttack, $01
00097309 E110                       	smpsAlterNote       $10
0009730B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009730F E10A                       	smpsAlterNote       $0A
00097311 E701                       	dc.b	smpsNoAttack, $01
00097313 E106                       	smpsAlterNote       $06
00097315 E701                       	dc.b	smpsNoAttack, $01
00097317 E107                       	smpsAlterNote       $07
00097319 E701                       	dc.b	smpsNoAttack, $01
0009731B E10D                       	smpsAlterNote       $0D
0009731D E701                       	dc.b	smpsNoAttack, $01
0009731F E111                       	smpsAlterNote       $11
00097321 E701                       	dc.b	smpsNoAttack, $01
00097323 E10D                       	smpsAlterNote       $0D
00097325 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097329 E10C                       	smpsAlterNote       $0C
0009732B C10D                       	dc.b	nE5, $0D
0009732D E10D                       	smpsAlterNote       $0D
0009732F C20A                       	dc.b	nF5, $0A
00097331 E10C                       	smpsAlterNote       $0C
00097333 C10E                       	dc.b	nE5, $0E
00097335 E106                       	smpsAlterNote       $06
00097337 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009733B E10C                       	smpsAlterNote       $0C
0009733D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097341 E10B                       	smpsAlterNote       $0B
00097343 BF0D                       	dc.b	nD5, $0D
00097345 E10C                       	smpsAlterNote       $0C
00097347 C107                       	dc.b	nE5, $07
00097349 E10D                       	smpsAlterNote       $0D
0009734B C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00097355 E110                       	smpsAlterNote       $10
00097357 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0009735D E10F                       	smpsAlterNote       $0F
0009735F C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00097367 E10D                       	smpsAlterNote       $0D
00097369 D003                       	dc.b	nG6, $03
0009736D E0C0                       	smpsPan             panCenter, $00
0009736F E6FF                       	smpsAlterVol        $FF
00097371 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0009737D 8001                       	dc.b	nRst, $01
0009737F E10C                       	smpsAlterNote       $0C
00097381 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0009738B E604                       	smpsAlterVol        $04
0009738D E10B                       	smpsAlterNote       $0B
0009738F B306 8001                  	dc.b	nD4, $06, nRst, $01
00097393 E10F                       	smpsAlterNote       $0F
00097395 AE03                       	dc.b	nA3, $03
00097397 E10D                       	smpsAlterNote       $0D
00097399 B603 8001                  	dc.b	nF4, $03, nRst, $01
0009739D E10C                       	smpsAlterNote       $0C
0009739F B506 8001                  	dc.b	nE4, $06, nRst, $01
000973A3 E10B                       	smpsAlterNote       $0B
000973A5 B302 8001                  	dc.b	nD4, $02, nRst, $01
000973A9 E10A                       	smpsAlterNote       $0A
000973AB B103                       	dc.b	nC4, $03
000973AD E110                       	smpsAlterNote       $10
000973AF AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000973B3 E10F                       	smpsAlterNote       $0F
000973B5 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
000973B9 E080                       	smpsPan             panLeft, $00
000973BB 01                         	dc.b	$01
000973BE E6FB                       	smpsAlterVol        $FB
000973C0 E1E4                       	smpsAlterNote       $E4
000973C2 C501                       	dc.b	nAb5, $01
000973C4 E1F4                       	smpsAlterNote       $F4
000973C6 E701                       	dc.b	smpsNoAttack, $01
000973C8 E104                       	smpsAlterNote       $04
000973CA E701                       	dc.b	smpsNoAttack, $01
000973CC E114                       	smpsAlterNote       $14
000973CE E701                       	dc.b	smpsNoAttack, $01
000973D0 E11C                       	smpsAlterNote       $1C
000973D2 E701                       	dc.b	smpsNoAttack, $01
000973D4 E1EF                       	smpsAlterNote       $EF
000973D6 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000973D9 E1FF                       	smpsAlterNote       $FF
000973DB E701                       	dc.b	smpsNoAttack, $01
000973DD E10F                       	smpsAlterNote       $0F
000973DF C606                       	dc.b	nA5, $06
000973E1 E109                       	smpsAlterNote       $09
000973E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973E7 E10F                       	smpsAlterNote       $0F
000973E9 E701                       	dc.b	smpsNoAttack, $01
000973EB E112                       	smpsAlterNote       $12
000973ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973F1 E10C                       	smpsAlterNote       $0C
000973F3 E701                       	dc.b	smpsNoAttack, $01
000973F5 E108                       	smpsAlterNote       $08
000973F7 E701                       	dc.b	smpsNoAttack, $01
000973F9 E109                       	smpsAlterNote       $09
000973FB E701                       	dc.b	smpsNoAttack, $01
000973FD E10F                       	smpsAlterNote       $0F
000973FF E701                       	dc.b	smpsNoAttack, $01
00097401 E113                       	smpsAlterNote       $13
00097403 E701                       	dc.b	smpsNoAttack, $01
00097405 E10F                       	smpsAlterNote       $0F
00097407 E701                       	dc.b	smpsNoAttack, $01
00097409 E10C                       	smpsAlterNote       $0C
0009740B E701                       	dc.b	smpsNoAttack, $01
0009740D E108                       	smpsAlterNote       $08
0009740F E701                       	dc.b	smpsNoAttack, $01
00097411 E10C                       	smpsAlterNote       $0C
00097413 E701                       	dc.b	smpsNoAttack, $01
00097415 E112                       	smpsAlterNote       $12
00097417 E701                       	dc.b	smpsNoAttack, $01
00097419 E113                       	smpsAlterNote       $13
0009741B E701                       	dc.b	smpsNoAttack, $01
0009741D E10F                       	smpsAlterNote       $0F
0009741F E701                       	dc.b	smpsNoAttack, $01
00097421 E109                       	smpsAlterNote       $09
00097423 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097427 E10C                       	smpsAlterNote       $0C
00097429 E701                       	dc.b	smpsNoAttack, $01
0009742B E112                       	smpsAlterNote       $12
0009742D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097431 E10C                       	smpsAlterNote       $0C
00097433 E701                       	dc.b	smpsNoAttack, $01
00097435 E109                       	smpsAlterNote       $09
00097437 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009743B E10F                       	smpsAlterNote       $0F
0009743D E701                       	dc.b	smpsNoAttack, $01
0009743F E113                       	smpsAlterNote       $13
00097441 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097445 E10D                       	smpsAlterNote       $0D
00097447 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0009744D E10C                       	smpsAlterNote       $0C
0009744F C102 8001                  	dc.b	nE5, $02, nRst, $01
00097453 E10D                       	smpsAlterNote       $0D
00097455 C201 8001                  	dc.b	nF5, $01, nRst, $01
00097459 E10C                       	smpsAlterNote       $0C
0009745B C102                       	dc.b	nE5, $02
0009745D E10B                       	smpsAlterNote       $0B
0009745F BF02 8001                  	dc.b	nD5, $02, nRst, $01
00097463 E10C                       	smpsAlterNote       $0C
00097465 C101 8001                  	dc.b	nE5, $01, nRst, $01
00097469 E10B                       	smpsAlterNote       $0B
0009746B BF02                       	dc.b	nD5, $02
0009746D E10A                       	smpsAlterNote       $0A
0009746F BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
00097479 E110                       	smpsAlterNote       $10
0009747B BB02                       	dc.b	nBb4, $02
0009747D E10A                       	smpsAlterNote       $0A
0009747F BD02 8001                  	dc.b	nC5, $02, nRst, $01
00097483 E110                       	smpsAlterNote       $10
00097485 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00097489 E10F                       	smpsAlterNote       $0F
0009748B BA01 8001                  	dc.b	nA4, $01, nRst, $01
0009748F E110                       	smpsAlterNote       $10
00097491 BB02                       	dc.b	nBb4, $02
00097493 E10F                       	smpsAlterNote       $0F
00097495 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0009749F E10C                       	smpsAlterNote       $0C
000974A1 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
000974A9 E10B                       	smpsAlterNote       $0B
000974AB BE01 8001                  	dc.b	nCs5, $01, nRst, $01
000974AF E10F                       	smpsAlterNote       $0F
000974B1 BA02                       	dc.b	nA4, $02
000974B5 E0C0                       	smpsPan             panCenter, $00
000974B7 E601                       	smpsAlterVol        $01
000974B9 E109                       	smpsAlterNote       $09
000974BB AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
000974C7 E108                       	smpsAlterNote       $08
000974C9 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
000974CF E107                       	smpsAlterNote       $07
000974D1 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
000974D7 E109                       	smpsAlterNote       $09
000974D9 B603 8001                  	dc.b	nF4, $03, nRst, $01
000974DD E108                       	smpsAlterNote       $08
000974DF B506 8001                  	dc.b	nE4, $06, nRst, $01
000974E3 E107                       	smpsAlterNote       $07
000974E5 B302 8001                  	dc.b	nD4, $02, nRst, $01
000974E9 E106                       	smpsAlterNote       $06
000974EB B103                       	dc.b	nC4, $03
000974ED E10C                       	smpsAlterNote       $0C
000974EF AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000974F5 E080                       	smpsPan             panLeft, $00
000974F7 07                         	dc.b	$07
000974F8 E6FE                       	smpsAlterVol        $FE
000974FA E10B                       	smpsAlterNote       $0B
000974FC B20D                       	dc.b	nCs4, $0D
000974FE E105                       	smpsAlterNote       $05
00097500 E701                       	dc.b	smpsNoAttack, $01
00097502 E104                       	smpsAlterNote       $04
00097504 E701                       	dc.b	smpsNoAttack, $01
00097506 E108                       	smpsAlterNote       $08
00097508 E701                       	dc.b	smpsNoAttack, $01
0009750A E10E                       	smpsAlterNote       $0E
0009750C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097510 E10B                       	smpsAlterNote       $0B
00097512 E701                       	dc.b	smpsNoAttack, $01
00097514 E105                       	smpsAlterNote       $05
00097516 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009751A E10B                       	smpsAlterNote       $0B
0009751C E701                       	dc.b	smpsNoAttack, $01
0009751E E10E                       	smpsAlterNote       $0E
00097520 E701                       	dc.b	smpsNoAttack, $01
00097522 E10F                       	smpsAlterNote       $0F
00097524 8001                       	dc.b	nRst, $01
00097526 E10B                       	smpsAlterNote       $0B
00097528 B30D                       	dc.b	nD4, $0D
0009752A E105                       	smpsAlterNote       $05
0009752C E701                       	dc.b	smpsNoAttack, $01
0009752E E104                       	smpsAlterNote       $04
00097530 E701                       	dc.b	smpsNoAttack, $01
00097532 E108                       	smpsAlterNote       $08
00097534 E701                       	dc.b	smpsNoAttack, $01
00097536 E10E                       	smpsAlterNote       $0E
00097538 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009753C E10B                       	smpsAlterNote       $0B
0009753E E701                       	dc.b	smpsNoAttack, $01
00097540 E105                       	smpsAlterNote       $05
00097542 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097546 E10B                       	smpsAlterNote       $0B
00097548 E701                       	dc.b	smpsNoAttack, $01
0009754A E10E                       	smpsAlterNote       $0E
0009754C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097550 E108                       	smpsAlterNote       $08
00097552 E701                       	dc.b	smpsNoAttack, $01
00097554 E104                       	smpsAlterNote       $04
00097556 E701                       	dc.b	smpsNoAttack, $01
00097558 E105                       	smpsAlterNote       $05
0009755A E701                       	dc.b	smpsNoAttack, $01
0009755C E10B                       	smpsAlterNote       $0B
0009755E E701                       	dc.b	smpsNoAttack, $01
00097560 E10F                       	smpsAlterNote       $0F
00097562 E701                       	dc.b	smpsNoAttack, $01
00097564 E10B                       	smpsAlterNote       $0B
00097566 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009756A E10C                       	smpsAlterNote       $0C
0009756C B50D                       	dc.b	nE4, $0D
0009756E E106                       	smpsAlterNote       $06
00097570 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097574 E10C                       	smpsAlterNote       $0C
00097576 E701                       	dc.b	smpsNoAttack, $01
00097578 E10F                       	smpsAlterNote       $0F
0009757A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009757E E109                       	smpsAlterNote       $09
00097580 E701                       	dc.b	smpsNoAttack, $01
00097582 E105                       	smpsAlterNote       $05
00097584 E701                       	dc.b	smpsNoAttack, $01
00097586 E106                       	smpsAlterNote       $06
00097588 E701                       	dc.b	smpsNoAttack, $01
0009758A E10C                       	smpsAlterNote       $0C
0009758C E701                       	dc.b	smpsNoAttack, $01
0009758E E110                       	smpsAlterNote       $10
00097590 E701                       	dc.b	smpsNoAttack, $01
00097592 E10B                       	smpsAlterNote       $0B
00097594 B30E                       	dc.b	nD4, $0E
00097596 E105                       	smpsAlterNote       $05
00097598 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009759C E10B                       	smpsAlterNote       $0B
0009759E E701                       	dc.b	smpsNoAttack, $01
000975A0 E10E                       	smpsAlterNote       $0E
000975A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975A6 E108                       	smpsAlterNote       $08
000975A8 E701                       	dc.b	smpsNoAttack, $01
000975AA E104                       	smpsAlterNote       $04
000975AC E701                       	dc.b	smpsNoAttack, $01
000975AE E105                       	smpsAlterNote       $05
000975B0 E701                       	dc.b	smpsNoAttack, $01
000975B2 E10B                       	smpsAlterNote       $0B
000975B4 E701                       	dc.b	smpsNoAttack, $01
000975B6 E10F                       	smpsAlterNote       $0F
000975B8 E701                       	dc.b	smpsNoAttack, $01
000975BA E10B                       	smpsAlterNote       $0B
000975BC E701                       	dc.b	smpsNoAttack, $01
000975BE E108                       	smpsAlterNote       $08
000975C0 E701                       	dc.b	smpsNoAttack, $01
000975C2 E104                       	smpsAlterNote       $04
000975C4 E701                       	dc.b	smpsNoAttack, $01
000975C6 E108                       	smpsAlterNote       $08
000975C8 E701                       	dc.b	smpsNoAttack, $01
000975CA E10E                       	smpsAlterNote       $0E
000975CC E701                       	dc.b	smpsNoAttack, $01
000975CE E10F                       	smpsAlterNote       $0F
000975D0 E701                       	dc.b	smpsNoAttack, $01
000975D2 E10B                       	smpsAlterNote       $0B
000975D4 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000975D8 E108                       	smpsAlterNote       $08
000975DA E701                       	dc.b	smpsNoAttack, $01
000975DC E105                       	smpsAlterNote       $05
000975DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975E2 E10B                       	smpsAlterNote       $0B
000975E4 E701                       	dc.b	smpsNoAttack, $01
000975E6 E10F                       	smpsAlterNote       $0F
000975E8 E701                       	dc.b	smpsNoAttack, $01
000975EA E10E                       	smpsAlterNote       $0E
000975EC E701                       	dc.b	smpsNoAttack, $01
000975EE E108                       	smpsAlterNote       $08
000975F0 E701                       	dc.b	smpsNoAttack, $01
000975F2 E104                       	smpsAlterNote       $04
000975F4 E701                       	dc.b	smpsNoAttack, $01
000975F6 E108                       	smpsAlterNote       $08
000975F8 E701                       	dc.b	smpsNoAttack, $01
000975FA E10B                       	smpsAlterNote       $0B
000975FC E701                       	dc.b	smpsNoAttack, $01
000975FE E10F                       	smpsAlterNote       $0F
00097600 E701                       	dc.b	smpsNoAttack, $01
00097602 E10B                       	smpsAlterNote       $0B
00097604 B30D                       	dc.b	nD4, $0D
00097606 E108                       	smpsAlterNote       $08
00097608 E701                       	dc.b	smpsNoAttack, $01
0009760A E105                       	smpsAlterNote       $05
0009760C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097610 E10B                       	smpsAlterNote       $0B
00097612 E701                       	dc.b	smpsNoAttack, $01
00097614 E10F                       	smpsAlterNote       $0F
00097616 E701                       	dc.b	smpsNoAttack, $01
00097618 E10E                       	smpsAlterNote       $0E
0009761A E701                       	dc.b	smpsNoAttack, $01
0009761C E108                       	smpsAlterNote       $08
0009761E E701                       	dc.b	smpsNoAttack, $01
00097620 E104                       	smpsAlterNote       $04
00097622 E701                       	dc.b	smpsNoAttack, $01
00097624 E108                       	smpsAlterNote       $08
00097626 E701                       	dc.b	smpsNoAttack, $01
00097628 E10B                       	smpsAlterNote       $0B
0009762A E701                       	dc.b	smpsNoAttack, $01
0009762C E10F                       	smpsAlterNote       $0F
0009762E E701                       	dc.b	smpsNoAttack, $01
00097630 E10B                       	smpsAlterNote       $0B
00097632 E701                       	dc.b	smpsNoAttack, $01
00097634 E105                       	smpsAlterNote       $05
00097636 E701                       	dc.b	smpsNoAttack, $01
00097638 E104                       	smpsAlterNote       $04
0009763A E701                       	dc.b	smpsNoAttack, $01
0009763C E108                       	smpsAlterNote       $08
0009763E E701                       	dc.b	smpsNoAttack, $01
00097640 E10E                       	smpsAlterNote       $0E
00097642 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097646 E10B                       	smpsAlterNote       $0B
00097648 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0009764C E108                       	smpsAlterNote       $08
0009764E E701                       	dc.b	smpsNoAttack, $01
00097650 E104                       	smpsAlterNote       $04
00097652 E701                       	dc.b	smpsNoAttack, $01
00097654 E108                       	smpsAlterNote       $08
00097656 E701                       	dc.b	smpsNoAttack, $01
00097658 E10B                       	smpsAlterNote       $0B
0009765A E701                       	dc.b	smpsNoAttack, $01
0009765E E0C0                       	smpsPan             panCenter, $00
00097660 E601                       	smpsAlterVol        $01
00097662 E108                       	smpsAlterNote       $08
00097664 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
00097670 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
00097678 E080                       	smpsPan             panLeft, $00
0009767A 07                         	dc.b	$07
0009767B E6FF                       	smpsAlterVol        $FF
0009767D E10D                       	smpsAlterNote       $0D
0009767F B60D                       	dc.b	nF4, $0D
00097681 E10A                       	smpsAlterNote       $0A
00097683 E701                       	dc.b	smpsNoAttack, $01
00097685 E106                       	smpsAlterNote       $06
00097687 E701                       	dc.b	smpsNoAttack, $01
00097689 E10A                       	smpsAlterNote       $0A
0009768B E701                       	dc.b	smpsNoAttack, $01
0009768D E110                       	smpsAlterNote       $10
0009768F E701                       	dc.b	smpsNoAttack, $01
00097691 E111                       	smpsAlterNote       $11
00097693 E701                       	dc.b	smpsNoAttack, $01
00097695 E10D                       	smpsAlterNote       $0D
00097697 E701                       	dc.b	smpsNoAttack, $01
00097699 E107                       	smpsAlterNote       $07
0009769B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009769F E10A                       	smpsAlterNote       $0A
000976A1 E701                       	dc.b	smpsNoAttack, $01
000976A3 E110                       	smpsAlterNote       $10
000976A5 E701                       	dc.b	smpsNoAttack, $01
000976A7 E111                       	smpsAlterNote       $11
000976A9 8001                       	dc.b	nRst, $01
000976AB E10D                       	smpsAlterNote       $0D
000976AD B80D                       	dc.b	nG4, $0D
000976AF E10A                       	smpsAlterNote       $0A
000976B1 E701                       	dc.b	smpsNoAttack, $01
000976B3 E106                       	smpsAlterNote       $06
000976B5 E701                       	dc.b	smpsNoAttack, $01
000976B7 E10A                       	smpsAlterNote       $0A
000976B9 E701                       	dc.b	smpsNoAttack, $01
000976BB E110                       	smpsAlterNote       $10
000976BD E701                       	dc.b	smpsNoAttack, $01
000976BF E111                       	smpsAlterNote       $11
000976C1 E701                       	dc.b	smpsNoAttack, $01
000976C3 E10D                       	smpsAlterNote       $0D
000976C5 E701                       	dc.b	smpsNoAttack, $01
000976C7 E107                       	smpsAlterNote       $07
000976C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976CD E10D                       	smpsAlterNote       $0D
000976CF E701                       	dc.b	smpsNoAttack, $01
000976D1 E110                       	smpsAlterNote       $10
000976D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976D7 E10A                       	smpsAlterNote       $0A
000976D9 E701                       	dc.b	smpsNoAttack, $01
000976DB E106                       	smpsAlterNote       $06
000976DD E701                       	dc.b	smpsNoAttack, $01
000976DF E107                       	smpsAlterNote       $07
000976E1 E701                       	dc.b	smpsNoAttack, $01
000976E3 E10D                       	smpsAlterNote       $0D
000976E5 E701                       	dc.b	smpsNoAttack, $01
000976E7 E111                       	smpsAlterNote       $11
000976E9 E701                       	dc.b	smpsNoAttack, $01
000976EB E10D                       	smpsAlterNote       $0D
000976ED E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000976F1 E10F                       	smpsAlterNote       $0F
000976F3 BA0D                       	dc.b	nA4, $0D
000976F5 E109                       	smpsAlterNote       $09
000976F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976FB E10C                       	smpsAlterNote       $0C
000976FD E701                       	dc.b	smpsNoAttack, $01
000976FF E112                       	smpsAlterNote       $12
00097701 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097705 E10C                       	smpsAlterNote       $0C
00097707 E701                       	dc.b	smpsNoAttack, $01
00097709 E109                       	smpsAlterNote       $09
0009770B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009770F E10F                       	smpsAlterNote       $0F
00097711 E701                       	dc.b	smpsNoAttack, $01
00097713 E113                       	smpsAlterNote       $13
00097715 E701                       	dc.b	smpsNoAttack, $01
00097717 E112                       	smpsAlterNote       $12
00097719 E701                       	dc.b	smpsNoAttack, $01
0009771B E10C                       	smpsAlterNote       $0C
0009771D E701                       	dc.b	smpsNoAttack, $01
0009771F E108                       	smpsAlterNote       $08
00097721 E701                       	dc.b	smpsNoAttack, $01
00097723 E10C                       	smpsAlterNote       $0C
00097725 E701                       	dc.b	smpsNoAttack, $01
00097727 E10F                       	smpsAlterNote       $0F
00097729 E701                       	dc.b	smpsNoAttack, $01
0009772B E113                       	smpsAlterNote       $13
0009772D E701                       	dc.b	smpsNoAttack, $01
0009772F E10F                       	smpsAlterNote       $0F
00097731 E701                       	dc.b	smpsNoAttack, $01
00097733 E109                       	smpsAlterNote       $09
00097735 E701                       	dc.b	smpsNoAttack, $01
00097737 E108                       	smpsAlterNote       $08
00097739 E701                       	dc.b	smpsNoAttack, $01
0009773B E10C                       	smpsAlterNote       $0C
0009773D E701                       	dc.b	smpsNoAttack, $01
0009773F E112                       	smpsAlterNote       $12
00097741 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097745 E10F                       	smpsAlterNote       $0F
00097747 E701                       	dc.b	smpsNoAttack, $01
00097749 E109                       	smpsAlterNote       $09
0009774B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009774F E10F                       	smpsAlterNote       $0F
00097751 E701                       	dc.b	smpsNoAttack, $01
00097753 E112                       	smpsAlterNote       $12
00097755 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097759 E10C                       	smpsAlterNote       $0C
0009775B E701                       	dc.b	smpsNoAttack, $01
0009775D E108                       	smpsAlterNote       $08
0009775F E701                       	dc.b	smpsNoAttack, $01
00097761 E109                       	smpsAlterNote       $09
00097763 E701                       	dc.b	smpsNoAttack, $01
00097765 E10C                       	smpsAlterNote       $0C
00097767 B50A                       	dc.b	nE4, $0A
00097769 E10D                       	smpsAlterNote       $0D
0009776B B60E                       	dc.b	nF4, $0E
0009776D E107                       	smpsAlterNote       $07
0009776F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097773 E10D                       	smpsAlterNote       $0D
00097775 E701                       	dc.b	smpsNoAttack, $01
00097777 E110                       	smpsAlterNote       $10
00097779 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009777D E10A                       	smpsAlterNote       $0A
0009777F E701                       	dc.b	smpsNoAttack, $01
00097781 E106                       	smpsAlterNote       $06
00097783 E701                       	dc.b	smpsNoAttack, $01
00097785 E107                       	smpsAlterNote       $07
00097787 E701                       	dc.b	smpsNoAttack, $01
00097789 E10D                       	smpsAlterNote       $0D
0009778B E701                       	dc.b	smpsNoAttack, $01
0009778D E111                       	smpsAlterNote       $11
0009778F E701                       	dc.b	smpsNoAttack, $01
00097791 E10D                       	smpsAlterNote       $0D
00097793 B80D                       	dc.b	nG4, $0D
00097795 E10A                       	smpsAlterNote       $0A
00097797 E701                       	dc.b	smpsNoAttack, $01
00097799 E107                       	smpsAlterNote       $07
0009779B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009779F E10D                       	smpsAlterNote       $0D
000977A1 E701                       	dc.b	smpsNoAttack, $01
000977A3 E111                       	smpsAlterNote       $11
000977A5 E701                       	dc.b	smpsNoAttack, $01
000977A7 E110                       	smpsAlterNote       $10
000977A9 E701                       	dc.b	smpsNoAttack, $01
000977AB E10A                       	smpsAlterNote       $0A
000977AD E701                       	dc.b	smpsNoAttack, $01
000977AF E106                       	smpsAlterNote       $06
000977B1 E701                       	dc.b	smpsNoAttack, $01
000977B3 E10A                       	smpsAlterNote       $0A
000977B5 E701                       	dc.b	smpsNoAttack, $01
000977B7 E10D                       	smpsAlterNote       $0D
000977B9 E701                       	dc.b	smpsNoAttack, $01
000977BB E111                       	smpsAlterNote       $11
000977BD E701                       	dc.b	smpsNoAttack, $01
000977BF E10D                       	smpsAlterNote       $0D
000977C1 E701                       	dc.b	smpsNoAttack, $01
000977C3 E107                       	smpsAlterNote       $07
000977C5 E701                       	dc.b	smpsNoAttack, $01
000977C7 E106                       	smpsAlterNote       $06
000977C9 E701                       	dc.b	smpsNoAttack, $01
000977CB E10A                       	smpsAlterNote       $0A
000977CD E701                       	dc.b	smpsNoAttack, $01
000977CF E110                       	smpsAlterNote       $10
000977D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000977D5 E10D                       	smpsAlterNote       $0D
000977D7 E701                       	dc.b	smpsNoAttack, $01
000977D9 E10F                       	smpsAlterNote       $0F
000977DB BA0D                       	dc.b	nA4, $0D
000977DD E10C                       	smpsAlterNote       $0C
000977DF E701                       	dc.b	smpsNoAttack, $01
000977E1 E108                       	smpsAlterNote       $08
000977E3 E701                       	dc.b	smpsNoAttack, $01
000977E5 E109                       	smpsAlterNote       $09
000977E7 E701                       	dc.b	smpsNoAttack, $01
000977E9 E10F                       	smpsAlterNote       $0F
000977EB E701                       	dc.b	smpsNoAttack, $01
000977ED E113                       	smpsAlterNote       $13
000977EF E701                       	dc.b	smpsNoAttack, $01
000977F1 E10F                       	smpsAlterNote       $0F
000977F3 E701                       	dc.b	smpsNoAttack, $01
000977F5 E10C                       	smpsAlterNote       $0C
000977F7 E701                       	dc.b	smpsNoAttack, $01
000977F9 E108                       	smpsAlterNote       $08
000977FB E701                       	dc.b	smpsNoAttack, $01
000977FD E10C                       	smpsAlterNote       $0C
000977FF E701                       	dc.b	smpsNoAttack, $01
00097801 E112                       	smpsAlterNote       $12
00097803 E701                       	dc.b	smpsNoAttack, $01
00097805 E113                       	smpsAlterNote       $13
00097807 E701                       	dc.b	smpsNoAttack, $01
00097809 E10F                       	smpsAlterNote       $0F
0009780B E701                       	dc.b	smpsNoAttack, $01
0009780D E109                       	smpsAlterNote       $09
0009780F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097813 E10C                       	smpsAlterNote       $0C
00097815 E701                       	dc.b	smpsNoAttack, $01
00097817 E112                       	smpsAlterNote       $12
00097819 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009781D E10C                       	smpsAlterNote       $0C
0009781F E701                       	dc.b	smpsNoAttack, $01
00097821 E109                       	smpsAlterNote       $09
00097823 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097827 E10F                       	smpsAlterNote       $0F
00097829 E701                       	dc.b	smpsNoAttack, $01
0009782B E113                       	smpsAlterNote       $13
0009782D E701                       	dc.b	smpsNoAttack, $01
0009782F E112                       	smpsAlterNote       $12
00097831 E701                       	dc.b	smpsNoAttack, $01
00097833 E10C                       	smpsAlterNote       $0C
00097835 E701                       	dc.b	smpsNoAttack, $01
00097837 E109                       	smpsAlterNote       $09
00097839 8001                       	dc.b	nRst, $01
0009783B E10D                       	smpsAlterNote       $0D
0009783D B60A                       	dc.b	nF4, $0A
0009783F E10C                       	smpsAlterNote       $0C
00097841 B506 8001                  	dc.b	nE4, $06, nRst, $01
00097845 E10B                       	smpsAlterNote       $0B
00097847 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0009784B E10C                       	smpsAlterNote       $0C
0009784D B503                       	dc.b	nE4, $03
0009784F E10D                       	smpsAlterNote       $0D
00097851 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0009785B E10C                       	smpsAlterNote       $0C
0009785D E701                       	dc.b	smpsNoAttack, $01
0009785F E108                       	smpsAlterNote       $08
00097861 E701                       	dc.b	smpsNoAttack, $01
00097863 E10C                       	smpsAlterNote       $0C
00097865 E701                       	dc.b	smpsNoAttack, $01
00097867 E112                       	smpsAlterNote       $12
00097869 E701                       	dc.b	smpsNoAttack, $01
0009786B E113                       	smpsAlterNote       $13
0009786D E701                       	dc.b	smpsNoAttack, $01
0009786F E10F                       	smpsAlterNote       $0F
00097871 E701                       	dc.b	smpsNoAttack, $01
00097873 E109                       	smpsAlterNote       $09
00097875 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097879 E10C                       	smpsAlterNote       $0C
0009787B E701                       	dc.b	smpsNoAttack, $01
0009787D E112                       	smpsAlterNote       $12
0009787F E701                       	dc.b	smpsNoAttack, $01
00097881 E113                       	smpsAlterNote       $13
00097883 8001                       	dc.b	nRst, $01
00097885 E10D                       	smpsAlterNote       $0D
00097887 C20D                       	dc.b	nF5, $0D
00097889 E10A                       	smpsAlterNote       $0A
0009788B E701                       	dc.b	smpsNoAttack, $01
0009788D E106                       	smpsAlterNote       $06
0009788F E701                       	dc.b	smpsNoAttack, $01
00097891 E10A                       	smpsAlterNote       $0A
00097893 E701                       	dc.b	smpsNoAttack, $01
00097895 E110                       	smpsAlterNote       $10
00097897 E701                       	dc.b	smpsNoAttack, $01
00097899 E111                       	smpsAlterNote       $11
0009789B E701                       	dc.b	smpsNoAttack, $01
0009789D E10D                       	smpsAlterNote       $0D
0009789F E701                       	dc.b	smpsNoAttack, $01
000978A1 E107                       	smpsAlterNote       $07
000978A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978A7 E10A                       	smpsAlterNote       $0A
000978A9 E701                       	dc.b	smpsNoAttack, $01
000978AB E110                       	smpsAlterNote       $10
000978AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978B1 E10A                       	smpsAlterNote       $0A
000978B3 E701                       	dc.b	smpsNoAttack, $01
000978B5 E107                       	smpsAlterNote       $07
000978B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978BB E10D                       	smpsAlterNote       $0D
000978BD E701                       	dc.b	smpsNoAttack, $01
000978BF E111                       	smpsAlterNote       $11
000978C1 E701                       	dc.b	smpsNoAttack, $01
000978C3 E110                       	smpsAlterNote       $10
000978C5 E701                       	dc.b	smpsNoAttack, $01
000978C7 E10A                       	smpsAlterNote       $0A
000978C9 E701                       	dc.b	smpsNoAttack, $01
000978CB E106                       	smpsAlterNote       $06
000978CD E701                       	dc.b	smpsNoAttack, $01
000978CF E10A                       	smpsAlterNote       $0A
000978D1 E701                       	dc.b	smpsNoAttack, $01
000978D3 E10D                       	smpsAlterNote       $0D
000978D5 E701                       	dc.b	smpsNoAttack, $01
000978D7 E111                       	smpsAlterNote       $11
000978D9 E701                       	dc.b	smpsNoAttack, $01
000978DB E10D                       	smpsAlterNote       $0D
000978DD E701                       	dc.b	smpsNoAttack, $01
000978DF E107                       	smpsAlterNote       $07
000978E1 E701                       	dc.b	smpsNoAttack, $01
000978E3 E106                       	smpsAlterNote       $06
000978E5 E701                       	dc.b	smpsNoAttack, $01
000978E7 E10A                       	smpsAlterNote       $0A
000978E9 E701                       	dc.b	smpsNoAttack, $01
000978EB E110                       	smpsAlterNote       $10
000978ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978F1 E10D                       	smpsAlterNote       $0D
000978F3 E701                       	dc.b	smpsNoAttack, $01
000978F5 E107                       	smpsAlterNote       $07
000978F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978FB E10D                       	smpsAlterNote       $0D
000978FD E701                       	dc.b	smpsNoAttack, $01
000978FF E110                       	smpsAlterNote       $10
00097901 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097905 E10A                       	smpsAlterNote       $0A
00097907 E701                       	dc.b	smpsNoAttack, $01
00097909 E106                       	smpsAlterNote       $06
0009790B E701                       	dc.b	smpsNoAttack, $01
0009790D E107                       	smpsAlterNote       $07
0009790F E701                       	dc.b	smpsNoAttack, $01
00097911 E10D                       	smpsAlterNote       $0D
00097913 E701                       	dc.b	smpsNoAttack, $01
00097915 E111                       	smpsAlterNote       $11
00097917 E701                       	dc.b	smpsNoAttack, $01
00097919 E10D                       	smpsAlterNote       $0D
0009791B E701                       	dc.b	smpsNoAttack, $01
0009791D E10A                       	smpsAlterNote       $0A
0009791F E701                       	dc.b	smpsNoAttack, $01
00097921 E107                       	smpsAlterNote       $07
00097923 8001                       	dc.b	nRst, $01
00097925 E10D                       	smpsAlterNote       $0D
00097927 C206 8001                  	dc.b	nF5, $06, nRst, $01
0009792D E601                       	smpsAlterVol        $01
0009792F E110                       	smpsAlterNote       $10
00097931 BB0D                       	dc.b	nBb4, $0D
00097933 E10A                       	smpsAlterNote       $0A
00097935 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097939 E110                       	smpsAlterNote       $10
0009793B E701                       	dc.b	smpsNoAttack, $01
0009793D E113                       	smpsAlterNote       $13
0009793F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097943 E10D                       	smpsAlterNote       $0D
00097945 E701                       	dc.b	smpsNoAttack, $01
00097947 E109                       	smpsAlterNote       $09
00097949 E701                       	dc.b	smpsNoAttack, $01
0009794B E10A                       	smpsAlterNote       $0A
0009794D E701                       	dc.b	smpsNoAttack, $01
0009794F E110                       	smpsAlterNote       $10
00097951 E701                       	dc.b	smpsNoAttack, $01
00097953 E114                       	smpsAlterNote       $14
00097955 E701                       	dc.b	smpsNoAttack, $01
00097957 E110                       	smpsAlterNote       $10
00097959 E701                       	dc.b	smpsNoAttack, $01
0009795B E10D                       	smpsAlterNote       $0D
0009795D E701                       	dc.b	smpsNoAttack, $01
0009795F E109                       	smpsAlterNote       $09
00097961 E701                       	dc.b	smpsNoAttack, $01
00097963 E10A                       	smpsAlterNote       $0A
00097965 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00097969 E107                       	smpsAlterNote       $07
0009796B E701                       	dc.b	smpsNoAttack, $01
0009796D E103                       	smpsAlterNote       $03
0009796F E701                       	dc.b	smpsNoAttack, $01
00097971 E107                       	smpsAlterNote       $07
00097973 E701                       	dc.b	smpsNoAttack, $01
00097975 E10D                       	smpsAlterNote       $0D
00097977 E701                       	dc.b	smpsNoAttack, $01
00097979 E10E                       	smpsAlterNote       $0E
0009797B E701                       	dc.b	smpsNoAttack, $01
0009797D E10A                       	smpsAlterNote       $0A
0009797F E701                       	dc.b	smpsNoAttack, $01
00097981 E104                       	smpsAlterNote       $04
00097983 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097987 E107                       	smpsAlterNote       $07
00097989 E701                       	dc.b	smpsNoAttack, $01
0009798B E10D                       	smpsAlterNote       $0D
0009798D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097991 E107                       	smpsAlterNote       $07
00097993 E701                       	dc.b	smpsNoAttack, $01
00097995 E104                       	smpsAlterNote       $04
00097997 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009799B E10B                       	smpsAlterNote       $0B
0009799D BF0D                       	dc.b	nD5, $0D
0009799F E108                       	smpsAlterNote       $08
000979A1 E701                       	dc.b	smpsNoAttack, $01
000979A3 E105                       	smpsAlterNote       $05
000979A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000979A9 E10B                       	smpsAlterNote       $0B
000979AB E701                       	dc.b	smpsNoAttack, $01
000979AD E10F                       	smpsAlterNote       $0F
000979AF E701                       	dc.b	smpsNoAttack, $01
000979B1 E10E                       	smpsAlterNote       $0E
000979B3 E701                       	dc.b	smpsNoAttack, $01
000979B5 E108                       	smpsAlterNote       $08
000979B7 E701                       	dc.b	smpsNoAttack, $01
000979B9 E104                       	smpsAlterNote       $04
000979BB E701                       	dc.b	smpsNoAttack, $01
000979BD E108                       	smpsAlterNote       $08
000979BF E701                       	dc.b	smpsNoAttack, $01
000979C1 E10B                       	smpsAlterNote       $0B
000979C3 E701                       	dc.b	smpsNoAttack, $01
000979C5 E10F                       	smpsAlterNote       $0F
000979C7 E701                       	dc.b	smpsNoAttack, $01
000979C9 E10B                       	smpsAlterNote       $0B
000979CB E701                       	dc.b	smpsNoAttack, $01
000979CD E105                       	smpsAlterNote       $05
000979CF E701                       	dc.b	smpsNoAttack, $01
000979D1 E104                       	smpsAlterNote       $04
000979D3 E701                       	dc.b	smpsNoAttack, $01
000979D5 E105                       	smpsAlterNote       $05
000979D7 8001                       	dc.b	nRst, $01
000979D9 E10C                       	smpsAlterNote       $0C
000979DB C10C                       	dc.b	nE5, $0C
000979DD E10D                       	smpsAlterNote       $0D
000979DF C201                       	dc.b	nF5, $01
000979E1 E10E                       	smpsAlterNote       $0E
000979E3 C301 8001                  	dc.b	nFs5, $01, nRst, $01
000979E7 E10D                       	smpsAlterNote       $0D
000979E9 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000979ED E10A                       	smpsAlterNote       $0A
000979EF E701                       	dc.b	smpsNoAttack, $01
000979F1 E106                       	smpsAlterNote       $06
000979F3 E701                       	dc.b	smpsNoAttack, $01
000979F5 E10A                       	smpsAlterNote       $0A
000979F7 E701                       	dc.b	smpsNoAttack, $01
000979F9 E10D                       	smpsAlterNote       $0D
000979FB E701                       	dc.b	smpsNoAttack, $01
000979FD E111                       	smpsAlterNote       $11
000979FF E701                       	dc.b	smpsNoAttack, $01
00097A01 E10D                       	smpsAlterNote       $0D
00097A03 E701                       	dc.b	smpsNoAttack, $01
00097A05 E107                       	smpsAlterNote       $07
00097A07 E701                       	dc.b	smpsNoAttack, $01
00097A09 E106                       	smpsAlterNote       $06
00097A0B E701                       	dc.b	smpsNoAttack, $01
00097A0D E10A                       	smpsAlterNote       $0A
00097A0F E701                       	dc.b	smpsNoAttack, $01
00097A11 E110                       	smpsAlterNote       $10
00097A13 E701                       	dc.b	smpsNoAttack, $01
00097A15 E111                       	smpsAlterNote       $11
00097A17 8001                       	dc.b	nRst, $01
00097A19 E10D                       	smpsAlterNote       $0D
00097A1B C40D                       	dc.b	nG5, $0D
00097A1D E10A                       	smpsAlterNote       $0A
00097A1F E701                       	dc.b	smpsNoAttack, $01
00097A21 E106                       	smpsAlterNote       $06
00097A23 E701                       	dc.b	smpsNoAttack, $01
00097A25 E10A                       	smpsAlterNote       $0A
00097A27 E701                       	dc.b	smpsNoAttack, $01
00097A29 E10D                       	smpsAlterNote       $0D
00097A2B E701                       	dc.b	smpsNoAttack, $01
00097A2D E10C                       	smpsAlterNote       $0C
00097A2F C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
00097A3B 8001                       	dc.b	nRst, $01
00097A3D E10D                       	smpsAlterNote       $0D
00097A3F C20D                       	dc.b	nF5, $0D
00097A41 E10A                       	smpsAlterNote       $0A
00097A43 E701                       	dc.b	smpsNoAttack, $01
00097A45 E106                       	smpsAlterNote       $06
00097A47 E701                       	dc.b	smpsNoAttack, $01
00097A49 E10A                       	smpsAlterNote       $0A
00097A4B E701                       	dc.b	smpsNoAttack, $01
00097A4D E110                       	smpsAlterNote       $10
00097A4F E701                       	dc.b	smpsNoAttack, $01
00097A51 E111                       	smpsAlterNote       $11
00097A53 E701                       	dc.b	smpsNoAttack, $01
00097A55 E10D                       	smpsAlterNote       $0D
00097A57 E701                       	dc.b	smpsNoAttack, $01
00097A59 E107                       	smpsAlterNote       $07
00097A5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A5F E10A                       	smpsAlterNote       $0A
00097A61 E701                       	dc.b	smpsNoAttack, $01
00097A63 E110                       	smpsAlterNote       $10
00097A65 E701                       	dc.b	smpsNoAttack, $01
00097A67 E111                       	smpsAlterNote       $11
00097A69 8001                       	dc.b	nRst, $01
00097A6B E10F                       	smpsAlterNote       $0F
00097A6D C60A                       	dc.b	nA5, $0A
00097A6F E10D                       	smpsAlterNote       $0D
00097A71 C406 8001                  	dc.b	nG5, $06, nRst, $01
00097A75 E10C                       	smpsAlterNote       $0C
00097A77 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00097A83 8001                       	dc.b	nRst, $01
00097A85 E10D                       	smpsAlterNote       $0D
00097A87 C20D                       	dc.b	nF5, $0D
00097A89 E107                       	smpsAlterNote       $07
00097A8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A8F E10A                       	smpsAlterNote       $0A
00097A91 E701                       	dc.b	smpsNoAttack, $01
00097A93 E110                       	smpsAlterNote       $10
00097A95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A99 E10A                       	smpsAlterNote       $0A
00097A9B E701                       	dc.b	smpsNoAttack, $01
00097A9D E107                       	smpsAlterNote       $07
00097A9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097AA3 E10D                       	smpsAlterNote       $0D
00097AA5 E701                       	dc.b	smpsNoAttack, $01
00097AA7 E111                       	smpsAlterNote       $11
00097AA9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097AAD E10D                       	smpsAlterNote       $0D
00097AAF C40D                       	dc.b	nG5, $0D
00097AB1 E107                       	smpsAlterNote       $07
00097AB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097AB7 E10A                       	smpsAlterNote       $0A
00097AB9 E701                       	dc.b	smpsNoAttack, $01
00097ABB E10D                       	smpsAlterNote       $0D
00097ABD 8001                       	dc.b	nRst, $01
00097ABF E10C                       	smpsAlterNote       $0C
00097AC1 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00097ACD E10D                       	smpsAlterNote       $0D
00097ACF C20E                       	dc.b	nF5, $0E
00097AD1 E107                       	smpsAlterNote       $07
00097AD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097AD7 E10D                       	smpsAlterNote       $0D
00097AD9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097ADF E0C0                       	smpsPan             panCenter, $00
00097AE1 E603                       	smpsAlterVol        $03
00097AE3 E108                       	smpsAlterNote       $08
00097AE5 B406                       	dc.b	nEb4, $06
00097AE7 E10C                       	smpsAlterNote       $0C
00097AE9 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00097AED E108                       	smpsAlterNote       $08
00097AEF B403                       	dc.b	nEb4, $03
00097AF1 E109                       	smpsAlterNote       $09
00097AF3 B803 8001                  	dc.b	nG4, $03, nRst, $01
00097AF7 E10C                       	smpsAlterNote       $0C
00097AF9 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
00097B01 03                         	dc.b	$03
00097B02 E6FD                       	smpsAlterVol        $FD
00097B04 F6F1 F4                    	smpsJump            music84_Jump00
00097B07                            
00097B07                            ; PSG1 Data
00097B07                            music84_PSG1:
00097B07 E1FD                       	smpsAlterNote       $FD
00097B09 EC04                       	smpsPSGAlterVol     $04
00097B0B 9203                       	dc.b	nF1, $03
00097B0D E1FE                       	smpsAlterNote       $FE
00097B0F 9603                       	dc.b	nA1, $03
00097B11 EC04                       	smpsPSGAlterVol     $04
00097B13 E701                       	dc.b	smpsNoAttack, $01
00097B15 E1FF                       	smpsAlterNote       $FF
00097B17 ECFC                       	smpsPSGAlterVol     $FC
00097B19 9B03                       	dc.b	nD2, $03
00097B1B E1FD                       	smpsAlterNote       $FD
00097B1D 9403                       	dc.b	nG1, $03
00097B1F EC04                       	smpsPSGAlterVol     $04
00097B21 E701                       	dc.b	smpsNoAttack, $01
00097B23 E1FE                       	smpsAlterNote       $FE
00097B25 ECFC                       	smpsPSGAlterVol     $FC
00097B27 9703                       	dc.b	nBb1, $03
00097B29 E1FF                       	smpsAlterNote       $FF
00097B2B 9B03                       	dc.b	nD2, $03
00097B2D EC04                       	smpsPSGAlterVol     $04
00097B2F E701                       	dc.b	smpsNoAttack, $01
00097B31 E1FE                       	smpsAlterNote       $FE
00097B33 ECFC                       	smpsPSGAlterVol     $FC
00097B35 A002                       	dc.b	nG2, $02
00097B37 EC04                       	smpsPSGAlterVol     $04
00097B39 E701                       	dc.b	smpsNoAttack, $01
00097B3B E1FF                       	smpsAlterNote       $FF
00097B3D ECFC                       	smpsPSGAlterVol     $FC
00097B3F A203                       	dc.b	nA2, $03
00097B41 EC0B                       	smpsPSGAlterVol     $0B
00097B43 800A                       	dc.b	nRst, $0A
00097B45 E105                       	smpsAlterNote       $05
00097B47 01                         	dc.b	$01
00097B48 E1FC                       	smpsAlterNote       $FC
00097B4A 01                         	dc.b	$01
00097B4B E105                       	smpsAlterNote       $05
00097B4D 01                         	dc.b	$01
00097B4E E1FD                       	smpsAlterNote       $FD
00097B50 01                         	dc.b	$01
00097B51 E105                       	smpsAlterNote       $05
00097B53 01                         	dc.b	$01
00097B54 E1FD                       	smpsAlterNote       $FD
00097B56 01                         	dc.b	$01
00097B57 E1FA                       	smpsAlterNote       $FA
00097B59 01                         	dc.b	$01
00097B5A E1FC                       	smpsAlterNote       $FC
00097B5C 01                         	dc.b	$01
00097B5D E105                       	smpsAlterNote       $05
00097B5F 01                         	dc.b	$01
00097B60 E108                       	smpsAlterNote       $08
00097B62 0101                       	dc.b	$01, $01
00097B64 E105                       	smpsAlterNote       $05
00097B66 01                         	dc.b	$01
00097B67 E1FA                       	smpsAlterNote       $FA
00097B69 0101                       	dc.b	$01, $01
00097B6B E1FD                       	smpsAlterNote       $FD
00097B6D 01                         	dc.b	$01
00097B6E E105                       	smpsAlterNote       $05
00097B70 01                         	dc.b	$01
00097B71 E108                       	smpsAlterNote       $08
00097B73 01                         	dc.b	$01
00097B74 E105                       	smpsAlterNote       $05
00097B76 01                         	dc.b	$01
00097B77 E1FC                       	smpsAlterNote       $FC
00097B79 01                         	dc.b	$01
00097B7A E105                       	smpsAlterNote       $05
00097B7C 01                         	dc.b	$01
00097B7D E1FD                       	smpsAlterNote       $FD
00097B7F 01                         	dc.b	$01
00097B80                            
00097B80                            music84_Jump07:
00097B80 E105                       	smpsAlterNote       $05
00097B82 8001                       	dc.b	nRst, $01
00097B84 E1FD                       	smpsAlterNote       $FD
00097B86 01                         	dc.b	$01
00097B87 E1FA                       	smpsAlterNote       $FA
00097B89 01                         	dc.b	$01
00097B8A E1FC                       	smpsAlterNote       $FC
00097B8C 01                         	dc.b	$01
00097B8D E1FD                       	smpsAlterNote       $FD
00097B8F ECF5                       	smpsPSGAlterVol     $F5
00097B91 9206                       	dc.b	nF1, $06
00097B93 EC04                       	smpsPSGAlterVol     $04
00097B95 E701                       	dc.b	smpsNoAttack, $01
00097B97 EC07                       	smpsPSGAlterVol     $07
00097B99 8003                       	dc.b	nRst, $03
00097B9B ECF5                       	smpsPSGAlterVol     $F5
00097B9D 9206                       	dc.b	nF1, $06
00097B9F EC04                       	smpsPSGAlterVol     $04
00097BA1 E701                       	dc.b	smpsNoAttack, $01
00097BA3 EC07                       	smpsPSGAlterVol     $07
00097BA5 8006                       	dc.b	nRst, $06
00097BA7 E100                       	smpsAlterNote       $00
00097BA9 01                         	dc.b	$01
00097BAA E104                       	smpsAlterNote       $04
00097BAC 01                         	dc.b	$01
00097BAD E100                       	smpsAlterNote       $00
00097BAF 01                         	dc.b	$01
00097BB0 E1FB                       	smpsAlterNote       $FB
00097BB2 01                         	dc.b	$01
00097BB3 E1FD                       	smpsAlterNote       $FD
00097BB5 ECF5                       	smpsPSGAlterVol     $F5
00097BB7 9406                       	dc.b	nG1, $06
00097BB9 EC04                       	smpsPSGAlterVol     $04
00097BBB E701                       	dc.b	smpsNoAttack, $01
00097BBD EC07                       	smpsPSGAlterVol     $07
00097BBF 8003                       	dc.b	nRst, $03
00097BC1 ECF5                       	smpsPSGAlterVol     $F5
00097BC3 9407                       	dc.b	nG1, $07
00097BC5 EC0B                       	smpsPSGAlterVol     $0B
00097BC7 8006                       	dc.b	nRst, $06
00097BC9 E100                       	smpsAlterNote       $00
00097BCB 01                         	dc.b	$01
00097BCC E103                       	smpsAlterNote       $03
00097BCE 0101                       	dc.b	$01, $01
00097BD0 E1FD                       	smpsAlterNote       $FD
00097BD2 01                         	dc.b	$01
00097BD3 ECF5                       	smpsPSGAlterVol     $F5
00097BD5 9207                       	dc.b	nF1, $07
00097BD7 EC0B                       	smpsPSGAlterVol     $0B
00097BD9 8004                       	dc.b	nRst, $04
00097BDB ECF5                       	smpsPSGAlterVol     $F5
00097BDD 9206                       	dc.b	nF1, $06
00097BDF EC04                       	smpsPSGAlterVol     $04
00097BE1 E701                       	dc.b	smpsNoAttack, $01
00097BE3 EC07                       	smpsPSGAlterVol     $07
00097BE5 8006                       	dc.b	nRst, $06
00097BE7 E103                       	smpsAlterNote       $03
00097BE9 01                         	dc.b	$01
00097BEA E104                       	smpsAlterNote       $04
00097BEC 01                         	dc.b	$01
00097BED E100                       	smpsAlterNote       $00
00097BEF 01                         	dc.b	$01
00097BF0 E1FA                       	smpsAlterNote       $FA
00097BF2 01                         	dc.b	$01
00097BF3 E1FD                       	smpsAlterNote       $FD
00097BF5 ECF5                       	smpsPSGAlterVol     $F5
00097BF7 9206                       	dc.b	nF1, $06
00097BF9 EC04                       	smpsPSGAlterVol     $04
00097BFB E701                       	dc.b	smpsNoAttack, $01
00097BFD EC07                       	smpsPSGAlterVol     $07
00097BFF 8003                       	dc.b	nRst, $03
00097C01 ECF5                       	smpsPSGAlterVol     $F5
00097C03 9106                       	dc.b	nE1, $06
00097C05 EC04                       	smpsPSGAlterVol     $04
00097C07 E701                       	dc.b	smpsNoAttack, $01
00097C09 EC07                       	smpsPSGAlterVol     $07
00097C0B 8006                       	dc.b	nRst, $06
00097C0D E100                       	smpsAlterNote       $00
00097C0F 01                         	dc.b	$01
00097C10 E104                       	smpsAlterNote       $04
00097C12 01                         	dc.b	$01
00097C13 E100                       	smpsAlterNote       $00
00097C15 01                         	dc.b	$01
00097C16 E1FD                       	smpsAlterNote       $FD
00097C18 01                         	dc.b	$01
00097C19 ECF5                       	smpsPSGAlterVol     $F5
00097C1B 9206                       	dc.b	nF1, $06
00097C1D EC04                       	smpsPSGAlterVol     $04
00097C1F E701                       	dc.b	smpsNoAttack, $01
00097C21 EC07                       	smpsPSGAlterVol     $07
00097C23 8003                       	dc.b	nRst, $03
00097C25 ECF5                       	smpsPSGAlterVol     $F5
00097C27 9207                       	dc.b	nF1, $07
00097C29 EC0B                       	smpsPSGAlterVol     $0B
00097C2B 8007                       	dc.b	nRst, $07
00097C2D E103                       	smpsAlterNote       $03
00097C2F 0101                       	dc.b	$01, $01
00097C31 E1FD                       	smpsAlterNote       $FD
00097C33 01                         	dc.b	$01
00097C34 E1FB                       	smpsAlterNote       $FB
00097C36 01                         	dc.b	$01
00097C37 E1FD                       	smpsAlterNote       $FD
00097C39 ECF5                       	smpsPSGAlterVol     $F5
00097C3B 9406                       	dc.b	nG1, $06
00097C3D EC0B                       	smpsPSGAlterVol     $0B
00097C3F 8004                       	dc.b	nRst, $04
00097C41 ECF5                       	smpsPSGAlterVol     $F5
00097C43 9406                       	dc.b	nG1, $06
00097C45 EC04                       	smpsPSGAlterVol     $04
00097C47 E701                       	dc.b	smpsNoAttack, $01
00097C49 EC07                       	smpsPSGAlterVol     $07
00097C4B 8006                       	dc.b	nRst, $06
00097C4D E100                       	smpsAlterNote       $00
00097C4F 01                         	dc.b	$01
00097C50 E104                       	smpsAlterNote       $04
00097C52 01                         	dc.b	$01
00097C53 E100                       	smpsAlterNote       $00
00097C55 01                         	dc.b	$01
00097C56 E1F9                       	smpsAlterNote       $F9
00097C58 01                         	dc.b	$01
00097C59 E1FD                       	smpsAlterNote       $FD
00097C5B ECF5                       	smpsPSGAlterVol     $F5
00097C5D 9206                       	dc.b	nF1, $06
00097C5F EC04                       	smpsPSGAlterVol     $04
00097C61 E701                       	dc.b	smpsNoAttack, $01
00097C63 EC07                       	smpsPSGAlterVol     $07
00097C65 8003                       	dc.b	nRst, $03
00097C67 ECF5                       	smpsPSGAlterVol     $F5
00097C69 9207                       	dc.b	nF1, $07
00097C6B EC0B                       	smpsPSGAlterVol     $0B
00097C6D 8006                       	dc.b	nRst, $06
00097C6F E100                       	smpsAlterNote       $00
00097C71 01                         	dc.b	$01
00097C72 E104                       	smpsAlterNote       $04
00097C74 01                         	dc.b	$01
00097C75 E103                       	smpsAlterNote       $03
00097C77 01                         	dc.b	$01
00097C78 E1FD                       	smpsAlterNote       $FD
00097C7A 01                         	dc.b	$01
00097C7B ECF5                       	smpsPSGAlterVol     $F5
00097C7D 9207                       	dc.b	nF1, $07
00097C7F EC0B                       	smpsPSGAlterVol     $0B
00097C81 8004                       	dc.b	nRst, $04
00097C83 ECF5                       	smpsPSGAlterVol     $F5
00097C85 9206                       	dc.b	nF1, $06
00097C87 EC0B                       	smpsPSGAlterVol     $0B
00097C89 8007                       	dc.b	nRst, $07
00097C8B E103                       	smpsAlterNote       $03
00097C8D 0101                       	dc.b	$01, $01
00097C8F E100                       	smpsAlterNote       $00
00097C91 01                         	dc.b	$01
00097C92 E1FA                       	smpsAlterNote       $FA
00097C94 01                         	dc.b	$01
00097C95 E1FD                       	smpsAlterNote       $FD
00097C97 ECF5                       	smpsPSGAlterVol     $F5
00097C99 9206                       	dc.b	nF1, $06
00097C9B EC04                       	smpsPSGAlterVol     $04
00097C9D E701                       	dc.b	smpsNoAttack, $01
00097C9F EC07                       	smpsPSGAlterVol     $07
00097CA1 8003                       	dc.b	nRst, $03
00097CA3 ECF5                       	smpsPSGAlterVol     $F5
00097CA5 9206                       	dc.b	nF1, $06
00097CA7 EC04                       	smpsPSGAlterVol     $04
00097CA9 E701                       	dc.b	smpsNoAttack, $01
00097CAB EC07                       	smpsPSGAlterVol     $07
00097CAD 8006                       	dc.b	nRst, $06
00097CAF E100                       	smpsAlterNote       $00
00097CB1 01                         	dc.b	$01
00097CB2 E104                       	smpsAlterNote       $04
00097CB4 01                         	dc.b	$01
00097CB5 E100                       	smpsAlterNote       $00
00097CB7 01                         	dc.b	$01
00097CB8 E1FD                       	smpsAlterNote       $FD
00097CBA 01                         	dc.b	$01
00097CBB ECF5                       	smpsPSGAlterVol     $F5
00097CBD 9206                       	dc.b	nF1, $06
00097CBF EC04                       	smpsPSGAlterVol     $04
00097CC1 E701                       	dc.b	smpsNoAttack, $01
00097CC3 EC07                       	smpsPSGAlterVol     $07
00097CC5 8003                       	dc.b	nRst, $03
00097CC7 ECF5                       	smpsPSGAlterVol     $F5
00097CC9 9207                       	dc.b	nF1, $07
00097CCB EC0B                       	smpsPSGAlterVol     $0B
00097CCD 8007                       	dc.b	nRst, $07
00097CCF E103                       	smpsAlterNote       $03
00097CD1 0101                       	dc.b	$01, $01
00097CD3 E1FD                       	smpsAlterNote       $FD
00097CD5 01                         	dc.b	$01
00097CD6 E1FA                       	smpsAlterNote       $FA
00097CD8 01                         	dc.b	$01
00097CD9 E1FD                       	smpsAlterNote       $FD
00097CDB ECF5                       	smpsPSGAlterVol     $F5
00097CDD 9206                       	dc.b	nF1, $06
00097CDF EC0B                       	smpsPSGAlterVol     $0B
00097CE1 8004                       	dc.b	nRst, $04
00097CE3 ECF5                       	smpsPSGAlterVol     $F5
00097CE5 9206                       	dc.b	nF1, $06
00097CE7 EC04                       	smpsPSGAlterVol     $04
00097CE9 E701                       	dc.b	smpsNoAttack, $01
00097CEB EC07                       	smpsPSGAlterVol     $07
00097CED 8006                       	dc.b	nRst, $06
00097CEF E103                       	smpsAlterNote       $03
00097CF1 01                         	dc.b	$01
00097CF2 E104                       	smpsAlterNote       $04
00097CF4 01                         	dc.b	$01
00097CF5 E100                       	smpsAlterNote       $00
00097CF7 01                         	dc.b	$01
00097CF8 E1FA                       	smpsAlterNote       $FA
00097CFA 01                         	dc.b	$01
00097CFB E1FD                       	smpsAlterNote       $FD
00097CFD ECF5                       	smpsPSGAlterVol     $F5
00097CFF 9206                       	dc.b	nF1, $06
00097D01 EC04                       	smpsPSGAlterVol     $04
00097D03 E701                       	dc.b	smpsNoAttack, $01
00097D05 EC07                       	smpsPSGAlterVol     $07
00097D07 8003                       	dc.b	nRst, $03
00097D09 ECF5                       	smpsPSGAlterVol     $F5
00097D0B 9206                       	dc.b	nF1, $06
00097D0D EC04                       	smpsPSGAlterVol     $04
00097D0F E701                       	dc.b	smpsNoAttack, $01
00097D11 EC07                       	smpsPSGAlterVol     $07
00097D13 8006                       	dc.b	nRst, $06
00097D15 E100                       	smpsAlterNote       $00
00097D17 01                         	dc.b	$01
00097D18 E104                       	smpsAlterNote       $04
00097D1A 01                         	dc.b	$01
00097D1B E103                       	smpsAlterNote       $03
00097D1D 01                         	dc.b	$01
00097D1E E1FD                       	smpsAlterNote       $FD
00097D20 01                         	dc.b	$01
00097D21 ECF5                       	smpsPSGAlterVol     $F5
00097D23 9107                       	dc.b	nE1, $07
00097D25 EC0B                       	smpsPSGAlterVol     $0B
00097D27 8004                       	dc.b	nRst, $04
00097D29 ECF5                       	smpsPSGAlterVol     $F5
00097D2B 9106                       	dc.b	nE1, $06
00097D2D EC0B                       	smpsPSGAlterVol     $0B
00097D2F 8007                       	dc.b	nRst, $07
00097D31 E103                       	smpsAlterNote       $03
00097D33 0101                       	dc.b	$01, $01
00097D35 E100                       	smpsAlterNote       $00
00097D37 01                         	dc.b	$01
00097D38 E1FA                       	smpsAlterNote       $FA
00097D3A 01                         	dc.b	$01
00097D3B E1FD                       	smpsAlterNote       $FD
00097D3D ECF5                       	smpsPSGAlterVol     $F5
00097D3F 9106                       	dc.b	nE1, $06
00097D41 EC04                       	smpsPSGAlterVol     $04
00097D43 E701                       	dc.b	smpsNoAttack, $01
00097D45 EC07                       	smpsPSGAlterVol     $07
00097D47 8003                       	dc.b	nRst, $03
00097D49 ECF5                       	smpsPSGAlterVol     $F5
00097D4B 9106                       	dc.b	nE1, $06
00097D4D EC04                       	smpsPSGAlterVol     $04
00097D4F E701                       	dc.b	smpsNoAttack, $01
00097D51 EC07                       	smpsPSGAlterVol     $07
00097D53 8006                       	dc.b	nRst, $06
00097D55 E100                       	smpsAlterNote       $00
00097D57 01                         	dc.b	$01
00097D58 E104                       	smpsAlterNote       $04
00097D5A 01                         	dc.b	$01
00097D5B E100                       	smpsAlterNote       $00
00097D5D 01                         	dc.b	$01
00097D5E E1FA                       	smpsAlterNote       $FA
00097D60 01                         	dc.b	$01
00097D61 E1FD                       	smpsAlterNote       $FD
00097D63 ECF5                       	smpsPSGAlterVol     $F5
00097D65 9106                       	dc.b	nE1, $06
00097D67 EC04                       	smpsPSGAlterVol     $04
00097D69 E701                       	dc.b	smpsNoAttack, $01
00097D6B EC07                       	smpsPSGAlterVol     $07
00097D6D 8003                       	dc.b	nRst, $03
00097D6F ECF5                       	smpsPSGAlterVol     $F5
00097D71 9107 9106                  	dc.b	nE1, $07, nE1, $06
00097D75 EC04                       	smpsPSGAlterVol     $04
00097D77 E701                       	dc.b	smpsNoAttack, $01
00097D79 ECFC                       	smpsPSGAlterVol     $FC
00097D7B 9103 9103                  	dc.b	nE1, $03, nE1, $03
00097D7F EC04                       	smpsPSGAlterVol     $04
00097D81 E701                       	dc.b	smpsNoAttack, $01
00097D83 ECFC                       	smpsPSGAlterVol     $FC
00097D85 9106                       	dc.b	nE1, $06
00097D87 EC04                       	smpsPSGAlterVol     $04
00097D89 E701                       	dc.b	smpsNoAttack, $01
00097D8B EC07                       	smpsPSGAlterVol     $07
00097D8D 8006                       	dc.b	nRst, $06
00097D8F E100                       	smpsAlterNote       $00
00097D91 01                         	dc.b	$01
00097D92 E104                       	smpsAlterNote       $04
00097D94 01                         	dc.b	$01
00097D95 E100                       	smpsAlterNote       $00
00097D97 01                         	dc.b	$01
00097D98 E1FA                       	smpsAlterNote       $FA
00097D9A 01                         	dc.b	$01
00097D9B E1F9                       	smpsAlterNote       $F9
00097D9D 01                         	dc.b	$01
00097D9E E1FD                       	smpsAlterNote       $FD
00097DA0 01                         	dc.b	$01
00097DA1 E103                       	smpsAlterNote       $03
00097DA3 01                         	dc.b	$01
00097DA4 E104                       	smpsAlterNote       $04
00097DA6 01                         	dc.b	$01
00097DA7 E100                       	smpsAlterNote       $00
00097DA9 01                         	dc.b	$01
00097DAA E1FA                       	smpsAlterNote       $FA
00097DAC 0101                       	dc.b	$01, $01
00097DAE E1FD                       	smpsAlterNote       $FD
00097DB0 ECF5                       	smpsPSGAlterVol     $F5
00097DB2 9206                       	dc.b	nF1, $06
00097DB4 EC04                       	smpsPSGAlterVol     $04
00097DB6 E701                       	dc.b	smpsNoAttack, $01
00097DB8 EC07                       	smpsPSGAlterVol     $07
00097DBA 8003                       	dc.b	nRst, $03
00097DBC ECF5                       	smpsPSGAlterVol     $F5
00097DBE 9206                       	dc.b	nF1, $06
00097DC0 EC04                       	smpsPSGAlterVol     $04
00097DC2 E701                       	dc.b	smpsNoAttack, $01
00097DC4 EC07                       	smpsPSGAlterVol     $07
00097DC6 8006                       	dc.b	nRst, $06
00097DC8 E100                       	smpsAlterNote       $00
00097DCA 01                         	dc.b	$01
00097DCB E104                       	smpsAlterNote       $04
00097DCD 01                         	dc.b	$01
00097DCE E103                       	smpsAlterNote       $03
00097DD0 01                         	dc.b	$01
00097DD1 E1FD                       	smpsAlterNote       $FD
00097DD3 01                         	dc.b	$01
00097DD4 ECF5                       	smpsPSGAlterVol     $F5
00097DD6 9407                       	dc.b	nG1, $07
00097DD8 EC0B                       	smpsPSGAlterVol     $0B
00097DDA 8004                       	dc.b	nRst, $04
00097DDC ECF5                       	smpsPSGAlterVol     $F5
00097DDE 9406                       	dc.b	nG1, $06
00097DE0 EC0B                       	smpsPSGAlterVol     $0B
00097DE2 8007                       	dc.b	nRst, $07
00097DE4 E103                       	smpsAlterNote       $03
00097DE6 0101                       	dc.b	$01, $01
00097DE8 E1FD                       	smpsAlterNote       $FD
00097DEA 01                         	dc.b	$01
00097DEB E1F9                       	smpsAlterNote       $F9
00097DED 01                         	dc.b	$01
00097DEE E1FD                       	smpsAlterNote       $FD
00097DF0 ECF5                       	smpsPSGAlterVol     $F5
00097DF2 9206                       	dc.b	nF1, $06
00097DF4 EC04                       	smpsPSGAlterVol     $04
00097DF6 E701                       	dc.b	smpsNoAttack, $01
00097DF8 EC07                       	smpsPSGAlterVol     $07
00097DFA 8003                       	dc.b	nRst, $03
00097DFC ECF5                       	smpsPSGAlterVol     $F5
00097DFE 9206                       	dc.b	nF1, $06
00097E00 EC04                       	smpsPSGAlterVol     $04
00097E02 E701                       	dc.b	smpsNoAttack, $01
00097E04 EC07                       	smpsPSGAlterVol     $07
00097E06 8006                       	dc.b	nRst, $06
00097E08 E100                       	smpsAlterNote       $00
00097E0A 01                         	dc.b	$01
00097E0B E104                       	smpsAlterNote       $04
00097E0D 01                         	dc.b	$01
00097E0E E100                       	smpsAlterNote       $00
00097E10 01                         	dc.b	$01
00097E11 E1FA                       	smpsAlterNote       $FA
00097E13 01                         	dc.b	$01
00097E14 E1FD                       	smpsAlterNote       $FD
00097E16 ECF5                       	smpsPSGAlterVol     $F5
00097E18 9206                       	dc.b	nF1, $06
00097E1A EC04                       	smpsPSGAlterVol     $04
00097E1C E701                       	dc.b	smpsNoAttack, $01
00097E1E EC07                       	smpsPSGAlterVol     $07
00097E20 8003                       	dc.b	nRst, $03
00097E22 ECF5                       	smpsPSGAlterVol     $F5
00097E24 9107                       	dc.b	nE1, $07
00097E26 EC0B                       	smpsPSGAlterVol     $0B
00097E28 8006                       	dc.b	nRst, $06
00097E2A E100                       	smpsAlterNote       $00
00097E2C 01                         	dc.b	$01
00097E2D E103                       	smpsAlterNote       $03
00097E2F 0101                       	dc.b	$01, $01
00097E31 E1FD                       	smpsAlterNote       $FD
00097E33 01                         	dc.b	$01
00097E34 ECF5                       	smpsPSGAlterVol     $F5
00097E36 9207                       	dc.b	nF1, $07
00097E38 EC0B                       	smpsPSGAlterVol     $0B
00097E3A 8004                       	dc.b	nRst, $04
00097E3C ECF5                       	smpsPSGAlterVol     $F5
00097E3E 9206                       	dc.b	nF1, $06
00097E40 EC04                       	smpsPSGAlterVol     $04
00097E42 E701                       	dc.b	smpsNoAttack, $01
00097E44 EC07                       	smpsPSGAlterVol     $07
00097E46 8006                       	dc.b	nRst, $06
00097E48 E103                       	smpsAlterNote       $03
00097E4A 01                         	dc.b	$01
00097E4B E104                       	smpsAlterNote       $04
00097E4D 01                         	dc.b	$01
00097E4E E100                       	smpsAlterNote       $00
00097E50 01                         	dc.b	$01
00097E51 E1FB                       	smpsAlterNote       $FB
00097E53 01                         	dc.b	$01
00097E54 E1FD                       	smpsAlterNote       $FD
00097E56 ECF5                       	smpsPSGAlterVol     $F5
00097E58 9406                       	dc.b	nG1, $06
00097E5A EC04                       	smpsPSGAlterVol     $04
00097E5C E701                       	dc.b	smpsNoAttack, $01
00097E5E EC07                       	smpsPSGAlterVol     $07
00097E60 8003                       	dc.b	nRst, $03
00097E62 ECF5                       	smpsPSGAlterVol     $F5
00097E64 9406                       	dc.b	nG1, $06
00097E66 EC04                       	smpsPSGAlterVol     $04
00097E68 E701                       	dc.b	smpsNoAttack, $01
00097E6A EC07                       	smpsPSGAlterVol     $07
00097E6C 8006                       	dc.b	nRst, $06
00097E6E E100                       	smpsAlterNote       $00
00097E70 01                         	dc.b	$01
00097E71 E104                       	smpsAlterNote       $04
00097E73 01                         	dc.b	$01
00097E74 E100                       	smpsAlterNote       $00
00097E76 01                         	dc.b	$01
00097E77 E1FD                       	smpsAlterNote       $FD
00097E79 01                         	dc.b	$01
00097E7A ECF5                       	smpsPSGAlterVol     $F5
00097E7C 9206                       	dc.b	nF1, $06
00097E7E EC04                       	smpsPSGAlterVol     $04
00097E80 E701                       	dc.b	smpsNoAttack, $01
00097E82 EC07                       	smpsPSGAlterVol     $07
00097E84 8003                       	dc.b	nRst, $03
00097E86 ECF5                       	smpsPSGAlterVol     $F5
00097E88 9207                       	dc.b	nF1, $07
00097E8A EC0B                       	smpsPSGAlterVol     $0B
00097E8C 8007                       	dc.b	nRst, $07
00097E8E E103                       	smpsAlterNote       $03
00097E90 0101                       	dc.b	$01, $01
00097E92 E1FD                       	smpsAlterNote       $FD
00097E94 01                         	dc.b	$01
00097E95 E1FA                       	smpsAlterNote       $FA
00097E97 01                         	dc.b	$01
00097E98 E1FD                       	smpsAlterNote       $FD
00097E9A ECF5                       	smpsPSGAlterVol     $F5
00097E9C 9206                       	dc.b	nF1, $06
00097E9E EC0B                       	smpsPSGAlterVol     $0B
00097EA0 8004                       	dc.b	nRst, $04
00097EA2 ECF5                       	smpsPSGAlterVol     $F5
00097EA4 9206                       	dc.b	nF1, $06
00097EA6 EC04                       	smpsPSGAlterVol     $04
00097EA8 E701                       	dc.b	smpsNoAttack, $01
00097EAA EC07                       	smpsPSGAlterVol     $07
00097EAC 8006                       	dc.b	nRst, $06
00097EAE E100                       	smpsAlterNote       $00
00097EB0 01                         	dc.b	$01
00097EB1 E104                       	smpsAlterNote       $04
00097EB3 01                         	dc.b	$01
00097EB4 E100                       	smpsAlterNote       $00
00097EB6 01                         	dc.b	$01
00097EB7 E1FA                       	smpsAlterNote       $FA
00097EB9 01                         	dc.b	$01
00097EBA E1FD                       	smpsAlterNote       $FD
00097EBC ECF5                       	smpsPSGAlterVol     $F5
00097EBE 9206                       	dc.b	nF1, $06
00097EC0 EC04                       	smpsPSGAlterVol     $04
00097EC2 E704                       	dc.b	smpsNoAttack, $04
00097EC4 ECFC                       	smpsPSGAlterVol     $FC
00097EC6 9207                       	dc.b	nF1, $07
00097EC8 EC0B                       	smpsPSGAlterVol     $0B
00097ECA 8006                       	dc.b	nRst, $06
00097ECC E100                       	smpsAlterNote       $00
00097ECE 01                         	dc.b	$01
00097ECF E104                       	smpsAlterNote       $04
00097ED1 01                         	dc.b	$01
00097ED2 E103                       	smpsAlterNote       $03
00097ED4 01                         	dc.b	$01
00097ED5 E1FD                       	smpsAlterNote       $FD
00097ED7 01                         	dc.b	$01
00097ED8 ECF5                       	smpsPSGAlterVol     $F5
00097EDA 9207                       	dc.b	nF1, $07
00097EDC EC0B                       	smpsPSGAlterVol     $0B
00097EDE 8004                       	dc.b	nRst, $04
00097EE0 ECF5                       	smpsPSGAlterVol     $F5
00097EE2 9206                       	dc.b	nF1, $06
00097EE4 EC0B                       	smpsPSGAlterVol     $0B
00097EE6 8007                       	dc.b	nRst, $07
00097EE8 E103                       	smpsAlterNote       $03
00097EEA 0101                       	dc.b	$01, $01
00097EEC E100                       	smpsAlterNote       $00
00097EEE 01                         	dc.b	$01
00097EEF E1FA                       	smpsAlterNote       $FA
00097EF1 01                         	dc.b	$01
00097EF2 E1FD                       	smpsAlterNote       $FD
00097EF4 ECF5                       	smpsPSGAlterVol     $F5
00097EF6 9206                       	dc.b	nF1, $06
00097EF8 EC04                       	smpsPSGAlterVol     $04
00097EFA E704                       	dc.b	smpsNoAttack, $04
00097EFC ECFC                       	smpsPSGAlterVol     $FC
00097EFE 9206                       	dc.b	nF1, $06
00097F00 EC04                       	smpsPSGAlterVol     $04
00097F02 E701                       	dc.b	smpsNoAttack, $01
00097F04 EC07                       	smpsPSGAlterVol     $07
00097F06 8006                       	dc.b	nRst, $06
00097F08 E100                       	smpsAlterNote       $00
00097F0A 01                         	dc.b	$01
00097F0B E104                       	smpsAlterNote       $04
00097F0D 01                         	dc.b	$01
00097F0E E100                       	smpsAlterNote       $00
00097F10 01                         	dc.b	$01
00097F11 E1FD                       	smpsAlterNote       $FD
00097F13 01                         	dc.b	$01
00097F14 ECF5                       	smpsPSGAlterVol     $F5
00097F16 9206                       	dc.b	nF1, $06
00097F18 EC04                       	smpsPSGAlterVol     $04
00097F1A E701                       	dc.b	smpsNoAttack, $01
00097F1C EC07                       	smpsPSGAlterVol     $07
00097F1E 8003                       	dc.b	nRst, $03
00097F20 ECF5                       	smpsPSGAlterVol     $F5
00097F22 9207                       	dc.b	nF1, $07
00097F24 EC0B                       	smpsPSGAlterVol     $0B
00097F26 8007                       	dc.b	nRst, $07
00097F28 E103                       	smpsAlterNote       $03
00097F2A 0101                       	dc.b	$01, $01
00097F2C E1FD                       	smpsAlterNote       $FD
00097F2E 01                         	dc.b	$01
00097F2F E1FA                       	smpsAlterNote       $FA
00097F31 01                         	dc.b	$01
00097F32 E1FD                       	smpsAlterNote       $FD
00097F34 ECF5                       	smpsPSGAlterVol     $F5
00097F36 9106                       	dc.b	nE1, $06
00097F38 EC0B                       	smpsPSGAlterVol     $0B
00097F3A 8004                       	dc.b	nRst, $04
00097F3C ECF5                       	smpsPSGAlterVol     $F5
00097F3E 9106                       	dc.b	nE1, $06
00097F40 EC04                       	smpsPSGAlterVol     $04
00097F42 E701                       	dc.b	smpsNoAttack, $01
00097F44 EC07                       	smpsPSGAlterVol     $07
00097F46 8006                       	dc.b	nRst, $06
00097F48 E100                       	smpsAlterNote       $00
00097F4A 01                         	dc.b	$01
00097F4B E104                       	smpsAlterNote       $04
00097F4D 01                         	dc.b	$01
00097F4E E100                       	smpsAlterNote       $00
00097F50 01                         	dc.b	$01
00097F51 E1FA                       	smpsAlterNote       $FA
00097F53 01                         	dc.b	$01
00097F54 E1FD                       	smpsAlterNote       $FD
00097F56 ECF5                       	smpsPSGAlterVol     $F5
00097F58 9106                       	dc.b	nE1, $06
00097F5A EC04                       	smpsPSGAlterVol     $04
00097F5C E701                       	dc.b	smpsNoAttack, $01
00097F5E EC07                       	smpsPSGAlterVol     $07
00097F60 8003                       	dc.b	nRst, $03
00097F62 ECF5                       	smpsPSGAlterVol     $F5
00097F64 9106                       	dc.b	nE1, $06
00097F66 EC04                       	smpsPSGAlterVol     $04
00097F68 E701                       	dc.b	smpsNoAttack, $01
00097F6A EC07                       	smpsPSGAlterVol     $07
00097F6C 8006                       	dc.b	nRst, $06
00097F6E E100                       	smpsAlterNote       $00
00097F70 01                         	dc.b	$01
00097F71 E104                       	smpsAlterNote       $04
00097F73 01                         	dc.b	$01
00097F74 E103                       	smpsAlterNote       $03
00097F76 01                         	dc.b	$01
00097F77 E1FD                       	smpsAlterNote       $FD
00097F79 01                         	dc.b	$01
00097F7A ECF5                       	smpsPSGAlterVol     $F5
00097F7C 9107                       	dc.b	nE1, $07
00097F7E EC0B                       	smpsPSGAlterVol     $0B
00097F80 8004                       	dc.b	nRst, $04
00097F82 ECF5                       	smpsPSGAlterVol     $F5
00097F84 9106                       	dc.b	nE1, $06
00097F86 EC0B                       	smpsPSGAlterVol     $0B
00097F88 8007                       	dc.b	nRst, $07
00097F8A E103                       	smpsAlterNote       $03
00097F8C 0101                       	dc.b	$01, $01
00097F8E E100                       	smpsAlterNote       $00
00097F90 01                         	dc.b	$01
00097F91 E1FA                       	smpsAlterNote       $FA
00097F93 01                         	dc.b	$01
00097F94 E1FD                       	smpsAlterNote       $FD
00097F96 ECF5                       	smpsPSGAlterVol     $F5
00097F98 9106                       	dc.b	nE1, $06
00097F9A EC04                       	smpsPSGAlterVol     $04
00097F9C E701                       	dc.b	smpsNoAttack, $01
00097F9E EC07                       	smpsPSGAlterVol     $07
00097FA0 8003                       	dc.b	nRst, $03
00097FA2 ECF5                       	smpsPSGAlterVol     $F5
00097FA4 9106                       	dc.b	nE1, $06
00097FA6 EC04                       	smpsPSGAlterVol     $04
00097FA8 E701                       	dc.b	smpsNoAttack, $01
00097FAA EC07                       	smpsPSGAlterVol     $07
00097FAC 8003                       	dc.b	nRst, $03
00097FAE ECF5                       	smpsPSGAlterVol     $F5
00097FB0 9207                       	dc.b	nF1, $07
00097FB2 EC0B                       	smpsPSGAlterVol     $0B
00097FB4 8006                       	dc.b	nRst, $06
00097FB6 E100                       	smpsAlterNote       $00
00097FB8 01                         	dc.b	$01
00097FB9 E104                       	smpsAlterNote       $04
00097FBB 01                         	dc.b	$01
00097FBC E103                       	smpsAlterNote       $03
00097FBE 01                         	dc.b	$01
00097FBF E1FD                       	smpsAlterNote       $FD
00097FC1 01                         	dc.b	$01
00097FC2 E1F9                       	smpsAlterNote       $F9
00097FC4 01                         	dc.b	$01
00097FC5 E1FD                       	smpsAlterNote       $FD
00097FC7 01                         	dc.b	$01
00097FC8 E100                       	smpsAlterNote       $00
00097FCA 01                         	dc.b	$01
00097FCB E104                       	smpsAlterNote       $04
00097FCD 01                         	dc.b	$01
00097FCE E1FD                       	smpsAlterNote       $FD
00097FD0 ECF5                       	smpsPSGAlterVol     $F5
00097FD2 9203 9203                  	dc.b	nF1, $03, nF1, $03
00097FD6 EC04                       	smpsPSGAlterVol     $04
00097FD8 E701                       	dc.b	smpsNoAttack, $01
00097FDA EC07                       	smpsPSGAlterVol     $07
00097FDC 8009                       	dc.b	nRst, $09
00097FDE E100                       	smpsAlterNote       $00
00097FE0 01                         	dc.b	$01
00097FE1 E104                       	smpsAlterNote       $04
00097FE3 01                         	dc.b	$01
00097FE4 E103                       	smpsAlterNote       $03
00097FE6 01                         	dc.b	$01
00097FE7 E1FD                       	smpsAlterNote       $FD
00097FE9 01                         	dc.b	$01
00097FEA E1F9                       	smpsAlterNote       $F9
00097FEC 01                         	dc.b	$01
00097FED E1FD                       	smpsAlterNote       $FD
00097FEF 01                         	dc.b	$01
00097FF0 E100                       	smpsAlterNote       $00
00097FF2 01                         	dc.b	$01
00097FF3 E104                       	smpsAlterNote       $04
00097FF5 01                         	dc.b	$01
00097FF6 E100                       	smpsAlterNote       $00
00097FF8 01                         	dc.b	$01
00097FF9 E1FA                       	smpsAlterNote       $FA
00097FFB 01                         	dc.b	$01
00097FFC E1F9                       	smpsAlterNote       $F9
00097FFE 01                         	dc.b	$01
00097FFF E1FD                       	smpsAlterNote       $FD
00098001 01                         	dc.b	$01
00098002 E103                       	smpsAlterNote       $03
00098004 0101                       	dc.b	$01, $01
00098006 E100                       	smpsAlterNote       $00
00098008 01                         	dc.b	$01
00098009 E1FD                       	smpsAlterNote       $FD
0009800B ECF5                       	smpsPSGAlterVol     $F5
0009800D 9202                       	dc.b	nF1, $02
0009800F EC04                       	smpsPSGAlterVol     $04
00098011 E701                       	dc.b	smpsNoAttack, $01
00098013 ECFC                       	smpsPSGAlterVol     $FC
00098015 9106                       	dc.b	nE1, $06
00098017 EC04                       	smpsPSGAlterVol     $04
00098019 E701                       	dc.b	smpsNoAttack, $01
0009801B EC07                       	smpsPSGAlterVol     $07
0009801D 8006                       	dc.b	nRst, $06
0009801F E100                       	smpsAlterNote       $00
00098021 01                         	dc.b	$01
00098022 E104                       	smpsAlterNote       $04
00098024 01                         	dc.b	$01
00098025 E100                       	smpsAlterNote       $00
00098027 01                         	dc.b	$01
00098028 E1FD                       	smpsAlterNote       $FD
0009802A 01                         	dc.b	$01
0009802B E1F9                       	smpsAlterNote       $F9
0009802D 01                         	dc.b	$01
0009802E E1FD                       	smpsAlterNote       $FD
00098030 01                         	dc.b	$01
00098031 E103                       	smpsAlterNote       $03
00098033 01                         	dc.b	$01
00098034 E104                       	smpsAlterNote       $04
00098036 01                         	dc.b	$01
00098037 E1FD                       	smpsAlterNote       $FD
00098039 ECF5                       	smpsPSGAlterVol     $F5
0009803B 9102                       	dc.b	nE1, $02
0009803D EC04                       	smpsPSGAlterVol     $04
0009803F E701                       	dc.b	smpsNoAttack, $01
00098041 ECFC                       	smpsPSGAlterVol     $FC
00098043 920D                       	dc.b	nF1, $0D
00098045 E100                       	smpsAlterNote       $00
00098047 E701                       	dc.b	smpsNoAttack, $01
00098049 E104                       	smpsAlterNote       $04
0009804B E701                       	dc.b	smpsNoAttack, $01
0009804D E100                       	smpsAlterNote       $00
0009804F E701                       	dc.b	smpsNoAttack, $01
00098051 E1FD                       	smpsAlterNote       $FD
00098053 E701                       	dc.b	smpsNoAttack, $01
00098055 E1F9                       	smpsAlterNote       $F9
00098057 E701                       	dc.b	smpsNoAttack, $01
00098059 E1FD                       	smpsAlterNote       $FD
0009805B E701                       	dc.b	smpsNoAttack, $01
0009805D E103                       	smpsAlterNote       $03
0009805F E701                       	dc.b	smpsNoAttack, $01
00098061 E104                       	smpsAlterNote       $04
00098063 E701                       	dc.b	smpsNoAttack, $01
00098065 E100                       	smpsAlterNote       $00
00098067 E701                       	dc.b	smpsNoAttack, $01
00098069 E1FA                       	smpsAlterNote       $FA
0009806B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009806F E1FD                       	smpsAlterNote       $FD
00098071 E701                       	dc.b	smpsNoAttack, $01
00098073 E103                       	smpsAlterNote       $03
00098075 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098079 E1FD                       	smpsAlterNote       $FD
0009807B E701                       	dc.b	smpsNoAttack, $01
0009807D E1F9                       	smpsAlterNote       $F9
0009807F E701                       	dc.b	smpsNoAttack, $01
00098081 E1FA                       	smpsAlterNote       $FA
00098083 E701                       	dc.b	smpsNoAttack, $01
00098085 E100                       	smpsAlterNote       $00
00098087 EC04                       	smpsPSGAlterVol     $04
00098089 E701                       	dc.b	smpsNoAttack, $01
0009808B EC07                       	smpsPSGAlterVol     $07
0009808D E104                       	smpsAlterNote       $04
0009808F 8001                       	dc.b	nRst, $01
00098091 E100                       	smpsAlterNote       $00
00098093 01                         	dc.b	$01
00098094 E1FD                       	smpsAlterNote       $FD
00098096 01                         	dc.b	$01
00098097 E1F9                       	smpsAlterNote       $F9
00098099 01                         	dc.b	$01
0009809A E1FD                       	smpsAlterNote       $FD
0009809C 01                         	dc.b	$01
0009809D E103                       	smpsAlterNote       $03
0009809F 01                         	dc.b	$01
000980A0 E104                       	smpsAlterNote       $04
000980A2 01                         	dc.b	$01
000980A3 E1FD                       	smpsAlterNote       $FD
000980A5 ECF5                       	smpsPSGAlterVol     $F5
000980A7 9106                       	dc.b	nE1, $06
000980A9 EC04                       	smpsPSGAlterVol     $04
000980AB E701                       	dc.b	smpsNoAttack, $01
000980AD EC07                       	smpsPSGAlterVol     $07
000980AF 8003                       	dc.b	nRst, $03
000980B1 ECF5                       	smpsPSGAlterVol     $F5
000980B3 9106                       	dc.b	nE1, $06
000980B5 EC04                       	smpsPSGAlterVol     $04
000980B7 E701                       	dc.b	smpsNoAttack, $01
000980B9 EC07                       	smpsPSGAlterVol     $07
000980BB 8006                       	dc.b	nRst, $06
000980BD E100                       	smpsAlterNote       $00
000980BF 01                         	dc.b	$01
000980C0 E104                       	smpsAlterNote       $04
000980C2 01                         	dc.b	$01
000980C3 E100                       	smpsAlterNote       $00
000980C5 01                         	dc.b	$01
000980C6 E1FA                       	smpsAlterNote       $FA
000980C8 01                         	dc.b	$01
000980C9 E1FD                       	smpsAlterNote       $FD
000980CB ECF5                       	smpsPSGAlterVol     $F5
000980CD 9206                       	dc.b	nF1, $06
000980CF EC04                       	smpsPSGAlterVol     $04
000980D1 E701                       	dc.b	smpsNoAttack, $01
000980D3 EC07                       	smpsPSGAlterVol     $07
000980D5 8003                       	dc.b	nRst, $03
000980D7 ECF5                       	smpsPSGAlterVol     $F5
000980D9 9207                       	dc.b	nF1, $07
000980DB EC0B                       	smpsPSGAlterVol     $0B
000980DD 8006                       	dc.b	nRst, $06
000980DF E100                       	smpsAlterNote       $00
000980E1 01                         	dc.b	$01
000980E2 E103                       	smpsAlterNote       $03
000980E4 0101                       	dc.b	$01, $01
000980E6 E1FD                       	smpsAlterNote       $FD
000980E8 01                         	dc.b	$01
000980E9 ECF5                       	smpsPSGAlterVol     $F5
000980EB 9107                       	dc.b	nE1, $07
000980ED EC0B                       	smpsPSGAlterVol     $0B
000980EF 8004                       	dc.b	nRst, $04
000980F1 ECF5                       	smpsPSGAlterVol     $F5
000980F3 9106                       	dc.b	nE1, $06
000980F5 EC04                       	smpsPSGAlterVol     $04
000980F7 E701                       	dc.b	smpsNoAttack, $01
000980F9 EC07                       	smpsPSGAlterVol     $07
000980FB 8006                       	dc.b	nRst, $06
000980FD E103                       	smpsAlterNote       $03
000980FF 01                         	dc.b	$01
00098100 E104                       	smpsAlterNote       $04
00098102 01                         	dc.b	$01
00098103 E100                       	smpsAlterNote       $00
00098105 01                         	dc.b	$01
00098106 E1FA                       	smpsAlterNote       $FA
00098108 01                         	dc.b	$01
00098109 E1FD                       	smpsAlterNote       $FD
0009810B ECF5                       	smpsPSGAlterVol     $F5
0009810D 9106                       	dc.b	nE1, $06
0009810F EC04                       	smpsPSGAlterVol     $04
00098111 E701                       	dc.b	smpsNoAttack, $01
00098113 EC07                       	smpsPSGAlterVol     $07
00098115 8003                       	dc.b	nRst, $03
00098117 ECF5                       	smpsPSGAlterVol     $F5
00098119 9106                       	dc.b	nE1, $06
0009811B EC04                       	smpsPSGAlterVol     $04
0009811D E701                       	dc.b	smpsNoAttack, $01
0009811F EC07                       	smpsPSGAlterVol     $07
00098121 8003                       	dc.b	nRst, $03
00098123 ECF5                       	smpsPSGAlterVol     $F5
00098125 9207                       	dc.b	nF1, $07
00098127 EC0B                       	smpsPSGAlterVol     $0B
00098129 8006                       	dc.b	nRst, $06
0009812B E100                       	smpsAlterNote       $00
0009812D 01                         	dc.b	$01
0009812E E103                       	smpsAlterNote       $03
00098130 0101                       	dc.b	$01, $01
00098132 E1FD                       	smpsAlterNote       $FD
00098134 01                         	dc.b	$01
00098135 E1F9                       	smpsAlterNote       $F9
00098137 01                         	dc.b	$01
00098138 E1FA                       	smpsAlterNote       $FA
0009813A 01                         	dc.b	$01
0009813B E100                       	smpsAlterNote       $00
0009813D 01                         	dc.b	$01
0009813E E104                       	smpsAlterNote       $04
00098140 01                         	dc.b	$01
00098141 E1FD                       	smpsAlterNote       $FD
00098143 ECF5                       	smpsPSGAlterVol     $F5
00098145 9203 9203                  	dc.b	nF1, $03, nF1, $03
00098149 EC04                       	smpsPSGAlterVol     $04
0009814B E701                       	dc.b	smpsNoAttack, $01
0009814D EC07                       	smpsPSGAlterVol     $07
0009814F 8009                       	dc.b	nRst, $09
00098151 E100                       	smpsAlterNote       $00
00098153 01                         	dc.b	$01
00098154 E103                       	smpsAlterNote       $03
00098156 0101                       	dc.b	$01, $01
00098158 E1FD                       	smpsAlterNote       $FD
0009815A 01                         	dc.b	$01
0009815B E1F9                       	smpsAlterNote       $F9
0009815D 01                         	dc.b	$01
0009815E E1FA                       	smpsAlterNote       $FA
00098160 01                         	dc.b	$01
00098161 E100                       	smpsAlterNote       $00
00098163 01                         	dc.b	$01
00098164 E104                       	smpsAlterNote       $04
00098166 01                         	dc.b	$01
00098167 E100                       	smpsAlterNote       $00
00098169 01                         	dc.b	$01
0009816A E1FD                       	smpsAlterNote       $FD
0009816C 01                         	dc.b	$01
0009816D E1F9                       	smpsAlterNote       $F9
0009816F 01                         	dc.b	$01
00098170 E1FD                       	smpsAlterNote       $FD
00098172 01                         	dc.b	$01
00098173 E103                       	smpsAlterNote       $03
00098175 01                         	dc.b	$01
00098176 E104                       	smpsAlterNote       $04
00098178 01                         	dc.b	$01
00098179 E100                       	smpsAlterNote       $00
0009817B 01                         	dc.b	$01
0009817C E1FD                       	smpsAlterNote       $FD
0009817E ECF5                       	smpsPSGAlterVol     $F5
00098180 9203 9106                  	dc.b	nF1, $03, nE1, $06
00098184 EC04                       	smpsPSGAlterVol     $04
00098186 E701                       	dc.b	smpsNoAttack, $01
00098188 EC07                       	smpsPSGAlterVol     $07
0009818A 8006                       	dc.b	nRst, $06
0009818C E100                       	smpsAlterNote       $00
0009818E 01                         	dc.b	$01
0009818F E104                       	smpsAlterNote       $04
00098191 01                         	dc.b	$01
00098192 E103                       	smpsAlterNote       $03
00098194 01                         	dc.b	$01
00098195 E1FD                       	smpsAlterNote       $FD
00098197 01                         	dc.b	$01
00098198 E1F9                       	smpsAlterNote       $F9
0009819A 01                         	dc.b	$01
0009819B E1FD                       	smpsAlterNote       $FD
0009819D 01                         	dc.b	$01
0009819E E100                       	smpsAlterNote       $00
000981A0 01                         	dc.b	$01
000981A1 E104                       	smpsAlterNote       $04
000981A3 01                         	dc.b	$01
000981A4 E1FD                       	smpsAlterNote       $FD
000981A6 ECF5                       	smpsPSGAlterVol     $F5
000981A8 9103 920D                  	dc.b	nE1, $03, nF1, $0D
000981AC E100                       	smpsAlterNote       $00
000981AE E701                       	dc.b	smpsNoAttack, $01
000981B0 E104                       	smpsAlterNote       $04
000981B2 E701                       	dc.b	smpsNoAttack, $01
000981B4 E100                       	smpsAlterNote       $00
000981B6 E701                       	dc.b	smpsNoAttack, $01
000981B8 E1FD                       	smpsAlterNote       $FD
000981BA E701                       	dc.b	smpsNoAttack, $01
000981BC E1F9                       	smpsAlterNote       $F9
000981BE E701                       	dc.b	smpsNoAttack, $01
000981C0 E1FD                       	smpsAlterNote       $FD
000981C2 E701                       	dc.b	smpsNoAttack, $01
000981C4 E103                       	smpsAlterNote       $03
000981C6 E701                       	dc.b	smpsNoAttack, $01
000981C8 E104                       	smpsAlterNote       $04
000981CA E701                       	dc.b	smpsNoAttack, $01
000981CC E100                       	smpsAlterNote       $00
000981CE E701                       	dc.b	smpsNoAttack, $01
000981D0 E1FA                       	smpsAlterNote       $FA
000981D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000981D6 E1FD                       	smpsAlterNote       $FD
000981D8 E701                       	dc.b	smpsNoAttack, $01
000981DA E103                       	smpsAlterNote       $03
000981DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000981E0 E100                       	smpsAlterNote       $00
000981E2 E701                       	dc.b	smpsNoAttack, $01
000981E4 E1FA                       	smpsAlterNote       $FA
000981E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000981EA E100                       	smpsAlterNote       $00
000981EC EC04                       	smpsPSGAlterVol     $04
000981EE E701                       	dc.b	smpsNoAttack, $01
000981F0 EC07                       	smpsPSGAlterVol     $07
000981F2 E104                       	smpsAlterNote       $04
000981F4 8001                       	dc.b	nRst, $01
000981F6 E103                       	smpsAlterNote       $03
000981F8 01                         	dc.b	$01
000981F9 E1FD                       	smpsAlterNote       $FD
000981FB 01                         	dc.b	$01
000981FC E1F9                       	smpsAlterNote       $F9
000981FE 01                         	dc.b	$01
000981FF E1FD                       	smpsAlterNote       $FD
00098201 01                         	dc.b	$01
00098202 E100                       	smpsAlterNote       $00
00098204 01                         	dc.b	$01
00098205 E104                       	smpsAlterNote       $04
00098207 01                         	dc.b	$01
00098208 E1FD                       	smpsAlterNote       $FD
0009820A ECF5                       	smpsPSGAlterVol     $F5
0009820C 9106                       	dc.b	nE1, $06
0009820E EC04                       	smpsPSGAlterVol     $04
00098210 E701                       	dc.b	smpsNoAttack, $01
00098212 EC07                       	smpsPSGAlterVol     $07
00098214 8003                       	dc.b	nRst, $03
00098216 ECF5                       	smpsPSGAlterVol     $F5
00098218 9106                       	dc.b	nE1, $06
0009821A EC04                       	smpsPSGAlterVol     $04
0009821C E701                       	dc.b	smpsNoAttack, $01
0009821E EC07                       	smpsPSGAlterVol     $07
00098220 8006                       	dc.b	nRst, $06
00098222 E100                       	smpsAlterNote       $00
00098224 01                         	dc.b	$01
00098225 E104                       	smpsAlterNote       $04
00098227 01                         	dc.b	$01
00098228 E100                       	smpsAlterNote       $00
0009822A 01                         	dc.b	$01
0009822B E1FD                       	smpsAlterNote       $FD
0009822D 01                         	dc.b	$01
0009822E ECF5                       	smpsPSGAlterVol     $F5
00098230 9206                       	dc.b	nF1, $06
00098232 EC04                       	smpsPSGAlterVol     $04
00098234 E701                       	dc.b	smpsNoAttack, $01
00098236 EC07                       	smpsPSGAlterVol     $07
00098238 8003                       	dc.b	nRst, $03
0009823A ECF5                       	smpsPSGAlterVol     $F5
0009823C 9207                       	dc.b	nF1, $07
0009823E EC0B                       	smpsPSGAlterVol     $0B
00098240 8007                       	dc.b	nRst, $07
00098242 E103                       	smpsAlterNote       $03
00098244 0101                       	dc.b	$01, $01
00098246 E1FD                       	smpsAlterNote       $FD
00098248 01                         	dc.b	$01
00098249 E1FA                       	smpsAlterNote       $FA
0009824B 01                         	dc.b	$01
0009824C E1FD                       	smpsAlterNote       $FD
0009824E ECF5                       	smpsPSGAlterVol     $F5
00098250 9106                       	dc.b	nE1, $06
00098252 EC0B                       	smpsPSGAlterVol     $0B
00098254 8004                       	dc.b	nRst, $04
00098256 ECF5                       	smpsPSGAlterVol     $F5
00098258 9106                       	dc.b	nE1, $06
0009825A EC04                       	smpsPSGAlterVol     $04
0009825C E701                       	dc.b	smpsNoAttack, $01
0009825E EC07                       	smpsPSGAlterVol     $07
00098260 8006                       	dc.b	nRst, $06
00098262 E100                       	smpsAlterNote       $00
00098264 01                         	dc.b	$01
00098265 E104                       	smpsAlterNote       $04
00098267 01                         	dc.b	$01
00098268 E100                       	smpsAlterNote       $00
0009826A 01                         	dc.b	$01
0009826B E1FA                       	smpsAlterNote       $FA
0009826D 01                         	dc.b	$01
0009826E E1FD                       	smpsAlterNote       $FD
00098270 ECF5                       	smpsPSGAlterVol     $F5
00098272 9206                       	dc.b	nF1, $06
00098274 EC04                       	smpsPSGAlterVol     $04
00098276 E701                       	dc.b	smpsNoAttack, $01
00098278 EC07                       	smpsPSGAlterVol     $07
0009827A 8003                       	dc.b	nRst, $03
0009827C ECF5                       	smpsPSGAlterVol     $F5
0009827E 9206                       	dc.b	nF1, $06
00098280 EC04                       	smpsPSGAlterVol     $04
00098282 E701                       	dc.b	smpsNoAttack, $01
00098284 EC07                       	smpsPSGAlterVol     $07
00098286 8006                       	dc.b	nRst, $06
00098288 E100                       	smpsAlterNote       $00
0009828A 01                         	dc.b	$01
0009828B E104                       	smpsAlterNote       $04
0009828D 01                         	dc.b	$01
0009828E E103                       	smpsAlterNote       $03
00098290 01                         	dc.b	$01
00098291 E1FD                       	smpsAlterNote       $FD
00098293 01                         	dc.b	$01
00098294 ECF5                       	smpsPSGAlterVol     $F5
00098296 9107                       	dc.b	nE1, $07
00098298 EC0B                       	smpsPSGAlterVol     $0B
0009829A 8004                       	dc.b	nRst, $04
0009829C ECF5                       	smpsPSGAlterVol     $F5
0009829E 9106                       	dc.b	nE1, $06
000982A0 EC0B                       	smpsPSGAlterVol     $0B
000982A2 8007                       	dc.b	nRst, $07
000982A4 E103                       	smpsAlterNote       $03
000982A6 0101                       	dc.b	$01, $01
000982A8 E100                       	smpsAlterNote       $00
000982AA 01                         	dc.b	$01
000982AB E1FA                       	smpsAlterNote       $FA
000982AD 01                         	dc.b	$01
000982AE E1FD                       	smpsAlterNote       $FD
000982B0 ECF5                       	smpsPSGAlterVol     $F5
000982B2 9206                       	dc.b	nF1, $06
000982B4 EC04                       	smpsPSGAlterVol     $04
000982B6 E701                       	dc.b	smpsNoAttack, $01
000982B8 EC07                       	smpsPSGAlterVol     $07
000982BA 8003                       	dc.b	nRst, $03
000982BC ECF5                       	smpsPSGAlterVol     $F5
000982BE 9206                       	dc.b	nF1, $06
000982C0 EC04                       	smpsPSGAlterVol     $04
000982C2 E701                       	dc.b	smpsNoAttack, $01
000982C4 EC07                       	smpsPSGAlterVol     $07
000982C6 8006                       	dc.b	nRst, $06
000982C8 E100                       	smpsAlterNote       $00
000982CA 01                         	dc.b	$01
000982CB E104                       	smpsAlterNote       $04
000982CD 01                         	dc.b	$01
000982CE E100                       	smpsAlterNote       $00
000982D0 01                         	dc.b	$01
000982D1 E1FD                       	smpsAlterNote       $FD
000982D3 01                         	dc.b	$01
000982D4 ECF5                       	smpsPSGAlterVol     $F5
000982D6 9106                       	dc.b	nE1, $06
000982D8 EC04                       	smpsPSGAlterVol     $04
000982DA E701                       	dc.b	smpsNoAttack, $01
000982DC EC07                       	smpsPSGAlterVol     $07
000982DE 8003                       	dc.b	nRst, $03
000982E0 ECF5                       	smpsPSGAlterVol     $F5
000982E2 9107 9106                  	dc.b	nE1, $07, nE1, $06
000982E6 EC04                       	smpsPSGAlterVol     $04
000982E8 E701                       	dc.b	smpsNoAttack, $01
000982EA ECFC                       	smpsPSGAlterVol     $FC
000982EC 9103                       	dc.b	nE1, $03
000982EE EC04                       	smpsPSGAlterVol     $04
000982F0 E701                       	dc.b	smpsNoAttack, $01
000982F2 ECFC                       	smpsPSGAlterVol     $FC
000982F4 9102                       	dc.b	nE1, $02
000982F6 EC04                       	smpsPSGAlterVol     $04
000982F8 E701                       	dc.b	smpsNoAttack, $01
000982FA ECFC                       	smpsPSGAlterVol     $FC
000982FC 9103                       	dc.b	nE1, $03
000982FE EC0B                       	smpsPSGAlterVol     $0B
00098300 800A                       	dc.b	nRst, $0A
00098302 E100                       	smpsAlterNote       $00
00098304 01                         	dc.b	$01
00098305 E104                       	smpsAlterNote       $04
00098307 01                         	dc.b	$01
00098308 E100                       	smpsAlterNote       $00
0009830A 01                         	dc.b	$01
0009830B E1FA                       	smpsAlterNote       $FA
0009830D 01                         	dc.b	$01
0009830E E1F9                       	smpsAlterNote       $F9
00098310 01                         	dc.b	$01
00098311 E1FD                       	smpsAlterNote       $FD
00098313 01                         	dc.b	$01
00098314 E103                       	smpsAlterNote       $03
00098316 0101                       	dc.b	$01, $01
00098318 E100                       	smpsAlterNote       $00
0009831A 01                         	dc.b	$01
0009831B E1FA                       	smpsAlterNote       $FA
0009831D 0101                       	dc.b	$01, $01
0009831F E1FD                       	smpsAlterNote       $FD
00098321 ECF5                       	smpsPSGAlterVol     $F5
00098323 9206                       	dc.b	nF1, $06
00098325 EC04                       	smpsPSGAlterVol     $04
00098327 E704                       	dc.b	smpsNoAttack, $04
00098329 ECFC                       	smpsPSGAlterVol     $FC
0009832B 9206                       	dc.b	nF1, $06
0009832D EC04                       	smpsPSGAlterVol     $04
0009832F E701                       	dc.b	smpsNoAttack, $01
00098331 EC07                       	smpsPSGAlterVol     $07
00098333 8006                       	dc.b	nRst, $06
00098335 E100                       	smpsAlterNote       $00
00098337 01                         	dc.b	$01
00098338 E104                       	smpsAlterNote       $04
0009833A 01                         	dc.b	$01
0009833B E103                       	smpsAlterNote       $03
0009833D 01                         	dc.b	$01
0009833E E1FD                       	smpsAlterNote       $FD
00098340 01                         	dc.b	$01
00098341 ECF5                       	smpsPSGAlterVol     $F5
00098343 9407                       	dc.b	nG1, $07
00098345 EC0B                       	smpsPSGAlterVol     $0B
00098347 8004                       	dc.b	nRst, $04
00098349 ECF5                       	smpsPSGAlterVol     $F5
0009834B 9406                       	dc.b	nG1, $06
0009834D EC0B                       	smpsPSGAlterVol     $0B
0009834F 8007                       	dc.b	nRst, $07
00098351 E103                       	smpsAlterNote       $03
00098353 0101                       	dc.b	$01, $01
00098355 E1FD                       	smpsAlterNote       $FD
00098357 01                         	dc.b	$01
00098358 E1F9                       	smpsAlterNote       $F9
0009835A 01                         	dc.b	$01
0009835B E1FD                       	smpsAlterNote       $FD
0009835D ECF5                       	smpsPSGAlterVol     $F5
0009835F 9206                       	dc.b	nF1, $06
00098361 EC04                       	smpsPSGAlterVol     $04
00098363 E701                       	dc.b	smpsNoAttack, $01
00098365 EC07                       	smpsPSGAlterVol     $07
00098367 8003                       	dc.b	nRst, $03
00098369 ECF5                       	smpsPSGAlterVol     $F5
0009836B 9206                       	dc.b	nF1, $06
0009836D EC04                       	smpsPSGAlterVol     $04
0009836F E701                       	dc.b	smpsNoAttack, $01
00098371 EC07                       	smpsPSGAlterVol     $07
00098373 8006                       	dc.b	nRst, $06
00098375 E100                       	smpsAlterNote       $00
00098377 01                         	dc.b	$01
00098378 E104                       	smpsAlterNote       $04
0009837A 01                         	dc.b	$01
0009837B E100                       	smpsAlterNote       $00
0009837D 01                         	dc.b	$01
0009837E E1FA                       	smpsAlterNote       $FA
00098380 01                         	dc.b	$01
00098381 E1FD                       	smpsAlterNote       $FD
00098383 ECF5                       	smpsPSGAlterVol     $F5
00098385 9206                       	dc.b	nF1, $06
00098387 EC04                       	smpsPSGAlterVol     $04
00098389 E701                       	dc.b	smpsNoAttack, $01
0009838B EC07                       	smpsPSGAlterVol     $07
0009838D 8003                       	dc.b	nRst, $03
0009838F ECF5                       	smpsPSGAlterVol     $F5
00098391 9107                       	dc.b	nE1, $07
00098393 EC0B                       	smpsPSGAlterVol     $0B
00098395 8006                       	dc.b	nRst, $06
00098397 E100                       	smpsAlterNote       $00
00098399 01                         	dc.b	$01
0009839A E103                       	smpsAlterNote       $03
0009839C 0101                       	dc.b	$01, $01
0009839E E1FD                       	smpsAlterNote       $FD
000983A0 01                         	dc.b	$01
000983A1 ECF5                       	smpsPSGAlterVol     $F5
000983A3 9207                       	dc.b	nF1, $07
000983A5 EC0B                       	smpsPSGAlterVol     $0B
000983A7 8004                       	dc.b	nRst, $04
000983A9 ECF5                       	smpsPSGAlterVol     $F5
000983AB 9206                       	dc.b	nF1, $06
000983AD EC04                       	smpsPSGAlterVol     $04
000983AF E701                       	dc.b	smpsNoAttack, $01
000983B1 EC07                       	smpsPSGAlterVol     $07
000983B3 8006                       	dc.b	nRst, $06
000983B5 E103                       	smpsAlterNote       $03
000983B7 01                         	dc.b	$01
000983B8 E104                       	smpsAlterNote       $04
000983BA 01                         	dc.b	$01
000983BB E100                       	smpsAlterNote       $00
000983BD 01                         	dc.b	$01
000983BE E1FB                       	smpsAlterNote       $FB
000983C0 01                         	dc.b	$01
000983C1 E1FD                       	smpsAlterNote       $FD
000983C3 ECF5                       	smpsPSGAlterVol     $F5
000983C5 9406                       	dc.b	nG1, $06
000983C7 EC04                       	smpsPSGAlterVol     $04
000983C9 E701                       	dc.b	smpsNoAttack, $01
000983CB EC07                       	smpsPSGAlterVol     $07
000983CD 8003                       	dc.b	nRst, $03
000983CF ECF5                       	smpsPSGAlterVol     $F5
000983D1 9406                       	dc.b	nG1, $06
000983D3 EC04                       	smpsPSGAlterVol     $04
000983D5 E701                       	dc.b	smpsNoAttack, $01
000983D7 EC07                       	smpsPSGAlterVol     $07
000983D9 8006                       	dc.b	nRst, $06
000983DB E100                       	smpsAlterNote       $00
000983DD 01                         	dc.b	$01
000983DE E104                       	smpsAlterNote       $04
000983E0 01                         	dc.b	$01
000983E1 E100                       	smpsAlterNote       $00
000983E3 01                         	dc.b	$01
000983E4 E1FD                       	smpsAlterNote       $FD
000983E6 01                         	dc.b	$01
000983E7 ECF5                       	smpsPSGAlterVol     $F5
000983E9 9206                       	dc.b	nF1, $06
000983EB EC04                       	smpsPSGAlterVol     $04
000983ED E701                       	dc.b	smpsNoAttack, $01
000983EF EC07                       	smpsPSGAlterVol     $07
000983F1 8003                       	dc.b	nRst, $03
000983F3 ECF5                       	smpsPSGAlterVol     $F5
000983F5 9207                       	dc.b	nF1, $07
000983F7 EC0B                       	smpsPSGAlterVol     $0B
000983F9 8007                       	dc.b	nRst, $07
000983FB E103                       	smpsAlterNote       $03
000983FD 0101                       	dc.b	$01, $01
000983FF E1FD                       	smpsAlterNote       $FD
00098401 01                         	dc.b	$01
00098402 E1FA                       	smpsAlterNote       $FA
00098404 01                         	dc.b	$01
00098405 E1FD                       	smpsAlterNote       $FD
00098407 ECF5                       	smpsPSGAlterVol     $F5
00098409 9206                       	dc.b	nF1, $06
0009840B EC0B                       	smpsPSGAlterVol     $0B
0009840D 8004                       	dc.b	nRst, $04
0009840F ECF5                       	smpsPSGAlterVol     $F5
00098411 9206                       	dc.b	nF1, $06
00098413 EC04                       	smpsPSGAlterVol     $04
00098415 E701                       	dc.b	smpsNoAttack, $01
00098417 EC07                       	smpsPSGAlterVol     $07
00098419 8006                       	dc.b	nRst, $06
0009841B E100                       	smpsAlterNote       $00
0009841D 01                         	dc.b	$01
0009841E E104                       	smpsAlterNote       $04
00098420 01                         	dc.b	$01
00098421 E100                       	smpsAlterNote       $00
00098423 01                         	dc.b	$01
00098424 E1FA                       	smpsAlterNote       $FA
00098426 01                         	dc.b	$01
00098427 E1FD                       	smpsAlterNote       $FD
00098429 ECF5                       	smpsPSGAlterVol     $F5
0009842B 9206                       	dc.b	nF1, $06
0009842D EC04                       	smpsPSGAlterVol     $04
0009842F E701                       	dc.b	smpsNoAttack, $01
00098431 EC07                       	smpsPSGAlterVol     $07
00098433 8003                       	dc.b	nRst, $03
00098435 ECF5                       	smpsPSGAlterVol     $F5
00098437 9207                       	dc.b	nF1, $07
00098439 EC0B                       	smpsPSGAlterVol     $0B
0009843B 8006                       	dc.b	nRst, $06
0009843D E100                       	smpsAlterNote       $00
0009843F 01                         	dc.b	$01
00098440 E103                       	smpsAlterNote       $03
00098442 0101                       	dc.b	$01, $01
00098444 E1FD                       	smpsAlterNote       $FD
00098446 01                         	dc.b	$01
00098447 ECF5                       	smpsPSGAlterVol     $F5
00098449 9207                       	dc.b	nF1, $07
0009844B EC0B                       	smpsPSGAlterVol     $0B
0009844D 8004                       	dc.b	nRst, $04
0009844F ECF5                       	smpsPSGAlterVol     $F5
00098451 9206                       	dc.b	nF1, $06
00098453 EC0B                       	smpsPSGAlterVol     $0B
00098455 8007                       	dc.b	nRst, $07
00098457 E103                       	smpsAlterNote       $03
00098459 0101                       	dc.b	$01, $01
0009845B E100                       	smpsAlterNote       $00
0009845D 01                         	dc.b	$01
0009845E E1FA                       	smpsAlterNote       $FA
00098460 01                         	dc.b	$01
00098461 E1FD                       	smpsAlterNote       $FD
00098463 ECF5                       	smpsPSGAlterVol     $F5
00098465 9206                       	dc.b	nF1, $06
00098467 EC04                       	smpsPSGAlterVol     $04
00098469 E701                       	dc.b	smpsNoAttack, $01
0009846B EC07                       	smpsPSGAlterVol     $07
0009846D 8003                       	dc.b	nRst, $03
0009846F ECF5                       	smpsPSGAlterVol     $F5
00098471 9206                       	dc.b	nF1, $06
00098473 EC04                       	smpsPSGAlterVol     $04
00098475 E701                       	dc.b	smpsNoAttack, $01
00098477 EC07                       	smpsPSGAlterVol     $07
00098479 8006                       	dc.b	nRst, $06
0009847B E100                       	smpsAlterNote       $00
0009847D 01                         	dc.b	$01
0009847E E104                       	smpsAlterNote       $04
00098480 01                         	dc.b	$01
00098481 E100                       	smpsAlterNote       $00
00098483 01                         	dc.b	$01
00098484 E1FD                       	smpsAlterNote       $FD
00098486 01                         	dc.b	$01
00098487 ECF5                       	smpsPSGAlterVol     $F5
00098489 9206                       	dc.b	nF1, $06
0009848B EC04                       	smpsPSGAlterVol     $04
0009848D E701                       	dc.b	smpsNoAttack, $01
0009848F EC07                       	smpsPSGAlterVol     $07
00098491 8003                       	dc.b	nRst, $03
00098493 ECF5                       	smpsPSGAlterVol     $F5
00098495 9207                       	dc.b	nF1, $07
00098497 EC0B                       	smpsPSGAlterVol     $0B
00098499 8007                       	dc.b	nRst, $07
0009849B E104                       	smpsAlterNote       $04
0009849D 0101                       	dc.b	$01, $01
0009849F E1FB                       	smpsAlterNote       $FB
000984A1 01                         	dc.b	$01
000984A2 E1F6                       	smpsAlterNote       $F6
000984A4 0101                       	dc.b	$01, $01
000984A6 E1FF                       	smpsAlterNote       $FF
000984A8 01                         	dc.b	$01
000984A9 E105                       	smpsAlterNote       $05
000984AB 01                         	dc.b	$01
000984AC E104                       	smpsAlterNote       $04
000984AE 01                         	dc.b	$01
000984AF E1FB                       	smpsAlterNote       $FB
000984B1 01                         	dc.b	$01
000984B2 E1F5                       	smpsAlterNote       $F5
000984B4 01                         	dc.b	$01
000984B5 E1FC                       	smpsAlterNote       $FC
000984B7 ECF5                       	smpsPSGAlterVol     $F5
000984B9 8B0E                       	dc.b	nBb0, $0E
000984BB E102                       	smpsAlterNote       $02
000984BD EC0B                       	smpsPSGAlterVol     $0B
000984BF 8001                       	dc.b	nRst, $01
000984C1 E101                       	smpsAlterNote       $01
000984C3 01                         	dc.b	$01
000984C4 E1FC                       	smpsAlterNote       $FC
000984C6 01                         	dc.b	$01
000984C7 E1F9                       	smpsAlterNote       $F9
000984C9 0101                       	dc.b	$01, $01
000984CB E1FF                       	smpsAlterNote       $FF
000984CD 01                         	dc.b	$01
000984CE E102                       	smpsAlterNote       $02
000984D0 01                         	dc.b	$01
000984D1 E1FF                       	smpsAlterNote       $FF
000984D3 01                         	dc.b	$01
000984D4 E1FC                       	smpsAlterNote       $FC
000984D6 01                         	dc.b	$01
000984D7 E1F8                       	smpsAlterNote       $F8
000984D9 01                         	dc.b	$01
000984DA E1FC                       	smpsAlterNote       $FC
000984DC 01                         	dc.b	$01
000984DD E101                       	smpsAlterNote       $01
000984DF 01                         	dc.b	$01
000984E0 E102                       	smpsAlterNote       $02
000984E2 01                         	dc.b	$01
000984E3 E1FF                       	smpsAlterNote       $FF
000984E5 01                         	dc.b	$01
000984E6 E1FB                       	smpsAlterNote       $FB
000984E8 ECF5                       	smpsPSGAlterVol     $F5
000984EA 8D0D                       	dc.b	nC1, $0D
000984EC E101                       	smpsAlterNote       $01
000984EE EC0B                       	smpsPSGAlterVol     $0B
000984F0 8001                       	dc.b	nRst, $01
000984F2 E102                       	smpsAlterNote       $02
000984F4 01                         	dc.b	$01
000984F5 E1FF                       	smpsAlterNote       $FF
000984F7 01                         	dc.b	$01
000984F8 E1F9                       	smpsAlterNote       $F9
000984FA 0101                       	dc.b	$01, $01
000984FC E1FC                       	smpsAlterNote       $FC
000984FE 01                         	dc.b	$01
000984FF E101                       	smpsAlterNote       $01
00098501 0101                       	dc.b	$01, $01
00098503 E1FC                       	smpsAlterNote       $FC
00098505 01                         	dc.b	$01
00098506 E1F9                       	smpsAlterNote       $F9
00098508 0101                       	dc.b	$01, $01
0009850A E1FF                       	smpsAlterNote       $FF
0009850C 01                         	dc.b	$01
0009850D E102                       	smpsAlterNote       $02
0009850F 01                         	dc.b	$01
00098510 E101                       	smpsAlterNote       $01
00098512 01                         	dc.b	$01
00098513 E1FC                       	smpsAlterNote       $FC
00098515 ECF5                       	smpsPSGAlterVol     $F5
00098517 8F0D                       	dc.b	nD1, $0D
00098519 E1FF                       	smpsAlterNote       $FF
0009851B EC04                       	smpsPSGAlterVol     $04
0009851D E701                       	dc.b	smpsNoAttack, $01
0009851F EC07                       	smpsPSGAlterVol     $07
00098521 E103                       	smpsAlterNote       $03
00098523 8001                       	dc.b	nRst, $01
00098525 E102                       	smpsAlterNote       $02
00098527 01                         	dc.b	$01
00098528 E1FD                       	smpsAlterNote       $FD
0009852A 01                         	dc.b	$01
0009852B E1F9                       	smpsAlterNote       $F9
0009852D 01                         	dc.b	$01
0009852E E1FD                       	smpsAlterNote       $FD
00098530 01                         	dc.b	$01
00098531 E100                       	smpsAlterNote       $00
00098533 01                         	dc.b	$01
00098534 E103                       	smpsAlterNote       $03
00098536 01                         	dc.b	$01
00098537 E100                       	smpsAlterNote       $00
00098539 01                         	dc.b	$01
0009853A E1FA                       	smpsAlterNote       $FA
0009853C 01                         	dc.b	$01
0009853D E1F9                       	smpsAlterNote       $F9
0009853F 01                         	dc.b	$01
00098540 E1FD                       	smpsAlterNote       $FD
00098542 01                         	dc.b	$01
00098543 E102                       	smpsAlterNote       $02
00098545 0101                       	dc.b	$01, $01
00098547 E100                       	smpsAlterNote       $00
00098549 01                         	dc.b	$01
0009854A E1FD                       	smpsAlterNote       $FD
0009854C ECF5                       	smpsPSGAlterVol     $F5
0009854E 910D                       	dc.b	nE1, $0D
00098550 E103                       	smpsAlterNote       $03
00098552 EC0B                       	smpsPSGAlterVol     $0B
00098554 8001 01                    	dc.b	nRst, $01, $01
00098557 E100                       	smpsAlterNote       $00
00098559 01                         	dc.b	$01
0009855A E1FA                       	smpsAlterNote       $FA
0009855C 0101                       	dc.b	$01, $01
0009855E E100                       	smpsAlterNote       $00
00098560 01                         	dc.b	$01
00098561 E103                       	smpsAlterNote       $03
00098563 01                         	dc.b	$01
00098564 E1FD                       	smpsAlterNote       $FD
00098566 ECF5                       	smpsPSGAlterVol     $F5
00098568 9206                       	dc.b	nF1, $06
0009856A EC04                       	smpsPSGAlterVol     $04
0009856C E701                       	dc.b	smpsNoAttack, $01
0009856E EC07                       	smpsPSGAlterVol     $07
00098570 8003                       	dc.b	nRst, $03
00098572 ECF5                       	smpsPSGAlterVol     $F5
00098574 9207                       	dc.b	nF1, $07
00098576 EC0B                       	smpsPSGAlterVol     $0B
00098578 8006                       	dc.b	nRst, $06
0009857A E100                       	smpsAlterNote       $00
0009857C 01                         	dc.b	$01
0009857D E103                       	smpsAlterNote       $03
0009857F 0101                       	dc.b	$01, $01
00098581 E1FD                       	smpsAlterNote       $FD
00098583 01                         	dc.b	$01
00098584 ECF5                       	smpsPSGAlterVol     $F5
00098586 9407                       	dc.b	nG1, $07
00098588 EC0B                       	smpsPSGAlterVol     $0B
0009858A 8004                       	dc.b	nRst, $04
0009858C ECF5                       	smpsPSGAlterVol     $F5
0009858E 9406                       	dc.b	nG1, $06
00098590 EC04                       	smpsPSGAlterVol     $04
00098592 E701                       	dc.b	smpsNoAttack, $01
00098594 EC07                       	smpsPSGAlterVol     $07
00098596 8006                       	dc.b	nRst, $06
00098598 E103                       	smpsAlterNote       $03
0009859A 01                         	dc.b	$01
0009859B E104                       	smpsAlterNote       $04
0009859D 01                         	dc.b	$01
0009859E E100                       	smpsAlterNote       $00
000985A0 01                         	dc.b	$01
000985A1 E1F9                       	smpsAlterNote       $F9
000985A3 01                         	dc.b	$01
000985A4 E1FD                       	smpsAlterNote       $FD
000985A6 ECF5                       	smpsPSGAlterVol     $F5
000985A8 9206                       	dc.b	nF1, $06
000985AA EC04                       	smpsPSGAlterVol     $04
000985AC E701                       	dc.b	smpsNoAttack, $01
000985AE EC07                       	smpsPSGAlterVol     $07
000985B0 8003                       	dc.b	nRst, $03
000985B2 ECF5                       	smpsPSGAlterVol     $F5
000985B4 9206                       	dc.b	nF1, $06
000985B6 EC04                       	smpsPSGAlterVol     $04
000985B8 E701                       	dc.b	smpsNoAttack, $01
000985BA EC07                       	smpsPSGAlterVol     $07
000985BC 8006                       	dc.b	nRst, $06
000985BE E100                       	smpsAlterNote       $00
000985C0 01                         	dc.b	$01
000985C1 E104                       	smpsAlterNote       $04
000985C3 01                         	dc.b	$01
000985C4 E103                       	smpsAlterNote       $03
000985C6 01                         	dc.b	$01
000985C7 E1FD                       	smpsAlterNote       $FD
000985C9 01                         	dc.b	$01
000985CA ECF5                       	smpsPSGAlterVol     $F5
000985CC 9407                       	dc.b	nG1, $07
000985CE EC0B                       	smpsPSGAlterVol     $0B
000985D0 8004                       	dc.b	nRst, $04
000985D2 ECF5                       	smpsPSGAlterVol     $F5
000985D4 9406                       	dc.b	nG1, $06
000985D6 EC0B                       	smpsPSGAlterVol     $0B
000985D8 8007                       	dc.b	nRst, $07
000985DA E103                       	smpsAlterNote       $03
000985DC 0101                       	dc.b	$01, $01
000985DE E100                       	smpsAlterNote       $00
000985E0 01                         	dc.b	$01
000985E1 E1F9                       	smpsAlterNote       $F9
000985E3 01                         	dc.b	$01
000985E4 E1FD                       	smpsAlterNote       $FD
000985E6 ECF5                       	smpsPSGAlterVol     $F5
000985E8 9206                       	dc.b	nF1, $06
000985EA EC04                       	smpsPSGAlterVol     $04
000985EC E701                       	dc.b	smpsNoAttack, $01
000985EE EC07                       	smpsPSGAlterVol     $07
000985F0 8003                       	dc.b	nRst, $03
000985F2 ECF5                       	smpsPSGAlterVol     $F5
000985F4 9206                       	dc.b	nF1, $06
000985F6 EC04                       	smpsPSGAlterVol     $04
000985F8 E701                       	dc.b	smpsNoAttack, $01
000985FA EC07                       	smpsPSGAlterVol     $07
000985FC 8006                       	dc.b	nRst, $06
000985FE E100                       	smpsAlterNote       $00
00098600 01                         	dc.b	$01
00098601 E104                       	smpsAlterNote       $04
00098603 01                         	dc.b	$01
00098604 E100                       	smpsAlterNote       $00
00098606 01                         	dc.b	$01
00098607 E1FB                       	smpsAlterNote       $FB
00098609 01                         	dc.b	$01
0009860A E1FD                       	smpsAlterNote       $FD
0009860C ECF5                       	smpsPSGAlterVol     $F5
0009860E 9406                       	dc.b	nG1, $06
00098610 EC04                       	smpsPSGAlterVol     $04
00098612 E701                       	dc.b	smpsNoAttack, $01
00098614 EC07                       	smpsPSGAlterVol     $07
00098616 8003                       	dc.b	nRst, $03
00098618 ECF5                       	smpsPSGAlterVol     $F5
0009861A 9407                       	dc.b	nG1, $07
0009861C EC0B                       	smpsPSGAlterVol     $0B
0009861E 8006                       	dc.b	nRst, $06
00098620 E100                       	smpsAlterNote       $00
00098622 01                         	dc.b	$01
00098623 E103                       	smpsAlterNote       $03
00098625 0101                       	dc.b	$01, $01
00098627 E1FD                       	smpsAlterNote       $FD
00098629 01                         	dc.b	$01
0009862A ECF5                       	smpsPSGAlterVol     $F5
0009862C 9207                       	dc.b	nF1, $07
0009862E EC0B                       	smpsPSGAlterVol     $0B
00098630 8004                       	dc.b	nRst, $04
00098632 ECF5                       	smpsPSGAlterVol     $F5
00098634 9206                       	dc.b	nF1, $06
00098636 EC04                       	smpsPSGAlterVol     $04
00098638 E701                       	dc.b	smpsNoAttack, $01
0009863A ECFC                       	smpsPSGAlterVol     $FC
0009863C E1FC                       	smpsAlterNote       $FC
0009863E 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
00098642 EC04                       	smpsPSGAlterVol     $04
00098644 E701                       	dc.b	smpsNoAttack, $01
00098646 ECFC                       	smpsPSGAlterVol     $FC
00098648 9003                       	dc.b	nEb1, $03
0009864A E1FD                       	smpsAlterNote       $FD
0009864C 9403                       	dc.b	nG1, $03
0009864E EC04                       	smpsPSGAlterVol     $04
00098650 E701                       	dc.b	smpsNoAttack, $01
00098652 E1FE                       	smpsAlterNote       $FE
00098654 ECFC                       	smpsPSGAlterVol     $FC
00098656 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0009865A EC04                       	smpsPSGAlterVol     $04
0009865C E701                       	dc.b	smpsNoAttack, $01
0009865E EC07                       	smpsPSGAlterVol     $07
00098660 8009                       	dc.b	nRst, $09
00098662 E100                       	smpsAlterNote       $00
00098664 01                         	dc.b	$01
00098665 F6F5 19                    	smpsJump            music84_Jump07
00098668                            
00098668                            ; PSG2 Data
00098668                            music84_PSG2:
00098668 E1FC                       	smpsAlterNote       $FC
0009866A EC04                       	smpsPSGAlterVol     $04
0009866C 8F03                       	dc.b	nD1, $03
0009866E E1FD                       	smpsAlterNote       $FD
00098670 9203                       	dc.b	nF1, $03
00098672 EC04                       	smpsPSGAlterVol     $04
00098674 E701                       	dc.b	smpsNoAttack, $01
00098676 E1FE                       	smpsAlterNote       $FE
00098678 ECFC                       	smpsPSGAlterVol     $FC
0009867A 9603                       	dc.b	nA1, $03
0009867C E1FD                       	smpsAlterNote       $FD
0009867E 9103                       	dc.b	nE1, $03
00098680 EC04                       	smpsPSGAlterVol     $04
00098682 E701                       	dc.b	smpsNoAttack, $01
00098684 ECFC                       	smpsPSGAlterVol     $FC
00098686 9403                       	dc.b	nG1, $03
00098688 E1FE                       	smpsAlterNote       $FE
0009868A 9703                       	dc.b	nBb1, $03
0009868C EC04                       	smpsPSGAlterVol     $04
0009868E E701                       	dc.b	smpsNoAttack, $01
00098690 E1FF                       	smpsAlterNote       $FF
00098692 ECFC                       	smpsPSGAlterVol     $FC
00098694 9B02                       	dc.b	nD2, $02
00098696 EC04                       	smpsPSGAlterVol     $04
00098698 E701                       	dc.b	smpsNoAttack, $01
0009869A ECFC                       	smpsPSGAlterVol     $FC
0009869C E1FE                       	smpsAlterNote       $FE
0009869E 9A03                       	dc.b	nCs2, $03
000986A0 EC0B                       	smpsPSGAlterVol     $0B
000986A2 800A                       	dc.b	nRst, $0A
000986A4 E102                       	smpsAlterNote       $02
000986A6 01                         	dc.b	$01
000986A7 E10A                       	smpsAlterNote       $0A
000986A9 01                         	dc.b	$01
000986AA E102                       	smpsAlterNote       $02
000986AC 01                         	dc.b	$01
000986AD E1FC                       	smpsAlterNote       $FC
000986AF 01                         	dc.b	$01
000986B0 E10A                       	smpsAlterNote       $0A
000986B2 01                         	dc.b	$01
000986B3 E1FC                       	smpsAlterNote       $FC
000986B5 01                         	dc.b	$01
000986B6 E108                       	smpsAlterNote       $08
000986B8 01                         	dc.b	$01
000986B9 E10A                       	smpsAlterNote       $0A
000986BB 01                         	dc.b	$01
000986BC E102                       	smpsAlterNote       $02
000986BE 01                         	dc.b	$01
000986BF E1F7                       	smpsAlterNote       $F7
000986C1 0101                       	dc.b	$01, $01
000986C3 E102                       	smpsAlterNote       $02
000986C5 01                         	dc.b	$01
000986C6 E108                       	smpsAlterNote       $08
000986C8 0101                       	dc.b	$01, $01
000986CA E1FC                       	smpsAlterNote       $FC
000986CC 01                         	dc.b	$01
000986CD E10A                       	smpsAlterNote       $0A
000986CF 01                         	dc.b	$01
000986D0 E1F7                       	smpsAlterNote       $F7
000986D2 01                         	dc.b	$01
000986D3 E102                       	smpsAlterNote       $02
000986D5 01                         	dc.b	$01
000986D6 E10A                       	smpsAlterNote       $0A
000986D8 01                         	dc.b	$01
000986D9 E102                       	smpsAlterNote       $02
000986DB 01                         	dc.b	$01
000986DC E1FC                       	smpsAlterNote       $FC
000986DE 01                         	dc.b	$01
000986DF                            
000986DF                            music84_Jump06:
000986DF E10A                       	smpsAlterNote       $0A
000986E1 8001                       	dc.b	nRst, $01
000986E3 E1FC                       	smpsAlterNote       $FC
000986E5 01                         	dc.b	$01
000986E6 E108                       	smpsAlterNote       $08
000986E8 01                         	dc.b	$01
000986E9 E10A                       	smpsAlterNote       $0A
000986EB 01                         	dc.b	$01
000986EC E1FC                       	smpsAlterNote       $FC
000986EE ECF5                       	smpsPSGAlterVol     $F5
000986F0 8F06                       	dc.b	nD1, $06
000986F2 EC04                       	smpsPSGAlterVol     $04
000986F4 E701                       	dc.b	smpsNoAttack, $01
000986F6 EC07                       	smpsPSGAlterVol     $07
000986F8 8003                       	dc.b	nRst, $03
000986FA ECF5                       	smpsPSGAlterVol     $F5
000986FC 8F06                       	dc.b	nD1, $06
000986FE EC04                       	smpsPSGAlterVol     $04
00098700 E701                       	dc.b	smpsNoAttack, $01
00098702 EC07                       	smpsPSGAlterVol     $07
00098704 8006                       	dc.b	nRst, $06
00098706 E1FF                       	smpsAlterNote       $FF
00098708 01                         	dc.b	$01
00098709 E102                       	smpsAlterNote       $02
0009870B 01                         	dc.b	$01
0009870C E1FF                       	smpsAlterNote       $FF
0009870E 01                         	dc.b	$01
0009870F E1F9                       	smpsAlterNote       $F9
00098711 01                         	dc.b	$01
00098712 E1FC                       	smpsAlterNote       $FC
00098714 ECF5                       	smpsPSGAlterVol     $F5
00098716 9006                       	dc.b	nEb1, $06
00098718 EC04                       	smpsPSGAlterVol     $04
0009871A E701                       	dc.b	smpsNoAttack, $01
0009871C EC07                       	smpsPSGAlterVol     $07
0009871E 8003                       	dc.b	nRst, $03
00098720 ECF5                       	smpsPSGAlterVol     $F5
00098722 9007                       	dc.b	nEb1, $07
00098724 EC0B                       	smpsPSGAlterVol     $0B
00098726 8006                       	dc.b	nRst, $06
00098728 E1FF                       	smpsAlterNote       $FF
0009872A 01                         	dc.b	$01
0009872B E103                       	smpsAlterNote       $03
0009872D 0101                       	dc.b	$01, $01
0009872F E1FC                       	smpsAlterNote       $FC
00098731 01                         	dc.b	$01
00098732 ECF5                       	smpsPSGAlterVol     $F5
00098734 8F07                       	dc.b	nD1, $07
00098736 EC0B                       	smpsPSGAlterVol     $0B
00098738 8004                       	dc.b	nRst, $04
0009873A ECF5                       	smpsPSGAlterVol     $F5
0009873C 8F06                       	dc.b	nD1, $06
0009873E EC04                       	smpsPSGAlterVol     $04
00098740 E701                       	dc.b	smpsNoAttack, $01
00098742 EC07                       	smpsPSGAlterVol     $07
00098744 8006                       	dc.b	nRst, $06
00098746 E102                       	smpsAlterNote       $02
00098748 01                         	dc.b	$01
00098749 E103                       	smpsAlterNote       $03
0009874B 01                         	dc.b	$01
0009874C E1FF                       	smpsAlterNote       $FF
0009874E 01                         	dc.b	$01
0009874F E1F9                       	smpsAlterNote       $F9
00098751 01                         	dc.b	$01
00098752 E1FC                       	smpsAlterNote       $FC
00098754 ECF5                       	smpsPSGAlterVol     $F5
00098756 8F06                       	dc.b	nD1, $06
00098758 EC04                       	smpsPSGAlterVol     $04
0009875A E701                       	dc.b	smpsNoAttack, $01
0009875C EC07                       	smpsPSGAlterVol     $07
0009875E 8003                       	dc.b	nRst, $03
00098760 ECF5                       	smpsPSGAlterVol     $F5
00098762 8F06                       	dc.b	nD1, $06
00098764 EC04                       	smpsPSGAlterVol     $04
00098766 E701                       	dc.b	smpsNoAttack, $01
00098768 EC07                       	smpsPSGAlterVol     $07
0009876A 8006                       	dc.b	nRst, $06
0009876C E1FF                       	smpsAlterNote       $FF
0009876E 01                         	dc.b	$01
0009876F E103                       	smpsAlterNote       $03
00098771 01                         	dc.b	$01
00098772 E1FF                       	smpsAlterNote       $FF
00098774 01                         	dc.b	$01
00098775 E1FC                       	smpsAlterNote       $FC
00098777 01                         	dc.b	$01
00098778 ECF5                       	smpsPSGAlterVol     $F5
0009877A 8F06                       	dc.b	nD1, $06
0009877C EC04                       	smpsPSGAlterVol     $04
0009877E E701                       	dc.b	smpsNoAttack, $01
00098780 EC07                       	smpsPSGAlterVol     $07
00098782 8003                       	dc.b	nRst, $03
00098784 ECF5                       	smpsPSGAlterVol     $F5
00098786 8F07                       	dc.b	nD1, $07
00098788 EC0B                       	smpsPSGAlterVol     $0B
0009878A 8007                       	dc.b	nRst, $07
0009878C E101                       	smpsAlterNote       $01
0009878E 0101                       	dc.b	$01, $01
00098790 E1FC                       	smpsAlterNote       $FC
00098792 01                         	dc.b	$01
00098793 E1F9                       	smpsAlterNote       $F9
00098795 01                         	dc.b	$01
00098796 E1FC                       	smpsAlterNote       $FC
00098798 ECF5                       	smpsPSGAlterVol     $F5
0009879A 9006                       	dc.b	nEb1, $06
0009879C EC0B                       	smpsPSGAlterVol     $0B
0009879E 8004                       	dc.b	nRst, $04
000987A0 ECF5                       	smpsPSGAlterVol     $F5
000987A2 9006                       	dc.b	nEb1, $06
000987A4 EC04                       	smpsPSGAlterVol     $04
000987A6 E701                       	dc.b	smpsNoAttack, $01
000987A8 EC07                       	smpsPSGAlterVol     $07
000987AA 8006                       	dc.b	nRst, $06
000987AC E100                       	smpsAlterNote       $00
000987AE 01                         	dc.b	$01
000987AF E102                       	smpsAlterNote       $02
000987B1 01                         	dc.b	$01
000987B2 E100                       	smpsAlterNote       $00
000987B4 01                         	dc.b	$01
000987B5 E1FD                       	smpsAlterNote       $FD
000987B7 01                         	dc.b	$01
000987B8 E1FF                       	smpsAlterNote       $FF
000987BA ECF5                       	smpsPSGAlterVol     $F5
000987BC 9B06                       	dc.b	nD2, $06
000987BE EC04                       	smpsPSGAlterVol     $04
000987C0 E701                       	dc.b	smpsNoAttack, $01
000987C2 EC07                       	smpsPSGAlterVol     $07
000987C4 8003                       	dc.b	nRst, $03
000987C6 ECF5                       	smpsPSGAlterVol     $F5
000987C8 9B07                       	dc.b	nD2, $07
000987CA EC0B                       	smpsPSGAlterVol     $0B
000987CC 8006                       	dc.b	nRst, $06
000987CE E102                       	smpsAlterNote       $02
000987D0 01                         	dc.b	$01
000987D1 E106                       	smpsAlterNote       $06
000987D3 01                         	dc.b	$01
000987D4 E105                       	smpsAlterNote       $05
000987D6 01                         	dc.b	$01
000987D7 E1FF                       	smpsAlterNote       $FF
000987D9 01                         	dc.b	$01
000987DA ECF5                       	smpsPSGAlterVol     $F5
000987DC 9B07                       	dc.b	nD2, $07
000987DE EC0B                       	smpsPSGAlterVol     $0B
000987E0 8004                       	dc.b	nRst, $04
000987E2 ECF5                       	smpsPSGAlterVol     $F5
000987E4 9B06                       	dc.b	nD2, $06
000987E6 EC0B                       	smpsPSGAlterVol     $0B
000987E8 8007                       	dc.b	nRst, $07
000987EA E105                       	smpsAlterNote       $05
000987EC 0101                       	dc.b	$01, $01
000987EE E102                       	smpsAlterNote       $02
000987F0 01                         	dc.b	$01
000987F1 E1FC                       	smpsAlterNote       $FC
000987F3 01                         	dc.b	$01
000987F4 E1FF                       	smpsAlterNote       $FF
000987F6 ECF5                       	smpsPSGAlterVol     $F5
000987F8 9B06                       	dc.b	nD2, $06
000987FA EC04                       	smpsPSGAlterVol     $04
000987FC E701                       	dc.b	smpsNoAttack, $01
000987FE EC07                       	smpsPSGAlterVol     $07
00098800 8003                       	dc.b	nRst, $03
00098802 ECF5                       	smpsPSGAlterVol     $F5
00098804 9B06                       	dc.b	nD2, $06
00098806 EC04                       	smpsPSGAlterVol     $04
00098808 E701                       	dc.b	smpsNoAttack, $01
0009880A EC07                       	smpsPSGAlterVol     $07
0009880C 8006                       	dc.b	nRst, $06
0009880E E102                       	smpsAlterNote       $02
00098810 01                         	dc.b	$01
00098811 E106                       	smpsAlterNote       $06
00098813 01                         	dc.b	$01
00098814 E102                       	smpsAlterNote       $02
00098816 01                         	dc.b	$01
00098817 E1FF                       	smpsAlterNote       $FF
00098819 01                         	dc.b	$01
0009881A ECF5                       	smpsPSGAlterVol     $F5
0009881C 9B06                       	dc.b	nD2, $06
0009881E EC04                       	smpsPSGAlterVol     $04
00098820 E701                       	dc.b	smpsNoAttack, $01
00098822 EC07                       	smpsPSGAlterVol     $07
00098824 8003                       	dc.b	nRst, $03
00098826 ECF5                       	smpsPSGAlterVol     $F5
00098828 9B07                       	dc.b	nD2, $07
0009882A EC0B                       	smpsPSGAlterVol     $0B
0009882C 8007                       	dc.b	nRst, $07
0009882E E105                       	smpsAlterNote       $05
00098830 0101                       	dc.b	$01, $01
00098832 E1FF                       	smpsAlterNote       $FF
00098834 01                         	dc.b	$01
00098835 E1FC                       	smpsAlterNote       $FC
00098837 01                         	dc.b	$01
00098838 E1FF                       	smpsAlterNote       $FF
0009883A ECF5                       	smpsPSGAlterVol     $F5
0009883C 9B06                       	dc.b	nD2, $06
0009883E EC0B                       	smpsPSGAlterVol     $0B
00098840 8004                       	dc.b	nRst, $04
00098842 ECF5                       	smpsPSGAlterVol     $F5
00098844 9B06                       	dc.b	nD2, $06
00098846 EC04                       	smpsPSGAlterVol     $04
00098848 E701                       	dc.b	smpsNoAttack, $01
0009884A EC07                       	smpsPSGAlterVol     $07
0009884C 8006                       	dc.b	nRst, $06
0009884E E105                       	smpsAlterNote       $05
00098850 01                         	dc.b	$01
00098851 E106                       	smpsAlterNote       $06
00098853 01                         	dc.b	$01
00098854 E102                       	smpsAlterNote       $02
00098856 01                         	dc.b	$01
00098857 E1FC                       	smpsAlterNote       $FC
00098859 01                         	dc.b	$01
0009885A E1FF                       	smpsAlterNote       $FF
0009885C ECF5                       	smpsPSGAlterVol     $F5
0009885E 9B06                       	dc.b	nD2, $06
00098860 EC04                       	smpsPSGAlterVol     $04
00098862 E701                       	dc.b	smpsNoAttack, $01
00098864 EC07                       	smpsPSGAlterVol     $07
00098866 8003                       	dc.b	nRst, $03
00098868 ECF5                       	smpsPSGAlterVol     $F5
0009886A 9B06                       	dc.b	nD2, $06
0009886C EC04                       	smpsPSGAlterVol     $04
0009886E E701                       	dc.b	smpsNoAttack, $01
00098870 EC07                       	smpsPSGAlterVol     $07
00098872 8006                       	dc.b	nRst, $06
00098874 E102                       	smpsAlterNote       $02
00098876 01                         	dc.b	$01
00098877 E106                       	smpsAlterNote       $06
00098879 01                         	dc.b	$01
0009887A E105                       	smpsAlterNote       $05
0009887C 01                         	dc.b	$01
0009887D E1FF                       	smpsAlterNote       $FF
0009887F 01                         	dc.b	$01
00098880 ECF5                       	smpsPSGAlterVol     $F5
00098882 9B07                       	dc.b	nD2, $07
00098884 EC0B                       	smpsPSGAlterVol     $0B
00098886 8004                       	dc.b	nRst, $04
00098888 ECF5                       	smpsPSGAlterVol     $F5
0009888A 9B06                       	dc.b	nD2, $06
0009888C EC0B                       	smpsPSGAlterVol     $0B
0009888E 8007                       	dc.b	nRst, $07
00098890 E105                       	smpsAlterNote       $05
00098892 0101                       	dc.b	$01, $01
00098894 E102                       	smpsAlterNote       $02
00098896 01                         	dc.b	$01
00098897 E1FC                       	smpsAlterNote       $FC
00098899 01                         	dc.b	$01
0009889A E1FF                       	smpsAlterNote       $FF
0009889C ECF5                       	smpsPSGAlterVol     $F5
0009889E 9B06                       	dc.b	nD2, $06
000988A0 EC04                       	smpsPSGAlterVol     $04
000988A2 E701                       	dc.b	smpsNoAttack, $01
000988A4 EC07                       	smpsPSGAlterVol     $07
000988A6 8003                       	dc.b	nRst, $03
000988A8 ECF5                       	smpsPSGAlterVol     $F5
000988AA 9B06                       	dc.b	nD2, $06
000988AC EC04                       	smpsPSGAlterVol     $04
000988AE E701                       	dc.b	smpsNoAttack, $01
000988B0 EC07                       	smpsPSGAlterVol     $07
000988B2 8006                       	dc.b	nRst, $06
000988B4 E102                       	smpsAlterNote       $02
000988B6 01                         	dc.b	$01
000988B7 E106                       	smpsAlterNote       $06
000988B9 01                         	dc.b	$01
000988BA E102                       	smpsAlterNote       $02
000988BC 01                         	dc.b	$01
000988BD E1FF                       	smpsAlterNote       $FF
000988BF 01                         	dc.b	$01
000988C0 ECF5                       	smpsPSGAlterVol     $F5
000988C2 9B06                       	dc.b	nD2, $06
000988C4 EC04                       	smpsPSGAlterVol     $04
000988C6 E701                       	dc.b	smpsNoAttack, $01
000988C8 EC07                       	smpsPSGAlterVol     $07
000988CA 8003                       	dc.b	nRst, $03
000988CC ECF5                       	smpsPSGAlterVol     $F5
000988CE 9B07                       	dc.b	nD2, $07
000988D0 E1FE                       	smpsAlterNote       $FE
000988D2 9706                       	dc.b	nBb1, $06
000988D4 EC04                       	smpsPSGAlterVol     $04
000988D6 E701                       	dc.b	smpsNoAttack, $01
000988D8 ECFC                       	smpsPSGAlterVol     $FC
000988DA 9703                       	dc.b	nBb1, $03
000988DC EC04                       	smpsPSGAlterVol     $04
000988DE E701                       	dc.b	smpsNoAttack, $01
000988E0 ECFC                       	smpsPSGAlterVol     $FC
000988E2 9702                       	dc.b	nBb1, $02
000988E4 EC04                       	smpsPSGAlterVol     $04
000988E6 E701                       	dc.b	smpsNoAttack, $01
000988E8 ECFC                       	smpsPSGAlterVol     $FC
000988EA 9606                       	dc.b	nA1, $06
000988EC EC04                       	smpsPSGAlterVol     $04
000988EE E701                       	dc.b	smpsNoAttack, $01
000988F0 EC07                       	smpsPSGAlterVol     $07
000988F2 8006                       	dc.b	nRst, $06
000988F4 E101                       	smpsAlterNote       $01
000988F6 01                         	dc.b	$01
000988F7 E107                       	smpsAlterNote       $07
000988F9 01                         	dc.b	$01
000988FA E101                       	smpsAlterNote       $01
000988FC 01                         	dc.b	$01
000988FD E1F8                       	smpsAlterNote       $F8
000988FF 01                         	dc.b	$01
00098900 E1F7                       	smpsAlterNote       $F7
00098902 01                         	dc.b	$01
00098903 E1FC                       	smpsAlterNote       $FC
00098905 01                         	dc.b	$01
00098906 E106                       	smpsAlterNote       $06
00098908 01                         	dc.b	$01
00098909 E107                       	smpsAlterNote       $07
0009890B 01                         	dc.b	$01
0009890C E101                       	smpsAlterNote       $01
0009890E 01                         	dc.b	$01
0009890F E1F8                       	smpsAlterNote       $F8
00098911 0101                       	dc.b	$01, $01
00098913 E1FC                       	smpsAlterNote       $FC
00098915 ECF5                       	smpsPSGAlterVol     $F5
00098917 8F06                       	dc.b	nD1, $06
00098919 EC04                       	smpsPSGAlterVol     $04
0009891B E701                       	dc.b	smpsNoAttack, $01
0009891D EC07                       	smpsPSGAlterVol     $07
0009891F 8003                       	dc.b	nRst, $03
00098921 ECF5                       	smpsPSGAlterVol     $F5
00098923 8F06                       	dc.b	nD1, $06
00098925 EC04                       	smpsPSGAlterVol     $04
00098927 E701                       	dc.b	smpsNoAttack, $01
00098929 EC07                       	smpsPSGAlterVol     $07
0009892B 8006                       	dc.b	nRst, $06
0009892D E1FF                       	smpsAlterNote       $FF
0009892F 01                         	dc.b	$01
00098930 E102                       	smpsAlterNote       $02
00098932 01                         	dc.b	$01
00098933 E101                       	smpsAlterNote       $01
00098935 01                         	dc.b	$01
00098936 E1FC                       	smpsAlterNote       $FC
00098938 01                         	dc.b	$01
00098939 ECF5                       	smpsPSGAlterVol     $F5
0009893B 9007                       	dc.b	nEb1, $07
0009893D EC0B                       	smpsPSGAlterVol     $0B
0009893F 8004                       	dc.b	nRst, $04
00098941 ECF5                       	smpsPSGAlterVol     $F5
00098943 9006                       	dc.b	nEb1, $06
00098945 EC0B                       	smpsPSGAlterVol     $0B
00098947 8007                       	dc.b	nRst, $07
00098949 E103                       	smpsAlterNote       $03
0009894B 0101                       	dc.b	$01, $01
0009894D E1FC                       	smpsAlterNote       $FC
0009894F 01                         	dc.b	$01
00098950 E1F9                       	smpsAlterNote       $F9
00098952 01                         	dc.b	$01
00098953 E1FC                       	smpsAlterNote       $FC
00098955 ECF5                       	smpsPSGAlterVol     $F5
00098957 8F06                       	dc.b	nD1, $06
00098959 EC04                       	smpsPSGAlterVol     $04
0009895B E701                       	dc.b	smpsNoAttack, $01
0009895D EC07                       	smpsPSGAlterVol     $07
0009895F 8003                       	dc.b	nRst, $03
00098961 ECF5                       	smpsPSGAlterVol     $F5
00098963 8F06                       	dc.b	nD1, $06
00098965 EC04                       	smpsPSGAlterVol     $04
00098967 E701                       	dc.b	smpsNoAttack, $01
00098969 EC07                       	smpsPSGAlterVol     $07
0009896B 8006                       	dc.b	nRst, $06
0009896D E1FF                       	smpsAlterNote       $FF
0009896F 01                         	dc.b	$01
00098970 E103                       	smpsAlterNote       $03
00098972 01                         	dc.b	$01
00098973 E1FF                       	smpsAlterNote       $FF
00098975 01                         	dc.b	$01
00098976 E1F9                       	smpsAlterNote       $F9
00098978 01                         	dc.b	$01
00098979 E1FC                       	smpsAlterNote       $FC
0009897B ECF5                       	smpsPSGAlterVol     $F5
0009897D 8F06                       	dc.b	nD1, $06
0009897F EC04                       	smpsPSGAlterVol     $04
00098981 E701                       	dc.b	smpsNoAttack, $01
00098983 EC07                       	smpsPSGAlterVol     $07
00098985 8003                       	dc.b	nRst, $03
00098987 ECF5                       	smpsPSGAlterVol     $F5
00098989 8F07                       	dc.b	nD1, $07
0009898B EC0B                       	smpsPSGAlterVol     $0B
0009898D 8006                       	dc.b	nRst, $06
0009898F E1FF                       	smpsAlterNote       $FF
00098991 01                         	dc.b	$01
00098992 E102                       	smpsAlterNote       $02
00098994 0101                       	dc.b	$01, $01
00098996 E1FC                       	smpsAlterNote       $FC
00098998 01                         	dc.b	$01
00098999 ECF5                       	smpsPSGAlterVol     $F5
0009899B 8F07                       	dc.b	nD1, $07
0009899D EC0B                       	smpsPSGAlterVol     $0B
0009899F 8004                       	dc.b	nRst, $04
000989A1 ECF5                       	smpsPSGAlterVol     $F5
000989A3 8F06                       	dc.b	nD1, $06
000989A5 EC04                       	smpsPSGAlterVol     $04
000989A7 E701                       	dc.b	smpsNoAttack, $01
000989A9 EC07                       	smpsPSGAlterVol     $07
000989AB 8006                       	dc.b	nRst, $06
000989AD E101                       	smpsAlterNote       $01
000989AF 01                         	dc.b	$01
000989B0 E102                       	smpsAlterNote       $02
000989B2 01                         	dc.b	$01
000989B3 E1FF                       	smpsAlterNote       $FF
000989B5 01                         	dc.b	$01
000989B6 E1F9                       	smpsAlterNote       $F9
000989B8 01                         	dc.b	$01
000989B9 E1FC                       	smpsAlterNote       $FC
000989BB ECF5                       	smpsPSGAlterVol     $F5
000989BD 9006                       	dc.b	nEb1, $06
000989BF EC04                       	smpsPSGAlterVol     $04
000989C1 E701                       	dc.b	smpsNoAttack, $01
000989C3 EC07                       	smpsPSGAlterVol     $07
000989C5 8003                       	dc.b	nRst, $03
000989C7 ECF5                       	smpsPSGAlterVol     $F5
000989C9 9006                       	dc.b	nEb1, $06
000989CB EC04                       	smpsPSGAlterVol     $04
000989CD E701                       	dc.b	smpsNoAttack, $01
000989CF EC07                       	smpsPSGAlterVol     $07
000989D1 8006                       	dc.b	nRst, $06
000989D3 E100                       	smpsAlterNote       $00
000989D5 01                         	dc.b	$01
000989D6 E102                       	smpsAlterNote       $02
000989D8 01                         	dc.b	$01
000989D9 E100                       	smpsAlterNote       $00
000989DB 01                         	dc.b	$01
000989DC E1FF                       	smpsAlterNote       $FF
000989DE 01                         	dc.b	$01
000989DF ECF5                       	smpsPSGAlterVol     $F5
000989E1 9B06                       	dc.b	nD2, $06
000989E3 EC04                       	smpsPSGAlterVol     $04
000989E5 E701                       	dc.b	smpsNoAttack, $01
000989E7 EC07                       	smpsPSGAlterVol     $07
000989E9 8003                       	dc.b	nRst, $03
000989EB ECF5                       	smpsPSGAlterVol     $F5
000989ED 9B07                       	dc.b	nD2, $07
000989EF EC0B                       	smpsPSGAlterVol     $0B
000989F1 8007                       	dc.b	nRst, $07
000989F3 E105                       	smpsAlterNote       $05
000989F5 0101                       	dc.b	$01, $01
000989F7 E1FF                       	smpsAlterNote       $FF
000989F9 01                         	dc.b	$01
000989FA E1FC                       	smpsAlterNote       $FC
000989FC 01                         	dc.b	$01
000989FD E1FF                       	smpsAlterNote       $FF
000989FF ECF5                       	smpsPSGAlterVol     $F5
00098A01 9B06                       	dc.b	nD2, $06
00098A03 EC0B                       	smpsPSGAlterVol     $0B
00098A05 8004                       	dc.b	nRst, $04
00098A07 ECF5                       	smpsPSGAlterVol     $F5
00098A09 9B06                       	dc.b	nD2, $06
00098A0B EC04                       	smpsPSGAlterVol     $04
00098A0D E701                       	dc.b	smpsNoAttack, $01
00098A0F EC07                       	smpsPSGAlterVol     $07
00098A11 8006                       	dc.b	nRst, $06
00098A13 E102                       	smpsAlterNote       $02
00098A15 01                         	dc.b	$01
00098A16 E106                       	smpsAlterNote       $06
00098A18 01                         	dc.b	$01
00098A19 E102                       	smpsAlterNote       $02
00098A1B 01                         	dc.b	$01
00098A1C E1FC                       	smpsAlterNote       $FC
00098A1E 01                         	dc.b	$01
00098A1F E1FF                       	smpsAlterNote       $FF
00098A21 ECF5                       	smpsPSGAlterVol     $F5
00098A23 9B06                       	dc.b	nD2, $06
00098A25 EC04                       	smpsPSGAlterVol     $04
00098A27 E701                       	dc.b	smpsNoAttack, $01
00098A29 EC07                       	smpsPSGAlterVol     $07
00098A2B 8003                       	dc.b	nRst, $03
00098A2D ECF5                       	smpsPSGAlterVol     $F5
00098A2F 9B07                       	dc.b	nD2, $07
00098A31 EC0B                       	smpsPSGAlterVol     $0B
00098A33 8006                       	dc.b	nRst, $06
00098A35 E102                       	smpsAlterNote       $02
00098A37 01                         	dc.b	$01
00098A38 E105                       	smpsAlterNote       $05
00098A3A 0101                       	dc.b	$01, $01
00098A3C E1FF                       	smpsAlterNote       $FF
00098A3E 01                         	dc.b	$01
00098A3F ECF5                       	smpsPSGAlterVol     $F5
00098A41 9B07                       	dc.b	nD2, $07
00098A43 EC0B                       	smpsPSGAlterVol     $0B
00098A45 8004                       	dc.b	nRst, $04
00098A47 ECF5                       	smpsPSGAlterVol     $F5
00098A49 9B06                       	dc.b	nD2, $06
00098A4B EC0B                       	smpsPSGAlterVol     $0B
00098A4D 8007                       	dc.b	nRst, $07
00098A4F E105                       	smpsAlterNote       $05
00098A51 0101                       	dc.b	$01, $01
00098A53 E102                       	smpsAlterNote       $02
00098A55 01                         	dc.b	$01
00098A56 E1FC                       	smpsAlterNote       $FC
00098A58 01                         	dc.b	$01
00098A59 E1FF                       	smpsAlterNote       $FF
00098A5B ECF5                       	smpsPSGAlterVol     $F5
00098A5D 9B06                       	dc.b	nD2, $06
00098A5F EC04                       	smpsPSGAlterVol     $04
00098A61 E701                       	dc.b	smpsNoAttack, $01
00098A63 EC07                       	smpsPSGAlterVol     $07
00098A65 8003                       	dc.b	nRst, $03
00098A67 ECF5                       	smpsPSGAlterVol     $F5
00098A69 9B06                       	dc.b	nD2, $06
00098A6B EC04                       	smpsPSGAlterVol     $04
00098A6D E701                       	dc.b	smpsNoAttack, $01
00098A6F EC07                       	smpsPSGAlterVol     $07
00098A71 8006                       	dc.b	nRst, $06
00098A73 E102                       	smpsAlterNote       $02
00098A75 01                         	dc.b	$01
00098A76 E106                       	smpsAlterNote       $06
00098A78 01                         	dc.b	$01
00098A79 E102                       	smpsAlterNote       $02
00098A7B 01                         	dc.b	$01
00098A7C E1FF                       	smpsAlterNote       $FF
00098A7E 01                         	dc.b	$01
00098A7F ECF5                       	smpsPSGAlterVol     $F5
00098A81 9B06                       	dc.b	nD2, $06
00098A83 EC04                       	smpsPSGAlterVol     $04
00098A85 E701                       	dc.b	smpsNoAttack, $01
00098A87 EC07                       	smpsPSGAlterVol     $07
00098A89 8003                       	dc.b	nRst, $03
00098A8B ECF5                       	smpsPSGAlterVol     $F5
00098A8D 9B07                       	dc.b	nD2, $07
00098A8F EC0B                       	smpsPSGAlterVol     $0B
00098A91 8007                       	dc.b	nRst, $07
00098A93 E105                       	smpsAlterNote       $05
00098A95 0101                       	dc.b	$01, $01
00098A97 E1FF                       	smpsAlterNote       $FF
00098A99 01                         	dc.b	$01
00098A9A E1FC                       	smpsAlterNote       $FC
00098A9C 01                         	dc.b	$01
00098A9D E1FF                       	smpsAlterNote       $FF
00098A9F ECF5                       	smpsPSGAlterVol     $F5
00098AA1 9B06                       	dc.b	nD2, $06
00098AA3 EC0B                       	smpsPSGAlterVol     $0B
00098AA5 8004                       	dc.b	nRst, $04
00098AA7 ECF5                       	smpsPSGAlterVol     $F5
00098AA9 9B06                       	dc.b	nD2, $06
00098AAB EC04                       	smpsPSGAlterVol     $04
00098AAD E701                       	dc.b	smpsNoAttack, $01
00098AAF EC07                       	smpsPSGAlterVol     $07
00098AB1 8006                       	dc.b	nRst, $06
00098AB3 E102                       	smpsAlterNote       $02
00098AB5 01                         	dc.b	$01
00098AB6 E106                       	smpsAlterNote       $06
00098AB8 01                         	dc.b	$01
00098AB9 E102                       	smpsAlterNote       $02
00098ABB 01                         	dc.b	$01
00098ABC E1FC                       	smpsAlterNote       $FC
00098ABE 01                         	dc.b	$01
00098ABF E1FF                       	smpsAlterNote       $FF
00098AC1 ECF5                       	smpsPSGAlterVol     $F5
00098AC3 9B06                       	dc.b	nD2, $06
00098AC5 EC04                       	smpsPSGAlterVol     $04
00098AC7 E701                       	dc.b	smpsNoAttack, $01
00098AC9 EC07                       	smpsPSGAlterVol     $07
00098ACB 8003                       	dc.b	nRst, $03
00098ACD ECF5                       	smpsPSGAlterVol     $F5
00098ACF 9B06                       	dc.b	nD2, $06
00098AD1 EC04                       	smpsPSGAlterVol     $04
00098AD3 E701                       	dc.b	smpsNoAttack, $01
00098AD5 EC07                       	smpsPSGAlterVol     $07
00098AD7 8006                       	dc.b	nRst, $06
00098AD9 E102                       	smpsAlterNote       $02
00098ADB 01                         	dc.b	$01
00098ADC E106                       	smpsAlterNote       $06
00098ADE 01                         	dc.b	$01
00098ADF E105                       	smpsAlterNote       $05
00098AE1 01                         	dc.b	$01
00098AE2 E1FF                       	smpsAlterNote       $FF
00098AE4 01                         	dc.b	$01
00098AE5 ECF5                       	smpsPSGAlterVol     $F5
00098AE7 9B07                       	dc.b	nD2, $07
00098AE9 EC0B                       	smpsPSGAlterVol     $0B
00098AEB 8004                       	dc.b	nRst, $04
00098AED ECF5                       	smpsPSGAlterVol     $F5
00098AEF 9B06                       	dc.b	nD2, $06
00098AF1 EC0B                       	smpsPSGAlterVol     $0B
00098AF3 8007                       	dc.b	nRst, $07
00098AF5 E105                       	smpsAlterNote       $05
00098AF7 0101                       	dc.b	$01, $01
00098AF9 E101                       	smpsAlterNote       $01
00098AFB 01                         	dc.b	$01
00098AFC E1FB                       	smpsAlterNote       $FB
00098AFE 01                         	dc.b	$01
00098AFF E1FE                       	smpsAlterNote       $FE
00098B01 ECF5                       	smpsPSGAlterVol     $F5
00098B03 9A06                       	dc.b	nCs2, $06
00098B05 EC04                       	smpsPSGAlterVol     $04
00098B07 E701                       	dc.b	smpsNoAttack, $01
00098B09 EC07                       	smpsPSGAlterVol     $07
00098B0B 8003                       	dc.b	nRst, $03
00098B0D ECF5                       	smpsPSGAlterVol     $F5
00098B0F 9A06                       	dc.b	nCs2, $06
00098B11 EC04                       	smpsPSGAlterVol     $04
00098B13 E701                       	dc.b	smpsNoAttack, $01
00098B15 EC07                       	smpsPSGAlterVol     $07
00098B17 8003                       	dc.b	nRst, $03
00098B19 E1FC                       	smpsAlterNote       $FC
00098B1B ECF5                       	smpsPSGAlterVol     $F5
00098B1D 8F07                       	dc.b	nD1, $07
00098B1F EC0B                       	smpsPSGAlterVol     $0B
00098B21 8006                       	dc.b	nRst, $06
00098B23 E1FF                       	smpsAlterNote       $FF
00098B25 01                         	dc.b	$01
00098B26 E103                       	smpsAlterNote       $03
00098B28 01                         	dc.b	$01
00098B29 E102                       	smpsAlterNote       $02
00098B2B 01                         	dc.b	$01
00098B2C E1FC                       	smpsAlterNote       $FC
00098B2E 01                         	dc.b	$01
00098B2F E1F8                       	smpsAlterNote       $F8
00098B31 01                         	dc.b	$01
00098B32 E1FC                       	smpsAlterNote       $FC
00098B34 01                         	dc.b	$01
00098B35 E1FF                       	smpsAlterNote       $FF
00098B37 01                         	dc.b	$01
00098B38 E103                       	smpsAlterNote       $03
00098B3A 01                         	dc.b	$01
00098B3B E1FC                       	smpsAlterNote       $FC
00098B3D ECF5                       	smpsPSGAlterVol     $F5
00098B3F 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00098B43 EC04                       	smpsPSGAlterVol     $04
00098B45 E701                       	dc.b	smpsNoAttack, $01
00098B47 EC07                       	smpsPSGAlterVol     $07
00098B49 8009                       	dc.b	nRst, $09
00098B4B E1FF                       	smpsAlterNote       $FF
00098B4D 01                         	dc.b	$01
00098B4E E103                       	smpsAlterNote       $03
00098B50 01                         	dc.b	$01
00098B51 E102                       	smpsAlterNote       $02
00098B53 01                         	dc.b	$01
00098B54 E1FC                       	smpsAlterNote       $FC
00098B56 01                         	dc.b	$01
00098B57 E1F8                       	smpsAlterNote       $F8
00098B59 01                         	dc.b	$01
00098B5A E1FC                       	smpsAlterNote       $FC
00098B5C 01                         	dc.b	$01
00098B5D E1FF                       	smpsAlterNote       $FF
00098B5F 01                         	dc.b	$01
00098B60 E103                       	smpsAlterNote       $03
00098B62 01                         	dc.b	$01
00098B63 E1FF                       	smpsAlterNote       $FF
00098B65 01                         	dc.b	$01
00098B66 E1F9                       	smpsAlterNote       $F9
00098B68 01                         	dc.b	$01
00098B69 E1F8                       	smpsAlterNote       $F8
00098B6B 01                         	dc.b	$01
00098B6C E1FC                       	smpsAlterNote       $FC
00098B6E 01                         	dc.b	$01
00098B6F E102                       	smpsAlterNote       $02
00098B71 0101                       	dc.b	$01, $01
00098B73 E1FF                       	smpsAlterNote       $FF
00098B75 01                         	dc.b	$01
00098B76 E1FC                       	smpsAlterNote       $FC
00098B78 ECF5                       	smpsPSGAlterVol     $F5
00098B7A 8F02                       	dc.b	nD1, $02
00098B7C EC04                       	smpsPSGAlterVol     $04
00098B7E E701                       	dc.b	smpsNoAttack, $01
00098B80 ECFC                       	smpsPSGAlterVol     $FC
00098B82 E1FB                       	smpsAlterNote       $FB
00098B84 8D06                       	dc.b	nC1, $06
00098B86 EC04                       	smpsPSGAlterVol     $04
00098B88 E701                       	dc.b	smpsNoAttack, $01
00098B8A EC07                       	smpsPSGAlterVol     $07
00098B8C 8006                       	dc.b	nRst, $06
00098B8E E1FE                       	smpsAlterNote       $FE
00098B90 01                         	dc.b	$01
00098B91 E102                       	smpsAlterNote       $02
00098B93 01                         	dc.b	$01
00098B94 E1FE                       	smpsAlterNote       $FE
00098B96 01                         	dc.b	$01
00098B97 E1FB                       	smpsAlterNote       $FB
00098B99 01                         	dc.b	$01
00098B9A E1F7                       	smpsAlterNote       $F7
00098B9C 01                         	dc.b	$01
00098B9D E1FB                       	smpsAlterNote       $FB
00098B9F 01                         	dc.b	$01
00098BA0 E101                       	smpsAlterNote       $01
00098BA2 01                         	dc.b	$01
00098BA3 E102                       	smpsAlterNote       $02
00098BA5 01                         	dc.b	$01
00098BA6 E1FB                       	smpsAlterNote       $FB
00098BA8 ECF5                       	smpsPSGAlterVol     $F5
00098BAA 8D02                       	dc.b	nC1, $02
00098BAC EC04                       	smpsPSGAlterVol     $04
00098BAE E701                       	dc.b	smpsNoAttack, $01
00098BB0 E1FC                       	smpsAlterNote       $FC
00098BB2 ECFC                       	smpsPSGAlterVol     $FC
00098BB4 8F0D                       	dc.b	nD1, $0D
00098BB6 E1FF                       	smpsAlterNote       $FF
00098BB8 E701                       	dc.b	smpsNoAttack, $01
00098BBA E103                       	smpsAlterNote       $03
00098BBC E701                       	dc.b	smpsNoAttack, $01
00098BBE E1FF                       	smpsAlterNote       $FF
00098BC0 E701                       	dc.b	smpsNoAttack, $01
00098BC2 E1FC                       	smpsAlterNote       $FC
00098BC4 E701                       	dc.b	smpsNoAttack, $01
00098BC6 E1F8                       	smpsAlterNote       $F8
00098BC8 E701                       	dc.b	smpsNoAttack, $01
00098BCA E1FC                       	smpsAlterNote       $FC
00098BCC E701                       	dc.b	smpsNoAttack, $01
00098BCE E102                       	smpsAlterNote       $02
00098BD0 E701                       	dc.b	smpsNoAttack, $01
00098BD2 E103                       	smpsAlterNote       $03
00098BD4 E701                       	dc.b	smpsNoAttack, $01
00098BD6 E1FF                       	smpsAlterNote       $FF
00098BD8 E701                       	dc.b	smpsNoAttack, $01
00098BDA E1F9                       	smpsAlterNote       $F9
00098BDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BE0 E1FC                       	smpsAlterNote       $FC
00098BE2 E701                       	dc.b	smpsNoAttack, $01
00098BE4 E102                       	smpsAlterNote       $02
00098BE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BEA E1FC                       	smpsAlterNote       $FC
00098BEC E701                       	dc.b	smpsNoAttack, $01
00098BEE E1F9                       	smpsAlterNote       $F9
00098BF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BF4 E1FF                       	smpsAlterNote       $FF
00098BF6 EC04                       	smpsPSGAlterVol     $04
00098BF8 E701                       	dc.b	smpsNoAttack, $01
00098BFA EC07                       	smpsPSGAlterVol     $07
00098BFC E103                       	smpsAlterNote       $03
00098BFE 8001                       	dc.b	nRst, $01
00098C00 E102                       	smpsAlterNote       $02
00098C02 01                         	dc.b	$01
00098C03 E1FB                       	smpsAlterNote       $FB
00098C05 01                         	dc.b	$01
00098C06 E1F7                       	smpsAlterNote       $F7
00098C08 01                         	dc.b	$01
00098C09 E1FB                       	smpsAlterNote       $FB
00098C0B 01                         	dc.b	$01
00098C0C E102                       	smpsAlterNote       $02
00098C0E 01                         	dc.b	$01
00098C0F E103                       	smpsAlterNote       $03
00098C11 01                         	dc.b	$01
00098C12 E1FB                       	smpsAlterNote       $FB
00098C14 ECF5                       	smpsPSGAlterVol     $F5
00098C16 8E06                       	dc.b	nCs1, $06
00098C18 EC04                       	smpsPSGAlterVol     $04
00098C1A E701                       	dc.b	smpsNoAttack, $01
00098C1C EC07                       	smpsPSGAlterVol     $07
00098C1E 8003                       	dc.b	nRst, $03
00098C20 ECF5                       	smpsPSGAlterVol     $F5
00098C22 8E06                       	dc.b	nCs1, $06
00098C24 EC04                       	smpsPSGAlterVol     $04
00098C26 E701                       	dc.b	smpsNoAttack, $01
00098C28 EC07                       	smpsPSGAlterVol     $07
00098C2A 8006                       	dc.b	nRst, $06
00098C2C E1FE                       	smpsAlterNote       $FE
00098C2E 01                         	dc.b	$01
00098C2F E102                       	smpsAlterNote       $02
00098C31 01                         	dc.b	$01
00098C32 E1FE                       	smpsAlterNote       $FE
00098C34 01                         	dc.b	$01
00098C35 E1F9                       	smpsAlterNote       $F9
00098C37 01                         	dc.b	$01
00098C38 E1FC                       	smpsAlterNote       $FC
00098C3A ECF5                       	smpsPSGAlterVol     $F5
00098C3C 8F06                       	dc.b	nD1, $06
00098C3E EC04                       	smpsPSGAlterVol     $04
00098C40 E701                       	dc.b	smpsNoAttack, $01
00098C42 EC07                       	smpsPSGAlterVol     $07
00098C44 8003                       	dc.b	nRst, $03
00098C46 ECF5                       	smpsPSGAlterVol     $F5
00098C48 8F07                       	dc.b	nD1, $07
00098C4A EC0B                       	smpsPSGAlterVol     $0B
00098C4C 8006                       	dc.b	nRst, $06
00098C4E E1FF                       	smpsAlterNote       $FF
00098C50 01                         	dc.b	$01
00098C51 E102                       	smpsAlterNote       $02
00098C53 0101                       	dc.b	$01, $01
00098C55 E1FB                       	smpsAlterNote       $FB
00098C57 01                         	dc.b	$01
00098C58 ECF5                       	smpsPSGAlterVol     $F5
00098C5A 8E07                       	dc.b	nCs1, $07
00098C5C EC0B                       	smpsPSGAlterVol     $0B
00098C5E 8004                       	dc.b	nRst, $04
00098C60 ECF5                       	smpsPSGAlterVol     $F5
00098C62 8E06                       	dc.b	nCs1, $06
00098C64 EC04                       	smpsPSGAlterVol     $04
00098C66 E701                       	dc.b	smpsNoAttack, $01
00098C68 EC07                       	smpsPSGAlterVol     $07
00098C6A 8006                       	dc.b	nRst, $06
00098C6C E101                       	smpsAlterNote       $01
00098C6E 01                         	dc.b	$01
00098C6F E102                       	smpsAlterNote       $02
00098C71 01                         	dc.b	$01
00098C72 E1FE                       	smpsAlterNote       $FE
00098C74 01                         	dc.b	$01
00098C75 E1F8                       	smpsAlterNote       $F8
00098C77 01                         	dc.b	$01
00098C78 E1FB                       	smpsAlterNote       $FB
00098C7A ECF5                       	smpsPSGAlterVol     $F5
00098C7C 8E06                       	dc.b	nCs1, $06
00098C7E EC04                       	smpsPSGAlterVol     $04
00098C80 E701                       	dc.b	smpsNoAttack, $01
00098C82 EC07                       	smpsPSGAlterVol     $07
00098C84 8003                       	dc.b	nRst, $03
00098C86 ECF5                       	smpsPSGAlterVol     $F5
00098C88 8E06                       	dc.b	nCs1, $06
00098C8A EC04                       	smpsPSGAlterVol     $04
00098C8C E701                       	dc.b	smpsNoAttack, $01
00098C8E EC07                       	smpsPSGAlterVol     $07
00098C90 8004                       	dc.b	nRst, $04
00098C92 E1FC                       	smpsAlterNote       $FC
00098C94 ECF5                       	smpsPSGAlterVol     $F5
00098C96 8F06                       	dc.b	nD1, $06
00098C98 EC0B                       	smpsPSGAlterVol     $0B
00098C9A 8006                       	dc.b	nRst, $06
00098C9C E1FF                       	smpsAlterNote       $FF
00098C9E 01                         	dc.b	$01
00098C9F E102                       	smpsAlterNote       $02
00098CA1 0101                       	dc.b	$01, $01
00098CA3 E1FC                       	smpsAlterNote       $FC
00098CA5 01                         	dc.b	$01
00098CA6 E1F8                       	smpsAlterNote       $F8
00098CA8 01                         	dc.b	$01
00098CA9 E1F9                       	smpsAlterNote       $F9
00098CAB 01                         	dc.b	$01
00098CAC E1FF                       	smpsAlterNote       $FF
00098CAE 01                         	dc.b	$01
00098CAF E103                       	smpsAlterNote       $03
00098CB1 01                         	dc.b	$01
00098CB2 E1FC                       	smpsAlterNote       $FC
00098CB4 ECF5                       	smpsPSGAlterVol     $F5
00098CB6 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00098CBA EC04                       	smpsPSGAlterVol     $04
00098CBC E701                       	dc.b	smpsNoAttack, $01
00098CBE EC07                       	smpsPSGAlterVol     $07
00098CC0 8009                       	dc.b	nRst, $09
00098CC2 E1FF                       	smpsAlterNote       $FF
00098CC4 01                         	dc.b	$01
00098CC5 E102                       	smpsAlterNote       $02
00098CC7 0101                       	dc.b	$01, $01
00098CC9 E1FC                       	smpsAlterNote       $FC
00098CCB 01                         	dc.b	$01
00098CCC E1F8                       	smpsAlterNote       $F8
00098CCE 01                         	dc.b	$01
00098CCF E1F9                       	smpsAlterNote       $F9
00098CD1 01                         	dc.b	$01
00098CD2 E1FF                       	smpsAlterNote       $FF
00098CD4 01                         	dc.b	$01
00098CD5 E103                       	smpsAlterNote       $03
00098CD7 01                         	dc.b	$01
00098CD8 E1FF                       	smpsAlterNote       $FF
00098CDA 01                         	dc.b	$01
00098CDB E1FC                       	smpsAlterNote       $FC
00098CDD 01                         	dc.b	$01
00098CDE E1F8                       	smpsAlterNote       $F8
00098CE0 01                         	dc.b	$01
00098CE1 E1FC                       	smpsAlterNote       $FC
00098CE3 01                         	dc.b	$01
00098CE4 E102                       	smpsAlterNote       $02
00098CE6 01                         	dc.b	$01
00098CE7 E103                       	smpsAlterNote       $03
00098CE9 01                         	dc.b	$01
00098CEA E1FF                       	smpsAlterNote       $FF
00098CEC 01                         	dc.b	$01
00098CED E1FC                       	smpsAlterNote       $FC
00098CEF ECF5                       	smpsPSGAlterVol     $F5
00098CF1 8F03                       	dc.b	nD1, $03
00098CF3 E1FB                       	smpsAlterNote       $FB
00098CF5 8D06                       	dc.b	nC1, $06
00098CF7 EC04                       	smpsPSGAlterVol     $04
00098CF9 E701                       	dc.b	smpsNoAttack, $01
00098CFB EC07                       	smpsPSGAlterVol     $07
00098CFD 8006                       	dc.b	nRst, $06
00098CFF E1FE                       	smpsAlterNote       $FE
00098D01 01                         	dc.b	$01
00098D02 E102                       	smpsAlterNote       $02
00098D04 01                         	dc.b	$01
00098D05 E101                       	smpsAlterNote       $01
00098D07 01                         	dc.b	$01
00098D08 E1FB                       	smpsAlterNote       $FB
00098D0A 01                         	dc.b	$01
00098D0B E1F7                       	smpsAlterNote       $F7
00098D0D 01                         	dc.b	$01
00098D0E E1FB                       	smpsAlterNote       $FB
00098D10 01                         	dc.b	$01
00098D11 E1FE                       	smpsAlterNote       $FE
00098D13 01                         	dc.b	$01
00098D14 E102                       	smpsAlterNote       $02
00098D16 01                         	dc.b	$01
00098D17 E1FB                       	smpsAlterNote       $FB
00098D19 ECF5                       	smpsPSGAlterVol     $F5
00098D1B 8D03                       	dc.b	nC1, $03
00098D1D E1FC                       	smpsAlterNote       $FC
00098D1F 8F0D                       	dc.b	nD1, $0D
00098D21 E1FF                       	smpsAlterNote       $FF
00098D23 E701                       	dc.b	smpsNoAttack, $01
00098D25 E103                       	smpsAlterNote       $03
00098D27 E701                       	dc.b	smpsNoAttack, $01
00098D29 E1FF                       	smpsAlterNote       $FF
00098D2B E701                       	dc.b	smpsNoAttack, $01
00098D2D E1FC                       	smpsAlterNote       $FC
00098D2F E701                       	dc.b	smpsNoAttack, $01
00098D31 E1F8                       	smpsAlterNote       $F8
00098D33 E701                       	dc.b	smpsNoAttack, $01
00098D35 E1FC                       	smpsAlterNote       $FC
00098D37 E701                       	dc.b	smpsNoAttack, $01
00098D39 E102                       	smpsAlterNote       $02
00098D3B E701                       	dc.b	smpsNoAttack, $01
00098D3D E103                       	smpsAlterNote       $03
00098D3F E701                       	dc.b	smpsNoAttack, $01
00098D41 E1FF                       	smpsAlterNote       $FF
00098D43 E701                       	dc.b	smpsNoAttack, $01
00098D45 E1F9                       	smpsAlterNote       $F9
00098D47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D4B E1FC                       	smpsAlterNote       $FC
00098D4D E701                       	dc.b	smpsNoAttack, $01
00098D4F E102                       	smpsAlterNote       $02
00098D51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D55 E1FF                       	smpsAlterNote       $FF
00098D57 E701                       	dc.b	smpsNoAttack, $01
00098D59 E1F9                       	smpsAlterNote       $F9
00098D5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D5F E1FF                       	smpsAlterNote       $FF
00098D61 EC04                       	smpsPSGAlterVol     $04
00098D63 E701                       	dc.b	smpsNoAttack, $01
00098D65 EC07                       	smpsPSGAlterVol     $07
00098D67 E103                       	smpsAlterNote       $03
00098D69 8001                       	dc.b	nRst, $01
00098D6B E102                       	smpsAlterNote       $02
00098D6D 01                         	dc.b	$01
00098D6E E1FB                       	smpsAlterNote       $FB
00098D70 01                         	dc.b	$01
00098D71 E1F7                       	smpsAlterNote       $F7
00098D73 01                         	dc.b	$01
00098D74 E1FB                       	smpsAlterNote       $FB
00098D76 01                         	dc.b	$01
00098D77 E1FF                       	smpsAlterNote       $FF
00098D79 01                         	dc.b	$01
00098D7A E103                       	smpsAlterNote       $03
00098D7C 01                         	dc.b	$01
00098D7D E1FB                       	smpsAlterNote       $FB
00098D7F ECF5                       	smpsPSGAlterVol     $F5
00098D81 8E06                       	dc.b	nCs1, $06
00098D83 EC04                       	smpsPSGAlterVol     $04
00098D85 E701                       	dc.b	smpsNoAttack, $01
00098D87 EC07                       	smpsPSGAlterVol     $07
00098D89 8003                       	dc.b	nRst, $03
00098D8B ECF5                       	smpsPSGAlterVol     $F5
00098D8D 8E06                       	dc.b	nCs1, $06
00098D8F EC04                       	smpsPSGAlterVol     $04
00098D91 E701                       	dc.b	smpsNoAttack, $01
00098D93 EC07                       	smpsPSGAlterVol     $07
00098D95 8006                       	dc.b	nRst, $06
00098D97 E1FE                       	smpsAlterNote       $FE
00098D99 01                         	dc.b	$01
00098D9A E102                       	smpsAlterNote       $02
00098D9C 01                         	dc.b	$01
00098D9D E1FE                       	smpsAlterNote       $FE
00098D9F 01                         	dc.b	$01
00098DA0 E1FC                       	smpsAlterNote       $FC
00098DA2 01                         	dc.b	$01
00098DA3 ECF5                       	smpsPSGAlterVol     $F5
00098DA5 8F06                       	dc.b	nD1, $06
00098DA7 EC04                       	smpsPSGAlterVol     $04
00098DA9 E701                       	dc.b	smpsNoAttack, $01
00098DAB EC07                       	smpsPSGAlterVol     $07
00098DAD 8003                       	dc.b	nRst, $03
00098DAF ECF5                       	smpsPSGAlterVol     $F5
00098DB1 8F07                       	dc.b	nD1, $07
00098DB3 EC0B                       	smpsPSGAlterVol     $0B
00098DB5 8007                       	dc.b	nRst, $07
00098DB7 E102                       	smpsAlterNote       $02
00098DB9 0101                       	dc.b	$01, $01
00098DBB E1FB                       	smpsAlterNote       $FB
00098DBD 01                         	dc.b	$01
00098DBE E1F8                       	smpsAlterNote       $F8
00098DC0 01                         	dc.b	$01
00098DC1 E1FB                       	smpsAlterNote       $FB
00098DC3 ECF5                       	smpsPSGAlterVol     $F5
00098DC5 8E06                       	dc.b	nCs1, $06
00098DC7 EC0B                       	smpsPSGAlterVol     $0B
00098DC9 8004                       	dc.b	nRst, $04
00098DCB ECF5                       	smpsPSGAlterVol     $F5
00098DCD 8E06                       	dc.b	nCs1, $06
00098DCF EC04                       	smpsPSGAlterVol     $04
00098DD1 E701                       	dc.b	smpsNoAttack, $01
00098DD3 EC07                       	smpsPSGAlterVol     $07
00098DD5 8006                       	dc.b	nRst, $06
00098DD7 E1FE                       	smpsAlterNote       $FE
00098DD9 01                         	dc.b	$01
00098DDA E102                       	smpsAlterNote       $02
00098DDC 01                         	dc.b	$01
00098DDD E1FE                       	smpsAlterNote       $FE
00098DDF 01                         	dc.b	$01
00098DE0 E1F9                       	smpsAlterNote       $F9
00098DE2 01                         	dc.b	$01
00098DE3 E1FC                       	smpsAlterNote       $FC
00098DE5 ECF5                       	smpsPSGAlterVol     $F5
00098DE7 8F06                       	dc.b	nD1, $06
00098DE9 EC04                       	smpsPSGAlterVol     $04
00098DEB E701                       	dc.b	smpsNoAttack, $01
00098DED EC07                       	smpsPSGAlterVol     $07
00098DEF 8003                       	dc.b	nRst, $03
00098DF1 ECF5                       	smpsPSGAlterVol     $F5
00098DF3 8F06                       	dc.b	nD1, $06
00098DF5 EC04                       	smpsPSGAlterVol     $04
00098DF7 E701                       	dc.b	smpsNoAttack, $01
00098DF9 EC07                       	smpsPSGAlterVol     $07
00098DFB 8006                       	dc.b	nRst, $06
00098DFD E1FF                       	smpsAlterNote       $FF
00098DFF 01                         	dc.b	$01
00098E00 E103                       	smpsAlterNote       $03
00098E02 01                         	dc.b	$01
00098E03 E102                       	smpsAlterNote       $02
00098E05 01                         	dc.b	$01
00098E06 E1FB                       	smpsAlterNote       $FB
00098E08 01                         	dc.b	$01
00098E09 ECF5                       	smpsPSGAlterVol     $F5
00098E0B 8E07                       	dc.b	nCs1, $07
00098E0D EC0B                       	smpsPSGAlterVol     $0B
00098E0F 8004                       	dc.b	nRst, $04
00098E11 ECF5                       	smpsPSGAlterVol     $F5
00098E13 8E06                       	dc.b	nCs1, $06
00098E15 EC0B                       	smpsPSGAlterVol     $0B
00098E17 8007                       	dc.b	nRst, $07
00098E19 E101                       	smpsAlterNote       $01
00098E1B 0101                       	dc.b	$01, $01
00098E1D E1FE                       	smpsAlterNote       $FE
00098E1F 01                         	dc.b	$01
00098E20 E1F9                       	smpsAlterNote       $F9
00098E22 01                         	dc.b	$01
00098E23 E1FC                       	smpsAlterNote       $FC
00098E25 ECF5                       	smpsPSGAlterVol     $F5
00098E27 8F06                       	dc.b	nD1, $06
00098E29 EC04                       	smpsPSGAlterVol     $04
00098E2B E701                       	dc.b	smpsNoAttack, $01
00098E2D EC07                       	smpsPSGAlterVol     $07
00098E2F 8003                       	dc.b	nRst, $03
00098E31 ECF5                       	smpsPSGAlterVol     $F5
00098E33 8F06                       	dc.b	nD1, $06
00098E35 EC04                       	smpsPSGAlterVol     $04
00098E37 E701                       	dc.b	smpsNoAttack, $01
00098E39 EC07                       	smpsPSGAlterVol     $07
00098E3B 8006                       	dc.b	nRst, $06
00098E3D E1FF                       	smpsAlterNote       $FF
00098E3F 01                         	dc.b	$01
00098E40 E103                       	smpsAlterNote       $03
00098E42 01                         	dc.b	$01
00098E43 E1FF                       	smpsAlterNote       $FF
00098E45 01                         	dc.b	$01
00098E46 E1FB                       	smpsAlterNote       $FB
00098E48 01                         	dc.b	$01
00098E49 ECF5                       	smpsPSGAlterVol     $F5
00098E4B 8E06                       	dc.b	nCs1, $06
00098E4D EC04                       	smpsPSGAlterVol     $04
00098E4F E701                       	dc.b	smpsNoAttack, $01
00098E51 EC07                       	smpsPSGAlterVol     $07
00098E53 8003                       	dc.b	nRst, $03
00098E55 ECF5                       	smpsPSGAlterVol     $F5
00098E57 8E07                       	dc.b	nCs1, $07
00098E59 E1FF                       	smpsAlterNote       $FF
00098E5B 9B06                       	dc.b	nD2, $06
00098E5D EC04                       	smpsPSGAlterVol     $04
00098E5F E701                       	dc.b	smpsNoAttack, $01
00098E61 ECFC                       	smpsPSGAlterVol     $FC
00098E63 9B03                       	dc.b	nD2, $03
00098E65 EC04                       	smpsPSGAlterVol     $04
00098E67 E701                       	dc.b	smpsNoAttack, $01
00098E69 ECFC                       	smpsPSGAlterVol     $FC
00098E6B 9B02                       	dc.b	nD2, $02
00098E6D EC04                       	smpsPSGAlterVol     $04
00098E6F E701                       	dc.b	smpsNoAttack, $01
00098E71 ECFC                       	smpsPSGAlterVol     $FC
00098E73 E1FE                       	smpsAlterNote       $FE
00098E75 9A03                       	dc.b	nCs2, $03
00098E77 EC0B                       	smpsPSGAlterVol     $0B
00098E79 800A                       	dc.b	nRst, $0A
00098E7B E102                       	smpsAlterNote       $02
00098E7D 01                         	dc.b	$01
00098E7E E10A                       	smpsAlterNote       $0A
00098E80 01                         	dc.b	$01
00098E81 E102                       	smpsAlterNote       $02
00098E83 01                         	dc.b	$01
00098E84 E1F7                       	smpsAlterNote       $F7
00098E86 01                         	dc.b	$01
00098E87 E10A                       	smpsAlterNote       $0A
00098E89 01                         	dc.b	$01
00098E8A E1FC                       	smpsAlterNote       $FC
00098E8C 01                         	dc.b	$01
00098E8D E108                       	smpsAlterNote       $08
00098E8F 0101                       	dc.b	$01, $01
00098E91 E102                       	smpsAlterNote       $02
00098E93 01                         	dc.b	$01
00098E94 E1F7                       	smpsAlterNote       $F7
00098E96 0101                       	dc.b	$01, $01
00098E98 E1FC                       	smpsAlterNote       $FC
00098E9A ECF5                       	smpsPSGAlterVol     $F5
00098E9C 8F06                       	dc.b	nD1, $06
00098E9E EC04                       	smpsPSGAlterVol     $04
00098EA0 E701                       	dc.b	smpsNoAttack, $01
00098EA2 EC07                       	smpsPSGAlterVol     $07
00098EA4 8003                       	dc.b	nRst, $03
00098EA6 ECF5                       	smpsPSGAlterVol     $F5
00098EA8 8F06                       	dc.b	nD1, $06
00098EAA EC04                       	smpsPSGAlterVol     $04
00098EAC E701                       	dc.b	smpsNoAttack, $01
00098EAE EC07                       	smpsPSGAlterVol     $07
00098EB0 8006                       	dc.b	nRst, $06
00098EB2 E1FF                       	smpsAlterNote       $FF
00098EB4 01                         	dc.b	$01
00098EB5 E102                       	smpsAlterNote       $02
00098EB7 01                         	dc.b	$01
00098EB8 E101                       	smpsAlterNote       $01
00098EBA 01                         	dc.b	$01
00098EBB E1FC                       	smpsAlterNote       $FC
00098EBD 01                         	dc.b	$01
00098EBE ECF5                       	smpsPSGAlterVol     $F5
00098EC0 9007                       	dc.b	nEb1, $07
00098EC2 EC0B                       	smpsPSGAlterVol     $0B
00098EC4 8004                       	dc.b	nRst, $04
00098EC6 ECF5                       	smpsPSGAlterVol     $F5
00098EC8 9006                       	dc.b	nEb1, $06
00098ECA EC0B                       	smpsPSGAlterVol     $0B
00098ECC 8007                       	dc.b	nRst, $07
00098ECE E103                       	smpsAlterNote       $03
00098ED0 0101                       	dc.b	$01, $01
00098ED2 E1FF                       	smpsAlterNote       $FF
00098ED4 01                         	dc.b	$01
00098ED5 E1F9                       	smpsAlterNote       $F9
00098ED7 01                         	dc.b	$01
00098ED8 E1FC                       	smpsAlterNote       $FC
00098EDA ECF5                       	smpsPSGAlterVol     $F5
00098EDC 8F06                       	dc.b	nD1, $06
00098EDE EC04                       	smpsPSGAlterVol     $04
00098EE0 E701                       	dc.b	smpsNoAttack, $01
00098EE2 EC07                       	smpsPSGAlterVol     $07
00098EE4 8003                       	dc.b	nRst, $03
00098EE6 ECF5                       	smpsPSGAlterVol     $F5
00098EE8 8F06                       	dc.b	nD1, $06
00098EEA EC04                       	smpsPSGAlterVol     $04
00098EEC E701                       	dc.b	smpsNoAttack, $01
00098EEE EC07                       	smpsPSGAlterVol     $07
00098EF0 8006                       	dc.b	nRst, $06
00098EF2 E1FF                       	smpsAlterNote       $FF
00098EF4 01                         	dc.b	$01
00098EF5 E103                       	smpsAlterNote       $03
00098EF7 01                         	dc.b	$01
00098EF8 E1FF                       	smpsAlterNote       $FF
00098EFA 01                         	dc.b	$01
00098EFB E1F9                       	smpsAlterNote       $F9
00098EFD 01                         	dc.b	$01
00098EFE E1FC                       	smpsAlterNote       $FC
00098F00 ECF5                       	smpsPSGAlterVol     $F5
00098F02 8F06                       	dc.b	nD1, $06
00098F04 EC04                       	smpsPSGAlterVol     $04
00098F06 E701                       	dc.b	smpsNoAttack, $01
00098F08 EC07                       	smpsPSGAlterVol     $07
00098F0A 8003                       	dc.b	nRst, $03
00098F0C ECF5                       	smpsPSGAlterVol     $F5
00098F0E 8F07                       	dc.b	nD1, $07
00098F10 EC0B                       	smpsPSGAlterVol     $0B
00098F12 8006                       	dc.b	nRst, $06
00098F14 E1FF                       	smpsAlterNote       $FF
00098F16 01                         	dc.b	$01
00098F17 E102                       	smpsAlterNote       $02
00098F19 0101                       	dc.b	$01, $01
00098F1B E1FC                       	smpsAlterNote       $FC
00098F1D 01                         	dc.b	$01
00098F1E ECF5                       	smpsPSGAlterVol     $F5
00098F20 8F07                       	dc.b	nD1, $07
00098F22 EC0B                       	smpsPSGAlterVol     $0B
00098F24 8004                       	dc.b	nRst, $04
00098F26 ECF5                       	smpsPSGAlterVol     $F5
00098F28 8F06                       	dc.b	nD1, $06
00098F2A EC04                       	smpsPSGAlterVol     $04
00098F2C E701                       	dc.b	smpsNoAttack, $01
00098F2E EC07                       	smpsPSGAlterVol     $07
00098F30 8006                       	dc.b	nRst, $06
00098F32 E101                       	smpsAlterNote       $01
00098F34 01                         	dc.b	$01
00098F35 E102                       	smpsAlterNote       $02
00098F37 01                         	dc.b	$01
00098F38 E1FF                       	smpsAlterNote       $FF
00098F3A 01                         	dc.b	$01
00098F3B E1F9                       	smpsAlterNote       $F9
00098F3D 01                         	dc.b	$01
00098F3E E1FC                       	smpsAlterNote       $FC
00098F40 ECF5                       	smpsPSGAlterVol     $F5
00098F42 9006                       	dc.b	nEb1, $06
00098F44 EC04                       	smpsPSGAlterVol     $04
00098F46 E701                       	dc.b	smpsNoAttack, $01
00098F48 EC07                       	smpsPSGAlterVol     $07
00098F4A 8003                       	dc.b	nRst, $03
00098F4C ECF5                       	smpsPSGAlterVol     $F5
00098F4E 9006                       	dc.b	nEb1, $06
00098F50 EC04                       	smpsPSGAlterVol     $04
00098F52 E701                       	dc.b	smpsNoAttack, $01
00098F54 EC07                       	smpsPSGAlterVol     $07
00098F56 8006                       	dc.b	nRst, $06
00098F58 E100                       	smpsAlterNote       $00
00098F5A 01                         	dc.b	$01
00098F5B E102                       	smpsAlterNote       $02
00098F5D 01                         	dc.b	$01
00098F5E E100                       	smpsAlterNote       $00
00098F60 01                         	dc.b	$01
00098F61 E1FF                       	smpsAlterNote       $FF
00098F63 01                         	dc.b	$01
00098F64 ECF5                       	smpsPSGAlterVol     $F5
00098F66 9B06                       	dc.b	nD2, $06
00098F68 EC04                       	smpsPSGAlterVol     $04
00098F6A E701                       	dc.b	smpsNoAttack, $01
00098F6C EC07                       	smpsPSGAlterVol     $07
00098F6E 8003                       	dc.b	nRst, $03
00098F70 ECF5                       	smpsPSGAlterVol     $F5
00098F72 9B07                       	dc.b	nD2, $07
00098F74 EC0B                       	smpsPSGAlterVol     $0B
00098F76 8007                       	dc.b	nRst, $07
00098F78 E105                       	smpsAlterNote       $05
00098F7A 0101                       	dc.b	$01, $01
00098F7C E1FF                       	smpsAlterNote       $FF
00098F7E 01                         	dc.b	$01
00098F7F E1FC                       	smpsAlterNote       $FC
00098F81 01                         	dc.b	$01
00098F82 E1FF                       	smpsAlterNote       $FF
00098F84 ECF5                       	smpsPSGAlterVol     $F5
00098F86 9B06                       	dc.b	nD2, $06
00098F88 EC0B                       	smpsPSGAlterVol     $0B
00098F8A 8004                       	dc.b	nRst, $04
00098F8C ECF5                       	smpsPSGAlterVol     $F5
00098F8E 9B06                       	dc.b	nD2, $06
00098F90 EC04                       	smpsPSGAlterVol     $04
00098F92 E701                       	dc.b	smpsNoAttack, $01
00098F94 EC07                       	smpsPSGAlterVol     $07
00098F96 8006                       	dc.b	nRst, $06
00098F98 E102                       	smpsAlterNote       $02
00098F9A 01                         	dc.b	$01
00098F9B E106                       	smpsAlterNote       $06
00098F9D 01                         	dc.b	$01
00098F9E E102                       	smpsAlterNote       $02
00098FA0 01                         	dc.b	$01
00098FA1 E1FC                       	smpsAlterNote       $FC
00098FA3 01                         	dc.b	$01
00098FA4 E1FF                       	smpsAlterNote       $FF
00098FA6 ECF5                       	smpsPSGAlterVol     $F5
00098FA8 9B06                       	dc.b	nD2, $06
00098FAA EC04                       	smpsPSGAlterVol     $04
00098FAC E701                       	dc.b	smpsNoAttack, $01
00098FAE EC07                       	smpsPSGAlterVol     $07
00098FB0 8003                       	dc.b	nRst, $03
00098FB2 ECF5                       	smpsPSGAlterVol     $F5
00098FB4 9B07                       	dc.b	nD2, $07
00098FB6 EC0B                       	smpsPSGAlterVol     $0B
00098FB8 8006                       	dc.b	nRst, $06
00098FBA E102                       	smpsAlterNote       $02
00098FBC 01                         	dc.b	$01
00098FBD E105                       	smpsAlterNote       $05
00098FBF 0101                       	dc.b	$01, $01
00098FC1 E1FF                       	smpsAlterNote       $FF
00098FC3 01                         	dc.b	$01
00098FC4 ECF5                       	smpsPSGAlterVol     $F5
00098FC6 9B07                       	dc.b	nD2, $07
00098FC8 EC0B                       	smpsPSGAlterVol     $0B
00098FCA 8004                       	dc.b	nRst, $04
00098FCC ECF5                       	smpsPSGAlterVol     $F5
00098FCE 9B06                       	dc.b	nD2, $06
00098FD0 EC04                       	smpsPSGAlterVol     $04
00098FD2 E701                       	dc.b	smpsNoAttack, $01
00098FD4 EC07                       	smpsPSGAlterVol     $07
00098FD6 8006                       	dc.b	nRst, $06
00098FD8 E105                       	smpsAlterNote       $05
00098FDA 0101                       	dc.b	$01, $01
00098FDC E102                       	smpsAlterNote       $02
00098FDE 01                         	dc.b	$01
00098FDF E1FC                       	smpsAlterNote       $FC
00098FE1 01                         	dc.b	$01
00098FE2 E1FF                       	smpsAlterNote       $FF
00098FE4 ECF5                       	smpsPSGAlterVol     $F5
00098FE6 9B06                       	dc.b	nD2, $06
00098FE8 EC04                       	smpsPSGAlterVol     $04
00098FEA E701                       	dc.b	smpsNoAttack, $01
00098FEC EC07                       	smpsPSGAlterVol     $07
00098FEE 8003                       	dc.b	nRst, $03
00098FF0 ECF5                       	smpsPSGAlterVol     $F5
00098FF2 9B06                       	dc.b	nD2, $06
00098FF4 EC04                       	smpsPSGAlterVol     $04
00098FF6 E701                       	dc.b	smpsNoAttack, $01
00098FF8 EC07                       	smpsPSGAlterVol     $07
00098FFA 8006                       	dc.b	nRst, $06
00098FFC E102                       	smpsAlterNote       $02
00098FFE 01                         	dc.b	$01
00098FFF E106                       	smpsAlterNote       $06
00099001 01                         	dc.b	$01
00099002 E102                       	smpsAlterNote       $02
00099004 01                         	dc.b	$01
00099005 E1FF                       	smpsAlterNote       $FF
00099007 01                         	dc.b	$01
00099008 ECF5                       	smpsPSGAlterVol     $F5
0009900A 9B06                       	dc.b	nD2, $06
0009900C EC04                       	smpsPSGAlterVol     $04
0009900E E701                       	dc.b	smpsNoAttack, $01
00099010 EC07                       	smpsPSGAlterVol     $07
00099012 8003                       	dc.b	nRst, $03
00099014 ECF5                       	smpsPSGAlterVol     $F5
00099016 9B07                       	dc.b	nD2, $07
00099018 EC0B                       	smpsPSGAlterVol     $0B
0009901A 8007                       	dc.b	nRst, $07
0009901C E107                       	smpsAlterNote       $07
0009901E 0101                       	dc.b	$01, $01
00099020 E1FE                       	smpsAlterNote       $FE
00099022 01                         	dc.b	$01
00099023 E1FA                       	smpsAlterNote       $FA
00099025 0101                       	dc.b	$01, $01
00099027 E103                       	smpsAlterNote       $03
00099029 01                         	dc.b	$01
0009902A E109                       	smpsAlterNote       $09
0009902C 01                         	dc.b	$01
0009902D E107                       	smpsAlterNote       $07
0009902F 01                         	dc.b	$01
00099030 E1FE                       	smpsAlterNote       $FE
00099032 01                         	dc.b	$01
00099033 E108                       	smpsAlterNote       $08
00099035 01                         	dc.b	$01
00099036 E1FD                       	smpsAlterNote       $FD
00099038 ECF5                       	smpsPSGAlterVol     $F5
0009903A 940E                       	dc.b	nG1, $0E
0009903C E103                       	smpsAlterNote       $03
0009903E EC0B                       	smpsPSGAlterVol     $0B
00099040 8001 01                    	dc.b	nRst, $01, $01
00099043 E1FD                       	smpsAlterNote       $FD
00099045 01                         	dc.b	$01
00099046 E1FB                       	smpsAlterNote       $FB
00099048 0101                       	dc.b	$01, $01
0009904A E100                       	smpsAlterNote       $00
0009904C 01                         	dc.b	$01
0009904D E103                       	smpsAlterNote       $03
0009904F 01                         	dc.b	$01
00099050 E100                       	smpsAlterNote       $00
00099052 01                         	dc.b	$01
00099053 E1FD                       	smpsAlterNote       $FD
00099055 01                         	dc.b	$01
00099056 E1FA                       	smpsAlterNote       $FA
00099058 01                         	dc.b	$01
00099059 E1FD                       	smpsAlterNote       $FD
0009905B 01                         	dc.b	$01
0009905C E103                       	smpsAlterNote       $03
0009905E 0101                       	dc.b	$01, $01
00099060 E100                       	smpsAlterNote       $00
00099062 01                         	dc.b	$01
00099063 E1FE                       	smpsAlterNote       $FE
00099065 ECF5                       	smpsPSGAlterVol     $F5
00099067 960D                       	dc.b	nA1, $0D
00099069 E104                       	smpsAlterNote       $04
0009906B EC0B                       	smpsPSGAlterVol     $0B
0009906D 8001 01                    	dc.b	nRst, $01, $01
00099070 E101                       	smpsAlterNote       $01
00099072 01                         	dc.b	$01
00099073 E1FB                       	smpsAlterNote       $FB
00099075 0101                       	dc.b	$01, $01
00099077 E1FE                       	smpsAlterNote       $FE
00099079 01                         	dc.b	$01
0009907A E104                       	smpsAlterNote       $04
0009907C 0101                       	dc.b	$01, $01
0009907E E1FE                       	smpsAlterNote       $FE
00099080 01                         	dc.b	$01
00099081 E1FB                       	smpsAlterNote       $FB
00099083 0101                       	dc.b	$01, $01
00099085 E101                       	smpsAlterNote       $01
00099087 01                         	dc.b	$01
00099088 E104                       	smpsAlterNote       $04
0009908A 0101                       	dc.b	$01, $01
0009908C E1FE                       	smpsAlterNote       $FE
0009908E ECF5                       	smpsPSGAlterVol     $F5
00099090 970D                       	dc.b	nBb1, $0D
00099092 E101                       	smpsAlterNote       $01
00099094 EC04                       	smpsPSGAlterVol     $04
00099096 E701                       	dc.b	smpsNoAttack, $01
00099098 EC07                       	smpsPSGAlterVol     $07
0009909A E104                       	smpsAlterNote       $04
0009909C 8001                       	dc.b	nRst, $01
0009909E E103                       	smpsAlterNote       $03
000990A0 01                         	dc.b	$01
000990A1 E1FE                       	smpsAlterNote       $FE
000990A3 01                         	dc.b	$01
000990A4 E1FA                       	smpsAlterNote       $FA
000990A6 01                         	dc.b	$01
000990A7 E1FE                       	smpsAlterNote       $FE
000990A9 01                         	dc.b	$01
000990AA E101                       	smpsAlterNote       $01
000990AC 01                         	dc.b	$01
000990AD E104                       	smpsAlterNote       $04
000990AF 01                         	dc.b	$01
000990B0 E101                       	smpsAlterNote       $01
000990B2 01                         	dc.b	$01
000990B3 E1FB                       	smpsAlterNote       $FB
000990B5 01                         	dc.b	$01
000990B6 E1FA                       	smpsAlterNote       $FA
000990B8 01                         	dc.b	$01
000990B9 E1FE                       	smpsAlterNote       $FE
000990BB 01                         	dc.b	$01
000990BC E103                       	smpsAlterNote       $03
000990BE 0101                       	dc.b	$01, $01
000990C0 E101                       	smpsAlterNote       $01
000990C2 01                         	dc.b	$01
000990C3 E1FE                       	smpsAlterNote       $FE
000990C5 ECF5                       	smpsPSGAlterVol     $F5
000990C7 990D                       	dc.b	nC2, $0D
000990C9 E104                       	smpsAlterNote       $04
000990CB EC0B                       	smpsPSGAlterVol     $0B
000990CD 8001 01                    	dc.b	nRst, $01, $01
000990D0 E102                       	smpsAlterNote       $02
000990D2 01                         	dc.b	$01
000990D3 E1FC                       	smpsAlterNote       $FC
000990D5 0101                       	dc.b	$01, $01
000990D7 E102                       	smpsAlterNote       $02
000990D9 01                         	dc.b	$01
000990DA E104                       	smpsAlterNote       $04
000990DC 01                         	dc.b	$01
000990DD E1FF                       	smpsAlterNote       $FF
000990DF ECF5                       	smpsPSGAlterVol     $F5
000990E1 9B06                       	dc.b	nD2, $06
000990E3 EC04                       	smpsPSGAlterVol     $04
000990E5 E701                       	dc.b	smpsNoAttack, $01
000990E7 EC07                       	smpsPSGAlterVol     $07
000990E9 8003                       	dc.b	nRst, $03
000990EB ECF5                       	smpsPSGAlterVol     $F5
000990ED 9B07                       	dc.b	nD2, $07
000990EF EC0B                       	smpsPSGAlterVol     $0B
000990F1 8006                       	dc.b	nRst, $06
000990F3 E101                       	smpsAlterNote       $01
000990F5 01                         	dc.b	$01
000990F6 E104                       	smpsAlterNote       $04
000990F8 0101                       	dc.b	$01, $01
000990FA E1FE                       	smpsAlterNote       $FE
000990FC 01                         	dc.b	$01
000990FD E1FC                       	smpsAlterNote       $FC
000990FF 01                         	dc.b	$01
00099100 E1FE                       	smpsAlterNote       $FE
00099102 ECF5                       	smpsPSGAlterVol     $F5
00099104 9C06                       	dc.b	nEb2, $06
00099106 EC0B                       	smpsPSGAlterVol     $0B
00099108 8004                       	dc.b	nRst, $04
0009910A ECF5                       	smpsPSGAlterVol     $F5
0009910C 9C06                       	dc.b	nEb2, $06
0009910E EC04                       	smpsPSGAlterVol     $04
00099110 E701                       	dc.b	smpsNoAttack, $01
00099112 EC07                       	smpsPSGAlterVol     $07
00099114 8006                       	dc.b	nRst, $06
00099116 E105                       	smpsAlterNote       $05
00099118 01                         	dc.b	$01
00099119 E106                       	smpsAlterNote       $06
0009911B 01                         	dc.b	$01
0009911C E102                       	smpsAlterNote       $02
0009911E 01                         	dc.b	$01
0009911F E1FB                       	smpsAlterNote       $FB
00099121 01                         	dc.b	$01
00099122 E1FF                       	smpsAlterNote       $FF
00099124 ECF5                       	smpsPSGAlterVol     $F5
00099126 9B06                       	dc.b	nD2, $06
00099128 EC04                       	smpsPSGAlterVol     $04
0009912A E701                       	dc.b	smpsNoAttack, $01
0009912C EC07                       	smpsPSGAlterVol     $07
0009912E 8003                       	dc.b	nRst, $03
00099130 ECF5                       	smpsPSGAlterVol     $F5
00099132 9B06                       	dc.b	nD2, $06
00099134 EC04                       	smpsPSGAlterVol     $04
00099136 E701                       	dc.b	smpsNoAttack, $01
00099138 EC07                       	smpsPSGAlterVol     $07
0009913A 8006                       	dc.b	nRst, $06
0009913C E101                       	smpsAlterNote       $01
0009913E 01                         	dc.b	$01
0009913F E105                       	smpsAlterNote       $05
00099141 01                         	dc.b	$01
00099142 E104                       	smpsAlterNote       $04
00099144 01                         	dc.b	$01
00099145 E1FE                       	smpsAlterNote       $FE
00099147 01                         	dc.b	$01
00099148 ECF5                       	smpsPSGAlterVol     $F5
0009914A 9C07                       	dc.b	nEb2, $07
0009914C EC0B                       	smpsPSGAlterVol     $0B
0009914E 8004                       	dc.b	nRst, $04
00099150 ECF5                       	smpsPSGAlterVol     $F5
00099152 9C06                       	dc.b	nEb2, $06
00099154 EC0B                       	smpsPSGAlterVol     $0B
00099156 8007                       	dc.b	nRst, $07
00099158 E105                       	smpsAlterNote       $05
0009915A 0101                       	dc.b	$01, $01
0009915C E102                       	smpsAlterNote       $02
0009915E 01                         	dc.b	$01
0009915F E1FB                       	smpsAlterNote       $FB
00099161 01                         	dc.b	$01
00099162 E1FF                       	smpsAlterNote       $FF
00099164 ECF5                       	smpsPSGAlterVol     $F5
00099166 9B06                       	dc.b	nD2, $06
00099168 EC04                       	smpsPSGAlterVol     $04
0009916A E701                       	dc.b	smpsNoAttack, $01
0009916C EC07                       	smpsPSGAlterVol     $07
0009916E 8003                       	dc.b	nRst, $03
00099170 ECF5                       	smpsPSGAlterVol     $F5
00099172 9B06                       	dc.b	nD2, $06
00099174 EC04                       	smpsPSGAlterVol     $04
00099176 E701                       	dc.b	smpsNoAttack, $01
00099178 EC07                       	smpsPSGAlterVol     $07
0009917A 8006                       	dc.b	nRst, $06
0009917C E101                       	smpsAlterNote       $01
0009917E 01                         	dc.b	$01
0009917F E105                       	smpsAlterNote       $05
00099181 01                         	dc.b	$01
00099182 E101                       	smpsAlterNote       $01
00099184 01                         	dc.b	$01
00099185 E1FC                       	smpsAlterNote       $FC
00099187 01                         	dc.b	$01
00099188 E1FE                       	smpsAlterNote       $FE
0009918A ECF5                       	smpsPSGAlterVol     $F5
0009918C 9C06                       	dc.b	nEb2, $06
0009918E EC04                       	smpsPSGAlterVol     $04
00099190 E701                       	dc.b	smpsNoAttack, $01
00099192 EC07                       	smpsPSGAlterVol     $07
00099194 8003                       	dc.b	nRst, $03
00099196 ECF5                       	smpsPSGAlterVol     $F5
00099198 9C07                       	dc.b	nEb2, $07
0009919A EC0B                       	smpsPSGAlterVol     $0B
0009919C 8006                       	dc.b	nRst, $06
0009919E E102                       	smpsAlterNote       $02
000991A0 01                         	dc.b	$01
000991A1 E105                       	smpsAlterNote       $05
000991A3 0101                       	dc.b	$01, $01
000991A5 E1FF                       	smpsAlterNote       $FF
000991A7 01                         	dc.b	$01
000991A8 ECF5                       	smpsPSGAlterVol     $F5
000991AA 9B07                       	dc.b	nD2, $07
000991AC EC0B                       	smpsPSGAlterVol     $0B
000991AE 8004                       	dc.b	nRst, $04
000991B0 ECF5                       	smpsPSGAlterVol     $F5
000991B2 9B06                       	dc.b	nD2, $06
000991B4 EC04                       	smpsPSGAlterVol     $04
000991B6 E701                       	dc.b	smpsNoAttack, $01
000991B8 EC07                       	smpsPSGAlterVol     $07
000991BA 8002                       	dc.b	nRst, $02
000991BC E1FC                       	smpsAlterNote       $FC
000991BE ECF5                       	smpsPSGAlterVol     $F5
000991C0 9006                       	dc.b	nEb1, $06
000991C2 EC04                       	smpsPSGAlterVol     $04
000991C4 E701                       	dc.b	smpsNoAttack, $01
000991C6 ECFC                       	smpsPSGAlterVol     $FC
000991C8 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
000991CC EC04                       	smpsPSGAlterVol     $04
000991CE E701                       	dc.b	smpsNoAttack, $01
000991D0 E1FD                       	smpsAlterNote       $FD
000991D2 ECFC                       	smpsPSGAlterVol     $FC
000991D4 9402                       	dc.b	nG1, $02
000991D6 EC04                       	smpsPSGAlterVol     $04
000991D8 E701                       	dc.b	smpsNoAttack, $01
000991DA E1FE                       	smpsAlterNote       $FE
000991DC ECFC                       	smpsPSGAlterVol     $FC
000991DE 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000991E2 EC04                       	smpsPSGAlterVol     $04
000991E4 E701                       	dc.b	smpsNoAttack, $01
000991E6 EC07                       	smpsPSGAlterVol     $07
000991E8 8008                       	dc.b	nRst, $08
000991EA F6F4 F3                    	smpsJump            music84_Jump06
000991ED                            
000991ED                            ; PSG3 Data
000991ED                            music84_PSG3:
000991ED F500                       	smpsPSGvoice        $00
000991EF E1FF                       	smpsAlterNote       $FF
000991F1 EC0F                       	smpsPSGAlterVol     $0F
000991F3 803A                       	dc.b	nRst, $3A
000991F5                            
000991F5                            music84_Jump05:
000991F5 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00099201 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0009920B F6FF E8                    	smpsJump            music84_Jump05
0009920E                            
0009920E                            ; DAC Data
0009920E                            music84_DAC:
0009920E E0C0                       	smpsPan             panCenter, $00
00099210 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0009921C 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00099228 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00099234 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00099240 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0009924C 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00099258 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00099264 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00099270 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0009927C 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00099288 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00099294 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
000992A0 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
000992AC 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
000992B8 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
000992C4 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
000992D0 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
000992DC 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
000992E8 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
000992F4 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00099300 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0009930C 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00099318 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00099324 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00099330 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0009933C 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00099348 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00099354 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00099360 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0009936C 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00099378 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00099384 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00099390 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0009939C 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
000993A8 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
000993B4 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000993C0 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
000993CC 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
000993D8 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000993E4 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
000993F0 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
000993FC 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00099408 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00099414 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00099420 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0009942C 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00099438 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00099444 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00099450 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0009945C 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00099468 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00099474 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00099480 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0009948C 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00099498 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000994A4 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
000994B0 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
000994BC 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000994C8 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000994D4 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000994E0 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
000994EC 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
000994F8 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
00099504 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
00099510 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0009951C 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00099528 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00099534 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00099540 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0009954C 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00099558 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00099564 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00099570 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0009957C 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00099588 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
00099594 E0C0                       	smpsPan             panCenter, $00
00099596 F2                         	smpsStop
00099597                            
00099597                            music84_Voices:
00099597                            ;	Voice $00
00099597                            ;	$3D
00099597                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00099597                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00099597                            	smpsVcAlgorithm     $05
00099597                            	smpsVcFeedback      $07
00099597                            	smpsVcUnusedBits    $00
00099597                            	smpsVcDetune        $05, $04, $03, $04
00099597                            	smpsVcCoarseFreq    $01, $01, $01, $01
00099597                            	smpsVcRateScale     $00, $00, $00, $00
00099597                            	smpsVcAttackRate    $11, $11, $11, $11
00099597                            	smpsVcAmpMod        $00, $00, $00, $00
00099597                            	smpsVcDecayRate1    $00, $00, $00, $0A
00099597                            	smpsVcDecayRate2    $00, $00, $00, $0B
00099597                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00099597                            	smpsVcReleaseRate   $08, $08, $08, $07
00099597 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
000995B0                            
000995B0                            ;	Voice $01
000995B0                            ;	$04
000995B0                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
000995B0                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
000995B0                            	smpsVcAlgorithm     $04
000995B0                            	smpsVcFeedback      $00
000995B0                            	smpsVcUnusedBits    $00
000995B0                            	smpsVcDetune        $04, $03, $04, $05
000995B0                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
000995B0                            	smpsVcRateScale     $00, $01, $00, $01
000995B0                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000995B0                            	smpsVcAmpMod        $00, $00, $00, $00
000995B0                            	smpsVcDecayRate1    $0E, $00, $0E, $00
000995B0                            	smpsVcDecayRate2    $05, $00, $05, $00
000995B0                            	smpsVcDecayLevel    $08, $0E, $08, $0E
000995B0                            	smpsVcReleaseRate   $06, $06, $06, $06
000995B0 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
000995C9                            
000995C9                            ;	Voice $02
000995C9                            ;	$30
000995C9                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
000995C9                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
000995C9                            	smpsVcAlgorithm     $00
000995C9                            	smpsVcFeedback      $06
000995C9                            	smpsVcUnusedBits    $00
000995C9                            	smpsVcDetune        $04, $02, $00, $06
000995C9                            	smpsVcCoarseFreq    $01, $01, $03, $0C
000995C9                            	smpsVcRateScale     $00, $00, $00, $00
000995C9                            	smpsVcAttackRate    $1F, $1F, $1F, $14
000995C9                            	smpsVcAmpMod        $00, $00, $00, $00
000995C9                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
000995C9                            	smpsVcDecayRate2    $01, $01, $01, $01
000995C9                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
000995C9                            	smpsVcReleaseRate   $09, $0B, $08, $0F
000995C9 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
000995E2                            
000995E2                            ;	Voice $03
000995E2                            ;	$3A
000995E2                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
000995E2                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
000995E2                            	smpsVcAlgorithm     $02
000995E2                            	smpsVcFeedback      $07
000995E2                            	smpsVcUnusedBits    $00
000995E2                            	smpsVcDetune        $04, $06, $02, $00
000995E2                            	smpsVcCoarseFreq    $01, $01, $01, $01
000995E2                            	smpsVcRateScale     $00, $00, $00, $00
000995E2                            	smpsVcAttackRate    $18, $19, $14, $14
000995E2                            	smpsVcAmpMod        $00, $00, $00, $00
000995E2                            	smpsVcDecayRate1    $09, $0D, $09, $09
000995E2                            	smpsVcDecayRate2    $00, $00, $00, $00
000995E2                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
000995E2                            	smpsVcReleaseRate   $08, $0F, $0F, $07
000995E2 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
000995FB                            
000995FB                            ;	Voice $04
000995FB                            ;	$3C
000995FB                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
000995FB                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
000995FB                            	smpsVcAlgorithm     $04
000995FB                            	smpsVcFeedback      $07
000995FB                            	smpsVcUnusedBits    $00
000995FB                            	smpsVcDetune        $07, $00, $00, $03
000995FB                            	smpsVcCoarseFreq    $00, $00, $02, $0A
000995FB                            	smpsVcRateScale     $00, $00, $00, $00
000995FB                            	smpsVcAttackRate    $10, $1F, $10, $1F
000995FB                            	smpsVcAmpMod        $00, $00, $00, $00
000995FB                            	smpsVcDecayRate1    $00, $00, $00, $00
000995FB                            	smpsVcDecayRate2    $00, $00, $00, $00
000995FB                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000995FB                            	smpsVcReleaseRate   $0A, $02, $0A, $02
000995FB 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
00099614                            
00099614                            ;	Voice $05
00099614                            ;	$38
00099614                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
00099614                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
00099614                            	smpsVcAlgorithm     $00
00099614                            	smpsVcFeedback      $07
00099614                            	smpsVcUnusedBits    $00
00099614                            	smpsVcDetune        $04, $06, $02, $00
00099614                            	smpsVcCoarseFreq    $01, $01, $01, $00
00099614                            	smpsVcRateScale     $00, $00, $00, $00
00099614                            	smpsVcAttackRate    $1F, $1F, $1F, $10
00099614                            	smpsVcAmpMod        $00, $00, $00, $00
00099614                            	smpsVcDecayRate1    $00, $03, $00, $17
00099614                            	smpsVcDecayRate2    $00, $08, $08, $0B
00099614                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
00099614                            	smpsVcReleaseRate   $08, $05, $05, $05
00099614 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0009962D                            
0009962D                            
0009962E 00                         		even
0009962E                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0009D83E                            		even
0009D83E                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000A1396 00                         		even
000A1396                            Music87:	include	sound\music87.asm; Invincibility
000A1396                            triple_Header:
000A1396 =00000001                  smpsHeaderStartSong = 1
000A1396 0000                       	smpsHeaderVoice     triple_Voices
000A1398 0501                       	smpsHeaderChan      $05, $01
000A139A 0200                       	smpsHeaderTempo     $02, $00
000A139C                            
000A13A0 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000A13A4 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000A13A8 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000A13AC 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000A13B0 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000A13B6                            
000A13B6                            ; DAC Data
000A13B6                            triple_DAC:
000A13B6 E0C0                       	smpsPan             panCenter, $00
000A13B8 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000A13BE                            
000A13BE                            triple_Loop01:
000A13BE 8282 82                    	dc.b	dSnare, dSnare, dSnare
000A13C1                            
000A13C1                            triple_Loop00:
000A13C1 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000A13CD 06                         	dc.b	$06
000A13CE F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000A13D3 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000A13DF 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000A13E6 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000A13EB 0303 1B                    	dc.b	$03, $03, $1B
000A13EE E0C0                       	smpsPan             panCenter, $00
000A13F0 F6FF C4                    	smpsJump triple_DAC
000A13F3                            
000A13F3                            ; FM1 Data
000A13F3                            triple_FM1:
000A13F3 E0C0                       	smpsPan             panCenter, $00
000A13F7 8018                       	dc.b	nRst, $18
000A13F9                            
000A13F9                            triple_Loop0B:
000A13F9 AC06 B8                    	dc.b	nG3, $06, nG4
000A13FC F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000A1401                            
000A1401                            triple_Loop0C:
000A1401 A7B3                       	dc.b	nD3, nD4
000A1403 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000A1408                            
000A1408                            triple_Loop0D:
000A1408 A9B5                       	dc.b	nE3, nE4
000A140A F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000A140F A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000A1417 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000A141C A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000A1428 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000A1434 AD                         	dc.b	nAb3
000A1435 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000A143A 8018                       	dc.b	nRst, $18
000A143C E0C0                       	smpsPan             panCenter, $00
000A1440 F6FF B1                    	smpsJump triple_FM1
000A1443                            
000A1443                            ; FM2 Data
000A1443                            triple_FM2:
000A1443 E0C0                       	smpsPan             panCenter, $00
000A1447 8018                       	dc.b	nRst, $18
000A1449                            
000A1449                            triple_Loop07:
000A1449 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A1455 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A1461 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000A1466 8003                       	dc.b	nRst, $03
000A1468                            
000A1468                            triple_Loop08:
000A1468 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A146E F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000A1473 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A1479                            
000A1479                            triple_Loop09:
000A1479 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A1485 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A1491 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000A1496 8003                       	dc.b	nRst, $03
000A1498                            
000A1498                            triple_Loop0A:
000A1498 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A149E F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000A14A3 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A14A9 E0C0                       	smpsPan             panCenter, $00
000A14AD F6FF 94                    	smpsJump triple_FM2
000A14B0                            
000A14B0                            ; FM3 Data
000A14B0                            triple_FM3:
000A14B0 E0C0                       	smpsPan             panCenter, $00
000A14B4 8018                       	dc.b	nRst, $18
000A14B6                            
000A14B6                            triple_Loop06:
000A14B6 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000A14BD F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000A14C2 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000A14CE BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000A14DA C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000A14DD F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000A14E2 8018                       	dc.b	nRst, $18
000A14E4 E0C0                       	smpsPan             panCenter, $00
000A14E8 F6FF C6                    	smpsJump triple_FM3
000A14EB                            
000A14EB                            ; FM4 Data
000A14EB                            triple_FM4:
000A14EB E103                       	smpsAlterNote       $03
000A14EF E0C0                       	smpsPan             panCenter, $00
000A14F1 8018                       	dc.b	nRst, $18
000A14F3                            
000A14F3                            triple_Loop02:
000A14F3 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A14FF C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A150B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000A1510 8003                       	dc.b	nRst, $03
000A1512                            
000A1512                            triple_Loop03:
000A1512 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A1518 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000A151D B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A1523                            
000A1523                            triple_Loop04:
000A1523 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A152F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A153B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000A1540 8003                       	dc.b	nRst, $03
000A1542                            
000A1542                            triple_Loop05:
000A1542 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A1548 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000A154D B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A1553 E0C0                       	smpsPan             panCenter, $00
000A1555 F6FF 94                    	smpsJump triple_FM4
000A1558                            
000A1558                            ; PSG1 Data
000A1558                            triple_PSG1:
000A1558 8018                       	dc.b	nRst, $18
000A155A                            
000A155A                            triple_Loop0E:
000A155A A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A1566 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A1572 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A157E 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A1582 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000A1587 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A1593 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A159F 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A15AB 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A15AF                            
000A15AF                            triple_Loop0F:
000A15AF 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A15B5 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000A15BA 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000A15C0                            
000A15C0                            triple_Loop10:
000A15C0 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A15CC 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A15D8 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A15E4 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A15E8 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000A15ED A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A15F9 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A1605 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A1611 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A1615                            
000A1615                            triple_Loop11:
000A1615 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A161B F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000A1620 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000A1626 F500                       	smpsPSGvoice        $00
000A1628 F6FF 2E                    	smpsJump triple_PSG1
000A162B                            
000A162B                            triple_Voices:
000A162B                            ;	Voice $00
000A162B                            ;	$3A
000A162B                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000A162B                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000A162B                            	smpsVcAlgorithm     $02
000A162B                            	smpsVcFeedback      $07
000A162B                            	smpsVcUnusedBits    $00
000A162B                            	smpsVcDetune        $00, $00, $00, $00
000A162B                            	smpsVcCoarseFreq    $01, $01, $07, $01
000A162B                            	smpsVcRateScale     $01, $02, $02, $02
000A162B                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000A162B                            	smpsVcAmpMod        $00, $00, $00, $00
000A162B                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000A162B                            	smpsVcDecayRate2    $00, $00, $00, $00
000A162B                            	smpsVcDecayLevel    $00, $01, $0F, $01
000A162B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A162B 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000A1644                            
000A1644                            ;	Voice $01
000A1644                            ;	$20
000A1644                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000A1644                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000A1644                            	smpsVcAlgorithm     $00
000A1644                            	smpsVcFeedback      $04
000A1644                            	smpsVcUnusedBits    $00
000A1644                            	smpsVcDetune        $00, $00, $03, $07
000A1644                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000A1644                            	smpsVcRateScale     $03, $03, $03, $02
000A1644                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000A1644                            	smpsVcAmpMod        $00, $00, $00, $00
000A1644                            	smpsVcDecayRate1    $04, $04, $0A, $10
000A1644                            	smpsVcDecayRate2    $08, $08, $08, $0F
000A1644                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000A1644                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1644 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A1644 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A165E 00                         		even
000A165E                            Music88:	incbin	sound\music88.bin; Extra Life
000A174C                            		even
000A174C                            Music89:	incbin	sound\music89.bin; Special Stage
000A5614 00                         		even
000A5614                            Music8A:	incbin	sound\music8A.bin; Title Screen
000A57DE                            		even
000A57DE                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000A5A78                            		even
000A5A78                            Music8C:	incbin	sound\music8C.bin; VS Boss
000A5D16                            		even
000A5D16                            Music8D:	incbin	sound\music8D.bin; Final Zone
000A5F32                            		even
000A5F32                            Music8E:	include	sound\merry.asm ; Act Clear
000A5F32 =0000008B                  dMerryWtf1 = dVLowTimpani ; $87
000A5F32 =0000008A                  dMerryWtf2 = dLowTimpani  ; $85
000A5F32 =0000008B                  dMerryWtf3 = dVLowTimpani ; $84
000A5F32 =0000008A                  dMerryClap = dLowTimpani
000A5F32                            
000A5F32                            MerrysLittleLamb_Header:
000A5F32 0000                       	smpsHeaderVoice     MerrysLittleLamb_Voices
000A5F34 0603                       	smpsHeaderChan      $06, $03
000A5F36 0100                       	smpsHeaderTempo     $01, $00
000A5F38                            
000A5F3C 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM1,	$00, $00
000A5F40 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM2,	$00, $00
000A5F44 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM3,	$00, $00
000A5F48 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM4,	$00, $00
000A5F4C 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM5,	$00, $00
000A5F50 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG1,	$00, $00, $00, $00
000A5F56 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG2,	$00, $00, $00, $00
000A5F5C 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG3,	$00, $00, $00, $00
000A5F62                            
000A5F62                            MerrysLittleLamb_FM1:
000A5F62 E0C0                       	smpsPan             panCenter, $00
000A5F64 807F 7F7F 20               	dc.b	nRst, $7F, $7F, $7F, $20
000A5F6B E60F                       	smpsAlterVol        $0F
000A5F6D A704                       	dc.b	nD3, $04
000A5F6F E606                       	smpsAlterVol        $06
000A5F71 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5F76 E6FA                       	smpsAlterVol        $FA
000A5F78 A705                       	dc.b	nD3, $05
000A5F7A E606                       	smpsAlterVol        $06
000A5F7C A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5F81 E6FA                       	smpsAlterVol        $FA
000A5F83 A704                       	dc.b	nD3, $04
000A5F85 E606                       	smpsAlterVol        $06
000A5F87 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5F8D E6FA                       	smpsAlterVol        $FA
000A5F8F A7                         	dc.b	nD3
000A5F90 E606                       	smpsAlterVol        $06
000A5F92 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5F97 E6FA                       	smpsAlterVol        $FA
000A5F99 A704                       	dc.b	nD3, $04
000A5F9B E606                       	smpsAlterVol        $06
000A5F9D A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5FA3 E6FA                       	smpsAlterVol        $FA
000A5FA5 A7                         	dc.b	nD3
000A5FA6 E606                       	smpsAlterVol        $06
000A5FA8 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5FAE E6FA                       	smpsAlterVol        $FA
000A5FB0 A705                       	dc.b	nD3, $05
000A5FB2 E606                       	smpsAlterVol        $06
000A5FB4 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5FB9 E6FA                       	smpsAlterVol        $FA
000A5FBB A7                         	dc.b	nD3
000A5FBC E606                       	smpsAlterVol        $06
000A5FBE A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5FC4 E6FA                       	smpsAlterVol        $FA
000A5FC6 A705                       	dc.b	nD3, $05
000A5FC8 E606                       	smpsAlterVol        $06
000A5FCA A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5FCF E6FA                       	smpsAlterVol        $FA
000A5FD1 A704                       	dc.b	nD3, $04
000A5FD3 E606                       	smpsAlterVol        $06
000A5FD5 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5FDA E6FA                       	smpsAlterVol        $FA
000A5FDC A705                       	dc.b	nD3, $05
000A5FDE E606                       	smpsAlterVol        $06
000A5FE0 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5FE5 E6FA                       	smpsAlterVol        $FA
000A5FE7 A704                       	dc.b	nD3, $04
000A5FE9 E606                       	smpsAlterVol        $06
000A5FEB A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5FF0 E6FA                       	smpsAlterVol        $FA
000A5FF2 A705                       	dc.b	nD3, $05
000A5FF4 E606                       	smpsAlterVol        $06
000A5FF6 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5FFB E6FA                       	smpsAlterVol        $FA
000A5FFD A704                       	dc.b	nD3, $04
000A5FFF E606                       	smpsAlterVol        $06
000A6001 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A6007 E6FA                       	smpsAlterVol        $FA
000A6009 A7                         	dc.b	nD3
000A600A E606                       	smpsAlterVol        $06
000A600C A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A6012 E6FA                       	smpsAlterVol        $FA
000A6014 A705                       	dc.b	nD3, $05
000A6016 E606                       	smpsAlterVol        $06
000A6018 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A601D E6FA                       	smpsAlterVol        $FA
000A601F A7                         	dc.b	nD3
000A6020 E606                       	smpsAlterVol        $06
000A6022 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A6028 E6FA                       	smpsAlterVol        $FA
000A602A A705                       	dc.b	nD3, $05
000A602C E606                       	smpsAlterVol        $06
000A602E A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A6033 E6FA                       	smpsAlterVol        $FA
000A6035 A704                       	dc.b	nD3, $04
000A6037 E606                       	smpsAlterVol        $06
000A6039 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A603E E6FA                       	smpsAlterVol        $FA
000A6040 A705                       	dc.b	nD3, $05
000A6042 E606                       	smpsAlterVol        $06
000A6044 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A6049 E6FA                       	smpsAlterVol        $FA
000A604B A704                       	dc.b	nD3, $04
000A604D E606                       	smpsAlterVol        $06
000A604F A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A6054 E6FA                       	smpsAlterVol        $FA
000A6056 A705                       	dc.b	nD3, $05
000A6058 E606                       	smpsAlterVol        $06
000A605A A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A605F E6FA                       	smpsAlterVol        $FA
000A6061 A704                       	dc.b	nD3, $04
000A6063 E606                       	smpsAlterVol        $06
000A6065 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A606B E6FA                       	smpsAlterVol        $FA
000A606D A7                         	dc.b	nD3
000A606E E606                       	smpsAlterVol        $06
000A6070 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A6075 E6FA                       	smpsAlterVol        $FA
000A6077 A704                       	dc.b	nD3, $04
000A6079 E606                       	smpsAlterVol        $06
000A607B A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A6081 E6FA                       	smpsAlterVol        $FA
000A6083 A7                         	dc.b	nD3
000A6084 E606                       	smpsAlterVol        $06
000A6086 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A608C E6FA                       	smpsAlterVol        $FA
000A608E A705                       	dc.b	nD3, $05
000A6090 E606                       	smpsAlterVol        $06
000A6092 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A6097 E6FA                       	smpsAlterVol        $FA
000A6099 A704                       	dc.b	nD3, $04
000A609B E606                       	smpsAlterVol        $06
000A609D A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A60A2 E6FA                       	smpsAlterVol        $FA
000A60A4 A705                       	dc.b	nD3, $05
000A60A6 E606                       	smpsAlterVol        $06
000A60A8 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A60AD E6FA                       	smpsAlterVol        $FA
000A60AF A704                       	dc.b	nD3, $04
000A60B1 E606                       	smpsAlterVol        $06
000A60B3 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A60B8 E6FA                       	smpsAlterVol        $FA
000A60BA A705                       	dc.b	nD3, $05
000A60BC E606                       	smpsAlterVol        $06
000A60BE A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A60C3 E6FA                       	smpsAlterVol        $FA
000A60C5 A704                       	dc.b	nD3, $04
000A60C7 E606                       	smpsAlterVol        $06
000A60C9 A705 A7A7 7FE7 19          	dc.b	nD3, $05, nD3, nD3, $7F, smpsNoAttack, $19
000A60D0 F2                         	smpsStop
000A60D1                            
000A60D1                            MerrysLittleLamb_FM2:
000A60D1 E0C0                       	smpsPan             panCenter, $00
000A60D3 807F 7F7F 7F30             	dc.b	nRst, $7F, $7F, $7F, $7F, $30
000A60DB E610                       	smpsAlterVol        $10
000A60DD A87F E719 807F 7F7F 3E     	dc.b	nEb3, $7F, smpsNoAttack, $19, nRst, $7F, $7F, $7F, $3E
000A60E6                            
000A60E6                            MerrysLittleLamb_FM3:
000A60E6                            MerrysLittleLamb_FM4:
000A60E6                            MerrysLittleLamb_FM5:
000A60E6 F2                         	smpsStop
000A60E7                            
000A60E7                            MerrysLittleLamb_PSG1:
000A60E7 807F 7F7F 7F06 B701        	dc.b	nRst, $7F, $7F, $7F, $7F, $06, nFs4, $01
000A60EF EC02                       	smpsPSGAlterVol     $02
000A60F1 B7                         	dc.b	nFs4
000A60F2 EC03                       	smpsPSGAlterVol     $03
000A60F4 B7                         	dc.b	nFs4
000A60F5 EC03                       	smpsPSGAlterVol     $03
000A60F7 B7                         	dc.b	nFs4
000A60F8 EC03                       	smpsPSGAlterVol     $03
000A60FA B7                         	dc.b	nFs4
000A60FB ECF5                       	smpsPSGAlterVol     $F5
000A60FD B7                         	dc.b	nFs4
000A60FE EC02                       	smpsPSGAlterVol     $02
000A6100 B7                         	dc.b	nFs4
000A6101 EC03                       	smpsPSGAlterVol     $03
000A6103 B7                         	dc.b	nFs4
000A6104 EC03                       	smpsPSGAlterVol     $03
000A6106 B7                         	dc.b	nFs4
000A6107 ECF8                       	smpsPSGAlterVol     $F8
000A6109 B7                         	dc.b	nFs4
000A610A EC02                       	smpsPSGAlterVol     $02
000A610C B7                         	dc.b	nFs4
000A610D EC03                       	smpsPSGAlterVol     $03
000A610F B7                         	dc.b	nFs4
000A6110 EC03                       	smpsPSGAlterVol     $03
000A6112 B7                         	dc.b	nFs4
000A6113 EC03                       	smpsPSGAlterVol     $03
000A6115 B7                         	dc.b	nFs4
000A6116 ECF5                       	smpsPSGAlterVol     $F5
000A6118 B7                         	dc.b	nFs4
000A6119 EC02                       	smpsPSGAlterVol     $02
000A611B B7                         	dc.b	nFs4
000A611C EC03                       	smpsPSGAlterVol     $03
000A611E B7                         	dc.b	nFs4
000A611F EC03                       	smpsPSGAlterVol     $03
000A6121 B7                         	dc.b	nFs4
000A6122 EC03                       	smpsPSGAlterVol     $03
000A6124 B7                         	dc.b	nFs4
000A6125 ECF5                       	smpsPSGAlterVol     $F5
000A6127 B7                         	dc.b	nFs4
000A6128 EC02                       	smpsPSGAlterVol     $02
000A612A B7                         	dc.b	nFs4
000A612B EC06                       	smpsPSGAlterVol     $06
000A612D B7                         	dc.b	nFs4
000A612E EC03                       	smpsPSGAlterVol     $03
000A6130 B7                         	dc.b	nFs4
000A6131 ECF5                       	smpsPSGAlterVol     $F5
000A6133 B7                         	dc.b	nFs4
000A6134 EC02                       	smpsPSGAlterVol     $02
000A6136 B7                         	dc.b	nFs4
000A6137 EC03                       	smpsPSGAlterVol     $03
000A6139 B7                         	dc.b	nFs4
000A613A EC03                       	smpsPSGAlterVol     $03
000A613C B7                         	dc.b	nFs4
000A613D EC03                       	smpsPSGAlterVol     $03
000A613F B7                         	dc.b	nFs4
000A6140 ECF5                       	smpsPSGAlterVol     $F5
000A6142 B7                         	dc.b	nFs4
000A6143 EC02                       	smpsPSGAlterVol     $02
000A6145 B7                         	dc.b	nFs4
000A6146 EC03                       	smpsPSGAlterVol     $03
000A6148 B7                         	dc.b	nFs4
000A6149 EC03                       	smpsPSGAlterVol     $03
000A614B B7                         	dc.b	nFs4
000A614C EC03                       	smpsPSGAlterVol     $03
000A614E B780 7F2B                  	dc.b	nFs4, nRst, $7F, $2B
000A6152 ECF7                       	smpsPSGAlterVol     $F7
000A6154 A008 8006 9E08 8006 A308+  	dc.b	nG2, $08, nRst, $06, nF2, $08, nRst, $06, nBb2, $08, nRst, $0A
000A6160 A006 8004 A005 8004 A205+  	dc.b	nG2, $06, nRst, $04, nG2, $05, nRst, $04, nA2, $05, nRst, $04
000A616C A005 8004 A208 8001 A305+  	dc.b	nG2, $05, nRst, $04, nA2, $08, nRst, $01, nBb2, $05, nRst, $01
000A6178 A305 8003 A305 8001 A304+  	dc.b	nBb2, $05, nRst, $03, nBb2, $05, nRst, $01, nBb2, $04, nRst, nBb2
000A6184 0580 01A3 0480 A308 807F+  	dc.b	$05, nRst, $01, nBb2, $04, nRst, nBb2, $08, nRst, $7F, $7F, $26
000A6190 F2                         	smpsStop
000A6191                            
000A6191                            MerrysLittleLamb_PSG2:
000A6191 807F 7F7F 7F7F 52          	dc.b	nRst, $7F, $7F, $7F, $7F, $7F, $52
000A6198 EC02                       	smpsPSGAlterVol     $02
000A619A A708 8006 A908 8006 A908+  	dc.b	nD3, $08, nRst, $06, nE3, $08, nRst, $06, nE3, $08, nRst, $0A
000A61A6 E101                       	smpsAlterNote       $01
000A61A8 AB06 8004                  	dc.b	nFs3, $06, nRst, $04
000A61AC E101                       	smpsAlterNote       $01
000A61AE AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A61B2 E101                       	smpsAlterNote       $01
000A61B4 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A61B8 E101                       	smpsAlterNote       $01
000A61BA AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A61BE E101                       	smpsAlterNote       $01
000A61C0 AB08 8001                  	dc.b	nFs3, $08, nRst, $01
000A61C4 E101                       	smpsAlterNote       $01
000A61C6 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A61CA E101                       	smpsAlterNote       $01
000A61CC AB05 8003                  	dc.b	nFs3, $05, nRst, $03
000A61D0 E101                       	smpsAlterNote       $01
000A61D2 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A61D6 E101                       	smpsAlterNote       $01
000A61D8 AB04 80                    	dc.b	nFs3, $04, nRst
000A61DB E101                       	smpsAlterNote       $01
000A61DD AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A61E1 E101                       	smpsAlterNote       $01
000A61E3 AB04 80                    	dc.b	nFs3, $04, nRst
000A61E6 E101                       	smpsAlterNote       $01
000A61E8 AB08 807F 7F26             	dc.b	nFs3, $08, nRst, $7F, $7F, $26
000A61EE F2                         	smpsStop
000A61EF                            
000A61EF                            MerrysLittleLamb_PSG3:
000A61EF 807F 7F7F 7F39             	dc.b	nRst, $7F, $7F, $7F, $7F, $39
000A61F5 F3E7                       	smpsPSGform         $E7
000A61F7 E108                       	smpsAlterNote       $08
000A61F9 0002                       	dc.b	nMaxPSG, $02
000A61FB EC01                       	smpsPSGAlterVol     $01
000A61FD E108                       	smpsAlterNote       $08
000A61FF 0005                       	dc.b	nMaxPSG, $05
000A6201 EC01                       	smpsPSGAlterVol     $01
000A6203 E108                       	smpsAlterNote       $08
000A6205 0008                       	dc.b	nMaxPSG, $08
000A6207 EC01                       	smpsPSGAlterVol     $01
000A6209 E108                       	smpsAlterNote       $08
000A620B 00                         	dc.b	nMaxPSG
000A620C EC01                       	smpsPSGAlterVol     $01
000A620E E108                       	smpsAlterNote       $08
000A6210 00                         	dc.b	nMaxPSG
000A6211 EC01                       	smpsPSGAlterVol     $01
000A6213 E108                       	smpsAlterNote       $08
000A6215 0007                       	dc.b	nMaxPSG, $07
000A6217 EC01                       	smpsPSGAlterVol     $01
000A6219 E108                       	smpsAlterNote       $08
000A621B 0005                       	dc.b	nMaxPSG, $05
000A621D EC01                       	smpsPSGAlterVol     $01
000A621F E108                       	smpsAlterNote       $08
000A6221 0007                       	dc.b	nMaxPSG, $07
000A6223 EC01                       	smpsPSGAlterVol     $01
000A6225 E108                       	smpsAlterNote       $08
000A6227 0004                       	dc.b	nMaxPSG, $04
000A6229 EC01                       	smpsPSGAlterVol     $01
000A622B E108                       	smpsAlterNote       $08
000A622D 0007                       	dc.b	nMaxPSG, $07
000A622F EC01                       	smpsPSGAlterVol     $01
000A6231 E108                       	smpsAlterNote       $08
000A6233 0006                       	dc.b	nMaxPSG, $06
000A6235 EC01                       	smpsPSGAlterVol     $01
000A6237 E108                       	smpsAlterNote       $08
000A6239 0009                       	dc.b	nMaxPSG, $09
000A623B EC01                       	smpsPSGAlterVol     $01
000A623D E108                       	smpsAlterNote       $08
000A623F 0007                       	dc.b	nMaxPSG, $07
000A6241 EC01                       	smpsPSGAlterVol     $01
000A6243 E108                       	smpsAlterNote       $08
000A6245 0001                       	dc.b	nMaxPSG, $01
000A6247 ECFF                       	smpsPSGAlterVol     $FF
000A6249 E108                       	smpsAlterNote       $08
000A624B 00                         	dc.b	nMaxPSG
000A624C EC01                       	smpsPSGAlterVol     $01
000A624E E108                       	smpsAlterNote       $08
000A6250 0009                       	dc.b	nMaxPSG, $09
000A6252 EC01                       	smpsPSGAlterVol     $01
000A6254 E108                       	smpsAlterNote       $08
000A6256 0007 807F 7F7F 68          	dc.b	nMaxPSG, $07, nRst, $7F, $7F, $7F, $68
000A625D F2                         	smpsStop
000A625E                            
000A625E                            MerrysLittleLamb_DAC:
000A625E 8913 8A06 8B0D 8A89 8989+  	dc.b	dMidTimpani, $13, dLowTimpani, $06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, $1A, dLowTimpani
000A626A 0D8A 8A19 890D 8888 1A89+  	dc.b	$0D, dLowTimpani, dLowTimpani, $19, dMidTimpani, $0D, dHiTimpani, dHiTimpani, $1A, dMidTimpani, $14, dLowTimpani
000A6276 068B 0D8A 8989 898A 0C8A+  	dc.b	$06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, dLowTimpani, $0C, dLowTimpani, $0D, dLowTimpani
000A6282 898A 8B34 890E 8A04 8B09+  	dc.b	dMidTimpani, dLowTimpani, dMerryWtf1, $34, dMidTimpani, $0E, dLowTimpani, $04, dVLowTimpani, $09, dLowTimpani, $0A
000A628E 8909 8989 8A0A 8A09 8A8A+  	dc.b	dMidTimpani, $09, dMidTimpani, dMidTimpani, dMerryWtf2, $0A, dLowTimpani, $09, dLowTimpani, dLowTimpani, dMerryWtf3, dMidTimpani
000A629A 0A88 0988 8289 0581 098A+  	dc.b	$0A, dHiTimpani, $09, dHiTimpani, dSnare, dMidTimpani, $05, dKick, $09, dLowTimpani, $05, dVLowTimpani
000A62A6 098A 8989 0A89 098A 8805+  	dc.b	$09, dLowTimpani, dMidTimpani, dMidTimpani, $0A, dMidTimpani, $09, dLowTimpani, dHiTimpani, $05, dMidTimpani, $04
000A62B2 8A0A 8909 8A82 0182 0482+  	dc.b	dLowTimpani, $0A, dMidTimpani, $09, dLowTimpani, dSnare, $01, dSnare, $04, dSnare, $01, dSnare
000A62BE 0382 0181 0481 0182 0382+  	dc.b	$03, dSnare, $01, dKick, $04, dKick, $01, dSnare, $03, dSnare, $01, dKick
000A62CA 0481 0182 0482 0181 0381+  	dc.b	$04, dKick, $01, dSnare, $04, dSnare, $01, dKick, $03, dKick, $01, dSnare
000A62D6 0489 0582 0482 058A 048B+  	dc.b	$04, dMidTimpani, $05, dSnare, $04, dSnare, $05, dLowTimpani, $04, dVLowTimpani, $05, dSnare
000A62E2 8A04 8205 8904 8205 8982+  	dc.b	dLowTimpani, $04, dSnare, $05, dMidTimpani, $04, dSnare, $05, dMidTimpani, dSnare, $04, dMidTimpani
000A62EE 0582 8A04 8205 8A04 8205+  	dc.b	$05, dSnare, dMerryWtf2, $04, dSnare, $05, dLowTimpani, $04, dSnare, $05, dLowTimpani, dSnare
000A62FA 048A 0582 0486 0582 8904+  	dc.b	$04, dLowTimpani, $05, dSnare, $04, $86, $05, dSnare, dMidTimpani, $04, dSnare, $05
000A6306 8804 8205 8882 0482 0582+  	dc.b	dHiTimpani, $04, dSnare, $05, dHiTimpani, dSnare, $04, dSnare, $05, dSnare, dMidTimpani, $04
000A6312 8205 8204 8A05 8B82 048A+  	dc.b	dSnare, $05, dSnare, $04, dLowTimpani, $05, dVLowTimpani, dSnare, $04, dLowTimpani, $05, dSnare
000A631E 0489 0582 8909 8904 8205+  	dc.b	$04, dMidTimpani, $05, dSnare, dMidTimpani, $09, dMidTimpani, $04, dSnare, $05, dLowTimpani, $09
000A632A 8801 8804 8801 8904 8988+  	dc.b	dHiTimpani, $01, dHiTimpani, $04, dHiTimpani, $01, dMidTimpani, $04, dMidTimpani, dHiTimpani, $01, dHiTimpani
000A6336 0488 0189 0389 0189 0488+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dHiTimpani, $01, dHiTimpani
000A6342 0488 0189 0389 0189 048A+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dMerryClap, $01, dMerryClap
000A634E 038A 018B 048B 018B 0482+  	dc.b	$03, dMerryClap, $01, dVLowTimpani, $04, dVLowTimpani, $01, dVLowTimpani, $04, dSnare, $01, dKick
000A635A 0381 0182 0482 0181 0482+  	dc.b	$03, dKick, $01, dSnare, $04, dSnare, $01, dKick, $04, dSnare, $7F, nRst
000A6366 F2                         	smpsStop
000A6367                            
000A6367                            MerrysLittleLamb_Voices:
000A6367                            ;	Voice $00
000A6367                            ;	$00
000A6367                            ;	$70, $70, $70, $70, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $1F
000A6367                            ;	$00, $00, $00, $12, 	$F0, $F0, $F0, $0F, 	$00, $00, $00, $00
000A6367                            	smpsVcAlgorithm     $00
000A6367                            	smpsVcFeedback      $00
000A6367                            	smpsVcUnusedBits    $00
000A6367                            	smpsVcDetune        $07, $07, $07, $07
000A6367                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A6367                            	smpsVcRateScale     $00, $00, $00, $00
000A6367                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A6367                            	smpsVcAmpMod        $00, $00, $00, $00
000A6367                            	smpsVcDecayRate1    $1F, $00, $00, $00
000A6367                            	smpsVcDecayRate2    $12, $00, $00, $00
000A6367                            	smpsVcDecayLevel    $00, $0F, $0F, $0F
000A6367                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A6367 0070 7070 701F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A6380                            
000A6380                            ;	Voice $01
000A6380                            ;	$25
000A6380                            ;	$01, $01, $01, $71, 	$1E, $1E, $1E, $1E, 	$08, $06, $0B, $03
000A6380                            ;	$00, $00, $00, $00, 	$4F, $4F, $AF, $0F, 	$08, $16, $06, $00
000A6380                            	smpsVcAlgorithm     $05
000A6380                            	smpsVcFeedback      $04
000A6380                            	smpsVcUnusedBits    $00
000A6380                            	smpsVcDetune        $07, $00, $00, $00
000A6380                            	smpsVcCoarseFreq    $01, $01, $01, $01
000A6380                            	smpsVcRateScale     $00, $00, $00, $00
000A6380                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000A6380                            	smpsVcAmpMod        $00, $00, $00, $00
000A6380                            	smpsVcDecayRate1    $03, $0B, $06, $08
000A6380                            	smpsVcDecayRate2    $00, $00, $00, $00
000A6380                            	smpsVcDecayLevel    $00, $0A, $04, $04
000A6380                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A6380 2501 0101 711E 1E1E 1E08+  	smpsVcTotalLevel    $00, $06, $16, $08
000A6399                            
000A6399                            
000A639A 00                         		even
000A639A                            Music8F:	incbin	sound\music8F.bin ; Game Over
000A69DA 00                         		even
000A69DA                            Music90:	incbin	sound\music90.bin ; Continue
000A6D74 00                         		even
000A6D74                            Music91:	incbin	sound\music91.bin ; Credits
000A8042                            		even
000A8042                            Music92:	incbin	sound\music92.bin ; Drowning
000A8384 00                         		even
000A8384                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A8454                            		even
000A8454                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A912A 00                         		even
000A912A                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A927A 00                         		even
000A927A                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A92B4 00                         		even
000A92B4                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A961C                            		even
000A961C                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A9656 00                         		even
000A9656                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A9690 00                         		even
000A9690                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A96CA 00                         		even
000A96CA                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A9704 00                         		even
000A9704                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A973E 00                         		even
000A973E                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A9778 00                         		even
000A9778                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A9C68                            		even
000A9C68                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A9C68                            GentleBreeze_Header:
000A9C68 =00000001                  smpsHeaderStartSong = 1
000A9C68 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A9C6A 0603                       	smpsHeaderChan      $06, $03
000A9C6C 0100                       	smpsHeaderTempo     $01, $00
000A9C6E                            
000A9C72 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A9C76 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A9C7A 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A9C7E 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A9C82 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A9C86 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A9C8C 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A9C92 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A9C98                            
000A9C98                            ; PSG3 Data
000A9C98                            GentleBreeze_PSG3:
000A9C98 F2                         	smpsStop
000A9C99                            
000A9C99                            ; FM1 Data
000A9C99                            GentleBreeze_FM1:
000A9C9B E0C0                       	smpsPan             panCenter, $00
000A9C9D E1FF                       	smpsAlterNote       $FF
000A9C9F C410                       	dc.b	nG5, $10
000A9CA1 E60F                       	smpsAlterVol        $0F
000A9CA3 C4                         	dc.b	nG5
000A9CA4 E6F1                       	smpsAlterVol        $F1
000A9CA6 E100                       	smpsAlterNote       $00
000A9CA8 C2                         	dc.b	nF5
000A9CA9 E60F                       	smpsAlterVol        $0F
000A9CAB 08                         	dc.b	$08
000A9CAC E6F1                       	smpsAlterVol        $F1
000A9CAE C010                       	dc.b	nEb5, $10
000A9CB0 E60F                       	smpsAlterVol        $0F
000A9CB2 C0                         	dc.b	nEb5
000A9CB3 E6F1                       	smpsAlterVol        $F1
000A9CB5 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9CBB E60F                       	smpsAlterVol        $0F
000A9CBD C9                         	dc.b	nC6
000A9CBE E6F1                       	smpsAlterVol        $F1
000A9CC0 C5                         	dc.b	nAb5
000A9CC1 E60F                       	smpsAlterVol        $0F
000A9CC3 08                         	dc.b	$08
000A9CC4 E6F1                       	smpsAlterVol        $F1
000A9CC6 C010                       	dc.b	nEb5, $10
000A9CC8 E60F                       	smpsAlterVol        $0F
000A9CCA C0                         	dc.b	nEb5
000A9CCB E6F1                       	smpsAlterVol        $F1
000A9CCD C208                       	dc.b	nF5, $08
000A9CCF E1FF                       	smpsAlterNote       $FF
000A9CD1 C410                       	dc.b	nG5, $10
000A9CD3 E100                       	smpsAlterNote       $00
000A9CD5 C5C7                       	dc.b	nAb5, nBb5
000A9CD7 E60F                       	smpsAlterVol        $0F
000A9CD9 C7                         	dc.b	nBb5
000A9CDA E6F1                       	smpsAlterVol        $F1
000A9CDC C5                         	dc.b	nAb5
000A9CDD E60F                       	smpsAlterVol        $0F
000A9CDF 08                         	dc.b	$08
000A9CE0 E6F1                       	smpsAlterVol        $F1
000A9CE2 E1FF                       	smpsAlterNote       $FF
000A9CE4 C410                       	dc.b	nG5, $10
000A9CE6 E60F                       	smpsAlterVol        $0F
000A9CE8 C4                         	dc.b	nG5
000A9CE9 E6F1                       	smpsAlterVol        $F1
000A9CEB C4                         	dc.b	nG5
000A9CEC E100                       	smpsAlterNote       $00
000A9CEE C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9CF3 E60F                       	smpsAlterVol        $0F
000A9CF5 C2                         	dc.b	nF5
000A9CF6 E6F1                       	smpsAlterVol        $F1
000A9CF8 E1FF                       	smpsAlterNote       $FF
000A9CFA C4                         	dc.b	nG5
000A9CFB E60F                       	smpsAlterVol        $0F
000A9CFD 08                         	dc.b	$08
000A9CFE E6F1                       	smpsAlterVol        $F1
000A9D00 10                         	dc.b	$10
000A9D01 E60F                       	smpsAlterVol        $0F
000A9D03 38                         	dc.b	$38
000A9D04 E6F1                       	smpsAlterVol        $F1
000A9D06 10                         	dc.b	$10
000A9D07 E60F                       	smpsAlterVol        $0F
000A9D09 C4                         	dc.b	nG5
000A9D0A E6F1                       	smpsAlterVol        $F1
000A9D0C E100                       	smpsAlterNote       $00
000A9D0E C2                         	dc.b	nF5
000A9D0F E60F                       	smpsAlterVol        $0F
000A9D11 08                         	dc.b	$08
000A9D12 E6F1                       	smpsAlterVol        $F1
000A9D14 C010                       	dc.b	nEb5, $10
000A9D16 E60F                       	smpsAlterVol        $0F
000A9D18 C0                         	dc.b	nEb5
000A9D19 E6F1                       	smpsAlterVol        $F1
000A9D1B BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9D21 E60F                       	smpsAlterVol        $0F
000A9D23 C9                         	dc.b	nC6
000A9D24 E6F1                       	smpsAlterVol        $F1
000A9D26 C5                         	dc.b	nAb5
000A9D27 E60F                       	smpsAlterVol        $0F
000A9D29 08                         	dc.b	$08
000A9D2A E6F1                       	smpsAlterVol        $F1
000A9D2C C010                       	dc.b	nEb5, $10
000A9D2E E60F                       	smpsAlterVol        $0F
000A9D30 C0                         	dc.b	nEb5
000A9D31 E6F1                       	smpsAlterVol        $F1
000A9D33 C208                       	dc.b	nF5, $08
000A9D35 E1FF                       	smpsAlterNote       $FF
000A9D37 C410                       	dc.b	nG5, $10
000A9D39 E100                       	smpsAlterNote       $00
000A9D3B C5C7                       	dc.b	nAb5, nBb5
000A9D3D E60F                       	smpsAlterVol        $0F
000A9D3F C7                         	dc.b	nBb5
000A9D40 E6F1                       	smpsAlterVol        $F1
000A9D42 C5                         	dc.b	nAb5
000A9D43 E60F                       	smpsAlterVol        $0F
000A9D45 08                         	dc.b	$08
000A9D46 E6F1                       	smpsAlterVol        $F1
000A9D48 E1FF                       	smpsAlterNote       $FF
000A9D4A C410                       	dc.b	nG5, $10
000A9D4C E60F                       	smpsAlterVol        $0F
000A9D4E C4                         	dc.b	nG5
000A9D4F E6F1                       	smpsAlterVol        $F1
000A9D51 C4                         	dc.b	nG5
000A9D52 E100                       	smpsAlterNote       $00
000A9D54 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9D59 E60F                       	smpsAlterVol        $0F
000A9D5B 28                         	dc.b	$28
000A9D5C E6F1                       	smpsAlterVol        $F1
000A9D5E C008 10                    	dc.b	nEb5, $08, $10
000A9D61 E60F                       	smpsAlterVol        $0F
000A9D63 21                         	dc.b	$21
000A9D64                            
000A9D64                            GentleBreeze_Loop12:
000A9D64 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A9D67 F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A9D6C E717                       	dc.b	smpsNoAttack, $17
000A9D6E E6F1                       	smpsAlterVol        $F1
000A9D70 E1FF                       	smpsAlterNote       $FF
000A9D72 C410                       	dc.b	nG5, $10
000A9D74 E60F                       	smpsAlterVol        $0F
000A9D76 C4                         	dc.b	nG5
000A9D77 E6F1                       	smpsAlterVol        $F1
000A9D79 E100                       	smpsAlterNote       $00
000A9D7B C2                         	dc.b	nF5
000A9D7C E60F                       	smpsAlterVol        $0F
000A9D7E 08                         	dc.b	$08
000A9D7F E6F1                       	smpsAlterVol        $F1
000A9D81 C010                       	dc.b	nEb5, $10
000A9D83 E60F                       	smpsAlterVol        $0F
000A9D85 C0                         	dc.b	nEb5
000A9D86 E6F1                       	smpsAlterVol        $F1
000A9D88 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9D8E E60F                       	smpsAlterVol        $0F
000A9D90 C9                         	dc.b	nC6
000A9D91 E6F1                       	smpsAlterVol        $F1
000A9D93 C5                         	dc.b	nAb5
000A9D94 E60F                       	smpsAlterVol        $0F
000A9D96 08                         	dc.b	$08
000A9D97 E6F1                       	smpsAlterVol        $F1
000A9D99 C010                       	dc.b	nEb5, $10
000A9D9B E60F                       	smpsAlterVol        $0F
000A9D9D C0                         	dc.b	nEb5
000A9D9E E6F1                       	smpsAlterVol        $F1
000A9DA0 C208                       	dc.b	nF5, $08
000A9DA2 E1FF                       	smpsAlterNote       $FF
000A9DA4 C410                       	dc.b	nG5, $10
000A9DA6 E100                       	smpsAlterNote       $00
000A9DA8 C5C7                       	dc.b	nAb5, nBb5
000A9DAA E60F                       	smpsAlterVol        $0F
000A9DAC C7                         	dc.b	nBb5
000A9DAD E6F1                       	smpsAlterVol        $F1
000A9DAF C5                         	dc.b	nAb5
000A9DB0 E60F                       	smpsAlterVol        $0F
000A9DB2 08                         	dc.b	$08
000A9DB3 E6F1                       	smpsAlterVol        $F1
000A9DB5 E1FF                       	smpsAlterNote       $FF
000A9DB7 C410                       	dc.b	nG5, $10
000A9DB9 E60F                       	smpsAlterVol        $0F
000A9DBB C4                         	dc.b	nG5
000A9DBC E6F1                       	smpsAlterVol        $F1
000A9DBE C4                         	dc.b	nG5
000A9DBF E100                       	smpsAlterNote       $00
000A9DC1 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9DC6 E60F                       	smpsAlterVol        $0F
000A9DC8 C2                         	dc.b	nF5
000A9DC9 E6F1                       	smpsAlterVol        $F1
000A9DCB E1FF                       	smpsAlterNote       $FF
000A9DCD C4                         	dc.b	nG5
000A9DCE E60F                       	smpsAlterVol        $0F
000A9DD0 08                         	dc.b	$08
000A9DD1 E6F1                       	smpsAlterVol        $F1
000A9DD3 10                         	dc.b	$10
000A9DD4 E60F                       	smpsAlterVol        $0F
000A9DD6 38                         	dc.b	$38
000A9DD7 E6F1                       	smpsAlterVol        $F1
000A9DD9 10                         	dc.b	$10
000A9DDA E60F                       	smpsAlterVol        $0F
000A9DDC C4                         	dc.b	nG5
000A9DDD E6F1                       	smpsAlterVol        $F1
000A9DDF E100                       	smpsAlterNote       $00
000A9DE1 C2                         	dc.b	nF5
000A9DE2 E60F                       	smpsAlterVol        $0F
000A9DE4 08                         	dc.b	$08
000A9DE5 E6F1                       	smpsAlterVol        $F1
000A9DE7 C010                       	dc.b	nEb5, $10
000A9DE9 E60F                       	smpsAlterVol        $0F
000A9DEB C0                         	dc.b	nEb5
000A9DEC E6F1                       	smpsAlterVol        $F1
000A9DEE BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9DF4 E60F                       	smpsAlterVol        $0F
000A9DF6 C9                         	dc.b	nC6
000A9DF7 E6F1                       	smpsAlterVol        $F1
000A9DF9 C5                         	dc.b	nAb5
000A9DFA E60F                       	smpsAlterVol        $0F
000A9DFC 08                         	dc.b	$08
000A9DFD E6F1                       	smpsAlterVol        $F1
000A9DFF C010                       	dc.b	nEb5, $10
000A9E01 E60F                       	smpsAlterVol        $0F
000A9E03 C0                         	dc.b	nEb5
000A9E04 E6F1                       	smpsAlterVol        $F1
000A9E06 C208                       	dc.b	nF5, $08
000A9E08 E1FF                       	smpsAlterNote       $FF
000A9E0A C410                       	dc.b	nG5, $10
000A9E0C E100                       	smpsAlterNote       $00
000A9E0E C5C7                       	dc.b	nAb5, nBb5
000A9E10 E60F                       	smpsAlterVol        $0F
000A9E12 C7                         	dc.b	nBb5
000A9E13 E6F1                       	smpsAlterVol        $F1
000A9E15 C5                         	dc.b	nAb5
000A9E16 E60F                       	smpsAlterVol        $0F
000A9E18 08                         	dc.b	$08
000A9E19 E6F1                       	smpsAlterVol        $F1
000A9E1B E1FF                       	smpsAlterNote       $FF
000A9E1D C410                       	dc.b	nG5, $10
000A9E1F E60F                       	smpsAlterVol        $0F
000A9E21 C4                         	dc.b	nG5
000A9E22 E6F1                       	smpsAlterVol        $F1
000A9E24 C4                         	dc.b	nG5
000A9E25 E100                       	smpsAlterNote       $00
000A9E27 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9E2C E60F                       	smpsAlterVol        $0F
000A9E2E 28                         	dc.b	$28
000A9E2F E6F1                       	smpsAlterVol        $F1
000A9E31 C008 10                    	dc.b	nEb5, $08, $10
000A9E34 E60F                       	smpsAlterVol        $0F
000A9E36 21                         	dc.b	$21
000A9E37 E0C0                       	smpsPan             panCenter, $00
000A9E39 F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A9E3C                            
000A9E3C                            ; FM2 Data
000A9E3C                            GentleBreeze_FM2:
000A9E3E E60C                       	smpsAlterVol        $0C
000A9E40 E0C0                       	smpsPan             panCenter, $00
000A9E42 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A9E4E A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A9E5A 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A9E66 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A9E72 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A9E7E A039                       	dc.b	nG2, $39
000A9E80                            
000A9E80                            GentleBreeze_Jump04:
000A9E80 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A9E83                            
000A9E83                            GentleBreeze_Loop11:
000A9E83 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A9E8F A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A9E9B 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A9EA7 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A9EB3 A3                         	dc.b	nBb2
000A9EB4 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A9EB9 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A9EC5 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A9ED1 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A9EDD 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A9EE9 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A9EF5 A039                       	dc.b	nG2, $39
000A9EF7 E0C0                       	smpsPan             panCenter, $00
000A9EF9 F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A9EFC                            
000A9EFC                            ; FM3 Data
000A9EFC                            GentleBreeze_FM3:
000A9EFE E0C0                       	smpsPan             panCenter, $00
000A9F00 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A9F08 E616                       	smpsAlterVol        $16
000A9F0A F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A9F0F                            
000A9F0F                            GentleBreeze_Loop0F:
000A9F0F C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A9F13 E1FF                       	smpsAlterNote       $FF
000A9F15 C4                         	dc.b	nG5
000A9F16 E100                       	smpsAlterNote       $00
000A9F18 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9F1D E608                       	smpsAlterVol        $08
000A9F1F C080 08                    	dc.b	nEb5, nRst, $08
000A9F22 E6F8                       	smpsAlterVol        $F8
000A9F24 C7                         	dc.b	nBb5
000A9F25 E1FF                       	smpsAlterNote       $FF
000A9F27 C4                         	dc.b	nG5
000A9F28 E100                       	smpsAlterNote       $00
000A9F2A C0BB                       	dc.b	nEb5, nBb4
000A9F2C F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A9F31 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A9F34 E1FF                       	smpsAlterNote       $FF
000A9F36 C4                         	dc.b	nG5
000A9F37 E100                       	smpsAlterNote       $00
000A9F39 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9F3E E608                       	smpsAlterVol        $08
000A9F40 C080 08                    	dc.b	nEb5, nRst, $08
000A9F43 E6F8                       	smpsAlterVol        $F8
000A9F45 E1FF                       	smpsAlterNote       $FF
000A9F47 C4                         	dc.b	nG5
000A9F48 E100                       	smpsAlterNote       $00
000A9F4A C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A9F51 E1FF                       	smpsAlterNote       $FF
000A9F53 C4                         	dc.b	nG5
000A9F54 E100                       	smpsAlterNote       $00
000A9F56 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A9F5B E1FF                       	smpsAlterNote       $FF
000A9F5D C4                         	dc.b	nG5
000A9F5E E100                       	smpsAlterNote       $00
000A9F60 C7                         	dc.b	nBb5
000A9F61 E1FF                       	smpsAlterNote       $FF
000A9F63 C4                         	dc.b	nG5
000A9F64 E100                       	smpsAlterNote       $00
000A9F66 C2C0 01                    	dc.b	nF5, nEb5, $01
000A9F69                            
000A9F69                            GentleBreeze_Jump03:
000A9F69 E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A9F70 E6FA                       	smpsAlterVol        $FA
000A9F72 F4                         	smpsModOff
000A9F73 E1FF                       	smpsAlterNote       $FF
000A9F75 B850                       	dc.b	nG4, $50
000A9F77 E100                       	smpsAlterNote       $00
000A9F79 B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A9F85 E1FF                       	smpsAlterNote       $FF
000A9F87 B810                       	dc.b	nG4, $10
000A9F89 E100                       	smpsAlterNote       $00
000A9F8B BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A9F90 E1FF                       	smpsAlterNote       $FF
000A9F92 B8                         	dc.b	nG4
000A9F93 E100                       	smpsAlterNote       $00
000A9F95 B610                       	dc.b	nF4, $10
000A9F97 E1FF                       	smpsAlterNote       $FF
000A9F99 B850                       	dc.b	nG4, $50
000A9F9B E100                       	smpsAlterNote       $00
000A9F9D B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A9FA5 E1FF                       	smpsAlterNote       $FF
000A9FA7 AC08                       	dc.b	nG3, $08
000A9FA9 E100                       	smpsAlterNote       $00
000A9FAB AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A9FB0 E1FF                       	smpsAlterNote       $FF
000A9FB2 B850                       	dc.b	nG4, $50
000A9FB4 E100                       	smpsAlterNote       $00
000A9FB6 BB08                       	dc.b	nBb4, $08
000A9FB8 E1FF                       	smpsAlterNote       $FF
000A9FBA B8                         	dc.b	nG4
000A9FBB E100                       	smpsAlterNote       $00
000A9FBD BDBB B6                    	dc.b	nC5, nBb4, nF4
000A9FC0 E1FF                       	smpsAlterNote       $FF
000A9FC2 B810 08                    	dc.b	nG4, $10, $08
000A9FC5 E100                       	smpsAlterNote       $00
000A9FC7 B6                         	dc.b	nF4
000A9FC8 E1FF                       	smpsAlterNote       $FF
000A9FCA B880                       	dc.b	nG4, nRst
000A9FCC E100                       	smpsAlterNote       $00
000A9FCE BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A9FD1 E1FF                       	smpsAlterNote       $FF
000A9FD3 B810                       	dc.b	nG4, $10
000A9FD5 E100                       	smpsAlterNote       $00
000A9FD7 B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A9FDE E1FF                       	smpsAlterNote       $FF
000A9FE0 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A9FEE E606                       	smpsAlterVol        $06
000A9FF0 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A9FF5 E100                       	smpsAlterNote       $00
000A9FF7                            
000A9FF7                            GentleBreeze_Loop10:
000A9FF7 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A9FFB E1FF                       	smpsAlterNote       $FF
000A9FFD C4                         	dc.b	nG5
000A9FFE E100                       	smpsAlterNote       $00
000AA000 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000AA005 E608                       	smpsAlterVol        $08
000AA007 C080 08                    	dc.b	nEb5, nRst, $08
000AA00A E6F8                       	smpsAlterVol        $F8
000AA00C C7                         	dc.b	nBb5
000AA00D E1FF                       	smpsAlterNote       $FF
000AA00F C4                         	dc.b	nG5
000AA010 E100                       	smpsAlterNote       $00
000AA012 C0BB                       	dc.b	nEb5, nBb4
000AA014 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000AA019 C0BD C9                    	dc.b	nEb5, nC5, nC6
000AA01C E1FF                       	smpsAlterNote       $FF
000AA01E C4                         	dc.b	nG5
000AA01F E100                       	smpsAlterNote       $00
000AA021 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000AA026 E608                       	smpsAlterVol        $08
000AA028 C080 08                    	dc.b	nEb5, nRst, $08
000AA02B E6F8                       	smpsAlterVol        $F8
000AA02D E1FF                       	smpsAlterNote       $FF
000AA02F C4                         	dc.b	nG5
000AA030 E100                       	smpsAlterNote       $00
000AA032 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000AA039 E1FF                       	smpsAlterNote       $FF
000AA03B C4                         	dc.b	nG5
000AA03C E100                       	smpsAlterNote       $00
000AA03E C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000AA043 E1FF                       	smpsAlterNote       $FF
000AA045 C4                         	dc.b	nG5
000AA046 E100                       	smpsAlterNote       $00
000AA048 C7                         	dc.b	nBb5
000AA049 E1FF                       	smpsAlterNote       $FF
000AA04B C4                         	dc.b	nG5
000AA04C E100                       	smpsAlterNote       $00
000AA04E C2C0 01                    	dc.b	nF5, nEb5, $01
000AA051 E0C0                       	smpsPan             panCenter, $00
000AA053 F1                         	smpsModOn
000AA054 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000AA057                            
000AA057                            ; FM4 Data
000AA057                            GentleBreeze_FM4:
000AA059 E0C0                       	smpsPan             panCenter, $00
000AA05B 80                         	dc.b	nRst
000AA05C                            
000AA05C                            GentleBreeze_Loop0D:
000AA05C 7F                         	dc.b	$7F
000AA05D F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000AA062 77                         	dc.b	$77
000AA065 E609                       	smpsAlterVol        $09
000AA067 C001                       	dc.b	nEb5, $01
000AA069                            
000AA069                            GentleBreeze_Jump02:
000AA069 E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000AA06E E607                       	smpsAlterVol        $07
000AA070 E1FF                       	smpsAlterNote       $FF
000AA072 C450                       	dc.b	nG5, $50
000AA074 E100                       	smpsAlterNote       $00
000AA076 C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000AA082 E1FF                       	smpsAlterNote       $FF
000AA084 C410                       	dc.b	nG5, $10
000AA086 E100                       	smpsAlterNote       $00
000AA088 C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000AA08D E1FF                       	smpsAlterNote       $FF
000AA08F C4                         	dc.b	nG5
000AA090 E100                       	smpsAlterNote       $00
000AA092 C210                       	dc.b	nF5, $10
000AA094 E1FF                       	smpsAlterNote       $FF
000AA096 C450                       	dc.b	nG5, $50
000AA098 E100                       	smpsAlterNote       $00
000AA09A C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000AA0A2 E1FF                       	smpsAlterNote       $FF
000AA0A4 B808                       	dc.b	nG4, $08
000AA0A6 E100                       	smpsAlterNote       $00
000AA0A8 BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000AA0AD E1FF                       	smpsAlterNote       $FF
000AA0AF C450                       	dc.b	nG5, $50
000AA0B1 E100                       	smpsAlterNote       $00
000AA0B3 C708                       	dc.b	nBb5, $08
000AA0B5 E1FF                       	smpsAlterNote       $FF
000AA0B7 C4                         	dc.b	nG5
000AA0B8 E100                       	smpsAlterNote       $00
000AA0BA C9C7 C2                    	dc.b	nC6, nBb5, nF5
000AA0BD E1FF                       	smpsAlterNote       $FF
000AA0BF C410 08                    	dc.b	nG5, $10, $08
000AA0C2 E100                       	smpsAlterNote       $00
000AA0C4 C2                         	dc.b	nF5
000AA0C5 E1FF                       	smpsAlterNote       $FF
000AA0C7 C480                       	dc.b	nG5, nRst
000AA0C9 E100                       	smpsAlterNote       $00
000AA0CB C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000AA0CE E1FF                       	smpsAlterNote       $FF
000AA0D0 C410                       	dc.b	nG5, $10
000AA0D2 E100                       	smpsAlterNote       $00
000AA0D4 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000AA0DB E1FF                       	smpsAlterNote       $FF
000AA0DD C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000AA0E5                            
000AA0E5                            GentleBreeze_Loop0E:
000AA0E5 7F                         	dc.b	$7F
000AA0E6 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000AA0EB 77                         	dc.b	$77
000AA0EC E100                       	smpsAlterNote       $00
000AA0EE C001                       	dc.b	nEb5, $01
000AA0F0 E6F9                       	smpsAlterVol        $F9
000AA0F2 E0C0                       	smpsPan             panCenter, $00
000AA0F4 E100                       	smpsAlterNote       $00
000AA0F6 F6FF 71                    	smpsJump            GentleBreeze_Jump02
000AA0F9                            
000AA0F9                            ; FM5 Data
000AA0F9                            GentleBreeze_FM5:
000AA0FB E0C0                       	smpsPan             panCenter, $00
000AA0FD A5                         	dc.b	nC3
000AA0FE                            
000AA0FE                            GentleBreeze_Loop06:
000AA0FE 10                         	dc.b	$10
000AA0FF E607                       	smpsAlterVol        $07
000AA101 A5                         	dc.b	nC3
000AA102 E6F9                       	smpsAlterVol        $F9
000AA104 08                         	dc.b	$08
000AA105 E607                       	smpsAlterVol        $07
000AA107 A5                         	dc.b	nC3
000AA108 E608                       	smpsAlterVol        $08
000AA10A A5                         	dc.b	nC3
000AA10B E6F1                       	smpsAlterVol        $F1
000AA10D 18                         	dc.b	$18
000AA10E E607                       	smpsAlterVol        $07
000AA110 10                         	dc.b	$10
000AA111 E608                       	smpsAlterVol        $08
000AA113 A5                         	dc.b	nC3
000AA114 E6F1                       	smpsAlterVol        $F1
000AA116 A5                         	dc.b	nC3
000AA117 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000AA11C A5                         	dc.b	nC3
000AA11D                            
000AA11D                            GentleBreeze_Loop07:
000AA11D E607                       	smpsAlterVol        $07
000AA11F A5                         	dc.b	nC3
000AA120 E6F9                       	smpsAlterVol        $F9
000AA122 08                         	dc.b	$08
000AA123 E607                       	smpsAlterVol        $07
000AA125 A5                         	dc.b	nC3
000AA126 E608                       	smpsAlterVol        $08
000AA128 A5                         	dc.b	nC3
000AA129 E6F1                       	smpsAlterVol        $F1
000AA12B 10                         	dc.b	$10
000AA12C F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000AA131                            
000AA131                            GentleBreeze_Loop08:
000AA131 A5                         	dc.b	nC3
000AA132 E607                       	smpsAlterVol        $07
000AA134 A5                         	dc.b	nC3
000AA135 E6F9                       	smpsAlterVol        $F9
000AA137 08                         	dc.b	$08
000AA138 E607                       	smpsAlterVol        $07
000AA13A A5                         	dc.b	nC3
000AA13B E608                       	smpsAlterVol        $08
000AA13D A5                         	dc.b	nC3
000AA13E E6F1                       	smpsAlterVol        $F1
000AA140 18                         	dc.b	$18
000AA141 E607                       	smpsAlterVol        $07
000AA143 10                         	dc.b	$10
000AA144 E608                       	smpsAlterVol        $08
000AA146 A5                         	dc.b	nC3
000AA147 E6F1                       	smpsAlterVol        $F1
000AA149 A5                         	dc.b	nC3
000AA14A F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000AA14F A5                         	dc.b	nC3
000AA150 E607                       	smpsAlterVol        $07
000AA152 A5                         	dc.b	nC3
000AA153 E6F9                       	smpsAlterVol        $F9
000AA155 08                         	dc.b	$08
000AA156 E607                       	smpsAlterVol        $07
000AA158 A5                         	dc.b	nC3
000AA159 E608                       	smpsAlterVol        $08
000AA15B A5                         	dc.b	nC3
000AA15C E6F1                       	smpsAlterVol        $F1
000AA15E 10                         	dc.b	$10
000AA15F E607                       	smpsAlterVol        $07
000AA161 A5                         	dc.b	nC3
000AA162 E6F9                       	smpsAlterVol        $F9
000AA164 08                         	dc.b	$08
000AA165 E607                       	smpsAlterVol        $07
000AA167 A5                         	dc.b	nC3
000AA168 E608                       	smpsAlterVol        $08
000AA16A A5                         	dc.b	nC3
000AA16B E6F1                       	smpsAlterVol        $F1
000AA16D 01                         	dc.b	$01
000AA16E                            
000AA16E                            GentleBreeze_Jump01:
000AA16E E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000AA171 E607                       	smpsAlterVol        $07
000AA173                            
000AA173                            GentleBreeze_Loop09:
000AA173 10                         	dc.b	$10
000AA174 E608                       	smpsAlterVol        $08
000AA176 A5                         	dc.b	nC3
000AA177 E6F1                       	smpsAlterVol        $F1
000AA179 08                         	dc.b	$08
000AA17A E60F                       	smpsAlterVol        $0F
000AA17C 18                         	dc.b	$18
000AA17D E6F8                       	smpsAlterVol        $F8
000AA17F F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000AA184 10                         	dc.b	$10
000AA185 E608                       	smpsAlterVol        $08
000AA187 A5                         	dc.b	nC3
000AA188 E6F1                       	smpsAlterVol        $F1
000AA18A 08                         	dc.b	$08
000AA18B E60F                       	smpsAlterVol        $0F
000AA18D 18                         	dc.b	$18
000AA18E E6F1                       	smpsAlterVol        $F1
000AA190                            
000AA190                            GentleBreeze_Loop0A:
000AA190 10                         	dc.b	$10
000AA191 E607                       	smpsAlterVol        $07
000AA193 A5                         	dc.b	nC3
000AA194 E6F9                       	smpsAlterVol        $F9
000AA196 08                         	dc.b	$08
000AA197 E607                       	smpsAlterVol        $07
000AA199 A5                         	dc.b	nC3
000AA19A E608                       	smpsAlterVol        $08
000AA19C A5                         	dc.b	nC3
000AA19D E6F1                       	smpsAlterVol        $F1
000AA19F 18                         	dc.b	$18
000AA1A0 E607                       	smpsAlterVol        $07
000AA1A2 10                         	dc.b	$10
000AA1A3 E608                       	smpsAlterVol        $08
000AA1A5 A5                         	dc.b	nC3
000AA1A6 E6F1                       	smpsAlterVol        $F1
000AA1A8 A5                         	dc.b	nC3
000AA1A9 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000AA1AE A5                         	dc.b	nC3
000AA1AF                            
000AA1AF                            GentleBreeze_Loop0B:
000AA1AF E607                       	smpsAlterVol        $07
000AA1B1 A5                         	dc.b	nC3
000AA1B2 E6F9                       	smpsAlterVol        $F9
000AA1B4 08                         	dc.b	$08
000AA1B5 E607                       	smpsAlterVol        $07
000AA1B7 A5                         	dc.b	nC3
000AA1B8 E608                       	smpsAlterVol        $08
000AA1BA A5                         	dc.b	nC3
000AA1BB E6F1                       	smpsAlterVol        $F1
000AA1BD 10                         	dc.b	$10
000AA1BE F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000AA1C3                            
000AA1C3                            GentleBreeze_Loop0C:
000AA1C3 A5                         	dc.b	nC3
000AA1C4 E607                       	smpsAlterVol        $07
000AA1C6 A5                         	dc.b	nC3
000AA1C7 E6F9                       	smpsAlterVol        $F9
000AA1C9 08                         	dc.b	$08
000AA1CA E607                       	smpsAlterVol        $07
000AA1CC A5                         	dc.b	nC3
000AA1CD E608                       	smpsAlterVol        $08
000AA1CF A5                         	dc.b	nC3
000AA1D0 E6F1                       	smpsAlterVol        $F1
000AA1D2 18                         	dc.b	$18
000AA1D3 E607                       	smpsAlterVol        $07
000AA1D5 10                         	dc.b	$10
000AA1D6 E608                       	smpsAlterVol        $08
000AA1D8 A5                         	dc.b	nC3
000AA1D9 E6F1                       	smpsAlterVol        $F1
000AA1DB A5                         	dc.b	nC3
000AA1DC F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000AA1E1 A5                         	dc.b	nC3
000AA1E2 E607                       	smpsAlterVol        $07
000AA1E4 A5                         	dc.b	nC3
000AA1E5 E6F9                       	smpsAlterVol        $F9
000AA1E7 08                         	dc.b	$08
000AA1E8 E607                       	smpsAlterVol        $07
000AA1EA A5                         	dc.b	nC3
000AA1EB E608                       	smpsAlterVol        $08
000AA1ED A5                         	dc.b	nC3
000AA1EE E6F1                       	smpsAlterVol        $F1
000AA1F0 10                         	dc.b	$10
000AA1F1 E607                       	smpsAlterVol        $07
000AA1F3 A5                         	dc.b	nC3
000AA1F4 E6F9                       	smpsAlterVol        $F9
000AA1F6 08                         	dc.b	$08
000AA1F7 E607                       	smpsAlterVol        $07
000AA1F9 A5                         	dc.b	nC3
000AA1FA E608                       	smpsAlterVol        $08
000AA1FC A5                         	dc.b	nC3
000AA1FD E6F1                       	smpsAlterVol        $F1
000AA1FF 01                         	dc.b	$01
000AA200 E0C0                       	smpsPan             panCenter, $00
000AA202 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000AA205                            
000AA205                            ; DAC Data
000AA205                            GentleBreeze_DAC:
000AA205 81                         	dc.b	dKick
000AA206                            
000AA206                            GentleBreeze_Loop00:
000AA206 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000AA20C F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000AA211 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000AA21C                            
000AA21C                            GentleBreeze_Loop01:
000AA21C 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000AA222 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000AA227 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000AA231                            
000AA231                            GentleBreeze_Jump00:
000AA231 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000AA235                            
000AA235                            GentleBreeze_Loop02:
000AA235 81                         	dc.b	dKick
000AA236                            
000AA236                            GentleBreeze_Loop03:
000AA236 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000AA242 088A                       	dc.b	$08, dLowTimpani
000AA244 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000AA249 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000AA255 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000AA25A F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000AA25F                            
000AA25F                            GentleBreeze_Loop04:
000AA25F 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000AA265 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000AA26A 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000AA275                            
000AA275                            GentleBreeze_Loop05:
000AA275 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000AA27B F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000AA280 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000AA28A F6FF A5                    	smpsJump            GentleBreeze_Jump00
000AA28D                            
000AA28D                            ; PSG 1 Data
000AA28D                            GentleBreeze_PSG1:
000AA28D 80                         	dc.b	nRst
000AA28E                            
000AA28E                            GentleBreeze_LoopPSG02:
000AA28E 7F                         	dc.b	$7F
000AA28F F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000AA294 08                         	dc.b	$08
000AA295 EC04                       	smpsPSGAlterVol     $04
000AA297                            
000AA297                            GentleBreeze_JumpPSG01:
000AA297 A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000AA2A3 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000AA2AB                            
000AA2AB                            GentleBreeze_LoopPSG03:
000AA2AB 7F                         	dc.b	$7F
000AA2AC F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000AA2B1 08A3 01                    	dc.b	$08, nBb2, $01
000AA2B4 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000AA2B7                            
000AA2B7                            ; PSG2 Data
000AA2B7                            GentleBreeze_PSG2:
000AA2B7 80                         	dc.b	nRst
000AA2B8                            
000AA2B8                            GentleBreeze_LoopPSG00:
000AA2B8 7F                         	dc.b	$7F
000AA2B9 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000AA2BE 08                         	dc.b	$08
000AA2BF EC04                       	smpsPSGAlterVol     $04
000AA2C1                            
000AA2C1                            GentleBreeze_JumpPSG00:
000AA2C1 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000AA2CD A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000AA2D5                            
000AA2D5                            GentleBreeze_LoopPSG01:
000AA2D5 7F                         	dc.b	$7F
000AA2D6 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000AA2DB 08A8 01                    	dc.b	$08, nEb3, $01
000AA2DE F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000AA2E1                            
000AA2E1                            GentleBreeze_Voices:
000AA2E1                            ;	Voice $00
000AA2E1                            ;	$0C
000AA2E1                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000AA2E1                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000AA2E1                            	smpsVcAlgorithm     $04
000AA2E1                            	smpsVcFeedback      $01
000AA2E1                            	smpsVcUnusedBits    $00
000AA2E1                            	smpsVcDetune        $07, $02, $07, $02
000AA2E1                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000AA2E1                            	smpsVcRateScale     $00, $00, $00, $00
000AA2E1                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA2E1                            	smpsVcAmpMod        $00, $00, $00, $00
000AA2E1                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000AA2E1                            	smpsVcDecayRate2    $01, $00, $00, $00
000AA2E1                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000AA2E1                            	smpsVcReleaseRate   $09, $01, $04, $03
000AA2E1 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000AA2FA                            
000AA2FA                            ;	Voice $01
000AA2FA                            ;	$38
000AA2FA                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000AA2FA                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000AA2FA                            	smpsVcAlgorithm     $00
000AA2FA                            	smpsVcFeedback      $07
000AA2FA                            	smpsVcUnusedBits    $00
000AA2FA                            	smpsVcDetune        $03, $07, $01, $05
000AA2FA                            	smpsVcCoarseFreq    $00, $00, $07, $04
000AA2FA                            	smpsVcRateScale     $00, $02, $00, $02
000AA2FA                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA2FA                            	smpsVcAmpMod        $00, $00, $00, $00
000AA2FA                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000AA2FA                            	smpsVcDecayRate2    $00, $00, $10, $00
000AA2FA                            	smpsVcDecayLevel    $00, $00, $00, $00
000AA2FA                            	smpsVcReleaseRate   $08, $05, $05, $05
000AA2FA 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000AA313                            
000AA313                            ;	Voice $02
000AA313                            ;	$00
000AA313                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000AA313                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000AA313                            	smpsVcAlgorithm     $00
000AA313                            	smpsVcFeedback      $00
000AA313                            	smpsVcUnusedBits    $00
000AA313                            	smpsVcDetune        $00, $00, $00, $00
000AA313                            	smpsVcCoarseFreq    $00, $00, $00, $00
000AA313                            	smpsVcRateScale     $00, $00, $00, $00
000AA313                            	smpsVcAttackRate    $00, $00, $00, $00
000AA313                            	smpsVcAmpMod        $00, $00, $00, $00
000AA313                            	smpsVcDecayRate1    $00, $00, $00, $00
000AA313                            	smpsVcDecayRate2    $00, $00, $00, $00
000AA313                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000AA313                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AA313 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000AA32C                            
000AA32C                            ;	Voice $03
000AA32C                            ;	$36
000AA32C                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000AA32C                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000AA32C                            	smpsVcAlgorithm     $06
000AA32C                            	smpsVcFeedback      $06
000AA32C                            	smpsVcUnusedBits    $00
000AA32C                            	smpsVcDetune        $00, $00, $00, $00
000AA32C                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000AA32C                            	smpsVcRateScale     $00, $00, $00, $00
000AA32C                            	smpsVcAttackRate    $1F, $00, $18, $16
000AA32C                            	smpsVcAmpMod        $00, $00, $00, $00
000AA32C                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000AA32C                            	smpsVcDecayRate2    $00, $00, $12, $00
000AA32C                            	smpsVcDecayLevel    $04, $04, $02, $00
000AA32C                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000AA32C 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000AA345                            
000AA345                            ;	Voice $04
000AA345                            ;	$07
000AA345                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000AA345                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000AA345                            	smpsVcAlgorithm     $07
000AA345                            	smpsVcFeedback      $00
000AA345                            	smpsVcUnusedBits    $00
000AA345                            	smpsVcDetune        $07, $06, $05, $00
000AA345                            	smpsVcCoarseFreq    $05, $04, $03, $05
000AA345                            	smpsVcRateScale     $00, $01, $01, $01
000AA345                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000AA345                            	smpsVcAmpMod        $00, $00, $00, $00
000AA345                            	smpsVcDecayRate1    $17, $17, $17, $17
000AA345                            	smpsVcDecayRate2    $00, $00, $00, $00
000AA345                            	smpsVcDecayLevel    $02, $02, $02, $02
000AA345                            	smpsVcReleaseRate   $06, $06, $06, $06
000AA345 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000AA35E                            
000AA35E                            ;	Voice $05
000AA35E                            ;	$3C
000AA35E                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000AA35E                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000AA35E                            	smpsVcAlgorithm     $04
000AA35E                            	smpsVcFeedback      $07
000AA35E                            	smpsVcUnusedBits    $00
000AA35E                            	smpsVcDetune        $06, $06, $02, $02
000AA35E                            	smpsVcCoarseFreq    $01, $03, $01, $01
000AA35E                            	smpsVcRateScale     $00, $00, $00, $00
000AA35E                            	smpsVcAttackRate    $0E, $14, $10, $13
000AA35E                            	smpsVcAmpMod        $00, $00, $00, $00
000AA35E                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000AA35E                            	smpsVcDecayRate2    $04, $04, $04, $04
000AA35E                            	smpsVcDecayLevel    $02, $01, $01, $01
000AA35E                            	smpsVcReleaseRate   $07, $07, $07, $07
000AA35E 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000AA377                            
000AA377                            
000AA378 00                         		even
000AA378                            ; ---------------------------------------------------------------------------
000AA378                            ; Sound	effect pointers
000AA378                            ; ---------------------------------------------------------------------------
000AA378 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000AA384 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000AA390 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000AA39C 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000AA3A8 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000AA3B4 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000AA3C0 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000AA3CC 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000AA3D8 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000AA3E4 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000AA3F0 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000AA3FC 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000AA408 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000AA414 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000AA420 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000AA42C 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000AA438 0000 0000                  SoundD0Index:	dc.l SoundD0
000AA43C                            SoundA0:	include	sound\jump.asm
000AA43C                            jump_Header:
000AA43C =00000001                  smpsHeaderStartSong = 1
000AA43C 0000                       	smpsHeaderVoice     jump_Voices
000AA43E 01                         	smpsHeaderTempoSFX  $01
000AA43F 01                         	smpsHeaderChanSFX   $01
000AA440                            
000AA44C                            
000AA44C                            ; FM4 Data
000AA44C                            jump_FM4:
000AA44E E000                       	smpsPan             panNone, $00
000AA450 E607                       	smpsAlterVol        $07
000AA452 E0C0                       	smpsPan             panCenter, $00
000AA454 9903 B1                    	dc.b	nC2, $03, nC4
000AA457 E607                       	smpsAlterVol        $07
000AA459 E040                       	smpsPan             panRight, $00
000AA45B 99B1                       	dc.b	nC2, nC4
000AA45D E60A                       	smpsAlterVol        $0A
000AA45F E080                       	smpsPan             panLeft, $00
000AA461 99B1                       	dc.b	nC2, nC4
000AA463 E603                       	smpsAlterVol        $03
000AA465 E0C0                       	smpsPan             panCenter, $00
000AA467 99B1                       	dc.b	nC2, nC4
000AA469 E000                       	smpsPan             panNone, $00
000AA46B 803D                       	dc.b	nRst, $3D
000AA46D F2                         	smpsStop
000AA46E                            
000AA46E                            ; PSG3 Data
000AA46E                            jump_PSG3:
000AA46E F3E7                       	smpsPSGform         $E7
000AA470 8056                       	dc.b	nRst, $56
000AA472 F2                         	smpsStop
000AA473                            
000AA473                            jump_Voices:
000AA473                            ;	Voice $00
000AA473                            ;	$3C
000AA473                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000AA473                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000AA473                            	smpsVcAlgorithm     $04
000AA473                            	smpsVcFeedback      $07
000AA473                            	smpsVcUnusedBits    $00
000AA473                            	smpsVcDetune        $00, $00, $00, $00
000AA473                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000AA473                            	smpsVcRateScale     $00, $00, $00, $00
000AA473                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA473                            	smpsVcAmpMod        $00, $00, $00, $00
000AA473                            	smpsVcDecayRate1    $0E, $14, $12, $00
000AA473                            	smpsVcDecayRate2    $11, $00, $11, $00
000AA473                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000AA473                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AA473 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000AA48C                            
000AA48C                            
000AA48C                            		even
000AA48C                            SoundA1:	incbin	sound\soundA1.bin
000AA4B6                            		even
000AA4B6                            SoundA2:	incbin	sound\soundA2.bin
000AA4D6                            		even
000AA4D6                            SoundA3:	incbin	sound\soundA3.bin
000AA508                            		even
000AA508                            SoundA4:	incbin	sound\soundA4.bin
000AA53E                            		even
000AA53E                            SoundA5:	include	sound\fart.asm
000AA53E                            Fart_Header:
000AA53E =00000001                  smpsHeaderStartSong = 1
000AA53E 0000                       	smpsHeaderVoice     Fart_Voices
000AA540 01                         	smpsHeaderTempoSFX  $01
000AA541 04                         	smpsHeaderChanSFX   $04
000AA542                            
000AA55A                            
000AA55A                            Fart_FM3:
000AA55C E607                       	smpsAlterVol        $07
000AA55E E0C0                       	smpsPan             panCenter, $00
000AA560 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000AA565 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000AA568 E1FE                       	smpsAlterNote       $FE
000AA56A A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000AA56D E100                       	smpsAlterNote       $00
000AA56F A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000AA574 F2                         	smpsStop
000AA575                            
000AA575                            ; FM4 Data
000AA575                            Fart_FM4:
000AA577 E0C0                       	smpsPan             panCenter, $00
000AA579 8006                       	dc.b	nRst, $06
000AA57D E616                       	smpsAlterVol        $16
000AA57F E080                       	smpsPan             panLeft, $00
000AA581 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000AA586 A212                       	dc.b	nA2, $12
000AA588 E60A                       	smpsAlterVol        $0A
000AA58A E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000AA58D E603                       	smpsAlterVol        $03
000AA58F E7A2                       	dc.b	smpsNoAttack, nA2
000AA591 E603                       	smpsAlterVol        $03
000AA593 E7A2                       	dc.b	smpsNoAttack, nA2
000AA595 E604                       	smpsAlterVol        $04
000AA597 E7A2                       	dc.b	smpsNoAttack, nA2
000AA599 E606                       	smpsAlterVol        $06
000AA59B E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000AA59E E610                       	smpsAlterVol        $10
000AA5A0 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000AA5A3 E610                       	smpsAlterVol        $10
000AA5A5 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000AA5AA F2                         	smpsStop
000AA5AB                            
000AA5AB                            ; FM5 Data
000AA5AB                            Fart_FM5:
000AA5AD E0C0                       	smpsPan             panCenter, $00
000AA5AF 8009                       	dc.b	nRst, $09
000AA5B3 E616                       	smpsAlterVol        $16
000AA5B5 E040                       	smpsPan             panRight, $00
000AA5B7 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000AA5BC A215                       	dc.b	nA2, $15
000AA5BE E60A                       	smpsAlterVol        $0A
000AA5C0 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000AA5C3 E603                       	smpsAlterVol        $03
000AA5C5 E7A2                       	dc.b	smpsNoAttack, nA2
000AA5C7 E603                       	smpsAlterVol        $03
000AA5C9 E7A2                       	dc.b	smpsNoAttack, nA2
000AA5CB E604                       	smpsAlterVol        $04
000AA5CD E7A2                       	dc.b	smpsNoAttack, nA2
000AA5CF E606                       	smpsAlterVol        $06
000AA5D1 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000AA5D4 E610                       	smpsAlterVol        $10
000AA5D6 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000AA5D9 E610                       	smpsAlterVol        $10
000AA5DB E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000AA5E0 F2                         	smpsStop
000AA5E1                            
000AA5E1                            ; PSG3 Data
000AA5E1                            Fart_PSG3:
000AA5E1 F2                         	smpsStop
000AA5E2                            
000AA5E2                            ; FM Voices
000AA5E2                            Fart_Voices:
000AA5E2                            ;	Voice $00
000AA5E2                            ;	$39
000AA5E2                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000AA5E2                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000AA5E2                            	smpsVcAlgorithm     $01
000AA5E2                            	smpsVcFeedback      $07
000AA5E2                            	smpsVcUnusedBits    $00
000AA5E2                            	smpsVcDetune        $00, $07, $03, $07
000AA5E2                            	smpsVcCoarseFreq    $01, $01, $02, $00
000AA5E2                            	smpsVcRateScale     $00, $03, $03, $03
000AA5E2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA5E2                            	smpsVcAmpMod        $00, $00, $00, $00
000AA5E2                            	smpsVcDecayRate1    $00, $00, $00, $04
000AA5E2                            	smpsVcDecayRate2    $00, $00, $16, $1F
000AA5E2                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000AA5E2                            	smpsVcReleaseRate   $0A, $09, $00, $00
000AA5E2 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000AA5FB                            
000AA5FB                            ;	Voice $01
000AA5FB                            ;	$00
000AA5FB                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000AA5FB                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000AA5FB                            	smpsVcAlgorithm     $00
000AA5FB                            	smpsVcFeedback      $00
000AA5FB                            	smpsVcUnusedBits    $00
000AA5FB                            	smpsVcDetune        $00, $00, $00, $00
000AA5FB                            	smpsVcCoarseFreq    $00, $00, $00, $00
000AA5FB                            	smpsVcRateScale     $00, $00, $00, $00
000AA5FB                            	smpsVcAttackRate    $00, $00, $00, $00
000AA5FB                            	smpsVcAmpMod        $00, $00, $00, $00
000AA5FB                            	smpsVcDecayRate1    $00, $00, $00, $00
000AA5FB                            	smpsVcDecayRate2    $00, $00, $00, $00
000AA5FB                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000AA5FB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AA5FB 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000AA5FB 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000AA614                            		even
000AA614                            SoundA6:	incbin	sound\soundA6.bin
000AA644                            		even
000AA644                            SoundA7:	incbin	sound\soundA7.bin
000AA674                            		even
000AA674                            SoundA8:	incbin	sound\soundA8.bin
000AA6A8                            		even
000AA6A8                            SoundA9:	incbin	sound\soundA9.bin
000AA6BA                            		even
000AA6BA                            SoundAA:	incbin	sound\soundAA.bin
000AA6FC                            		even
000AA6FC                            SoundAB:	incbin	sound\soundAB.bin
000AA71C                            		even
000AA71C                            SoundAC:	incbin	sound\soundAC.bin
000AA750                            		even
000AA750                            SoundAD:	incbin	sound\soundAD.bin
000AA786                            		even
000AA786                            SoundAE:	incbin	sound\soundAE.bin
000AA7D0                            		even
000AA7D0                            SoundAF:	incbin	sound\soundAF.bin
000AA7FE                            		even
000AA7FE                            SoundB0:	incbin	sound\soundB0.bin
000AA830                            		even
000AA830                            SoundB1:	incbin	sound\soundB1.bin
000AA85C                            		even
000AA85C                            SoundB2:	incbin	sound\soundB2.bin
000AA8AC                            		even
000AA8AC                            SoundB3:	incbin	sound\soundB3.bin
000AA8F6                            		even
000AA8F6                            SoundB4:	include	sound\soundB4.asm
000AA8F6                            SndB4_Bumper_Header:
000AA8F6 =00000001                  smpsHeaderStartSong = 1
000AA8F6 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000AA8F8 01                         	smpsHeaderTempoSFX  $01
000AA8F9 03                         	smpsHeaderChanSFX   $03
000AA8FA                            
000AA90C                            
000AA90C                            ; FM5 Data
000AA90C                            SndB4_Bumper_FM5:
000AA90E F600 00                    	smpsJump            SndB4_Bumper_Jump00
000AA911                            
000AA911                            ; FM4 Data
000AA911                            SndB4_Bumper_FM4:
000AA911 F2                         	smpsStop
000AA912                            
000AA912                            SndB4_Bumper_Jump00:
000AA912 A020                       	dc.b	nG2, $20
000AA914 F2                         	smpsStop
000AA915                            
000AA915                            ; FM3 Data
000AA915                            SndB4_Bumper_FM3:
000AA915 F2                         	smpsStop
000AA916                            
000AA916                            SndB4_Bumper_Voices:
000AA916                            ;	Voice $00
000AA916                            ;	$32
000AA916                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000AA916                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000AA916                            	smpsVcAlgorithm     $02
000AA916                            	smpsVcFeedback      $06
000AA916                            	smpsVcUnusedBits    $00
000AA916                            	smpsVcDetune        $07, $07, $02, $00
000AA916                            	smpsVcCoarseFreq    $00, $00, $00, $04
000AA916                            	smpsVcRateScale     $00, $00, $00, $00
000AA916                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA916                            	smpsVcAmpMod        $00, $00, $00, $00
000AA916                            	smpsVcDecayRate1    $08, $00, $00, $09
000AA916                            	smpsVcDecayRate2    $0B, $00, $00, $09
000AA916                            	smpsVcDecayLevel    $00, $00, $00, $00
000AA916                            	smpsVcReleaseRate   $0F, $00, $00, $00
000AA916 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000AA916 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000AA930 00                         		even
000AA930                            SoundB5:	incbin	sound\soundB5.bin
000AA94E 00                         		even
000AA94E                            SoundB6:	incbin	sound\soundB6.bin
000AA96C                            		even
000AA96C                            SoundB7:	incbin	sound\soundB7.bin
000AA9A8                            		even
000AA9A8                            SoundB8:	incbin	sound\soundB8.bin
000AA9C6                            		even
000AA9C6                            SoundB9:	incbin	sound\soundB9.bin
000AAA2A                            		even
000AAA2A                            SoundBA:	incbin	sound\soundBA.bin
000AAA8E                            		even
000AAA8E                            SoundBB:	incbin	sound\soundBB.bin
000AAABA                            		even
000AAABA                            SoundBC:	incbin	sound\soundBC.bin
000AAAFC                            		even
000AAAFC                            SoundBD:	incbin	sound\soundBD.bin
000AAB50                            		even
000AAB50                            SoundBE:	incbin	sound\soundBE.bin
000AAB8A                            		even
000AAB8A                            SoundBF:	incbin	sound\soundBF.bin
000AABFC                            		even
000AABFC                            SoundC0:	incbin	sound\soundC0.bin
000AAC2A                            		even
000AAC2A                            SoundC1:	incbin	sound\soundC1.bin
000AAC84                            		even
000AAC84                            SoundC2:	incbin	sound\soundC2.bin
000AACAE                            		even
000AACAE                            SoundC3:	incbin	sound\soundC3.bin
000AAD28                            		even
000AAD28                            SoundC4:	incbin	sound\soundC4.bin
000AAE26                            		even
000AAE26                            SoundC5:	incbin	sound\soundC5.bin
000AAE8E                            		even
000AAE8E                            SoundC6:	incbin	sound\soundC6.bin
000AAED0                            		even
000AAED0                            SoundC7:	incbin	sound\soundC7.bin
000AAEFE                            		even
000AAEFE                            SoundC8:	incbin	sound\soundC8.bin
000AAF10                            		even
000AAF10                            SoundC9:	incbin	sound\soundC9.bin
000AAF3E                            		even
000AAF3E                            SoundCA:	incbin	sound\soundCA.bin
000AAF6C                            		even
000AAF6C                            SoundCB:	incbin	sound\soundCB.bin
000AAFB8                            		even
000AAFB8                            SoundCC:	incbin	sound\C9.ssf
000AAFE6                            		even
000AAFE6                            SoundCD:	incbin	sound\soundCD.bin
000AB012                            		even
000AB012                            SoundCE:	incbin	sound\soundCE.bin
000AB030 00                         		even
000AB030                            SoundCF:	incbin	sound\soundCF.bin
000AB068                            		even
000AB068                            SoundD0:	incbin	sound\soundD0.bin
000AB0A2                            		even
000AB0A2                            SegaPCM:	incbin	sound\segapcm.bin
000C51F8                            SegaPCM_end:
000C51F8                            	even
000C51F8                            
000C51F8                            IdiotPCM:	incbin	sound\youare.bin
000CF2C9                            IdiotPCM_end:
000CF2CA 00                         	even
000CF2CA                            
000CF2CA                            GM_AntiTMSS:	include _inc/GM_AntiTMSS.asm
000CF2CA                            ;GM_AntiTMSS:
000CF2CA 4EB8 1514                  		jsr	ClearScreen
000CF2CE                            
000CF2CE 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000CF2D8 41FA 0000                  		lea	@nem(pc),a0		; load Gomer patterns
000CF2DC 4EB8 1690                  		jsr	NemDec
000CF2E0 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
000CF2EA 41F9 0006 BAF6             		lea	(Nem_CreditText).l,a0	; load alphabet
000CF2F0 4EB8 1690                  		jsr	NemDec
000CF2F4 43F9 00FF 0000             		lea	($FF0000).l,a1
000CF2FA 41FA 0000                  		lea	@eni(pc),a0		; load mappings for Gomer credits
000CF2FE 7000                       		moveq	#0,d0
000CF300 4EB8 196E                  		jsr	EniDec
000CF304 43F9 00FF 0000             		lea	($FF0000).l,a1
000CF30A 203C 4000 0003             		move.l	#$40000003,d0
000CF310 7227                       		moveq	#$27,d1
000CF312 741B                       		moveq	#$1B,d2
000CF314 4EB8 1670                  		jsr	ShowVDPGraphics
000CF318 41FA 0000                  		lea	@pal(pc),a0
000CF31C 43F8 FB80                  		lea	($FFFFFB80).w,a1
000CF320 701F                       		moveq	#$1F,d0
000CF322                            @palset:
000CF322 22D8                       		move.l	(a0)+,(a1)+
000CF324 51C8 FFFC                  		dbf	d0,@palset
000CF328                            
000CF328 33FC 8C8B 00C0 0004        		move.w	#$8C8B,($C00004).l	; S/H mode, single res interlace
000CF330 11FC 0000 F600             		move.b	#0,($FFFFF600).w	; make sure not to be assumed to be the title screen
000CF336 31FC 000B FFF4             		move.w	#$B,($FFFFFFF4).w	; set frame
000CF33C 41F8 D080                  		lea	($FFFFD080).w,a0
000CF340 10BC 0001                  		move.b	#1,(a0)
000CF344 4EB9 0001 7FB8             		jsr	Obj8A
000CF34A 0068 E000 0002             		or.w	#$E000,2(a0)		; S/H brightness, palette 4
000CF350 4EB9 0000 E302             		jsr	BuildSprites
000CF356                            
000CF356 3038 F60C                  		move.w	($FFFFF60C).w,d0
000CF35A 0000 0040                  		ori.b	#$40,d0
000CF35E 0880 0003                  		bclr	#3,d0
000CF362 33C0 00C0 0004             		move.w	d0,($C00004).l
000CF368 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w	; SMPS needs a frame to init
000CF36E 4EB8 2D54                  		jsr	DelayProgram
000CF372 303C 0086                  		move.w	#$86,d0			; play title screen music
000CF376 4EB8 15E6                  		jsr	PlaySound
000CF37A                            
000CF37A 4EB8 1FC4                  		jsr	Pal_FadeTo
000CF37E 31FC 00B4 F614             		move.w	#180,($FFFFF614).w
000CF384                            @mainloop:
000CF384 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000CF38A 4EB8 2D54                  		jsr	DelayProgram
000CF38E 4A78 F614                  		tst.w	($FFFFF614).w		; if timer isn't up, loop
000CF392 66F0                       		bne.s	@mainloop
000CF394 303C 0080                  		move.w	#$80,d0			; if player is holding start, exit
000CF398 C038 F604                  		and.b	($FFFFF604).w,d0
000CF39C 67E6                       		beq.s	@mainloop
000CF39E 4E75                       		rts
000CF3A0                            @nem:	incbin artnem\tmss.bin
000D0F30                            	even
000D0F30                            @eni:	incbin mapeni\tmss.bin
000D1038                            	even
000D1038                            @pal:	incbin pallet\tmss.bin
000D10B8                            	even
000D10B8                            	even
000D10B8                            
000D10B8                            Minecraft:	include	minecraft\code\main.asm
000D10B8                            ; Minecraft: Very Legacy Console Edition
000D10B8                            ; Main file
000D10B8                            
000D10B8                            ;	align	$20000
000D10B8                            	opt	l.
000D10B8                            	include	"minecraft\code\variables.asm"
000D10B8                            ; Minecraft: Very Legacy Console Edition
000D10B8                            ; Variable Definitions
000D10B8                            
000D10B8 =00000040                  MAP_HEIGHT	equ	64
000D10B8 =00000100                  MAP_WIDTH	equ	256
000D10B8                            
000D10B8                            		rsset	$FF0000
000D10B8 =00FF0000                  mcRAM		rs.b	0
000D10B8 =00FF0000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000D10B8 =00FF4000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000D10B8                            
000D10B8                            		rsset	$FFFF8000
000D10B8 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000D10B8 =FFFF8E80                  planeBuffer_End	rs.b	0
000D10B8 =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
000D10B8                            
000D10B8 =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000D10B8 =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000D10B8 =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000D10B8 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000D10B8                            
000D10B8 =FFFF8E88                  vblankWait	rs.w	1
000D10B8                            
000D10B8                            		rsset	__rs&$FFFFFF
000D10B8 =00FF8E8A                  mcRAM_End	rs.b	0
000D10B8                            
000D10B8                            ; VRAM Definitions
000D10B8 =00000020                  TILE		equ	32			; number of bytes a single tile occupies in VRAM
000D10B8                            
000D10B8                            		rsreset
000D10B8                            
000D10B8 =00000000                  vramEmptyTile	rs.b	TILE
000D10B8 =00000020                  vramTerrain	rs.b	255*TILE
000D10B8 =00002000                  vramBackground	rs.b	384*TILE
000D10B8                            
000D10B8 =0000C000                  VRAM_PLANE_A	equ	$C000
000D10B8 =0000D000                  VRAM_PLANE_W	equ	$D000
000D10B8 =0000E000                  VRAM_PLANE_B	equ	$E000
000D10B8                            
000D10B8 =0000F800                  VRAM_SPR_LIST	equ	$F800
000D10B8 =0000FC00                  VRAM_HSCROLL	equ	$FC00
000D10B8 =0000FC00                  VRAM_HSCROLL	equ	$FC00
000D10B8                            	include	"minecraft\code\macros.asm"
000D10B8                            ; =========================================================================================================================================================
000D10B8                            ; MegaDrive macros
000D10B8                            ; =========================================================================================================================================================
000D10B8                            clrRAM		macro	starta, enda
000D10B8                            		local	endaddr
000D10B8                            		if narg<2
000D10B8                            endaddr			EQUS	"\starta\_End"
000D10B8                            		else
000D10B8                            endaddr			EQUS	"\enda"
000D10B8                            		endif
000D10B8                            
000D10B8                            		moveq	#0,d0
000D10B8                            
000D10B8                            		if ((\starta)&$8000)=0
000D10B8                            			lea	\starta,a1
000D10B8                            		else
000D10B8                            			lea	(\starta).w,a1
000D10B8                            		endif
000D10B8                            		if (\starta)&1
000D10B8                            			move.b	d0,(a1)+
000D10B8                            		endif
000D10B8                            
000D10B8                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
000D10B8                            .Clear\@:	move.l	d0,(a1)+
000D10B8                            		dbf	d1,.Clear\@
000D10B8                            
000D10B8                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
000D10B8                            			move.w	d0,(a1)+
000D10B8                            		endif
000D10B8                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
000D10B8                            			move.b	d0,(a1)+
000D10B8                            		endif
000D10B8                            		endm
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            ; Disable interrupts
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            ; ARGUMENTS:
000D10B8                            ;	Nothing
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            ; RETURNS:
000D10B8                            ;	Nothing
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            intsOff		macros
000D10B8                            		ori	#$700,sr
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            ; Enable interrupts
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            ; ARGUMENTS:
000D10B8                            ;	Nothing
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            ; RETURNS:
000D10B8                            ;	Nothing
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            intsOn		macros
000D10B8                            		andi	#$F8FF,sr
000D10B8                            
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            ; VDP command instruction
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            ; ARGUMENTS:
000D10B8                            ;	addr	- Address in VDP memory
000D10B8                            ;	type	- Type of VDP memory
000D10B8                            ;	rwd	- VDP command
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            ; RETURNS:
000D10B8                            ;	Nothing
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8 =00000021                  VRAM		EQU	%100001		; VRAM
000D10B8 =0000002B                  CRAM		EQU	%101011		; CRAM
000D10B8 =00000025                  VSRAM		EQU	%100101		; VSRAM
000D10B8 =0000000C                  READ		EQU	%001100		; VDP read
000D10B8 =00000007                  WRITE		EQU	%000111		; VDP write
000D10B8 =00000027                  DMA		EQU	%100111		; VDP DMA
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            vdpCmd		macro	ins, addr, type, rwd, end, end2
000D10B8                            		if narg=5
000D10B8                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
000D10B8                            		elseif narg>=6
000D10B8                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
000D10B8                            		else
000D10B8                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
000D10B8                            		endif
000D10B8                            		endm
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            ; VDP DMA from 68000 memory to VDP memory
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            ; ARGUMENTS:
000D10B8                            ;	src	- Source address in 68000 memory
000D10B8                            ;	dest	- Destination address in VDP memory
000D10B8                            ;	len	- Length of data in bytes
000D10B8                            ;	type	- Type of VDP memory
000D10B8                            ;	a6.l	- VDP control port
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            ; RETURNS:
000D10B8                            ;	Nothing
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            dma68k		macro	src, dest, len, type
000D10B8                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
000D10B8                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
000D10B8                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
000D10B8                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
000D10B8                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
000D10B8                            		move.w	(sp)+,(a6)
000D10B8                            		endm
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D10B8                            
000D10B8                            MC_Init:
000D10B8 007C 0700                  		intsOff						; disable CPU interrupts
000D10BC 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
000D10C4                            
000D10C4 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
000D10CA 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
000D10CE                            
000D10CE 3CBC 8230                  		move.w	#$8200+(VRAM_PLANE_A>>10),(a6)		; set plane A address
000D10D2 3CBC 8334                  		move.w	#$8300+(VRAM_PLANE_W>>10),(a6)		; set plane W address
000D10D6 3CBC 8407                  		move.w	#$8400+(VRAM_PLANE_B>>13),(a6)		; set plane B address
000D10DA 3CBC 857C                  		move.w	#$8500+(VRAM_SPR_LIST>>9),(a6)		; set sprite table address
000D10DE                            		
000D10DE 3CBC 8B00                  		move.w	#$8B00,(a6)				; EXT-INT off, VScroll by screen, HScroll by screen
000D10E2 3CBC 8D3F                  		move.w	#$8D00+(VRAM_HSCROLL>>10),(a6)		; set HScroll table address
000D10E6 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000D10EA 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
000D10EE                            
000D1102 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
000D1106                            
000D1106                            .waitVBlank:	
000D1106 44D6                       		move.w	(a6),ccr				; is v-blank active?
000D1108 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
000D110A                            
000D113E 6100 0000                  		bsr.w	MC_LoadBackground
000D1142 6100 0000                  		bsr.w	MC_LoadWorld
000D1146                            
000D1146 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
000D114A 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
000D114E 027C F8FF                  		intsOn						; enable CPU interrupts
000D1152                            
000D1152                            .gameLoop:
000D1152 50F8 8E88                  		st.b	(vblankWait).w
000D1156 6100                       		bsr.s	MC_RenderBlocks
000D1158                            
000D1158                            .spin:
000D1158 4A38 8E88                  		tst.b	(vblankWait).w
000D115C 67F4                       		beq.s	.gameLoop
000D115E 60F8                       		bra.s	.spin
000D1160                            
000D1160                            ; ===========================================================================
000D1160                            ; ---------------------------------------------------------------------------
000D1160                            ; Render the Visible Portion of the World to the Screen
000D1160                            ; ---------------------------------------------------------------------------
000D1160                            MC_RenderBlocks:
000D1160 3038 8E80                  		move.w	(camXPosFG).w,d0	; Get the camera's x coordinate
000D1164 E648                       		lsr.w	#3,d0			; Divide by 8 to get the index of the tile within the row
000D1166 0240 00FF                  		andi.w	#$FF,d0			; Cap to a maximum index value of 0xFF
000D116A                            
000D116A 3238 8E82                  		move.w	(camYPosFG).w,d1	; Get the camera's y coordinate
000D116E EB49                       		lsl.w	#5,d1			; Make into row offset
000D1170 0241 3F00                  		andi.w	#$3F00,d1		; ^
000D1174                            
000D1174 41F9 00FF 0000             		lea	(mapCollBlocks).l,a0	; Load the world map collision layer into a0
000D117A 43F9 00FF 0000             		lea	(mapCollBlocks).l,a1	; Load the world map wall layer into a1
000D1180 45F8 8000                  		lea	(planeBuffer).w,a2	; Load the plane A buffer into a2
000D1184 7600                       		moveq	#0,d3			; Clear d3
000D1186 7C1C                       		moveq	#28,d6			; Load the number of rows as the outer loop counter
000D1188                            
000D1188                            .renderScreen:
000D1188 7E28                       		moveq	#40,d7			; Load the number of blocks in each row as the inner loop counter
000D118A 3401                       		move.w	d1,d2			; Load the offset into the current row into d2
000D118C 1400                       		move.b	d0,d2			; ^
000D118E                            
000D118E                            .renderRow:
000D118E 1630 2000                  		move.b	(a0,d2.w),d3		; Get the block ID at the current main layout coordinates
000D1192 6700                       		beq.s	.renderWall
000D1194                            
000D1194 383C 8000                  		move.w	#$8000,d4			; Set the priority bit
000D1198 D643                       		add.w	d3,d3				; Turn tile ID into index
000D119A 887B 3000                  		or.w	MC_BlockProperties(pc,d3.w),d4	; Combine with the tile render properties
000D119E 34C4                       		move.w	d4,(a2)+			; Load the corresponding tile to the plane A buffer
000D11A0                            		
000D11A0 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
000D11A2 51CF FFEA                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
000D11A6 6000                       		bra.s	.endRenderRow		; Branch
000D11A8                            
000D11A8                            .renderWall:
000D11A8 1631 2000                  		move.b	(a1,d2.w),d3		; Get the block ID at the current wall layout coordinates
000D11AC D643                       		add.w	d3,d3				; Turn tile ID into index
000D11AE 34FB 3000                  		move.w	MC_BlockProperties(pc,d3.w),(a2)+	; Load the corresponding tile to the plane A buffer
000D11B2                            
000D11B2 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
000D11B4 51CF FFD8                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
000D11B8                            
000D11B8                            .endRenderRow:
000D11B8 D4FC 002E                  		adda.w	#(64-41)*2,a2		; Skip the rest of the row in the plane buffer
000D11BC 0641 0100                  		add.w	#$100,d1		; Increment to the next row
000D11C0 0C41 3F00                  		cmpi.w	#$3F00,d1		; Check to make sure we're still in bounds
000D11C4 6200                       		bhi.s	.inBounds		; If so, branch
000D11C6 323C 3F00                  		move.w	#$3F00,d1		; If not, render the last row for the rest of the screen (Bedrock)
000D11CA                            
000D11CA                            .inBounds:	
000D11CA 51CE FFBC                  		dbf	d6,.renderScreen	; Loop until the entire screen is rendered
000D11CE 4E75                       		rts
000D11D0                            
000D11D0                            ; ---------------------------------------------------------------------------
000D11D0                            block_entry	macro	tileID, palLine, priority
000D11D0                            	if (narg<3)
000D11D0                            		dc.w	(palLine<<13)|tileID
000D11D0                            	else
000D11D0                            		dc.w	$8000|(palLine<<13)|tileID
000D11D0                            	endif
000D11D0                            		endm
000D11D0                            
000D11D0                            MC_BlockProperties:
000D1210                            
000D122E                            
000D122E                            ; ===========================================================================
000D122E                            ; ---------------------------------------------------------------------------
000D122E                            ; Clear The Screen
000D122E                            ; ---------------------------------------------------------------------------
000D122E                            MC_ClearScreen:
000D122E 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
000D1232                            
000D1232 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
000D1238 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000D123C 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
000D1242 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000D1248                            
000D1248 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000D124A 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
000D124C                            
000D124C 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
000D1252 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000D1256 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
000D125C 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000D1262                            
000D1262 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000D1264 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
000D1266                            
000D1266 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
000D126C 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000D1270 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
000D1276 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000D127C                            
000D127C 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000D127E 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
000D1280                            
000D1280 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000D1284 4E75                       		rts						; return
000D1286                            ; ---------------------------------------------------------------------------
000D1286                            
000D1286                            ; ===========================================================================
000D1286                            ; ---------------------------------------------------------------------------
000D1286                            ; Load the Background
000D1286                            ; ---------------------------------------------------------------------------
000D1286                            MC_LoadBackground:
000D12A0                            
000D12A6 41F9 0000 0000             		lea	MC_BGMap,a0
000D12AC 3E3C 07FF                  		move.w	#(32*64)-1,d7				; Set loop count to plane size - 1
000D12B0                            
000D12B0                            .loop:
000D12B0 3018                       		move.w	(a0)+,d0
000D12B2 6700                       		beq.s	.empty
000D12B4 0640 0100                  		add.w	#(vramBackground>>5),d0
000D12B8 0040 6000                  		ori.w	#(3<<13),d0
000D12BC                            
000D12BC                            .empty:
000D12BC 3D40 FFFC                  		move.w	d0,-4(a6)
000D12C0 51CF FFEE                  		dbf	d7,.loop
000D12C4 4E75                       		rts						; return
000D12C6                            
000D12C6                            ; ===========================================================================
000D12C6                            ; ---------------------------------------------------------------------------
000D12C6                            ; Load the World
000D12C6                            ; ---------------------------------------------------------------------------
000D12C6                            MC_LoadWorld:
000D12C6 41F9 0000 0000             		lea	MC_TestMap,a0
000D12CC 43F9 00FF 4000             		lea	mapWallBlocks,a1
000D12D2 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
000D12D6                            
000D12D6                            .loadWalls:
000D12D6 22D8                       		move.l	(a0)+,(a1)+
000D12D8 51CF FFFC                  		dbf	d7,.loadWalls
000D12DC                            
000D12DC 41F9 0000 0000             		lea	MC_TestMap,a0
000D12E2 43F9 00FF 0000             		lea	mapCollBlocks,a1
000D12E8 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
000D12EC                            
000D12EC                            .loadBlocks:
000D12EC 22D8                       		move.l	(a0)+,(a1)+
000D12EE 51CF FFFC                  		dbf	d7,.loadBlocks
000D12F2 4E75                       		rts						; return
000D12F4                            
000D12F4                            ; ===========================================================================
000D12F4                            ; ---------------------------------------------------------------------------
000D12F4                            ; VBlank Interrupt
000D12F4                            ; ---------------------------------------------------------------------------
000D12F4                            MC_VInt:
000D130E                            
000D130E 3038 8E80                  		move.w	(camXPosFG).w,d0			; update scrolling
000D1312 0240 0007                  		andi.w	#7,d0					; ^
000D1316 4440                       		neg.w	d0					; ^
000D131E 3D40 FFFC                  		move.w	d0,-4(a6)				; ^
000D1322                            
000D1322 5278 8E80                  		addq.w	#1,(camXPosFG).w			
000D1326 51F8 8E88                  		sf.b	(vblankWait).w
000D132A 4E73                       		rte						; return
000D132C                            ; ---------------------------------------------------------------------------
000D132C                            
000D132C                            ; ---------------------------------------------------------------------------
000D132C                            MC_Palette:
000D132C 0E84 08AE 068E 046C 0EE0+  	dc.w	$E84, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
000D134C 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
000D136C 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
000D138C 0000 0EEE 0CAA 0A88 0866+  	dc.w	$000, $EEE, $CAA, $A88, $866, $644, $422, $46A, $448, $226, $6C4, $680, $8CE, $6AC, $EA6, $E44
000D13AC                            ; ---------------------------------------------------------------------------
000D13AC                            MC_Terrain:
000D13AC                            	incbin	"minecraft\assets\bin\terrain.bin"
000D182C                            MC_Terrain_End:
000D182C                            	even
000D182C                            ; ---------------------------------------------------------------------------
000D182C                            MC_BGArt:
000D182C                            	incbin	"minecraft\assets\bin\bgArt.bin"
000D466C                            MC_BGArt_End:
000D466C                            	even
000D466C                            ; ---------------------------------------------------------------------------
000D466C                            MC_BGMap:
000D466C                            	incbin	"minecraft\assets\bin\bgMap.bin"
000D566C                            MC_BGMap_End:
000D566C                            	even
000D566C                            ; ---------------------------------------------------------------------------
000D566C                            MC_TestMap:
000D566C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 00
000D576C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 01
000D586C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 02
000D596C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 03
000D5A6C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 04
000D5B6C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 05
000D5C6C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 06
000D5D6C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 07
000D5E6C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 09
000D5F6C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0A
000D606C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0B
000D616C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0C
000D626C 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0E
000D636C                            	
000D636C 0101 0101 0101 0101 0101+  	dcb.b	32,$01	; Row 0F
000D638C 0202 0202 0202 0202 0202+  	dcb.b	32,$02	; Row 0F
000D63AC 0303 0303 0303 0303 0303+  	dcb.b	32,$03	; Row 0F
000D63CC 0404 0404 0404 0404 0404+  	dcb.b	32,$04	; Row 0F
000D63EC 0505 0505 0505 0505 0505+  	dcb.b	32,$05	; Row 0F
000D640C 0606 0606 0606 0606 0606+  	dcb.b	32,$06	; Row 0F
000D642C 0707 0707 0707 0707 0707+  	dcb.b	32,$07	; Row 0F
000D644C 0808 0808 0808 0808 0808+  	dcb.b	32,$08	; Row 0F
000D646C                            
000D646C 0303 0303 0303 0303 0303+  	dcb.b	256,$03	; Row 10
000D656C 0202 0202 0202 0202 0202+  	dcb.b	256,$02	; Row 11
000D666C 0202 0202 0202 0202 0202+  	dcb.b	256,$02	; Row 12
000D676C 0202 0202 0202 0202 0202+  	dcb.b	256,$02	; Row 13
000D686C 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 14
000D696C 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 15
000D6A6C 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 16
000D6B6C 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 17
000D6C6C 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 19
000D6D6C 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 1A
000D6E6C 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 1B
000D6F6C 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 1C
000D706C 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 1E
000D716C 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 1F
000D726C                            MC_TestMap_End:
000D726C                            MC_TestMap_End:
000D726C                            ; end of 'ROM'
000D726C                            EndOfRom:
000D726C                            
000D726C                            
